Index: vendor/branch/5058Y_ALIE/packages/apps/Settings/src/com/android/settings/BootedReceiver.java
===================================================================
--- vendor/branch/5058Y_ALIE/packages/apps/Settings/src/com/android/settings/BootedReceiver.java	(revision 0)
+++ vendor/branch/5058Y_ALIE/packages/apps/Settings/src/com/android/settings/BootedReceiver.java	(revision 13147)
@@ -0,0 +1,121 @@
+package com.android.settings;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.util.Log;
+import com.mediatek.pq.PictureQuality;
+
+import java.util.Calendar;
+import java.io.File;
+import android.os.IBinder;
+import android.os.ServiceManager;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+import android.os.SystemProperties;
+
+/**
+ * Created by Administrator on 2017/8/26.
+ */
+public class BootedReceiver extends BroadcastReceiver {
+    private static final String PREFERENCE_NAME = "com.android.settings";
+    public static final String OPEN_ACTION = "com.android.settings.nightmode.open";
+    public static final String CLOSE_ACTION = "com.android.settings.nightmode.close";
+    private static final String SETTING_TIME = "automate_schedule";
+    private static final String NIGHT_MODE_ON_OROFF = "nightMode";
+    private final String OPEN = "open_nightMode";
+    private final String CLOSE = "close_nightMode";
+    private static final String TIME_ON = "timeOn";
+    private static final String TIME_Off = "timeOff";
+    private String timeOn = "22:00";
+    private String timeOff = "07:00";
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+
+        /*SharedPreferences sp = context.getSharedPreferences(PREFERENCE_NAME, 0);
+        boolean definiteTime = sp.getBoolean(SETTING_TIME, false);
+         boolean mode = sp.getBoolean(NIGHT_MODE_ON_OROFF, false);
+
+        if (mode) {
+			Log.e("boot", "--------mode");
+            PictureQuality.enableBlueLight(true);
+        } else if (definiteTime) {
+        Log.e("boot", "--------definiteTime");
+            String[] timeOns = sp.getString(TIME_ON, timeOn).split(":");
+            String[] timeOffs = sp.getString(TIME_Off, timeOff).split(":");
+			Log.e("timeOn", sp.getString(TIME_ON, timeOn));
+			Log.e("timeOff", sp.getString(TIME_Off, timeOff));
+            NightModeUtils.sendBroad(OPEN_ACTION, context, OPEN, Integer.parseInt(timeOns[0]), Integer.parseInt(timeOns[1]), 0);
+            NightModeUtils.sendBroad(CLOSE_ACTION, context, CLOSE, Integer.parseInt(timeOffs[0]), Integer.parseInt(timeOffs[1]), -1);
+            Calendar c = Calendar.getInstance();
+            int mHour = c.get(Calendar.HOUR_OF_DAY);
+            int mMinute = c.get(Calendar.MINUTE);
+            int h = Integer.parseInt(timeOffs[0]);
+           if(mHour>Integer.parseInt(timeOns[0]) ){
+		   		if(mHour<Integer.parseInt(timeOffs[0])){
+					PictureQuality.enableBlueLight(true);
+					Log.e("boot", "--------1");
+				}
+            }else if(mHour==Integer.parseInt(timeOns[0])) {
+                if(mMinute>=Integer.parseInt(timeOns[1])){
+                    PictureQuality.enableBlueLight(true);
+					Log.e("boot", "--------2");
+                }
+            }else if(mHour<Integer.parseInt(timeOns[0])&&mHour<Integer.parseInt(timeOffs[0])){
+                PictureQuality.enableBlueLight(true);
+				Log.e("boot", "--------3");
+            }else if(mHour==Integer.parseInt(timeOffs[0])){
+                if(mMinute<Integer.parseInt(timeOffs[1])){
+                    PictureQuality.enableBlueLight(true);
+					Log.e("boot", "--------4");
+                }
+            }
+
+
+
+
+		} else{
+			Log.e("----","-----------------------");
+			}*/
+
+		SystemProperties.set("persist.sys.cmasalert", "0");
+			
+
+    }
+
+
+    /*
+    private void writeToNv() {
+        byte[] buff = new byte[2097152 + 16];
+        byte[] readBuff = null;
+        byte[] writeBuff = {'1', '0', '9', 'f', '1', '0', 'e', 'e', 'd', '3', 'f', '0', '2', '1', 'e', '3'};
+
+        IBinder binder = ServiceManager.getService("NvRAMAgent");
+        NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);
+        
+        
+        try {
+            readBuff = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return ;
+        }
+
+        System.arraycopy(readBuff, 0, buff, 0, readBuff.length);
+        for(int i = 0 ; i < writeBuff.length; i++){
+            buff[2097152 + i] = (byte)writeBuff[i];
+        }
+
+        try {
+            agent.writeFileByName(PRODUCT_INFO_NVRAM_PATH + , buff);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return ;
+        }
+    }
+    */
+
+    
+}
