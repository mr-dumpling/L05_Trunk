Index: vendor/branch/5058A_Entel_Chile/vendor/google/products/gms.mk
===================================================================
--- vendor/branch/5058A_Entel_Chile/vendor/google/products/gms.mk	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/vendor/google/products/gms.mk	(revision 5228)
@@ -1,72 +0,0 @@
-###############################################################################
-# GMS home folder location
-# Note: we cannot use $(my-dir) in this makefile
-ANDROID_PARTNER_GMS_HOME := vendor/google
-
-# GMS mandatory core packages
-PRODUCT_PACKAGES := \
-    ConfigUpdater \
-    GoogleBackupTransport \
-    GoogleExtServices \
-    GoogleExtShared \
-    GoogleFeedback \
-    GoogleLoginService \
-    GoogleOneTimeInitializer \
-    GooglePackageInstaller \
-    GooglePartnerSetup \
-    GooglePrintRecommendationService \
-    GoogleServicesFramework \
-    GoogleCalendarSyncAdapter \
-    GoogleContactsSyncAdapter \
-    GoogleTTS \
-    GmsCore \
-    Phonesky \
-    SetupWizard \
-    CalendarGoogle \
-    CalculatorGoogle \
-    DeskClockGoogle \
-    WebViewGoogle
-
-# GMS mandatory libraries
-PRODUCT_PACKAGES += \
-    com.google.android.maps.jar \
-    com.google.android.media.effects.jar
-
-# Overlay for GMS devices
-$(call inherit-product, device/sample/products/backup_overlay.mk)
-$(call inherit-product, device/sample/products/location_overlay.mk)
-PRODUCT_PACKAGE_OVERLAYS += $(ANDROID_PARTNER_GMS_HOME)/products/gms_overlay
-
-# Configuration files for GMS apps
-PRODUCT_COPY_FILES += \
-    $(ANDROID_PARTNER_GMS_HOME)/etc/preferred-apps/google.xml:system/etc/preferred-apps/google.xml \
-    $(ANDROID_PARTNER_GMS_HOME)/etc/sysconfig/google.xml:system/etc/sysconfig/google.xml
-
-# GMS mandatory application packages
-# Note: Duo is mandatory for telephony devices, whereas Hangouts is for non-telephony devices.
-PRODUCT_PACKAGES += \
-    Chrome \
-    Drive \
-    Gmail2 \
-    Duo \
-    Maps \
-    Music2 \
-    Photos \
-    Velvet \
-    Videos \
-    YouTube
-
-# GMS optional application packages
-PRODUCT_PACKAGES += \
-    Keep
-
-# GMS sample application packages
-# GmsSampleLayout customizes the default home screen layout of Launcher3
-# OpaSuwIntegrationSample cutomizes Google Assistant/Now opt-in screen in Android 7.1 SetupWizard
-PRODUCT_PACKAGES += \
-
-# Overrides
-PRODUCT_PROPERTY_OVERRIDES += \
-    ro.setupwizard.require_network=no \
-    ro.setupwizard.mode=OPTIONAL \
-    ro.com.google.gmsversion=7.1_r7
Index: vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/MmsConfig.java
===================================================================
--- vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/MmsConfig.java	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/MmsConfig.java	(revision 5228)
@@ -1,753 +0,0 @@
-/*
-* Copyright (C) 2014 MediaTek Inc.
-* Modification based on code covered by the mentioned copyright
-* and/or permission notice(s).
-*/
-/*
- * Copyright (C) 2009 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.mms;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.res.XmlResourceParser;
-import android.database.Cursor;
-import android.os.Bundle;
-import android.preference.PreferenceManager;
-import android.provider.Telephony;
-import android.telephony.SubscriptionManager;
-import android.util.Log;
-
-import com.android.internal.telephony.TelephonyProperties;
-import com.android.mms.util.FeatureOption;
-
-import com.mediatek.custom.CustomProperties;
-import com.mediatek.ipmsg.util.IpMessageUtils;
-import com.mediatek.mms.ext.IOpMmsConfigExt;
-import com.mediatek.mms.ipmessage.IMmsConfigExt;
-import com.mediatek.opmsg.util.OpMessageUtils;
-import com.mediatek.telephony.TelephonyManagerEx;
-
-import org.xmlpull.v1.XmlPullParser;
-import org.xmlpull.v1.XmlPullParserException;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-public class MmsConfig {
-    private static final String TAG = "MmsConfig";
-    private static final boolean DEBUG = true;
-    private static final boolean LOCAL_LOGV = false;
-
-    private static final String DEFAULT_HTTP_KEY_X_WAP_PROFILE = "x-wap-profile";
-    private static final String DEFAULT_USER_AGENT = "Android-Mms/2.0";
-
-    /// KK migration, for default MMS function. @{
-    private static final String MMS_APP_PACKAGE = "com.android.mms";
-
-    private static final String SMS_PROMO_DISMISSED_KEY = "sms_promo_dismissed_key";
-    ///@}
-    private static final int MAX_IMAGE_HEIGHT = 480;
-    private static final int MAX_IMAGE_WIDTH  = 640;
-
-    /**
-     * Whether to hide MMS functionality from the user (i.e. SMS only).
-     */
-    private static boolean mTransIdEnabled = false;
-    private static int mMmsEnabled = 1;                         // default to true
-    private static int mMaxMessageSize = 300 * 1024;            // default to 300k max size
-    private static String mUserAgent = DEFAULT_USER_AGENT;
-    private static String mUaProfTagName = DEFAULT_HTTP_KEY_X_WAP_PROFILE;
-    private static String mUaProfUrl = null;
-    private static String mHttpParams = null;
-    private static String mHttpParamsLine1Key = null;
-    private static String mEmailGateway = null;
-    private static int mMaxImageHeight = MAX_IMAGE_HEIGHT;      // default value
-    private static int mMaxImageWidth = MAX_IMAGE_WIDTH;        // default value
-    private static int mRecipientLimit = Integer.MAX_VALUE;     // default value
-    private static int mDefaultSMSMessagesPerThread = 10000;    // default value
-    private static int mDefaultMMSMessagesPerThread = 1000;     // default value
-    private static int mMinMessageCountPerThread = 2;           // default value
-    private static int mMaxMessageCountPerThread = 10000;        // default value
-    private static int mMinimumSlideElementDuration = 7;        // default to 7 sec
-    private static boolean mNotifyWapMMSC = false;
-    private static boolean mAllowAttachAudio = true;
-
-    // This flag is somewhat confusing. If mEnableMultipartSMS is true, long sms messages are
-    // always sent as multi-part sms messages, with no checked limit on the number of segments.
-    // If mEnableMultipartSMS is false, then mSmsToMmsTextThreshold is used to determine the
-    // limit of the number of sms segments before turning the long sms message into an mms
-    // message. For example, if mSmsToMmsTextThreshold is 4, then a long sms message with three
-    // or fewer segments will be sent as a multi-part sms. When the user types more characters
-    // to cause the message to be 4 segments or more, the send button will show the MMS tag to
-    // indicate the message will be sent as an mms.
-    private static boolean mEnableMultipartSMS = true;
-
-    private static boolean mEnableSlideDuration = true;
-    private static boolean mEnableMMSReadReports = true;        // key: "enableMMSReadReports"
-    private static boolean mEnableSMSDeliveryReports = true;    // key: "enableSMSDeliveryReports"
-    private static boolean mEnableMMSDeliveryReports = true;    // key: "enableMMSDeliveryReports"
-    private static int mMaxTextLength = -1;
-
-    // This is the max amount of storage multiplied by mMaxMessageSize that we
-    // allow of unsent messages before blocking the user from sending any more
-    // MMS's.
-    private static int mMaxSizeScaleForPendingMmsAllowed = 4;       // default value
-
-    // Email gateway alias support, including the master switch and different rules
-    private static boolean mAliasEnabled = false;
-    private static int mAliasRuleMinChars = 2;
-    private static int mAliasRuleMaxChars = 48;
-
-    private static int mMaxSubjectLength = 40;  // maximum number of characters allowed for mms
-                                                // subject
-
-    /// M: google jb.mr1 patch, group mms
-    // If mEnableGroupMms is true, a message with multiple recipients, regardless of contents,
-    // will be sent as a single MMS message with multiple "TO" fields set for each recipient.
-    // If mEnableGroupMms is false, the group MMS setting/preference will be hidden in the settings
-    // activity.
-    private static boolean mEnableGroupMms = true;
-
-    private static final int RECIPIENTS_LIMIT = 50;
-
-    /// M: Mms size limit, default 300K.
-    private static int mUserSetMmsSizeLimit = 300;
-    /// M: Receive Mms size limit for 2G network
-    private static int mReceiveMmsSizeLimitFor2G = 200;
-    /// M: Receive Mms size limit for TD network
-    private static int mReceiveMmsSizeLimitForTD = 400;
-
-    /// M: default value
-    private static int mMaxRestrictedImageHeight = 1200;
-    private static int mMaxRestrictedImageWidth = 1600;
-    private static int mSmsRecipientLimit = 100;
-
-    private static boolean mDeviceStorageFull = false;
-
-    private static IOpMmsConfigExt mOpConfigExt = null;
-
-    // / M: Add for get max text size from ip message
-    private static Context mContext;
-
-    /// Add for support Auto Test.
-    public static boolean sIsRunTestCase = false;
-    public static boolean sIsDefaultSMSInTestCase = false;
-    /// @}
-
-    private static List<Integer> allQuickTextIds = new ArrayList<Integer>();
-    private static List<String> allQuickTexts = new ArrayList<String>();
-    public static IMmsConfigExt mIpConfig;
-
-    private static int sSmsToMmsTextThreshold = 6;
-    private static int sSmsToMmsTextThresholdForCT = 7;
-
-    private static void initPlugin(Context context) {
-        mOpConfigExt = OpMessageUtils.getOpMessagePlugin().getOpMmsConfigExt();
-        mIpConfig = IpMessageUtils.getIpMessagePlugin(context).getIpConfig();
-    }
-
-    public static void init(Context context) {
-        if (LOCAL_LOGV) {
-            Log.v(TAG, "MmsConfig.init()");
-        }
-        // Always put the mnc/mcc in the log so we can tell which mms_config.xml was loaded.
-        Log.d(TAG, "mnc/mcc: " +
-                android.os.SystemProperties.get(TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC));
-
-        mContext = context;
-        // initialize the operator plugin
-        initPlugin(context);
-
-        loadMmsSettings(context);
-
-        // add for ipmessage
-        mIpConfig.onIpInit(context);
-    }
-
-    /// KK migration, for default MMS function. @{
-    public static boolean isSmsEnabled(Context context) {
-        /// Add for support Auto Test.
-        if (sIsRunTestCase) {
-            return sIsDefaultSMSInTestCase;
-        }
-        /// @}
-        String defaultSmsApplication = Telephony.Sms.getDefaultSmsPackage(context);
-
-        if (defaultSmsApplication != null && defaultSmsApplication.equals(MMS_APP_PACKAGE)) {
-            return true;
-        }
-        return false;
-    }
-
-    public static boolean isSmsPromoDismissed(Context context) {
-        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
-        return preferences.getBoolean(SMS_PROMO_DISMISSED_KEY, false);
-    }
-
-    public static void setSmsPromoDismissed(Context context) {
-        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
-        SharedPreferences.Editor editor = preferences.edit();
-        editor.putBoolean(SMS_PROMO_DISMISSED_KEY, true);
-        editor.apply();
-    }
-
-    public static Intent getRequestDefaultSmsAppActivity() {
-        final Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
-        intent.putExtra(Telephony.Sms.Intents.EXTRA_PACKAGE_NAME, MMS_APP_PACKAGE);
-        return intent;
-    }
-    ///@}
-
-    public static int getSmsToMmsTextThresholdForC2K(Context context) {
-        if (hasUSIMInserted(context)) {
-            Log.d(TAG, "get getSmsToMmsTextThresholdForC2K" + sSmsToMmsTextThresholdForCT);
-            return sSmsToMmsTextThresholdForCT;
-        }
-        return sSmsToMmsTextThreshold;
-    }
-
-    /**
-     * M: For OM Version: check whethor has usim card.
-     * @param context the context.
-     * @return ture: has usim; false: not.
-     */
-    private static boolean hasUSIMInserted(Context context) {
-        if (context == null) {
-            return false;
-        }
-        int[] ids = SubscriptionManager.from(context).getActiveSubscriptionIdList();
-        if (ids != null && ids.length > 0) {
-            for (int subId : ids) {
-                if (isUSimType(subId)) {
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-
-    /**
-     * M: For EVDO: check the sim is whether UIM or not.
-     *
-     * @param subId the sim's sub id.
-     * @return true: UIM; false: not UIM.
-     */
-    private static boolean isUSimType(int subId) {
-        String phoneType = TelephonyManagerEx.getDefault().getIccCardType(subId);
-        if (phoneType == null) {
-            Log.d(TAG, "[isUIMType]: phoneType = null");
-            return false;
-        }
-        Log.d(TAG, "[isUIMType]: phoneType = " + phoneType);
-        return phoneType.equalsIgnoreCase("CSIM") || phoneType.equalsIgnoreCase("UIM")
-                || phoneType.equalsIgnoreCase("RUIM");
-    }
-
-    public static boolean getMmsEnabled() {
-        return mMmsEnabled == 1 ? true : false;
-    }
-
-    public static int getMaxMessageSize() {
-        if (LOCAL_LOGV) {
-            Log.v(TAG, "MmsConfig.getMaxMessageSize(): " + mMaxMessageSize);
-        }
-        return mMaxMessageSize;
-    }
-
-    /**
-     * This function returns the value of "enabledTransID" present in mms_config file.
-     * In case of single segment wap push message, this "enabledTransID" indicates whether
-     * TransactionID should be appended to URI or not.
-     */
-    public static boolean getTransIdEnabled() {
-        return mTransIdEnabled;
-    }
-
-    public static String getUserAgent() {
-        /// M: @{
-        String value = CustomProperties.getString(
-                CustomProperties.MODULE_MMS,
-                CustomProperties.USER_AGENT,
-                mUserAgent);
-        /// @}
-        return value;
-    }
-
-    public static String getUaProfTagName() {
-        return mUaProfTagName;
-    }
-
-    public static String getUaProfUrl() {
-        /// M: @{
-        String value = CustomProperties.getString(
-                CustomProperties.MODULE_MMS,
-                CustomProperties.UAPROF_URL,
-                mUaProfUrl);
-        /// @}
-        return value;
-    }
-
-    public static String getHttpParams() {
-        return mHttpParams;
-    }
-
-    public static String getHttpParamsLine1Key() {
-        return mHttpParamsLine1Key;
-    }
-
-    public static String getEmailGateway() {
-        return mEmailGateway;
-    }
-
-    public static int getMaxImageHeight() {
-        return mMaxImageHeight;
-    }
-
-    public static int getMaxImageWidth() {
-        return mMaxImageWidth;
-    }
-
-    public static int getRecipientLimit() {
-        return mRecipientLimit;
-    }
-
-    public static int getDefaultSMSMessagesPerThread() {
-        return mDefaultSMSMessagesPerThread;
-    }
-
-    public static int getDefaultMMSMessagesPerThread() {
-        return mDefaultMMSMessagesPerThread;
-    }
-
-    public static int getMinMessageCountPerThread() {
-        return mMinMessageCountPerThread;
-    }
-
-    public static int getMaxMessageCountPerThread() {
-        return mMaxMessageCountPerThread;
-    }
-
-    public static int getMinimumSlideElementDuration() {
-        return mMinimumSlideElementDuration;
-    }
-
-    public static boolean getMultipartSmsEnabled() {
-        return mEnableMultipartSMS;
-    }
-
-    public static boolean getSlideDurationEnabled() {
-        return mEnableSlideDuration;
-    }
-
-    public static boolean getMMSReadReportsEnabled() {
-        return mEnableMMSReadReports;
-    }
-
-    public static boolean getSMSDeliveryReportsEnabled() {
-        return mEnableSMSDeliveryReports;
-    }
-
-    public static boolean getMMSDeliveryReportsEnabled() {
-        return mEnableMMSDeliveryReports;
-    }
-
-    public static boolean getNotifyWapMMSC() {
-        return mNotifyWapMMSC;
-    }
-
-    public static int getMaxSizeScaleForPendingMmsAllowed() {
-        return mMaxSizeScaleForPendingMmsAllowed;
-    }
-
-    public static boolean isAliasEnabled() {
-        return mAliasEnabled;
-    }
-
-    public static int getAliasMinChars() {
-        return mAliasRuleMinChars;
-    }
-
-    public static int getAliasMaxChars() {
-        return mAliasRuleMaxChars;
-    }
-
-    public static boolean getAllowAttachAudio() {
-        return mAllowAttachAudio;
-    }
-
-    public static int getMaxSubjectLength() {
-        return mMaxSubjectLength;
-    }
-
-    /// M: google jb.mr1 patch, group mms
-    public static boolean getGroupMmsEnabled() {
-        return mEnableGroupMms;
-    }
-
-    public static final void beginDocument(XmlPullParser parser, String firstElementName)
-            throws XmlPullParserException, IOException
-    {
-        int type;
-        while ((type = parser.next()) != parser.START_TAG
-                   && type != parser.END_DOCUMENT) {
-            ;
-        }
-
-        if (type != parser.START_TAG) {
-            throw new XmlPullParserException("No start tag found");
-        }
-
-        if (!parser.getName().equals(firstElementName)) {
-            throw new XmlPullParserException("Unexpected start tag: found " + parser.getName() +
-                    ", expected " + firstElementName);
-        }
-    }
-
-    public static final void nextElement(XmlPullParser parser)
-            throws XmlPullParserException, IOException
-    {
-        int type;
-        while ((type = parser.next()) != parser.START_TAG
-                   && type != parser.END_DOCUMENT) {
-            ;
-        }
-    }
-
-    /// M:
-    /**
-     * Notes:for CMCC customization,whether to enable SL automatically lanuch.
-     * default set false
-     */
-    private static boolean mSlAutoLanuchEnabled = false;
-    public static boolean getSlAutoLanuchEnabled() {
-        return mSlAutoLanuchEnabled;
-    }
-
-    public static void setDeviceStorageFullStatus(boolean bFull) {
-        mDeviceStorageFull = bFull;
-    }
-
-    public static boolean getDeviceStorageFullStatus() {
-        return mDeviceStorageFull;
-    }
-
-    /// M: new feature, init defualt quick text @{
-    public static void setInitQuickText(boolean init) {
-        SharedPreferences sp =
-            PreferenceManager.getDefaultSharedPreferences(MmsApp.getApplication());
-        SharedPreferences.Editor editor = sp.edit();
-        editor.putBoolean("InitQuickText", init);
-        editor.commit();
-    }
-
-    public static boolean getInitQuickText() {
-        SharedPreferences sp =
-            PreferenceManager.getDefaultSharedPreferences(MmsApp.getApplication());
-        boolean isFristInit = sp.getBoolean("InitQuickText", true);
-        return isFristInit;
-    }
-    /// @}
-
-    public static List<String> getQuicktexts() {
-        return allQuickTexts;
-    }
-
-    public static List<Integer> getQuicktextsId() {
-        return allQuickTextIds;
-    }
-
-    public static int updateAllQuicktexts() {
-        Cursor cursor = mContext.getContentResolver().query(Telephony.MmsSms.CONTENT_URI_QUICKTEXT,
-                null, null, null, null);
-        allQuickTextIds.clear();
-        allQuickTexts.clear();
-        String[] defaultTexts = mContext.getResources().getStringArray(R.array.default_quick_texts);
-        int maxId = defaultTexts.length;
-        if (cursor != null) {
-            try {
-                while (cursor.moveToNext()) {
-                    int qtId = cursor.getInt(0);
-                    allQuickTextIds.add(qtId);
-                    String qtText = cursor.getString(1);
-                    if (qtText != null && !qtText.isEmpty()) {
-                        allQuickTexts.add(qtText);
-                    } else {
-                        allQuickTexts.add(defaultTexts[qtId - 1]);
-                    }
-                    if (qtId > maxId) {
-                        maxId = qtId;
-                    }
-                }
-            } finally {
-                cursor.close();
-            }
-        }
-        return maxId;
-    }
-
-    public static int getUserSetMmsSizeLimit(boolean isBytes) {
-        if (true == isBytes) {
-            return mUserSetMmsSizeLimit * 1024;
-        } else {
-            return mUserSetMmsSizeLimit;
-        }
-    }
-
-    public static void setUserSetMmsSizeLimit(int limit) {
-        mUserSetMmsSizeLimit = limit;
-    }
-
-    public static int getMaxRestrictedImageHeight() {
-        return mMaxRestrictedImageHeight;
-    }
-
-    public static int getMaxRestrictedImageWidth() {
-        return mMaxRestrictedImageWidth;
-    }
-
-    public static int getSmsRecipientLimit() {
-        return mSmsRecipientLimit;
-    }
-
-    public static int getReceiveMmsLimitFor2G() {
-        return mReceiveMmsSizeLimitFor2G;
-    }
-
-    public static int getReceiveMmsLimitForTD() {
-        return mReceiveMmsSizeLimitForTD;
-    }
-
-    /// APARTODO
-//    public static boolean getSIMSmsAtSettingEnabled() {
-//        return mMmsFeatureManagerPlugin.isFeatureEnabled(
-//    IMmsFeatureManagerExt.SHOW_SIM_SMS_ENTRY_IN_SETTINGS);
-//    }
-
-    public static int getPluginMenuIDBase() {
-        return 0x100;
-    }
-
-    private static boolean sSlot1SimExist = true;
-    private static boolean sSlot2SimExist = true;
-    private static int sSlot1RetryCounter = 0;
-    private static int sSlot2RetryCounter = 0;
-    private static final int MAX_RETRY_COUNT = 3;
-    private static long sSim1Id = -1;
-    private static long sSim2Id = -1;
-
-   /* private static void loadSimInfo(Context context) {
-        /// M: sim1 info maybe not loaded yet, load it.
-        if (sSim1Id <= 0 && sSlot1SimExist) {
-            sSim1Id = EncapsulatedSimInfoManager.getIdBySlot(context, PhoneConstants.SIM_ID_1);
-            sSlot1RetryCounter++;
-            /// M: if we tried 3 times and still can't get valid simId , we think the slot is empty.
-            if (sSlot1RetryCounter == MAX_RETRY_COUNT && sSim1Id <= 0) {
-                sSlot1SimExist = false;
-            }
-        }
-        /// M: sim2 info maybe not loaded yet, load it.
-        if (sSim2Id <= 0 && sSlot2SimExist) {
-            sSim2Id = EncapsulatedSimInfoManager.getIdBySlot(context, PhoneConstants.SIM_ID_2);
-            sSlot2RetryCounter++;
-            /// M: if we tried 3 times and still can't get valid simId , we think the slot is empty.
-            if (sSlot2RetryCounter == MAX_RETRY_COUNT && sSim2Id <= 0) {
-                sSlot2SimExist = false;
-            }
-        }
-    }*/
-
-    public static int getMmsRetryPromptIndex() {
-        return mOpConfigExt.getMmsRetryPromptIndex();
-    }
-
-    /// M: this method is changed to use plugin
-    public static int getSmsToMmsTextThreshold() {
-        int limitSmsCount = mOpConfigExt.getSmsToMmsTextThreshold();
-        if (limitSmsCount > 0) {
-            return limitSmsCount;
-        }
-        // Operator Plugin
-        if (FeatureOption.MTK_C2K_SUPPORT) {
-            return getSmsToMmsTextThresholdForC2K(mContext);
-        }
-        return sSmsToMmsTextThreshold;
-    }
-
-    /// M: change this to plugin
-    public static int getMaxTextLimit() {
-        // add for ipmessage
-        if (mIpConfig.getMaxTextLimit(mContext) != 0) {
-            return mIpConfig.getMaxTextLimit(mContext);
-        }
-        return mOpConfigExt.getMaxTextLimit();
-    }
-
-    private static void loadMmsSettings(Context context) {
-        XmlResourceParser parser = context.getResources().getXml(R.xml.mms_config);
-
-        try {
-            beginDocument(parser, "mms_config");
-
-            while (true) {
-                nextElement(parser);
-                String tag = parser.getName();
-                if (tag == null) {
-                    break;
-                }
-                String name = parser.getAttributeName(0);
-                String value = parser.getAttributeValue(0);
-                String text = null;
-                if (parser.next() == XmlPullParser.TEXT) {
-                    text = parser.getText();
-                }
-
-                if (DEBUG) {
-                    Log.v(TAG, "tag: " + tag + " value: " + value + " - " +
-                            text);
-                }
-                if ("name".equalsIgnoreCase(name)) {
-                    if ("bool".equals(tag)) {
-                        // bool config tags go here
-                        if ("enabledMMS".equalsIgnoreCase(value)) {
-                            mMmsEnabled = "true".equalsIgnoreCase(text) ? 1 : 0;
-                        } else if ("enabledTransID".equalsIgnoreCase(value)) {
-                            mTransIdEnabled = "true".equalsIgnoreCase(text);
-                        } else if ("enabledNotifyWapMMSC".equalsIgnoreCase(value)) {
-                            mNotifyWapMMSC = "true".equalsIgnoreCase(text);
-                        } else if ("aliasEnabled".equalsIgnoreCase(value)) {
-                            mAliasEnabled = "true".equalsIgnoreCase(text);
-                        } else if ("allowAttachAudio".equalsIgnoreCase(value)) {
-                            mAllowAttachAudio = "true".equalsIgnoreCase(text);
-                        } else if ("enableMultipartSMS".equalsIgnoreCase(value)) {
-                            mEnableMultipartSMS = "true".equalsIgnoreCase(text);
-                        } else if ("enableSlideDuration".equalsIgnoreCase(value)) {
-                            mEnableSlideDuration = "true".equalsIgnoreCase(text);
-                        } else if ("enableMMSReadReports".equalsIgnoreCase(value)) {
-                            mEnableMMSReadReports = "true".equalsIgnoreCase(text);
-                        } else if ("enableSMSDeliveryReports".equalsIgnoreCase(value)) {
-                            mEnableSMSDeliveryReports = "true".equalsIgnoreCase(text);
-                        } else if ("enableMMSDeliveryReports".equalsIgnoreCase(value)) {
-                            mEnableMMSDeliveryReports = "true".equalsIgnoreCase(text);
-                        /// M: google jb.mr1 patch, group mms
-                        } else if ("enableGroupMms".equalsIgnoreCase(value)) {
-                            mEnableGroupMms = "true".equalsIgnoreCase(text);
-                        }
-                    } else if ("int".equals(tag)) {
-                        // int config tags go here
-                        if ("maxMessageSize".equalsIgnoreCase(value)) {
-                            mMaxMessageSize = Integer.parseInt(text);
-                        } else if ("maxImageHeight".equalsIgnoreCase(value)) {
-                            mMaxImageHeight = Integer.parseInt(text);
-                        } else if ("maxImageWidth".equalsIgnoreCase(value)) {
-                            mMaxImageWidth = Integer.parseInt(text);
-                        }
-                        /// M: @{
-                        else if ("maxRestrictedImageHeight".equalsIgnoreCase(value)) {
-                            mMaxRestrictedImageHeight = Integer.parseInt(text);
-                        } else if ("maxRestrictedImageWidth".equalsIgnoreCase(value)) {
-                            mMaxRestrictedImageWidth = Integer.parseInt(text);
-                        }
-                        /// @}
-                        else if ("defaultSMSMessagesPerThread".equalsIgnoreCase(value)) {
-                            mDefaultSMSMessagesPerThread = Integer.parseInt(text);
-                        } else if ("defaultMMSMessagesPerThread".equalsIgnoreCase(value)) {
-                            mDefaultMMSMessagesPerThread = Integer.parseInt(text);
-                        } else if ("minMessageCountPerThread".equalsIgnoreCase(value)) {
-                            mMinMessageCountPerThread = Integer.parseInt(text);
-                        } else if ("maxMessageCountPerThread".equalsIgnoreCase(value)) {
-                            mMaxMessageCountPerThread = Integer.parseInt(text);
-                        }
-                        else if ("smsToMmsTextThreshold".equalsIgnoreCase(value)) {
-                            /// M: Operator Plugin
-                            mOpConfigExt.setSmsToMmsTextThreshold(Integer.parseInt(text));
-                        }
-                        else if ("recipientLimit".equalsIgnoreCase(value)) {
-                            /// M: Operator Plugin
-                            mOpConfigExt.setMmsRecipientLimit(Integer.parseInt(text));
-                        } else if ("httpSocketTimeout".equalsIgnoreCase(value)) {
-                            mOpConfigExt.setHttpSocketTimeout(Integer.parseInt(text));
-                        } else if ("minimumSlideElementDuration".equalsIgnoreCase(value)) {
-                            mMinimumSlideElementDuration = Integer.parseInt(text);
-                        } else if ("maxSizeScaleForPendingMmsAllowed".equalsIgnoreCase(value)) {
-                            mMaxSizeScaleForPendingMmsAllowed = Integer.parseInt(text);
-                        } else if ("aliasMinChars".equalsIgnoreCase(value)) {
-                            mAliasRuleMinChars = Integer.parseInt(text);
-                        } else if ("aliasMaxChars".equalsIgnoreCase(value)) {
-                            mAliasRuleMaxChars = Integer.parseInt(text);
-                        } else if ("maxMessageTextSize".equalsIgnoreCase(value)) {
-                            /// M: Operator Plugin
-                            mOpConfigExt.setMaxTextLimit(Integer.parseInt(text));
-                        } else if ("maxSubjectLength".equalsIgnoreCase(value)) {
-                            mMaxSubjectLength = Integer.parseInt(text);
-                        }
-                    } else if ("string".equals(tag)) {
-                        // string config tags go here
-                        if ("userAgent".equalsIgnoreCase(value)) {
-                            mUserAgent = text;
-                        } else if ("uaProfTagName".equalsIgnoreCase(value)) {
-                            mUaProfTagName = text;
-                        } else if ("uaProfUrl".equalsIgnoreCase(value)) {
-                            mUaProfUrl = text;
-                        } else if ("httpParams".equalsIgnoreCase(value)) {
-                            mHttpParams = text;
-                        } else if ("httpParamsLine1Key".equalsIgnoreCase(value)) {
-                            mHttpParamsLine1Key = text;
-                        } else if ("emailGatewayNumber".equalsIgnoreCase(value)) {
-                            mEmailGateway = text;
-                        }
-                    }
-                }
-            }
-        } catch (XmlPullParserException e) {
-            Log.e(TAG, "loadMmsSettings caught ", e);
-        } catch (NumberFormatException e) {
-            Log.e(TAG, "loadMmsSettings caught ", e);
-        } catch (IOException e) {
-            Log.e(TAG, "loadMmsSettings caught ", e);
-        } finally {
-            parser.close();
-        }
-
-        String errorStr = null;
-
-        if (getMmsEnabled() && mUaProfUrl == null) {
-            errorStr = "uaProfUrl";
-        }
-
-        if (errorStr != null) {
-            String err =
-                String.format("MmsConfig.loadMmsSettings mms_config.xml missing %s setting",
-                        errorStr);
-            Log.e(TAG, err);
-        }
-    }
-
-    /// M: change this method to plugin
-    public static int getMmsRecipientLimit() {
-        return mOpConfigExt.getMmsRecipientLimit();
-    }
-
-
-    /// M: Add MmsService configure param @{
-    public static Bundle getMmsServiceConfig() {
-        // Operator Plugin
-        return mOpConfigExt.getMmsServiceConfig();
-    }
-    /// @}
-}
Index: vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/ui/ComposeMessageActivity.java
===================================================================
--- vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/ui/ComposeMessageActivity.java	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/ui/ComposeMessageActivity.java	(revision 5228)
@@ -1,11315 +0,0 @@
-/*
-* Copyright (C) 2014 MediaTek Inc.
-* Modification based on code covered by the mentioned copyright
-* and/or permission notice(s).
-*/
-/*
- * Copyright (C) 2008 Esmertec AG.
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.mms.ui;
-
-import static android.content.res.Configuration.KEYBOARDHIDDEN_NO;
-import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_ABORT;
-import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_COMPLETE;
-import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_START;
-import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_STATUS_ACTION;
-import static com.android.mms.ui.MessageListAdapter.COLUMN_ID;
-import static com.android.mms.ui.MessageListAdapter.COLUMN_MSG_TYPE;
-import static com.android.mms.ui.MessageListAdapter.PROJECTION;
-
-import android.app.ActionBar;
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.app.StatusBarManager;
-import android.content.ActivityNotFoundException;
-import android.content.BroadcastReceiver;
-import android.content.ClipData;
-import android.content.ClipboardManager;
-import android.content.ComponentName;
-import android.content.ContentResolver;
-import android.content.ContentUris;
-import android.content.ContentValues;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.DialogInterface.OnClickListener;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.SharedPreferences;
-import android.content.res.Configuration;
-import android.content.res.Resources;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteException;
-import android.database.sqlite.SqliteWrapper;
-import android.drm.DrmStore;
-import android.graphics.drawable.Drawable;
-import android.media.RingtoneManager;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Environment;
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
-import android.os.Parcelable;
-import android.os.SystemClock;
-import android.preference.PreferenceManager;
-import android.provider.ContactsContract;
-import android.provider.MediaStore;
-import android.provider.Settings;
-import android.provider.Telephony;
-import android.provider.ContactsContract.CommonDataKinds;
-import android.provider.ContactsContract.CommonDataKinds.Email;
-import android.provider.ContactsContract.CommonDataKinds.Phone;
-import android.provider.ContactsContract.Contacts;
-import android.provider.ContactsContract.Data;
-import android.provider.ContactsContract.Intents;
-import android.provider.MediaStore.Audio;
-import android.provider.MediaStore.Images;
-import android.provider.MediaStore.Video;
-import android.provider.Telephony.Mms;
-import android.provider.Telephony.Sms;
-import android.telephony.SmsManager;
-import android.telephony.SmsMessage;
-import android.telephony.SubscriptionInfo;
-import android.telephony.SubscriptionManager;
-import android.telephony.TelephonyManager;
-import android.text.Editable;
-import android.text.InputFilter;
-import android.text.SpannableString;
-import android.text.Spanned;
-import android.text.TextUtils;
-import android.text.TextWatcher;
-import android.text.method.TextKeyListener;
-import android.text.style.URLSpan;
-import android.text.util.Linkify;
-import android.util.Log;
-import android.view.ContextMenu;
-import android.view.ContextMenu.ContextMenuInfo;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewStub;
-import android.view.Window;
-import android.view.WindowManager;
-import android.view.View.OnCreateContextMenuListener;
-import android.view.View.OnKeyListener;
-import android.view.View.OnTouchListener;
-import android.view.inputmethod.EditorInfo;
-import android.view.inputmethod.InputMethodManager;
-import android.webkit.MimeTypeMap;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.ImageButton;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.QuickContactBadge;
-import android.widget.SimpleAdapter;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.android.browser.provider.Browser;
-import com.android.ims.ImsManager;
-import com.android.internal.telephony.PhoneConstants;
-import com.android.internal.telephony.TelephonyIntents;
-import com.android.internal.telephony.TelephonyProperties;
-import com.android.mms.ExceedMessageSizeException;
-import com.android.mms.LogTag;
-import com.android.mms.MmsApp;
-import com.android.mms.MmsConfig;
-import com.android.mms.TempFileProvider;
-import com.android.mms.data.Contact;
-import com.android.mms.data.ContactList;
-import com.android.mms.data.Conversation;
-import com.android.mms.data.Conversation.ConversationQueryHandler;
-import com.android.mms.data.WorkingMessage;
-import com.android.mms.data.WorkingMessage.MessageStatusListener;
-import com.android.mms.draft.DraftManager;
-import com.android.mms.draft.DraftService;
-import com.android.mms.drm.DrmUtils;
-import com.android.mms.model.AudioModel;
-import com.android.mms.model.MediaModel;
-import com.android.mms.model.SlideModel;
-import com.android.mms.model.SlideshowModel;
-import com.android.mms.model.TextModel;
-import com.android.mms.R;
-import com.android.mms.transaction.MessagingNotification;
-import com.android.mms.transaction.MmsSystemEventReceiver.OnShutDownListener;
-import com.android.mms.transaction.MmsSystemEventReceiver.OnSubInforChangedListener;
-import com.android.mms.transaction.SmsReceiverService;
-import com.android.mms.transaction.Transaction;
-import com.android.mms.transaction.TransactionBundle;
-import com.android.mms.transaction.TransactionService;
-import com.android.mms.ui.MessageUtils.ResizeImageResultCallback;
-import com.android.mms.ui.RecipientsEditor.RecipientContextMenuInfo;
-import com.android.mms.ui.SubSelectDialog.SubClickAndDismissListener;
-import com.android.mms.util.DraftCache;
-import com.android.mms.util.FeatureOption;
-import com.android.mms.util.MessageResource;
-import com.android.mms.util.MmsContentType;
-import com.android.mms.util.MmsLog;
-import com.android.mms.util.SendingProgressTokenManager;
-import com.android.mms.util.ThreadCountManager;
-import com.android.mms.util.ThumbnailManager;
-import com.android.mms.widget.MmsWidgetProvider;
-import com.android.mtkex.chips.MTKRecipientEditTextView;
-import com.android.mtkex.chips.RecipientEntry;
-import com.android.mtkex.chips.MTKRecipientEditTextView.ChipProcessListener;
-import com.google.android.mms.MmsException;
-import com.google.android.mms.pdu.EncodedStringValue;
-import com.google.android.mms.pdu.PduBody;
-import com.google.android.mms.pdu.PduHeaders;
-import com.google.android.mms.pdu.PduPart;
-import com.google.android.mms.pdu.PduPersister;
-import com.google.android.mms.pdu.SendReq;
-
-import com.mediatek.cta.CtaUtils;
-import com.mediatek.internal.telephony.CellConnMgr;
-import com.mediatek.internal.telephony.DefaultSmsSimSettings;
-import com.mediatek.internal.telephony.MmsConfigInfo;
-import com.mediatek.ipmsg.util.IpMessageUtils;
-import com.mediatek.mms.callback.IComposeActivityCallback;
-import com.mediatek.mms.callback.ITextSizeAdjustHost;
-import com.mediatek.mms.callback.IWorkingMessageCallback;
-import com.mediatek.mms.ext.IOpComposeExt;
-import com.mediatek.mms.ext.IOpWorkingMessageExt;
-import com.mediatek.mms.folder.ui.FolderViewList;
-import com.mediatek.mms.folder.util.FolderModeUtils;
-import com.mediatek.mms.ipmessage.IIpComposeActivityExt;
-import com.mediatek.mms.ipmessage.IIpConversationExt;
-import com.mediatek.mms.model.FileAttachmentModel;
-import com.mediatek.mms.ui.VCardAttachment;
-import com.mediatek.mms.util.DrmUtilsEx;
-import com.mediatek.mms.util.MmsDialogNotifyUtils;
-import com.mediatek.mms.util.MmsSizeUtils;
-import com.mediatek.mms.util.PermissionCheckUtil;
-import com.mediatek.mms.util.VCardUtils;
-import com.mediatek.opmsg.util.OpMessageUtils;
-import com.mediatek.setting.GeneralPreferenceActivity;
-import com.mediatek.setting.MmsPreferenceActivity;
-import com.mediatek.setting.SettingListActivity;
-import com.mediatek.storage.StorageManagerEx;
-import com.mediatek.telephony.TelephonyManagerEx;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
-import java.lang.ref.WeakReference;
-import java.net.URLDecoder;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.regex.Pattern;
-
-/**
- * This is the main UI for:
- * 1. Composing a new message;
- * 2. Viewing/managing message history of a conversation.
- *
- * This activity can handle following parameters from the intent
- * by which it's launched.
- * thread_id long Identify the conversation to be viewed. When creating a
- *         new message, this parameter shouldn't be present.
- * msg_uri Uri The message which should be opened for editing in the editor.
- * address String The addresses of the recipients in current conversation.
- * exit_on_sent boolean Exit this activity after the message is sent.
- */
-public class ComposeMessageActivity extends Activity
-        implements View.OnClickListener, TextView.OnEditorActionListener,
-        MessageStatusListener, Contact.UpdateListener, OnShutDownListener,
- OnSubInforChangedListener,
-        ITextSizeAdjustHost, SubClickAndDismissListener {
-    public static final int REQUEST_CODE_ATTACH_IMAGE     = 100;
-    public static final int REQUEST_CODE_TAKE_PICTURE     = 101;
-    public static final int REQUEST_CODE_ATTACH_VIDEO     = 102;
-    public static final int REQUEST_CODE_TAKE_VIDEO       = 103;
-    public static final int REQUEST_CODE_ATTACH_SOUND     = 104;
-    public static final int REQUEST_CODE_RECORD_SOUND     = 105;
-    public static final int REQUEST_CODE_CREATE_SLIDESHOW = 106;
-    public static final int REQUEST_CODE_ECM_EXIT_DIALOG  = 107;
-    public static final int REQUEST_CODE_ADD_CONTACT      = 108;
-    public static final int REQUEST_CODE_PICK             = 109;
-
-    /// M: fix bug ALPS00490684, update group mms state from GROUP_PARTICIPANTS to setting @{
-    public static final int REQUEST_CODE_GROUP_PARTICIPANTS = 130;
-    /// @}
-    /// M: fix bug ALPS00448677, update or delete Contact Chip
-    public static final int REQUEST_CODE_VIEW_CONTACT     = 111;
-    private Contact mInViewContact;
-    /// @}
-
-    private static final String TAG = "Mms/compose";
-    private static final String TAG_OMH = "OMH_MMS";
-    /// M: add for ip message
-    private static final String TAG_DIVIDER = "Mms/divider";
-
-    private static final boolean DEBUG = false;
-    private static final boolean TRACE = false;
-    private static final boolean LOCAL_LOGV = false;
-
-    // Menu ID
-    private static final int MENU_ADD_SUBJECT           = 0;
-    private static final int MENU_DELETE_THREAD         = 1;
-    private static final int MENU_ADD_ATTACHMENT        = 2;
-    private static final int MENU_DISCARD               = 3;
-    private static final int MENU_SEND                  = 4;
-    private static final int MENU_CALL_RECIPIENT        = 5;
-    private static final int MENU_CONVERSATION_LIST     = 6;
-    private static final int MENU_DEBUG_DUMP            = 7;
-
-    // Context menu ID
-    private static final int MENU_VIEW_CONTACT          = 12;
-    private static final int MENU_ADD_TO_CONTACTS       = 13;
-
-    private static final int MENU_EDIT_MESSAGE          = 14;
-    private static final int MENU_VIEW_SLIDESHOW        = 16;
-    private static final int MENU_VIEW_MESSAGE_DETAILS  = 17;
-    private static final int MENU_DELETE_MESSAGE        = 18;
-    private static final int MENU_SEARCH                = 19;
-    private static final int MENU_DELIVERY_REPORT       = 20;
-    private static final int MENU_FORWARD_MESSAGE       = 21;
-    private static final int MENU_CALL_BACK             = 22;
-    private static final int MENU_SEND_EMAIL            = 23;
-    private static final int MENU_COPY_MESSAGE_TEXT     = 24;
-    private static final int MENU_COPY_TO_SDCARD        = 25;
-    private static final int MENU_INSERT_SMILEY         = 26;
-    private static final int MENU_ADD_ADDRESS_TO_CONTACTS = 27;
-    private static final int MENU_LOCK_MESSAGE          = 28;
-    private static final int MENU_UNLOCK_MESSAGE        = 29;
-    private static final int MENU_SAVE_RINGTONE         = 30;
-    private static final int MENU_PREFERENCES           = 31;
-    /// M: google jb.mr1 patch
-    private static final int MENU_GROUP_PARTICIPANTS    = 32;
-
-    private static final int MENU_SELECT_MESSAGE = 101;
-
-    private static final int MENU_COPY = 207;
-
-    private static final int MESSAGE_LIST_QUERY_TOKEN = 9527;
-    private static final int MESSAGE_LIST_QUERY_AFTER_DELETE_TOKEN = 9528;
-
-    private static final int DELETE_MESSAGE_TOKEN  = 9700;
-
-    private static final int CHARS_REMAINING_BEFORE_COUNTER_SHOWN = 10;
-
-    private static final long NO_DATE_FOR_DIALOG = -1L;
-
-    private static final String KEY_EXIT_ON_SENT = "exit_on_sent";
-    private static final String KEY_FORWARDED_MESSAGE = "forwarded_message";
-    private static final String KEY_APPEND_MESSAGE = "append_attachment";
-
-    private static final String EXIT_ECM_RESULT = "exit_ecm_result";
-
-    // When the conversation has a lot of messages and a new message is sent, the list is scrolled
-    // so the user sees the just sent message. If we have to scroll the list more than 20 items,
-    // then a scroll shortcut is invoked to move the list near the end before scrolling.
-    private static final int MAX_ITEMS_TO_INVOKE_SCROLL_SHORTCUT = 20;
-
-    // Any change in height in the message list view greater than this threshold will not
-    // cause a smooth scroll. Instead, we jump the list directly to the desired position.
-    private static final int SMOOTH_SCROLL_THRESHOLD = 200;
-
-    ///M: ALPS00592380: status of detection
-    private static final int DETECT_INIT = 0;
-    private static final int DETECT_ANGLE_BRACKETS = 1;
-    private static final int DETECT_ANGLE_BRACKETS_WITH_WORD = 2;
-
-    int TOAST_TYPE_FOR_SAVE_DRAFT = 0;
-    int TOAST_TYPE_FOR_SEND_MSG = 1;
-    int TOAST_TYPE_FOR_ATTACH = 2;
-
-    String USING_COLON = "USE_COLON";
-
-    String SELECTION_CONTACT_RESULT = "contactId";
-    String NUMBERS_SEPARATOR_COLON = ":";
-    String NUMBERS_SEPARATOR_SIMCOLON = ";";
-    String NUMBERS_SEPARATOR_COMMA = ",";
-
-    private ContentResolver mContentResolver;
-
-    private BackgroundQueryHandler mBackgroundQueryHandler;
-
-    private Conversation mConversation;     // Conversation we are working in
-
-    private boolean mExitOnSent;            // Should we finish() after sending a message?
-                                            // TODO: mExitOnSent is obsolete -- remove
-    private boolean mForwardMessageMode;
-
-    private View mTopPanel;                 // View containing the recipient and subject editors
-    private View mBottomPanel;              // View containing the text editor, send button, ec.
-    private EnhanceEditText mTextEditor;           // Text editor to type your message into
-    private TextView mTextCounter;          // Shows the number of characters used in text editor
-    private TextView mSendButtonMms;        // Press to send mms
-    private ImageButton mSendButtonSms;     // Press to send sms
-    private EditText mSubjectTextEditor;    // Text editor for MMS subject
-
-    private TextView mTypingStatus;
-    private TextView mRemoteStrangerText;
-
-    private AttachmentEditor mAttachmentEditor;
-    private View mAttachmentEditorScrollView;
-
-    private MessageListView mMsgListView;        // ListView for messages in this conversation
-    /// M: @{
-    public MessageListAdapter mMsgListAdapter = null;  // and its corresponding ListAdapter
-    /// @}
-    private RecipientsEditor mRecipientsEditor;  // UI control for editing recipients
-    private ImageButton mRecipientsPicker;       // UI control for recipients picker
-
-    private boolean mIsKeyboardOpen;             // Whether the hardware keyboard is visible
-    /// M: fix bug ALPS00419856, set TextEditor Height = four when unlock screen @{
-    private boolean mIsSoftKeyBoardShow;
-    private static final int SOFT_KEY_BOARD_MIN_HEIGHT = 150;
-    /// @}
-    private boolean mIsLandscape;                // Whether we're in landscape mode
-
-    private boolean mPossiblePendingNotification;   // If the message list has changed, we may have
-                                                    // a pending notification to deal with.
-
-    private boolean mToastForDraftSave;   // Whether to notify the user that a draft is being saved
-
-    private boolean mSentMessage;       // true if the user has sent a message while in this
-                                        // activity. On a new compose message case, when the first
-                                        // message is sent is a MMS w/ attachment, the list blanks
-                                        // for a second before showing the sent message. But we'd
-                                        // think the message list is empty, thus show the recipient
-                                        // editor thinking it's a draft message. This flag should
-                                        // help clarify the situation.
-
-    private WorkingMessage mWorkingMessage;         // The message currently being composed.
-
-    private AlertDialog mSmileyDialog;
-
-    private AlertDialog mDiscardDraftDialog;
-
-    private boolean mWaitingForSubActivity;
-    private int mLastRecipientCount;    // Used for warning the user on too many recipients.
-    private AttachmentTypeSelectorAdapter mAttachmentTypeSelectorAdapter;
-
-    private boolean mSendingMessage;    // Indicates the message is sending, and not send again.
-
-    private Intent mAddContactIntent;   // Intent used to add a new contact
-
-    private Uri mTempMmsUri;            // Only used as a temporary to hold a slideshow uri
-    private long mTempThreadId;         // Only used as a temporary to hold a threadId
-    /// M: fix bug for ConversationList select all performance ,update selected threads array.@{
-    private long mSelectedThreadId = 0;
-    /// @}
-
-    private AsyncDialog mAsyncDialog;   // Used for background tasks.
-
-    private String mDebugRecipients;
-    private int mLastSmoothScrollPosition;
-    private boolean mScrollOnSend;      // Flag that we need to scroll the list to the end.
-
-    private int mSavedScrollPosition = -1;  // we save the ListView's scroll position in onPause(),
-                                            // so can remember it after re-entering the activity.
-                                            // If the value >= 0, then we jump to that line. If the
-                                            // value is maxint, then we jump to the end.
-    private long mLastMessageId;
-
-    ///M: ALPS00726802, this int save the position in cursor of the clicked item
-    private int mClickedItemPosition = -1;
-
-    private boolean  mErrorDialogShown = true;
-    /**
-     * Whether this activity is currently running (i.e. not paused)
-     */
-    private boolean mIsRunning;
-    // key for extras and icicles
-    public static final String THREAD_ID = "thread_id";
-
-    ///M: add for fix issue ALPS00380788
-    private ProgressDialog mCellProgressDialog;
-
-    /// M: fix bug ALPS00397146, removeThumbnailManager uri
-    // (Content://media/external/images/media/) when it rotated
-    private static final HashMap<String, Integer> sDegreeMap = new HashMap<String, Integer>();
-    /// @}
-
-    private String mBeforeTextChangeString = "";
-
-    //public static final String SELECTED_ID = "SELECTID";
-
-    private InputMethodManager mInputMethodManager = null;
-
-    private AlertDialog mPlaneModeDialog = null;
-
-    ///M: actionbar customer view
-    private View mActionBarCustomView;
-    private TextView mTopTitle;
-    private ImageView mMuteLogo;
-    private TextView mTopSubtitle;
-
-    private boolean mHadToSlideShowEditor = false;
-
-    /// M: record cell progress dialog is showing or not
-    private boolean mIsCellDialogShowing = false;
-
-    private boolean mForwardingMessage = false;
-
-    /// M: fix bug ALPS01258201, mAsyncTaskNum for count asyncTask number
-    //  ShowRunnable can avoid dismiss progressDialog.
-    private int mAsyncTaskNum;
-
-    /// M: fix bug ALPS01505548, delete VCard temp file
-    private ArrayList<String> mVCardFiles = new ArrayList<String>();
-
-    // add for ipmessage
-    public IIpComposeActivityExt mIpCompose;
-    public ComposeActivityCallback mIpComposeCallback = new ComposeActivityCallback();
-
-    // add for Op plugin
-    public IOpComposeExt mOpComposeExt;
-
-    private ContextMenu mChipViewMenu = null;
-
-    private boolean mIsActivityPaused = true;
-    private boolean mIsActivityStoped = true;
-
-    // add for Runtime permission
-    private boolean mNeedRequestPermissins = false;
-    private Bundle mSavedInstanceState = null;
-
-    /// M: ALPS03562153 @{
-    private boolean mCreateFromSendTo = false;
-    /// @}
-
-    private void dismissProgressDialog() {
-        Log.d(TAG, "Composer reduce mAsyncTaskNum = " + (--mAsyncTaskNum));
-        if (mAsyncTaskNum == 0) {
-            runOnUiThread(new Runnable() {
-                public void run() {
-                    getAsyncDialog().dismissProgressDialog();
-                    getAsyncDialog().resetProgressDialog();
-                }
-            });
-        }
-    }
-
-    class ShowRunnable implements Runnable {
-        public void run() {
-        }
-    }
-
-    private Runnable mQueryMsgListRunnable = new Runnable() {
-        public void run() {
-            // add for op plugin
-            Uri conversationUri = mOpComposeExt.onQueryMsgListRun(mConversation.getUri(),
-                    mConversation.getThreadId());
-            if (conversationUri == null) {
-                log("##### startMsgListQuery: conversationUri is null, bail!");
-                return;
-            }
-            final long threadId = mConversation.getThreadId();
-
-            boolean queryed = mIpCompose.onIPQueryMsgList(mBackgroundQueryHandler,
-                    MESSAGE_LIST_QUERY_TOKEN, threadId, conversationUri,
-                    PROJECTION, null, null, null);
-            if (!queryed) {
-                mBackgroundQueryHandler.startQuery(
-                        MESSAGE_LIST_QUERY_TOKEN, threadId, conversationUri,
-                        PROJECTION, null, null, null);
-            }
-        }
-    };
-    /// @}
-
-    public Handler mHandler = new Handler() {
-        public void handleMessage(Message msg) {
-            if (mIpCompose.handleIpMessage(msg)) {
-                super.handleMessage(msg);
-                return;
-            }
-            super.handleMessage(msg);
-        }
-    };
-
-    @SuppressWarnings("unused")
-    public static void log(String logMsg) {
-        Thread current = Thread.currentThread();
-        long tid = current.getId();
-        StackTraceElement[] stack = current.getStackTrace();
-        String methodName = stack[3].getMethodName();
-        // Prepend current thread ID and name of calling method to the message.
-        logMsg = "[" + tid + "] [" + methodName + "] " + logMsg;
-        Log.d(TAG, logMsg);
-    }
-
-    //==========================================================
-    // Inner classes
-    //==========================================================
-
-    private void editSlideshow() {
-        // The user wants to edit the slideshow. That requires us to persist the slideshow to
-        // disk as a PDU in saveAsMms. This code below does that persisting in a background
-        // task. If the task takes longer than a half second, a progress dialog is displayed.
-        // Once the PDU persisting is done, another runnable on the UI thread get executed to start
-        // the SlideshowEditActivity.
-
-        /// M: fix bug ALPS00520531, Do not load draft when compose is going to edit slideshow
-//        mContentResolver.unregisterContentObserver(mDraftChangeObserver);
-
-        getAsyncDialog().runAsync(new Runnable() {
-            @Override
-            public void run() {
-                // This runnable gets run in a background thread.
-                mTempMmsUri = mWorkingMessage.saveAsMms(false);
-            }
-        }, new Runnable() {
-            @Override
-            public void run() {
-                // Once the above background thread is complete, this runnable is run
-                // on the UI thread.
-                if (mTempMmsUri == null) {
-                    mWaitingForSubActivity = false;
-                    return;
-                }
-                long threadId = mConversation.getThreadId();
-                if (threadId <= 0) {
-                    if (!mConversation.getRecipients().isEmpty()) {
-                        threadId = mConversation.ensureThreadId();
-                    }
-                }
-                /// M: add for fix ALPS01317511 @{
-                mOpComposeExt.editSlideshow(mHadToSlideShowEditor);
-                /// @}
-                Intent intent = new Intent(ComposeMessageActivity.this,
-                        SlideshowEditActivity.class);
-                intent.setData(mTempMmsUri);
-                intent.putExtra("thread_id", threadId);
-                startActivityForResult(intent, REQUEST_CODE_CREATE_SLIDESHOW);
-            }
-        // M: fix bug ALPS00351027
-        }, R.string.sync_mms_to_db);
-    }
-
-    private final Handler mAttachmentEditorHandler = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-            MmsLog.d(TAG, "mAttachmentEditorHandler, handleMessage = " + msg.what);
-            /// M: Code analyze 026, If the two clicks are too close. @{
-
-            long oldTime = mAttachClickTime;
-            mAttachClickTime = SystemClock.elapsedRealtime();
-            if ((mAttachClickTime - oldTime < 500) && (mAttachClickTime - oldTime > 0)) {
-                MmsLog.d(TAG, "mAttachmentEditorHandler, ignore a click if too close");
-                return;
-            }
-
-            /// M: OP01
-            if (mOpComposeExt.handleAttachmentEditorHandlerMessage(msg,
-                    mSendButtonCanResponse, mWorkingMessage,
-                    mWorkingMessage.getSlideshow(), mCompressingImage)) {
-                return;
-            }
-            switch (msg.what) {
-                case AttachmentEditor.MSG_EDIT_SLIDESHOW: {
-                    /// M: Code analyze 024, If the click operator can be responsed. @{
-                    if (mClickCanResponse) {
-                        mClickCanResponse = false;
-                        /// M: Code analyze 038, If the user is editing slideshow now.
-                        /// Do not allow the activity finish but return
-                        /// directly when back key is entered. @{
-                        mIsEditingSlideshow = true;
-                        /// @}
-                        editSlideshow();
-                    }
-                    /// @}
-                    break;
-                }
-                case AttachmentEditor.MSG_SEND_SLIDESHOW: {
-                    if (isPreparedForSending()) {
-                        /// M: Code analyze 028, Before sending message,check the recipients count
-                        /// and add sub card selection dialog if multi sub cards exist.@{
-                        // ComposeMessageActivity.this.confirmSendMessageIfNeeded();
-                        checkRecipientsCount();
-                        /// @}
-                    }
-                    break;
-                }
-                case AttachmentEditor.MSG_VIEW_IMAGE:
-                case AttachmentEditor.MSG_PLAY_VIDEO:
-                case AttachmentEditor.MSG_PLAY_AUDIO:
-                case AttachmentEditor.MSG_PLAY_SLIDESHOW:
-                    /// M: Code analyze 024, If the click operator can be responsed. @{
-                    if (mClickCanResponse) {
-                        mClickCanResponse = false;
-                        viewMmsMessageAttachment(msg.what);
-                    }
-                    /// @}
-                    /// M: Code analyze 051, Hide input keyboard.@{
-                    hideInputMethod();
-                    /// @}
-                    break;
-
-                case AttachmentEditor.MSG_REPLACE_IMAGE:
-                    /// M: @{
-                    getSharedPreferences("SetDefaultLayout", 0)
-                        .edit().putBoolean("SetDefaultLayout", false).commit();
-                    /// @}
-                case AttachmentEditor.MSG_REPLACE_VIDEO:
-                case AttachmentEditor.MSG_REPLACE_AUDIO:
-                    /// M: Code analyze 051, Hide input keyboard.@{
-                    hideInputMethod();
-                    /// @}
-                    showAddAttachmentDialog(false);
-                    break;
-
-                case AttachmentEditor.MSG_REMOVE_ATTACHMENT:
-                    /// M: fix bug ALPS01538338
-                    if (!mSendButtonCanResponse) {
-                        MmsLog.d(TAG, "handle MSG_REMOVE_ATTACHMENT return");
-                        return;
-                    }
-                    mWorkingMessage.removeAttachment(true);
-                    break;
-                default:
-                    break;
-            }
-        }
-    };
-
-
-    private void viewMmsMessageAttachment(final int requestCode) {
-        final SlideshowModel slideshow = mWorkingMessage.getSlideshow();
-        if (slideshow == null) {
-            /// M: ALPS01846425. If mms has been sent, slideshow is null. @{
-//            throw new IllegalStateException("mWorkingMessage.getSlideshow() == null");
-            MmsLog.e(TAG, "viewMmsMessageAttachment slideshow is null",
-                    new IllegalStateException("mWorkingMessage.getSlideshow() == null"));
-            return;
-            /// @}
-        }
-        /// M: Code analyze 035, The audio becomes "simple" slideshow.
-        /// Launch the slideshow activity or MmsPlayerActivity to play/view media attachment. @{
-        SlideModel slideOne = slideshow.get(0);
-        if (slideshow.isSimple() && slideOne != null && !slideOne.hasAudio()) {
-            MessageUtils.viewSimpleSlideshow(this, slideshow);
-        } else {
-
-            // M: change feature ALPS01751464
-            if (slideshow.isSimple() && slideOne != null && slideOne.hasAudio()) {
-                MediaModel model = slideOne.getAudio();
-                if (model != null && model.hasDrmContent()) {
-                    DrmUtilsEx.showDrmAlertDialog(ComposeMessageActivity.this);
-                    return;
-                }
-            }
-
-            // The user wants to view the slideshow. That requires us to persist the slideshow to
-            // disk as a PDU in saveAsMms. This code below does that persisting in a background
-            // task. If the task takes longer than a half second, a progress dialog is displayed.
-            // Once the PDU persisting is done, another runnable on the UI thread get executed to
-            // start the SlideshowActivity.
-            getAsyncDialog().runAsync(new Runnable() {
-                @Override
-                public void run() {
-                    // This runnable gets run in a background thread.
-                    mTempMmsUri = mWorkingMessage.saveAsMms(false);
-                }
-            }, new Runnable() {
-                @Override
-                public void run() {
-                    // Once the above background thread is complete, this runnable is run
-                    // on the UI thread.
-                    // Launch the slideshow activity to play/view.
-                    Intent intent;
-                    SlideModel slide = slideshow.get(0);
-                    /// M: play the only audio directly
-                    if ((slideshow.isSimple() && slide != null && slide.hasAudio())
-                        || (requestCode == AttachmentEditor.MSG_PLAY_AUDIO)) {
-                        intent = new Intent(ComposeMessageActivity.this, SlideshowActivity.class);
-                    } else {
-                        intent = new Intent(ComposeMessageActivity.this, MmsPlayerActivity.class);
-                    }
-                    intent.setData(mTempMmsUri);
-                    if (mTempMmsUri == null) {
-                        MmsLog.d(TAG, "viewMmsMessageAttachment mTempMmsUri == null");
-                        return;
-                    }
-                    if (requestCode > 0) {
-                        startActivityForResult(intent, requestCode);
-                    } else {
-                        startActivity(intent);
-                    }
-                    /// @}
-                }
-            // M: fix bug ALPS00351027
-            }, R.string.sync_mms_to_db);
-        }
-    }
-
-    // Whether or not we are currently enabled for SMS. This field is updated in onStart to make
-    // sure we notice if the user has changed the default SMS app.
-    private boolean mIsSmsEnabled;
-
-    private final Handler mMessageListItemHandler = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-            MessageItem msgItem = (MessageItem) msg.obj;
-                /// M: move if into switch, we have item not use it.
-                /// M: Code analyze, fix bug ALPS00358964
-            if (msgItem != null && mIpCompose.onIpMessageListItemHandler(msg.what, msgItem.mMsgId,
-                    mConversation.getThreadId(), msgItem.mSubId)) {
-                return;
-            }
-
-            if (msgItem != null
-                    && mOpComposeExt.onMessageListItemHandler(msg, msgItem.mTimestamp)) {
-                return;
-            }
-
-                switch (msg.what) {
-                    case MessageListItem.MSG_LIST_DETAILS:
-                        if (msgItem != null) {
-                            showMessageDetails(msgItem);
-                        }
-                        break;
-
-                    case MessageListItem.MSG_LIST_EDIT:
-                        if (msgItem != null && mIsSmsEnabled) {
-                            editMessageItem(msgItem);
-                            updateSendButtonState();
-                            drawBottomPanel();
-                        }
-                        break;
-
-                    case MessageListItem.MSG_LIST_PLAY:
-                        if (msgItem != null) {
-                            switch (msgItem.mAttachmentType) {
-                                case WorkingMessage.IMAGE:
-                                case WorkingMessage.VIDEO:
-                                case WorkingMessage.AUDIO:
-                                case WorkingMessage.SLIDESHOW:
-                                    MessageUtils.viewMmsMessageAttachment(
-                                            ComposeMessageActivity.this,
-                                            msgItem.mMessageUri, msgItem.mSlideshow,
-                                            getAsyncDialog());
-                                    break;
-                            }
-                        }
-                        break;
-
-                    /// M: Code analyze 039, When the cache add new item,
-                    /// notifiy ComposeMessageAcitivity the data has been changed .@{
-                    case MessageListAdapter.MSG_LIST_NEED_REFRASH: {
-                        boolean isClearCache =
-                            msg.arg1 == MessageListAdapter.MESSAGE_LIST_REFRASH_WITH_CLEAR_CACHE;
-                        MmsLog.d(MessageListAdapter.CACHE_TAG,
-                                "mMessageListItemHandler.handleMessage(): " +
-                                    "run adapter notify in isClearCache = " + isClearCache);
-                        mMsgListAdapter.setClearCacheFlag(isClearCache);
-                        mMsgListAdapter.notifyDataSetChanged();
-                        return;
-                    }
-                    /// @
-                    /// M:,Support messages multi-delete opeartor. @{
-                    case MessageListItem.ITEM_CLICK: { // can be deleted!!!
-                        mMsgListAdapter.changeSelectedState(msg.arg1);
-                        return;
-                    }
-                    /// @}
-                    default:
-                        Log.w(TAG, "Unknown message: " + msg.what);
-                        return;
-                }
-        }
-    };
-
-    private boolean showMessageDetails(MessageItem msgItem) {
-        /// M: Code analyze 040, The function getMessageDetails
-        /// use MessageItem but not cursor now.@{
-        /*
-        Cursor cursor = mMsgListAdapter.getCursorForItem(msgItem);
-        if (cursor == null) {
-            return false;
-        }
-        */
-        if (mIpCompose.showIpMessageDetails(msgItem.mIpMessageItem)) {
-            return true;
-        }
-
-        if (mOpComposeExt.showMessageDetails(String.valueOf(msgItem.mIpMessageId))) {
-            return true;
-        }
-
-        String messageDetails = MessageUtils.getMessageDetails(
-               //ComposeMessageActivity.this, cursor, msgItem.mMessageSize);
-                ComposeMessageActivity.this, msgItem);
-        /// @}
-        MmsLog.dpi(TAG, "showMessageDetails. messageDetails:" + messageDetails);
-        new AlertDialog.Builder(ComposeMessageActivity.this)
-                .setTitle(R.string.message_details_title)
-                .setMessage(messageDetails)
-                .setCancelable(true)
-                .show();
-        return true;
-    }
-
-    private final OnKeyListener mSubjectKeyListener = new OnKeyListener() {
-        @Override
-        public boolean onKey(View v, int keyCode, KeyEvent event) {
-            if (event.getAction() != KeyEvent.ACTION_DOWN) {
-                return false;
-            }
-
-            // When the subject editor is empty, press "DEL" to hide the input field.
-            if ((keyCode == KeyEvent.KEYCODE_DEL) && (mSubjectTextEditor.length() == 0)) {
-                showSubjectEditor(false);
-                mWorkingMessage.setSubject(null, true);
-                /// M: add for character counter
-                updateCounter(mWorkingMessage.getText(), 0, 0, 0);
-                return true;
-            }
-            return false;
-        }
-    };
-
-    /**
-     * Return the messageItem associated with the type ("mms" or "sms") and message id.
-     * @param type Type of the message: "mms" or "sms"
-     * @param msgId Message id of the message. This is the _id of the sms or pdu row and is
-     * stored in the MessageItem
-     * @param createFromCursorIfNotInCache true if item is not found in the MessageListAdapter's
-     * cache and the code can create a new MessageItem based on the position of the current cursor.
-     * If false, the function returns null if the MessageItem isn't in the cache.
-     * @return MessageItem or null if not found and createFromCursorIfNotInCache is false
-     */
-    private MessageItem getMessageItem(String type, long msgId,
-            boolean createFromCursorIfNotInCache) {
-        return mMsgListAdapter.getCachedMessageItem(type, msgId,
-                createFromCursorIfNotInCache ? mMsgListAdapter.getCursor() : null);
-    }
-
-    private boolean isCursorValid() {
-        // Check whether the cursor is valid or not.
-        Cursor cursor = mMsgListAdapter.getCursor();
-        if (cursor.isClosed() || cursor.isBeforeFirst() || cursor.isAfterLast()) {
-            Log.e(TAG, "Bad cursor.", new RuntimeException());
-            return false;
-        }
-        return true;
-    }
-
-    /*** M: remove Google default code
-    private void resetCounter() {
-        /// M: Code analyze 032, According to the message state to update text counter.@{
-        mTextEditor.setText(mWorkingMessage.getText());
-        /// M: once updateCounter.
-        updateCounter(mWorkingMessage.getText(), 0, 0, 0);
-        if (mWorkingMessage.requiresMms()) {
-            mTextCounter.setVisibility(View.GONE);
-        } else {
-            mTextCounter.setVisibility(View.VISIBLE);
-        }
-        /// @}
-    }
-    */
-
-    private void updateCounter(CharSequence text, int start, int before, int count) {
-        if (!mIsSmsEnabled) {
-            MmsLog.w(TAG, "updateCounter(): sms is disabled!");
-            mTextCounter.setVisibility(View.GONE);
-            return;
-        }
-        if (text == null) {
-            MmsLog.w(TAG, "updateCounter(): text is null!");
-            return;
-        }
-
-        if (mOpComposeExt.updateCounter(text, mTextCounter, mWorkingMessage)) {
-            return;
-        }
-
-        if (text.length() == 0) {
-            mTextCounter.setVisibility(View.GONE);
-            mWorkingMessage.setLengthRequiresMms(false, true);
-            return;
-        }
-
-        // add for ipmessage
-        if (mIpCompose.onIpUpdateCounter(text, start, before, count)) {
-            return;
-        }
-
-        /// M: Code analyze 031, Add encode type for calculating message lenght and always show
-        /// text counter if it is in sms mode.@{
-        /*
-        WorkingMessage workingMessage = mWorkingMessage;
-        if (workingMessage.requiresMms()) {
-            // If we're not removing text (i.e. no chance of converting back to SMS
-            // because of this change) and we're in MMS mode, just bail out since we
-            // then won't have to calculate the length unnecessarily.
-            final boolean textRemoved = (before > count);
-            if (!textRemoved) {
-                showSmsOrMmsSendButton(workingMessage.requiresMms());
-                return;
-            }
-        }
-        */
-        int[] params = null;
-
-        int encodingType = SmsMessage.ENCODING_UNKNOWN;
-
-        encodingType = mOpComposeExt.getSmsEncodingType(encodingType, ComposeMessageActivity.this);
-        MmsLog.d(TAG, "updateCounter getSmsEncodingType encodingType = " + encodingType ); // Add this log
-        
-        if(encodingType == SmsMessage.ENCODING_7BIT){
-            params = SmsMessage.calculateLength(text, true, encodingType);
-        } else {
-            params = SmsMessage.calculateLength(text, false, encodingType);
-        }
-            /* SmsMessage.calculateLength returns an int[4] with:
-             *   int[0] being the number of SMS's required,
-             *   int[1] the number of code units used,
-             *   int[2] is the number of code units remaining until the next message.
-             *   int[3] is the encoding type that should be used for the message.
-             */
-        final int msgCount = params[0];
-        final int remainingInCurrentMessage = params[2];
-        /*
-        if (!MmsConfig.getMultipartSmsEnabled()) {
-            mWorkingMessage.setLengthRequiresMms(
-                    msgCount >= MmsConfig.getSmsToMmsTextThreshold(), true);
-        }
-
-        // Show the counter only if:
-        // - We are not in MMS mode
-        // - We are going to send more than one message OR we are getting close
-        boolean showCounter = false;
-        if (!workingMessage.requiresMms() &&
-                (msgCount > 1 ||
-                 remainingInCurrentMessage <= CHARS_REMAINING_BEFORE_COUNTER_SHOWN)) {
-            showCounter = true;
-        }
-
-        showSmsOrMmsSendButton(workingMessage.requiresMms());
-
-        if (showCounter) {
-            // Update the remaining characters and number of messages required.
-            String counterText = msgCount > 1 ? remainingInCurrentMessage + " / " + msgCount
-                    : String.valueOf(remainingInCurrentMessage);
-            mTextCounter.setText(counterText);
-            mTextCounter.setVisibility(View.VISIBLE);
-        } else {
-            mTextCounter.setVisibility(View.GONE);
-        }
-         */
-        mWorkingMessage.setLengthRequiresMms(
-            msgCount >= MmsConfig.getSmsToMmsTextThreshold(), true);
-        MmsLog.d(TAG, "updateCounter(): message msgCount = " + msgCount
-                + " TextThreshold() = " + MmsConfig.getSmsToMmsTextThreshold()
-                + " remainingInCurrentMessage = " + remainingInCurrentMessage);
-        /// M: Show the counter
-        /// M: Update the remaining characters and number of messages required.
-        if (msgCount >= MmsConfig.getSmsToMmsTextThreshold()) {
-            mTextCounter.setVisibility(View.GONE);
-            return;
-        }
-        mUiHandler.postDelayed(new Runnable() {
-            @Override
-            public void run() {
-                if (mOpComposeExt.updateCounterUiRun(mTextEditor, remainingInCurrentMessage,
-                        msgCount, mWorkingMessage)) {
-                    return;
-                }
-
-                MmsLog.d(TAG, "updateCounter requiresMms = " + mWorkingMessage.requiresMms()
-                        + " line count = " + mTextEditor.getLineCount());
-                if (mWorkingMessage.requiresMms() || /*mTextEditor.getLineCount() <= 1*/TextUtils.isEmpty(mTextEditor.getText().toString().trim())) {
-                    mTextCounter.setVisibility(View.GONE);
-                    return;
-                }
-                mTextCounter.setVisibility(View.VISIBLE);
-                String counterText = remainingInCurrentMessage + "/" + msgCount;
-                mTextCounter.setText(counterText);
-            }
-        }, 100);
-        /// @}
-    }
-
-    @Override
-    public void startActivityForResult(Intent intent, int requestCode) {
-        if (mNeedRequestPermissins) {
-            super.startActivityForResult(intent, requestCode);
-            return;
-        }
-
-        // requestCode >= 0 means the activity in question is a sub-activity.
-        if (requestCode >= 0) {
-            mWaitingForSubActivity = true;
-        }
-
-        /// M : FIX CR : ALPS01795853 @{
-        if (mWorkingMessage.getText().toString().trim().length() != 0) {
-            if (requestCode == REQUEST_CODE_ATTACH_IMAGE
-                    || requestCode == REQUEST_CODE_ATTACH_VIDEO
-                    || requestCode == REQUEST_CODE_ADD_CONTACT
-                    || requestCode == REQUEST_CODE_ATTACH_SOUND
-                    || requestCode == REQUEST_CODE_ATTACH_RINGTONE
-                    || requestCode == REQUEST_CODE_ATTACH_VCALENDAR
-                    || requestCode == REQUEST_CODE_ATTACH_VCARD
-                    || requestCode == REQUEST_CODE_RECORD_SOUND
-                    || requestCode == REQUEST_CODE_TAKE_PICTURE
-                    || requestCode == REQUEST_CODE_TAKE_VIDEO
-                    || requestCode == REQUEST_CODE_TEXT_VCARD) {
-                mWorkingMessage.setTruntoChooseAttach(true);
-            }
-        }
-        /// @}
-
-
-        if (mIsKeyboardOpen) {
-            hideKeyboard();  // camera and other activities take a long time to hide the keyboard
-        }
-
-        /// M: Code analyze 041, Add exception handling for starting activity.@{
-        if (null != intent && null != intent.getData()
-                && intent.getData().getScheme().equals("mailto")) {
-            try {
-                super.startActivityForResult(intent, requestCode);
-            } catch (ActivityNotFoundException e) {
-                MmsLog.e(TAG,
-                        "[ActivityNotFoundException] Failed to startActivityForResult: " + intent);
-                Intent mchooserIntent = Intent.createChooser(intent, null);
-                super.startActivityForResult(mchooserIntent, requestCode);
-            } catch (Exception e) {
-                MmsLog.e(TAG, "[Exception] Failed to startActivityForResult: " + intent);
-                Toast.makeText(this, getString(R.string.message_open_email_fail),
-                      Toast.LENGTH_SHORT).show();
-          }
-        } else {
-            try {
-                super.startActivityForResult(intent, requestCode);
-            } catch (ActivityNotFoundException e) {
-                if (requestCode == REQUEST_CODE_PICK) {
-                    misPickContatct = false;
-                    mShowingContactPicker = false;
-                }
-                Intent mchooserIntent = Intent.createChooser(intent, null);
-                super.startActivityForResult(mchooserIntent, requestCode);
-            }
-        }
-        /// @}
-    }
-
-    private void toastConvertInfo(boolean toMms) {
-        if (mIpCompose.toastIpConvertInfo(toMms)) {
-            return;
-        }
-        final int resId = toMms ? R.string.converting_to_picture_message
-                : R.string.converting_to_text_message;
-        Toast.makeText(this, resId, Toast.LENGTH_SHORT).show();
-    }
-
-    private class DeleteMessageListener implements OnClickListener {
-        private final MessageItem mMessageItem;
-
-        public DeleteMessageListener(MessageItem messageItem) {
-            mMessageItem = messageItem;
-        }
-
-        @Override
-        public void onClick(DialogInterface dialog, int whichButton) {
-            dialog.dismiss();
-
-            new Thread(new Runnable() {
-                @Override
-                public void run() {
-                    if (mMessageItem.isMms()) {
-                        WorkingMessage.removeThumbnailsFromCache(mMessageItem.getSlideshow());
-
-                        MmsApp.getApplication().getPduLoaderManager()
-                            .removePdu(mMessageItem.mMessageUri);
-                        // Delete the message *after* we've removed the thumbnails because we
-                        // need the pdu and slideshow for removeThumbnailsFromCache to work.
-                    }
-                    // add for ipmessage
-                    mIpCompose.onIpDeleteMessageListenerClick(mMessageItem.mIpMessageItem);
-
-                    /// M: google jb.mr1 patch, Conversation should scroll to the bottom
-                    /// when incoming received @{
-                    Boolean deletingLastItem = false;
-                    Cursor cursor = mMsgListAdapter != null ? mMsgListAdapter.getCursor() : null;
-                    if (cursor != null) {
-                        cursor.moveToLast();
-                        long msgId = cursor.getLong(COLUMN_ID);
-                        deletingLastItem = msgId == mMessageItem.mMsgId;
-                    }
-                    Uri deleteUri = mMessageItem.mMessageUri;
-                    MmsLog.dpi(TAG, "deleteUri " + deleteUri
-                            + " deleteUri.host " + deleteUri.getHost());
-
-                    if (mOpComposeExt.onDeleteMessageListenerClick(mBackgroundQueryHandler,
-                            mMessageItem.mMsgId, mMessageItem.mIpMessageId)) {
-                        return;
-                    }
-
-                    mBackgroundQueryHandler.startDelete(DELETE_MESSAGE_TOKEN,
-                            deletingLastItem, mMessageItem.mMessageUri,
-                            mMessageItem.mLocked ? null : "locked=0", null);
-                    /// @}
-                    return;
-                }
-            }).start();
-        }
-    }
-
-    private class DiscardDraftListener implements OnClickListener {
-        @Override
-        public void onClick(DialogInterface dialog, int whichButton) {
-            mWorkingMessage.discard();
-            dialog.dismiss();
-            mOpComposeExt.onDiscardDraftListenerClick();
-            /// M: Code analyze 042, If you discard the draft message manually.@{
-            mHasDiscardWorkingMessage = true;
-            /// @}
-            // add for ipmessage
-            mIpCompose.onIpDiscardDraftListenerClick();
-            finish();
-            mDiscardDraftDialog = null;
-        }
-    }
-
-    private class SendIgnoreInvalidRecipientListener implements OnClickListener {
-        @Override
-        public void onClick(DialogInterface dialog, int whichButton) {
-            /// M: Code analyze 030, Check condition before sending message.@{
-            checkConditionsAndSendMessage(true);
-            /// @}
-            dialog.dismiss();
-        }
-    }
-
-    private class CancelSendingListener implements OnClickListener {
-        @Override
-        public void onClick(DialogInterface dialog, int whichButton) {
-            if (isRecipientsEditorVisible()) {
-                mRecipientsEditor.requestFocus();
-            }
-            dialog.dismiss();
-            /// M: @{
-            updateSendButtonState();
-            /// @}
-        }
-    }
-
-    /// M: fix bug ALPS00484778
-    private ContactList mCutRecipients;
-
-    private class CancelSendingListenerForInvalidRecipient implements OnClickListener {
-        @Override
-        public void onClick(DialogInterface dialog, int whichButton) {
-            if (isRecipientsEditorVisible()) {
-                if (mCutRecipients != null) {
-                        mRecipientsEditor.removeChipChangedListener(mChipWatcher);
-                        mRecipientsEditor.populate(new ContactList());
-                        mRecipientsEditor.addChipChangedListener(mChipWatcher);
-                        mRecipientsEditor.populate(mCutRecipients);
-                        mCutRecipients = null;
-                } else {
-                    mRecipientsEditor.requestFocus();
-                }
-            }
-            dialog.dismiss();
-            /// M: @{
-            updateSendButtonState();
-            /// @}
-        }
-    }
-    /// @}
-
-    private void setSubId(int subId) {
-        if (subId != 0) {
-            mSelectedSubId = subId;
-        }
-    }
-
-    private boolean isOmhSizeLimitDialog() {
-        TelephonyManagerEx telephonyManagerEx;
-        MmsConfigInfo mmsConfigInfo = null;
-        boolean isOmhEnable = false;
-        boolean isOmhCard = false;
-        int omhMessageMaxSize = 0;
-        try {
-            telephonyManagerEx = TelephonyManagerEx.getDefault();
-            mmsConfigInfo = telephonyManagerEx.getMmsConfigInfo(mSelectedSubId);
-            isOmhEnable = telephonyManagerEx.isOmhEnable(mSelectedSubId);
-            isOmhCard = telephonyManagerEx.isOmhCard(mSelectedSubId);
-            MmsLog.d(TAG_OMH, "ComposeMessageActivity.isOmhSizeLimitDialog:isOmhEnable="
-                    + isOmhEnable + " isOmhCard=" + isOmhCard);
-            if (mmsConfigInfo != null) {
-                omhMessageMaxSize = mmsConfigInfo.mMessageMaxSize;
-                MmsLog.d(TAG_OMH, "ComposeMessageActivity.isOmhSizeLimitDialog:"
-                        + " mmsConfigInfo != null"
-                        + " mmsConfigInfo.mMessageMaxSize =" + omhMessageMaxSize);
-            }
-        } catch (Exception e) {
-            // TODO: handle exception
-        }
-        if (isOmhEnable && isOmhCard && mmsConfigInfo != null && omhMessageMaxSize != 0) {
-            int mmsSizeLimit = omhMessageMaxSize;
-            mmsSizeLimit = mmsSizeLimit / 1024;
-            SlideshowModel slideShow = mWorkingMessage.getSlideshow();
-            if (slideShow != null) {
-                int showSize = (slideShow.getCurrentSlideshowSize() - 1) / 1024 + 1;
-                if (mmsSizeLimit < showSize) {
-                    MmsLog.d(TAG_OMH, "ComposeMessageActivity.isOmhSizeLimitDialog:"
-                            + "mmsSizeLimit < showSize start"
-                            + " mSelectedSubId=" + mSelectedSubId);
-                    String info = "(" + showSize + "K/" + mmsSizeLimit + "K)";
-                    String titleView = getString(R.string.omh_exceed_message_size_limitation);
-                    titleView = titleView + info;
-                    String messageView = getString(R.string.omh_failed_to_add_image);
-                    AlertDialog.Builder builder = new AlertDialog.Builder(this);
-                    /// M: replace error icon.
-                    builder.setIcon(R.drawable.size_limited);
-                    builder.setTitle(titleView);
-                    builder.setMessage(messageView);
-                    builder.setPositiveButton(android.R.string.ok, new OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            if (which == DialogInterface.BUTTON_POSITIVE) {
-                                dialog.dismiss();
-                            }
-                        }
-                    });
-                    builder.create().show();
-                    mSendButtonCanResponse = true;
-                    updateSendButtonState(true);
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-
-    private void confirmSendMessageIfNeeded() {
-        if (isOmhSizeLimitDialog()) {
-            return;
-        }
-        if (!isRecipientsEditorVisible()) {
-            /// M: Code analyze 030, Check condition before sending message.@{
-            checkConditionsAndSendMessage(true);
-            /// @}
-            return;
-        }
-
-        boolean isMms = mWorkingMessage.requiresMms();
-        if (mOpComposeExt.confirmSendMessageIfNeeded(isRecipientsEditorVisible(),
-                mRecipientsEditor.hasInvalidRecipient(isMms))) {
-            return;
-        }
-
-        if (mRecipientsEditor.hasInvalidRecipient(isMms)) {
-            /// M: Code analyze 054, Even if there are some invalid recipients , we also try to
-            /// send messag.Now, We do not disgingush there are some or all invalid recipients. @{
-            updateSendButtonState();
-                String title = getResourcesString(R.string.has_invalid_recipient,
-                        mRecipientsEditor.formatInvalidNumbers(isMms));
-                new AlertDialog.Builder(this)
-                    .setCancelable(false)
-                    .setIconAttribute(android.R.attr.alertDialogIcon)
-                    .setTitle(title)
-                    .setMessage(R.string.invalid_recipient_message)
-                    .setPositiveButton(R.string.try_to_send,
-                            new SendIgnoreInvalidRecipientListener())
-                    .setNegativeButton(R.string.no, new CancelSendingListenerForInvalidRecipient())
-                    .setOnKeyListener(new DialogInterface.OnKeyListener() {
-                        @Override
-                        public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
-                            if (keyCode == KeyEvent.KEYCODE_BACK) {
-                                dialog.dismiss();
-                            }
-                            return false;
-                        }
-                    })
-                    .show();
-        } else {
-             /// M: Code analyze 030, Check condition before
-            /// sending message.(All recipients are valid.)@{
-            checkConditionsAndSendMessage(true);
-             /// @}
-        }
-    }
-
-    /// M: Recipient Control refactory, don't use TextWatcher: replace with ChipWatcher,
-    /// to reduce the frequency of notify. and to sync recipients. @{
-    private final MTKRecipientEditTextView.ChipWatcher mChipWatcher =
-        new MTKRecipientEditTextView.ChipWatcher() {
-        public void onChipChanged(ArrayList<RecipientEntry> allChips,
-                ArrayList<String> changedChipAddresses, String lastString) {
-            /// M: ALPS01843842, when chip changed ,close the contact view context menu.
-            if (mChipViewMenu != null) {
-                mChipViewMenu.close();
-                mChipViewMenu = null;
-            }
-            if (!isRecipientsEditorVisible()) {
-                Log.w(TAG, "ChipWatcher: onChipChanged called with invisible mRecipientsEditor");
-                return;
-            }
-
-            Log.i(TAG, "ChipWatcher onChipChanged begin.");
-            ContactList LastContacts = mRecipientsEditor.getContactsFromChipWatcher();
-            int updateLimit = getLimitedContact();
-            /// @}
-            mRecipientsEditor.parseRecipientsFromChipWatcher(allChips,
-                    changedChipAddresses, lastString, updateLimit);
-            List<String> numbers = mRecipientsEditor.getNumbersFromChipWatcher();
-            // google steps in textchange
-            mWorkingMessage.setWorkingRecipients(numbers);
-            /// M: google JB.MR1 patch, group mms
-            boolean multiRecipients = numbers != null && numbers.size() > 1;
-            boolean isGroupMms =
-                MmsPreferenceActivity.getIsGroupMmsEnabled(ComposeMessageActivity.this)
-                                                        && multiRecipients;
-            mMsgListAdapter.setIsGroupConversation(isGroupMms);
-            mWorkingMessage.setHasMultipleRecipients(multiRecipients, true);
-            mWorkingMessage.setHasEmail(mRecipientsEditor.containsEmailFromChipWatcher(), true);
-            int recipientCount = (numbers != null ? numbers.size() : 0);
-            checkForTooManyRecipients(recipientCount);
-            // google steps end
-            ContactList contacts = mRecipientsEditor.getContactsFromChipWatcher();
-            if (!contacts.equals(LastContacts)
-                    || (changedChipAddresses != null && changedChipAddresses.size() > 0)) {
-                updateTitle(contacts);
-            }
-            updateSendButtonState();
-            mIpCompose.onIpRecipientsChipChanged(contacts.size());
-        }
-    };
-    /// @}
-
-    private void checkForTooManyRecipients(int recipientCount) {
-        /// M: Code analyze 056,Now,the sms recipient limit is different from mms.
-        /// We can set limit for sms or mms individually. @{
-        final int recipientLimit = MmsConfig.getSmsRecipientLimit();
-        /// @}
-        if (recipientLimit != Integer.MAX_VALUE && recipientLimit > 0) {
-
-            //final int recipientCount = recipientCount();
-            boolean tooMany = recipientCount > recipientLimit;
-
-            if (recipientCount != mLastRecipientCount) {
-                // Don't warn the user on every character they type when they're over the limit,
-                // only when the actual # of recipients changes.
-                mLastRecipientCount = recipientCount;
-                if (tooMany) {
-                    String tooManyMsg = getString(R.string.too_many_recipients, recipientCount,
-                            recipientLimit);
-                    Toast.makeText(ComposeMessageActivity.this,
-                            tooManyMsg, Toast.LENGTH_LONG).show();
-                }
-            }
-        }
-    }
-
-    private final OnCreateContextMenuListener mRecipientsMenuCreateListener =
-        new OnCreateContextMenuListener() {
-        @Override
-        public void onCreateContextMenu(ContextMenu menu, View v,
-                ContextMenuInfo menuInfo) {
-            mChipViewMenu = menu;
-            mOpComposeExt.chipOnCreateContextMenu(mChipViewMenu);
-            if (menuInfo != null) {
-                Contact c = ((RecipientContextMenuInfo) menuInfo).recipient;
-                RecipientsMenuClickListener l = new RecipientsMenuClickListener(c);
-
-                menu.setHeaderTitle(c.getName());
-
-                if (c.existsInDatabase()) {
-                    menu.add(0, MENU_VIEW_CONTACT, 0, R.string.menu_view_contact)
-                            .setOnMenuItemClickListener(l);
-                /// M: Code analyze 043, Whether the address can be added to contacts app. @{
-                } else if (MessageUtils.canAddToContacts(c)) {
-                /// @}
-                    menu.add(0, MENU_ADD_TO_CONTACTS, 0, R.string.menu_add_to_contacts)
-                            .setOnMenuItemClickListener(l);
-                }
-            }
-        }
-    };
-
-    private final class RecipientsMenuClickListener implements MenuItem.OnMenuItemClickListener {
-        private final Contact mRecipient;
-
-        RecipientsMenuClickListener(Contact recipient) {
-            mRecipient = recipient;
-        }
-
-        @Override
-        public boolean onMenuItemClick(MenuItem item) {
-            switch (item.getItemId()) {
-                // Context menu handlers for the recipients editor.
-                case MENU_VIEW_CONTACT: {
-                    Uri contactUri = mRecipient.getUri();
-                    /// M: fix bug ALPS00448677, update or delete Contact Chip
-                    mInViewContact = mRecipient;
-                    /// @}
-                    Intent intent = new Intent(Intent.ACTION_VIEW, contactUri);
-                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
-                    startActivityForResult(intent, REQUEST_CODE_VIEW_CONTACT);
-                    return true;
-                }
-                case MENU_ADD_TO_CONTACTS: {
-                    /// M: fix bug ALPS00448677, update or delete Contact Chip
-                    mInViewContact = null;
-                    /// @}
-                    mAddContactIntent = ConversationList.createAddContactIntent(
-                            mRecipient.getNumber());
-                    ComposeMessageActivity.this.startActivityForResult(mAddContactIntent,
-                            REQUEST_CODE_ADD_CONTACT);
-                    return true;
-                }
-            }
-            return false;
-        }
-    }
-
-    private boolean canAddToContacts(Contact contact) {
-        // There are some kind of automated messages, like STK messages, that we don't want
-        // to add to contacts. These names begin with special characters, like, "*Info".
-        final String name = contact.getName();
-        if (!TextUtils.isEmpty(contact.getNumber())) {
-            char c = contact.getNumber().charAt(0);
-            if (isSpecialChar(c)) {
-                return false;
-            }
-        }
-        if (!TextUtils.isEmpty(name)) {
-            char c = name.charAt(0);
-            if (isSpecialChar(c)) {
-                return false;
-            }
-        }
-        if (!(Mms.isEmailAddress(name) ||
-                Telephony.Mms.isPhoneNumber(name) ||
-                contact.isMe())) {
-            return false;
-        }
-        return true;
-    }
-
-    private boolean isSpecialChar(char c) {
-        return c == '*' || c == '%' || c == '$';
-    }
-
-    private void addPositionBasedMenuItems(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
-        AdapterView.AdapterContextMenuInfo info;
-
-        try {
-            info = (AdapterView.AdapterContextMenuInfo) menuInfo;
-        } catch (ClassCastException e) {
-            Log.e(TAG, "bad menuInfo");
-            return;
-        }
-        final int position = info.position;
-
-        addUriSpecificMenuItems(menu, v, position);
-    }
-
-    private Uri getSelectedUriFromMessageList(ListView listView, int position) {
-        // If the context menu was opened over a uri, get that uri.
-        MessageListItem msglistItem = (MessageListItem) listView.getChildAt(position);
-        if (msglistItem == null) {
-            // FIXME: Should get the correct view. No such interface in ListView currently
-            // to get the view by position. The ListView.getChildAt(position) cannot
-            // get correct view since the list doesn't create one child for each item.
-            // And if setSelection(position) then getSelectedView(),
-            // cannot get corrent view when in touch mode.
-            return null;
-        }
-
-        TextView textView;
-        CharSequence text = null;
-        int selStart = -1;
-        int selEnd = -1;
-
-        //check if message sender is selected
-        textView = (TextView) msglistItem.findView(MessageListItem.text_view);
-        if (textView != null) {
-            text = textView.getText();
-            selStart = textView.getSelectionStart();
-            selEnd = textView.getSelectionEnd();
-        }
-
-        /// M: Code analyze 044,If sender is not being selected, it may be in the message body.@{
-        if (selStart == -1) {
-            textView = (TextView) msglistItem.findView(MessageListItem.text_view);
-            if (textView != null) {
-                text = textView.getText();
-                selStart = textView.getSelectionStart();
-                selEnd = textView.getSelectionEnd();
-            }
-        }
-        /// @}
-
-        // Check that some text is actually selected, rather than the cursor
-        // just being placed within the TextView.
-        if (selStart != selEnd) {
-            int min = Math.min(selStart, selEnd);
-            int max = Math.max(selStart, selEnd);
-
-            URLSpan[] urls = ((Spanned) text).getSpans(min, max,
-                                                        URLSpan.class);
-
-            if (urls.length == 1) {
-                return Uri.parse(urls[0].getURL());
-            }
-        }
-
-        //no uri was selected
-        return null;
-    }
-
-    private void addUriSpecificMenuItems(ContextMenu menu, View v, int position) {
-        Uri uri = getSelectedUriFromMessageList((ListView) v, position);
-
-        if (uri != null) {
-            Intent intent = new Intent(null, uri);
-            intent.addCategory(Intent.CATEGORY_SELECTED_ALTERNATIVE);
-            menu.addIntentOptions(0, 0, 0,
-                    new android.content.ComponentName(this, ComposeMessageActivity.class),
-                    null, intent, 0, null);
-        }
-    }
-
-    private final void addCallAndContactMenuItems(
-            ContextMenu menu, MsgListMenuClickListener l, MessageItem msgItem) {
-        if (TextUtils.isEmpty(msgItem.mBody)) {
-            return;
-        }
-        SpannableString msg = new SpannableString(msgItem.mBody);
-        Linkify.addLinks(msg, Linkify.ALL);
-        ArrayList<String> uris =
-            MessageUtils.extractUris(msg.getSpans(0, msg.length(), URLSpan.class));
-        /// M: Code analyze 022, Add bookmark. Clear the List.@{
-        mURLs.clear();
-        /// @}
-        // Remove any dupes so they don't get added to the menu multiple times
-        HashSet<String> collapsedUris = new HashSet<String>();
-        for (String uri : uris) {
-            collapsedUris.add(uri.toLowerCase());
-        }
-        for (String uriString : collapsedUris) {
-            String prefix = null;
-            int sep = uriString.indexOf(":");
-            if (sep >= 0) {
-                prefix = uriString.substring(0, sep);
-                /// M: Code analyze 022, Add bookmark. @{
-                if ("mailto".equalsIgnoreCase(prefix) || "tel".equalsIgnoreCase(prefix)) {
-                    uriString = uriString.substring(sep + 1);
-                }
-                /// @}
-            }
-            Uri contactUri = null;
-            boolean knownPrefix = true;
-            if ("mailto".equalsIgnoreCase(prefix))  {
-                contactUri = getContactUriForEmail(uriString);
-            } else if ("tel".equalsIgnoreCase(prefix)) {
-                contactUri = getContactUriForPhoneNumber(uriString);
-            } else {
-                knownPrefix = false;
-
-                /// M: Code analyze 022, Add bookmark. Maybe exist multi URL address @{
-                if (msgItem.isSms() && mURLs.size() <= 0) {
-                    //menu.add(0, MENU_ADD_TO_BOOKMARK, 0, R.string.menu_add_to_bookmark)
-                    //.setOnMenuItemClickListener(l);
-                }
-                /// @}
-
-                /// M: Code analyze 022, Add bookmark. fix bug ALPS00783237 @{
-                for (String uri : uris) {
-                    if (uri != null && uri.equalsIgnoreCase(uriString)) {
-                        mURLs.add(uri);
-                        break;
-                    }
-                }
-                /// @}
-            }
-            if (knownPrefix && contactUri == null) {
-                Intent intent = ConversationList.createAddContactIntent(uriString);
-
-                String addContactString = getString(R.string.menu_add_address_to_contacts,
-                        uriString);
-                menu.add(0, MENU_ADD_ADDRESS_TO_CONTACTS, 0, addContactString)
-                    .setOnMenuItemClickListener(l)
-                    .setIntent(intent);
-            }
-        }
-        /// M: New plugin API @{
-        mOpComposeExt.addCallAndContactMenuItems(
-                this, menu, MENU_ADD_TO_BOOKMARK, mURLs, msgItem);
-        /// @}
-    }
-
-    private Uri getContactUriForEmail(String emailAddress) {
-        Cursor cursor = SqliteWrapper.query(this, getContentResolver(),
-                Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, Uri.encode(emailAddress)),
-                new String[] { Email.CONTACT_ID, Contacts.DISPLAY_NAME }, null, null, null);
-
-        if (cursor != null) {
-            try {
-                while (cursor.moveToNext()) {
-                    String name = cursor.getString(1);
-                    if (!TextUtils.isEmpty(name)) {
-                        return ContentUris.withAppendedId(Contacts.CONTENT_URI, cursor.getLong(0));
-                    }
-                }
-            } finally {
-                cursor.close();
-            }
-        }
-        return null;
-    }
-
-    private Uri getContactUriForPhoneNumber(String phoneNumber) {
-        Contact contact = Contact.get(phoneNumber, true);
-        if (contact.existsInDatabase()) {
-            return contact.getUri();
-        }
-        return null;
-    }
-
-    private final OnCreateContextMenuListener mMsgListMenuCreateListener =
-        new OnCreateContextMenuListener() {
-        @Override
-        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
-            if (!isCursorValid()) {
-                return;
-            }
-            Cursor cursor = mMsgListAdapter.getCursor();
-            String type = cursor.getString(COLUMN_MSG_TYPE);
-            long msgId = cursor.getLong(COLUMN_ID);
-            ///M: ALPS00726802, save the position in cursor of the clicked item
-            mClickedItemPosition = cursor.getPosition();
-
-            MmsLog.i(TAG, "onCreateContextMenu(): msgId=" + msgId);
-            addPositionBasedMenuItems(menu, v, menuInfo);
-
-            MessageItem msgItem = mMsgListAdapter.getCachedMessageItem(type, msgId, cursor);
-            if (msgItem == null) {
-                Log.w(TAG, "Cannot load message item for type = " + type
-                        + ", msgId = " + msgId);
-                return;
-            }
-
-            menu.setHeaderTitle(R.string.message_options);
-
-            MsgListMenuClickListener l = new MsgListMenuClickListener(msgItem);
-
-            // add for ipmessage
-            boolean isForwardEnabled =
-                msgItem.isSms() || (msgItem.isDownloaded() && isForwardable(msgId));
-
-            if (msgItem.isSms()) {
-                menu.add(0, MENU_COPY, 0, R.string.ipmsg_copy)
-                .setOnMenuItemClickListener(l);
-            }
-
-            // Forward is not available for undownloaded messages.
-            if (mIsSmsEnabled) {
-                if (isForwardEnabled) {
-                    menu.add(0, MENU_FORWARD_MESSAGE, 0,
-                            R.string.menu_forward).setOnMenuItemClickListener(l);
-                }
-            }
-            if (mIsSmsEnabled) {
-                menu.add(0, MENU_DELETE_MESSAGE, 0, R.string.delete_message)
-                        .setOnMenuItemClickListener(l);
-            }
-
-            if (mIsSmsEnabled) {
-                if (msgItem.mLocked) {
-                    menu.add(0, MENU_UNLOCK_MESSAGE, 0, R.string.menu_unlock)
-                            .setOnMenuItemClickListener(l);
-                } else if (mIsSmsEnabled) {
-                    menu.add(0, MENU_LOCK_MESSAGE, 0, R.string.menu_lock)
-                            .setOnMenuItemClickListener(l);
-                }
-            }
-
-            if (msgItem.isMms()) {
-                switch (msgItem.mAttachmentType) {
-                    case WorkingMessage.SLIDESHOW:
-                        menu.add(0, MENU_VIEW_SLIDESHOW, 0, R.string.view_slideshow)
-                                .setOnMenuItemClickListener(l);
-                        if (haveSomethingToCopyToSDCard(msgItem.mMsgId)) {
-                            menu.add(0, MENU_COPY_TO_SDCARD, 0, R.string.copy_to_sdcard)
-                                    .setOnMenuItemClickListener(l);
-                        }
-                        break;
-                    default:
-                        if (haveSomethingToCopyToSDCard(msgItem.mMsgId)) {
-                            menu.add(0, MENU_COPY_TO_SDCARD, 0, R.string.copy_to_sdcard)
-                                    .setOnMenuItemClickListener(l);
-                        }
-                        break;
-                }
-            }
-
-            addCallAndContactMenuItems(menu, l, msgItem);
-
-            menu.add(0, MENU_VIEW_MESSAGE_DETAILS, 0, R.string.view_message_details)
-                .setOnMenuItemClickListener(l);
-
-            if (msgItem.mDeliveryStatus != MessageItem.DeliveryStatus.NONE
-                    || msgItem.mReadReport) {
-                menu.add(0, MENU_DELIVERY_REPORT, 0, R.string.view_delivery_report)
-                        .setOnMenuItemClickListener(l);
-            }
-
-            /// M: Code analyze 016, Add for select text copy. @{
-            if (!TextUtils.isEmpty(msgItem.mBody)
-                    && msgItem.mMessageType != PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND) {
-                menu.add(0, MENU_SELECT_TEXT, 0, R.string.select_text)
-                        .setOnMenuItemClickListener(l);
-            }
-            /// @}
-
-            if (!mOpComposeExt.onCreateContextMenu(mIsSmsEnabled, msgItem.isSms(),
-                    mSubCount, msgItem.isSending(), l, menu, v, menuInfo, msgItem.mIpMessageId,
-                    mConversation.getMessageCount())) {
-                if (mIsSmsEnabled) {
-                    if (msgItem.isSms()) {
-                        if (mSubCount > 0 && !msgItem.isSending()) {
-                            menu.add(0, MENU_SAVE_MESSAGE_TO_SUB, 0, R.string.save_message_to_sim)
-                                    .setOnMenuItemClickListener(l);
-                        }
-                    }
-                }
-            }
-
-            mIpCompose.onIpCreateContextMenu(menu, mIsSmsEnabled, isForwardEnabled,
-                    msgItem.mIpMessageItem);
-        }
-    };
-
-    private void editMessageItem(MessageItem msgItem) {
-        if ("sms".equals(msgItem.mType)) {
-            if (mWorkingMessage.hasSlideshow()) {
-                /// M: it's a real slideshow, ignore edit request, show a toast.
-                String message = getString(R.string.failed_to_add_media,
-                        getString(R.string.viewer_title_sms));
-                Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
-                return;
-            } else {
-                editSmsMessageItem(msgItem);
-            }
-        } else {
-            editMmsMessageItem(msgItem);
-            mWorkingMessage.setHasMmsDraft(true);
-        }
-        MessagingNotification.nonBlockingUpdateSendFailedNotification(ComposeMessageActivity.this);
-        /// M: @{
-        if ((msgItem.isFailedMessage() || msgItem.isSending()
-                || (msgItem.mDeliveryStatus == MessageItem.DeliveryStatus.FAILED))
-                && mMsgListAdapter.getCount() <= 1) {
-            // For messages with bad addresses, let the user re-edit the recipients.
-            initRecipientsEditor(null);
-            /// M: Code analyze 046, Whether the recipientedit control has been initialized. @{
-            isInitRecipientsEditor = true;
-            /// @}
-            mMsgListAdapter.changeCursor(null);
-            invalidateOptionsMenu();
-        }
-    }
-
-    private void editSmsMessageItem(MessageItem msgItem) {
-        // When the message being edited is the only message in the conversation, the delete
-        // below does something subtle. The trigger "delete_obsolete_threads_pdu" sees that a
-        // thread contain no messages and silently deletes the thread. Meanwhile, the mConversation
-        // object still holds onto the old thread_id and code thinks there's a backing thread in
-        // the DB when it really has been deleted. Here we try and notice that situation and
-        // clear out the thread_id. Later on, when Conversation.ensureThreadId() is called, we'll
-        // create a new thread if necessary.
-        synchronized (mConversation) {
-            /// M: @{
-            //if (mConversation.getMessageCount() <= 1) {
-            if (mMsgListAdapter.getCursor().getCount() <= 1) {
-            /// @}
-                mConversation.clearThreadId();
-                MessagingNotification.setCurrentlyDisplayedThreadId(
-                    MessagingNotification.THREAD_NONE);
-            }
-        }
-        // Delete the old undelivered SMS and load its content.
-        Uri uri = ContentUris.withAppendedId(Sms.CONTENT_URI, msgItem.mMsgId);
-        SqliteWrapper.delete(ComposeMessageActivity.this,
-                mContentResolver, uri, null, null);
-
-        mWorkingMessage.setConversation(mConversation);
-        mWorkingMessage.setText(msgItem.mBody);
-    }
-
-    private void editMmsMessageItem(MessageItem msgItem) {
-        /// M: fix bug ALPS00834025. ignore a click if too close.
-        long oldTime = mEditClickTime;
-        mEditClickTime = SystemClock.elapsedRealtime();
-        if ((mEditClickTime - oldTime < 1500) && (mEditClickTime - oldTime > 0)) {
-            MmsLog.w(TAG, "editMmsMessageItem, ignore a click if too close");
-            return;
-        }
-
-        /// M: make a failed message editable, the count should reduce too.
-        if (mConversation.getMessageCount() == 1) {
-            mConversation.setMessageCount(0);
-        }
-        /// M: Discard the current message in progress.
-        mWorkingMessage.discard();
-
-        // Load the selected message in as the working message.
-        WorkingMessage newWorkingMessage = WorkingMessage.load(this, msgItem.mMessageUri);
-        if (newWorkingMessage == null) {
-            MmsLog.w(TAG, "editMmsMessageItem, load returns null message");
-            return;
-        }
-        mWorkingMessage = newWorkingMessage;
-        mWorkingMessage.setConversation(mConversation);
-        invalidateOptionsMenu();
-        /// M: @{
-        mAttachmentEditor.update(mWorkingMessage);
-        updateTextEditorHeightInFullScreen();
-        /// @}
-        drawTopPanel(false);
-
-        // WorkingMessage.load() above only loads the slideshow. Set the
-        // subject here because we already know what it is and avoid doing
-        // another DB lookup in load() just to get it.
-        mWorkingMessage.setSubject(msgItem.mSubject, false);
-
-        if (mWorkingMessage.hasSubject()) {
-            showSubjectEditor(true);
-        }
-
-        mOpComposeExt.editMmsMessageItem(mWorkingMessage.mOpWorkingMessageExt);
-
-        /// M: fix bug ALPS00433858, update read==1(readed) when reload failed-mms
-        final MessageItem item = msgItem;
-        new Thread(new Runnable() {
-            public void run() {
-                // TODO Auto-generated method stub
-                Uri uri = ContentUris.withAppendedId(Mms.CONTENT_URI, item.mMsgId);
-                ContentValues values = new ContentValues(1);
-                values.put(Mms.READ, 1);
-                SqliteWrapper.update(ComposeMessageActivity.this,
-                        mContentResolver, uri, values, null, null);
-            }
-        }).start();
-    }
-
-    private void copyToClipboard(String str) {
-        ClipboardManager clipboard =
-            (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
-        clipboard.setPrimaryClip(ClipData.newPlainText(null, str));
-    }
-
-    private void forwardMessage(final MessageItem msgItem) {
-        /// M: Code analyze 051, Hide input keyboard
-        /// (add for input method covered Compose UI issue).@{
-        hideInputMethod();
-        /// @}
-
-        mTempThreadId = 0;
-        // The user wants to forward the message. If the message is an mms message, we need to
-        // persist the pdu to disk. This is done in a background task.
-        // If the task takes longer than a half second, a progress dialog is displayed.
-        // Once the PDU persisting is done, another runnable on the UI thread get executed to start
-        // the ForwardMessageActivity.
-        getAsyncDialog().runAsync(new Runnable() {
-            @Override
-            public void run() {
-                // This runnable gets run in a background thread.
-                if (msgItem.mType.equals("mms")) {
-                    SendReq sendReq = new SendReq();
-                    String subject = getString(R.string.forward_prefix);
-                    if (msgItem.mSubject != null) {
-                        subject += msgItem.mSubject;
-                    }
-                    sendReq.setSubject(new EncodedStringValue(subject));
-                    sendReq.setBody(msgItem.mSlideshow.makeCopy());
-
-                    mTempMmsUri = null;
-                    try {
-                        PduPersister persister =
-                                PduPersister.getPduPersister(ComposeMessageActivity.this);
-                        // Copy the parts of the message here.
-                        /// M: google jb.mr1 patch, group mms
-                        mTempMmsUri = persister.persist(sendReq, Mms.Draft.CONTENT_URI, true,
-                                MmsPreferenceActivity
-                                    .getIsGroupMmsEnabled(ComposeMessageActivity.this), null);
-                        mTempThreadId = MessagingNotification.getThreadId(
-                                ComposeMessageActivity.this, mTempMmsUri);
-                    } catch (MmsException e) {
-                        Log.e(TAG, "Failed to copy message: " + msgItem.mMessageUri);
-                        runOnUiThread(new Runnable() {
-                            public void run() {
-                                Toast.makeText(ComposeMessageActivity.this,
-                                        R.string.cannot_save_message, Toast.LENGTH_SHORT).show();
-                            }
-                        });
-                        return;
-                    }
-                }
-            }
-        }, new Runnable() {
-            @Override
-            public void run() {
-                // Once the above background thread is complete, this runnable is run
-                // on the UI thread.
-                Intent intent = createIntent(ComposeMessageActivity.this, 0);
-                intent.putExtra(KEY_FORWARDED_MESSAGE, true);
-                if (mTempThreadId > 0) {
-                    intent.putExtra("thread_id", mTempThreadId);
-                }
-
-                if (msgItem.mType.equals("sms")) {
-                    intent.putExtra("sms_body", msgItem.mBody);
-                } else {
-                    intent.putExtra("msg_uri", mTempMmsUri);
-                    String subject = getString(R.string.forward_prefix);
-                    if (msgItem.mSubject != null) {
-                        subject += msgItem.mSubject;
-                    }
-                    intent.putExtra("subject", subject);
-                }
-
-                Contact contact = Contact.get(msgItem.mAddress, false);
-                String nameAndNumber = Contact.formatNameAndNumber(
-                        contact.getName(), contact.getNumber(), "");
-                if (!mOpComposeExt.forwardMessage(
-                        ComposeMessageActivity.this, msgItem, nameAndNumber, intent)) {
-                    intent.putExtra(KEY_EXIT_ON_SENT, true);
-                }
-
-                // ForwardMessageActivity is simply an alias in the manifest for
-                // ComposeMessageActivity. We have to make an alias because ComposeMessageActivity
-                // launch flags specify singleTop. When we forward a message, we want to start a
-                // separate ComposeMessageActivity. The only way to do that is to override the
-                // singleTop flag, which is impossible to do in code. By creating an alias to the
-                // activity, without the singleTop flag, we can launch a separate
-                // ComposeMessageActivity to edit the forward message.
-                intent.setClassName(ComposeMessageActivity.this,
-                        "com.android.mms.ui.ForwardMessageActivity");
-                startActivity(intent);
-            }
-        }, R.string.sync_mms_to_db);
-    }
-
-    /**
-     * Context menu handlers for the message list view.
-     */
-    private final class MsgListMenuClickListener implements MenuItem.OnMenuItemClickListener {
-        private MessageItem mMsgItem;
-
-        public MsgListMenuClickListener(MessageItem msgItem) {
-            mMsgItem = msgItem;
-        }
-
-        @Override
-        public boolean onMenuItemClick(MenuItem item) {
-            if (mMsgItem == null) {
-                return false;
-            }
-            if (mIpCompose.onIpMenuItemClick(item, mMsgItem.mIpMessageItem)) {
-                return true;
-            }
-
-            Intent deliveryIntent = new Intent(
-                    ComposeMessageActivity.this, DeliveryReportActivity.class);
-            Intent intentMultiSave = new Intent(
-                    ComposeMessageActivity.this, MultiSaveActivity.class);
-            if (mOpComposeExt.onMenuItemClick(
-                    item, mMsgItem.mOpMessageItemExt, intentMultiSave, deliveryIntent)) {
-                return true;
-            }
-
-            switch (item.getItemId()) {
-                case MENU_EDIT_MESSAGE:
-                    editMessageItem(mMsgItem);
-                    drawBottomPanel();
-                    return true;
-                case MENU_COPY:
-                case MENU_COPY_MESSAGE_TEXT:
-                    /// M: keep original string when copy, if delete '\r', search will failed. @{
-                    if (mMsgItem.mBody != null) {
-                        copyToClipboard(mMsgItem.mBody);
-                    } else {
-                        MmsLog.w(TAG, "onMenuItemClick, mMsgItem.mBody == null");
-                        return false;
-                    }
-                    /// @}
-                    return true;
-
-                case MENU_FORWARD_MESSAGE:
-                    /// M: @{
-                    final MessageItem mRestrictedItem = mMsgItem;
-                    if (WorkingMessage.sCreationMode == 0 ||
-                      !MessageUtils.isRestrictedType(ComposeMessageActivity.this,
-                              mMsgItem.mMsgId)) {
-                        runOnUiThread(new Runnable() {
-                            public void run() {
-                                forwardMessage(mRestrictedItem);
-                            }
-                        });
-                    } else if (WorkingMessage.sCreationMode == WorkingMessage.WARNING_TYPE) {
-                        new AlertDialog.Builder(ComposeMessageActivity.this)
-                        .setTitle(R.string.restricted_forward_title)
-                        .setIconAttribute(android.R.attr.alertDialogIcon)
-                        .setMessage(R.string.restricted_forward_message)
-                        .setPositiveButton(android.R.string.ok,
-                                new DialogInterface.OnClickListener() {
-                                public void onClick(DialogInterface dialog, int which) {
-                                    int createMode = WorkingMessage.sCreationMode;
-                                    WorkingMessage.sCreationMode = 0;
-                                    runOnUiThread(new Runnable() {
-                                        public void run() {
-                                            forwardMessage(mRestrictedItem);
-                                        }
-                                    });
-                                    WorkingMessage.sCreationMode = createMode;
-                                }
-                            })
-                        .setNegativeButton(android.R.string.cancel, null)
-                        .show();
-                    }
-                    /// @}
-                    return true;
-
-                case MENU_VIEW_SLIDESHOW:
-                    /// M: Code analyze 024, If the click operator can be responsed. @{
-                    if (mClickCanResponse) {
-                        mClickCanResponse = false;
-                        MessageUtils.viewMmsMessageAttachment(ComposeMessageActivity.this,
-                                ContentUris.withAppendedId(Mms.CONTENT_URI, mMsgItem.mMsgId), null,
-                                getAsyncDialog());
-                    return true;
-                    }
-                    /// @}
-                case MENU_VIEW_MESSAGE_DETAILS:
-                    return showMessageDetails(mMsgItem);
-
-                case MENU_DELETE_MESSAGE: {
-                    DeleteMessageListener l = new DeleteMessageListener(mMsgItem);
-
-                    /// M: Code analyze 027,Add for deleting one message.@{
-                    // (Why only query sms table?)
-                    String where = Telephony.Mms._ID + "=" + mMsgItem.mMsgId;
-                    String[] projection = new String[] { Sms.Inbox.THREAD_ID };
-                    MmsLog.d(TAG, "where:" + where);
-                    Cursor queryCursor = Sms.query(getContentResolver(), // query uri:content://sms
-                            projection, where, null);
-
-                    if (queryCursor != null) {
-                        if (queryCursor.moveToFirst()) {
-                            mThreadId = queryCursor.getLong(0);
-                        }
-                        queryCursor.close();
-                    }
-                    /// @}
-                    confirmDeleteDialog(l, mMsgItem.mLocked);
-                    return true;
-                }
-                case MENU_DELIVERY_REPORT:
-                    showDeliveryReport(mMsgItem.mMsgId, mMsgItem.mType);
-                    return true;
-
-                case MENU_COPY_TO_SDCARD: {
-                    /// M: Code analyze 021, Copy valid parts of the attachment(pdu) to SD card.
-                    /// This opeartor will be removed to a separate activity.  @{
-                    /// M: new feature, change default disk when storage is full
-                    long availSize = MessageUtils.getAvailableBytesInFileSystemAtGivenRoot
-                                                    (StorageManagerEx.getDefaultPath());
-                    boolean haveExSD = MessageUtils.existingSD(ComposeMessageActivity.this, true);
-                    boolean haveInSD = MessageUtils.existingSD(ComposeMessageActivity.this, false);
-
-                    /// M: fix bug ALPS00574679, modify toast string when haven't SD Card @{
-                    if (!haveExSD && !haveInSD) {
-                        Toast.makeText(ComposeMessageActivity.this,
-                                getString(R.string.no_sdcard_suggestion),
-                                Toast.LENGTH_LONG).show();
-                        return false;
-                    }
-                    /// @}
-
-                    if (mMsgItem.mMessageSize > availSize) {
-                        if ((haveInSD && !haveExSD) || (!haveInSD && haveExSD)) {
-                            Toast.makeText(ComposeMessageActivity.this,
-                                    getString(R.string.export_disk_problem),
-                                    Toast.LENGTH_LONG).show();
-                            return false;
-                        } else {
-                            new AlertDialog.Builder(ComposeMessageActivity.this)
-                            .setTitle(R.string.copy_to_sdcard_fail)
-                            .setIconAttribute(android.R.attr.alertDialogIcon)
-                            .setMessage(R.string.change_default_disk)
-                            .setPositiveButton(R.string.change,
-                                    new DialogInterface.OnClickListener() {
-                                public void onClick(DialogInterface dialog, int which) {
-                                    Intent intent = new Intent(
-                                            "android.settings.MEMORY_CARD_SETTINGS");
-                                    startActivity(intent);
-                                }
-                            })
-                            .setNegativeButton(android.R.string.cancel, null)
-                            .show();
-                        }
-                    } else {
-
-                        intentMultiSave.putExtra("msgid", mMsgItem.mMsgId);
-                        startActivityForResult(intentMultiSave, REQUEST_CODE_MULTI_SAVE);
-                     }
-                    return true;
-                }
-
-                case MENU_SAVE_RINGTONE: {
-                    int resId = getDrmMimeSavedStringRsrc(mMsgItem.mMsgId,
-                            saveRingtone(mMsgItem.mMsgId));
-                    Toast.makeText(ComposeMessageActivity.this, resId, Toast.LENGTH_SHORT).show();
-                    return true;
-                }
-                case MENU_LOCK_MESSAGE: {
-                    lockMessage(mMsgItem, true);
-                    return true;
-                }
-                case MENU_UNLOCK_MESSAGE: {
-                    lockMessage(mMsgItem, false);
-                    return true;
-                }
-
-                /// M: Code analyze 022, Add bookmark. Maybe exist multi URL addresses. @{
-                case MENU_ADD_TO_BOOKMARK: {
-                    if (mURLs.size() == 1) {
-                        Browser.saveBookmark(ComposeMessageActivity.this, null, mURLs.get(0));
-                    } else if (mURLs.size() > 1) {
-                        CharSequence[] items = new CharSequence[mURLs.size()];
-                        for (int i = 0; i < mURLs.size(); i++) {
-                            items[i] = mURLs.get(i);
-                        }
-                        new AlertDialog.Builder(ComposeMessageActivity.this)
-                            .setTitle(R.string.menu_add_to_bookmark)
-                            .setIcon(MessageResource.drawable.ic_dialog_menu_generic)
-                            .setItems(items, new DialogInterface.OnClickListener() {
-                                public void onClick(DialogInterface dialog, int which) {
-                                    Browser.saveBookmark(ComposeMessageActivity.this,
-                                            null, mURLs.get(which));
-                                    }
-                                })
-                            .show();
-                    }
-                    return true;
-                }
-
-                /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-                case MENU_SAVE_MESSAGE_TO_SUB: {
-                    mSaveMsgThread = new SaveMsgThread(mMsgItem.mType, mMsgItem.mMsgId);
-                    mSaveMsgThread.start();
-                    return true;
-                }
-                /// @}
-
-                /// M: Code analyze 016, Add for select text copy. @{
-                case MENU_SELECT_TEXT: {
-                    AdapterView.AdapterContextMenuInfo info =
-                        (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
-                    Log.i(TAG, "onMenuItemClick(): info.position = " + info.position);
-                    mMsgListAdapter.getItemId(info.position);
-                    MessageListItem msglistItem = (MessageListItem) info.targetView;
-                    if (msglistItem != null) {
-                        Log.i(TAG, "msglistItem != null");
-                        TextView textView =
-                            (TextView) msglistItem.findView(MessageListItem.text_view);
-                        AlertDialog.Builder builder =
-                            new AlertDialog.Builder(ComposeMessageActivity.this);
-                        LayoutInflater factory = LayoutInflater.from(builder.getContext());
-                        final View textEntryView =
-                            factory.inflate(R.layout.alert_dialog_text_entry, null);
-                        EditText contentSelector =
-                            (EditText) textEntryView.findViewById(R.id.content_selector);
-                        contentSelector.setText(textView.getText());
-                        builder.setTitle(R.string.select_text)
-                               .setView(textEntryView)
-                               .setPositiveButton(R.string.yes, null)
-                               .show();
-                    }
-                    return true;
-                }
-                case MENU_ADD_ADDRESS_TO_CONTACTS: {
-                    mAddContactIntent = item.getIntent();
-                    startActivityForResult(mAddContactIntent, REQUEST_CODE_ADD_CONTACT);
-                    return true;
-                }
-                /// @}
-
-                default:
-                    return false;
-            }
-        }
-    }
-
-    private void lockMessage(final MessageItem msgItem, final boolean locked) {
-        final Uri uri;
-        if ("sms".equals(msgItem.mType)) {
-            uri = Sms.CONTENT_URI;
-        } else {
-            uri = Mms.CONTENT_URI;
-        }
-        final Uri lockUri = ContentUris.withAppendedId(uri, msgItem.mMsgId);
-
-        final ContentValues values = new ContentValues(1);
-        values.put("locked", locked ? 1 : 0);
-
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                if (mIpCompose.lockMessage(getApplicationContext(), msgItem.mIpMessageItem,
-                        locked)) {
-                    return;
-                }
-                if (mOpComposeExt.lockMessage(getApplicationContext(), uri, msgItem.mMsgId,
-                        msgItem.mIpMessageId, locked)) {
-                    return;
-                }
-                getContentResolver().update(lockUri, values, null, null);
-            }
-        }, "ComposeMessageActivity.lockMessage").start();
-    }
-
-    /**
-     * Looks to see if there are any valid parts of the attachment that can be copied to a SD card.
-     * @param msgId
-     */
-    private boolean haveSomethingToCopyToSDCard(long msgId) {
-        PduBody body = null;
-        try {
-            body = SlideshowModel.getPduBody(this,
-                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
-        } catch (MmsException e) {
-            Log.e(TAG, "haveSomethingToCopyToSDCard can't load pdu body: " + msgId);
-        }
-        if (body == null) {
-            return false;
-        }
-
-        boolean result = false;
-        int partNum = body.getPartsNum();
-        for (int i = 0; i < partNum; i++) {
-            PduPart part = body.getPart(i);
-            // M: fix bug ALPS00355917
-            byte[] fileName = part.getFilename();
-            String mSrc = null;
-            if (fileName == null) {
-                fileName = part.getContentLocation();
-            }
-            if (fileName != null) {
-                mSrc = new String(fileName);
-            }
-            String type =  MessageUtils.getContentType(new String(part.getContentType()), mSrc);
-            part.setContentType(type.getBytes());
-            if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                log("[CMA] haveSomethingToCopyToSDCard: part[" + i + "] contentType=" + type);
-            }
-            /// M: Code analyze 057,Now, if the pdu type is "application/ogg" or
-            /// vcard and vcalender attachment can be saved to sdcard.
-            if (MmsContentType.isImageType(type) || MmsContentType.isVideoType(type) ||
-                    MmsContentType.isAudioType(type) || DrmUtils.isDrmType(type) ||
-                    "application/ogg".equalsIgnoreCase(type)
-                    || FileAttachmentModel.isSupportedFile(part)
-                    /// M: fix bug ALPS00446644, support dcf (0ct-stream) file to save
-                    || (mSrc != null && mSrc.toLowerCase().endsWith(".dcf"))) {
-            /// @}
-                return true;
-            }
-        }
-
-        /// M: add for attachment enhance
-        // Justify weather there are attachments in parts but not in slides
-        // SlideshowModel mSlideShowModel = mWorkingMessage.getSlideshow();
-        return mOpComposeExt.haveSomethingToCopyToSDCard(this, body);
-    }
-
-    /**
-     * Copies media from an Mms to the DrmProvider
-     * @param msgId
-     */
-    private boolean saveRingtone(long msgId) {
-        boolean result = true;
-        PduBody body = null;
-        try {
-            body = SlideshowModel.getPduBody(this,
-                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
-        } catch (MmsException e) {
-            Log.e(TAG, "copyToDrmProvider can't load pdu body: " + msgId);
-        }
-        if (body == null) {
-            return false;
-        }
-
-        int partNum = body.getPartsNum();
-        for (int i = 0; i < partNum; i++) {
-            PduPart part = body.getPart(i);
-            String type = new String(part.getContentType());
-
-            if (DrmUtils.isDrmType(type)) {
-                // All parts (but there's probably only a single one) have to be successful
-                // for a valid result.
-                result &= copyPart(part, Long.toHexString(msgId));
-            }
-        }
-        return result;
-    }
-
-    /**
-     * Returns true if any part is drm'd audio with ringtone rights.
-     * @param msgId
-     * @return true if one of the parts is drm'd audio with rights to save as a ringtone.
-     */
-    private boolean isDrmRingtoneWithRights(long msgId) {
-        PduBody body = null;
-        try {
-            body = SlideshowModel.getPduBody(this,
-                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
-        } catch (MmsException e) {
-            Log.e(TAG, "isDrmRingtoneWithRights can't load pdu body: " + msgId);
-        }
-        if (body == null) {
-            return false;
-        }
-
-        int partNum = body.getPartsNum();
-        for (int i = 0; i < partNum; i++) {
-            PduPart part = body.getPart(i);
-            String type = new String(part.getContentType());
-
-            if (DrmUtils.isDrmType(type)) {
-                String mimeType = MmsApp.getApplication().getDrmManagerClient()
-                        .getOriginalMimeType(part.getDataUri());
-                if (MmsContentType.isAudioType(mimeType)
-                        && DrmUtils.haveRightsForAction(part.getDataUri(),
-                        DrmStore.Action.RINGTONE)) {
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Returns true if all drm'd parts are forwardable.
-     * @param msgId
-     * @return true if all drm'd parts are forwardable.
-     */
-    private boolean isForwardable(long msgId) {
-        PduBody body = null;
-        try {
-            body = SlideshowModel.getPduBody(this,
-                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
-        } catch (MmsException e) {
-            Log.e(TAG, "getDrmMimeType can't load pdu body: " + msgId);
-        }
-        if (body == null) {
-            return false;
-        }
-
-        int partNum = body.getPartsNum();
-        for (int i = 0; i < partNum; i++) {
-            PduPart part = body.getPart(i);
-            String type = new String(part.getContentType());
-            if (DrmUtils.isDrmType(type) && !DrmUtils.haveRightsForAction(part.getDataUri(),
-                    DrmStore.Action.TRANSFER)) {
-                    return false;
-            }
-        }
-        return true;
-    }
-
-    private int getDrmMimeMenuStringRsrc(long msgId) {
-        if (isDrmRingtoneWithRights(msgId)) {
-            return R.string.save_ringtone;
-        }
-        return 0;
-    }
-
-    private int getDrmMimeSavedStringRsrc(long msgId, boolean success) {
-        if (isDrmRingtoneWithRights(msgId)) {
-            return success ? R.string.saved_ringtone : R.string.saved_ringtone_fail;
-        }
-        return 0;
-    }
-
-    /**
-     * Copies media from an Mms to the "download" directory on the SD card. If any of the parts
-     * are audio types, drm'd or not, they're copied to the "Ringtones" directory.
-     * @param msgId
-     */
-    private boolean copyMedia(long msgId) {
-        boolean result = true;
-        PduBody body = null;
-        try {
-            body = SlideshowModel.getPduBody(this,
-                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
-        } catch (MmsException e) {
-            Log.e(TAG, "copyMedia can't load pdu body: " + msgId);
-        }
-        if (body == null) {
-            return false;
-        }
-
-        int partNum = body.getPartsNum();
-        for (int i = 0; i < partNum; i++) {
-            PduPart part = body.getPart(i);
-
-            // all parts have to be successful for a valid result.
-            result &= copyPart(part, Long.toHexString(msgId));
-        }
-        return result;
-    }
-
-    private boolean copyPart(PduPart part, String fallback) {
-        Uri uri = part.getDataUri();
-        String type = new String(part.getContentType());
-        boolean isDrm = DrmUtils.isDrmType(type);
-        if (isDrm) {
-            type = MmsApp.getApplication().getDrmManagerClient()
-                    .getOriginalMimeType(part.getDataUri());
-        }
-        if (!MmsContentType.isImageType(type) && !MmsContentType.isVideoType(type) &&
-                !MmsContentType.isAudioType(type)) {
-            return true;    // we only save pictures, videos, and sounds. Skip the text parts,
-                            // the app (smil) parts, and other type that we can't handle.
-                            // Return true to pretend that we successfully saved the part so
-                            // the whole save process will be counted a success.
-        }
-        InputStream input = null;
-        FileOutputStream fout = null;
-        try {
-            input = mContentResolver.openInputStream(uri);
-            if (input instanceof FileInputStream) {
-                FileInputStream fin = (FileInputStream) input;
-
-                byte[] location = part.getName();
-                if (location == null) {
-                    location = part.getFilename();
-                }
-                if (location == null) {
-                    location = part.getContentLocation();
-                }
-
-                String fileName;
-                if (location == null) {
-                    // Use fallback name.
-                    fileName = fallback;
-                } else {
-                    // For locally captured videos, fileName can end up being something like this:
-                    //      /mnt/sdcard/Android/data/com.android.mms/cache/.temp1.3gp
-                    fileName = new String(location);
-                }
-                File originalFile = new File(fileName);
-                fileName = originalFile.getName();  // Strip the full path of where the "part" is
-                                                    // stored down to just the leaf filename.
-
-                // Depending on the location, there may be an
-                // extension already on the name or not. If we've got audio, put the attachment
-                // in the Ringtones directory.
-                String dir = Environment.getExternalStorageDirectory() + "/"
-                                + (MmsContentType.isAudioType(type) ?
-                                        Environment.DIRECTORY_RINGTONES :
-                                    Environment.DIRECTORY_DOWNLOADS)  + "/";
-                String extension;
-                int index = fileName.lastIndexOf('.');
-                if (index == -1) {
-                    extension = MimeTypeMap.getSingleton().getExtensionFromMimeType(type);
-                } else {
-                    extension = fileName.substring(index + 1, fileName.length());
-                    fileName = fileName.substring(0, index);
-                }
-                MmsLog.i(TAG, "Save part extension name is: " + extension);
-                if (isDrm) {
-                    extension += DrmUtils.getConvertExtension(type);
-                }
-                // Remove leading periods. The gallery ignores files starting with a period.
-                fileName = fileName.replaceAll("^.", "");
-
-                File file = getUniqueDestination(dir + fileName, extension);
-
-                // make sure the path is valid and directories created for this file.
-                File parentFile = file.getParentFile();
-                if (!parentFile.exists() && !parentFile.mkdirs()) {
-                    MmsLog.wpi(TAG, " copyPart: mkdirs for " + parentFile.getPath() + " failed!");
-                    return false;
-                }
-
-                fout = new FileOutputStream(file);
-
-                byte[] buffer = new byte[8000];
-                int size = 0;
-                while ((size = fin.read(buffer)) != -1) {
-                    fout.write(buffer, 0, size);
-                }
-
-                // Notify other applications listening to scanner events
-                // that a media file has been added to the sd card
-                sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,
-                        Uri.fromFile(file)));
-            }
-        } catch (IOException e) {
-            // Ignore
-            Log.e(TAG, "IOException caught while opening or reading stream", e);
-            return false;
-        } finally {
-            if (null != input) {
-                try {
-                    input.close();
-                } catch (IOException e) {
-                    // Ignore
-                    Log.e(TAG, "IOException caught while closing stream", e);
-                    return false;
-                }
-            }
-            if (null != fout) {
-                try {
-                    fout.close();
-                } catch (IOException e) {
-                    // Ignore
-                    Log.e(TAG, "IOException caught while closing stream", e);
-                    return false;
-                }
-            }
-        }
-        return true;
-    }
-
-    private File getUniqueDestination(String base, String extension) {
-        File file = new File(base + "." + extension);
-
-        for (int i = 2; file.exists(); i++) {
-            file = new File(base + "_" + i + "." + extension);
-        }
-        return file;
-    }
-
-    private void showDeliveryReport(long messageId, String type) {
-        Intent intent = new Intent(this, DeliveryReportActivity.class);
-        intent.putExtra("message_id", messageId);
-        intent.putExtra("message_type", type);
-
-        startActivity(intent);
-    }
-
-    private final IntentFilter mHttpProgressFilter = new IntentFilter(PROGRESS_STATUS_ACTION);
-
-    private final BroadcastReceiver mHttpProgressReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (PROGRESS_STATUS_ACTION.equals(intent.getAction())) {
-                long token = intent.getLongExtra("token",
-                                    SendingProgressTokenManager.NO_TOKEN);
-                if (token != mConversation.getThreadId()) {
-                    return;
-                }
-
-                int progress = intent.getIntExtra("progress", 0);
-                switch (progress) {
-                    case PROGRESS_START:
-                        setProgressBarVisibility(true);
-                        break;
-                    case PROGRESS_ABORT:
-                    case PROGRESS_COMPLETE:
-                        setProgressBarVisibility(false);
-                        break;
-                    default:
-                        setProgress(100 * progress);
-                }
-            }
-        }
-    };
-
-    private static ContactList sEmptyContactList;
-
-    private ContactList getRecipients() {
-        // If the recipients editor is visible, the conversation has
-        // not really officially 'started' yet.  Recipients will be set
-        // on the conversation once it has been saved or sent.  In the
-        // meantime, let anyone who needs the recipient list think it
-        // is empty rather than giving them a stale one.
-        if (isRecipientsEditorVisible()) {
-            if (sEmptyContactList == null) {
-                sEmptyContactList = new ContactList();
-            }
-            return sEmptyContactList;
-        }
-        return mConversation.getRecipients();
-    }
-
-    private void updateTitle(ContactList list) {
-        String title = null;
-        String subTitle = null;
-        Drawable avatarIcon = null;
-        int cnt = list.size();
-        ArrayList<String> titles = new ArrayList<String>();
-        MmsLog.d(TAG, "updateTitle(): list.size()" + list.size());
-        switch (cnt) {
-            case 0: {
-                /// M: only show "new message" string if list size is 0, if a number
-                /// end without "," or ";" should not display on title.
-                title = getString(R.string.new_message);
-                break;
-            }
-            case 1: {
-                title = list.get(0).getName();      // get name returns the number if there's no
-                                                    // name available.
-                Drawable sDefaultContactImage = this.getResources().getDrawable(
-                    R.drawable.ic_contact_picture);
-                avatarIcon = list.get(0).getAvatar(this, sDefaultContactImage,
-                                                    mConversation != null
-                                                    ? mConversation.getThreadId() : -1);
-                String number = list.get(0).getNumber();
-                String numberAfterFormat;
-//                ImageView ipCustomView = (ImageView) mActionBarCustomView
-//                        .findViewById(R.id.iv_full_integrated);
-
-                // add for ipmessage
-//                if (mIpCompose.onIpUpdateTitle(number, title, ipCustomView, titles)) {
-//                    title = titles.get(0);
-//                    subTitle = titles.get(1);
-//                }
-
-                if (!title.equals(number)) {
-                    numberAfterFormat = MessageUtils.formatNumber(number,
-                            this.getApplicationContext());
-                    if (!title.equals(numberAfterFormat)) {
-                        subTitle = numberAfterFormat;
-                    }
-                }
-                /// M: fix bug ALPS00488976, group mms @{
-                if (mMsgListAdapter.isGroupConversation()) {
-                    mMsgListAdapter.setIsGroupConversation(false);
-                }
-                /// @}
-                break;
-            }
-            default: {
-                // Handle multiple recipients
-                avatarIcon = this.getResources().getDrawable(R.drawable.ic_contact_picture);
-                title = list.formatNames(", ");
-                subTitle = getResources().getQuantityString(R.plurals.recipient_count, cnt, cnt);
-                break;
-            }
-        }
-        mDebugRecipients = list.serialize();
-
-        ActionBar actionBar = getActionBar();
-        if (actionBar == null) {
-            return;
-        }
-        if (avatarIcon != null) {
-            actionBar.setIcon(avatarIcon);
-        }
-
-        if (actionBar.getCustomView() == null) {
-            actionBar.setCustomView(R.layout.actionbar_message_title);
-        }
-        mActionBarCustomView = actionBar.getCustomView();
-        mTopTitle = (TextView) mActionBarCustomView.findViewById(R.id.tv_top_title);
-        mTopSubtitle = (TextView) mActionBarCustomView.findViewById(R.id.tv_top_subtitle);
-        String number = null;
-        if (!list.isEmpty())
-        {
-            number = list.get(0).getNumber();
-            MmsLog.dpi(TAG, "updateTitle(): list.1 number" + number);
-        }
-        // add for ipmessage
-        ImageView ipCustomView = (ImageView) mActionBarCustomView
-                .findViewById(R.id.iv_full_integrated);
-        if (mIpCompose.onIpUpdateTitle(number, null, ipCustomView, titles)) {
-            title = titles.get(0);
-            subTitle = titles.get(1);
-        }
-
-        subTitle = mOpComposeExt.updateTitle(cnt, number, subTitle);
-
-        asyncUpdateThreadMuteIcon();
-        ///M: ALPS00772324 The recipient didn't shown completely after input a recipient's numbers
-        ///M: and put the cursor to the text field.
-        ///M: setMaxWidth to a very large value for textView can width can be wrap_content
-        mTopTitle.setMaxWidth(3000);
-        mTopTitle.setText(title);
-		setTextMarquee(mTopTitle);
-        if (TextUtils.isEmpty(subTitle)) {
-            if (cnt == 0) {
-                actionBar.setIcon(R.drawable.ic_launcher_smsmms);
-            }
-            mTopSubtitle.setVisibility(View.GONE);
-        } else {
-            mTopSubtitle.setText(subTitle);
-            mTopSubtitle.setVisibility(View.VISIBLE);
-        }
-        actionBar.setDisplayShowCustomEnabled(true);
-        actionBar.setDisplayShowTitleEnabled(false);
-    }
-
-	public static void setTextMarquee(TextView textView) {
-        if (textView != null) {
-            textView.setEllipsize(TextUtils.TruncateAt.MARQUEE);
-			textView.setMarqueeRepeatLimit(6);
-            textView.setSingleLine(true);
-            textView.setSelected(true);
-            textView.setFocusable(true);
-            textView.setFocusableInTouchMode(true);
-        }
-    }
-
-    private void asyncUpdateThreadMuteIcon() {
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                boolean value = false;
-                if (mConversation != null && mConversation.getThreadId() > 0) {
-                    value = MessageUtils.checkNeedNotify(ComposeMessageActivity.this,
-                            mConversation.getThreadId(), null);
-                } else {
-                    value = MessageUtils.checkNeedNotify(ComposeMessageActivity.this, 0, null);
-                }
-                final boolean needNotify = value;
-                runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        MmsLog.d(TAG, "asyncUpdateThreadMuteIcon: meedNotify is " + needNotify);
-                        ActionBar actionBar = getActionBar();
-                        if (actionBar.getCustomView() == null) {
-                            actionBar.setCustomView(R.layout.actionbar_message_title);
-                        }
-                        mActionBarCustomView = actionBar.getCustomView();
-                        mMuteLogo = (ImageView) mActionBarCustomView.findViewById(R.id.iv_silent);
-                        mMuteLogo.setVisibility(needNotify ? View.INVISIBLE : View.VISIBLE);
-                    }
-                });
-            }
-        }, "check and update mute icon").start();
-    }
-
-    // Get the recipients editor ready to be displayed onscreen.
-    private void initRecipientsEditor(Bundle bundle) {
-        /// M: Code analyze 046, Whether the recipientedit control has been initialized. @{
-        if (isRecipientsEditorVisible() && isInitRecipientsEditor) {
-        /// @}
-            return;
-        }
-        // Must grab the recipients before the view is made visible because getRecipients()
-        // returns empty recipients when the editor is visible.
-        ContactList recipients = getRecipients();
-        /// M: Code analyze 058, Remove exceed recipients.
-        while (!recipients.isEmpty() && recipients.size() > RECIPIENTS_LIMIT_FOR_SMS) {
-            recipients.remove(RECIPIENTS_LIMIT_FOR_SMS);
-        }
-        /// @}
-
-        ViewStub stub = (ViewStub) findViewById(R.id.recipients_editor_stub);
-        if (stub != null) {
-            View stubView = stub.inflate();
-            mRecipientsEditor = (RecipientsEditor) stubView.findViewById(R.id.recipients_editor);
-            mRecipientsPicker = (ImageButton) stubView.findViewById(R.id.recipients_picker);
-        } else {
-            mRecipientsEditor = (RecipientsEditor) findViewById(R.id.recipients_editor);
-            mRecipientsEditor.setVisibility(View.VISIBLE);
-            mRecipientsPicker = (ImageButton) findViewById(R.id.recipients_picker);
-            /// M: Code analyze 059, Set the pick button visible or
-            /// invisible the same as recipient editor.
-            mRecipientsPicker.setVisibility(View.VISIBLE);
-            /// @}
-        }
-        mRecipientsPicker.setOnClickListener(this);
-        mRecipientsEditor.removeChipChangedListener(mChipWatcher);
-        mRecipientsEditor.addChipChangedListener(mChipWatcher);
-
-        mRecipientsPicker.setEnabled(mIsSmsEnabled);
-        mRecipientsEditor.setEnabled(mIsSmsEnabled);
-        mRecipientsEditor.setFocusableInTouchMode(mIsSmsEnabled);
-        mRecipientsEditor.setIsTouchable(mIsSmsEnabled);
-
-        // M: indicate contain email address or not in RecipientsEditor candidates. @{
-        SharedPreferences prefs =
-            PreferenceManager.getDefaultSharedPreferences(ComposeMessageActivity.this);
-        boolean showEmailAddress =
-            prefs.getBoolean(GeneralPreferenceActivity.SHOW_EMAIL_ADDRESS, true);
-        MmsLog.d(TAG, "initRecipientsEditor(), showEmailAddress = " + showEmailAddress);
-        /// M: fix bug ALPS00380930
-        if (mRecipientsEditor.getAdapter() == null) {
-            ChipsRecipientAdapter chipsAdapter = new ChipsRecipientAdapter(this);
-            chipsAdapter.setShowEmailAddress(showEmailAddress);
-            mRecipientsEditor.setAdapter(chipsAdapter);
-            mRecipientsEditor.setGalSearchDelayer();
-        } else {
-            ((ChipsRecipientAdapter) mRecipientsEditor
-                    .getAdapter()).setShowEmailAddress(showEmailAddress);
-        }
-        // @}
-        if (bundle == null) {
-            mRecipientsEditor.populate(new ContactList());
-            mRecipientsEditor.populate(recipients);
-        }
-        mRecipientsEditor.setOnCreateContextMenuListener(mRecipientsMenuCreateListener);
-        // TODO : Remove the max length limitation due to the multi phone picker is added and the
-        // user is able to select a large number of recipients from the Contacts. The coming
-        // potential issue is that it is hard for user to edit a recipient from hundred of
-        // recipients in the editor box. We may redesign the editor box UI for this use case.
-        // mRecipientsEditor.setFilters(new InputFilter[] {
-        //         new InputFilter.LengthFilter(RECIPIENTS_MAX_LENGTH) });
-
-        mRecipientsEditor.setOnSelectChipRunnable(new Runnable() {
-            public void run() {
-                // After the user selects an item in the pop-up contacts list, move the
-                // focus to the text editor if there is only one recipient.  This helps
-                // the common case of selecting one recipient and then typing a message,
-                // but avoids annoying a user who is trying to add five recipients and
-                // keeps having focus stolen away.
-                if (mRecipientsEditor.getRecipientCount() == 1) {
-                    // if we're in extract mode then don't request focus
-                    final InputMethodManager inputManager = mInputMethodManager;
-                    if (inputManager == null || !inputManager.isFullscreenMode()) {
-                        if (mBottomPanel != null && mBottomPanel.getVisibility() == View.VISIBLE) {
-                            mTextEditor.requestFocus();
-                        }
-                    }
-                }
-            }
-        });
-
-        mRecipientsEditor.setOnFocusChangeListener(new View.OnFocusChangeListener() {
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                if (hasFocus) {
-                    /// M: add for ip message
-                    MmsLog.d(TAG, "onFocusChange(): mRecipientsEditor get focus.");
-                    if (mIsLandscape) {
-                        mTextEditor.setMaxHeight(
-                                mReferencedTextEditorTwoLinesHeight
-                                * mCurrentMaxHeight / mReferencedMaxHeight);
-                    } else {
-                        updateTextEditorHeightInFullScreen();
-                    }
-                }
-                // add for ipmessage
-                mIpCompose.onIpRecipientsEditorFocusChange(
-                        hasFocus, mRecipientsEditor.getNumbers());
-                mOpComposeExt.onRecipientsEditorFocusChange(hasFocus);
-            }
-        });
-
-        mRecipientsEditor.setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                mIpCompose.onIpRecipientsEditorTouch();
-                mOpComposeExt.onRecipientsEditorTouch();
-                return false;
-            }
-        });
-
-        mRecipientsEditor.setChipProcessListener(new ChipProcessListener() {
-            public void onChipProcessDone() {
-                mIsPopulatingRecipients = false;
-                if (mIsConvertToastDelayed) {
-                    mIsConvertToastDelayed = false;
-                    toastConvertInfo(mIsConvertMms);
-                }
-            }
-        });
-
-        // M: fix bug ALPS00355897
-        // PhoneNumberFormatter.setPhoneNumberFormattingTextWatcher(this, mRecipientsEditor);
-
-        mTopPanel.setVisibility(View.VISIBLE);
-        /// M: Code analyze 013, Get contacts from Contact app . @{
-        if (mIsRecipientHasIntentNotHandle && (mIntent != null)) {
-            processPickResult(mIntent);
-            mIsRecipientHasIntentNotHandle = false;
-            mIntent = null;
-        }
-        /// @}
-        mIpCompose.initRecipientsEditor(mRecipientsEditor);
-    }
-
-    //==========================================================
-    // Activity methods
-    //==========================================================
-
-    public static boolean cancelFailedToDeliverNotification(Intent intent, Context context) {
-        if (MessagingNotification.isFailedToDeliver(intent)) {
-            // Cancel any failed message notifications
-            MessagingNotification.cancelNotification(context,
-                        MessagingNotification.MESSAGE_FAILED_NOTIFICATION_ID);
-            return true;
-        }
-        return false;
-    }
-
-    public static boolean cancelFailedDownloadNotification(Intent intent, Context context) {
-        if (MessagingNotification.isFailedToDownload(intent)) {
-            // Cancel any failed download notifications
-            MessagingNotification.cancelNotification(context,
-                        MessagingNotification.DOWNLOAD_FAILED_NOTIFICATION_ID);
-            return true;
-        }
-        return false;
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        mIsSmsEnabled = MmsConfig.isSmsEnabled(this);
-        super.onCreate(savedInstanceState);
-        mSavedInstanceState = savedInstanceState;
-
-        if (requestAllPermissions()) {
-            MmsLog.d(TAG, "onCreate() requestAllPermissions return !!");
-            mNeedRequestPermissins = true;
-            return;
-        } else {
-            if (DraftCache.getInstance() == null) {
-                MmsApp.getApplication().onRequestPermissionsResult();
-            }
-        }
-
-        mForwardingMessage = false;
-
-        /// M: If cell dialog is showed before, do not show it. @{
-        if (savedInstanceState != null
-                && savedInstanceState.getBoolean("cell_dialog_showing", false)) {
-            MmsLog.d(TAG, "cell progress dialog is showed before, do not show it now");
-            savedInstanceState.putBundle("android:savedDialogs", null);
-        }
-        /// @}
-
-        // add for ipmessage
-        mIpCompose = IpMessageUtils.getIpMessagePlugin(this).getIpComposeActivity();
-        // add for op plugin
-        mOpComposeExt = OpMessageUtils.getOpMessagePlugin().getOpComposeExt();
-
-        mMessageSubId = (int) Settings.System.getLong(getContentResolver(),
-                Settings.System.SMS_SIM_SETTING, Settings.System.DEFAULT_SIM_NOT_SET);
-
-        mInputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
-
-        /// M: Code analyze 002,  If a new ComposeMessageActivity is created, kill old one
-        Activity compose = sCompose == null ? null : sCompose.get();
-        /// M Fix CR : ALPS01275735, which has mms draft for conversation A, enter it.
-        /// change recipients froam A to B, then come a B notification , click the notification,
-        /// enter the thread A, it will show wrong composer UI.
-        /// because conversation from cache is the same. @{
-        if (compose != null && compose instanceof ComposeMessageActivity) {
-            Intent in = this.getIntent();
-            /// M : Fix issue ALPS01767850 @{
-            if (in.getBooleanExtra("from_notification", false)) {
-                boolean b = ((ComposeMessageActivity) compose).hasValidRecipient();
-                if (b) {
-                    mLastThreadIdFromNotification
-                            = ((ComposeMessageActivity) compose).mConversation.ensureThreadId();
-                    if (!((ComposeMessageActivity) compose).mWorkingMessage.hasAttachment()) {
-                        sTextEditorText
-                                = ((ComposeMessageActivity) compose)
-                                        .mWorkingMessage.getText().toString();
-                    } else {
-                        sTextEditorText = null;
-                    }
-                }
-            }
-            /// @}
-
-            long thid = in.getLongExtra("thread_id_from_notification", -1);
-            if (((ComposeMessageActivity) compose).mConversation != null) {
-                if (thid == ((ComposeMessageActivity) compose).mConversation.getThreadId()) {
-                    ((ComposeMessageActivity) compose).mConversation.clearThreadId();
-                }
-            }
-        }
-        /// @}
-
-        if (compose != null && !compose.isFinishing() && savedInstanceState == null) {
-            MmsLog.d(TAG, "onCreate finish old compose");
-            compose.finish();
-        }
-        sCompose = new WeakReference(this);
-        /// @}
-        /// M: Code analyze 003,  Set or get max mms size.
-        initMessageSettings();
-        /// @}
-        resetConfiguration(getResources().getConfiguration());
-        /// M: Code analyze 004, Set max height for text editor. @{
-        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
-        if (mIsLandscape) {
-            mCurrentMaxHeight = windowManager.getDefaultDisplay().getWidth();
-        } else {
-            mCurrentMaxHeight = windowManager.getDefaultDisplay().getHeight();
-        }
-        MmsLog.d(TAG, "onCreate(): mCurrentMaxHeight = " + mCurrentMaxHeight);
-        /// @}
-        setContentView(R.layout.compose_message_activity);
-        setProgressBarVisibility(false);
-
-        mIpCompose.onIpComposeActivityCreate(this, mIpComposeCallback, mHandler, mUiHandler,
-                (ImageButton) findViewById(R.id.send_button_sms),
-                (TextView) findViewById(R.id.ip_message_typing_status),
-                (TextView) findViewById(R.id.ipmsg_joyn_stranger_remind),
-                findViewById(R.id.bottom_panel), savedInstanceState,
-                (ImageButton) findViewById(R.id.share_button),
-                (LinearLayout) findViewById(R.id.panel_container),
-                (EditText) findViewById(R.id.embedded_text_editor));
-
-        /// M: add for update sub state dynamically. @{
-        IntentFilter intentFilter =
-            new IntentFilter(TelephonyIntents.ACTION_SUBINFO_RECORD_UPDATED);
-        mOpComposeExt.onCreate(mIpComposeCallback, getIntent(), intentFilter, compose, this,
-                savedInstanceState, mUiHandler, (ImageButton) findViewById(R.id.share_button),
-                (LinearLayout) findViewById(R.id.panel_container),
-                (EditText) findViewById(R.id.embedded_text_editor));
-        /// @}
-
-        /// M: Code analyze 005, Set input mode. @{
-        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
-        /// @}
-
-        // Initialize members for UI elements.
-        initResourceRefs();
-        /// M: Code analyze 006, Control Sub indicator on status bar. @{
-        mStatusBarManager = (StatusBarManager) getSystemService(Context.STATUS_BAR_SERVICE);
-        mComponentName = getComponentName();
-        /// @}
-
-        /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-        mSubCount = 0;
-        /// @}
-
-        mContentResolver = getContentResolver();
-        mBackgroundQueryHandler = new BackgroundQueryHandler(mContentResolver);
-
-        initialize(savedInstanceState, 0, false);
-
-        if (TRACE) {
-            android.os.Debug.startMethodTracing("compose");
-        }
-        /// M: Code analyze 008,unkown . @{
-        mDestroy = false;
-
-        /// @}
-        /// M: Code analyze 009,Show attachment dialog . @{
-        mSoloAlertDialog = new SoloAlertDialog(this);
-        /// @}
-        /// M: Code analyze 007, Get information from Sub or
-        /// save message to Sub.(Get all Sub info) @{
-        mGetSubInfoRunnable.run();
-        /// @} for ALPS00475359 end
-
-        this.registerReceiver(mSubReceiver, intentFilter);
-        /// @}
-    }
-
-    private void showSubjectEditor(boolean show) {
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            log("showSubjectEditor: " + show);
-        }
-
-        if (mSubjectTextEditor == null) {
-            // Don't bother to initialize the subject editor if
-            // we're just going to hide it.
-            if (show == false) {
-                return;
-            }
-            mSubjectTextEditor = (EditText) findViewById(R.id.subject);
-            /// M: Code analyze 068, Unknown. Why delete these code? @{
-            /// mSubjectTextEditor.setFilters(new InputFilter[] {
-            ///     new LengthFilter(MmsConfig.getMaxSubjectLength())});
-            /// @}
-            /// M: Code analyze 001, Plugin opeartor. @{
-            mOpComposeExt.showSubjectEditor(mSubjectTextEditor);
-            /// @}
-       }
-
-        mSubjectTextEditor.setOnKeyListener(show ? mSubjectKeyListener : null);
-
-        mSubjectTextEditor.removeTextChangedListener(mSubjectEditorWatcher);
-        if (show) {
-            mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher);
-        }
-
-        if ((mBottomPanel != null) && (mBottomPanel.getVisibility() == View.VISIBLE)) {
-            if (!show) {
-                mTextEditor.requestFocus();
-            }
-            //mSubjectTextEditor.setNextFocusDownId(R.id.embedded_text_editor);
-            mSubjectTextEditor.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-            mSubjectTextEditor.setImeActionLabel(getText(
-                    com.android.internal.R.string.ime_action_next), EditorInfo.IME_ACTION_NEXT);
-        } else {
-            //mSubjectTextEditor.setNextFocusDownId(-1);
-            mSubjectTextEditor.setImeOptions(EditorInfo.IME_ACTION_DONE);
-            mSubjectTextEditor.setImeActionLabel(
-                    getText(com.android.internal.R.string.ime_action_done),
-                    EditorInfo.IME_ACTION_DONE);
-        }
-        CharSequence subjectText = mWorkingMessage.getSubject();
-        if (subjectText != null && show) {
-            mSubjectTextEditor.setTextKeepState(subjectText);
-            try {
-                mSubjectTextEditor.setSelection(mSubjectTextEditor.getText().toString().length());
-            } catch (IndexOutOfBoundsException e) {
-                mSubjectTextEditor.setSelection(
-                        mSubjectTextEditor.getText().toString().length() - 1);
-            }
-        } else {
-            mSubjectTextEditor.setText("");
-        }
-
-        mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE);
-
-        mSubjectTextEditor.setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                mIpCompose.onIpSubjectTextEditorTouch();
-                mOpComposeExt.onSubjectTextEditorTouch();
-                return false;
-            }
-        });
-
-        mSubjectTextEditor.setOnFocusChangeListener(new View.OnFocusChangeListener() {
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                mIpCompose.onIpSubjectTextEditorFocusChange(hasFocus);
-                mOpComposeExt.onSubjectTextEditorFocusChange(hasFocus);
-            }
-        });
-
-        mSubjectTextEditor.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
-                if (actionId == EditorInfo.IME_ACTION_NEXT) {
-                    if ((mBottomPanel != null) && (mBottomPanel.getVisibility() == View.VISIBLE)) {
-                        mTextEditor.requestFocus();
-                        return true;
-                    }
-                }
-                return false;
-            }
-        });
-        hideOrShowTopPanel();
-    }
-
-    private void hideOrShowTopPanel() {
-        if (mOpComposeExt.hideOrShowTopPanel(mTopPanel)) {
-            return;
-        }
-        boolean anySubViewsVisible = (isSubjectEditorVisible() || isRecipientsEditorVisible());
-        mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE);
-    }
-
-    /// M : Fix issue ALPS01767850 @{
-    /// If there a mms draft with thread id 1, and create a new sms message with threadid 1
-    /// Then send a threadid 1 message, and click the notification to enter the 1 thread
-    /// The sms message will disapre which just edit in the editor box
-    private boolean needLoadDraftWhileFromNotification(Intent intent) {
-        if (intent == null) {
-            return true;
-        }
-        // check from notification or not
-        boolean isFromNotification = intent.getBooleanExtra("from_notification", false);
-
-        if (!isFromNotification) {
-            Log.d(TAG,
-                    "[needLoadDraftWhileFromNotification] NOT from notification, need load draft");
-            return true;
-        }
-
-        // check exist text or not
-        if (sTextEditorText == null || sTextEditorText.trim().length() == 0) {
-            Log.d(TAG, "[needLoadDraftWhileFromNotification] NO" +
-                    " EXIST text in the editor, need load draft");
-            return true;
-        }
-        // check the thread id from notification and the thread id from last compose is the same
-        boolean isSameThread = false;
-
-        long threadIdFromNotification = intent.getLongExtra("thread_id_from_notification", -1);
-
-        if (mLastThreadIdFromNotification == -1 || threadIdFromNotification == -1) {
-            isSameThread = false;
-        } else if (mLastThreadIdFromNotification == threadIdFromNotification) {
-            isSameThread = true;
-        }
-
-        Log.d(TAG, "[needLoadDraftWhileFromNotification] mLastThreadIdFromNotification : "
-                + mLastThreadIdFromNotification
-                + ", threadIdFromNotification : " + threadIdFromNotification);
-
-        if (!isSameThread) {
-            Log.d(TAG, "[needLoadDraftWhileFromNotification] NOT the same thread, load draft");
-            return true;
-        }
-
-        mLastThreadIdFromNotification = -1;
-        Log.d(TAG, "[needLoadDraftWhileFromNotification] return false");
-
-        return false;
-    }
-    ///@}
-
-    public void initialize(Bundle savedInstanceState, long originalThreadId,
-                           boolean fromPremissionresult) {
-        /// M: Code analyze 010, Support dirtory mode. @{
-        Intent intent = getIntent();
-        boolean showInput = false;
-        boolean hiderecipient = false;
-        boolean isMustRecipientEditable = false;
-        if (FolderModeUtils.getMmsDirMode()) {
-            mHomeBox = intent.getIntExtra("folderbox", 0);
-            showInput = intent.getBooleanExtra("showinput", false);
-            hiderecipient = intent.getBooleanExtra("hiderecipient", false);
-            isMustRecipientEditable = true;
-        }
-        /// @}
-
-        // Create a new empty working message.
-        mWorkingMessage = WorkingMessage.createEmpty(this);
-
-        // add for ipmessage
-//        mIpCompose.onIpInitialize(intent, mWorkingMessage);
-
-        // Read parameters or previously saved state of this activity. This will load a new
-        // mConversation
-        initActivityState(savedInstanceState);
-
-        if (LogTag.SEVERE_WARNING && originalThreadId != 0 &&
-                originalThreadId == mConversation.getThreadId()) {
-            LogTag.warnPossibleRecipientMismatch("ComposeMessageActivity.initialize: " +
-                    " threadId didn't change from: " + originalThreadId, this);
-        }
-
-        log("savedInstanceState = " + savedInstanceState +
-            ", intent = " + intent +
-            ", originalThreadId = " + originalThreadId +
-            ", mConversation = " + mConversation);
-
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (!FolderModeUtils.getMmsDirMode()) {
-            if (cancelFailedToDeliverNotification(getIntent(), this)
-                    && savedInstanceState == null) {
-                // Show a pop-up dialog to inform user the message was
-                // failed to deliver.
-                undeliveredMessageDialog(getMessageDate(null));
-            }
-            cancelFailedDownloadNotification(getIntent(), this);
-        }
-        ///  @}
-        // Set up the message history ListAdapter
-        initMessageList();
-        /// M: fix bug for ConversationList select all performance ,update selected thread array.@{
-        mSelectedThreadId = mConversation.getThreadId();
-        /// @}
-        // Load the draft for this thread, if we aren't already handling
-        // existing data, such as a shared picture or forwarded message.
-        boolean isForwardedMessage = false;
-        // We don't attempt to handle the Intent.ACTION_SEND when saveInstanceState is non-null.
-        // saveInstanceState is non-null when this activity is killed. In that case, we already
-        // handled the attachment or the send, so we don't try and parse the intent again.
-        boolean intentHandled = savedInstanceState == null &&
-        /// M: unknown @{
-            (handleSendIntent() || (handleForwardedMessage() && !mConversation.hasDraft()));
-        /// @}
-
-        /// M: ALPS03562153 @{
-        String action = intent.getAction();
-        if ((action != null) && Intent.ACTION_SENDTO.equals(action)) {
-            Log.d(TAG, "[initialize] action: " + action);
-            mCreateFromSendTo = true;
-        }
-        /// @}
-
-        /// M : Fix issue ALPS01767850
-        boolean need = needLoadDraftWhileFromNotification(intent);
-        Log.d(TAG, "[initialize] need : " + need);
-        if (!intentHandled && need) {
-            MmsLog.d(TAG, "Composer init load Draft.");
-            loadDraft();
-        } else if (!need) {
-            mTextEditor.setText(sTextEditorText);
-        }
-
-        sTextEditorText = null;
-
-        // Let the working message know what conversation it belongs to
-        mWorkingMessage.setConversation(mConversation);
-
-        // need init cc editor no matter recipient editor show or not
-        mOpComposeExt.onInitialize(intent, mWorkingMessage.mOpWorkingMessageExt);
-        mOpComposeExt.initRecipientsEditor(savedInstanceState,
-                (RecipientsEditor) findViewById(R.id.recipients_cc_editor));
-
-        // Show the recipients editor if we don't have a valid thread. Hide it otherwise.
-        /// M: @{
-        //  if (mConversation.getThreadId() <= 0) {
-        if (mConversation.getThreadId() <= 0L
-            || (mConversation.getMessageCount() <= 0
-                    && (intent.getAction() != null || mConversation.hasDraft()))
-            || (mConversation.getThreadId() > 0L && mConversation.getMessageCount() <= 0)
-            || isMustRecipientEditable) {
-         /// @}
-            // Hide the recipients editor so the call to initRecipientsEditor won't get
-            // short-circuited.
-            hideRecipientEditor();
-            if (fromPremissionresult == true) {
-                initRecipientsEditor(null);
-            } else {
-                initRecipientsEditor(savedInstanceState);
-            }
-
-            // Bring up the softkeyboard so the user can immediately enter recipients. This
-            // call won't do anything on devices with a hard keyboard.
-            if (mIsSmsEnabled) {
-                getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                    WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
-            }
-        } else {
-            hideRecipientEditor();
-        }
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (FolderModeUtils.getMmsDirMode()) {
-            if (showInput) {
-                getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                        WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
-            } else {
-                getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                        WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
-            }
-            if (hiderecipient) {
-                if (isRecipientsEditorVisible()) {
-                    hideRecipientEditor();
-                }
-            }
-        }
-        /// M: @{
-
-        invalidateOptionsMenu();    // do after show/hide of recipients editor because the options
-                                    // menu depends on the recipients, which depending upon the
-                                    // visibility of the recipients editor, returns a different
-                                    // value (see getRecipients()).
-
-        updateSendButtonState();
-
-        drawTopPanel(false);
-        if (intentHandled) {
-            // We're not loading a draft, so we can draw the bottom panel immediately.
-            drawBottomPanel();
-        }
-
-        onKeyboardStateChanged();
-
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "update title, mConversation=" + mConversation.toString());
-        }
-
-        // no longer update title in onResume, so set "New Message" here.
-        updateTitle(new ContactList());
-
-        if (isForwardedMessage && isRecipientsEditorVisible()) {
-            // The user is forwarding the message to someone. Put the focus on the
-            // recipient editor rather than in the message editor.
-            mRecipientsEditor.requestFocus();
-        }
-
-        /// M: google JB.MR1 patch, group mms
-        boolean isGroupMms = mConversation.getRecipients().size() > 1;
-        mMsgListAdapter.setIsGroupConversation(isGroupMms);
-        mIpCompose.onIpInitialize(intent, mWorkingMessage);
-    }
-
-    @Override
-    protected void onNewIntent(Intent intent) {
-        super.onNewIntent(intent);
-
-        if (requestAllPermissions()) {
-            mNeedRequestPermissins = true;
-            return;
-        }
-
-        MmsLog.dpi(TAG, "onNewIntent: intent = " + intent.toString());
-      /// M: add for fix ALPS01317511 @{
-        if (!mOpComposeExt.onNewIntent(intent, mHadToSlideShowEditor, mTempMmsUri, mWorkingMessage,
-                this, mRecipientsEditor, FolderViewList.OPTION_INBOX)) {
-            processNewIntent(intent);
-        }
-        /// @}
-    }
-
-   private void processNewIntent(Intent intent) {
-        setIntent(intent);
-        /// M: reload working message if it is not correct.
-        if (!mOpComposeExt.processNewIntent(intent)) {
-            if (!intent.getBooleanExtra(FORWARD_MESSAGE, false)) {
-                reloadWorkingMessage();
-                resetConfiguration(getResources().getConfiguration());
-            }
-        }
-
-        mWaitingAttachment = false;
-
-        if (mQuickTextDialog != null && mQuickTextDialog.isShowing()) {
-            mQuickTextDialog.dismiss();
-            mQuickTextDialog = null;
-        }
-
-        if (mSubSelectDialog != null && mSubSelectDialog.isShowing()) {
-            mSubSelectDialog.dismiss();
-            mSubSelectDialog = null;
-        }
-
-        Conversation conversation = null;
-        mSentMessage = false;
-
-        // If we have been passed a thread_id, use that to find our
-        // conversation.
-
-        // Note that originalThreadId might be zero but if this is a draft and we save the
-        // draft, ensureThreadId gets called async from WorkingMessage.asyncUpdateDraftSmsMessage
-        // the thread will get a threadId behind the UI thread's back.
-        long originalThreadId = mConversation.getThreadId();
-        long threadId = intent.getLongExtra("thread_id", 0);
-        Uri intentUri = intent.getData();
-
-        boolean sameThread = false;
-        if (threadId > 0) {
-            conversation = Conversation.get(getApplicationContext(), threadId, false);
-        } else {
-            if (mConversation.getThreadId() == 0) {
-                // We've got a draft. Make sure the working recipients are synched
-                // to the conversation so when we compare conversations later in this function,
-                // the compare will work.
-                mWorkingMessage.syncWorkingRecipients();
-            }
-            // Get the "real" conversation based on the intentUri. The intentUri might specify
-            // the conversation by a phone number or by a thread id. We'll typically get a threadId
-            // based uri when the user pull down a notification while in ComposeMessageActivity and
-            // we end up here in onNewIntent. mConversation can have a threadId of zero when we're
-            // working on a draft. When a new message comes in for that same recipient, a
-            // conversation will get created behind CMA's back when the message is inserted into
-            // the database and the corresponding entry made in the threads table. The code should
-            // use the real conversation as soon as it can rather than finding out the threadId
-            // when sending with "ensureThreadId".
-            conversation = Conversation.get(getApplicationContext(), intentUri, false);
-        }
-
-        /// M: Fix bug: ALPS00444760, The keyboard display under the MMS after
-        // you tap shortcut enter this thread.
-        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
-        /// @}
-
-        ///M @{
-        if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "onNewIntent: data=" + intentUri + ", thread_id extra is " + threadId +
-                    ", new conversation=" + conversation + ", mConversation=" + mConversation);
-        }
-
-        // this is probably paranoid to compare both thread_ids and recipient lists,
-        // but we want to make double sure because this is a last minute fix for Froyo
-        // and the previous code checked thread ids only.
-        // (we cannot just compare thread ids because there is a case where mConversation
-        // has a stale/obsolete thread id (=1) that could collide against the new thread_id(=1),
-        // even though the recipient lists are different)
-        sameThread = ((conversation.getThreadId() == mConversation.getThreadId() ||
-                mConversation.getThreadId() == 0) &&
-                conversation.equals(mConversation));
-
-        if (sameThread) {
-            log("onNewIntent: same conversation");
-            /// M Fix CR:ALPS01081972 which cannot show received message in the composer @{
-            if (intent.getBooleanExtra("finish", false) == true) {
-                Activity compose = sCompose == null ? null : sCompose.get();
-                if (compose != null && !compose.isFinishing()) {
-                    Log.d("[Mms][ComposeMessageActivity]",
-                            "[onNewIntent] same conversation call finish composer");
-                    compose.finish();
-                    this.startActivity(intent);
-                    return;
-                }
-            }
-            /// @}
-            if (mConversation.getThreadId() == 0) {
-                mConversation = conversation;
-                mWorkingMessage.setConversation(mConversation);
-                updateThreadIdIfRunning();
-                invalidateOptionsMenu();
-            }
-        } else {
-            if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                log("onNewIntent: different conversation");
-            }
-            /// M: @{
-            /// M: Don't let any markAsRead DB updates occur before we've loaded the messages for
-            /// M: the thread.
-            conversation.blockMarkAsRead(true);
-            /// @}
-            if ((!isRecipientsEditorVisible())
-                    || (mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms()))) {
-                    //For ALPS00457252
-                    if (!mWorkingMessage.isWorthSaving()) {
-                        mWorkingMessage.discard();
-                    } else {
-                        saveDraft(false); // if we've got a draft, save it first
-                    }
-            }
-            /// if is not the same thread, to cancel progress dialog @{
-            mUiHandler.removeCallbacks(this.mContactPickRunnable);
-            if (mContactPickDialog != null && mContactPickDialog.isShowing()) {
-                mContactPickDialog.dismiss();
-            }
-            mContactPickDialog = null;
-            /// @}
-            if (mAsyncDialog != null) {
-                mAsyncDialog.dismissProgressDialog();
-            }
-            /// if from shortcut, finish origin compoer, and start again @{
-            if (intent.getBooleanExtra("finish", false) == true) {
-                Activity compose = sCompose == null ? null : sCompose.get();
-                if (compose != null && !compose.isFinishing()) {
-                    Log.d("[Mms][ComposeMessageActivity]", "[onNewIntent] call finish composer");
-                    compose.finish();
-                    this.startActivity(intent);
-                    return;
-                }
-            }
-            /// @}
-            /// M: @{
-            mMsgListAdapter.changeCursor(null);
-            mConversation = conversation;
-            /// @}
-
-            initialize(null, originalThreadId, false);
-            /// M: add for attach dialog do not dismiss when enter other thread. @{
-            if (!mSoloAlertDialog.needShow()) {
-                mSoloAlertDialog.dismiss();
-            }
-            /// @}
-            /// M: fix bug ALPS00941735
-            mIsSameConv = false;
-            MmsLog.d(TAG, "onNewIntent not same thread");
-        }
-        loadMessageContent();
-
-        if (mMsgListAdapter != null && mMsgListAdapter.getCount() == 0) {
-            showKeyBoard(true);
-            if (mRecipientsEditor != null) {
-                mRecipientsEditor.requestFocus();
-            }
-        }
-   }
-
-    private void sanityCheckConversation() {
-        if (mWorkingMessage.getConversation() != mConversation) {
-            LogTag.warnPossibleRecipientMismatch(
-                    "ComposeMessageActivity: mWorkingMessage.mConversation=" +
-                    mWorkingMessage.getConversation() + ", mConversation=" +
-                    mConversation + ", MISMATCH!", this);
-        }
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-
-        if (mNeedRequestPermissins) {
-            MmsLog.d(TAG, "onRestart() mNeedRequestPermissins return !!" + mNeedRequestPermissins);
-            return;
-        }
-        if (requestAllPermissions()) {
-            MmsLog.d(TAG, "onRestart() requestAllPermissions return !!");
-            mNeedRequestPermissins = true;
-            return;
-        }
-
-         /// M: For fix bug ALPS00542156 The "_" still display under the SubA after
-        /// you change it to the "Always ask" or "SubB.@{
-        sCompose = null;
-        sCompose = new WeakReference(this);
-        /// @}
-
-        if (mWorkingMessage != null && mWorkingMessage.isDiscarded()) {
-            // If the message isn't worth saving, don't resurrect it. Doing so can lead to
-            // a situation where a new incoming message gets the old thread id of the discarded
-            // draft. This activity can end up displaying the recipients of the old message with
-            // the contents of the new message. Recognize that dangerous situation and bail out
-            // to the ConversationList where the user can enter this in a clean manner.
-            mWorkingMessage.unDiscard();    // it was discarded in onStop().
-            if (mWorkingMessage.isWorthSaving()) {
-                if (LogTag.VERBOSE) {
-                    log("onRestart: mWorkingMessage.unDiscard()");
-                }
-                //mWorkingMessage.unDiscard();    // it was discarded in onStop().
-
-                sanityCheckConversation();
-            } else if (isRecipientsEditorVisible()) {
-                if (LogTag.VERBOSE) {
-                    log("onRestart: goToConversationList");
-                }
-                goToConversationList();
-            } else {
-                if (LogTag.VERBOSE) {
-                    log("onRestart: loadDraft");
-                }
-                /// M: @{
-                //loadDraft();
-                /// @}
-                mWorkingMessage.setConversation(mConversation);
-                mAttachmentEditor.update(mWorkingMessage);
-                updateTextEditorHeightInFullScreen();
-                invalidateOptionsMenu();
-            }
-        }
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        MmsLog.d(TAG, "onStart() enter!!");
-
-        if (mNeedRequestPermissins) {
-            return;
-        }
-
-        mIsActivityStoped = false;
-        boolean isSmsEnabled = MmsConfig.isSmsEnabled(this);
-        if (isSmsEnabled != mIsSmsEnabled) {
-            mIsSmsEnabled = isSmsEnabled;
-            invalidateOptionsMenu();
-        }
-        /// M: For fix bug ALPS00688631 The "_" still display under the SubA after
-        /// you change it to the "Always ask" or "SubB.@{
-        sCompose = null;
-        sCompose = new WeakReference(this);
-        /// @}
-        /// M Fix CR : ALPS01257113, when sub select dialog showed in default sms. after change to
-        /// non-default sms, dismiss the sub select dialog @{
-        if (!mIsSmsEnabled) {
-            if (mSubSelectDialog != null && mSubSelectDialog.isShowing()) {
-                mSubSelectDialog.dismiss();
-            }
-        }
-        /// @}
-
-        /// M: Code analyze 036, Change text size if adjust font size.@{
-        float textSize = MessageUtils.getPreferenceValueFloat(this,
-                SettingListActivity.TEXT_SIZE, 18);
-        setTextSize(textSize);
-        /// @}
-
-        /// M: Code analyze 013, Get contacts from Contact app . @{
-        misPickContatct = false;
-        /// @}
-        // M:for ALPS01065027,just for compose messagelist in scrolling
-        mMsgListView.setOnScrollListener(mScrollListener);
-        mScrollListener.setIsNeedRefresh(true);
-        mScrollListener.setThreadId(mConversation.getThreadId(), ComposeMessageActivity.this);
-        initFocus();
-
-        // Register a BroadcastReceiver to listen on HTTP I/O process.
-        registerReceiver(mHttpProgressReceiver, mHttpProgressFilter);
-        mOpComposeExt.onStart(this, this);
-        loadMessageContent();
-
-        // Update the fasttrack info in case any of the recipients' contact info changed
-        // while we were paused. This can happen, for example, if a user changes or adds
-        // an avatar associated with a contact.
-        /// M: @{
-        if (mConversation.getThreadId() == 0) {
-            mWorkingMessage.syncWorkingRecipients();
-        }
-        /// @}
-
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "onStart: update title, mConversation=" + mConversation.toString());
-        }
-
-        ActionBar actionBar = getActionBar();
-        /// M: Add log. @{
-        if (actionBar == null) {
-            MmsLog.e(TAG, "ACTION BAR is null, window feature FEATURE_ACTION_BAR: "
-                    + getWindow().hasFeature(Window.FEATURE_ACTION_BAR)
-                    + ", feature FEATURE_NO_TITLE: "
-                    + getWindow().hasFeature(Window.FEATURE_NO_TITLE));
-        } else {
-            actionBar.setDisplayHomeAsUpEnabled(true);
-        }
-        /// @}
-
-        /// M: Code analyze 047, Extra uri from message body and get number from uri.
-        /// Then use this number to update contact cache. @{
-        mNeedUpdateContactForMessageContent = true;
-        /// @}
-
-        /// M: Code analyze 001, Plugin opeartor. @{
-        new MmsDialogNotifyUtils(this).closeMsgDialog();
-        /// @}
-
-        if (isRecipientsEditorVisible() && mIsSmsEnabled &&
-                getResources().getConfiguration().orientation
-                    != Configuration.ORIENTATION_LANDSCAPE) {
-            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                    WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
-        }
-        ///M: WFC: Show notification ticker @ {
-        if (ImsManager.isWfcEnabledByPlatform(getApplicationContext())) {
-//            MessagingNotification.showWfcNotification(getApplicationContext());
-        }
-        /// @}
-        if (mMsgListAdapter != null) {
-            mMsgListAdapter.setOnDataSetChangedListener(mDataSetChangedListener);
-        }
-        addRecipientsListeners();
-    }
-
-    public void loadMessageContent() {
-        // Don't let any markAsRead DB updates occur before we've loaded the messages for
-        // the thread. Unblocking occurs when we're done querying for the conversation
-        // items.
-        MmsLog.d(TAG, "loadMessageContent()");
-        ///M: for fix ALPS01026162, for folder mode, no content loaded.must not mark as read. @{
-        if (!FolderModeUtils.getMmsDirMode()) {
-            mConversation.blockMarkAsRead(true);
-            mConversation.markAsRead();         // dismiss any notifications for this convo
-            /// M: mark conversation as seen, update new messages notification.
-            /// M: fix bug ALPS01065220. onStart() will update message seen = 1.
-            /// But if before update start,
-            /// do not update it.{@
-            mConversation.setComposeIsPaused(false);
-            /// @}
-            mConversation.markAsSeen();
-        }
-        /// @}
-        startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 0);
-        updateSendFailedNotification();
-        updateDownloadFailedNotification();
-        drawBottomPanel();
-    }
-
-    private void updateSendFailedNotification() {
-        final long threadId = mConversation.getThreadId();
-        if (threadId <= 0)
-            return;
-
-        // updateSendFailedNotificationForThread makes a database call, so do the work off
-        // of the ui thread.
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                MessagingNotification.updateSendFailedNotificationForThread(
-                        ComposeMessageActivity.this, threadId);
-            }
-        }, "ComposeMessageActivity.updateSendFailedNotification").start();
-    }
-
-    private void updateDownloadFailedNotification() {
-        final long threadId = mConversation.getThreadId();
-        if (threadId <= 0)
-            return;
-
-        // updateSendFailedNotificationForThread makes a database call, so do the work off
-        // of the ui thread.
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                MessagingNotification.updateDownloadFailedNotificationForThread(
-                        ComposeMessageActivity.this, threadId);
-            }
-        }, "ComposeMessageActivity.updateSendFailedNotificationForThread").start();
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        /// M: Code analyze 033, Save some useful information in order to restore the draft when
-        /// activity restarting.@{
-        // super is commented for a bug work around see MessageUtils.showErrorDialog()
-        super.onSaveInstanceState(outState); //why delete this line?
-        if (mNeedRequestPermissins) {
-            return;
-        }
-        String number = "";
-
-        mOpComposeExt.onSaveInstanceState(outState);
-
-        // save recipients of this coversation
-        if (mRecipientsEditor != null && isRecipientsEditorVisible()) {
-            // TODO need re-coding for below code
-            //outState.putString("recipients", mRecipientsEditor.allNumberToString());
-            /// M: We are compressing the image, so save the thread id in order to restore the
-            /// M: draft when activity restarting.
-            if (mCompressingImage) {
-                outState.putLong("thread", mConversation.ensureThreadId());
-            } else if (mRecipientsEditor.getRecipientCount() < 1) {
-                outState.putLong("thread", mConversation.ensureThreadId());
-                if ((mBackgroundQueryHandler != null) && (mConversation.getThreadId() > 0)) {
-                    Conversation.asyncDeleteObsoleteThreadID(
-                            mBackgroundQueryHandler, mConversation.getThreadId());
-                }
-            } else if (mRecipientsEditor.getRecipientCount() > 0) {
-                ArrayList<String> numbers = (ArrayList<String>) (mRecipientsEditor.getNumbers());
-                outState.putString("recipients", TextUtils.join(";", numbers.toArray()));
-            }
-        } else {
-            /// M: save the current thread id
-            outState.putLong("thread", mConversation.getThreadId());
-            MmsLog.i(TAG, "saved thread id:" + mConversation.getThreadId());
-        }
-        outState.putBoolean("compressing_image", mCompressingImage);
-        // add for ipmessage
-        mIpCompose.onIpSaveInstanceState(outState, mConversation.getThreadId());
-        /// @}
-        mWorkingMessage.writeStateToBundle(outState);
-
-        if (mExitOnSent) {
-            outState.putBoolean(KEY_EXIT_ON_SENT, mExitOnSent);
-        }
-        if (mForwardMessageMode) {
-            outState.putBoolean(KEY_FORWARDED_MESSAGE, mForwardMessageMode);
-        }
-        if (!mAppendAttachmentSign) {
-            MmsLog.d(TAG, "onSaveInstanceState mAppendAttachmentSign : " + mAppendAttachmentSign);
-            outState.putBoolean(KEY_APPEND_MESSAGE, mAppendAttachmentSign);
-        }
-        /// M: save cell progress dialog is showing or not
-        outState.putBoolean("cell_dialog_showing", mIsCellDialogShowing);
-    }
-
-    @Override
-    protected void onResume() {
-        /// M: fix bug ALPS00444752, set false to enable to Show ContactPicker
-        mShowingContactPicker = false;
-        super.onResume();
-        if (mNeedRequestPermissins) {
-            return;
-        }
-
-        mIsActivityPaused = false;
-        mNeedSaveDraftAfterStop = false;
-        boolean isSmsEnabled = MmsConfig.isSmsEnabled(this);
-        if (isSmsEnabled != mIsSmsEnabled) {
-            mIsSmsEnabled = isSmsEnabled;
-            invalidateOptionsMenu();
-        }
-        initFocus();
-        getAsyncDialog().resetShowProgressDialog();
-         /// M: Code analyze 005, Set input mode. @{
-        Configuration config = getResources().getConfiguration();
-        MmsLog.d(TAG, "onResume - config.orientation = " + config.orientation);
-        if (config.orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            MmsLog.e(TAG, "onResume Set setSoftInputMode to 0x" +
-                    Integer.toHexString(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                            WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN));
-            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                    WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
-        }
-        /// @}
-
-        /// M: Code analyze 024, If the click operator can be responsed. @{
-        //  button can response to start other activity
-        mClickCanResponse = true;
-        /// @}
-        /// M: Code analyze 038, If the user is editing slideshow now.
-        /// Do not allow the activity finish but return directly when back key is entered. @{
-        mIsEditingSlideshow = false;
-        /// @}
-        String text = null;
-        if (mWorkingMessage != null && mWorkingMessage.getText() != null) {
-            text = mWorkingMessage.getText().toString();
-        }
-
-        mOpComposeExt.initResourceRefsOnResume(
-                        (LinearLayout) findViewById(R.id.button_with_counter),
-                        (TextView) findViewById(R.id.ct_text_counter),
-                        mAttachmentEditor.mOpAttachmentEditorExt);
-
-        mOpComposeExt.onResume(mSubCount, text, mIsSmsEnabled,
-                mRecipientsEditor, mSubjectTextEditor);
-
-        if (mDrawBottomPanel) {
-            drawBottomPanel();
-        }
-        // OLD: get notified of presence updates to update the titlebar.
-        // NEW: we are using ContactHeaderWidget which displays presence, but updating presence
-        //      there is out of our control.
-        //Contact.startPresenceObserver();
-
-        //addRecipientsListeners();
-
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "onResume: update title, mConversation=" + mConversation.toString());
-        }
-
-        // There seems to be a bug in the framework such that setting the title
-        // here gets overwritten to the original title.  Do this delayed as a
-        // workaround.
-        if (isRecipientsEditorVisible()) {
-            asyncUpdateThreadMuteIcon();
-        } else {
-            new Thread(new Runnable() {
-                public void run() {
-                    /// M: Fix CR ALPS00558119
-                    /// When the Contact phone is long enough ,after add audio,
-                    /// The title will show only phony number @{
-                    ///@M:fix bug ALPS00871320 tablet has wide space to show more contact
-                    int limite = getLimitedContact();
-                    ///@
-                    final ContactList recipients = getRecipients();
-                    int min = Math.min(limite, recipients.size());
-                    MmsLog.d(TAG, "onResume reload recipients size = " + recipients.size());
-                    for (int i = 0; i < min; i++) {
-                        recipients.get(i).reload();
-                    }
-                    mMessageListItemHandler.postDelayed(new Runnable() {
-                        public void run() {
-                            updateTitle(recipients);
-                        }
-                    }, 10);
-                }
-            }).start();
-        }
-
-        mIsRunning = true;
-        updateThreadIdIfRunning();
-
-        // add for ipmessage
-        mIpCompose.onIpComposeActivityResume(isSmsEnabled,
-                mTextEditor, mTextEditorWatcher, mTextCounter,
-                mRecipientsEditor, mSubjectTextEditor);
-        /// M: just update state but didn't notify will miss some mms/sms switch toast.
-        //mWorkingMessage.updateStateForGroupMmsChanged();
-
-        updateSendButtonState();
-
-        if (mOldThreadID == -1 && mConversation != null) {
-            mOldThreadID = mConversation.getThreadId();
-        }
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        MmsLog.d(TAG, "onPause() enter!!");
-        if (mNeedRequestPermissins) {
-            return;
-        }
-        mIsActivityPaused = true;
-        if (FeatureOption.MTK_GMO_ROM_OPTIMIZE) {
-            MmsLog.d(TAG, "onPause() start Draft Service");
-            startService(new Intent(this, DraftService.class));
-        }
-        /// M: fix bug ALPS00421362. Allow any blocked calls to update the thread's read status.
-        /// M: fix bug ALPS01026162.for folder mode, no content loaded.must not mark as read.
-        if (this.isFinishing() && !isRecipientsEditorVisible()
-                && !FolderModeUtils.getMmsDirMode()) {
-            mConversation.blockMarkAsRead(false);
-            mConversation.markAsRead();
-        }
-
-        mDrawBottomPanel = true;
-
-        // OLD: stop getting notified of presence updates to update the titlebar.
-        // NEW: we are using ContactHeaderWidget which displays presence, but updating presence
-        //      there is out of our control.
-        //Contact.stopPresenceObserver();
-        //removeRecipientsListeners();
-
-        // remove any callback to display a progress spinner
-        if (mAsyncDialog != null) {
-            mAsyncDialog.clearPendingProgressDialog();
-        }
-
-        // Remember whether the list is scrolled to the end when we're paused so we can rescroll
-        // to the end when resumed.
-        if (mMsgListAdapter != null &&
-                mMsgListView.getLastVisiblePosition() >= mMsgListAdapter.getCount() - 1) {
-            mSavedScrollPosition = Integer.MAX_VALUE;
-        } else {
-            mSavedScrollPosition = mMsgListView.getFirstVisiblePosition();
-        }
-        if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            Log.v(TAG, "onPause: mSavedScrollPosition=" + mSavedScrollPosition);
-        }
-
-        mIsRunning = false;
-        mErrorDialogShown = true;
-
-        // add for ipmessage
-        mIpCompose.onIpComposeActivityPause();
-
-        /// M: Stop in conversation notification sound
-        MessagingNotification.stopInConversationNotificationSound();
-        /// @}
-
-        checkObsoleteThreadId();
-    }
-
-    @Override
-    protected void onStop() {
-        super.onStop();
-
-        if (mNeedRequestPermissins) {
-            MmsLog.d(TAG, "onStop() no permissions");
-            return;
-        }
-
-        mIsActivityStoped = true;
-//        mContentResolver.unregisterContentObserver(mDraftChangeObserver);
-        /// M: fix bug ALPS01065220. onStart() will update message seen = 1.
-        /// But if before update start,
-        /// do not update it.{@
-        mConversation.setComposeIsPaused(true);
-        /// @}
-        /// M: Code analyze 013, Get contacts from Contact app . @{
-        if (misPickContatct) {
-            stopDraftService();
-            return;
-        }
-        /// @}
-        // Allow any blocked calls to update the thread's read status.
-      /// M: fix bug ALPS01026162.for folder mode, no content loaded.must not mark as read.
-        if (!isRecipientsEditorVisible() && !FolderModeUtils.getMmsDirMode()) {
-            mConversation.blockMarkAsRead(false);
-            mConversation.markAsRead();
-        }
-
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            log("onStop: save draft");
-        }
-        MessagingNotification.setCurrentlyDisplayedThreadId(MessagingNotification.THREAD_NONE);
-        /// M: If image is being compressed, wait for it
-        if (isFinishing()) {
-            waitForCompressing();
-        }
-        /// M: @{
-        if ((!isRecipientsEditorVisible()) ||
-                (mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms()))) {
-            if (isWorthSaving() && MessageUtils.allowSafeDraft(this,
-                    MmsConfig.getDeviceStorageFullStatus(), false, TOAST_TYPE_FOR_SAVE_DRAFT)) {
-                if (!mCompressingImage) {
-                    saveDraft(true);
-                } else {
-                    mNeedSaveDraftAfterStop = true;
-                    log("onStop: skip save draft");
-                }
-                if (mConversation.getMessageCount() == 0) {
-                    ConversationListAdapter.removeSelectedState(mSelectedThreadId);
-                }
-            }
-        }
-        /// @}
-        /// M: @{
-        MmsWidgetProvider.notifyDatasetChanged(getApplicationContext());
-        MmsLog.i(TAG,
-                "onStop(): mWorkingMessage.isDiscarded() == " + mWorkingMessage.isDiscarded());
-        /// @}
-        // Cleanup the BroadcastReceiver.
-        unregisterReceiver(mHttpProgressReceiver);
-        /// M: fix bug ALPS00380930, fix RecipientsAdapter cursor leak @{
-        //if (mRecipientsEditor != null && isFinishing()) {
-        //    CursorAdapter recipientsAdapter = (CursorAdapter)mRecipientsEditor.getAdapter();
-        //    if (recipientsAdapter != null) {
-        //        recipientsAdapter.changeCursor(null);
-        //    }
-        //}
-        /// @}
-
-        // / M: fix bug ALPS00451836, remove FLAG_DISMISS_KEYGUARD flags
-        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD |
-                                   WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
-        stopDraftService();
-
-        ///M: WFC: Stop notification ticker @ {
-        if (ImsManager.isWfcEnabledByPlatform(getApplicationContext())) {
-//            MessagingNotification.stopWfcNotification(getApplicationContext());
-        }
-        if (mMsgListAdapter != null) {
-            MmsLog.d(TAG, "set OnDataSetChangedListener null");
-            mMsgListAdapter.setOnDataSetChangedListener(null);
-        }
-        removeRecipientsListeners();
-    }
-
-
-    private void dismissmDiscardDraftDialog() {
-        if (mDiscardDraftDialog != null && mDiscardDraftDialog.isShowing()) {
-            MmsLog.d(TAG, "dismissmDiscardDraftDialog");
-            mDiscardDraftDialog.dismiss();
-            mDiscardDraftDialog = null;
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        if (mNeedRequestPermissins) {
-            super.onDestroy();
-            MmsLog.d(TAG, "onDestroy() no permissions");
-            return;
-        }
-        dismissmDiscardDraftDialog();
-        /// it will not show draft icon in the conversationlist @{
-       if (!mWorkingMessage.isWorthSaving()) {
-                                   Log.i(TAG, "delete unsavedempty draft: ");
-            mWorkingMessage.discard();
-            mHasDiscardWorkingMessage = true;
-            new Thread(new Runnable() {
-               public void run() {
-                   long threadId = mConversation.getThreadId();
-                   boolean isHasDraft =
-                       DraftCache.refreshDraft(ComposeMessageActivity.this, threadId);
-                   Log.i(TAG, "onDestroy, nothing to be save, reset threadId : "
-                           + threadId + ", isHasDraft : " + isHasDraft);
-                   DraftCache.getInstance().setDraftState(threadId, isHasDraft);
-               }
-           }, "Composer.resetDraftCache").start();
-        }
-        stopDraftService();
-        /// M: fix bug ALPS00473488, delete ObsoleteThread through threadID when discard()
-        if (mConversation.getMessageCount() == 0
-                && (!mWorkingMessage.isWorthSaving()
-                        || mWorkingMessage.isDiscarded())
-                && isRecipientsEditorVisible()) {
-            Conversation.asyncDeleteObsoleteThreads(mBackgroundQueryHandler,
-                    ConversationList.DELETE_OBSOLETE_THREADS_TOKEN);
-            mConversation.setDiscardThreadId(0);
-        }
-        mIsStartMultiDeleteActivity = false;
-        /// @}
-        MmsLog.d(TAG, "onDestroy()");
-        if (TRACE) {
-            android.os.Debug.stopMethodTracing();
-        }
-
-        mUiHandler.removeCallbacks(mContactPickRunnable);
-        if (mContactPickDialog != null && mContactPickDialog.isShowing()) {
-            mContactPickDialog.dismiss();
-        }
-        mContactPickDialog = null;
-
-        unregisterReceiver(mSubReceiver);
-
-        /// @}
-        mDestroy = true;
-        mScrollListener.destroyThread();
-        /// M: Stop not started queries @{
-        if (mBackgroundQueryHandler != null) {
-            MmsLog.d(TAG, "clear pending queries in onDestroy");
-            mBackgroundQueryHandler.cancelOperation(MESSAGE_LIST_QUERY_TOKEN);
-            mBackgroundQueryHandler.removeCallbacks(mQueryMsgListRunnable);
-        }
-        /// @}
-        if (mMsgListAdapter != null) {
-            mMsgListAdapter.destroyTaskStack();
-            /// M: we need unregister cursor, so no more callback
-            mMsgListAdapter.changeCursor(null);
-        }
-        mIpCompose.onIpComposeActivityDestroy();
-        mOpComposeExt.onDestroy();
-
-        /// M: ALPS03562153 @{
-        if (mCreateFromSendTo == true) {
-            MmsLog.d(TAG, "to clear contact cache");
-            Contact.invalidateCache();
-        }
-        /// @}
-
-        super.onDestroy();
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        MmsLog.d(TAG, "onConfigurationChanged-Start");
-        super.onConfigurationChanged(newConfig);
-        if (mNeedRequestPermissins) {
-            return;
-        }
-        mIpCompose.onIpConfig(newConfig);
-        mOpComposeExt.onConfigurationChanged();
-        if (LOCAL_LOGV) {
-            Log.v(TAG, "onConfigurationChanged: " + newConfig);
-        }
-
-        if (resetConfiguration(newConfig)) {
-            // Have to re-layout the attachment editor because we have different layouts
-            // depending on whether we're portrait or landscape.
-            drawTopPanel(isSubjectEditorVisible());
-        }
-        onKeyboardStateChanged();
-        MmsLog.d(TAG, "onConfigurationChanged-End");
-    }
-
-    private boolean mUpdateForScrnOrientationChanged = false;
-    // returns true if landscape/portrait configuration has changed
-    private boolean resetConfiguration(Configuration config) {
-        mIsKeyboardOpen = config.keyboardHidden == KEYBOARDHIDDEN_NO;
-        boolean isLandscape = config.orientation == Configuration.ORIENTATION_LANDSCAPE;
-        mIpCompose.resetIpConfiguration(mIsLandscape, isLandscape, mIsSoftKeyBoardShow);
-        mOpComposeExt.resetConfiguration(mIsLandscape, isLandscape, mIsSoftKeyBoardShow);
-
-        /// M: Code analyze 004, Set max height for text editor. @{
-        if ((mTextEditor != null)
-                && (mTextEditor.getVisibility() == View.VISIBLE) && isLandscape) {
-            mUiHandler.postDelayed(new Runnable() {
-                public void run() {
-                    MmsLog.d(TAG, "resetConfiguration(): mTextEditor.setMaxHeight: "
-                            + mReferencedTextEditorThreeLinesHeight);
-                    mTextEditor.setMaxHeight(mReferencedTextEditorTwoLinesHeight *
-                            mCurrentMaxHeight / mReferencedMaxHeight);
-                }
-            }, 100);
-        }
-        /// @}
-
-        MmsLog.d(TAG, "resetConfiguration(): isLandscape = " + isLandscape + ", mIsKeyboardOpen = "
-                + mIsKeyboardOpen);
-
-        if (mIsLandscape != isLandscape) {
-            MmsLog.d(TAG, "resetConfiguration-mUpdateForScrnOrientationChanged mIsLandscape = "
-                    + mIsLandscape);
-            mUpdateForScrnOrientationChanged = true;
-            mIsLandscape = isLandscape;
-            return true;
-        }
-        return false;
-    }
-
-    private void onKeyboardStateChanged() {
-        // If the keyboard is hidden, don't show focus highlights for
-        // things that cannot receive input.
-        mTextEditor.setEnabled(mIsSmsEnabled);
-        if (!mIsSmsEnabled) {
-            if (mRecipientsEditor != null) {
-                mRecipientsEditor.setFocusableInTouchMode(false);
-                mRecipientsEditor.setIsTouchable(false);
-            }
-            if (mSubjectTextEditor != null) {
-                mSubjectTextEditor.setFocusableInTouchMode(false);
-            }
-            mTextEditor.setFocusableInTouchMode(false);
-            mTextEditor.setHint(R.string.sending_disabled_not_default_app);
-        } else if (mIsKeyboardOpen) {
-            if (mRecipientsEditor != null) {
-                mRecipientsEditor.setFocusableInTouchMode(true);
-                mRecipientsEditor.setIsTouchable(true);
-            }
-            if (mSubjectTextEditor != null) {
-                mSubjectTextEditor.setFocusableInTouchMode(true);
-            }
-            mTextEditor.setFocusableInTouchMode(true);
-            /// M: add for ip message
-            updateTextEditorHint();
-        } else {
-            if (mRecipientsEditor != null) {
-                mRecipientsEditor.setFocusable(false);
-                mRecipientsEditor.setIsTouchable(false);
-            }
-            if (mSubjectTextEditor != null) {
-                mSubjectTextEditor.setFocusable(false);
-            }
-            mTextEditor.setFocusable(false);
-            mTextEditor.setHint(R.string.open_keyboard_to_compose_message);
-        }
-    }
-
-    @Override
-    public void onUserInteraction() {
-        checkPendingNotification();
-    }
-
-    @Override
-    public boolean onKeyDown(int keyCode, KeyEvent event) {
-        Log.d(TAG, "onKeyDown(): keyCode = " + keyCode);
-        if (mNeedRequestPermissins) {
-            return false;
-        }
-        if (mIpCompose != null && mIpCompose.onIpKeyDown(keyCode, event)) {
-            return true;
-        }
-        if (mOpComposeExt != null && mOpComposeExt.onKeyDown(keyCode, event)) {
-            return true;
-        }
-
-        switch (keyCode) {
-            case KeyEvent.KEYCODE_DEL:
-                if ((mMsgListAdapter != null) && (mMsgListView != null) && mMsgListView.isFocused()) {
-                    Cursor cursor;
-                    try {
-                        cursor = (Cursor) mMsgListView.getSelectedItem();
-                    } catch (ClassCastException e) {
-                        Log.e(TAG, "Unexpected ClassCastException.", e);
-                        return super.onKeyDown(keyCode, event);
-                    }
-
-                    if (cursor != null) {
-                        String type = cursor.getString(COLUMN_MSG_TYPE);
-                        long msgId = cursor.getLong(COLUMN_ID);
-                        MessageItem msgItem = mMsgListAdapter.getCachedMessageItem(type, msgId,
-                                cursor);
-                        if (msgItem != null) {
-                            DeleteMessageListener l = new DeleteMessageListener(msgItem);
-                            confirmDeleteDialog(l, msgItem.mLocked);
-                        }
-                        return true;
-                    }
-                }
-                break;
-            case KeyEvent.KEYCODE_DPAD_CENTER:
-                /// M: @{
-                break;
-                /// @}
-            case KeyEvent.KEYCODE_ENTER:
-                /// M: Code analyze 028, Before sending message,check the recipients count
-                /// and add sub card selection dialog if multi sim cards exist.@{
-                /** Fix bug ALPS001070636
-                if (isPreparedForSending()) {
-                    checkRecipientsCount();
-                    return true;
-                } else {
-                    unpreparedForSendingAlert();
-                /// @}
-                }
-                **/
-                break;
-            case KeyEvent.KEYCODE_BACK:
-                /// M: Code analyze 038, If the user is editing slideshow now.
-                /// Do not allow the activity finish but return directly
-                /// when back key is entered. @{
-                if (mIsEditingSlideshow) {
-                    return true;
-                }
-                /// @}
-
-                // M: when out of composemessageactivity,try to send read report
-                if (FeatureOption.MTK_SEND_RR_SUPPORT) {
-                    checkAndSendReadReport();
-                }
-                /// @}
-                mIsCheckObsolete = true;
-                exitComposeMessageActivity(new Runnable() {
-                    @Override
-                    public void run() {
-                        finish();
-                    }
-                });
-                return true;
-            case KeyEvent.KEYCODE_MENU:
-                invalidateOptionsMenu();
-                return false;
-        }
-
-        return super.onKeyDown(keyCode, event);
-    }
-
-    private void unpreparedForSendingAlert() {
-        if (!isHasRecipientCount()) {
-            new AlertDialog.Builder(this).setIconAttribute(
-                    android.R.attr.alertDialogIcon).setTitle(
-                    R.string.cannot_send_message).setMessage(
-                    R.string.cannot_send_message_reason).setPositiveButton(
-                    R.string.yes, new CancelSendingListener()).show();
-        } else {
-            new AlertDialog.Builder(this).setIconAttribute(
-                    android.R.attr.alertDialogIcon).setTitle(
-                    R.string.cannot_send_message).setMessage(
-                    R.string.cannot_send_message_reason_no_content)
-                    .setPositiveButton(R.string.yes,
-                            new CancelSendingListener()).show();
-        }
-    }
-
-    private void exitComposeMessageActivity(final Runnable exit) {
-          VideoThumbnailCache.clear();
-        // If the message is empty, just quit -- finishing the
-        // activity will cause an empty draft to be deleted.
-        if (!mWorkingMessage.isWorthSaving()) {
-            /// M: Code analyze 042, If you discard the draft message manually.@{
-            if (mMsgListAdapter.getCount() == 0) {
-                ConversationListAdapter.removeSelectedState(mSelectedThreadId);
-            }
-            mWorkingMessage.discard();
-            mHasDiscardWorkingMessage = true;
-            /// @}
-            /// M Fix CR: ALPS01222344. new message input a contact and some content,
-            /// incoming a messae which is the same contact as the draft.
-            /// it will not show draft icon in the conversationlist @{
-            new Thread(new Runnable() {
-                public void run() {
-                    long threadId = mConversation.getThreadId();
-                    boolean isHasDraft =
-                        DraftCache.refreshDraft(ComposeMessageActivity.this, threadId);
-                    Log.d(TAG, "exitComposeMessageActivity, nothing to be save, reset threadId : "
-                            + threadId + ", isHasDraft : " + isHasDraft);
-                    DraftCache.getInstance().setDraftState(threadId, isHasDraft);
-                }
-            }, "Composer.resetDraftCache").start();
-            /// @}
-            exit.run();
-            return;
-        }
-
-        if (isRecipientsEditorVisible() &&
-                !mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms())) {
-            mDiscardDraftDialog = MessageUtils.showDiscardDraftConfirmDialog(
-                                this, new DiscardDraftListener());
-            return;
-        }
-
-        if (needSaveDraft()) {
-            if (MessageUtils.allowSafeDraft(this, MmsConfig.getDeviceStorageFullStatus(), true,
-                    TOAST_TYPE_FOR_SAVE_DRAFT)) {
-                /// M: for requery searchactivity.
-                SearchActivity.setNeedRequery();
-                if (mIsSmsEnabled) {
-                    SearchActivity.setWaitSaveDraft();
-                }
-                DraftCache.getInstance().setSavingDraft(true);
-            }
-        }
-        mWorkingMessage.setNeedDeleteOldMmsDraft(true);
-        mToastForDraftSave = true;
-        exit.run();
-    }
-
-    private void goToConversationList() {
-        finish();
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (FolderModeUtils.getMmsDirMode()) {
-            Intent it = new Intent(this, FolderViewList.class);
-            it.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
-                    | Intent.FLAG_ACTIVITY_SINGLE_TOP
-                    | Intent.FLAG_ACTIVITY_CLEAR_TOP);
-            it.putExtra("floderview_key", mHomeBox);
-            startActivity(it);
-        } else {
-        ///  @}
-        /// M: add extra flags
-        Intent it = new Intent(this, ConversationList.class);
-        it.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
-                | Intent.FLAG_ACTIVITY_SINGLE_TOP
-                | Intent.FLAG_ACTIVITY_CLEAR_TOP);
-        startActivity(it);
-        }
-    }
-
-    private void hideRecipientEditor() {
-        if (mRecipientsEditor != null) {
-            Log.d(TAG, "hideRecipientEditor");
-            mRecipientsEditor.removeChipChangedListener(mChipWatcher);
-            mRecipientsEditor.setVisibility(View.GONE);
-            /// M: Code analyze 059, Set the pick button visible or
-            /// invisible the same as recipient editor.
-            mRecipientsPicker.setVisibility(View.GONE);
-            /// @}
-            hideOrShowTopPanel();
-            mRecipientsEditor.recycleBitmap();
-        }
-    }
-
-    private boolean isRecipientsEditorVisible() {
-        return (null != mRecipientsEditor)
-                    && (View.VISIBLE == mRecipientsEditor.getVisibility());
-    }
-
-    private boolean isSubjectEditorVisible() {
-        return (null != mSubjectTextEditor)
-                    && (View.VISIBLE == mSubjectTextEditor.getVisibility());
-    }
-
-    @Override
-    public void onAttachmentChanged() {
-        // Have to make sure we're on the UI thread. This function can be called off of the UI
-        // thread when we're adding multi-attachments
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                drawBottomPanel();
-                updateSendButtonState();
-                drawTopPanel(isSubjectEditorVisible());
-                if (null != mRecipientsEditor) {
-                    if (mWorkingMessage.hasSlideshow()) {
-                        mRecipientsEditor.setImeActionLabel(
-                                getString(MessageResource.string.ime_action_done),
-                                EditorInfo.IME_ACTION_DONE);
-                        mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_DONE);
-                    } else {
-                        mRecipientsEditor.setImeActionLabel(
-                                getString(MessageResource.string.ime_action_next),
-                                EditorInfo.IME_ACTION_NEXT);
-                        mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-                    }
-                }
-
-                mInputMethodManager.restartInput(mRecipientsEditor);
-            }
-        });
-    }
-    private boolean mIsConvertToastDelayed = false;
-    /// M: Code analyze 060, For bug ALPS00050082, When the protocol has been changed,
-    /// whether show a toast . @{
-    private boolean mIsConvertMms = false;
-    @Override
-    public void onProtocolChanged(final boolean mms, final boolean needToast) {
-        // Have to make sure we're on the UI thread. This function can be called off of the UI
-        // thread when we're adding multi-attachments
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                //toastConvertInfo(mms);
-                /// M: fix ALPS01033728, don't call showSmsOrMmsSendButton() here, method
-                /// updateSendButtonState() will call it.
-                //showSmsOrMmsSendButton(mms);
-                mIpCompose.onIpProtocolChanged(mms, needToast);
-                updateSendButtonState();
-
-                if (mOpComposeExt.onProtocolChanged(mms, mWorkingMessage.getText())) {
-                    if (mms) {
-                        // In the case we went from a long sms with a counter to an mms because
-                        // the user added an attachment or a subject, hide the counter --
-                        // it doesn't apply to mms.
-                        mTextCounter.setVisibility(View.GONE);
-                    } else {
-                        if (mTextEditor.getLineCount() <= 1) {
-                            mTextCounter.setVisibility(View.GONE);
-                        } else {
-                            mTextCounter.setVisibility(View.VISIBLE);
-                        }
-                    }
-                }
-
-                if (needToast) {
-                    if (mIsPopulatingRecipients) {
-                        mIsConvertToastDelayed = true;
-                        mIsConvertMms = mms;
-                    } else {
-                        toastConvertInfo(mms);
-                    }
-                }
-            }
-        });
-    }
-    /// @}
-
-    // Show or hide the Sms or Mms button as appropriate. Return the view so that the caller
-    // can adjust the enableness and focusability.
-    private View showSmsOrMmsSendButton(boolean isMms) {
-        View showButton = null;
-        View hideButton = null;
-        // add for ipmessage
-
-        if (isMms) {
-            if (mSubCount == 0 || (isRecipientsEditorVisible()
-                    && TextUtils.isEmpty(mRecipientsEditor.getText()))
-                    /// M: fix bug ALPS00563318, show gray mms_send_button
-                /// when haven't subject, text and attachment
-                || ((mSubjectTextEditor == null || (mSubjectTextEditor != null
-                        && TextUtils.isEmpty(mSubjectTextEditor.getText().toString().trim())))
-                        && mTextEditor != null
-                        && TextUtils.isEmpty(mTextEditor.getText().toString().trim())
-                        && !mWorkingMessage.hasAttachment())
-                        || !mIsSmsEnabled) {
-            mSendButtonMms.setCompoundDrawablesWithIntrinsicBounds(null, null, null,
-                getResources().getDrawable(R.drawable.ic_send_sms_unsend));
-        } else {
-            mSendButtonMms.setCompoundDrawablesWithIntrinsicBounds(null, null, null,
-                    getResources().getDrawable(R.drawable.ic_send_ipmsg));
-            }
-            showButton = mSendButtonMms;
-            hideButton = mSendButtonSms;
-        } else {
-            if (!mIpCompose.onIpShowSmsOrMmsSendButton(isMms)) {
-                if ((mTextEditor.getText().toString().isEmpty())
-                        || mSubCount == 0
-                        || (isRecipientsEditorVisible()
-                                && TextUtils.isEmpty(mRecipientsEditor.getText()))
-                        || recipientCount() > MmsConfig.getSmsRecipientLimit()
-                        || !mIsSmsEnabled) {
-                    ///@}
-                    mSendButtonSms.setImageResource(R.drawable.ic_send_sms_unsend);
-                } else {
-                    mSendButtonSms.setImageResource(R.drawable.ic_send_ipmsg);
-                }
-            }
-            showButton = mSendButtonSms;
-            hideButton = mSendButtonMms;
-        }
-
-        if (showButton != null) {
-            showButton.setVisibility(View.VISIBLE);
-        }
-        if (hideButton != null) {
-            hideButton.setVisibility(View.GONE);
-        }
-        updateTextEditorHint();
-        return showButton;
-    }
-
-    Runnable mResetMessageRunnable = new Runnable() {
-        @Override
-        public void run() {
-            resetMessage();
-        }
-    };
-
-    @Override
-    public void onPreMessageSent() {
-        runOnUiThread(mResetMessageRunnable);
-    }
-
-    @Override
-    public void onMessageSent() {
-        // This callback can come in on any thread; put it on the main thread to avoid
-        // concurrency problems
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                /// M: @{
-                mWaitingForSendMessage = false;
-                /// @}
-                // If we already have messages in the list adapter, it
-                // will be auto-requerying; don't thrash another query in.
-                // TODO: relying on auto-requerying seems unreliable when priming an MMS into the
-                // outbox. Need to investigate.
-//                if (mMsgListAdapter.getCount() == 0) {
-                    if (LogTag.VERBOSE) {
-                        log("onMessageSent");
-                    }
-                    startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 0);
-//                }
-
-                // The thread ID could have changed if this is a new message that we just inserted
-                // into the database (and looked up or created a thread for it)
-                updateThreadIdIfRunning();
-            }
-        });
-    }
-
-    @Override
-    public void onMaxPendingMessagesReached() {
-        saveDraft(false);
-
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                Toast.makeText(ComposeMessageActivity.this, R.string.too_many_unsent_mms,
-                        Toast.LENGTH_LONG).show();
-                mSendingMessage = false;
-                updateSendButtonState();
-            }
-        });
-    }
-
-    @Override
-    public void onAttachmentError(final int error) {
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                handleAddAttachmentError(error, R.string.type_picture);
-                onMessageSent();        // now requery the list of messages
-            }
-        });
-    }
-
-    // We don't want to show the "call" option unless there is only one
-    // recipient and it's a phone number.
-    private boolean isRecipientCallable() {
-        ContactList recipients = getRecipients();
-        if (mIpCompose.isIpRecipientCallable(recipients.getNumbers())) {
-            return true;
-        }
-        return (recipients.size() == 1 && !recipients.containsEmail());
-    }
-    /// M: Code analyze 061, Add video call menu.
-    private void dialRecipient(Boolean isVideoCall) {
-        if (isRecipientCallable()) {
-            String number = getRecipients().get(0).getNumber();
-            number = mIpCompose.dialIpRecipient(number);
-            Intent dialIntent ;
-            if (isVideoCall) {
-                dialIntent = new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + number));
-                dialIntent.putExtra("com.android.phone.extra.video", true);
-            } else {
-                dialIntent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + number));
-            }
-            hideInputMethod();
-            startActivity(dialIntent);
-        }
-    }
-    /// @}
-
-    @Override
-    public boolean onPrepareOptionsMenu(Menu menu) {
-        super.onPrepareOptionsMenu(menu) ;
-
-        if (mNeedRequestPermissins) {
-            return false;
-        }
-
-        menu.clear();
-        /// M: google JB.MR1 patch, group mms
-        if (mIsSmsEnabled) {
-            if (getRecipients().size() > 1) {
-                menu.add(0, MENU_GROUP_PARTICIPANTS, 0, R.string.menu_group_participants);
-            }
-        }
-
-        if (!isRecipientsEditorVisible()) {
-            MmsLog.d(TAG, "onPrepareOptionsMenu recipient editor is not visible!");
-            if (getRecipients().size() == 1) {
-                Contact contact = getRecipients().get(0);
-                contact.reload(true);
-                if (contact.existsInDatabase()) {
-                    MmsLog.dpi(TAG,
-                            "onPrepareOptionsMenu contact is in database: " + contact.getUri());
-                    menu.add(0, MENU_SHOW_CONTACT, 0, R.string.menu_view_contact)
-                        .setIcon(R.drawable.ic_menu_recipients)
-                        .setTitle(R.string.menu_view_contact)
-                        .setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
-                    mQuickContact.assignContactUri(contact.getUri());
-                } else if (MessageUtils.canAddToContacts(contact)) {
-                    menu.add(0, MENU_CREATE_CONTACT, 0, R.string.menu_add_to_contacts)
-                        .setIcon(R.drawable.ic_menu_recipients)
-                        .setTitle(R.string.menu_add_to_contacts)
-                        .setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
-                    String number = contact.getNumber();
-                    if (Mms.isEmailAddress(number)) {
-                        mQuickContact.assignContactFromEmail(number, true);
-                    } else {
-                        mQuickContact.assignContactFromPhone(number, true);
-                    }
-                }
-
-            }
-
-            if (mIsSmsEnabled) {
-                menu.add(0, MENU_SELECT_MESSAGE, 0, R.string.select_message);
-            }
-
-        }
-
-        /// M: Code analyze 061, Add video call menu.
-        TelephonyManager telephony =
-            (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
-        if (telephony != null && telephony.isVoiceCapable() && isRecipientCallable()) {
-            MenuItem item = menu.add(0, MENU_CALL_RECIPIENT, 0, R.string.menu_call)
-                .setIcon(R.drawable.ic_menu_call)
-                .setTitle(R.string.menu_call);
-            if (!isRecipientsEditorVisible()) {
-                // If we're not composing a new message, show the call icon in the actionbar
-                item.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
-            }
-        /// @}
-        }
-
-        /// M: Code analyze 014, Add quick text. @{
-        if (mIsSmsEnabled) {
-            if (!mWorkingMessage.hasSlideshow()
-                    || (mSubjectTextEditor != null && mSubjectTextEditor.isFocused())) {
-                menu.add(0, MENU_ADD_QUICK_TEXT, 0, R.string.menu_insert_quick_text).setIcon(
-                    R.drawable.ic_menu_quick_text);
-            }
-        }
-        /// @}
-
-        /// M: Code analyze 015, Add text vcard. @{
-        if (mIsSmsEnabled) {
-            if (!mWorkingMessage.hasSlideshow()) {
-                menu.add(0, MENU_ADD_TEXT_VCARD, 0, R.string.menu_insert_text_vcard);
-            }
-        }
-        /// @}
-        if (mIsSmsEnabled) {
-            if (!isSubjectEditorVisible()) {
-                menu.add(0, MENU_ADD_SUBJECT, 0,
-                        R.string.add_subject).setIcon(R.drawable.ic_menu_edit);
-            }else {
-                menu.add(0, MENU_ADD_SUBJECT, 0,
-                        R.string.remove_subject).setIcon(R.drawable.ic_menu_edit);
-            }
-
-            menu.add(0, MENU_ADD_ATTACHMENT, 0, R.string.add_attachment)
-                    .setIcon(R.drawable.ic_menu_attachment)
-                .setTitle(R.string.add_attachment)
-                    .setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);    // add to actionbar
-        }
-        buildAddAddressToContactMenuItem(menu);
-
-        if (LogTag.DEBUG_DUMP) {
-            menu.add(0, MENU_DEBUG_DUMP, 0, R.string.menu_debug_dump);
-        }
-
-        int contactSize = 0;
-        if (mConversation.getRecipients() != null) {
-            contactSize = mConversation.getRecipients().size();
-        }
-
-        if (isRecipientsEditorVisible() && mIsSmsEnabled) {
-            menu.add(0, MENU_DISCARD, 0, R.string.discard).setIcon(
-                android.R.drawable.ic_menu_delete);
-        }
-
-        mOpComposeExt.onPrepareOptionsMenu(menu, mIsSmsEnabled,
-                isRecipientsEditorVisible(), contactSize, mConversation.getThreadId());
-
-        // add for ipmessage
-        mIpCompose.onIpPrepareOptionsMenu(mConversation.getIpConv(this), menu);
-
-        return true;
-    }
-
-    private void buildAddAddressToContactMenuItem(Menu menu) {
-        // Look for the first recipient we don't have a contact for and create a menu item to
-        // add the number to contacts.
-        for (Contact c : getRecipients()) {
-            /// M: Code analyze 043, Whether the address can be added to contacts app. @{
-            if (!c.existsInDatabase() && MessageUtils.canAddToContacts(c)) {
-            /// @}
-                Intent intent = ConversationList.createAddContactIntent(c.getNumber());
-                menu.add(0, MENU_ADD_ADDRESS_TO_CONTACTS, 0, R.string.menu_add_to_contacts)
-                    .setIcon(android.R.drawable.ic_menu_add)
-                    .setIntent(intent);
-                break;
-            }
-        }
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        if (mNeedRequestPermissins) {
-            return false;
-        }
-        // add for ipmessage
-        if (mIpCompose.onIpMsgOptionsItemSelected(
-                mConversation.getIpConv(this), item, mConversation.getThreadId())) {
-            return true;
-        }
-        if (mOpComposeExt.onOptionsItemSelected(item, mWorkingMessage.mOpWorkingMessageExt,
-                mInputMethodManager)) {
-            return true;
-        }
-
-        switch (item.getItemId()) {
-            case MENU_ADD_SUBJECT:
-                if(isSubjectEditorVisible()){
-                    mWorkingMessage.setSubject("", true);
-                    showSubjectEditor(false);
-                    break;
-                }else {
-                    showSubjectEditor(true);
-                    mWorkingMessage.setSubject("", true);
-                    /// M: Code analyze 052, Show input keyboard.@{
-                    mInputMethodManager.showSoftInput(
-                            getCurrentFocus(), InputMethodManager.SHOW_IMPLICIT);
-                    /// @}
-                    updateSendButtonState();
-                    mSubjectTextEditor.requestFocus();
-                    break;
-                }
-            case MENU_ADD_ATTACHMENT:
-                // Launch the add-attachment list dialog
-                /// M: Code analyze 051, Hide input keyboard.@{
-                hideInputMethod();
-                showAddAttachmentDialog(/*!mWorkingMessage.hasAttachedFiles()*/true);//lance modify for bug 117676
-                MmsLog.d(TAG, "Attach: showAddAttachmentDialog(!hasAttachedFiles)");
-                break;
-            /// M: Code analyze 014, Add quick text. @{
-            case MENU_ADD_QUICK_TEXT:
-                showQuickTextDialog();
-                break;
-            /// @}
-            /// M: Code analyze 015, Add text vcard. @{
-            case MENU_ADD_TEXT_VCARD: {
-                Intent intent =
-                    new Intent("android.intent.action.contacts.list.PICKMULTICONTACTS");
-                intent.setType(Contacts.CONTENT_TYPE);
-                startActivityForResult(intent, REQUEST_CODE_TEXT_VCARD);
-                break;
-            }
-            /// @}
-            case MENU_DISCARD:
-                /// M: fix bug for ConversationList select all performance,
-                /// update selected threads array.@{
-                ConversationListAdapter.removeSelectedState(mSelectedThreadId);
-                /// @}
-                /// M: Fix bug of inputmethod not disappear
-                hideInputMethod();
-                mWorkingMessage.discard();
-                finish();
-                break;
-            case MENU_SEND:
-                if (isPreparedForSending()) {
-                    /// M: Code analyze 028, Before sending message,check the recipients count
-                    /// and add sub card selection dialog if multi sub cards exist.@{
-                    updateSendButtonState(false);
-                    checkRecipientsCount();
-                    mSendButtonCanResponse = true;
-                    /// @}
-                }
-                break;
-            case MENU_SEARCH:
-                onSearchRequested();
-                break;
-            case MENU_DELETE_THREAD:
-                /// M: Code analyze 012, add for multi-delete @{
-                Intent it = new Intent(this, MultiDeleteActivity.class);
-                it.putExtra("thread_id", mConversation.getThreadId());
-                startActivityForResult(it, REQUEST_CODE_FOR_MULTIDELETE);
-                /// @}
-                break;
-
-            case android.R.id.home:
-                mIsCheckObsolete = true;
-                mConversation.setDiscardThreadId(mConversation.getThreadId());
-            case MENU_CONVERSATION_LIST:
-                exitComposeMessageActivity(new Runnable() {
-                    @Override
-                    public void run() {
-                        goToConversationList();
-                    }
-                });
-                break;
-            case MENU_CALL_RECIPIENT:
-                dialRecipient(false);
-                break;
-            /// M: Code analyze 061, Add video call menu.
-            case MENU_CALL_RECIPIENT_BY_VT:
-                dialRecipient(true);
-                break;
-            /// @}
-            /// M: google jb.mr1 patch, group mms
-            case MENU_GROUP_PARTICIPANTS: {
-                Intent intent = new Intent(this, RecipientListActivity.class);
-                intent.putExtra(THREAD_ID, mConversation.getThreadId());
-                startActivityForResult(intent, REQUEST_CODE_GROUP_PARTICIPANTS);
-                break;
-            }
-            case MENU_VIEW_CONTACT: {
-                // View the contact for the first (and only) recipient.
-                ContactList list = getRecipients();
-                if (list.size() == 1 && list.get(0).existsInDatabase()) {
-                    Uri contactUri = list.get(0).getUri();
-                    Intent intent = new Intent(Intent.ACTION_VIEW, contactUri);
-                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
-                    startActivity(intent);
-                }
-                break;
-            }
-            case MENU_ADD_ADDRESS_TO_CONTACTS:
-                mAddContactIntent = item.getIntent();
-                startActivityForResult(mAddContactIntent, REQUEST_CODE_ADD_CONTACT);
-                break;
-            case MENU_PREFERENCES: {
-                Intent settingIntent = null;
-                settingIntent = new Intent(this, SettingListActivity.class);
-                startActivityIfNeeded(settingIntent, -1);
-                break;
-            }
-            case MENU_DEBUG_DUMP:
-                mWorkingMessage.dump();
-                Conversation.dump();
-                LogTag.dumpInternalTables(this);
-                break;
-            case MENU_ADD_TO_CONTACTS: {
-                mAddContactIntent =
-                    ConversationList.createAddContactIntent(getRecipients().get(0).getNumber());
-                startActivityForResult(mAddContactIntent, REQUEST_CODE_ADD_CONTACT);
-                break;
-            }
-            /// M: show contact detail or create new contact. @{
-            case MENU_SHOW_CONTACT:
-            case MENU_CREATE_CONTACT:
-                hideInputMethod();
-                mQuickContact.onClick(mActionBarCustomView);
-                break;
-            /// @}
-            case MENU_SELECT_MESSAGE:
-                Intent intentSelectMessage = new Intent(this, MultiDeleteActivity.class);
-                intentSelectMessage.putExtra("thread_id", mConversation.getThreadId());
-                startActivityForResult(intentSelectMessage, REQUEST_CODE_FOR_MULTIDELETE);
-                mIsStartMultiDeleteActivity = true;
-                break;
-            default:
-                MmsLog.d(TAG, "unkown option.");
-                break;
-        }
-
-        return true;
-    }
-
-    private void addAttachment(int type, boolean append) {
-        if (!MessageUtils.allowSafeDraft(this, MmsConfig.getDeviceStorageFullStatus(), true,
-                TOAST_TYPE_FOR_ATTACH)) {
-            return;
-        }
-        mWaitingAttachment = true;
-        // Calculate the size of the current slide if we're doing a replace so the
-        // slide size can optionally be used in computing how much room is left for an attachment.
-        int currentSlideSize = 0;
-        SlideshowModel slideShow = mWorkingMessage.getSlideshow();
-
-        /// M: Code analyze 025, Add video or audio attachment and check the attachment size.@{
-        if (append) {
-            mAppendAttachmentSign = true;
-        } else {
-            mAppendAttachmentSign = false;
-        }
-        /// @}
-
-        if (slideShow != null) {
-            if (!(append && type == AttachmentTypeSelectorAdapter.ADD_SOUND)) {
-                WorkingMessage.removeThumbnailsFromCache(slideShow);
-            }
-            SlideModel slide = slideShow.get(0);
-            currentSlideSize = slide == null ? 0 : slide.getSlideSize();
-        }
-        /// M: Code analyze 025, Add video or audio attachment and check the attachment size.@{
-        if ((type != AttachmentTypeSelectorAdapter.ADD_SLIDESHOW)
-                && (type != AttachmentTypeSelectorAdapter.ADD_VCARD)
-            && (!checkSlideCount(mAppendAttachmentSign))) {
-            return;
-        }
-        /// @}
-        switch (type) {
-            case AttachmentTypeSelectorAdapter.ADD_IMAGE:
-                MessageUtils.selectImage(this, REQUEST_CODE_ATTACH_IMAGE);
-                break;
-
-            case AttachmentTypeSelectorAdapter.TAKE_PICTURE: {
-                MessageUtils.capturePicture(this, REQUEST_CODE_TAKE_PICTURE);
-                break;
-            }
-
-            case AttachmentTypeSelectorAdapter.ADD_VIDEO:
-                MessageUtils.selectVideo(this, REQUEST_CODE_ATTACH_VIDEO);
-                break;
-
-            case AttachmentTypeSelectorAdapter.RECORD_VIDEO: {
-                /// M: Code analyze 025, Add video or audio attachment
-                /// and check the attachment size.@{
-                long sizeLimit = 0;
-                if (mAppendAttachmentSign) {
-                    sizeLimit = computeAttachmentSizeLimit(slideShow, 0);
-                } else {
-                    sizeLimit = computeAttachmentSizeLimit(slideShow, currentSlideSize);
-                }
-                /// M: fix bug ALPS01221817 & ALPS01231411, Should subtract mText Size
-                if ((slideShow == null || !mAppendAttachmentSign)
-                        && !TextUtils.isEmpty(mWorkingMessage.getText())) {
-                    int textSize = mWorkingMessage.getText().toString().getBytes().length;
-                    sizeLimit -= textSize;
-                }
-                if (sizeLimit > MIN_SIZE_FOR_CAPTURE_VIDEO) {
-                    MessageUtils.recordVideo(this, REQUEST_CODE_TAKE_VIDEO, sizeLimit);
-                } else {
-                    Toast.makeText(this,
-                            getString(R.string.space_not_enough),
-                            Toast.LENGTH_SHORT).show();
-                }
-                /// @}
-            }
-            break;
-
-            case AttachmentTypeSelectorAdapter.ADD_SOUND:
-                /// M: Code analyze 018, Add ringtone for sound attachment.  @{
-                //MessageUtils.selectAudio(this, REQUEST_CODE_ATTACH_SOUND);
-                AlertDialog.Builder alertBuilder = new AlertDialog.Builder(this);
-                alertBuilder.setTitle(getString(R.string.add_music));
-                String[] items = new String[2];
-                items[0] = getString(R.string.attach_ringtone);
-                items[1] = getString(R.string.attach_sound);
-                alertBuilder.setItems(items, new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int which) {
-                        switch (which) {
-                            case 0:
-                                MessageUtils.selectRingtone(ComposeMessageActivity.this,
-                                        REQUEST_CODE_ATTACH_RINGTONE);
-                                break;
-                            case 1:
-                                if (!Environment.getExternalStorageState()
-                                        .equals(Environment.MEDIA_MOUNTED)) {
-                                    Toast.makeText(ComposeMessageActivity.this,
-                                                    getString(R.string.Insert_sdcard),
-                                                    Toast.LENGTH_LONG).show();
-                                    return;
-                                }
-                                MessageUtils.selectAudio(ComposeMessageActivity.this,
-                                        REQUEST_CODE_ATTACH_SOUND);
-                                break;
-                            default:
-                                break;
-                        }
-                    }
-                });
-                alertBuilder.create().show();
-               /// @}
-                break;
-
-            case AttachmentTypeSelectorAdapter.RECORD_SOUND:
-                /// M: Code analyze 025, Add video or audio attachment
-                /// and check the attachment size.@{
-                long sizeLimit = 0;
-                if (mAppendAttachmentSign) {
-                    sizeLimit = computeAttachmentSizeLimit(slideShow, 0);
-                } else {
-                    sizeLimit = computeAttachmentSizeLimit(slideShow, currentSlideSize);
-                }
-                /// M: fix bug ALPS01221817 & ALPS01231411, Should subtract mText Size
-                if ((slideShow == null || !mAppendAttachmentSign)
-                        && !TextUtils.isEmpty(mWorkingMessage.getText())) {
-                    int textSize = mWorkingMessage.getText().toString().getBytes().length;
-                    sizeLimit -= textSize;
-                }
-                if (sizeLimit > ComposeMessageActivity.MIN_SIZE_FOR_RECORD_AUDIO) {
-                    MessageUtils.recordSound(this, REQUEST_CODE_RECORD_SOUND, sizeLimit);
-                } else {
-                    Toast.makeText(this, getString(R.string.space_not_enough_for_audio),
-                            Toast.LENGTH_SHORT).show();
-                }
-                /// @}
-                break;
-
-            case AttachmentTypeSelectorAdapter.ADD_SLIDESHOW:
-                editSlideshow();
-                break;
-            /// M: Code analyze 019, Add vcard attachment.@{
-            case AttachmentTypeSelectorAdapter.ADD_VCARD:
-                Intent intent =
-                    new Intent("android.intent.action.contacts.list.PICKMULTICONTACTS");
-                intent.setType(Contacts.CONTENT_TYPE);
-                startActivityForResult(intent, REQUEST_CODE_ATTACH_VCARD);
-                break;
-            /// @}
-            /// M: Code analyze 020, Add vcalendar attachment.  @{
-            case AttachmentTypeSelectorAdapter.ADD_VCALENDAR:
-                Intent i = new Intent("android.intent.action.CALENDARCHOICE");
-                i.setType("text/x-vcalendar");
-                i.putExtra("request_type", 0);
-                startActivityForResult(i, REQUEST_CODE_ATTACH_VCALENDAR);
-                break;
-            /// @}
-            default:
-                break;
-        }
-    }
-
-    public static long computeAttachmentSizeLimit(SlideshowModel slideShow, int currentSlideSize) {
-        // Computer attachment size limit. Subtract 1K for some text.
-        /// M: Code analyze 003,  Set or get max mms size.
-        long sizeLimit = MmsConfig.getUserSetMmsSizeLimit(true) - SlideshowModel.SLIDESHOW_SLOP;
-        /// @}
-        if (slideShow != null) {
-            sizeLimit -= slideShow.getCurrentSlideshowSize();
-
-            // We're about to ask the camera to capture some video (or the sound recorder
-            // to record some audio) which will eventually replace the content on the current
-            // slide. Since the current slide already has some content (which was subtracted
-            // out just above) and that content is going to get replaced, can add the size of the
-            // current slide into the available space used to capture a video (or audio).
-            sizeLimit += currentSlideSize;
-        } else {
-            sizeLimit -= MmsSizeUtils.getSlideshowHeaderSize();
-        }
-        return sizeLimit;
-    }
-
-    private void showAddAttachmentDialog(final boolean append) {
-        /// M: Code analyze 009,Show attachment dialog . Create a new class to @{
-        mSoloAlertDialog.show(append);
-        /// @}
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-            log("requestCode=" + requestCode + ", resultCode=" + resultCode + ", data=" + data);
-        if (!isAllPermissionGranted() || mWorkingMessage == null) {
-            return;
-        }
-        mWaitingForSubActivity = false;          // We're back!
-
-        /// M : FIX CR : ALPS01795853 @{
-        mWorkingMessage.setTruntoChooseAttach(false);
-        ///@}
-
-        // M: fix bug ALPS00354728
-        boolean mNeedAppendAttachment = true;
-
-        MmsLog.d(TAG, "onActivityResult mAppendAttachmentSign : " + mAppendAttachmentSign);
-        if (mAppendAttachmentSign) {
-            mNeedAppendAttachment = true;
-        } else if (!mAppendAttachmentSign) {
-            mNeedAppendAttachment = false;
-        }
-
-        /// @}
-        if (mWorkingMessage.isFakeMmsForDraft()) {
-            // We no longer have to fake the fact we're an Mms. At this point we are or we aren't,
-            // based on attachments and other Mms attrs.
-            mWorkingMessage.removeFakeMmsForDraft();
-        }
-
-        // add for ipmessage
-        mIpCompose.onIpMsgActivityResult(this, requestCode, resultCode, data);
-
-         /// M: Code analyze 012, add for multi-delete @{
-         if (requestCode == REQUEST_CODE_FOR_MULTIDELETE && resultCode == RESULT_OK) {
-             ContactList recipients = mConversation.getRecipients();
-             mConversation = Conversation.upDateThread(getApplicationContext(),
-                     mConversation.getThreadId(), false);
-             mIsStartMultiDeleteActivity = false;
-             if (mConversation.getMessageCount() <= 0 || mConversation.getThreadId() <= 0) {
-                 mMsgListAdapter.changeCursor(null);
-                 if (needSaveDraft() && (recipients != null)) {
-                     makeDraftEditable(recipients);
-                 } else {
-                     mWorkingMessage.discard();
-
-                     /// M: Rebuild the contacts cache now that a thread and its associated unique
-                     /// M: recipients have been deleted.
-                     Contact.init(getApplicationContext());
-
-                     /// M: Make sure the conversation cache reflects the threads in the DB.
-                     Conversation.init(getApplicationContext());
-                     /// M: fix bug for ConversationList select all performance,
-                     /// update selected threads array.@{
-                     ConversationListAdapter.removeSelectedState(mSelectedThreadId);
-                     /// @}
-                     finish();
-                 }
-             }
-            return;
-        }
-        /// @}
-        if (requestCode == REQUEST_CODE_PICK && MmsConfig.isSmsEnabled(this)) {
-            mWorkingMessage.asyncDeleteDraftSmsMessage(mConversation);
-        }
-
-        /// M: fix bug ALPS00490684, update group mms state from GROUP_PARTICIPANTS to setting @{
-        if (requestCode == REQUEST_CODE_GROUP_PARTICIPANTS) {
-            boolean multiRecipients = mConversation.getRecipients().size() > 1;
-            boolean isGroupMms = MmsPreferenceActivity.getIsGroupMmsEnabled(
-                    ComposeMessageActivity.this) && multiRecipients;
-            mMsgListAdapter.setIsGroupConversation(isGroupMms);
-            mWorkingMessage.setHasMultipleRecipients(multiRecipients, true);
-            mWorkingMessage.deleteGruoupMmsDraft();
-        }
-        /// @}
-
-        if (requestCode == REQUEST_CODE_ADD_CONTACT) {
-            // The user might have added a new contact. When we tell contacts to add a contact
-            // and tap "Done", we're not returned to Messaging. If we back out to return to
-            // messaging after adding a contact, the resultCode is RESULT_CANCELED. Therefore,
-            // assume a contact was added and get the contact and force our cached contact to
-            // get reloaded with the new info (such as contact name). After the
-            // contact is reloaded, the function onUpdate() in this file will get called
-            // and it will update the title bar, etc.
-            if (!isRecipientsEditorVisible()) {
-                if (mAddContactIntent != null) {
-                    String address =
-                        mAddContactIntent.getStringExtra(ContactsContract.Intents.Insert.EMAIL);
-                    if (address == null) {
-                        address = mAddContactIntent.getStringExtra(
-                                ContactsContract.Intents.Insert.PHONE);
-                    }
-                    if (address != null) {
-                        Contact contact = Contact.get(address, false);
-                        if (contact != null) {
-                            contact.reload();
-                        }
-                    }
-                }
-            }
-        }
-
-        if (resultCode != RESULT_OK && requestCode == REQUEST_CODE_CREATE_SLIDESHOW
-                && mWorkingMessage != null) {
-            mWorkingMessage.setForceUpdateThreadId(true);
-        }
-
-        if (resultCode != RESULT_OK) {
-            if (LogTag.VERBOSE) log("bail due to resultCode=" + resultCode);
-            mWaitingAttachment = false;
-            return;
-        }
-
-        /// M: disable when non-default sms
-        if (!MmsConfig.isSmsEnabled(this) && requestCode != REQUEST_CODE_ECM_EXIT_DIALOG
-                && requestCode != REQUEST_CODE_MULTI_SAVE
-                && requestCode != REQUEST_CODE_CREATE_SLIDESHOW) {
-            Toast.makeText(ComposeMessageActivity.this,
-                    R.string.compose_disabled_toast, Toast.LENGTH_SHORT).show();
-            return;
-        }
-
-        WorkingMessage newMessage = null;
-        IOpWorkingMessageExt newOpWorkingMessageExt = null;
-        if (requestCode == REQUEST_CODE_CREATE_SLIDESHOW && data != null) {
-            newMessage = WorkingMessage.load(this, data.getData());
-            if (newMessage != null) {
-                newOpWorkingMessageExt = newMessage.mOpWorkingMessageExt;
-            }
-        }
-
-        if (mOpComposeExt.onActivityResult(requestCode, data, newOpWorkingMessageExt,
-                mWorkingMessage.mOpWorkingMessageExt)) {
-            //return;
-        }
-
-        switch (requestCode) {
-            case REQUEST_CODE_CREATE_SLIDESHOW:
-                if (data != null) {
-                    mWaitingAttachment = false;
-                    int slideSize = 0;
-                    if (newMessage != null && newMessage.getSlideshow() != null) {
-                        slideSize = newMessage.getSlideshow().size();
-                        MmsLog.i(TAG, "REQUEST_CODE_CREATE_SLIDESHOW" +
-                                    " newWorkingMessage Slideshow num = " + slideSize);
-                    } else {
-                        MmsLog.i(TAG, "REQUEST_CODE_CREATE_SLIDESHOW" +
-                                " newWorkingMessage Slideshow = null or newMessage = null");
-                    }
-
-                    if (newMessage != null) {
-                        /// M: Code analyze 053, If exist vcard attachment, move it before
-                        /// creating a new slideshow.Because the Workingmessage object  has been
-                        /// changed, reset subject and tell the convertion to user.@{
-                        /// M: add for vcard, vcard is exclusive with other attach, so remove them
-                        if (newMessage.hasMediaAttachments()) {
-                            newMessage.removeAllFileAttaches();
-                        }
-                        boolean isMmsBefore = mWorkingMessage.requiresMms();
-                        newMessage.setSubject(mWorkingMessage.getSubject(), false);
-
-                        /// M: fix bug ALPS01265824, need remove FileAttachment
-                        /// when text + attachmentSize > limit
-                        if (newMessage.isRemoveFileAttachment()) {
-                            int[] params = null;
-                            int encodingType = SmsMessage.ENCODING_UNKNOWN;
-                            encodingType = mOpComposeExt.getSmsEncodingType(encodingType,
-                                    ComposeMessageActivity.this);
-                            params = SmsMessage.calculateLength(newMessage.getText(),
-                                    false, encodingType);
-                            final int msgCount = params[0];
-                            newMessage.setLengthRequiresMms(
-                                    msgCount >= MmsConfig.getSmsToMmsTextThreshold(), false);
-
-                            newMessage.removeAllFileAttaches();
-                            newMessage.correctAttachmentState();
-                        }
-
-                        mWorkingMessage = newMessage;
-                        updateThreadIdIfRunning();
-                        drawTopPanel(isSubjectEditorVisible());
-                        updateSendButtonState();
-                        invalidateOptionsMenu();
-
-                        boolean isMmsAfter = mWorkingMessage.requiresMms();
-                        if (!isMmsAfter) {
-                            mWorkingMessage.asyncDeleteDraftMmsMessage(
-                                    newMessage.getConversation().getThreadId());
-                            DraftCache.getInstance().setDraftState(
-                                    newMessage.getConversation().getThreadId(), false);
-                        }
-                        if (isMmsAfter && !isMmsBefore) {
-                            toastConvertInfo(true);
-                        } else if (!isMmsAfter && isMmsBefore) {
-                            toastConvertInfo(false);
-                        } else if (!isMmsAfter && !isMmsBefore) {
-                            mWorkingMessage.setForceUpdateThreadId(true);
-                        }
-                        /// @}
-
-                        if (null != mRecipientsEditor) {
-                            if (mWorkingMessage.hasSlideshow()) {
-                                mRecipientsEditor.setImeActionLabel(
-                                        getString(MessageResource.string.ime_action_done),
-                                        EditorInfo.IME_ACTION_DONE);
-                                mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_DONE);
-                            } else {
-                                mRecipientsEditor.setImeActionLabel(
-                                        getString(MessageResource.string.ime_action_next),
-                                        EditorInfo.IME_ACTION_NEXT);
-                                mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-                            }
-                        }
-                    }
-                }
-                // M: fix bug ALPS00354728
-                MmsLog.i(TAG, "mNeedAppendAttachment = " + mNeedAppendAttachment);
-
-                break;
-
-            case REQUEST_CODE_TAKE_PICTURE: {
-                // create a file based uri and pass to addImage(). We want to read the JPEG
-                // data directly from file (using UriImage) instead of decoding it into a Bitmap,
-                // which takes up too much memory and could easily lead to OOM.
-
-                /// M: fix bug ALPS00408589
-                String scrappath = TempFileProvider.getScrapPath(this);
-                if (scrappath != null) {
-                    File file = new File(scrappath);
-                    Uri uri = Uri.fromFile(file);
-
-                    // Remove the old captured picture's thumbnail from the cache
-                    MmsApp.getApplication().getThumbnailManager().removeThumbnail(uri);
-
-                    addImageAsync(uri, mNeedAppendAttachment);
-                }
-                break;
-            }
-
-            case REQUEST_CODE_ATTACH_IMAGE: {
-                if (data != null) {
-                    addImageAsync(data.getData(), mNeedAppendAttachment);
-                }
-                break;
-            }
-            case REQUEST_CODE_TAKE_VIDEO:
-                Uri videoUri = TempFileProvider.renameScrapVideoFile(System.currentTimeMillis()
-                        + ".3gp", null, this);
-                // Remove the old captured video's thumbnail from the cache
-                MmsApp.getApplication().getThumbnailManager().removeThumbnail(videoUri);
-
-                addVideoAsync(videoUri, mNeedAppendAttachment);      // can handle null videoUri
-                break;
-
-            case REQUEST_CODE_ATTACH_VIDEO:
-                if (data != null) {
-                    addVideoAsync(data.getData(), mNeedAppendAttachment);
-                }
-                break;
-
-            case REQUEST_CODE_ATTACH_SOUND: {
-                Uri uri = (Uri) data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-                if (Settings.System.getUriFor(Settings.System.RINGTONE).equals(uri)) {
-                    break;
-                }
-                addAudioAsync(data.getData(), mNeedAppendAttachment);
-                break;
-            }
-
-            case REQUEST_CODE_RECORD_SOUND:
-                if (data != null) {
-                    addAudioAsync(data.getData(), mNeedAppendAttachment);
-                }
-                break;
-
-            /// M: @{
-            case REQUEST_CODE_ATTACH_RINGTONE:
-                Uri uri = (Uri) data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-                if (Settings.System.getUriFor(Settings.System.RINGTONE).equals(uri)) {
-                    break;
-                }
-                addAudioAsync(uri, mNeedAppendAttachment);
-                break;
-            /// @}
-
-            case REQUEST_CODE_ECM_EXIT_DIALOG:
-                boolean outOfEmergencyMode = data.getBooleanExtra(EXIT_ECM_RESULT, false);
-                if (outOfEmergencyMode) {
-                    sendMessage(false);
-                }
-                break;
-
-            case REQUEST_CODE_PICK:
-                /// M: Code analyze 013, Get contacts from Contact app . @{
-                if (data != null) {
-                    if (mRecipientsEditor != null) {
-                        processPickResult(data);
-                    } else {
-                        mIsRecipientHasIntentNotHandle = true;
-                        mIntent = data;
-                    }
-                }
-                misPickContatct = false;
-                return;
-                /// @}
-            /// M: Code analyze 015, Add text vcard. @{
-            case REQUEST_CODE_TEXT_VCARD:
-                if (data != null) {
-                    long[] contactIds =
-                        data.getLongArrayExtra("com.mediatek.contacts.list.pickcontactsresult");
-                    addTextVCardAsync(contactIds);
-                } else {
-                    MmsLog.wpi(TAG, "data should not be null," + "requestCode=" + requestCode
-                            + ", resultCode=" + resultCode + ", data=" + data);
-                }
-                misPickContatct = false;
-                return;
-            /// @}
-            /// M: Code analyze 019, Add vcard attachment.@{
-            case REQUEST_CODE_ATTACH_VCARD:
-                asyncAttachVCardByContactsId(data);
-                misPickContatct = false;
-                isInitRecipientsEditor = false;
-                return;
-            /// @}
-            /// M: Code analyze 020, Add vcalendar attachment.  @{
-            case REQUEST_CODE_ATTACH_VCALENDAR:
-                asyncAttachVCalendar(data.getData());
-                misPickContatct = false;
-                isInitRecipientsEditor = false;
-                return;
-            /// @}
-            /// M: Code analyze 021, Copy all valid parts of the attachment(pdu) to SD card.
-            /// This opeartor will be removed to a separate activity.  @{
-            case REQUEST_CODE_MULTI_SAVE:
-                boolean succeeded = false;
-                if (data != null && data.hasExtra("multi_save_result")) {
-                    succeeded = data.getBooleanExtra("multi_save_result", false);
-                    int resId =
-                        succeeded ? R.string.copy_to_sdcard_success : R.string.copy_to_sdcard_fail;
-                    Toast.makeText(ComposeMessageActivity.this, resId, Toast.LENGTH_SHORT).show();
-                }
-                return;
-            /// @}
-            default:
-                if (LogTag.VERBOSE) log("bail due to unknown requestCode=" + requestCode);
-                break;
-        }
-        /// M: @{
-        isInitRecipientsEditor = false; /// why add this variable here???
-    }
-
-    /**
-     * Handle duplicate selected contacts and put new selected contact to list.
-     * @param mSelectContactsNumbers the result of selected contacts number.
-     * @param editor the current recipientEditor.
-     * @param contactsId the result of selected contacts id.
-     * @param list the new select contacts.
-     * @param allList all contacts.
-     * @return whether has duplicate recipients.
-     */
-    private boolean processDuplicatePickResult(String mSelectContactsNumbers,
-            RecipientsEditor editor, long[] contactsId,
-            ContactList list, ContactList allList) {
-        boolean isDuplicate = false;
-        try {
-            /// M: @{
-            //list = ContactList.blockingGetByUris(uris);
-            /// M: add for ip message
-            /// M: To append recipients into RecipientsEditor, no need to load avatar,
-            /// because Editor will query and notify avatar info to MMS later. If append
-            /// 100 recipients, will saving almost 3s.
-            Contact.sNeedLoadAvatar = false;
-            ContactList selected = TextUtils.isEmpty(mSelectContactsNumbers) ?
-                 ContactList.blockingGetByIds(contactsId) :
-                     ContactList.getByNumbers(mSelectContactsNumbers, false, false);
-            Contact.sNeedLoadAvatar = true;
-            final List<String> numbers = editor.getNumbers();
-
-            /** M: better merge strategy.
-             * Avoid the use of mRecipientsEditor.contrcutionContactsFromInput()
-             * all Contacts in selected list should be added.
-             * */
-            /// M: remove duplicated numbers and format
-            List<String> selectedNumbers = Arrays.asList(selected.getProtosomaitcNumbers());
-            if (selectedNumbers.size() < selected.size()) {
-                isDuplicate = true;
-            }
-            String selectedNumberAfterFormat = "";
-            if (numbers.size() > 0) {
-                for (String number : numbers) {
-                    if (!number.trim().equals("")) {
-                        Contact c = Contact.get(number, false);
-                        allList.add(c);
-                    }
-                }
-                /// M: format existing numbers(remove "-" and " ")
-                List<String> formatedNumbers = Arrays.asList(allList.getNumbers(true));
-                for (String selectedNumber : selectedNumbers) {
-                    selectedNumberAfterFormat = MessageUtils.parseMmsAddress(selectedNumber);
-                    if (selectedNumberAfterFormat != null
-                            && !selectedNumberAfterFormat.trim().equals("")) {
-                        if (!formatedNumbers.contains(selectedNumberAfterFormat)) {
-                            Contact c = Contact.get(selectedNumber, false);
-                            list.add(c);
-                        } else {
-                            //M: ALPS01831885, fix contact cache error.
-                            Contact c = Contact.get(selectedNumber, false);
-                            c.removeFromCache();
-                            isDuplicate = true;
-                        }
-                    }
-                }
-                allList.addAll(list);
-            } else {
-                for (String selectedNumber : selectedNumbers) {
-                    selectedNumberAfterFormat = MessageUtils.parseMmsAddress(selectedNumber);
-                    if (selectedNumberAfterFormat != null && !selectedNumber.trim().equals("")) {
-                        Contact c = Contact.get(selectedNumber, false);
-                        list.add(c);
-                    }
-                }
-                allList.addAll(list);
-            }
-            /// @}
-        } finally {
-            Message msg = mUiHandler.obtainMessage();
-            msg.what = MSG_DISMISS_CONTACT_PICK_DIALOG;
-            mUiHandler.sendMessage(msg);
-            return isDuplicate;
-        }
-    }
-
-    private ProgressDialog mContactPickDialog;
-
-    private Runnable mContactPickRunnable = new Runnable() {
-        public void run() {
-            if (mContactPickDialog != null) {
-                mContactPickDialog.show();
-            }
-        }
-    };
-
-    public String getNumbersFromIntent(Intent intent) {
-        if (intent == null) {
-            return null;
-        }
-        boolean usingColon = intent.getBooleanExtra(USING_COLON, false);
-        String selectContactsNumbers = intent.getStringExtra(SELECTION_CONTACT_RESULT);
-        if (usingColon) {
-            if (selectContactsNumbers == null || selectContactsNumbers.length() < 1) {
-                return null;
-            }
-            String[] numberArray = selectContactsNumbers.split(NUMBERS_SEPARATOR_COLON);
-            String numberTempl = "";
-            int simcolonIndex = -1;
-            int colonIndex = -1;
-            int separatorIndex = -1;
-            for (int index = 0; index < numberArray.length; index++) {
-                numberTempl = numberArray[index];
-                simcolonIndex = numberTempl.indexOf(NUMBERS_SEPARATOR_SIMCOLON);
-                colonIndex = numberTempl.indexOf(NUMBERS_SEPARATOR_COMMA);
-                if (simcolonIndex > 0) {
-                    if (colonIndex < 0) {
-                        separatorIndex = simcolonIndex;
-                    } else if (simcolonIndex < colonIndex) {
-                        separatorIndex = simcolonIndex;
-                    } else if (colonIndex > 0) {
-                        separatorIndex = colonIndex;
-                    }
-                } else {
-                    if (colonIndex > 0) {
-                        separatorIndex = colonIndex;
-                    }
-                }
-                if (separatorIndex > 0) {
-                    numberArray[index] = numberTempl.substring(0, separatorIndex);
-                }
-                simcolonIndex = -1;
-                colonIndex = -1;
-                separatorIndex = -1;
-            }
-            return TextUtils.join(NUMBERS_SEPARATOR_SIMCOLON, numberArray);
-        }
-        return selectContactsNumbers;
-    }
-
-    private void processPickResult(final Intent data) {
-        // The EXTRA_PHONE_URIS stores the phone's urls that were selected by user in the
-        // multiple phone picker.
-        /// M: Code analyze 013, Get contacts from Contact app . @{
-        /*final Parcelable[] uris =
-            data.getParcelableArrayExtra(Intents.EXTRA_PHONE_URIS);
-
-        final int recipientCount = uris != null ? uris.length : 0;*/
-
-        final long[] contactsId =
-            data.getLongArrayExtra("com.mediatek.contacts.list.pickdataresult");
-        final String mSelectContactsNumbers = getNumbersFromIntent(data);
-        MmsLog.dpi(TAG,
-                "processPickResult, data = " + data.toString() + ", contactsId = "
-                        + Arrays.toString(contactsId) + ", mSelectContactsNumbers = "
-                        + mSelectContactsNumbers);
-        if ((contactsId == null || contactsId.length <= 0)
-                && TextUtils.isEmpty(mSelectContactsNumbers)) {
-            return;
-        }
-        int recipientCount = mRecipientsEditor.getRecipientCount();
-        if (!TextUtils.isEmpty(mSelectContactsNumbers)) {
-            recipientCount += mSelectContactsNumbers.split(";").length;
-        } else {
-            recipientCount += contactsId.length;
-        }
-        /// @}
-        /// M: Code analyze 056,Now,the sms recipient limit is different from mms.
-        /// We can set limit for sms or mms individually. @{
-        final int recipientLimit = MmsConfig.getSmsRecipientLimit();
-        /// @}
-        if (recipientLimit != Integer.MAX_VALUE && recipientCount > recipientLimit) {
-            new AlertDialog.Builder(this)
-                    .setTitle(R.string.pick_too_many_recipients)
-                    .setIconAttribute(android.R.attr.alertDialogIcon)
-                    .setMessage(getString(R.string.too_many_recipients,
-                            recipientCount, recipientLimit))
-                    .setPositiveButton(android.R.string.ok, null)
-                    .create().show();
-            return;
-        }
-
-        /// M: @{
-//        final Handler handler = new Handler();
-        if (mContactPickDialog == null) {
-            mContactPickDialog = new ProgressDialog(this);
-            mContactPickDialog.setMessage(getText(R.string.adding_recipients));
-            mContactPickDialog.setIndeterminate(true);
-            mContactPickDialog.setCancelable(false);
-        }
-
-        // Only show the progress dialog if we can not finish off parsing the return data in 1s,
-        // otherwise the dialog could flicker.
-        mUiHandler.postDelayed(mContactPickRunnable, 500);
-        new Thread(new Runnable() {
-            public void run() {
-                final ContactList list = new ContactList();
-                final ContactList allList = new ContactList();
-                final boolean isDuplicate = processDuplicatePickResult(mSelectContactsNumbers,
-                        mRecipientsEditor, contactsId, list, allList);
-                // TODO: there is already code to update the contact header widget and recipients
-                // editor if the contacts change. we can re-use that code.
-                final Runnable populateWorker = new Runnable() {
-                    public void run() {
-                        mConversation.setRecipients(allList);
-                        if (list.size() > 0) {
-                            // Fix ALPS01594370, if has attach, recipient eidtor always on focus.
-                            // And adding a recipient bebind the editable recipient is not allowed.
-                            if ((mBottomPanel == null)
-                                    || (mBottomPanel.getVisibility() != View.VISIBLE)) {
-                                mRecipientsEditor.clearFocus();
-                            }
-                            mIsPopulatingRecipients = true;
-                            mRecipientsEditor.populate(list);
-                        }
-                        if (mRecipientsEditor != null && isRecipientsEditorVisible()) {
-                            mRecipientsEditor.requestFocus();
-                        }
-                        if (isDuplicate) {
-                            Toast.makeText(ComposeMessageActivity.this,
-                                    R.string.add_duplicate_recipients, Toast.LENGTH_SHORT).show();
-                        }
-                    }
-                };
-                mUiHandler.post(populateWorker);
-            }
-        }, "ComoseMessageActivity.processPickResult").start();
-    }
-
-    private boolean mIsPopulatingRecipients = false;
-    /// M: Code analyze 062, Resize image. @{
-    private final ResizeImageResultCallback mResizeImageCallback =
-        new ResizeImageResultCallback() {
-        // TODO: make this produce a Uri, that's what we want anyway
-        @Override
-        public void onResizeResult(PduPart part, boolean append) {
-            mNeedSaveAsMms = false;
-            if (part == null) {
-                MmsLog.d(TAG, "onResizeResult part == null");
-                notifyCompressingDone();
-                handleAddAttachmentError(WorkingMessage.UNKNOWN_ERROR, R.string.type_picture);
-                return;
-            }
-
-            mWorkingMessage.setResizeImage(true);
-            Context context = ComposeMessageActivity.this;
-            PduPersister persister = PduPersister.getPduPersister(context);
-            int result;
-            if (mWorkingMessage.isDiscarded()) {
-                notifyCompressingDone();
-                return;
-            }
-            Uri messageUri = mWorkingMessage.getMessageUri();
-            if (null == messageUri) {
-                try {
-                    messageUri = mWorkingMessage.saveAsMms(true);
-                } catch (IllegalStateException e) {
-                    notifyCompressingDone();
-                    MmsLog.e(TAG, e.getMessage() + ", go to ConversationList!");
-                    goToConversationList();
-                }
-            }
-            if (messageUri == null) {
-                MmsLog.d(TAG, "onResizeResult messageUri == null");
-                result = WorkingMessage.UNKNOWN_ERROR;
-            } else {
-                try {
-                    /// M: it is modifying the mms draft, maybe
-                    /// interlaced with WorkingMessage.saveDraft!
-                    Uri dataUri;
-                    int mode;
-                    synchronized (WorkingMessage.sDraftMmsLock) {
-                        dataUri = persister.persistPart(part,
-                                ContentUris.parseId(messageUri), null);
-                        mode = mWorkingMessage.sCreationMode;
-                        mWorkingMessage.sCreationMode = 0;
-                        result = mWorkingMessage.setAttachment(WorkingMessage.IMAGE,
-                                dataUri, append);
-                        /// M: fix bug ALPS00914391, remove redundancy part
-                        if (result != mWorkingMessage.OK
-                                && mWorkingMessage.getSlideshow() != null) {
-                            try {
-                                PduBody pb = mWorkingMessage.getSlideshow().toPduBody();
-                                MessageUtils.updatePartsIfNeeded(mWorkingMessage.getSlideshow(),
-                                        PduPersister.getPduPersister(context),
-                                        messageUri, pb, null);
-                                if (pb != null) {
-                                    mWorkingMessage.getSlideshow().sync(pb);
-                                }
-                            }  catch (MmsException e) {
-                                Log.e(TAG, "Cannot update the message: " + messageUri, e);
-                            }
-                        }
-
-                    }
-                    mWorkingMessage.sCreationMode = mode;
-                    if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                        log("ResizeImageResultCallback: dataUri=" + dataUri);
-                    }
-                } catch (MmsException e) {
-                    result = WorkingMessage.UNKNOWN_ERROR;
-                }
-            }
-
-            /// M:added for bug ALPS00317889 begin,for not pop up alertDialog if
-            // attachment size is reaching limited size
-            if (!mShowDialogForMultiImage) {
-                handleAddAttachmentError(result, R.string.type_picture);
-            }
-            if (result == WorkingMessage.MESSAGE_SIZE_EXCEEDED) {
-                mShowDialogForMultiImage = true;
-            }
-            /// M:added for bug ALPS00317889 end
-            if (result == WorkingMessage.OK) {
-                try {
-                    if (mWorkingMessage.saveAsMms(false) != null) {
-                        mHasDiscardWorkingMessage = true;
-                    }
-                } catch (IllegalStateException e) {
-                    MmsLog.e(TAG, e.getMessage() + ", go to ConversationList!");
-                    notifyCompressingDone();
-                    goToConversationList();
-                }
-                mNeedSaveDraftAfterStop = false;
-            }
-            notifyCompressingDone();
-            mWaitingAttachment = false;
-        }
-    };
-    /// @}
-
-    private void handleAddAttachmentError(final int error, final int mediaTypeStringId) {
-        if (error == WorkingMessage.OK) {
-            return;
-        }
-        Log.d(TAG, "handleAddAttachmentError: " + error);
-
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                int titleId;
-                int messageId;
-                mWorkingMessage.removeFakeMmsForDraft();
-                updateSendButtonState();
-
-                MmsLog.d(TAG, "Error Code:" + error);
-                switch(error) {
-                /// M: Code analyze 063, For new feature ALPS00233419, Creation mode . @{
-                case WorkingMessage.WARNING_TYPE:
-                /// @}
-                case WorkingMessage.UNKNOWN_ERROR:
-                    Resources res = getResources();
-                    String mediaType = res.getString(mediaTypeStringId);
-                    String message = res.getString(R.string.error_add_attachment, mediaType);
-                    Toast.makeText(ComposeMessageActivity.this,
-                            message, Toast.LENGTH_SHORT).show();
-                    return;
-                case WorkingMessage.UNSUPPORTED_TYPE:
-                /// M: Code analyze 063, For new feature ALPS00233419, Creation mode . @{
-                case WorkingMessage.RESTRICTED_TYPE:
-                /// @}
-                    titleId = R.string.unsupport_media_type;
-                    messageId = R.string.select_different_media_type;
-                    break;
-                case WorkingMessage.MESSAGE_SIZE_EXCEEDED:
-                    titleId = R.string.exceed_message_size_limitation;
-                    messageId = R.string.failed_to_add_image;
-                    break;
-                case WorkingMessage.IMAGE_TOO_LARGE:
-                    titleId = R.string.failed_to_resize_image;
-                    messageId = R.string.resize_image_error_information;
-                    break;
-                 /// M: Code analyze 063, For new feature ALPS00233419, Creation mode . @{
-                case WorkingMessage.RESTRICTED_RESOLUTION:
-                    titleId = R.string.select_different_media_type;
-                    messageId = R.string.image_resolution_too_large;
-                    break;
-                /// @}
-                default:
-                    throw new IllegalArgumentException("unknown error " + error);
-                }
-                if (mErrorDialogShown) {
-                    MessageUtils.showErrorDialog(ComposeMessageActivity.this, titleId, messageId,
-                            0, 0);
-                    mErrorDialogShown = false;
-                }
-            }
-        });
-    }
-
-    /// M: Code analyze 064, Add image attachment. @{
-    private void addImageAsync(final Uri uri, final boolean append) {
-        mCompressingImage = true;
-        getAsyncDialog().runAsync(new Runnable() {
-            @Override
-            public void run() {
-                mShowDialogForMultiImage = false; /// M:added for bug ALPS00317889
-                addImage(uri, append);
-                if (mNeedSaveAsMms) {
-                    saveAsMms(false);
-                } else if (mNeedSaveDraftAfterStop) {
-                    if ((!isRecipientsEditorVisible()) ||
-                            (mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms()))) {
-                        if (MessageUtils.allowSafeDraft(ComposeMessageActivity.this,
-                                MmsConfig.getDeviceStorageFullStatus(), false,
-                                TOAST_TYPE_FOR_SAVE_DRAFT)) {
-                            saveDraft(true);
-                            Log.v(TAG, "save draft if needed after compressing" +
-                                    " image after onStop and update MmsWidget");
-                            MmsWidgetProvider.notifyDatasetChanged(getApplicationContext());
-                        }
-                    }
-                }
-             }
-        }, null, R.string.adding_attachments_title);
-    }
-
-    private void addImage(final Uri uri, final boolean append) {
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "addImage: append=" + append + ", uri=" + uri);
-        }
-        mNeedSaveAsMms = true;
-        int result = WorkingMessage.OK;
-        try {
-            if (append) {
-                mWorkingMessage.checkSizeBeforeAppend();
-            }
-        } catch (ExceedMessageSizeException e) {
-            result = WorkingMessage.MESSAGE_SIZE_EXCEEDED;
-            notifyCompressingDone();
-            handleAddAttachmentError(result, R.string.type_picture);
-            mNeedSaveAsMms = false;
-            return;
-        }
-
-        result = mWorkingMessage.setAttachment(WorkingMessage.IMAGE, uri, append);
-
-        if (result != WorkingMessage.IMAGE_TOO_LARGE &&
-                result != WorkingMessage.MESSAGE_SIZE_EXCEEDED) {
-            mWaitingAttachment = false;
-        }
-        if (result == WorkingMessage.IMAGE_TOO_LARGE ||
-            result == WorkingMessage.MESSAGE_SIZE_EXCEEDED) {
-            MmsLog.dpi(TAG, "addImage: resize image " + uri);
-
-            /// M: Adjust whether its a DRM IMAGE
-            if (FeatureOption.MTK_DRM_APP) {
-                if (!DrmUtilsEx.checkUriContainsDrm(this, uri)) {
-                    mToastCountForResizeImage++;
-                    if (mToastCountForResizeImage == 1) {
-                        MessageUtils.resizeImage(this, uri,
-                                mAttachmentEditorHandler, mResizeImageCallback, append,
-                            true);
-                    } else {
-                        MessageUtils.resizeImage(this, uri,
-                                mAttachmentEditorHandler, mResizeImageCallback, append,
-                            false);
-                    }
-                } else {
-                    notifyCompressingDone();
-                    handleAddAttachmentError(result, R.string.type_picture);
-                    mNeedSaveAsMms = false;
-                }
-            } else {
-                mToastCountForResizeImage++;
-                if (mToastCountForResizeImage == 1) {
-                    MessageUtils.resizeImage(this, uri,
-                            mAttachmentEditorHandler, mResizeImageCallback, append, true);
-                } else {
-                    MessageUtils.resizeImage(this, uri,
-                            mAttachmentEditorHandler, mResizeImageCallback, append, false);
-                }
-            }
-            return;
-        } else if (result == WorkingMessage.WARNING_TYPE) {
-            mNeedSaveAsMms = false;
-            notifyCompressingDone();
-            runOnUiThread(new Runnable() {
-                public void run() {
-                    showConfirmDialog(uri, append,
-                            WorkingMessage.IMAGE, R.string.confirm_restricted_image);
-                }
-            });
-            return;
-        }
-        notifyCompressingDone();
-        if (result != WorkingMessage.OK) {
-            mNeedSaveAsMms = false;
-        }
-        handleAddAttachmentError(result, R.string.type_picture);
-    }
-    /// @}
-
-    /// M: Code analyze 065, Add video attachment. @{
-    private void addVideoAsync(final Uri uri, final boolean append) {
-        getAsyncDialog().runAsyncInThreadPool(new Runnable() {
-            @Override
-            public void run() {
-                addVideo(uri, append);
-                saveAsMms(false);
-           }
-        }, null, R.string.adding_attachments_title);
-    }
-
-    private void addVideo(final Uri uri, final boolean append) {
-        mNeedSaveAsMms = false;
-        if (uri != null) {
-            mNeedSaveAsMms = true;
-            int result = WorkingMessage.OK;
-            try {
-                if (append) {
-                    mWorkingMessage.checkSizeBeforeAppend();
-                }
-            } catch (ExceedMessageSizeException e) {
-                result = WorkingMessage.MESSAGE_SIZE_EXCEEDED;
-                handleAddAttachmentError(result, R.string.type_video);
-                mNeedSaveAsMms = false;
-                return;
-            }
-            result = mWorkingMessage.setAttachment(WorkingMessage.VIDEO, uri, append);
-            if (result == WorkingMessage.WARNING_TYPE) {
-                mNeedSaveAsMms = false;
-                runOnUiThread(new Runnable() {
-                    public void run() {
-                        showConfirmDialog(uri, append,
-                                WorkingMessage.VIDEO, R.string.confirm_restricted_video);
-                    }
-                });
-            } else {
-                handleAddAttachmentError(result, R.string.type_video);
-                if (result != WorkingMessage.OK) {
-                    mNeedSaveAsMms = false;
-                }
-            }
-        }
-    }
-    /// @}
-
-    private void addAudioAsync(final Uri uri, final boolean append) {
-        getAsyncDialog().runAsync(new Runnable() {
-            @Override
-            public void run() {
-                addAudio(uri, append);
-                saveAsMms(false);
-            }
-        }, null, R.string.adding_attachments_title);
-    }
-
-    AsyncDialog getAsyncDialog() {
-        if (mAsyncDialog == null) {
-            mAsyncDialog = new AsyncDialog(this);
-        }
-        return mAsyncDialog;
-    }
-
-    public boolean getForwordingState() {
-        return mForwardingMessage;
-    }
-
-    /// M: Code analyze 017, Handle forwarded message.(see:forwardMessage())@{
-    private boolean handleForwardedMessage() {
-        Intent intent = getIntent();
-
-        // If this is a forwarded message, it will have an Intent extra
-        // indicating so.  If not, bail out.
-        if (!mForwardMessageMode) {
-            mForwardingMessage = false;
-            return false;
-        }
-        mForwardingMessage = true;
-
-        Uri uri = intent.getParcelableExtra("msg_uri");
-
-        if (Log.isLoggable(LogTag.APP, Log.DEBUG)) {
-            MmsLog.dpi(TAG, "handle forwarded message " + uri);
-        }
-
-        if (uri != null) {
-            mWorkingMessage = WorkingMessage.load(this, uri);
-            if (mWorkingMessage != null) {
-                mWorkingMessage.setSubject(intent.getStringExtra("subject"), false);
-                SlideshowModel mSlideshowModel = mWorkingMessage.getSlideshow();
-                if (mSlideshowModel != null) {
-                    int mSsmSize = mSlideshowModel.size();
-                    for (int index = 0; index < mSsmSize; index++) {
-                        SlideModel mSlideModel = mSlideshowModel.get(index);
-                        if (mSlideModel != null) {
-                            if (mSlideModel.hasText()) {
-                                TextModel mTextModel = mSlideModel.getText();
-                                String textChar = mTextModel.getText();
-                                long textLength = textChar.length();
-                                if (textLength > MmsConfig.getMaxTextLimit()) {
-                                    mTextModel.setText(
-                                            textChar.substring(0, MmsConfig.getMaxTextLimit()));
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        } else {
-            String smsAddress = null;
-            if (intent.hasExtra(SMS_ADDRESS)) {
-                smsAddress = intent.getStringExtra(SMS_ADDRESS);
-                if (smsAddress != null) {
-                   //TODO need re-coding
-                   //mRecipientsEditor.addRecipient(smsAddress, true);
-                }
-            }
-            mWorkingMessage.setText(intent.getStringExtra(SMS_BODY));
-        }
-        /// M:
-        // add for ipmessage
-        mIpCompose.onIpHandleForwardedMessage(intent);
-        // let's clear the message thread for forwarded messages
-        mMsgListAdapter.changeCursor(null);
-
-        return true;
-    }
-    /// @}
-
-    // Handle send actions, where we're told to send a picture(s) or text.
-    private boolean handleSendIntent() {
-        Intent intent = getIntent();
-        Bundle extras = intent.getExtras();
-        if (extras == null) {
-            return false;
-        }
-        /// M: Code analyze 066,Handle intent. @{
-        /// M: add for saveAsMms
-        mWorkingMessage.setConversation(mConversation);
-        final String mimeType = intent.getType();
-        String action = intent.getAction();
-        MmsLog.i(TAG, "Get mimeType: " + mimeType + " Get action: " + action);
-        /// M: disable when non-default sms
-        if (!mIsSmsEnabled) {
-            Toast.makeText(ComposeMessageActivity.this,
-                    R.string.compose_disabled_toast, Toast.LENGTH_SHORT).show();
-            return false;
-        }
-        if (Intent.ACTION_SEND.equals(action)) {
-            if (extras.containsKey(Intent.EXTRA_STREAM)) {
-                final Uri uri = (Uri) extras.getParcelable(Intent.EXTRA_STREAM);
-                if (uri == null) {
-                    MmsLog.w(TAG, "handleSendIntent uri == null");
-                    return false;
-                }
-                if (mimeType.equals("text/plain")) {
-                    String fileName = "";
-                    if (uri != null) {
-                        if (uri.getScheme() != null && uri.getScheme().equals("file")) {
-                            String mUriStr = Uri.decode(uri.toString());
-                            fileName = mUriStr.substring(mUriStr.lastIndexOf("/") + 1,
-                                    mUriStr.length());
-                        } else {
-                            Cursor c = mContentResolver.query(uri, null, null, null, null);
-                            if (c != null) {
-                                try {
-                                    if (c.getCount() == 1 && c.moveToFirst()) {
-                                        fileName = c.getString(
-                                                c.getColumnIndex(Images.Media.DISPLAY_NAME));
-                                    }
-                                } catch (Exception e) {
-                                    e.printStackTrace();
-                                } finally {
-                                    c.close();
-                                }
-                            }
-                        }
-                    }
-
-                    String mMessage = this.getString(R.string.failed_to_add_media, fileName);
-                    Toast.makeText(this, mMessage, Toast.LENGTH_SHORT).show();
-                    return false;
-                }
-                getAsyncDialog().runAsync(new Runnable() {
-                    @Override
-                    public void run() {
-                        /// M: fix bug ALPS00397146, removeThumbnailManager uri
-                        // (Content://media/external/images/media/) when it rotated
-                        String fileName = "";
-                        int degree = 0;
-                        String uriStr = uri.toString();
-                        if (uriStr.startsWith("content://media/external/images/media")) {
-                            Cursor c = mContentResolver.query(uri, null, null, null, null);
-                            if (c != null) {
-                                try {
-                                    if (c.getCount() == 1 && c.moveToFirst()) {
-                                        fileName = c.getString(
-                                                c.getColumnIndex(Images.Media.DISPLAY_NAME));
-                                        degree = c.getInt(
-                                                c.getColumnIndex(Images.Media.ORIENTATION));
-                                    }
-                                } catch (Exception e) {
-                                    e.printStackTrace();
-                                } finally {
-                                    c.close();
-                                }
-                            }
-
-                            if (sDegreeMap != null && sDegreeMap.containsKey(uriStr)) {
-                                if (sDegreeMap.get(uriStr).intValue() != degree) {
-                                    Uri thumbnailUri =
-                                        Uri.parse(uriStr + ThumbnailManager.FLAG_FNAME + fileName);
-                                    MmsApp.getApplication().getThumbnailManager()
-                                                                    .removeThumbnail(thumbnailUri);
-                                    sDegreeMap.remove(uriStr);
-                                    sDegreeMap.put(uriStr, degree);
-                                }
-                            } else if (sDegreeMap != null) {
-                                sDegreeMap.put(uriStr, degree);
-                            }
-                        }
-                        /// @}
-                        Uri tempUri = uri;
-                        if (uri.toString().contains(TempFileProvider.SCRAP_VIDEO_URI.toString())) {
-                            File file = new File(TempFileProvider
-                                    .getScrapVideoPath(ComposeMessageActivity.this));
-                            if (file != null && file.exists()) {
-                                tempUri = Uri.fromFile(file);
-                            }
-                        }
-
-                        String scheme = tempUri.getScheme();
-                        if (scheme != null && scheme.equals("file")) {
-                            /// M: fix bug ALPS01400468, workaround for GoogleDrive Audio Uri
-                            if (uri.toString().contains(AudioModel.sAuthorityForGoogleDrive)) {
-                                AudioModel.sTypeForGoogleDrive = mimeType;
-                            }
-                            addFileAttachment(mimeType, tempUri, false);
-                        } else {
-                            String type = MessageUtils.queryContentType(
-                                    ComposeMessageActivity.this, (Uri) uri);
-                            if (TextUtils.isEmpty(type)) {
-                                type = mimeType;
-                            }
-                            addAttachment(type, tempUri, false);
-                        }
-                        SlideshowModel slides = mWorkingMessage.getSlideshow();
-                        if (slides != null && (slides.size() > 0
-                                || slides.sizeOfFilesAttach() > 0)) {
-                            mWorkingMessage.saveAsMms(false);
-                        }
-                        VCardUtils.deleteVCardTempFiles(getApplicationContext(), mVCardFiles);
-                    }
-                }, null, R.string.adding_attachments_title);
-                intent.setAction(SIGN_CREATE_AFTER_KILL_BY_SYSTEM);
-                return true;
-            } else if (extras.containsKey(Intent.EXTRA_TEXT)) {
-                mWorkingMessage.setText(extras.getString(Intent.EXTRA_TEXT));
-                intent.setAction(SIGN_CREATE_AFTER_KILL_BY_SYSTEM);
-                return true;
-            }
-        } else if (Intent.ACTION_SEND_MULTIPLE.equals(action) &&
-                extras.containsKey(Intent.EXTRA_STREAM)) {
-            SlideshowModel slideShow = mWorkingMessage.getSlideshow();
-            final ArrayList<Parcelable> uris = extras.getParcelableArrayList(Intent.EXTRA_STREAM);
-            int currentSlideCount = slideShow != null ? slideShow.size() : 0;
-            int importCount = uris.size();
-            if (importCount + currentSlideCount > SlideshowEditor.MAX_SLIDE_NUM) {
-                importCount = Math.min(SlideshowEditor.MAX_SLIDE_NUM - currentSlideCount,
-                        importCount);
-            }
-
-            // Attach all the pictures/videos asynchronously off of the UI thread.
-            // Show a progress dialog if adding all the slides hasn't finished
-            // within half a second.
-            final int numberToImport = importCount;
-            MmsLog.i(TAG, "numberToImport: " + numberToImport);
-            final WorkingMessage msg = mWorkingMessage;
-            getAsyncDialog().runAsync(new Runnable() {
-                @Override
-                public void run() {
-                    mToastCountForResizeImage = 0;
-                    for (int i = 0; i < numberToImport; i++) {
-                        Parcelable uri = uris.get(i);
-
-                        String scheme = ((Uri) uri).getScheme();
-                        String authority = ((Uri) uri).getAuthority();
-                        if (scheme != null && scheme.equals("file")) {
-                            // change "file://..." Uri to "Content://....,
-                            // and attemp to add this attachment"
-                            /// M: fix bug ALPS604911, change MmsContentType
-                            /// when share multi-file from FileManager @{
-                            String type = MessageUtils.getContentType((Uri) uri);
-                            if (TextUtils.isEmpty(type)) {
-                                type = mimeType;
-                            }
-                            /// @}
-                            addFileAttachment(type, (Uri) uri, true);
-                        } else if (authority != null && (authority.contains("com.android.email")
-                                || (authority.equals(MediaStore.AUTHORITY)
-                                        && mimeType != null && mimeType.contains("*")))) {
-                            addAttachment(mimeType, (Uri) uri, true);
-                        } else {
-                            String type = MessageUtils.queryContentType(
-                                    ComposeMessageActivity.this, (Uri) uri);
-                            if (TextUtils.isEmpty(type)) {
-                                type = mimeType;
-                            }
-                            addAttachment(type, (Uri) uri, true);
-                        }
-                    }
-                    mToastCountForResizeImage = 0;
-                    SlideshowModel slides = mWorkingMessage.getSlideshow();
-                    if (slides != null && (slides.size() > 0 || slides.sizeOfFilesAttach() > 0)) {
-                        mWorkingMessage.saveAsMms(false);
-                    }
-                    VCardUtils.deleteVCardTempFiles(getApplicationContext(), mVCardFiles);
-                }
-            }, null, R.string.adding_attachments_title);
-            intent.setAction(SIGN_CREATE_AFTER_KILL_BY_SYSTEM);
-            return true;
-        } else if (SIGN_CREATE_AFTER_KILL_BY_SYSTEM.equals(action)) {
-        /// @}
-            return true;
-        }
-        return false;
-    }
-
-    // mVideoUri will look like this: content://media/external/video/media
-    private static final String mVideoUri = Video.Media.getContentUri("external").toString();
-    // mImageUri will look like this: content://media/external/images/media
-    private static final String mImageUri = Images.Media.getContentUri("external").toString();
-
-    private void addAttachment(String type, Uri uri, boolean append) {
-        if (uri != null) {
-            // When we're handling Intent.ACTION_SEND_MULTIPLE, the passed in items can be
-            // videos, and/or images, and/or some other unknown types we don't handle. When
-            // a single attachment is "shared" the type will specify an image or video. When
-            // there are multiple types, the type passed in is "*/*". In that case, we've got
-            // to look at the uri to figure out if it is an image or video.
-            try
-            {
-                boolean wildcard = "*/*".equals(type);
-                MmsLog.i(TAG, "Got send intent mimeType :" + type);
-            if (type == null) {
-                handleAddAttachmentError(WorkingMessage.UNSUPPORTED_TYPE, R.string.type_picture);
-            }
-            else if (type.startsWith("image/") || (wildcard &&
-                           uri.toString().startsWith(mImageUri))) {
-                    addImage(uri, append);
-                } else if (type.startsWith("video/") ||
-                        (wildcard && uri.toString().startsWith(mVideoUri))) {
-                    addVideo(uri, append);
-                }
-                 /// M: Code analyze 067, Add audio attachment. @{
-                else if (type.startsWith("audio/") || type.equals("application/ogg")
-                    || (wildcard && uri.toString().startsWith(mAudioUri))) {
-                    addAudio(uri, append);
-                /// @}
-                /// M: Code analyze 019, Add vcard attachment.  @{
-                } else if (type.equalsIgnoreCase("text/x-vcard")) {
-                    VCardAttachment va = new VCardAttachment(ComposeMessageActivity.this);
-                    String fileName = va.getVCardFileNameByUri(uri);
-                    setFileAttachment(fileName, WorkingMessage.VCARD, false);
-                    mVCardFiles.add(fileName);
-                 /// M: Code analyze 020, Add vcalendar attachment.  @{
-                } else if (type.equalsIgnoreCase("text/x-vcalendar")) {
-                    attachVCalendar(uri);
-                } else {
-                    handleAddAttachmentError(WorkingMessage.UNSUPPORTED_TYPE, R.string.type_audio);
-                }
-            } catch (NullPointerException  e) {
-                   Log.e(TAG, "Null mimetype", e);
-                }
-            /// @}
-        }
-    }
-
-    private String getResourcesString(int id, String mediaName) {
-        Resources r = getResources();
-        return r.getString(id, mediaName);
-    }
-
-    private void drawBottomPanel() {
-        // Reset the counter for text editor.
-        /// M: @{
-        mDrawBottomPanel = false;
-        /// M: remove Google default code
-        // Reset the counter for text editor.
-        //resetCounter();
-
-        mOpComposeExt.drawBottomPanel(mWorkingMessage.hasSlideshow(),
-                mWorkingMessage.getIsUpdateAttachEditor(), mIsSmsEnabled);
-
-        if (mWorkingMessage.hasSlideshow()) {
-            if (mWorkingMessage.getIsUpdateAttachEditor()) {
-                mBottomPanel.setVisibility(View.GONE);
-                if (mSubjectTextEditor != null) {
-                    //mSubjectTextEditor.setNextFocusDownId(-1);
-                    mSubjectTextEditor.setImeOptions(EditorInfo.IME_ACTION_DONE);
-                    mSubjectTextEditor.setImeActionLabel(
-                            getText(com.android.internal.R.string.ime_action_done),
-                            EditorInfo.IME_ACTION_DONE);
-                }
-
-                mAttachmentEditor.update(mWorkingMessage);
-                mAttachmentEditor.requestFocus();
-            } else {
-                MmsLog.d(TAG, "drawBottomPanel, isUpdateAttachEditor == false");
-            }
-            if (mRecipientsEditor != null) {
-                mRecipientsEditor.setEnabled(mIsSmsEnabled);
-                mRecipientsEditor.setFocusableInTouchMode(mIsSmsEnabled);
-                mRecipientsEditor.setIsTouchable(mIsSmsEnabled);
-            }
-            if (mSubjectTextEditor != null) {
-                mSubjectTextEditor.setEnabled(mIsSmsEnabled);
-                mSubjectTextEditor.setFocusableInTouchMode(mIsSmsEnabled);
-            }
-            if (mRecipientsPicker != null) {
-                mRecipientsPicker.setEnabled(mIsSmsEnabled);
-            }
-            return;
-        }
-
-        mAttachmentEditor.update(mWorkingMessage);
-        updateTextEditorHeightInFullScreen();
-        /// @}
-        mBottomPanel.setVisibility(View.VISIBLE);
-        if (mSubjectTextEditor != null) {
-            //mSubjectTextEditor.setNextFocusDownId(R.id.embedded_text_editor);
-            mSubjectTextEditor.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-            mSubjectTextEditor.setImeActionLabel(
-                    getText(com.android.internal.R.string.ime_action_next),
-                    EditorInfo.IME_ACTION_NEXT);
-        }
-
-        CharSequence text = mWorkingMessage.getText();
-
-        // TextView.setTextKeepState() doesn't like null input.
-        mTextEditor.removeTextChangedListener(mTextEditorWatcher);
-        if (mIsSmsEnabled) {
-            mTextEditor.addTextChangedListener(mTextEditorWatcher);
-            if (text != null) {
-                mTextEditor.setTextKeepState(text);
-                /// M: @{
-                try {
-                    mTextEditor.setSelection(mTextEditor.getText().toString().length());
-                } catch (IndexOutOfBoundsException e) {
-                    mTextEditor.setSelection(mTextEditor.getText().toString().length() - 1);
-                }
-                /// @}
-            } else {
-                mTextEditor.setText("");
-            }
-        } else {
-            mTextEditor.setText("");
-            mTextEditor.setHint(R.string.sending_disabled_not_default_app);
-            mTextEditor.setFocusable(false);
-        }
-        mTextEditor.setEnabled(mIsSmsEnabled);
-        mTextEditor.setFocusableInTouchMode(mIsSmsEnabled);
-
-        if (mRecipientsEditor != null) {
-            mRecipientsEditor.setEnabled(mIsSmsEnabled);
-            mRecipientsEditor.setFocusableInTouchMode(mIsSmsEnabled);
-            mRecipientsEditor.setIsTouchable(mIsSmsEnabled);
-        }
-        if (mSubjectTextEditor != null) {
-            mSubjectTextEditor.setEnabled(mIsSmsEnabled);
-            mSubjectTextEditor.setFocusableInTouchMode(mIsSmsEnabled);
-        }
-        if (mRecipientsPicker != null) {
-            mRecipientsPicker.setEnabled(mIsSmsEnabled);
-        }
-
-        /// M: add for character counter
-        // Reset the counter for text editor.
-        updateCounter(mWorkingMessage.getText(), 0, 0, 0);
-    }
-
-    private void drawTopPanel(boolean showSubjectEditor) {
-        /// M: why ? @{
-        //boolean showingAttachment = mAttachmentEditor.update(mWorkingMessage);
-        //mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE);
-        //mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE);
-        mOpComposeExt.drawTopPanel(isRecipientsEditorVisible(),
-                mWorkingMessage.mOpWorkingMessageExt);
-
-        boolean isHasSubject = false;
-        if (mWorkingMessage == null) {
-            isHasSubject = false;
-        } else {
-            isHasSubject = mWorkingMessage.hasSubject();
-        }
-        boolean isDeleteMode = false;
-        if (mMsgListAdapter == null) {
-            isDeleteMode = false;
-        } else {
-            isDeleteMode = mMsgListAdapter.mIsDeleteMode;
-        }
-        showSubjectEditor((showSubjectEditor || isHasSubject) && !isDeleteMode);
-        mAttachmentEditor.update(mWorkingMessage);
-        updateTextEditorHeightInFullScreen();
-        /// @}
-    }
-
-    //==========================================================
-    // Interface methods
-    //==========================================================
-
-    @Override
-    public void onClick(View v) {
-        /// M: Code analyze 028, Before sending message,check the recipients count
-        /// and add sub card selection dialog if multi sub cards exist.@{
-        /*if ((v == mSendButtonSms || v == mSendButtonMms) && isPreparedForSending()){
-            confirmSendMessageIfNeeded();
-        }
-        */
-
-        if (mOpComposeExt.onClick(v, mRecipientsPicker)) {
-            return;
-        }
-        if (v == mSendButtonSms || v == mSendButtonMms) {
-            MmsLog.d(TAG, "onClick send button click!");
-            if (mSendButtonCanResponse) {
-                ///M: WFC: Show pop-up, if condition satisfy @ {
-/*                if (showWfcSendButtonPopUp()) {
-                    return;
-                }
-                */
-                /// @}
-                mSendButtonCanResponse = false;
-                if (isPreparedForSending()) {
-                    /// M: Since sending message here, why not disable button 'Send'??
-                    updateSendButtonState(false);
-                    checkRecipientsCount();
-                    mUiHandler.sendEmptyMessageDelayed(MSG_RESUME_SEND_BUTTON,
-                            RESUME_BUTTON_INTERVAL);
-                } else {
-                    mSendButtonCanResponse = true;
-                    unpreparedForSendingAlert();
-                }
-            }
-        /// @}
-        } else if ((v == mRecipientsPicker)) {
-             /// M: Code analyze 013, Get contacts from Contact app . @{
-             //launchMultiplePhonePicker();
-            if (recipientCount() >= RECIPIENTS_LIMIT_FOR_SMS) {
-                Toast.makeText(ComposeMessageActivity.this,
-                        R.string.cannot_add_recipient, Toast.LENGTH_SHORT).show();
-            } else {
-                /// M: fix bug ALPS00444752, dis-clickble when showing ContactPicker
-                if (!mShowingContactPicker) {
-                    addContacts(mRecipientsEditor != null
-                            ? (RECIPIENTS_LIMIT_FOR_SMS - mRecipientsEditor.getNumbers().size())
-                                    : RECIPIENTS_LIMIT_FOR_SMS, REQUEST_CODE_PICK);
-                }
-            }
-             /// @}
-        }
-    }
-
-    /// M: fix bug ALPS00444752, set false to enable to Show ContactPicker
-    private boolean mShowingContactPicker = false;
-
-    private void launchMultiplePhonePicker() {
-        Intent intent = new Intent(Intents.ACTION_GET_MULTIPLE_PHONES);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setType(Phone.CONTENT_TYPE);
-        // We have to wait for the constructing complete.
-        ContactList contacts = mRecipientsEditor.constructContactsFromInput(true);
-        int urisCount = 0;
-        Uri[] uris = new Uri[contacts.size()];
-        urisCount = 0;
-        for (Contact contact : contacts) {
-            if (Contact.CONTACT_METHOD_TYPE_PHONE == contact.getContactMethodType()) {
-                    uris[urisCount++] = contact.getPhoneUri();
-            }
-        }
-        if (urisCount > 0) {
-            intent.putExtra(Intents.EXTRA_PHONE_URIS, uris);
-        }
-        startActivityForResult(intent, REQUEST_CODE_PICK);
-    }
-
-    @Override
-    public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
-        if (event != null) {
-            // if shift key is down, then we want to insert the '\n' char in the TextView;
-            // otherwise, the default action is to send the message.
-            if (!event.isShiftPressed()) {
-                if (event.getAction() == KeyEvent.ACTION_DOWN) {
-                    return false;
-                }
-                /// M: Code analyze 028, Before sending message,check the recipients count
-                /// and add sub card selection dialog if multi sub cards exist.@{
-                if (isPreparedForSending()) {
-                    checkRecipientsCount();
-                } else {
-                    unpreparedForSendingAlert();
-                    }
-                /// @}
-                return true;
-            }
-            return false;
-        }
-        /// M: Code analyze 028, Before sending message,check the recipients count
-        /// and add sub card selection dialog if multi sub cards exist.@{
-        if (isPreparedForSending()) {
-            //confirmSendMessageIfNeeded();
-            checkRecipientsCount();
-        } else {
-            unpreparedForSendingAlert();
-        }
-        /// @}
-        return true;
-    }
-
-    private final TextWatcher mTextEditorWatcher = new TextWatcher() {
-        private int mStart;
-
-        /// M: fix bug ALPS00612093, postDelay for ANR
-        private Runnable mUpdateRunnable = new Runnable() {
-            public void run() {
-                updateSendButtonState();
-            }
-        };
-
-        private Runnable mRunnable = new Runnable() {
-            public void run() {
-                Toast.makeText(ComposeMessageActivity.this, R.string.dialog_sms_limit,
-                        Toast.LENGTH_SHORT).show();
-            }
-        };
-
-        @Override
-        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-            mBeforeTextChangeString = s.toString();
-            MmsLog.d(TAG, "beforeTextChanged count = " + count + " after =" + after);
-        }
-
-        @Override
-        public void onTextChanged(CharSequence s, int start, int before, int count) {
-            // This is a workaround for bug 1609057. Since onUserInteraction() is
-            // not called when the user touches the soft keyboard, we pretend it was
-            // called when textfields changes.  This should be removed when the bug
-            // is fixed.
-            onUserInteraction();
-
-            mWorkingMessage.setText(s);
-            /// M: fix bug ALPS00712509, show toast when paste many word and > 300k
-            if (mWorkingMessage.isExceedSize()) {
-                mWorkingMessage.setIsExceedSize(false);
-                mUiHandler.removeCallbacks(mRunnable);
-                mUiHandler.postDelayed(mRunnable, 200);
-            }
-            /// M: @{
-            mAttachmentEditor.onTextChangeForOneSlide();
-            /// @}
-
-            /// M: fix bug ALPS00612093, postDelay for ANR
-            mUiHandler.removeCallbacks(mUpdateRunnable);
-            mUiHandler.postDelayed(mUpdateRunnable, 100);
-
-            updateCounter(s, start, before, count);
-            mStart = start;
-            /// M: @{
-            //ensureCorrectButtonHeight();
-            /// @}
-
-            // add for ipmessage
-            mIpCompose.onIpTextChanged(s, start, before, count);
-        }
-
-        @Override
-        public void afterTextChanged(Editable s) {
-            // add for ipmessage
-            mIpCompose.onIpAfterTextChanged(s, mBeforeTextChangeString);
-        }
-    };
-
-    /**
-     * Ensures that if the text edit box extends past two lines then the
-     * button will be shifted up to allow enough space for the character
-     * counter string to be placed beneath it.
-     */
-    /*** M: remove Google default code
-    private void ensureCorrectButtonHeight() {
-        int currentTextLines = mTextEditor.getLineCount();
-        if (currentTextLines <= 2) {
-            mTextCounter.setVisibility(View.GONE);
-        }
-        else if (currentTextLines > 2 && mTextCounter.getVisibility() == View.GONE) {
-            // Making the counter invisible ensures that it is used to correctly
-            // calculate the position of the send button even if we choose not to
-            // display the text.
-            mTextCounter.setVisibility(View.INVISIBLE);
-        }
-    }
-    */
-
-    private final TextWatcher mSubjectEditorWatcher = new TextWatcher() {
-        @Override
-        public void beforeTextChanged(CharSequence s, int start, int count, int after) { }
-
-        @Override
-        public void onTextChanged(CharSequence s, int start, int before, int count) {
-            mWorkingMessage.setSubject(s, true);
-            if (s != null && TextUtils.getTrimmedLength(s) > 0) {
-                /// M: Code analyze 032, According to the message state to update text counter.@{
-                mTextCounter.setVisibility(View.GONE);
-                // / @}
-                // updateSendButtonState();
-            }
-            // / M: for fixed ALPS00562999,when change subject to null,update send button.@{
-            updateSendButtonState();
-            // / @}
-        }
-
-        @Override
-        public void afterTextChanged(Editable s) {
-            String subjectString = s.toString();
-            if (subjectString.length() == 0) {
-                Log.d(TAG, "[mSubjectEditorWatcher.afterTextChanged] subject lenght is 0,"
-                    + "current mms or sms : " + mWorkingMessage.requiresMms());
-                if (!mWorkingMessage.requiresMms()) {
-                    if (mConversation != null && mWorkingMessage != null) {
-                        mWorkingMessage.asyncDeleteDraftMmsMessage(mConversation);
-                        mWorkingMessage.clearConversation(mConversation, true);
-                    }
-                }
-            }
-        }
-    };
-
-    //==========================================================
-    // Private methods
-    //==========================================================
-
-    /**
-     * Initialize all UI elements from resources.
-     */
-    private void initResourceRefs() {
-        /// M: Code analyze 004, Set max height for text editor. @{
-        mHeightChangedLinearLayout =
-            (HeightChangedLinearLayout) findViewById(R.id.changed_linear_layout);
-        mHeightChangedLinearLayout.setLayoutSizeChangedListener(mLayoutSizeChangedListener);
-        /// @}
-        mMsgListView = (MessageListView) findViewById(R.id.history);
-        mMsgListView.setDivider(null);      // no divider so we look like IM conversation.
-        mMsgListView.setDividerHeight(getResources()
-                .getDimensionPixelOffset(R.dimen.ipmsg_message_list_divier_height));
-
-        // called to enable us to show some padding between the message list and the
-        // input field but when the message list is scrolled that padding area is filled
-        // in with message content
-        mMsgListView.setClipToPadding(false);
-
-        /** M: 4.1  used this code.
-        mMsgListView.setOnSizeChangedListener(new OnSizeChangedListener() {
-            public void onSizeChanged(int width, int height, int oldWidth, int oldHeight) {
-                // The message list view changed size, most likely because the keyboard
-                // appeared or disappeared or the user typed/deleted chars in the message
-                // box causing it to change its height when expanding/collapsing to hold more
-                // lines of text.
-                smoothScrollToEnd(false, height - oldHeight);
-            }
-        });
-        */
-
-        /// M: turn off children clipping because we draw the border outside of our own
-        /// M: bounds at the bottom.  The background is also drawn in code to avoid drawing
-        /// M: the top edge.
-        mMsgListView.setClipChildren(false);
-
-        mBottomPanel = findViewById(R.id.bottom_panel);
-        mTextEditor = (EnhanceEditText) findViewById(R.id.embedded_text_editor);
-        /// M: @{
-        //  mTextEditor.setOnEditorActionListener(this);
-        /// @}
-        mTextEditor.removeTextChangedListener(mTextEditorWatcher);
-        mTextEditor.addTextChangedListener(mTextEditorWatcher);
-        mTextEditor.setFilters(new InputFilter[] {
-                new TextLengthFilter(MmsConfig.getMaxTextLimit())});
-        mTextEditor.setOnKeyListener(new OnKeyListener() {
-            @Override
-            public boolean onKey(View v, int keyCode, KeyEvent event) {
-                // add for ipmessage
-                mIpCompose.onIpTextEditorKey(v, keyCode, event);
-                return false;
-            }
-        });
-
-        mTextEditor.setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                mIpCompose.onIpTextEditorTouch();
-                mOpComposeExt.onTextEditorTouch();
-                return false;
-            }
-        });
-
-        mTextEditor.addOnLayoutChangeListener(new View.OnLayoutChangeListener() {
-            @Override
-            public void onLayoutChange(View v, int left, int top, int right,
-                    int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom) {
-                if (Log.isLoggable(TAG, Log.VERBOSE)) {
-                    MmsLog.v(TAG, "mTextEditor onLayoutChange mUpdateForScrnOrientationChanged = "
-                            + mUpdateForScrnOrientationChanged);
-                }
-                if (mUpdateForScrnOrientationChanged) {
-                    mUiHandler.postDelayed(new Runnable() {
-                        @Override
-                        public void run() {
-                            updateCounter(mWorkingMessage.getText(), 0, 0, 0);
-                        }
-                    }, 1000);
-                    mUpdateForScrnOrientationChanged = false;
-                }
-            }
-        });
-
-        mTextCounter = (TextView) findViewById(R.id.text_counter);
-        mSendButtonMms = (TextView) findViewById(R.id.send_button_mms);
-        mSendButtonSms = (ImageButton) findViewById(R.id.send_button_sms);
-        mTypingStatus = (TextView) findViewById(R.id.ip_message_typing_status);
-        mRemoteStrangerText = (TextView) findViewById(R.id.ipmsg_joyn_stranger_remind);
-        mSendButtonMms.setOnClickListener(this);
-        mSendButtonSms.setOnClickListener(this);
-        mTopPanel = findViewById(R.id.recipients_subject_linear);
-        mTopPanel.setFocusable(false);
-        mAttachmentEditor = (AttachmentEditor) findViewById(R.id.attachment_editor);
-        mAttachmentEditor.setHandler(mAttachmentEditorHandler);
-        //mAttachmentEditorScrollView = findViewById(R.id.attachment_editor_scroll_view);
-        mQuickContact = (QuickContactBadge) findViewById(R.id.avatar);
-        mOpComposeExt.initResourceRefs((LinearLayout) findViewById(R.id.button_with_counter),
-                (TextView) findViewById(R.id.ct_text_counter),
-                mAttachmentEditor.mOpAttachmentEditorExt);
-    }
-
-    private void confirmDeleteDialog(OnClickListener listener, boolean locked) {
-        AlertDialog.Builder builder = new AlertDialog.Builder(this);
-        /// M: Code analyze 027,Add for deleting one message.@{
-        // Set different title and icon for locked message.
-        builder.setTitle(locked ? R.string.confirm_dialog_locked_title :
-            R.string.confirm_dialog_title);
-        builder.setIconAttribute(android.R.attr.alertDialogIcon);
-        /// @}
-        builder.setCancelable(true);
-        builder.setMessage(locked ? R.string.confirm_delete_locked_message :
-                    R.string.confirm_delete_message);
-        builder.setPositiveButton(R.string.delete, listener);
-        builder.setNegativeButton(R.string.no, null);
-        builder.show();
-    }
-
-    void undeliveredMessageDialog(long date) {
-        String body;
-
-        if (date >= 0) {
-            body = getString(R.string.undelivered_msg_dialog_body,
-                    MessageUtils.formatTimeStampString(this, date));
-        } else {
-            // FIXME: we can not get sms retry time.
-            body = getString(R.string.undelivered_sms_dialog_body);
-        }
-
-        Toast.makeText(this, body, Toast.LENGTH_LONG).show();
-    }
-
-    private void startMsgListQuery() {
-        startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 100);
-    }
-
-    private void startMsgListQuery(final int token, int delay) {
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (FolderModeUtils.getMmsDirMode()) {
-            return;
-        }
-        /// @}
-        if (isRecipientsEditorVisible()) {
-            return;
-        }
-
-        final Uri conversationUri = mOpComposeExt.startMsgListQuery(
-                mConversation.getUri(), mConversation.getThreadId());
-
-        MmsLog.dpi(TAG, "startMsgListQuery, uri= " + conversationUri + " timeout = " + delay);
-        if (conversationUri == null) {
-            log("##### startMsgListQuery: conversationUri is null, bail!");
-            return;
-        }
-
-        final long threadId = mConversation.getThreadId();
-        if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "startMsgListQuery for " + conversationUri + ", threadId=" + threadId);
-        }
-
-        try {
-            if (token == MESSAGE_LIST_QUERY_TOKEN) {
-                mBackgroundQueryHandler.postDelayed(mQueryMsgListRunnable, delay);
-                 return;
-            }
-
-            // Kick off the new query
-            /// M: @{
-            // mBackgroundQueryHandler.startQuery(
-            mBackgroundQueryHandler.postDelayed(new Runnable() {
-                public void run() {
-                    /// M: If no listener, no need query anymore @{
-                        MmsLog.d(TAG, "mListQueryRunnable, to query, "
-                                + "activity=" + ComposeMessageActivity.this);
-                        if (mMsgListAdapter.getOnDataSetChangedListener() == null) {
-                            MmsLog.d(TAG, "mListQueryRunnable, no listener");
-                            return;
-                        }
-                    /// @}
-                    ///M: add for ipmessage
-                    boolean queryed = mIpCompose.startMsgListQuery(mBackgroundQueryHandler,
-                            token, threadId, conversationUri, PROJECTION, null, null, null);
-                    if (queryed) {
-                        return;
-                    }
-                    mBackgroundQueryHandler.startQuery(
-                            token,
-                            threadId /* cookie */,
-                            conversationUri,
-                            PROJECTION,
-                            null, null, null);
-                }
-            }, delay);
-            /// @}
-        } catch (SQLiteException e) {
-            SqliteWrapper.checkSQLiteException(this, e);
-        }
-    }
-
-    private void initMessageList() {
-        if (mMsgListAdapter != null) {
-            return;
-        }
-
-        String highlightString = getIntent().getStringExtra("highlight");
-        Pattern highlight = highlightString == null
-            ? null
-        /// M: ALPS00619099, highlight all matched search string, not only on word border @ {
-            : Pattern.compile(Pattern.quote(highlightString), Pattern.CASE_INSENSITIVE);
-        /// @}
-
-        // Initialize the list adapter with a null cursor.
-        mMsgListAdapter = new MessageListAdapter(this, null, mMsgListView, true, highlight);
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (FolderModeUtils.getMmsDirMode()) {
-            mMsgListView.setVisibility(View.GONE);
-            return;
-        }
-        /// @}
-        mMsgListAdapter.setMsgListItemHandler(mMessageListItemHandler);
-        mMsgListView.setAdapter(mMsgListAdapter);
-        mMsgListView.setSelector(android.R.color.transparent);
-        mMsgListView.setItemsCanFocus(false);
-        mMsgListView.setVisibility(View.VISIBLE);
-        mMsgListView.setOnCreateContextMenuListener(mMsgListMenuCreateListener);
-        mMsgListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                MmsLog.d(MessageListItem.TAG_DIVIDER, "OnItemClickListener(): view = " + view);
-                if (view != null) {
-                    ((MessageListItem) view).onMessageListItemClick();
-                }
-            }
-        });
-        /// M: Code analyze 050, Add scroll listener and touch listener for MessageListView.@{
-        /**
-         * M: Adjust the velocity scale and friction of messages list view,
-         * and The below two values are just experience
-         * values. For density > 2 which usually on FHD devices with larger(1.5x)
-         * friction, set Velocity scale to 0.6 For
-         * density <= 2, still use Velocity scale 0.4
-         */
-        final float density = getResources().getDisplayMetrics().density;
-        final float DEFAULT_DENSITY = 2.0f;
-        final float FHD_VELOCITY_SCALE = 0.6f;
-        final float DEFAULT_VELOCITY_SCALE = 0.4f;
-        final float DEFAULT_FRICTION = 0.005f;
-        Log.d(TAG, "getDisplayMetrics().density: " + density);
-
-        mMsgListView.setVelocityScale(density > DEFAULT_DENSITY
-                ? FHD_VELOCITY_SCALE : DEFAULT_VELOCITY_SCALE);
-        mMsgListView.setFriction(DEFAULT_FRICTION);
-        mMsgListView.setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                hideInputMethod();
-                return false;
-            }
-        });
-        // add for ipmessage
-        mIpCompose.onIpInitMessageList(mMsgListView, mMsgListAdapter.mIpMessageListAdapter);
-    }
-
-    private void loadDraft() {
-        if (mWorkingMessage.isWorthSaving()) {
-            Log.w(TAG, "loadDraft() called with non-empty working message");
-            mWorkingMessage.checkDraftSmsMessage(mConversation);
-            return;
-        }
-
-        // add for ipmessage
-        if (mIpCompose.loadIpMessagDraft(mConversation.getThreadId())) {
-            return;
-        }
-
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            log("loadDraft() call WorkingMessage.loadDraft");
-        }
-
-        /// M:[Just Comment] 4.1 Code.  There may be a bug.
-        mWorkingMessage = WorkingMessage.loadDraft(this, mConversation,
-                new Runnable() {
-                    @Override
-                    public void run() {
-                        drawTopPanel(false);
-                        drawBottomPanel();
-                        updateSendButtonState();
-                    }
-                });
-//        if (mConversation != null && mConversation.getRecipients() != null
-//                && mConversation.getRecipients().size() > 20) {
-//            MmsLog.d(TAG, "register mDraftChangeObserver");
-//            mContentResolver.registerContentObserver(
-//                    Mms.CONTENT_URI, true, mDraftChangeObserver);
-//        }
-    }
-
-    private void saveDraft(boolean isStopping) {
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            LogTag.debug("saveDraft");
-        }
-
-        // add for ipmessage
-        mIpCompose.onIpSaveDraft(mConversation.getThreadId());
-        /// @}
-        // TODO: Do something better here.  Maybe make discard() legal
-        // to call twice and make isEmpty() return true if discarded
-        // so it is caught in the clause above this one?
-        if (mWorkingMessage.isDiscarded()) {
-            return;
-        }
-
-        if (!mWaitingForSubActivity && !mWorkingMessage.isWorthSaving() &&
-                (!isRecipientsEditorVisible() || recipientCount() == 0
-                /* M: ALPS01821584. discard when onStop */ || isStopping)) {
-            if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                log("not worth saving, discard WorkingMessage and bail");
-            }
-            mWorkingMessage.discard(false);
-            return;
-        }
-        /// M : Fix CR: ALPS00996195
-        /// group message, more than one recipients, no need to saveDraft,
-        /// is going to MultiDeleteActivity, just return. if contains draft, discard it @{
-        if (mIsStartMultiDeleteActivity) {
-            if (MmsPreferenceActivity.getIsGroupMmsEnabled(this) && !needSaveDraft()
-                && mConversation.getRecipients().size() > 1) {
-                Log.d("[Mms][Draft][ComposeMessageActivity]", "[saveDraft] group message & "
-                        + " no need save drat & mIsStartMultiDeleteActivity"
-                        + " true, then just return!");
-                if (mConversation.hasDraft()) {
-                    Log.d("[Mms][Draft][ComposeMessageActivity]",
-                            "[saveDraft] mConversation has draft, then delete it");
-                    mWorkingMessage.discard(false);
-                }
-                return;
-            }
-            /// M Fix CR ALPS01201355, which will save draft the contact contains email address.
-            /// when start multideleteactivity. if contains mms draft ,discard it @{
-            if (getRecipients().containsEmail() && !needSaveDraft()) {
-                Log.d("[Mms][Draft][ComposeMessageActivity]", "[saveDraft] contains email address"
-                    + ",no need to save draft, just return!!");
-                if (mConversation.hasDraft()) {
-                    Log.d("[Mms][Draft][ComposeMessageActivity]",
-                            "[saveDraft] mConversation has draft, then delete it");
-                    mWorkingMessage.discard(false);
-                }
-                return;
-            }
-            /// @}
-        }
-        /// @}
-
-        mOpComposeExt.saveDraft(mWorkingMessage.mOpWorkingMessageExt);
-
-        Log.d("[Mms][Draft][ComposeMessageActivity]", "[saveDraft] call workingmessage.saveDraft");
-        mWorkingMessage.saveDraft(isStopping);
-
-        if (mToastForDraftSave && MmsConfig.isSmsEnabled(this)) {
-            Toast.makeText(this, R.string.message_saved_as_draft,
-                    Toast.LENGTH_SHORT).show();
-        }
-    }
-
-    private boolean isPreparedForSending() {
-        /// M: Code analyze 029,Add sub card state as a ready condition. @{
-        /*
-        int recipientCount = recipientCount();
-
-        return recipientCount > 0 && recipientCount <= MmsConfig.getRecipientLimit() &&
-            (mWorkingMessage.hasAttachment() ||
-                    mWorkingMessage.hasText() ||
-                    mWorkingMessage.hasSubject());
-        */
-
-        if (isRecipientsEditorVisible()) {
-            String recipientText = mRecipientsEditor.getText() == null ?
-                    "" : mRecipientsEditor.getText().toString();
-
-            return mSubCount > 0 && !TextUtils.isEmpty(recipientText) && mIsSmsEnabled
-                    && (mWorkingMessage.hasAttachment() || mWorkingMessage.hasText()
-                            || mWorkingMessage.hasSubject());
-        } else {
-            return mSubCount > 0 && mIsSmsEnabled && (mWorkingMessage.hasAttachment()
-                    || mWorkingMessage.hasText()
-                            || mWorkingMessage.hasSubject());
-        }
-        /// @}
-    }
-
-    private int recipientCount() {
-        int recipientCount;
-
-        // To avoid creating a bunch of invalid Contacts when the recipients
-        // editor is in flux, we keep the recipients list empty.  So if the
-        // recipients editor is showing, see if there is anything in it rather
-        // than consulting the empty recipient list.
-        if (isRecipientsEditorVisible()) {
-            recipientCount = mRecipientsEditor.getRecipientCount();
-        } else {
-            recipientCount = getRecipients().size();
-        }
-        return recipientCount;
-    }
-
-    public void sendMessage(boolean bCheckEcmMode) {
-        if (mWorkingMessage.requiresMms() && (mWorkingMessage.hasSlideshow()
-                || mWorkingMessage.hasAttachment())) {
-            int messageSize = 0;
-            messageSize = mWorkingMessage.getCurrentMessageSize();
-            MmsLog.d(TAG, "Compose.sendMessage(): messageSize=" + messageSize);
-            if (messageSize > MmsConfig.getUserSetMmsSizeLimit(true)) {
-                MessageUtils.showErrorDialog(ComposeMessageActivity.this,
-                        R.string.exceed_message_size_limitation,
-                        R.string.exceed_message_size_limitation, 0, 0);
-                updateSendButtonState();
-                return;
-            }
-        }
-
-        if (bCheckEcmMode) {
-            // TODO: expose this in telephony layer for SDK build
-            int phoneId = SubscriptionManager.getPhoneId(mSelectedSubId);
-            String inEcm = TelephonyManager.getTelephonyProperty(phoneId,
-                    TelephonyProperties.PROPERTY_INECM_MODE, null);
-            //String inEcm = SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE);
-            if (Boolean.parseBoolean(inEcm)) {
-                try {
-                    startActivityForResult(
-                            new Intent(TelephonyIntents.ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS, null),
-                            REQUEST_CODE_ECM_EXIT_DIALOG);
-                    return;
-                } catch (ActivityNotFoundException e) {
-                    // continue to send message
-                    Log.e(TAG, "Cannot find EmergencyCallbackModeExitDialog", e);
-                }
-            }
-        }
-
-        if (mOpComposeExt.sendMessage(mWorkingMessage.mOpWorkingMessageExt, mSelectedSubId)) {
-            return;
-        }
-
-        /// M: Fix bug ALPS00407718
-        if (mExitOnSent) {
-            hideKeyboard();
-        }
-        /// M: Code analyze 011, use another method for performance.(update mDebugRecipients)@{
-        ContactList contactList = isRecipientsEditorVisible() ?
-                mRecipientsEditor.constructContactsFromInput(false) : getRecipients();
-        mDebugRecipients = contactList.serialize();
-        /// @}
-
-        if (!mSendingMessage) {
-            if (LogTag.SEVERE_WARNING) {
-                String sendingRecipients = mConversation.getRecipients().serialize();
-                if (!sendingRecipients.equals(mDebugRecipients)) {
-                    String workingRecipients = mWorkingMessage.getWorkingRecipients();
-                    if (!mDebugRecipients.equals(workingRecipients)) {
-                    }
-                }
-                sanityCheckConversation();
-            }
-
-            // send can change the recipients. Make sure we remove the listeners first and then add
-            // them back once the recipient list has settled.
-            removeRecipientsListeners();
-
-            /// M: If msg can be sent, AttachmentEditor can not be reponsed.
-            mClickCanResponse = false;
-            /// M:the method is extend to support gemini @{
-            mWorkingMessage.send(mDebugRecipients, mSelectedSubId);
-            MmsLog.d(TAG, "Compose.sendMessage(): after sendMessage. mConversation.ThreadId="
-                    + mConversation.getThreadId()
-                    + ", MessageCount=" + mConversation.getMessageCount());
-            /// @}
-            /** M:
-             *   If message count is 0, it should be a new message.
-             *   After tap send button, the sent message will have draft flag for a short time.
-             *   That means, the message count will be 0 for a short time.
-             *   If user tap home key in this short time, it will change the
-             *   conversation id to 0 in the method savedraft().
-             *   When the screen is back to Message Composer, it will
-             *   query database with thread(conversation) id 0.
-             *   So, it will query for nothing. The screen is always blank.
-             *   Fix this issue by force to set message count with 1.
-             */
-            if (mConversation.getMessageCount() == 0) {
-                mConversation.setMessageCount(1);
-            }
-            /// M: @{
-            mWaitingForSendMessage = true;
-            /// M: when tap fail icon, don't add recipients
-            isInitRecipientsEditor = false;
-            mMsgListView.setVisibility(View.VISIBLE);
-            /// @}
-
-            mSentMessage = true;
-            mSendingMessage = true;
-            addRecipientsListeners();
-
-            mScrollOnSend = true;   // in the next onQueryComplete, scroll the list to the end.
-            // M: reset mCutRecipients
-            mCutRecipients = null;
-        }
-        // But bail out if we are supposed to exit after the message is sent.
-        if (mExitOnSent) {
-            /// M: fix bug ALPS00722349, update thread after forward message, avoid conversation
-            /// draft state become abnormal.
-            boolean isChecked = mConversation.isChecked();
-            mConversation = Conversation.upDateThread(getApplicationContext(),
-                    mConversation.getThreadId(), false);
-            mConversation.setIsChecked(isChecked);
-            ///M: add for guarantee the message sent. @{
-            mUiHandler.postDelayed(new Runnable() {
-                @Override
-                public void run() {
-                    finish();
-                }
-            }, 150);
-            /// @}
-        }
-    }
-
-    private void resetMessage() {
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            log("resetMessage");
-        }
-
-        /// M: should hide RecipientsEditor before TextEditor requestFocus. To avoid do
-        /// afterTextChange after message sent.
-        hideRecipientEditor();
-        updateTitle(mConversation.getRecipients());
-
-        // Make the attachment editor hide its view.
-        mAttachmentEditor.hideView();
-//            mAttachmentEditorScrollView.setVisibility(View.GONE);
-        ///M: change the order between Editor.requestFocus & showSubjectEditor
-        /// for fix issue ALPS00569570 @{
-        // Focus to the text editor.
-        mTextEditor.requestFocus();
-
-        // Hide the subject editor.
-        showSubjectEditor(false);
-        /// @}
-
-        mOpComposeExt.resetMessage();
-
-        // We have to remove the text change listener while the text editor gets cleared and
-        // we subsequently turn the message back into SMS. When the listener is listening while
-        // doing the clearing, it's fighting to update its counts and itself try and turn
-        // the message one way or the other.
-        mTextEditor.removeTextChangedListener(mTextEditorWatcher);
-
-        // Clear the text box.
-        TextKeyListener.clear(mTextEditor.getText());
-
-        mWorkingMessage.clearConversation(mConversation, false);
-        mWorkingMessage = WorkingMessage.createEmpty(this);
-        mWorkingMessage.setConversation(mConversation);
-
-
-
-        if ((mMessageSubId == Settings.System.DEFAULT_SIM_SETTING_ALWAYS_ASK
-                || mMessageSubId == Settings.System.DEFAULT_SIM_NOT_SET)) {
-            mSelectedSubId = 0;
-        }
-
-        drawBottomPanel();
-
-        // "Or not", in this case.
-        updateSendButtonState();
-        // add for ipmessage
-        mIpCompose.onIpResetMessage();
-        // Our changes are done. Let the listener respond to text changes once again.
-        mTextEditor.removeTextChangedListener(mTextEditorWatcher);
-        mTextEditor.addTextChangedListener(mTextEditorWatcher);
-
-        // Close the soft on-screen keyboard if we're in landscape mode so the user can see the
-        // conversation.
-        ///M: but when the device was tablet, we can't hide the IME
-        boolean isTablet = getResources().getBoolean(R.bool.isTablet);
-        if (mIsLandscape && !isTablet) {
-            hideKeyboard();
-        }
-
-        mLastRecipientCount = 0;
-        mSendingMessage = false;
-        invalidateOptionsMenu();
-        /// M: update list, this must put after hideRecipientEditor(); to avoid a bug.
-        startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 0);
-        /// M: reset flags
-        mClickCanResponse = true;
-   }
-
-    private void hideKeyboard() {
-        MmsLog.d(TAG, "hideKeyboard()");
-        InputMethodManager inputMethodManager =
-            (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
-        inputMethodManager.hideSoftInputFromWindow(mTextEditor.getWindowToken(), 0);
-    }
-
-    public void updateSendButtonState() {
-        boolean enable = false;
-        if (Log.isLoggable(TAG, Log.VERBOSE)) {
-            MmsLog.v(TAG, "lzd updateSendButtonState(): isPreparedForSending = "
-                    + isPreparedForSending());
-        }
-        if (isPreparedForSending()) {
-            /// M: Code analyze 049, Update send button or attachment editor state.@{
-            MmsLog.i(TAG, "updateSendButtonState(): mSubCount = " + mSubCount
-                    + " hasSlideshow = " + mWorkingMessage.hasSlideshow());
-            if (mSubCount > 0) {
-                // When the type of attachment is slideshow, we should
-                // also hide the 'Send' button since the slideshow view
-                // already has a 'Send' button embedded.
-                if (!mWorkingMessage.hasSlideshow()) {
-                    enable = true;
-                } else {
-                    mAttachmentEditor.setCanSend(true);
-                }
-            }
-        } else {
-            // / @}
-            mAttachmentEditor.setCanSend(false);
-        }
-
-        boolean requiresMms = mWorkingMessage.requiresMms();
-
-        if (mOpComposeExt.updateSendButton(enable, mSubCount, requiresMms,
-                                           mWorkingMessage.hasSlideshow())) {
-            return;
-        }
-
-        View sendButton = showSmsOrMmsSendButton(requiresMms);
-        if (!requiresMms && (recipientCount() > MmsConfig.getSmsRecipientLimit())) {
-            enable = false;
-        }
-        if (!MmsConfig.isSmsEnabled(this)) {
-            enable = false;
-        }
-        if (MessageUtils.isUseSubSimulator()) {
-            enable = true;
-        }
-        if (sendButton != null) {
-            sendButton.setEnabled(enable);
-            sendButton.setFocusable(enable);
-        }
-    }
-
-    private long getMessageDate(Uri uri) {
-        if (uri != null) {
-            Cursor cursor = SqliteWrapper.query(this, mContentResolver,
-                    uri, new String[] { Mms.DATE }, null, null, null);
-            if (cursor != null) {
-                try {
-                    if ((cursor.getCount() == 1) && cursor.moveToFirst()) {
-                        return cursor.getLong(0) * 1000L;
-                    }
-                } finally {
-                    cursor.close();
-                }
-            }
-        }
-        return NO_DATE_FOR_DIALOG;
-    }
-
-/// M: @{
-//    private void initActivityState(Intent intent) {
-//        // If we have been passed a thread_id, use that to find our conversation.
-//        long threadId = intent.getLongExtra("thread_id", 0);
-//        if (threadId > 0) {
-//            if (LogTag.VERBOSE) log("get mConversation by threadId " + threadId);
-//            mConversation = Conversation.get(this, threadId, false);
-//        } else {
-//            Uri intentData = intent.getData();
-//            if (intentData != null) {
-//                // try to get a conversation based on the data URI passed to our intent.
-//                if (LogTag.VERBOSE) log("get mConversation by intentData " + intentData);
-//                mConversation = Conversation.get(this, intentData, false);
-//                mWorkingMessage.setText(getBody(intentData));
-//            } else {
-//                // special intent extra parameter to specify the address
-//                String address = intent.getStringExtra("address");
-//                if (!TextUtils.isEmpty(address)) {
-//                    if (LogTag.VERBOSE) log("get mConversation by address " + address);
-//                    mConversation = Conversation.get(this, ContactList.getByNumbers(address,
-//                            false /* don't block */, true /* replace number */), false);
-//                } else {
-//                    if (LogTag.VERBOSE) log("create new conversation");
-//                    mConversation = Conversation.createNew(this);
-//                }
-//            }
-//        }
-//        addRecipientsListeners();
-//
-//        mExitOnSent = intent.getBooleanExtra("exit_on_sent", false);
-//        if (intent.hasExtra("sms_body")) {
-//            mWorkingMessage.setText(intent.getStringExtra("sms_body"));
-//        }
-//        mWorkingMessage.setSubject(intent.getStringExtra("subject"), false);
-//    }
-    private void initActivityState(Bundle bundle) {
-        Intent intent = getIntent();
-        /// M: Code analyze 033, Save some useful information in order to restore the draft when
-        /// activity restarting.@{
-        mIsTooManyRecipients = false;
-        if (bundle != null) {
-            mCompressingImage = bundle.getBoolean("compressing_image", false);
-            String recipientsStr = bundle.getString("recipients");
-            int recipientCount = 0;
-            if (recipientsStr != null) {
-                recipientCount = recipientsStr.split(";").length;
-                mConversation = Conversation.get(getApplicationContext(),
-                    ContactList.getByNumbers(recipientsStr,
-                            false /* don't block */, true /* replace number */), false);
-            } else {
-                Long threadId = bundle.getLong("thread", 0);
-                mConversation = Conversation.get(getApplicationContext(), threadId, false);
-            }
-            // M: fix bug ALPS00352078
-            mWorkingMessage.setConversation(mConversation);
-
-            mExitOnSent = bundle.getBoolean(KEY_EXIT_ON_SENT, false);
-            mForwardMessageMode = bundle.getBoolean(KEY_FORWARDED_MESSAGE, false);
-
-            mWorkingMessage.readStateFromBundle(bundle);
-            /// M: Code analyze 010, Support dirtory mode. @{
-            if (FolderModeUtils.getMmsDirMode()) {
-                mExitOnSent = true;
-            }
-            /// @}
-            if (!mCompressingImage && mConversation.hasDraft()
-                    && mConversation.getMessageCount() == 0) {
-                if (!mWorkingMessage.requiresMms()) {
-                    Log.w(TAG, "delete sms draft");
-                    mWorkingMessage.asyncDeleteDraftSmsMessage(mConversation);
-                } else {
-                    if (mWorkingMessage.getSlideshow() != null
-                            && mWorkingMessage.getSlideshow().size() == 1
-                            && !mWorkingMessage.getSlideshow().get(0).hasAudio()
-                            && !mWorkingMessage.getSlideshow().get(0).hasImage()
-                            && !mWorkingMessage.getSlideshow().get(0).hasVideo()
-                            && mWorkingMessage.getSlideshow().sizeOfFilesAttach() == 0) {
-                        mWorkingMessage.asyncDeleteDraftMmsMessage(mConversation);
-                        mWorkingMessage.removeAllFileAttaches();
-                        mWorkingMessage.removeAttachment(false);
-                    }
-                }
-                mWorkingMessage.clearConversation(mConversation, true);
-            }
-            if (recipientCount > RECIPIENTS_LIMIT_FOR_SMS) {
-                mIsTooManyRecipients = true;
-            }
-            mCompressingImage = false;
-
-            mAppendAttachmentSign = bundle.getBoolean(KEY_APPEND_MESSAGE, true);
-            MmsLog.d(TAG, "initActivityState mAppendAttachmentSign : " + mAppendAttachmentSign);
-            /// @}
-            return;
-        }
-        /// M: Code analyze 019, Add vcard attachment.  @{
-        long[] contactsIds = VCardUtils.getContactsIds(
-                intent.getStringExtra("multi_export_contacts"));
-        /// @}
-        // If we have been passed a thread_id, use that to find our conversation.
-        long threadId = intent.getLongExtra("thread_id", 0);
-        if (threadId > 0) {
-            if (LogTag.VERBOSE) log("get mConversation by threadId " + threadId);
-            mConversation = Conversation.get(getApplicationContext(), threadId, false);
-        /// M: Code analyze 019, Add vcard attachment.  @{
-        } else if (contactsIds != null && contactsIds.length > 0) {
-            //addTextVCard(contactsIds);
-            addTextVCardAsync(contactsIds);
-            mConversation = Conversation.createNew(getApplicationContext());
-            return;
-        /// @}
-        } else {
-            Uri intentData = intent.getData();
-            /// M: Code analyze 034, If intent is SEND,just create a new empty thread,
-            /// otherwise Conversation.get() will throw exception.
-            String action = intent.getAction();
-            if (intentData != null && (TextUtils.isEmpty(action) ||
-                            !action.equals(Intent.ACTION_SEND))) {
-                /// M: group-contact send message
-                // try to get a conversation based on the data URI passed to our intent.
-                if (intentData.getPathSegments().size() < 2) {
-                    mConversation = mConversation.get(getApplicationContext(),
-                            ContactList.getByNumbers(
-                           getStringForMultipleRecipients(Conversation.getRecipients(intentData)),
-                                 false /* don't block */, true /* replace number */), false);
-                } else {
-                    mConversation = Conversation.get(getApplicationContext(), intentData, false);
-                }
-                /// @}
-                mWorkingMessage.setText(getBody(intentData));
-            } else {
-                // special intent extra parameter to specify the address
-                String address = intent.getStringExtra("address");
-                if (!TextUtils.isEmpty(address)) {
-                    if (LogTag.VERBOSE) log("get mConversation by address ");
-                    mConversation = Conversation.get(getApplicationContext(),
-                            ContactList.getByNumbers(address,
-                            false /* don't block */, true /* replace number */), false);
-                } else {
-                    if (LogTag.VERBOSE) log("create new conversation");
-                    mConversation = Conversation.createNew(getApplicationContext());
-                }
-            }
-        }
-        //addRecipientsListeners();
-        updateThreadIdIfRunning();
-
-        mExitOnSent = intent.getBooleanExtra(KEY_EXIT_ON_SENT, false);
-        mForwardMessageMode = intent.getBooleanExtra(KEY_FORWARDED_MESSAGE, false);
-        if (intent.hasExtra("sms_body")) {
-            /// M: Code analyze 017, Handle forwarded message.(see:forwardMessage()).
-            /// Forward sms message and set sms body.@{
-            String sms_body = intent.getStringExtra("sms_body");
-            /// M: Modify for ALPS00759207
-            mWorkingMessage.setText(sms_body);
-            /// @}
-        }
-        mWorkingMessage.setSubject(intent.getStringExtra("subject"), false);
-
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (FolderModeUtils.getMmsDirMode()) {
-            mExitOnSent = true;
-        }
-        /// @}
-        mOpComposeExt.initActivityState(intent);
-    }
-
-    private void initFocus() {
-        if (!mIsKeyboardOpen) {
-            return;
-        }
-
-        mOpComposeExt.initFocus();
-
-        // If the recipients editor is visible, there is nothing in it,
-        // and the text editor is not already focused, focus the
-        // recipients editor.
-        if (isRecipientsEditorVisible()
-                && TextUtils.isEmpty(mRecipientsEditor.getText())
-                && !mTextEditor.isFocused()) {
-            mRecipientsEditor.requestFocus();
-            return;
-        }
-
-        // If we decided not to focus the recipients editor, focus the text editor.
-        if (mSubjectTextEditor == null
-                || (mSubjectTextEditor != null && !mSubjectTextEditor.isFocused())) {
-            if ((mBottomPanel != null) && (mBottomPanel.getVisibility() == View.VISIBLE)) {
-                mTextEditor.requestFocus();
-            }
-        }
-    }
-
-    private final MessageListAdapter.OnDataSetChangedListener
-                    mDataSetChangedListener = new MessageListAdapter.OnDataSetChangedListener() {
-        @Override
-        public void onDataSetChanged(MessageListAdapter adapter) {
-            mPossiblePendingNotification = true;
-        }
-
-        @Override
-        public void onContentChanged(MessageListAdapter adapter) {
-        /// M: @{
-            if (mMsgListAdapter != null &&
-                mMsgListAdapter.getOnDataSetChangedListener() != null) {
-                MmsLog.d(TAG, "OnDataSetChangedListener is not cleared");
-                startMsgListQuery();
-            } else {
-                MmsLog.d(TAG, "OnDataSetChangedListener is cleared");
-            }
-        /// @}
-        }
-    };
-
-    private void checkPendingNotification() {
-        if (mPossiblePendingNotification && hasWindowFocus()) {
-            /// M: add for ip message, remove mark as read
-//            mConversation.markAsRead();
-            mPossiblePendingNotification = false;
-        }
-    }
-
-    /**
-     * smoothScrollToEnd will scroll the message list to the bottom if the list is already near
-     * the bottom. Typically this is called to smooth scroll a newly received message into view.
-     * It's also called when sending to scroll the list to the bottom, regardless of where it is,
-     * so the user can see the just sent message. This function is also called when the message
-     * list view changes size because the keyboard state changed or the compose message field grew.
-     *
-     * @param force always scroll to the bottom regardless of current list position
-     * @param listSizeChange the amount the message list view size has vertically changed
-     */
-    private void smoothScrollToEnd(boolean force, int listSizeChange) {
-        int lastItemVisible = mMsgListView.getLastVisiblePosition();
-        int lastItemInList = mMsgListAdapter.getCount() - 1;
-        if (lastItemVisible < 0 || lastItemInList < 0) {
-            if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                Log.v(TAG, "smoothScrollToEnd: lastItemVisible=" + lastItemVisible +
-                        ", lastItemInList=" + lastItemInList +
-                        ", mMsgListView not ready");
-            }
-            return;
-        }
-
-        View lastChildVisible =
-                mMsgListView.getChildAt(lastItemVisible - mMsgListView.getFirstVisiblePosition());
-        int lastVisibleItemBottom = 0;
-        int lastVisibleItemHeight = 0;
-        if (lastChildVisible != null) {
-            lastVisibleItemBottom = lastChildVisible.getBottom();
-            lastVisibleItemHeight = lastChildVisible.getHeight();
-        }
-
-        if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            Log.v(TAG, "smoothScrollToEnd newPosition: " + lastItemInList +
-                    " mLastSmoothScrollPosition: " + mLastSmoothScrollPosition +
-                    " first: " + mMsgListView.getFirstVisiblePosition() +
-                    " lastItemVisible: " + lastItemVisible +
-                    " lastVisibleItemBottom: " + lastVisibleItemBottom +
-                    " lastVisibleItemBottom + listSizeChange: " +
-                    (lastVisibleItemBottom + listSizeChange) +
-                    " mMsgListView.getHeight() - mMsgListView.getPaddingBottom(): " +
-                    (mMsgListView.getHeight() - mMsgListView.getPaddingBottom()) +
-                    " listSizeChange: " + listSizeChange);
-        }
-        // Only scroll if the list if we're responding to a newly sent message (force == true) or
-        // the list is already scrolled to the end. This code also has to handle the case where
-        // the listview has changed size (from the keyboard coming up or down or the message entry
-        // field growing/shrinking) and it uses that grow/shrink factor in listSizeChange to
-        // compute whether the list was at the end before the resize took place.
-        // For example, when the keyboard comes up, listSizeChange will be negative, something
-        // like -524. The lastChild listitem's bottom value will be the old value before the
-        // keyboard became visible but the size of the list will have changed. The test below
-        // add listSizeChange to bottom to figure out if the old position was already scrolled
-        // to the bottom. We also scroll the list if the last item is taller than the size of the
-        // list. This happens when the keyboard is up and the last item is an mms with an
-        // attachment thumbnail, such as picture. In this situation, we want to scroll the list so
-        // the bottom of the thumbnail is visible and the top of the item is scroll off the screen.
-        int listHeight = mMsgListView.getHeight();
-        boolean lastItemTooTall = lastVisibleItemHeight > listHeight;
-        boolean willScroll = force ||
-                ((listSizeChange != 0 || lastItemInList != mLastSmoothScrollPosition) &&
-                lastVisibleItemBottom + listSizeChange <=
-                    listHeight - mMsgListView.getPaddingBottom());
-        if (willScroll || (lastItemTooTall && lastItemInList == lastItemVisible)) {
-            if (Math.abs(listSizeChange) > SMOOTH_SCROLL_THRESHOLD) {
-                // When the keyboard comes up, the window manager initiates a cross fade
-                // animation that conflicts with smooth scroll. Handle that case by jumping the
-                // list directly to the end.
-                if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                    Log.v(TAG, "keyboard state changed. setSelection=" + lastItemInList);
-                }
-                if (lastItemTooTall) {
-                    // If the height of the last item is taller than the whole height of the list,
-                    // we need to scroll that item so that its top is negative or above the top of
-                    // the list. That way, the bottom of the last item will be exposed above the
-                    // keyboard.
-                    mMsgListView.setSelectionFromTop(lastItemInList,
-                            listHeight - lastVisibleItemHeight);
-                } else {
-                    mMsgListView.setSelection(lastItemInList);
-                }
-            } else if (lastItemInList - lastItemVisible > MAX_ITEMS_TO_INVOKE_SCROLL_SHORTCUT) {
-                if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                    Log.v(TAG, "too many to scroll, setSelection=" + lastItemInList);
-                }
-                mMsgListView.setSelection(lastItemInList);
-            } else {
-                if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                    Log.v(TAG, "smooth scroll to " + lastItemInList);
-                }
-                if (lastItemTooTall) {
-                    // If the height of the last item is taller than the whole height of the list,
-                    // we need to scroll that item so that its top is negative or above the top of
-                    // the list. That way, the bottom of the last item will be exposed above the
-                    // keyboard. We should use smoothScrollToPositionFromTop here, but it doesn't
-                    // seem to work -- the list ends up scrolling to a random position.
-                    mMsgListView.setSelectionFromTop(lastItemInList,
-                            listHeight - lastVisibleItemHeight);
-                } else {
-                    mMsgListView.smoothScrollToPosition(lastItemInList);
-                }
-                mLastSmoothScrollPosition = lastItemInList;
-            }
-        }
-    }
-
-    private final class BackgroundQueryHandler extends ConversationQueryHandler {
-        public BackgroundQueryHandler(ContentResolver contentResolver) {
-            super(contentResolver);
-        }
-
-        @Override
-        protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
-            /// M: @{
-            MmsLog.d(TAG, "onQueryComplete, token=" + token + "activity="
-                    + ComposeMessageActivity.this);
-            /// @}
-            switch(token) {
-                case MESSAGE_LIST_QUERY_TOKEN:
-                    /// @}
-                    if (cursor == null) {
-                        MmsLog.w(TAG, "onQueryComplete, cursor is null.");
-                        return;
-                    }
-                    /// M: If adapter or listener has been cleared, just close this cursor@{
-                    if (mMsgListAdapter == null) {
-                        MmsLog.w(TAG, "onQueryComplete, mMsgListAdapter is null.");
-                        cursor.close();
-                        return;
-                    }
-                    if (mMsgListAdapter.getOnDataSetChangedListener() == null) {
-                        MmsLog.d(TAG, "OnDataSetChangedListener is cleared");
-                        cursor.close();
-                        return;
-                    }
-                    /// @}
-                    if (isRecipientsEditorVisible()) {
-                        MmsLog.d(TAG, "RecipientEditor visible, it means no messagelistItem!");
-                        return;
-                    }
-                    // check consistency between the query result and 'mConversation'
-                    long tid = (Long) cookie;
-
-                    if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                        log("##### onQueryComplete: msg history result for threadId " + tid);
-                    }
-                    if (tid != mConversation.getThreadId()) {
-                        log("onQueryComplete: msg history query result is for threadId " +
-                                tid + ", but mConversation has threadId " +
-                                mConversation.getThreadId() + " starting a new query");
-                        if (cursor != null) {
-                            cursor.close();
-                        }
-                        startMsgListQuery();
-                        return;
-                    }
-
-                    // check consistency b/t mConversation & mWorkingMessage.mConversation
-                    ComposeMessageActivity.this.sanityCheckConversation();
-
-                    int newSelectionPos = -1;
-                    long targetMsgId = getIntent().getLongExtra("select_id", -1);
-                    String targetMsgType = getIntent().getStringExtra("msg_type");
-                    if (targetMsgId != -1) {
-                      if (cursor != null) {
-                        cursor.moveToPosition(-1);
-                        while (cursor.moveToNext()) {
-                            long msgId = cursor.getLong(COLUMN_ID);
-                            String messageType = cursor.getString(COLUMN_MSG_TYPE);
-                            if (msgId == targetMsgId && messageType.equals(targetMsgType)) {
-                                newSelectionPos = cursor.getPosition();
-                                getIntent().putExtra("select_id", -1);
-                                break;
-                            }
-                          }
-                        }
-                    } else if (mSavedScrollPosition != -1) {
-                        // mSavedScrollPosition is set when this activity pauses. If equals maxint,
-                        // it means the message list was scrolled to the end. Meanwhile, messages
-                        // could have been received. When the activity resumes and we were
-                        // previously scrolled to the end, jump the list so any new messages are
-                        // visible.
-                        if (mSavedScrollPosition == Integer.MAX_VALUE) {
-                            int cnt = mMsgListAdapter.getCount();
-                            if (cnt > 0) {
-                                // Have to wait until the adapter is loaded before jumping to
-                                // the end.
-                                newSelectionPos = cnt - 1;
-                                mSavedScrollPosition = -1;
-                            }
-                        } else {
-                            // remember the saved scroll position before the activity is paused.
-                            // reset it after the message list query is done
-                            newSelectionPos = mSavedScrollPosition;
-                            mSavedScrollPosition = -1;
-                        }
-                    }
-                    /// M: Code analyze 047, Extra uri from message body and get number from uri.
-                    /// Then use this number to update contact cache. @{
-                    if (mNeedUpdateContactForMessageContent) {
-                        updateContactCache(cursor);
-                        mNeedUpdateContactForMessageContent = false;
-                    }
-                    /// @}
-
-                    mMsgListAdapter.changeCursor(cursor);
-
-                    if (newSelectionPos != -1) {
-                        /// M: remove bug ALPS00404266 patch, keep item top @{
-                        mMsgListView.setSelection(newSelectionPos);     // jump the list to the pos
-                        //View child = mMsgListView.getChildAt(newSelectionPos);
-                        //int top = 0;
-                        //if (child != null) {
-                        //    top = child.getTop();
-                        //}
-                       // mMsgListView.setSelectionFromTop(newSelectionPos, top);
-                        /// @}
-                    } else {
-                        /// M: google jb.mr1 patch, Conversation should scroll to the bottom
-                        /// when incoming received @{
-                        int count = mMsgListAdapter.getCount();
-                        long lastMsgId = 0;
-                        if (cursor != null && count > 0) {
-                            cursor.moveToLast();
-                            lastMsgId = cursor.getLong(COLUMN_ID);
-                        }
-                        // mScrollOnSend is set when we send a message. We always want to scroll
-                        // the message list to the end when we send a message, but have to wait
-                        // until the DB has changed. We also want to scroll the list when a
-                        // new message has arrived.
-                        smoothScrollToEnd(mScrollOnSend || lastMsgId != mLastMessageId, 0);
-                        mLastMessageId = lastMsgId;
-                        /// @}
-                        mScrollOnSend = false;
-                    }
-                    // Adjust the conversation's message count to match reality. The
-                    // conversation's message count is eventually used in
-                    // WorkingMessage.clearConversation to determine whether to delete
-                    // the conversation or not.
-                    if (mMsgListAdapter.getCount() == 0 && mWaitingForSendMessage) {
-                        mConversation.setMessageCount(1);
-                    } else {
-                        mConversation.setMessageCount(mMsgListAdapter.getCount());
-                    }
-                    updateThreadIdIfRunning();
-                    cursor.moveToPosition(-1);
-                    while (cursor.moveToNext()) {
-                        int read = cursor.getInt(MessageListAdapter.COLUMN_MMS_READ);
-                        read += cursor.getInt(MessageListAdapter.COLUMN_SMS_READ);
-                        if (read == 0) {
-                            mConversation.setHasUnreadMessages(true);
-                            break;
-                        }
-                    }
-                    MmsLog.d(TAG, "onQueryComplete(): Conversation.ThreadId="
-                            + mConversation.getThreadId()
-                            + ", MessageCount=" + mConversation.getMessageCount());
-
-                    // Once we have completed the query for the message history, if
-                    // there is nothing in the cursor and we are not composing a new
-                    // message, we must be editing a draft in a new conversation (unless
-                    // mSentMessage is true).
-                    // Show the recipients editor to give the user a chance to add
-                    // more people before the conversation begins.
-                    if (cursor != null && cursor.getCount() == 0
-                            && !isRecipientsEditorVisible() && !mSentMessage) {
-                        /// M: fix bug ALPS01098902, avoding checkObsoleteThreadId in this case
-                        if (mSubSelectDialog != null && mSubSelectDialog.isShowing()
-                                && mOldThreadID > 0 && mCutRecipients != null) {
-                            mIsSameConv = false;
-                        }
-                        initRecipientsEditor(null);
-                    }
-
-                    // FIXME: freshing layout changes the focused view to an unexpected
-                    // one, set it back to TextEditor forcely.
-                    if (mSubjectTextEditor == null || (mSubjectTextEditor != null
-                            && !mSubjectTextEditor.isFocused())) {
-                        mTextEditor.requestFocus();
-                    }
-
-                    invalidateOptionsMenu();    // some menu items depend on the adapter's count
-                    if (!mIsActivityStoped) {
-                        mConversation.blockMarkAsRead(false);
-                        mConversation.markAsRead();
-                    }
-                    return;
-
-                case MESSAGE_LIST_QUERY_AFTER_DELETE_TOKEN:
-                    // check consistency between the query result and 'mConversation'
-                    tid = (Long) cookie;
-
-                    if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                        log("## onQueryComplete (after delete): msg history result for threadId "
-                                + tid);
-                    }
-                    if (cursor == null) {
-                        return;
-                    }
-                    if (tid > 0 && cursor.getCount() == 0) {
-                        // We just deleted the last message and the thread will get deleted
-                        // by a trigger in the database. Clear the threadId so next time we
-                        // need the threadId a new thread will get created.
-                        log("##### MESSAGE_LIST_QUERY_AFTER_DELETE_TOKEN clearing thread id: "
-                                + tid);
-                        Conversation conv = Conversation.get(getApplicationContext(), tid,
-                                false);
-                        if (conv != null) {
-                            conv.clearThreadId();
-                            conv.setDraftState(false);
-                        }
-                    }
-                    cursor.close();
-                    break;
-                default:
-                    MmsLog.w(TAG, "unknown token.");
-                    break;
-            }
-        }
-
-        @Override
-        protected void onDeleteComplete(int token, Object cookie, int result) {
-            super.onDeleteComplete(token, cookie, result);
-            /// M: fix bug ALPS00351620; for requery searchactivity.
-            SearchActivity.setNeedRequery();
-            switch(token) {
-                case ConversationList.DELETE_CONVERSATION_TOKEN:
-                    /// M: @{
-                    /*
-                    mConversation.setMessageCount(0);
-                    // fall through
-                    */
-                    try {
-                        if (TelephonyManagerEx.getDefault().isTestIccCard(0)) {
-                            MmsLog.d(TAG, "All threads has been deleted, send notification..");
-                            SmsManager
-                                .getSmsManagerForSubscriptionId(
-                                   SmsReceiverService.sLastIncomingSmsSubId)
-                                       .getDefault().setSmsMemoryStatus(true);
-                        }
-                    } catch (Exception ex) {
-                        MmsLog.e(TAG, " " + ex.getMessage());
-                    }
-                    // Update the notification for new messages since they
-                    // may be deleted.
-                    MessagingNotification.nonBlockingUpdateNewMessageIndicator(
-                            ComposeMessageActivity.this, MessagingNotification.THREAD_NONE, false);
-                    // Update the notification for failed messages since they
-                    // may be deleted.
-                    updateSendFailedNotification();
-                    MessagingNotification.updateDownloadFailedNotification(
-                            ComposeMessageActivity.this);
-                    break;
-                    /// @}
-                case DELETE_MESSAGE_TOKEN:
-                    /// M: google jb.mr1 patch, Conversation should scroll to the bottom
-                    /// when incoming received @{
-                    if (cookie instanceof Boolean && ((Boolean) cookie).booleanValue()) {
-                        // If we just deleted the last message, reset the saved id.
-                        mLastMessageId = 0;
-                    }
-                    /// @}
-                    /// M: Code analyze 027,Add for deleting one message.@{
-                    MmsLog.d(TAG, "onDeleteComplete(): before update mConversation, ThreadId = "
-                            + mConversation.getThreadId());
-                    ContactList recipients = getRecipients();
-                    mConversation = Conversation.upDateThread(getApplicationContext(),
-                            mConversation.getThreadId(), false);
-                    mThreadCountManager.isFull(mThreadId, ComposeMessageActivity.this,
-                            ThreadCountManager.OP_FLAG_DECREASE);
-                    /// @}
-                    // Update the notification for new messages since they
-                    // may be deleted.
-                    MessagingNotification.nonBlockingUpdateNewMessageIndicator(
-                            ComposeMessageActivity.this, MessagingNotification.THREAD_NONE, false);
-                    // Update the notification for failed messages since they
-                    // may be deleted.
-                    updateSendFailedNotification();
-                    /// M: Code analyze 027,Add for deleting one message.@{
-                    MessagingNotification
-                        .updateDownloadFailedNotification(ComposeMessageActivity.this);
-                    MmsLog.d(TAG, "onDeleteComplete(): MessageCount = "
-                            + mConversation.getMessageCount() +
-                            ", ThreadId = " + mConversation.getThreadId());
-                    if (mIpCompose.onDeleteComplete(token)) {
-                        break;
-                    }
-                    if (mConversation.getMessageCount() <= 0
-                            || mConversation.getThreadId() <= 0L) {
-                        mMsgListAdapter.changeCursor(null);
-                        if (needSaveDraft() && (recipients != null)) {
-                            if (!isRecipientsEditorVisible()) {
-                                makeDraftEditable(recipients);
-                            }
-                        } else {
-                            /// M: fix bug for ConversationList select all performance,
-                            /// update selected threads array.@{
-                            ConversationListAdapter.removeSelectedState(mSelectedThreadId);
-                            /// @
-                            finish();
-                        }
-                    }
-                    /// @}
-                    break;
-            }
-            // If we're deleting the whole conversation, throw away
-            // our current working message and bail.
-            if (token == ConversationList.DELETE_CONVERSATION_TOKEN) {
-                ContactList recipients = mConversation.getRecipients();
-                mWorkingMessage.discard();
-
-                // Remove any recipients referenced by this single thread from the
-                // contacts cache. It's possible for two or more threads to reference
-                // the same contact. That's ok if we remove it. We'll recreate that contact
-                // when we init all Conversations below.
-                if (recipients != null) {
-                    for (Contact contact : recipients) {
-                        contact.removeFromCache();
-                    }
-                }
-
-                // Make sure the conversation cache reflects the threads in the DB.
-                Conversation.init(getApplicationContext());
-                finish();
-            } else if (token == DELETE_MESSAGE_TOKEN) {
-                /// M: Code analyze 027,Add for deleting one message.@{
-                // Check to see if we just deleted the last message
-                startMsgListQuery(MESSAGE_LIST_QUERY_AFTER_DELETE_TOKEN, 0);
-                /// @}
-            }
-        }
-    }
-
-    @Override
-    public void onUpdate(final Contact updated) {
-        /** M:
-         * In a bad case ANR will happen. When many contact is update, onUpdate will be
-         * invoked very frequently,and the code here will run many times. In mRecipientsEditor,
-         * if there are 100[can be more?] recipients,
-         * mRecipientsEditor.constructContactsFromInput is time cost.
-         * ANR may happen if process many this message consequently.
-         * so reduce the frequence, and touch event message have more changces to process.
-         */
-        if (isRecipientsEditorVisible()) {
-            return;
-        }
-        log("[CMA] onUpdate contact updated: " + updated);
-        if (mPrevRunnable != null) {
-            mMessageListItemHandler.removeCallbacks(mPrevRunnable);
-        }
-        mPrevRunnable = new Runnable() {
-            public void run() {
-                ContactList recipients = getRecipients();
-                if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                    MmsLog.vpi(TAG, "[CMA] onUpdate contact updated: " + updated);
-                    MmsLog.vpi(TAG, "[CMA] onUpdate recipients: " + recipients);
-                }
-                updateTitle(recipients);
-                /// M: Contact is modified, update the menu icon of contact.
-                invalidateOptionsMenu();
-
-                // The contact information for one (or more) of the recipients has changed.
-                // Rebuild the message list so each MessageItem will get the last contact info.
-                ComposeMessageActivity.this.mMsgListAdapter.notifyDataSetChanged();
-            }
-        };
-        /// M: Using an existing handler for the post, rather than conjuring up a new one.
-        mMessageListItemHandler.postDelayed(mPrevRunnable, UPDATE_DELAY);
-    }
-
-    private void addRecipientsListeners() {
-        Contact.addListener(this);
-    }
-
-    private void removeRecipientsListeners() {
-        Contact.removeListener(this);
-    }
-
-    public static Intent createIntent(Context context, long threadId) {
-        Intent intent = new Intent(context, ComposeMessageActivity.class);
-
-        if (threadId > 0) {
-            intent.setData(Conversation.getUri(threadId));
-        }
-
-        return intent;
-    }
-
-    private String getBody(Uri uri) {
-        if (uri == null) {
-            return null;
-        }
-        String urlStr = uri.getSchemeSpecificPart();
-        if (!urlStr.contains("?")) {
-            return null;
-        }
-        urlStr = urlStr.substring(urlStr.indexOf('?') + 1);
-        String[] params = urlStr.split("&");
-        for (String p : params) {
-            if (p.startsWith("body=")) {
-                try {
-                    return URLDecoder.decode(p.substring(5), "UTF-8");
-                } catch (UnsupportedEncodingException e) { }
-            }
-        }
-        return null;
-    }
-
-    private void updateThreadIdIfRunning() {
-        if (mIsRunning && mConversation != null) {
-            if (mConversation.getMessageCount() > 0) {
-                MessagingNotification.setCurrentlyDisplayedThreadId(mConversation.getThreadId());
-            } else {
-                MessagingNotification
-                    .setCurrentlyDisplayedThreadId(MessagingNotification.THREAD_NONE);
-            }
-        }
-        // If we're not running, but resume later, the current thread ID will be set in onResume()
-    }
-
-     //////////////////////////////////////////////////////////////////////////////////////
-     // MTK add
-
-     /// M: Code analyze 012, add for multi-delete @{
-     public static final int REQUEST_CODE_FOR_MULTIDELETE  = 110;
-     /// @}
-
-     /// M: Code analyze 025, Add video or audio attachment and check the attachment size.@{
-     public static final int MIN_SIZE_FOR_CAPTURE_VIDEO    = 1024 * 10;  // 10K
-     public static final int MIN_SIZE_FOR_RECORD_AUDIO = 1024 * 5; // 5K
-     // M: fix bug ALPS00354728
-     private boolean mAppendAttachmentSign = true;
-     /// @}
-
-     /// M: Code analyze 014, Add quick text. @{
-     private static final int MENU_ADD_QUICK_TEXT         = 8;
-     private AlertDialog mQuickTextDialog;
-     /// @}
-
-     /// M: Code analyze 015, Add text vcard. @{
-     private static final int MENU_ADD_TEXT_VCARD         = 9;
-     public static final int REQUEST_CODE_TEXT_VCARD       = 22;
-     /// @}
-
-     private static final int MENU_CALL_RECIPIENT_BY_VT  = 10;
-     /// M: Code analyze 016, Add for select text copy. @{
-     private static final int MENU_SELECT_TEXT             = 36;
-     /// @}
-
-     private static final String SIGN_CREATE_AFTER_KILL_BY_SYSTEM = "ForCreateAfterKilledBySystem";
-
-     /// M: Code analyze 017, Handle forwarded message.(see:forwardMessage())@{
-     public static final String SMS_ADDRESS = "sms_address";
-     public static final String SMS_BODY = "sms_body";
-     public static final String FORWARD_MESSAGE = "forwarded_message";
-     /// @}
-
-     // State variable indicating an image is being compressed, which may take a while.
-     private boolean mCompressingImage = false;
-     private int mToastCountForResizeImage = 0; // For indicate whether show toast message for
-                        //resize image or not. If mToastCountForResizeImage equals 0, show toast.
-     /// M: Code analyze 010, Support dirtory mode. @{
-     private int mHomeBox = 0;
-     /// @}
-     private Toast mExceedMessageSizeToast = null;
-
-     /// M: Code analyze 009,Show attachment dialog . @{
-     private SoloAlertDialog mSoloAlertDialog;
-     /// @}
-
-     /// M: Code analyze 047, Extra uri from message body and get number from uri.
-     /// Then use this number to update contact cache. @{
-     private boolean mNeedUpdateContactForMessageContent = true;
-     /// @}
-
-     private boolean  mDrawBottomPanel = false;
-
-     /// M: the member is only used by onUpdate
-     private static final long UPDATE_DELAY = 100L;
-
-     /// M: Code analyze 011, use another method for performance
-     ///(use this to limit the contact query count) @{
-     private static final int UPDATE_LIMIT_LANDSCAPE = 20;
-     private static final int UPDATE_LIMIT_PORTRAIT = 20;
-     /// @}
-
-     ///@ M:fix bug ALPS00871320 tablet has wide space to show more contact
-     private static final int UPDATE_LIMIT_LANDSCAPE_TABLET = 30;
-     private static final int UPDATE_LIMIT_PORTRAIT_TABLET = 30;
-
-     private int getLimitedContact() {
-        boolean isPortrait =
-            getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;
-        int updateLimit = 0;
-
-        boolean isTablet = getResources().getBoolean(R.bool.isTablet);
-        if (isPortrait) {
-            updateLimit = isTablet ? UPDATE_LIMIT_PORTRAIT_TABLET
-                    : UPDATE_LIMIT_PORTRAIT;
-        } else {
-            updateLimit = isTablet ? UPDATE_LIMIT_LANDSCAPE_TABLET
-                    : UPDATE_LIMIT_LANDSCAPE;
-        }
-        return updateLimit;
-     }
-
-     ///@
-     private Runnable mPrevRunnable;
-     private boolean mNeedSaveAsMms = false;
-
-     /// M: Code analyze 038, If the user is editing slideshow now.
-     /// Do not allow the activity finish but return directly when back key is entered. @{
-     private boolean mIsEditingSlideshow = false;
-     /// @}
-
-     /// M: Code analyze 026, If the two clicks are too close. @{
-     private long mAttachClickTime = -1;
-     private long mEditClickTime = -1;
-     /// @}
-
-     // mAudioUri will look like this: content://media/external/images/media
-     private static final String mAudioUri = Audio.Media.getContentUri("external").toString();
-
-     /// M: Code analyze 050, Add scroll listener and touch listener for MessageListView.@{
-     private static int CHANGE_SCROLL_LISTENER_MIN_CURSOR_COUNT = 100;
-     private MyScrollListener mScrollListener = new MyScrollListener(
-             CHANGE_SCROLL_LISTENER_MIN_CURSOR_COUNT, "MessageList_Scroll_Tread");
-     /// @}
-
-     /// M: Code analyze 018, Add ringtone for sound attachment.  @{
-     public static final int REQUEST_CODE_ATTACH_RINGTONE  = 20;
-     /// @}
-
-     /// M: Code analyze 019, Add vcard attachment.  @{
-     public static final int REQUEST_CODE_ATTACH_VCARD       = 21;
-     /// @}
-
-     /// M: Code analyze 020, Add vcalendar attachment.  @{
-     public static final int REQUEST_CODE_ATTACH_VCALENDAR = 25;
-     /// @}
-
-     /// M: Code analyze 021, Copy all valid parts of the attachment(pdu) to SD card.
-     /// This opeartor will be removed to a separate activity.    @{
-     public static final int REQUEST_CODE_MULTI_SAVE       = 23;
-     /// @}
-
-     /// M: Code analyze 022, Add bookmark. @{
-     private static final int MENU_ADD_TO_BOOKMARK         = 35;
-     private ArrayList<String> mURLs = new ArrayList<String>();
-     /// @}
-
-     /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-     private static final int MENU_SAVE_MESSAGE_TO_SUB     = 32;
-     private static final int SUB_SELECT_FOR_SEND_MSG                     = 1;
-     private static final int SUB_SELECT_FOR_SAVE_MSG_TO_SUB             = 2;
-     private static final int MSG_QUIT_SAVE_MESSAGE_THREAD                 = 100;
-     private static final int MSG_SAVE_MESSAGE_TO_SUB                     = 102;
-     private static final int MSG_SAVE_MESSAGE_TO_SUB_AFTER_SELECT_SUB     = 104;
-     private static final int MSG_SAVE_MESSAGE_TO_SUB_SUCCEED             = 106;
-     private static final int MSG_SAVE_MESSAGE_TO_SUB_FAILED_GENERIC     = 108;
-     private static final int MSG_SAVE_MESSAGE_TO_SUB_FAILED_SUB_FULL     = 110;
-
-     private static final String SELECT_TYPE    = "Select_type";
-     private int mSubCount; //The count of current sub cards.  0/1/2
-    private List<SubscriptionInfo> mSubInfoList;
-     private Handler mSaveMsgHandler = null;
-     private Thread mSaveMsgThread = null;
-     private AlertDialog mSubSelectDialog;
-     private int mMessageSubId;
-    private int mAssociatedSubId;
-    private int mSelectedSubId;
-     /// @}
-
-     /// M: Code analyze 006, Control Sub indicator on status bar. @{
-     private StatusBarManager mStatusBarManager;
-     private ComponentName mComponentName;
-     /// @}
-
-     /// M: Code analyze 056,Now,the sms recipient limit is different from mms.
-     /// We can set limit for sms or mms individually. @{
-     private static final int RECIPIENTS_LIMIT_FOR_SMS     = MmsConfig.getSmsRecipientLimit();
-     /// @}
-     private boolean mIsTooManyRecipients;     // Whether the recipients are too many
-
-     /// M: Code analyze 046, Whether the recipientedit control has been initialized. @{
-     private boolean isInitRecipientsEditor = true; // true, init Recip Editor and add recipient;
-                                                   // false, init Recip Editor, but recipient
-     /// @}
-
-     private boolean mWaitingForSendMessage;
-
-     /// M: Code analyze 023, Delete the char value of '\r' . @{
-     private static final String STR_RN = "\\r\\n"; // for "\r\n"
-     private static final String STR_CN = "\n"; // the char value of '\n'
-     /// @}
-     public static boolean mDestroy = false;
-
-     /// M: Code analyze 027,Add for deleting one message.@{
-     private ThreadCountManager mThreadCountManager = ThreadCountManager.getInstance();
-     private Long mThreadId = -1L;
-     /// @}
-
-     /// M: Code analyze 002,  If a new ComposeMessageActivity is created, kill old one
-     private static WeakReference<ComposeMessageActivity> sCompose = null;
-     /// @}
-
-     private static String sTextEditorText;
-     private long mLastThreadIdFromNotification;
-
-     private boolean mSendButtonCanResponse = true;    // can click send button
-     private static final long RESUME_BUTTON_INTERVAL = 1000;
-     private static final int MSG_RESUME_SEND_BUTTON  = 112;
-
-     /// M: Code analyze 024, If the click operator can be responsed. @{
-     boolean mClickCanResponse = true;           // can click button or some view items
-     /// @}
-
-     /// M: Code analyze 013, Get contacts from Contact app . @{
-     // handle NullPointerException in onActivityResult() for pick up recipients
-     private boolean mIsRecipientHasIntentNotHandle = false;
-     private Intent mIntent = null;
-     private boolean misPickContatct = false;
-     /// @}
-
-     /// M: Code analyze 004, Set max height for text editor. @{
-     private HeightChangedLinearLayout mHeightChangedLinearLayout;
-     private static final int mReferencedTextEditorTwoLinesHeight = 65;
-     private static final int mReferencedTextEditorThreeLinesHeight = 110;
-     private static final int mReferencedTextEditorFourLinesHeight    = 140;
-     private static final int mReferencedTextEditorSevenLinesHeight = 224;
-     private static final int mReferencedAttachmentEditorHeight     = 266;
-     private static final int mReferencedMaxHeight                    = 800;
-     private int mCurrentMaxHeight                                    = 800;
-     /// @}
-
-     /// M: Code analyze 042, If you discard the draft message manually.@{
-     private boolean mHasDiscardWorkingMessage = false;
-     /// @}
-
-    /// M: fix bug ALPS00572383, delay show "suggested" on the SelectSubDialog @{
-    private final HashMap<Integer, Integer> mHashSub = new HashMap<Integer, Integer>();
-    private static final int MSG_SELECT_SUB_DIALOG_SHOW = 500;
-    private int mAssociatedSubQueryDone;
-    private int mSelectSubType;
-    /// @}
-
-    private static final int MSG_DISMISS_CONTACT_PICK_DIALOG = 9009;
-    /// M:
-    private Handler mUiHandler = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-
-            if (mOpComposeExt.handleUiMessage(msg, mSubCount, mSelectedSubId)) {
-                return;
-            }
-
-            switch (msg.what) {
-            case MSG_SAVE_MESSAGE_TO_SUB_SUCCEED:
-                Toast.makeText(ComposeMessageActivity.this,
-                        R.string.save_message_to_sim_successful, Toast.LENGTH_SHORT).show();
-                // M: fix for bug ALPS01468873
-                //sendBroadcast(new Intent(ManageSimMessages.ACTION_NOTIFY_SIMMESSAGE_UPDATE));
-                break;
-
-            case MSG_SAVE_MESSAGE_TO_SUB_FAILED_GENERIC:
-                Toast.makeText(ComposeMessageActivity.this,
-                        R.string.save_message_to_sim_unsuccessful, Toast.LENGTH_SHORT).show();
-                break;
-
-            case MSG_SAVE_MESSAGE_TO_SUB_FAILED_SUB_FULL:
-                int slotId = -1;
-                if (mSubCount == 1) {
-                    slotId = mSubInfoList.get(0).getSimSlotIndex();
-                } else {
-                    if (mSelectedSubId > 0) {
-                        SubscriptionInfo subInfo = SubscriptionManager.from(
-                                MmsApp.getApplication()).getActiveSubscriptionInfo(mSelectedSubId);
-                        if (subInfo != null) {
-                            slotId = subInfo.getSimSlotIndex();
-                        }
-                    }
-                }
-                Toast.makeText(ComposeMessageActivity.this,
-                        getString(R.string.save_message_to_sim_unsuccessful) + ". "
-                        + (getString(R.string.sim_full_title)), Toast.LENGTH_SHORT).show();
-                /// @}
-                break;
-            /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-            case MSG_SAVE_MESSAGE_TO_SUB: //multi sub cards
-                String type = (String) msg.obj;
-                long msgId = msg.arg1;
-                saveMessageToSub(type, msgId);
-                break;
-            /// @}
-            case MSG_RESUME_SEND_BUTTON:
-                mSendButtonCanResponse = true;
-                break;
-            case MSG_SELECT_SUB_DIALOG_SHOW:
-                /// M: fix bug ALPS00572383, delay show "suggested" on the SelectSimDialog @{
-                mUiHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        int position = -1;
-                        if (mHashSub != null && mSelectSubType == SUB_SELECT_FOR_SEND_MSG) {
-                            for (int i = 0; i < mHashSub.size(); i++) {
-                                if (mHashSub != null
-                                        && mHashSub.get(i) == mAssociatedSubQueryDone) {
-                                    position = i;
-                                    break;
-                                }
-                            }
-
-                            if (position != -1 && mSubSelectDialog != null
-                                                        && mSubSelectDialog.isShowing()) {
-                                ListView listView = mSubSelectDialog.getListView();
-                                if (listView != null) {
-                                    View view = listView.getChildAt(position);
-                                    if (view != null) {
-                                       TextView textView =
-                                           (TextView) view.findViewById(R.id.sim_suggested);
-                                       if (textView != null) {
-                                           textView.setText(getString(R.string.suggested));
-                                       }
-                                    }
-                                }
-                                mHashSub.clear();
-                            }
-                        }
-                    }
-                });
-                break;
-                /// @}
-            case MSG_DISMISS_CONTACT_PICK_DIALOG:
-                mUiHandler.removeCallbacks(mContactPickRunnable);
-                if (mContactPickDialog != null && mContactPickDialog.isShowing()) {
-                    mContactPickDialog.dismiss();
-                }
-                mContactPickDialog = null;
-                break;
-            default:
-                MmsLog.w(TAG, "inUIHandler msg unhandled.");
-                break;
-            }
-        }
-    };
-
-    /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-    private final class SaveMsgThread extends Thread {
-        private String msgType = null;
-        private long msgId = 0;
-        public SaveMsgThread(String type, long id) {
-            msgType = type;
-            msgId = id;
-        }
-        public void run() {
-            Looper.prepare();
-            if (null != Looper.myLooper()) {
-                mSaveMsgHandler = new SaveMsgHandler(Looper.myLooper());
-            }
-            Message msg = mSaveMsgHandler.obtainMessage(MSG_SAVE_MESSAGE_TO_SUB);
-            msg.arg1 = (int) msgId;
-            msg.obj = msgType;
-            if (mSubCount > 1) { // multi sub cards
-                mUiHandler.sendMessage(msg);
-            } else {
-                mSaveMsgHandler.sendMessage(msg); //single sub card
-            }
-            Looper.loop();
-        }
-    }
-
-    private final class SaveMsgHandler extends Handler {
-        public SaveMsgHandler(Looper looper) {
-            super(looper);
-        }
-
-        @Override
-        public void handleMessage(Message msg) {
-            switch (msg.what) {
-                case MSG_QUIT_SAVE_MESSAGE_THREAD: {
-                    MmsLog.i(MmsApp.TXN_TAG, "exit save message thread");
-                    getLooper().quit();
-                    break;
-                }
-
-                case MSG_SAVE_MESSAGE_TO_SUB: { //single sub card
-                    String type = (String) msg.obj;
-                    long msgId = msg.arg1;
-                    //saveMessageTo(type, msgId);
-                    getMessageAndSaveToSub(type, msgId);
-                    break;
-                }
-
-                case MSG_SAVE_MESSAGE_TO_SUB_AFTER_SELECT_SUB: {
-                    Intent it = (Intent) msg.obj;
-                    getMessageAndSaveToSub(it);
-                    break;
-                }
-
-                default:
-                    break;
-            }
-        }
-    }
-
-    private void saveMessageToSub(String msgType, long msgId) { //multi sub cards exist
-        MmsLog.d(MmsApp.TXN_TAG, "save message to sub, message type:" + msgType
-                + "; message id:" + msgId + "; sub count:" + mSubCount);
-
-        Intent intent = new Intent();
-        intent.putExtra("message_type", msgType);
-        intent.putExtra("message_id", msgId);
-        intent.putExtra(SELECT_TYPE, SUB_SELECT_FOR_SAVE_MSG_TO_SUB);
-        mSelectSubType = SUB_SELECT_FOR_SAVE_MSG_TO_SUB;
-        showSubSelectedDialog(intent);
-    }
-
-    private void getMessageAndSaveToSub(Intent intent) {
-        MmsLog.i(MmsApp.TXN_TAG,
-                "get message and save to sub, selected sub id = " + mSelectedSubId);
-        String msgType = intent.getStringExtra("message_type");
-        long msgId = intent.getLongExtra("message_id", 0);
-        if (msgType == null) {
-            //mSaveMsgHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SIM_FAILED_GENERIC);
-            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SUB_FAILED_GENERIC);
-            return;
-        }
-        getMessageAndSaveToSub(msgType, msgId);
-    }
-
-    private void getMessageAndSaveToSub(String msgType, long msgId) {
-        int result = 0;
-        ///M: ALPS00726802, get the orignal position when long click this item
-        Cursor cursor = mMsgListAdapter.getCursor();
-        if (mClickedItemPosition >= 0 && mClickedItemPosition < cursor.getCount()) {
-            cursor.moveToPosition(mClickedItemPosition);
-        }
-        MessageItem msgItem = getMessageItem(msgType, msgId, true);
-        if (msgItem == null || msgItem.mBody == null) {
-            MmsLog.e(MmsApp.TXN_TAG, "getMessageAndSaveToSub, can not get Message Item.");
-            return;
-        }
-
-        String scAddress = null;
-
-        ArrayList<String> messages = null;
-        messages = SmsManager.getDefault().divideMessage(msgItem.mBody);
-
-        int smsStatus = 0;
-        long timeStamp = 0;
-        if (msgItem.isReceivedMessage()) {
-            smsStatus = SmsManager.STATUS_ON_ICC_READ;
-            timeStamp = msgItem.mSmsDate;
-            scAddress = msgItem.getServiceCenter();
-        } else if (msgItem.isSentMessage()) {
-            smsStatus = SmsManager.STATUS_ON_ICC_SENT;
-        } else if (msgItem.isFailedMessage()) {
-            smsStatus = SmsManager.STATUS_ON_ICC_UNSENT;
-        } else {
-            MmsLog.w(MmsApp.TXN_TAG, "Unknown sms status");
-        }
-        int subId = -1;
-        if (mSubCount == 1) {
-            mSelectedSubId = (int) mSubInfoList.get(0).getSubscriptionId();
-        }
-        subId = mSelectedSubId;
-        if (scAddress == null) {
-                scAddress = TelephonyManagerEx.getDefault().getScAddress(subId);
-        }
-
-        MmsLog.dpi(MmsApp.TXN_TAG, "\t subId\t= " + subId
-                + "\t scAddress\t= " + scAddress
-                + "\t Address\t= " + msgItem.mAddress
-                + "\t msgBody\t= " + msgItem.mBody
-                + "\t smsStatus\t= " + smsStatus
-                + "\t timeStamp\t= " + timeStamp
-                + "\t messages size\t= " + messages.size());
-
-        /// M: add for ALPS01844319, check SIM whether locked first, return fail if locked. @{
-        TelephonyManager telephony =
-            (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
-        int simState = telephony.getSimState(SubscriptionManager.getSlotId(subId));
-        MmsLog.d(MmsApp.TXN_TAG, "\t simState \t= " + simState);
-        // set result as fail if SIM locked.
-        if (simState == TelephonyManager.SIM_STATE_PIN_REQUIRED) {
-            result = SmsManager.RESULT_ERROR_GENERIC_FAILURE;
-        } else {
-            result = SmsManager.getSmsManagerForSubscriptionId(subId).copyTextMessageToIccCard(
-                    scAddress, msgItem.mAddress, messages, smsStatus, timeStamp);
-        }
-        /// @}
-        MmsLog.d(MmsApp.TXN_TAG, "\t result\t= " + result);
-
-        result = mOpComposeExt.getMessageAndSaveToSub(
-                mConversation.getRecipients().getNumbers(),
-                scAddress, messages, smsStatus, timeStamp, subId, result);
-
-        if (result == SmsManager.RESULT_ERROR_SUCCESS) {
-            MmsLog.d(MmsApp.TXN_TAG, "save message to sub succeed.");
-            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SUB_SUCCEED);
-        } else if (result == SmsManager.RESULT_ERROR_SIM_MEM_FULL) {
-            MmsLog.w(MmsApp.TXN_TAG, "save message to sub failed: sub memory full.");
-            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SUB_FAILED_SUB_FULL);
-        } else {
-            MmsLog.w(MmsApp.TXN_TAG, "save message to sub failed: generic error.");
-            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SUB_FAILED_GENERIC);
-        }
-        mSaveMsgHandler.sendEmptyMessageDelayed(MSG_QUIT_SAVE_MESSAGE_THREAD, 5000);
-    }
-
-    Runnable mGetSubInfoRunnable = new Runnable() {
-        public void run() {
-            getSubInfoList();
-            mOpComposeExt.getSubInfoRunnable(mWorkingMessage.hasSlideshow());
-
-        }
-    };
-
-     private void getSubInfoList() {
-        mSubInfoList = SubscriptionManager.from(this).getActiveSubscriptionInfoList();
-        mSubCount = (mSubInfoList != null && !mSubInfoList.isEmpty()) ? mSubInfoList.size() : 0;
-        MmsLog.i(TAG, "ComposeMessageActivity.getSubInfoList(): mSubCount = " + mSubCount);
-    }
-
-     private void subSelection() {
-        if (mIpCompose.subSelection()) {
-            return;
-        }
-        int selectedSubId = mOpComposeExt.subSelection();
-        if (selectedSubId != 0) {
-            mSelectedSubId = selectedSubId;
-            return;
-        }
-        if (mSubCount == 1) {
-            mSelectedSubId = (int) mSubInfoList.get(0).getSubscriptionId();
-            confirmSendMessageIfNeeded();
-        } else if (mSubCount > 1) { // multi sub cards exist.
-            Intent intent = new Intent();
-            mSelectSubType = SUB_SELECT_FOR_SEND_MSG;
-            intent.putExtra(SELECT_TYPE, SUB_SELECT_FOR_SEND_MSG);
-            // getContactSIM
-            if (isRecipientsEditorVisible()) {
-                if (mRecipientsEditor.getRecipientCount() == 1/*isOnlyOneRecipient()*/) {
-                    mAssociatedSubId = getContactSub(mRecipientsEditor.getNumbers().get(0));
-                } else {
-                    mAssociatedSubId = -1;
-                }
-            } else {
-                if (getRecipients().size() == 1/*isOnlyOneRecipient()*/) {
-                    mAssociatedSubId = getContactSub(getRecipients().get(0).getNumber());
-                } else {
-                    mAssociatedSubId = -1;
-                }
-            }
-/*
-  * Op18 : Dual Send button is shown in compose screen .
-  * This setting is not saved along with subscriptionManager.getDefaultSmsSubId()
-  * So ,  check its value in plugin , if false handle default else plugin will handle send message
-
-*/
-    MmsLog.d(TAG, "mAssociatedSubId = " + mAssociatedSubId);
-
-           if (mAssociatedSubId == -1 && mOpComposeExt.sendMessageForDualSendButton() == false) {
-
-                // getDefaultSIM()
-                mMessageSubId = SubscriptionManager.getDefaultSmsSubscriptionId();
-                MmsLog.d(TAG, "mMessageSubId = " + mMessageSubId);
-                if (mMessageSubId == DefaultSmsSimSettings.ASK_USER_SUB_ID
-                        || mOpComposeExt.subSelectionDialog(mMessageSubId)) {
-                    // always ask, show SIM selection dialog
-                    showSubSelectedDialog(intent);
-                    updateSendButtonState();
-                } else if (mMessageSubId == Settings.System.DEFAULT_SIM_NOT_SET) {
-                    /*
-                     * not set default Sub:
-                     * if recipients are morn than 2,or there is no associated Sub,
-                     * show SIM selection dialog
-                     * else send message via associated SIM
-                     */
-                    if (mAssociatedSubId == -1) {
-                        showSubSelectedDialog(intent);
-                        updateSendButtonState();
-                    } else {
-                        mSelectedSubId = mAssociatedSubId;
-                        confirmSendMessageIfNeeded();
-                    }
-                } else {
-                    /*
-                     * default SIM:
-                     * if recipients are morn than 2,or there is no associated SIM,
-                     * send message via default SIM
-                     * else show SIM selection dialog
-                     */
-                    boolean isAssociatedSubExsit = false;
-                    List<SubscriptionInfo> subinfoList
-                        = SubscriptionManager.from(this).getActiveSubscriptionInfoList();
-                    int subCount = 0;
-                    if (subinfoList != null) {
-                        subCount = subinfoList.size();
-                    }
-                    for (int slotId = 0; slotId < subCount; slotId++) {
-                        SubscriptionInfo subInfo = subinfoList.get(slotId);
-                        if (subInfo != null) {
-                            int subId = subInfo.getSubscriptionId();
-                            isAssociatedSubExsit = (subId == mAssociatedSubId ? true : false);
-                            if (isAssociatedSubExsit) {
-                                break;
-                            }
-                        }
-                    }
-                    if ((mAssociatedSubId == -1 || (mMessageSubId == mAssociatedSubId)
-                            || !isAssociatedSubExsit)
-                            && MessageUtils.isSmsSubIdActive(this, mMessageSubId)) {
-                        mSelectedSubId = (int) mMessageSubId;
-                        confirmSendMessageIfNeeded();
-                    } else {
-                        showSubSelectedDialog(intent);
-                        updateSendButtonState();
-                    }
-                }
-            }
-        }
-    }
-
-    @Override
-    public void onDialogClick(int subId, Intent intent) {
-        mSelectedSubId = (int) subId;
-        if (intent.getIntExtra(SELECT_TYPE, -1) == SUB_SELECT_FOR_SEND_MSG) {
-            confirmSendMessageIfNeeded();
-            mIsOneSubSelected = true;
-        } else if (intent.getIntExtra(SELECT_TYPE, -1) == SUB_SELECT_FOR_SAVE_MSG_TO_SUB) {
-            // getMessageAndSaveToSim(it);
-            Message msg = mSaveMsgHandler.obtainMessage(MSG_SAVE_MESSAGE_TO_SUB_AFTER_SELECT_SUB);
-            msg.obj = intent;
-            // mSaveMsgHandler.sendMessageDelayed(msg, 60);
-            mSaveMsgHandler.sendMessage(msg);
-        }
-    }
-
-    @Override
-    public void onCancelClick() {
-
-    }
-
-    @Override
-    public void onDialogDismiss() {
-        if (isRecipientsEditorVisible() && mCutRecipients != null) {
-            mRecipientsEditor.removeChipChangedListener(mChipWatcher);
-            mRecipientsEditor.populate(new ContactList());
-            mRecipientsEditor.addChipChangedListener(mChipWatcher);
-            mRecipientsEditor.populate(mCutRecipients);
-            mCutRecipients = null;
-            // / M : Fix CR ALPS01009525
-            // / which will a empty thread in the widget that send group message
-            // from contact @{
-            if (mOldThreadID > 0) {
-                Conversation.asyncDeleteObsoleteThreadID(mBackgroundQueryHandler, mOldThreadID);
-            }
-            // / @}
-        } else if (mCutRecipients != null) {
-            if (mConversation != null) {
-                Log.d(TAG,
-                        "onDismiss, mark old thread draft status to false: "
-                                + mConversation.getThreadId());
-                mConversation.setDraftState(false);
-            }
-            mWorkingMessage.syncWorkingRecipients();
-            Conversation conv = mWorkingMessage.getConversation();
-            long threadId = 0L;
-            if (conv != null) {
-                conv.ensureThreadId();
-                threadId = conv.getThreadId();
-            }
-            // / M: fix bug ALPS00595715 @{
-            mWorkingMessage.saveDraft(false);
-            if (mIsOneSubSelected) {
-                startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 0);
-                mIsOneSubSelected = false;
-            } else {
-                startActivity(createIntent(ComposeMessageActivity.this, threadId));
-            }
-            // /@}
-            // / M: fix bug ALPS00595715 @{
-            if (mOldThreadID > 0 && mOldThreadID != threadId) {
-                mIsSameConv = false;
-                MmsLog.d(TAG, "onDismiss not same thread");
-            }
-            mCutRecipients = null;
-        }
-    }
-
-    private boolean mIsOneSubSelected = false;
-
-    private void showSubSelectedDialog(Intent intent) {
-        mIsOneSubSelected = false;
-        SubSelectDialog subSelectDialog = new SubSelectDialog(this, this);
-
-        String str = null;
-
-        str = mOpComposeExt.showSubSelectedDialog(str);
-
-        mSubSelectDialog = subSelectDialog.showSubSelectedDialog(true, str, intent);
-
-        /// M: fix bug ALPS00572383, delay show "suggested" on the SelectSubDialog @{
-        if (mAssociatedSubQueryDone != -1) {
-            mUiHandler.sendEmptyMessage(MSG_SELECT_SUB_DIALOG_SHOW);
-        }
-        /// @}
-    }
-    /// @}
-    /// M: Code analyze 003,  Set or get max mms size.
-    private void initMessageSettings() {
-        MessageUtils.setMmsLimitSize(this);
-    }
-    /// @}
-
-    private void showConfirmDialog(Uri uri, boolean append, int type, int messageId) {
-        if (isFinishing()) {
-            return;
-        }
-
-        final Uri mRestrictedMidea = uri;
-        final boolean mRestrictedAppend = append;
-        final int mRestrictedType = type;
-
-        new AlertDialog.Builder(ComposeMessageActivity.this)
-        .setTitle(R.string.unsupport_media_type)
-        .setIconAttribute(android.R.attr.alertDialogIcon)
-        .setMessage(messageId)
-        .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
-            public final void onClick(DialogInterface dialog, int which) {
-                    /// M: disable when non-default sms
-                    if (!mIsSmsEnabled) {
-                        Toast.makeText(ComposeMessageActivity.this,
-                                R.string.compose_disabled_toast, Toast.LENGTH_SHORT).show();
-                        return;
-                    }
-                    if (mRestrictedMidea == null || mRestrictedType == WorkingMessage.TEXT
-                        || mWorkingMessage.isDiscarded()) {
-                        return;
-                    }
-                    getAsyncDialog().runAsync(new Runnable() {
-                        public void run() {
-                            /// M: fix bug ALPS01258201, show progessDialog
-                            runOnUiThread(new Runnable() {
-                                public void run() {
-                                    Log.d(TAG, "reCreate and show ProgressDialog");
-                                    getAsyncDialog().reCreateProgressDialog(
-                                            R.string.adding_attachments_title);
-                                    getAsyncDialog().resetShowProgressDialog();
-                                }
-                            });
-                            int createMode = WorkingMessage.sCreationMode;
-                            WorkingMessage.sCreationMode = 0;
-                            int result = mWorkingMessage.setAttachment(mRestrictedType,
-                                    mRestrictedMidea, mRestrictedAppend);
-                            if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                                MmsLog.vpi(TAG, "Restricted Midea: dataUri=" + mRestrictedMidea);
-                            }
-                            if (mRestrictedType == WorkingMessage.IMAGE
-                                && (result == WorkingMessage.IMAGE_TOO_LARGE
-                                        || result == WorkingMessage.MESSAGE_SIZE_EXCEEDED)) {
-                                MmsLog.dpi(TAG, "showConfirmDialog: resize image "
-                                        + mRestrictedMidea);
-                                MessageUtils.resizeImage(ComposeMessageActivity.this,
-                                        mRestrictedMidea, mAttachmentEditorHandler,
-                                        mResizeImageCallback, mRestrictedAppend,
-                                    true);
-                                WorkingMessage.sCreationMode = createMode;
-                                dismissProgressDialog();
-                                return;
-                            }
-                            WorkingMessage.sCreationMode = createMode;
-                            int typeId = R.string.type_picture;
-                            if (mRestrictedType == WorkingMessage.AUDIO) {
-                                typeId = R.string.type_audio;
-                            } else if (mRestrictedType == WorkingMessage.VIDEO) {
-                                typeId = R.string.type_video;
-                            }
-                            handleAddAttachmentError(result, typeId);
-                            /// M: fix bug ALPS00726611, must save draft when click on WARNING_TYPE
-                            if (result == WorkingMessage.OK) {
-                                if (mWorkingMessage.saveAsMms(false) != null) {
-                                    mHasDiscardWorkingMessage = true;
-                                }
-                            }
-                            dismissProgressDialog();
-                        }
-                    }, new ShowRunnable(), R.string.adding_attachments_title);
-                    Log.d(TAG, "Composer add mAsyncTaskNum = " + (++mAsyncTaskNum));
-            }
-        })
-        .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
-            public final void onClick(DialogInterface dialog, int which) {
-                mWorkingMessage.removeFakeMmsForDraft();
-                updateSendButtonState();
-            }
-        })
-        .setOnCancelListener(new DialogInterface.OnCancelListener() {
-            public void onCancel(DialogInterface arg0) {
-                mWorkingMessage.removeFakeMmsForDraft();
-                updateSendButtonState();
-            }
-        })
-        .show();
-    }
-
-     /// M: Code analyze 067, Add audio attachment. @{
-    private void addAudio(final Uri uri, final boolean append) {
-        mNeedSaveAsMms = false;
-        if (uri != null) {
-            mNeedSaveAsMms = true;
-            int result = WorkingMessage.OK;
-            try {
-                if (append) {
-                    mWorkingMessage.checkSizeBeforeAppend();
-                }
-            } catch (ExceedMessageSizeException e) {
-                result = WorkingMessage.MESSAGE_SIZE_EXCEEDED;
-                handleAddAttachmentError(result, R.string.type_audio);
-                mNeedSaveAsMms = false;
-                return;
-            }
-            result = mWorkingMessage.setAttachment(WorkingMessage.AUDIO, uri, append);
-            if (result == WorkingMessage.WARNING_TYPE) {
-                mNeedSaveAsMms = false;
-                runOnUiThread(new Runnable() {
-                    public void run() {
-                        showConfirmDialog(uri, append,
-                                WorkingMessage.AUDIO, R.string.confirm_restricted_audio);
-                    }
-                });
-            } else {
-                handleAddAttachmentError(result, R.string.type_audio);
-                if (result != WorkingMessage.OK) {
-                    mNeedSaveAsMms = false;
-                }
-            }
-        }
-    }
-    /// @}
-
-    /// M: Code analyze 015, Add text vcard. @{
-    private void addTextVCardAsync(final long[] contactsIds) {
-        MmsLog.i(TAG, "compose.addTextVCardAsync(): contactsIds.length() = " + contactsIds.length);
-        getAsyncDialog().runAsync(new Runnable() {
-            public void run() {
-                //addTextVCard(contactsIds);
-               String textVCard = TextUtils.isEmpty(mTextEditor.getText()) ? "" : "\n";
-               VCardAttachment tvc = new VCardAttachment(ComposeMessageActivity.this);
-               final String textString = tvc.getTextVCardString(contactsIds, textVCard);
-               runOnUiThread(new Runnable() {
-               public void run() {
-                   insertText(mTextEditor, textString);
-               }
-
-             });
-           }
-        }, null, R.string.menu_insert_text_vcard); // the str is ok for reuse[or use a new string].
-    }
-    /// @}
-
-    private void addFileAttachment(String type, Uri uri, boolean append) {
-        if (!addFileAttachment(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, uri, append)) {
-            if (!addFileAttachment(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, uri, append)) {
-                if (!addFileAttachment(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
-                        uri, append)) {
-                    MmsLog.i(TAG, "This file is not in media store(audio, video or image)," +
-                            "attemp to add it like file uri");
-                    addAttachment(type, (Uri) uri, append);
-                }
-            }
-        }
-    }
-
-    private boolean addFileAttachment(Uri mediaStoreUri, Uri uri, boolean append) {
-        String path = uri.getPath();
-        if (path != null) {
-            Cursor c = getContentResolver().query(mediaStoreUri,
-                    new String[] {MediaStore.MediaColumns._ID, Audio.Media.MIME_TYPE},
-                    MediaStore.MediaColumns.DATA + "=?",
-                    new String[] {path}, null);
-            if (c != null) {
-                try {
-                    if (c.moveToFirst()) {
-                        Uri contentUri = Uri.withAppendedPath(mediaStoreUri, c.getString(0));
-                        MmsLog.ipi(TAG, "Get id in MediaStore:" + c.getString(0)
-                                + " Get content type in MediaStore:" + c.getString(1)
-                                + " Get uri in MediaStore:" + contentUri);
-                        String contentType = c.getString(1);
-                        addAttachment(contentType, contentUri, append);
-                        return true;
-                    } else {
-                        MmsLog.ipi(TAG, "MediaStore:" + mediaStoreUri.toString()
-                                + " has not this file");
-                    }
-                } finally {
-                    c.close();
-                }
-            }
-        }
-        return false;
-    }
-
-    private boolean isHasRecipientCount() {
-        int recipientCount = recipientCount();
-        return (recipientCount > 0 && recipientCount < RECIPIENTS_LIMIT_FOR_SMS);
-    }
-
-    private String getResourcesString(int id) {
-        Resources r = getResources();
-        return r.getString(id);
-    }
-
-    /// M: Code analyze 030, Check condition before sending message.@{
-    public void checkConditionsAndSendMessage(final boolean bCheckEcmMode) {
-        // check pin
-        if (mSelectedSubId <= 0) {
-            mSelectedSubId = SubscriptionManager.getDefaultSubscriptionId();
-        }
-        // add CellConnMgr feature
-        if (showWfcSendButtonPopUp()) {
-            updateSendButtonState(true);
-            return;
-        }
-        final CellConnMgr cellConnMgr = new CellConnMgr(getApplicationContext());
-        final int state = cellConnMgr.getCurrentState(mSelectedSubId, CellConnMgr.STATE_FLIGHT_MODE
-                | CellConnMgr.STATE_SIM_LOCKED | CellConnMgr.STATE_RADIO_OFF);
-        MmsLog.d(TAG, "CellConnMgr, state is " + state);
-        ///M: WFC: Do not show pop-up, if wfc is OFF @ {
-        if (!TelephonyManagerEx.getDefault().isWifiCallingEnabled(mSelectedSubId) &&
-            (((state & CellConnMgr.STATE_FLIGHT_MODE) == CellConnMgr.STATE_FLIGHT_MODE ) ||
-            ((state & CellConnMgr.STATE_RADIO_OFF) == CellConnMgr.STATE_RADIO_OFF ) ||
-            ((state & (CellConnMgr.STATE_FLIGHT_MODE | CellConnMgr.STATE_RADIO_OFF))
-                == (CellConnMgr.STATE_FLIGHT_MODE | CellConnMgr.STATE_RADIO_OFF))))  {
-            final ArrayList<String> stringArray =
-                cellConnMgr.getStringUsingState(mSelectedSubId, state);
-            MmsLog.d(TAG, "CellConnMgr, stringArray length is " + stringArray.size());
-            if (stringArray.size() == 4) {
-                AlertDialog.Builder builder = new AlertDialog.Builder(this);
-                builder.setTitle(stringArray.get(0));
-                builder.setMessage(stringArray.get(1));
-                builder.setPositiveButton(android.R.string.ok,
-                        new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int which) {
-                        dialog.dismiss();
-                        mTextEditor.requestFocus();
-                        updateSendButtonState(true);
-                    }
-                });
-                mPlaneModeDialog = builder.show();
-                mPlaneModeDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
-                    @Override
-                    public void onDismiss(DialogInterface dialog) {
-                        dialog.dismiss();
-                        mPlaneModeDialog = null;
-                        updateSendButtonState(true);
-                    }
-                });
-            }
-        } else if ((state & CellConnMgr.STATE_SIM_LOCKED) == CellConnMgr.STATE_SIM_LOCKED) {
-            final ArrayList<String> stringArray =
-                cellConnMgr.getStringUsingState(mSelectedSubId, state);
-            MmsLog.d(TAG, "CellConnMgr, stringArray length is " + stringArray.size());
-            if (stringArray.size() == 4) {
-                AlertDialog.Builder builder = new AlertDialog.Builder(this);
-                builder.setTitle(stringArray.get(0));
-                builder.setCancelable(true);
-                builder.setMessage(stringArray.get(1));
-                builder.setPositiveButton(stringArray.get(2),
-                        new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int which) {
-                            cellConnMgr.handleRequest(mSelectedSubId, state);
-                            mTextEditor.requestFocus();
-                            updateSendButtonState(true);
-                    }
-                });
-                builder.setNegativeButton(stringArray.get(3),
-                        new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int which) {
-                            dialog.dismiss();
-                            mTextEditor.requestFocus();
-                            updateSendButtonState(true);
-                    }
-                });
-                builder.show();
-            }
-        } else {
-            if (!mOpComposeExt.checkConditionsAndSendMessage(mWorkingMessage.requiresMms(),
-                    bCheckEcmMode)) {
-                checkBeforeSendMessage(bCheckEcmMode);
-            }
-        }
-   }
-   /// @}
-
-    /// M: Code analyze 049, Update send button or attachment editor state.@{
-    private void updateSendButtonState(final boolean enabled) {
-        if (!mWorkingMessage.hasSlideshow()) {
-            View sendButton = showSmsOrMmsSendButton(mWorkingMessage.requiresMms());
-            if (mOpComposeExt.updateSendButtonState(mWorkingMessage.requiresMms(),
-                    recipientCount(), MmsConfig.getSmsRecipientLimit(), mSubCount)) {
-                return;
-            }
-            sendButton.setEnabled(enabled);
-            sendButton.setFocusable(enabled);
-        } else {
-            mAttachmentEditor.setCanSend(enabled && (mSubCount > 0));
-        }
-    }
-    /// @}
-
-    private void insertText(EditText edit, String insertText) {
-        int where = edit.getSelectionStart();
-
-        if (where == -1) {
-            edit.append(insertText);
-        } else {
-            edit.getText().insert(where, insertText);
-        }
-    }
-
-    /**
-     * This filter will constrain edits not to make the length of the text
-     * greater than the specified length.
-     */
-    class TextLengthFilter extends InputFilter.LengthFilter {
-        public TextLengthFilter(int max) {
-            super(max);
-            mMaxLength = max;
-            mExceedMessageSizeToast = Toast.makeText(ComposeMessageActivity.this,
-                    R.string.exceed_editor_size_limitation,
-                    Toast.LENGTH_SHORT);
-        }
-
-        public CharSequence filter(CharSequence source, int start, int end,
-                                   Spanned dest, int dstart, int dend) {
-            MmsLog.dpi(TAG, "TextLengthFilter source = " + source +
-                    " start = " + start + " end = " + end + " dstart = "
-                    + dstart + " dend = " + dend + " dest length = " + dest.length());
-            int keep = mMaxLength - (dest.length() - (dend - dstart));
-            if (keep < (end - start)) {
-                mExceedMessageSizeToast.show();
-                mInputMethodManager.restartInput(
-                        ComposeMessageActivity.this.getWindow().getCurrentFocus());
-            }
-            return super.filter(source, start, end, dest, dstart, dend);
-            /*
-            if (keep <= 0) {
-                return "";
-            } else if (keep >= end - start) {
-                return null; // keep original
-            } else {
-                return source.subSequence(start, start + keep);
-            }
-            */
-        }
-
-        private int mMaxLength;
-    }
-
-    /// M: Code analyze 051, Hide input keyboard.@{
-    private void hideInputMethod() {
-        MmsLog.d(TAG, "hideInputMethod()");
-        if (this.getWindow() != null && this.getWindow().getCurrentFocus() != null) {
-            mInputMethodManager
-                .hideSoftInputFromWindow(this.getWindow().getCurrentFocus().getWindowToken(), 0);
-        }
-    }
-    /// @}
-
-    // toast there are too many recipients.
-    private void toastTooManyRecipients(int recipientCount) {
-        final String tooManyRecipients = getString(R.string.too_many_recipients,
-                recipientCount, RECIPIENTS_LIMIT_FOR_SMS);
-        mUiHandler.postDelayed(new Runnable() {
-            @Override
-            public void run() {
-                Toast.makeText(ComposeMessageActivity.this,
-                        tooManyRecipients, Toast.LENGTH_LONG).show();
-            }
-        }, 1000);
-    }
-
-    /// M: Code analyze 013, Get contacts from Contact app . @{
-    private void addContacts(int pickCount, int requestCode) {
-        /// M: @{
-        /*Intent intent = new Intent("android.intent.action.CONTACTSMULTICHOICE");
-          intent.setType(Phone.CONTENT_ITEM_TYPE);
-          intent.putExtra("request_email", true);
-          intent.putExtra("pick_count", pickCount);
-          misPickContatct = true;
-          startActivityForResult(intent, REQUEST_CODE_PICK_CONTACT);*/
-
-        /// M: fix bug ALPS00444752, set true to disable to Show ContactPicker
-        mShowingContactPicker = true;
-        misPickContatct = true;
-        Intent intent = new Intent(MessageUtils.ACTION_CONTACT_SELECTION);
-        intent.setType(Phone.CONTENT_TYPE);
-
-        if (mOpComposeExt.addContacts(intent, pickCount, requestCode)) {
-            return;
-        }
-        try {
-            startActivityForResult(intent, requestCode);
-        } catch (ActivityNotFoundException e) {
-            mShowingContactPicker = false;
-            misPickContatct = false;
-            Toast.makeText(this, this.getString(R.string.no_application_response),
-                    Toast.LENGTH_SHORT).show();
-            MmsLog.e(TAG, e.getMessage());
-        }
-        /// @}
-    }
-
-    private int getContactSub(final String num) {
-        class Int {
-            private int value = -1;
-            public void  set(int n) {
-                value = n;
-            }
-            public int get() {
-                return value;
-            }
-        }
-        final Int subID = new Int();
-        final Object dbQueryLock = new Object();
-        final Context mContextTemp = this.getApplicationContext();
-        // query the db in another thread.
-        new Thread(new Runnable() {
-            public void run() {
-                int subId = -1;
-                String number = num;
-                String formatNumber = MessageUtils.formatNumber(number, mContextTemp);
-                String TrimFormatNumber = formatNumber;
-                if (formatNumber != null) {
-                    TrimFormatNumber = formatNumber.replace(" ", "");
-                }
-                Cursor associateSubCursor = ComposeMessageActivity.this.getContentResolver().query(
-                    Data.CONTENT_URI,
-                    new String[]{ContactsContract.Data.SIM_ASSOCIATION_ID},
-                    Data.MIMETYPE + "='" + CommonDataKinds.Phone.CONTENT_ITEM_TYPE
-                    + "' AND (" + Data.DATA1 + "=?" +
-                    " OR " + Data.DATA1 + "=?" +
-                    " OR " + Data.DATA4 + "=?" +
-                    ") AND (" + ContactsContract.Data.SIM_ASSOCIATION_ID + "!= -1)",
-                    new String[]{number, formatNumber, TrimFormatNumber},
-                    null
-                );
-
-                if ((null != associateSubCursor) && (associateSubCursor.getCount() > 0)) {
-                    associateSubCursor.moveToFirst();
-                    // Get only one record is OK
-                    subId = (Integer) associateSubCursor.getInt(0);
-                } else {
-                    subId = -1;
-                }
-                if (associateSubCursor != null) {
-                    associateSubCursor.close();
-                }
-                synchronized (dbQueryLock) {
-                    MmsLog.d(MmsApp.TXN_TAG, "before notify");
-                    subID.set(subId);
-                    dbQueryLock.notify();
-                    /// M: fix bug ALPS00572383, delay show "suggested" on the SelectSimDialog @{
-                    mAssociatedSubQueryDone = subId;
-                }
-                /// @}
-            }
-        }).start();
-        // change UI thread wait from 500ms to 1000ms at most, for CR ALPS00721717
-        synchronized (dbQueryLock) {
-            try {
-                MmsLog.d(MmsApp.TXN_TAG, "before wait");
-                dbQueryLock.wait(1000);
-            } catch (InterruptedException e) {
-                //time out
-            }
-            MmsLog.d(MmsApp.TXN_TAG, "subID = " + subID.get());
-            return subID.get();
-        }
-    }
-
-    private void checkRecipientsCount() {
-        //if (isRecipientsEditorVisible()) {
-        //mRecipientsEditor.structLastRecipient();
-        //}
-//        hideInputMethod();
-        if (mIpCompose.onIpCheckRecipientsCount()) {
-            return;
-        }
-        if (!MessageUtils.allowSafeDraft(this, MmsConfig.getDeviceStorageFullStatus(), true,
-                TOAST_TYPE_FOR_SEND_MSG)) {
-            updateSendButtonState();
-            return;
-        }
-        final int mmsLimitCount = MmsConfig.getMmsRecipientLimit();
-        String message = "";
-        if (recipientCount() > mmsLimitCount) {
-            message = getString(R.string.max_recipients_message, mmsLimitCount);
-        }
-        boolean isRecipientsEditorEmpty = isRecipientsEditorVisible()
-                && "".equals(mRecipientsEditor.getText().toString().replaceAll(";", "")
-                        .replaceAll(",", "").trim());
-        boolean isConversationRecipientEmpty = !isRecipientsEditorVisible()
-                && "".equals(mConversation.getRecipients().serialize().replaceAll(";", "")
-                        .replaceAll(",", ""));
-
-        message = mOpComposeExt.checkRecipientsCount(message,
-                mWorkingMessage.requiresMms(), recipientCount(),
-                mmsLimitCount, isRecipientsEditorEmpty, isConversationRecipientEmpty, getIntent(),
-                mMsgListAdapter, mSubInfoList, isRecipientsEditorVisible());
-
-        if (mWorkingMessage.requiresMms() && (recipientCount() > mmsLimitCount)) {
-            message = "";
-            if (recipientCount() > mmsLimitCount) {
-                message = getString(R.string.max_recipients_message, mmsLimitCount);
-            }
-
-            AlertDialog.Builder builder = new AlertDialog.Builder(this);
-            builder.setTitle(R.string.max_recipients_title);
-            builder.setIconAttribute(android.R.attr.alertDialogIcon);
-            builder.setCancelable(true);
-            builder.setMessage(message);
-            builder.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
-                public void onClick(DialogInterface dialog, int which) {
-                    runOnUiThread(new Runnable() {
-                        public void run() {
-                            /*
-                             * If entering an existing thread, #mRecipientsEditor
-                             * never gets initialized.
-                             * So, when mRecipientsEditor is not visible, it might be null.
-                             */
-                            List<String> recipientsList;
-                            if (isRecipientsEditorVisible()) {
-                                recipientsList = mRecipientsEditor.getNumbers();
-                            } else {
-                                recipientsList = new ArrayList<String>(
-                                        Arrays.asList(getRecipients().getNumbers()));
-                            }
-                            List<String> newRecipientsList = new ArrayList<String>();
-
-                            if (recipientCount() > mmsLimitCount * 2) {
-                                for (int i = 0; i < mmsLimitCount; i++) {
-                                    newRecipientsList.add(recipientsList.get(i));
-                                }
-                                mWorkingMessage.setWorkingRecipients(newRecipientsList);
-                            } else {
-                                for (int i = recipientCount() - 1; i >= mmsLimitCount; i--) {
-                                    recipientsList.remove(i);
-                                }
-                                mWorkingMessage.setWorkingRecipients(recipientsList);
-                                /// M: fix bug ALPS00432629
-                                newRecipientsList = recipientsList;
-                            }
-                            subSelection();
-
-                            /// M: fix bug ALPS00432629, update title
-                            /// when recipientsList cut to 20 @{
-                            ContactList list = ContactList.getByNumbers(newRecipientsList, false);
-                            mCutRecipients = list;
-                        }
-                    });
-                }
-            });
-            builder.setNegativeButton(R.string.no, null);
-            builder.show();
-            updateSendButtonState();
-        } else {
-            /** M:
-             * fix CR ALPS00069541
-             * if the message copy from sub card with unknown recipient
-             * the recipient will be ""
-             */
-            if ((isRecipientsEditorVisible() && isRecipientsEditorEmpty)
-                    || (!isRecipientsEditorVisible() && isConversationRecipientEmpty)) {
-                new AlertDialog.Builder(this)
-                        .setIconAttribute(android.R.attr.alertDialogIcon)
-                        .setTitle(R.string.cannot_send_message)
-                        .setMessage(R.string.cannot_send_message_reason)
-                        .setPositiveButton(R.string.yes, new CancelSendingListener())
-                        .show();
-            } else {
-                /// M: reply message with the card directly if
-                /// only one card related in conversation
-                subSelection();
-            }
-        }
-    }
-
-    /// M: Code analyze 002,  If a new ComposeMessageActivity is created, kill old one
-    public static Activity getComposeContext() {
-        return sCompose == null ? null : sCompose.get();
-    }
-    /// @}
-
-   @Override
-    public void onShutDown() {
-       /// M: fix bug ALPS01539513
-       if (mWorkingMessage != null && mWorkingMessage.requiresMms()
-               && mWorkingMessage.getSlideshow() != null
-               && !mWorkingMessage.getSlideshow().needUpdate()) {
-           Log.d(TAG, "onShutDown return");
-           return;
-       }
-       /// M: don't save draft again if Compose is finished.
-       if (!this.isFinishing()) {
-           saveDraft(false);
-       }
-       /// @}
-    }
-
-    /*
-    this function is add for read report
-    */
-    private final int READ_REPORT_DISABLED                      = 0;
-    private final int READ_REPORT_SINGLE_MODE_ENABLED           = 1;
-    private final int READ_REPORT_GEMINI_MODE_ENABLED           = 2;
-
-    private void checkAndSendReadReport() {
-        final Context ct = ComposeMessageActivity.this;
-        final long threadId = mConversation.getThreadId();
-        MmsLog.d(MmsApp.TXN_TAG, "checkAndSendReadReport,threadId:" + threadId);
-        new Thread(new Runnable() {
-            public void run() {
-                SharedPreferences prefs =
-                    PreferenceManager.getDefaultSharedPreferences(ComposeMessageActivity.this);
-                int rrAllowed = READ_REPORT_DISABLED;
-                /// @}
-                // / M: [ALPS00465911] [3G Gemini+]JE when Message -> settings
-                // -> cell center -> back to idle @{
-                int[] totalSubIds = SubscriptionManager.from(
-                        ComposeMessageActivity.this).getActiveSubscriptionIdList();
-                MmsLog.d(MmsApp.TXN_TAG, "checkAndSendReadReport,totalSubIds = "
-                        + totalSubIds.length);
-                // / @}
-                rrAllowed = READ_REPORT_GEMINI_MODE_ENABLED;
-
-                MmsLog.d(MmsApp.TXN_TAG, "rrAllowed=" + rrAllowed);
-                // if read report is off, mark the mms read report status readed.
-                if (rrAllowed == READ_REPORT_DISABLED) {
-                    ContentValues values = new ContentValues(1);
-                    String where =
-                        Mms.THREAD_ID + " = " + threadId + " and " + Mms.READ_REPORT + " = 128";
-                    // update uri inbox is not used, must indicate here.
-                    where += " and " + Mms.MESSAGE_BOX + " = " + Mms.MESSAGE_BOX_INBOX;
-                    values.put(Mms.READ_REPORT,
-                            PduHeaders.READ_STATUS__DELETED_WITHOUT_BEING_READ);
-                    SqliteWrapper.update(ct, ct.getContentResolver(), Mms.Inbox.CONTENT_URI,
-                                        values,
-                                        where,
-                                        null);
-                    return;
-                }
-                if (rrAllowed > READ_REPORT_DISABLED) {
-                    StringBuilder suffix = new StringBuilder();
-                    switch (rrAllowed) {
-                        case READ_REPORT_SINGLE_MODE_ENABLED:
-                            // nothing to do in single card mode
-                            break;
-                        case READ_REPORT_GEMINI_MODE_ENABLED:
-                            boolean isAppendAnd = true;
-                            for (int subId : totalSubIds) {
-                                if (prefs.getBoolean(Long.toString(subId) + "_"
-                                        + MmsPreferenceActivity.READ_REPORT_AUTO_REPLY, false)) {
-                                    MmsLog.e(MmsApp.TXN_TAG, "readReport supported on subId: "
-                                            + subId);
-                                    // slot i has card and read report on
-                                    if (isAppendAnd) {
-                                        suffix.append(
-                                                Telephony.Mms.SUBSCRIPTION_ID + " = " + subId);
-                                        isAppendAnd = false;
-                                    } else {
-                                        suffix.append(" or " + Telephony.Mms.SUBSCRIPTION_ID
-                                                + " = " + subId);
-                                    }
-                                } else {
-                                    MmsLog.e(MmsApp.TXN_TAG,
-                                            "mark subId" + subId + " card readed");
-                                    markReadReportProcessed(ct, threadId, subId);
-                                }
-                            }
-                            if (!TextUtils.isEmpty(suffix.toString())) {
-                                suffix.insert(0, " and (");
-                                suffix.append(") ");
-                            }
-                            break;
-                        default:
-                            MmsLog.e(MmsApp.TXN_TAG, "impossible value for rrAllowed.");
-                            break;
-                        }
-                    boolean networkOk = true;
-                    int airplaneMode = Settings.System.getInt(ct.getContentResolver(),
-                            Settings.System.AIRPLANE_MODE_ON, 0);
-                    //network not ok.next time will try.
-                    if ((networkOk != true) || (airplaneMode == 1)) {
-                        MmsLog.d(MmsApp.TXN_TAG, "networkok:"
-                                + networkOk + ",airplaneMode:" + airplaneMode);
-                        return;
-                    }
-                    Cursor cs = null;
-                    try {
-                        String where = Mms.THREAD_ID + " = " + threadId
-                        + " and " + Mms.READ_REPORT + " = 128" + suffix.toString();
-                        cs = SqliteWrapper.query(ct, ct.getContentResolver(),
-                                Mms.Inbox.CONTENT_URI,
-                                new String[]{Mms._ID, Telephony.Mms.SUBSCRIPTION_ID},
-                                where, null, null);
-                        if (cs != null) {
-                            final int count = cs.getCount();
-                            if (count > 0) {
-                                //mark the ones need send read report status to pending as 130.
-                                ContentValues values = new ContentValues(1);
-                                values.put(Mms.READ_REPORT,
-                                        PduHeaders.READ_STATUS__DELETED_WITHOUT_BEING_READ);
-                                // update uri inbox is not used, must indicate here.
-                                where += " and " + Mms.MESSAGE_BOX + " = " + Mms.MESSAGE_BOX_INBOX;
-                                SqliteWrapper.update(ct, ct.getContentResolver(),
-                                        Mms.Inbox.CONTENT_URI, values, where, null);
-                                //show a toast.
-                                runOnUiThread(new Runnable() {
-                                    public void run() {
-                                        Toast.makeText(ComposeMessageActivity.this,
-                                                    ct.getResources().getQuantityString(
-                                                            R.plurals.read_report_toast_msg,
-                                                            count, count),
-                                                    Toast.LENGTH_SHORT).show();
-                                    }
-                                });
-                            }
-                            startSendReadReport(cs);
-                        }
-                    } catch (Exception e) {
-                        MmsLog.e(MmsApp.TXN_TAG,
-                                "exception happend when scan read report!:" + e.getMessage());
-                    } finally {
-                        if (cs != null) {
-                            cs.close();
-                        }
-                    }
-                }
-            }
-
-            private void markReadReportProcessed(Context ct, long threadId, int subId) {
-                ContentValues values = new ContentValues(1);
-                values.put(Mms.READ_REPORT, PduHeaders.READ_STATUS__DELETED_WITHOUT_BEING_READ);
-                String where = Mms.THREAD_ID + " = " + threadId
-                        + " and " + Mms.READ_REPORT + " = 128"
-                        + " and " + Telephony.Mms.SUBSCRIPTION_ID + " = " + subId;
-                // update uri inbox is not used, must indicate here.
-                where += " and " + Mms.MESSAGE_BOX + " = " + Mms.MESSAGE_BOX_INBOX;
-                SqliteWrapper.update(ct, ct.getContentResolver(), Mms.Inbox.CONTENT_URI,
-                                    values,
-                                    where,
-                                    null);
-            }
-
-            private void startSendReadReport(final Cursor cursor) {
-                cursor.moveToPosition(-1);
-                while (cursor.moveToNext()) {
-                    MmsLog.d(MmsApp.TXN_TAG, "send an intent for read report.");
-                    long msgId = cursor.getLong(0);
-                    Intent rrIntent = new Intent(ct, TransactionService.class);
-                    rrIntent.putExtra(TransactionBundle.URI, Mms.Inbox.CONTENT_URI + "/" + msgId);
-                    rrIntent.putExtra(TransactionBundle.TRANSACTION_TYPE,
-                            Transaction.READREC_TRANSACTION);
-
-                    int subId = cursor.getInt(1);
-                    MmsLog.d(MmsApp.TXN_TAG, "subId:" + subId);
-                    rrIntent.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId);
-
-                    ct.startService(rrIntent);
-                }
-            }
-        }).start();
-    }
-
-    /**
-     * Remove the number which is the same as any one before;
-     * When the count of recipients over the limit, make a
-     * toast and remove the recipients over the limit.
-     * @param recipientsString the numbers slipt by ','.
-     * @return recipientsString the numbers slipt by ',' after modified.
-     */
-    private String getStringForMultipleRecipients(String recipientsString) {
-        recipientsString = recipientsString.replaceAll(",", ";");
-        String[] recipients_all = recipientsString.split(";");
-        List<String> recipientsList = new ArrayList<String>();
-        for (String recipient : recipients_all) {
-            recipientsList.add(recipient);
-        }
-
-        Set<String> recipientsSet = new HashSet<String>();
-        recipientsSet.addAll(recipientsList);
-
-        if (recipientsSet.size() > RECIPIENTS_LIMIT_FOR_SMS) {
-            toastTooManyRecipients(recipients_all.length);
-        }
-
-        recipientsList.clear();
-        recipientsList.addAll(recipientsSet);
-
-        recipientsString = "";
-        int count = recipientsList.size() > RECIPIENTS_LIMIT_FOR_SMS
-                ? RECIPIENTS_LIMIT_FOR_SMS : recipientsList.size();
-        StringBuffer buf = new StringBuffer();
-        buf.append(recipientsString);
-        for (int i = 0; i < count; i++) {
-            if (i == (count - 1)) {
-                buf.append(recipientsList.get(i));
-            } else {
-                buf.append(recipientsList.get(i) + ";");
-            }
-        }
-        recipientsString = buf.toString();
-        return recipientsString;
-    }
-
-    /**
-     * Get Conversation.
-     * * Notice: This function is also called by operator plugin(OP01). When modify this function,
-     * please notify operator team.
-     *
-     * @return Conversation
-     */
-    public Conversation getConversation() {
-        return mConversation;
-    }
-
-    /// M: Code analyze 014, Add quick text. @{
-    private void showQuickTextDialog() {
-        mQuickTextDialog = null;
-        //if (mQuickTextDialog == null) {
-            List<String> quickTextsList = new ArrayList<String>();
-
-            /// M: new feature, add default quick text when frist "insert quick text" @{
-            if (MmsConfig.getInitQuickText()) {
-                String[] defaultQuickTexts =
-                    getResources().getStringArray(R.array.default_quick_texts);
-                for (int i = 0; i < defaultQuickTexts.length; i++) {
-                    quickTextsList.add(defaultQuickTexts[i]);
-                }
-            } else {
-                // add user's quick text
-                if (MmsConfig.getQuicktexts().size() == 0) {
-                    MmsConfig.updateAllQuicktexts();
-                }
-                quickTextsList = MmsConfig.getQuicktexts();
-            }
-            /// @}
-
-            List<Map<String, ?>> entries = new ArrayList<Map<String, ?>>();
-            for (String text : quickTextsList) {
-                HashMap<String, Object> entry = new HashMap<String, Object>();
-                entry.put("text", text);
-                entries.add(entry);
-            }
-
-            final SimpleAdapter qtAdapter = new SimpleAdapter(this, entries,
-                    R.layout.quick_text_list_item,
-                    new String[] {"text"}, new int[] {R.id.quick_text});
-
-            AlertDialog.Builder qtBuilder = new AlertDialog.Builder(this);
-
-            qtBuilder.setTitle(getString(R.string.select_quick_text));
-            qtBuilder.setCancelable(true);
-            qtBuilder.setAdapter(qtAdapter, new DialogInterface.OnClickListener() {
-                @SuppressWarnings("unchecked")
-                public final void onClick(DialogInterface dialog, int which) {
-                    HashMap<String, Object> item =
-                        (HashMap<String, Object>) qtAdapter.getItem(which);
-                    if (mSubjectTextEditor != null && mSubjectTextEditor.isFocused()) {
-                        insertText(mSubjectTextEditor, (String) item.get("text"));
-                    } else {
-                        insertText(mTextEditor, (String) item.get("text"));
-                    }
-                    dialog.dismiss();
-                }
-            });
-            mQuickTextDialog = qtBuilder.create();
-        //}
-        mQuickTextDialog.show();
-    }
-    /// @}
-
-    /// M: Code analyze 006, Control Sub indicator on status bar. @{
-    @Override
-    public void onSubInforChanged() {
-        MmsLog.i(MmsApp.LOG_TAG, "onSubInforChanged(): Composer");
-        mMessageSubId = (int) Settings.System.getLong(getContentResolver(),
-                Settings.System.SMS_SIM_SETTING,
-                Settings.System.DEFAULT_SIM_NOT_SET);
-        mSelectedSubId = (int) mMessageSubId;
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                mOpComposeExt.onSubInforChanged();
-                updateSendButtonState();
-            }
-        });
-    }
-    /// @}
-
-    /// M: Code analyze 004, Set max height for text editor. @{
-    private final HeightChangedLinearLayout.LayoutSizeChangedListener mLayoutSizeChangedListener =
-            new HeightChangedLinearLayout.LayoutSizeChangedListener() {
-        private int mMaxHeight = 0;
-        @Override
-        public void onLayoutSizeChanged(int w, int h, int oldw, int oldh) {
-            /// M: fix bug ALPS00419856, set TextEditor Height = four when unlock screen @{
-            if (h - oldh > SOFT_KEY_BOARD_MIN_HEIGHT) {
-                mIsSoftKeyBoardShow = false;
-            } else {
-                mIsSoftKeyBoardShow = true;
-            }
-            /// @}
-            mMaxHeight = (h > mMaxHeight) ? h : mMaxHeight;
-            if (h == oldh || mTextEditor == null || mTextEditor.getVisibility() == View.GONE) {
-                return;
-            }
-            MmsLog.d(TAG, "onLayoutSizeChanged(): mIsLandscape = " + mIsLandscape);
-
-            boolean resultIp = mIpCompose.onIpLayoutSizeChanged(mIsSoftKeyBoardShow);
-            boolean resultOp = mOpComposeExt.onLayoutSizeChanged(mIsSoftKeyBoardShow);
-            if (!mIsLandscape) {
-                if (h > oldh && !resultIp && !resultOp) {
-                    updateTextEditorHeightInFullScreen();
-                } else {
-                    mUiHandler.postDelayed(new Runnable() {
-                        public void run() {
-                            MmsLog.d(TAG, "onLayoutSizeChanged(): mTextEditor.setMaxHeight: "
-                                    + mReferencedTextEditorThreeLinesHeight);
-                            mTextEditor.setMaxHeight(mReferencedTextEditorThreeLinesHeight
-                                    * mCurrentMaxHeight / mReferencedMaxHeight);
-                        }
-                    }, 100);
-                }
-            }
-        }
-    };
-
-    private void updateTextEditorHeightInFullScreen() {
-        if (mIsLandscape || mTextEditor == null || mTextEditor.getVisibility() == View.GONE) {
-            return;
-        }
-        mUiHandler.postDelayed(new Runnable() {
-            public void run() {
-                updateFullScreenTextEditorHeight();
-            }
-        }, 100);
-    }
-
-    private void updateFullScreenTextEditorHeight() {
-        boolean resultIp = mIpCompose.updateIpFullScreenTextEditorHeight();
-        boolean resultOp = mOpComposeExt.updateFullScreenTextEditorHeight();
-        if (mAttachmentEditor.getVisibility() == View.VISIBLE
-                && mAttachmentEditor.getHeight() > 0
-                && !mWorkingMessage.hasSlideshow()) {
-            MmsLog.d(TAG, "updateTextEditorHeight(): mTextEditor.setMaxHeight: "
-                    + (mReferencedTextEditorSevenLinesHeight
-                            * mCurrentMaxHeight / mReferencedMaxHeight));
-            if (mIsLandscape) {
-                mTextEditor.setMaxHeight(
-                        mReferencedTextEditorTwoLinesHeight
-                        * mCurrentMaxHeight / mReferencedMaxHeight);
-            } else {
-                if (mIsSoftKeyBoardShow) {
-                    mTextEditor.setMaxHeight(mReferencedTextEditorFourLinesHeight
-                            * mCurrentMaxHeight / mReferencedMaxHeight);
-                } else {
-                    mTextEditor.setMaxHeight(mReferencedTextEditorSevenLinesHeight
-                            * mCurrentMaxHeight / mReferencedMaxHeight);
-                }
-            }
-        } else {
-            /// M: fix bug ALPS00419856, set TextEditor Height = four when unlock screen @{
-            if (mIsSoftKeyBoardShow && !mIsLandscape) {
-                if (Log.isLoggable(TAG, Log.VERBOSE)) {
-                    MmsLog.v(TAG, "updateFullScreenTextEditorHeight() updateTextEditorHeight()" +
-                            ": mTextEditor.setMaxHeight: " + (mReferencedTextEditorFourLinesHeight
-                                * mCurrentMaxHeight / mReferencedMaxHeight));
-                }
-                mTextEditor.setMaxHeight(mReferencedTextEditorFourLinesHeight
-                        * mCurrentMaxHeight / mReferencedMaxHeight);
-            /// @}
-            } else if (!mIsSoftKeyBoardShow && !mIsLandscape) {
-                if (Log.isLoggable(TAG, Log.VERBOSE)) {
-                    MmsLog.v(TAG, "updateTextEditorHeight(): mTextEditor.setMaxHeight: "
-                    + ((mReferencedTextEditorSevenLinesHeight + mReferencedAttachmentEditorHeight)
-                                * mCurrentMaxHeight / mReferencedMaxHeight));
-                }
-                if (!resultIp && !resultOp) {
-                    mTextEditor.setMaxHeight(
-                            (mReferencedTextEditorSevenLinesHeight
-                                    + mReferencedAttachmentEditorHeight)
-                                    * mCurrentMaxHeight / mReferencedMaxHeight);
-                }
-            } else {
-                if (Log.isLoggable(TAG, Log.VERBOSE)) {
-                    MmsLog.v(TAG, "updateTextEditorHeight(): mTextEditor.setMaxHeight: "
-                        + (mReferencedTextEditorTwoLinesHeight * mCurrentMaxHeight
-                                / mReferencedMaxHeight));
-                }
-                mTextEditor.setMaxHeight(mReferencedTextEditorTwoLinesHeight * mCurrentMaxHeight
-                            / mReferencedMaxHeight);
-            }
-        }
-    }
-    /// @}
-
-   @Override
-    public void startActivity(Intent intent) {
-        try {
-            super.startActivity(intent);
-        } catch (ActivityNotFoundException e) {
-            Intent mChooserIntent = Intent.createChooser(intent, null);
-            super.startActivity(mChooserIntent);
-        }
-    }
-
-    /**
-     * Simple cache to prevent having to load the same PduBody again and again for the same uri.
-     */
-
-    private boolean needSaveDraft() {
-        return ((!isRecipientsEditorVisible())
-                    || (mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms())))
-                && !mWorkingMessage.isDiscarded() && (mWorkingMessage.isWorthSaving());
-    }
-
-    public void onPreMmsSent() {
-        startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 0);
-    }
-
-    private boolean checkSlideCount(boolean append) {
-        String mMsg = this.getString(R.string.cannot_add_slide_anymore);
-        Toast mToast = Toast.makeText(this, mMsg, Toast.LENGTH_SHORT);
-        int mSlideCount = 0;
-        SlideshowModel slideShow = mWorkingMessage.getSlideshow();
-        if (slideShow != null) {
-            mSlideCount = slideShow.size();
-        }
-        if (mSlideCount >= SlideshowEditor.MAX_SLIDE_NUM && append) {
-            mToast.show();
-            return false;
-        }
-        return true;
-    }
-
-    /// M: Code analyze 009,Show attachment dialog . @{
-    private class SoloAlertDialog extends AlertDialog {
-        private AlertDialog mAlertDialog;
-
-        private SoloAlertDialog(Context context) {
-            super(context);
-        }
-
-        public boolean needShow() {
-            return mAlertDialog == null || !mAlertDialog.isShowing();
-        }
-
-        public void show(final boolean append) {
-            if (!needShow()) {
-                return;
-            }
-
-            AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
-            builder.setIcon(R.drawable.ic_dialog_attach);
-            builder.setTitle(R.string.add_attachment);
-
-            // if (mAttachmentTypeSelectorAdapter == null) {
-            // add for vcard, if there is a real slideshow, hide vCard
-            int mode = AttachmentTypeSelectorAdapter.MODE_WITH_SLIDESHOW;
-            //lance modify for bug 117676 @{
-            mode |= AttachmentTypeSelectorAdapter.MODE_WITH_FILE_ATTACHMENT; 
-            /*if (mWorkingMessage.hasSlideshow()) {
-                mode |= AttachmentTypeSelectorAdapter.MODE_WITHOUT_FILE_ATTACHMENT;
-            } else {
-                mode |= AttachmentTypeSelectorAdapter.MODE_WITH_FILE_ATTACHMENT;
-            }*/
-            // @}
-            if (MessageUtils.isVCalendarAvailable(ComposeMessageActivity.this)) {
-                mode |= AttachmentTypeSelectorAdapter.MODE_WITH_VCALENDAR;
-            }
-            mAttachmentTypeSelectorAdapter = new AttachmentTypeSelectorAdapter(getContext(), mode);
-            // }
-            builder.setAdapter(mAttachmentTypeSelectorAdapter,
-                    new DialogInterface.OnClickListener() {
-                        public void onClick(DialogInterface dialog, int which) {
-                            addAttachment(
-                                    mAttachmentTypeSelectorAdapter.buttonToCommand(which), append);
-                            dialog.dismiss();
-                        }
-                    });
-            mAlertDialog = builder.show();
-        }
-
-        public void dismiss() {
-            if (mAlertDialog != null && mAlertDialog.isShowing()) {
-                mAlertDialog.dismiss();
-            }
-            super.dismiss();
-        }
-    }
-    /// @}
-
-    private void waitForCompressing() {
-        synchronized (ComposeMessageActivity.this) {
-            while (mCompressingImage) {
-                try {
-                    wait();
-                } catch (InterruptedException e) {
-                    MmsLog.e(TAG, "intterrupted exception e ", e);
-                }
-            }
-        }
-    }
-
-    private void notifyCompressingDone() {
-        synchronized (ComposeMessageActivity.this) {
-            mCompressingImage = false;
-            notify();
-        }
-    }
-
-    private boolean mCompressingVCardFinished = false;
-
-    /// M: change return value to int. if attachFile.length is 0,will
-    /// return WorkingMessage.UNKNOWN_ERROR
-    /// The return value will be used in asyncAttachVCardByContactsId
-    /// to judge wether need to saveAsMms or not
-    private int setFileAttachment(final String fileName, final int type, final boolean append) {
-        final File attachFile = getFileStreamPath(fileName);
-        MmsLog.d(TAG, "setFileAttachment(): attachFile.exists()?=" + attachFile.exists() +
-                        ", attachFile.length()=" + attachFile.length());
-        final Resources res = getResources();
-        if (attachFile.exists() && attachFile.length() > 0) {
-            Uri attachUri = Uri.fromFile(attachFile);
-            int result = WorkingMessage.OK;
-            try {
-                if (append) {
-                    mWorkingMessage.checkSizeBeforeAppend();
-                }
-            } catch (ExceedMessageSizeException e) {
-                result = WorkingMessage.MESSAGE_SIZE_EXCEEDED;
-                handleAddAttachmentError(result, R.string.type_common_file);
-                return result;
-            }
-            result = mWorkingMessage.setAttachment(type, attachUri, append);
-            handleAddAttachmentError(result, R.string.type_common_file);
-            mCompressingVCardFinished = true;
-            return result;
-        } else {
-            mUiHandler.post(new Runnable() {
-                public void run() {
-                    Toast.makeText(ComposeMessageActivity.this,
-                            res.getString(R.string.failed_to_add_media, fileName),
-                            Toast.LENGTH_SHORT).show();
-                }
-            });
-            return WorkingMessage.UNKNOWN_ERROR;
-        }
-    }
-
-    public void setCompressingVCardFinished(boolean compressingVCardFinished) {
-        mCompressingVCardFinished = compressingVCardFinished;
-    }
-
-    private void asyncAttachVCalendar(final Uri eventUri) {
-        if (eventUri == null) {
-            return;
-        }
-        getAsyncDialog().runAsync(new Runnable() {
-            public void run() {
-                attachVCalendar(eventUri);
-                /// call saveAsMms to save the draft @{
-                mWorkingMessage.saveAsMms(false);
-                /// @}
-            }
-        }, null, R.string.adding_attachments_title);
-    }
-
-    private void attachVCalendar(Uri eventUri) {
-        if (eventUri == null) {
-            Log.w(TAG, "attachVCalendar, oops uri is null");
-            return;
-        }
-        int result = WorkingMessage.OK;
-
-        /// M: OP01
-        if (!mOpComposeExt.attachVCalendar(mAppendAttachmentSign,
-                WorkingMessage.VCALENDAR, eventUri, R.string.type_common_file)) {
-            result = mWorkingMessage.setAttachment(WorkingMessage.VCALENDAR, eventUri, false);
-            handleAddAttachmentError(result, R.string.type_common_file);
-        }
-        /// @}
-    }
-
-    /// M: Code analyze 019, Add vcard attachment.  @{
-    private void asyncAttachVCardByContactsId(final Intent data) {
-        if (data == null) {
-            return;
-        }
-        getAsyncDialog().runAsyncInThreadPool(new Runnable() {
-            public void run() {
-                long[] contactsId =
-                    data.getLongArrayExtra("com.mediatek.contacts.list.pickcontactsresult");
-                VCardAttachment va = new VCardAttachment(ComposeMessageActivity.this);
-                int result = WorkingMessage.OK;
-                String fileName = va.getVCardFileNameByContactsId(contactsId);
-                /// M: add for attachmentEnhance Modify ALPS00474719 @{
-                if (mOpComposeExt.asyncAttachVCardByContactsId(mAppendAttachmentSign)) {
-                    // add vcard and OP01
-                    result = setFileAttachment(fileName, WorkingMessage.VCARD, true);
-                } else {
-                    // replace or Not OP01
-                    result = setFileAttachment(fileName, WorkingMessage.VCARD, false);
-                }
-
-                /// Fix CR : ALPS00970618
-                /// Fix CR : ALPS01035223 Add VCard with 1000 contacts cause exceed message
-                /// limitation the result should be OK, that saveAsMms or there will be errors @{
-                if (result == WorkingMessage.OK) {
-                    Log.d("[Mms][Composer]", "asyncAttachVCardByContactsId result is ok");
-                    /// Fix CR ALPS01011718 @{
-                    if (mCompressingVCardFinished && mWorkingMessage.isDiscarded()) {
-                        mWorkingMessage.unDiscard();
-                    }
-                    /// @}
-                    mWorkingMessage.saveAsMms(false);
-                }
-                /// @}
-                VCardUtils.deleteVCardTempFile(getApplicationContext(), fileName);
-            }
-        }, null, R.string.adding_attachments_title);
-    }
-    /// @}
-
-    /// M: Code analyze 047, Extra uri from message body and get number from uri.
-    /// Then use this number to update contact cache. @{
-    private void updateContactCache(Cursor cursor) {
-        if (cursor != null) {
-            Set<SpannableString> msgs = new HashSet<SpannableString>();
-            while (cursor.moveToNext()) {
-                String smsBody = cursor.getString(MessageListAdapter.COLUMN_SMS_BODY);
-
-                if (smsBody == null) {
-                    continue;
-                }
-
-                SpannableString msg = new SpannableString(smsBody);
-                msgs.add(msg);
-            }
-            // update the contact cache in an async thread to avoid ANR
-            updateContactCacheAsync(msgs);
-        }
-    }
-
-    private void updateContactCacheAsync(final Set<SpannableString> msgs) {
-        for (SpannableString msg : msgs) {
-            Linkify.addLinks(msg, Linkify.ALL);
-        }
-        new Thread(new Runnable() {
-            public void run() {
-                Set<String> uriSet = new HashSet<String>();
-                for (SpannableString msg : msgs) {
-                    List<String> uris = MessageUtils.extractUris(msg.getSpans(0, msg.length(),
-                        URLSpan.class));
-                    for (String uri : uris) {
-                        uriSet.add(uri);
-                    }
-                }
-                for (String uri : uriSet) {
-                    String[] body = uri.toLowerCase().split("tel:");
-                    if (body.length > 1) {
-                        Contact.get(body[1].trim(), false);
-                    }
-                }
-            }
-        }).start();
-    }
-    /// @}
-
-    /// M: Code analyze 036, Change text size if adjust font size.@{
-    public void setTextSize(float size) {
-        if (mTextEditor != null) {
-            mTextEditor.setTextSize(size);
-        }
-        if (mMsgListAdapter != null) {
-            mMsgListAdapter.setTextSize(size);
-        }
-
-        if (mMsgListView != null && mMsgListView.getVisibility() == View.VISIBLE) {
-            int count = mMsgListView.getChildCount();
-            for (int i = 0; i < count; i++) {
-                MessageListItem item =  (MessageListItem) mMsgListView.getChildAt(i);
-                if (item != null) {
-                    item.setBodyTextSize(size);
-                }
-            }
-        }
-    }
-    /// @}
-
-    public boolean  dispatchTouchEvent(MotionEvent ev) {
-        boolean ret = false;
-        /// M: Code analyze 001, Plugin opeartor. @{
-        if (mOpComposeExt != null) {
-            ret = mOpComposeExt.dispatchTouchEvent(ev);
-        }
-        /// @}
-
-        if (!ret) {
-            ret = super.dispatchTouchEvent(ev);
-        }
-        return ret;
-    }
-
-    private void showKeyBoard(boolean isShow) {
-        if (isShow && mIsSmsEnabled) {
-            mTextEditor.requestFocus();
-            mInputMethodManager.showSoftInput(mTextEditor, 0);
-            mIsKeyboardOpen = true;
-        } else {
-            hideInputMethod();
-        }
-    }
-
-    private long genThreadIdFromContacts(Intent data) {
-        final long[] contactsId = data
-                .getLongArrayExtra("com.mediatek.contacts.list.pickdataresult");
-        if (contactsId == null || contactsId.length <= 0) {
-            Log.d(TAG, "[genThreadIdFromContacts] get recipients from contacts is null");
-            return 0;
-        }
-        final ContactList aList = new ContactList();
-        final ContactList list = new ContactList();
-        ContactList selected = ContactList.blockingGetByIds(contactsId);
-        List<String> selectedNumbers = Arrays.asList(selected.getProtosomaitcNumbers());
-        final List<String> numbers = Arrays.asList(mConversation.getRecipients()
-                .getProtosomaitcNumbers());
-        String selectedNumberAfterFormat = "";
-        if (numbers.size() > 0) {
-            for (String number : numbers) {
-                if (!number.trim().equals("")) {
-                    Contact c = Contact.get(number, false);
-                    aList.add(c);
-                }
-            }
-            // / M: format existing numbers(remove "-" and " ")
-            List<String> formatedNumbers = Arrays.asList(aList.getNumbers(true));
-            for (String selectedNumber : selectedNumbers) {
-                selectedNumberAfterFormat = MessageUtils.parseMmsAddress(selectedNumber);
-                if (selectedNumberAfterFormat != null
-                        && !selectedNumberAfterFormat.trim().equals("")
-                        && !formatedNumbers.contains(selectedNumberAfterFormat)) {
-                    Contact c = Contact.get(selectedNumber, false);
-                    list.add(c);
-                }
-            }
-            aList.addAll(list);
-        }
-        if (aList == null || aList.size() <= 0) {
-            return 0;
-        }
-        long id = Conversation.getOrCreateThreadId(getApplicationContext(), aList);
-        return id;
-    }
-
-    private boolean mIsStartMultiDeleteActivity = false;
-
-    private void updateTextEditorHint() {
-        // add for ipmessage
-        if (mIpCompose.onIpUpdateTextEditorHint()) {
-            return;
-        }
-        if (mIsSmsEnabled) {
-            mTextEditor.setHint(R.string.ipmsg_sms_hint);
-        } else {
-            mTextEditor.setHint(R.string.sending_disabled_not_default_app);
-        }
-        mTextEditor.setFilters(new InputFilter[] {
-            new TextLengthFilter(MmsConfig.getMaxTextLimit())
-        });
-        updateCounter(mWorkingMessage.getText(), 0, 0, 0);
-    }
-
-    private String formatLastOnlineTime(int time) {
-        return MessageUtils.formatTimeStampString(this, (long) (time * 1000L), true);
-    }
-
-    private void checkBeforeSendMessage(boolean bCheckEcmMode) {
-        boolean needSendIpMessage =
-            mIpCompose.checkIpMessageBeforeSendMessage(mSelectedSubId, bCheckEcmMode);
-        if (!needSendIpMessage) {
-            sendMessage(bCheckEcmMode);
-        }
-    }
-
-    /// M:added for bug ALPS00317889
-    private boolean mShowDialogForMultiImage = false;
-
-    /// M: show contact detail or create new contact. @{
-    private static final int MENU_SHOW_CONTACT          = 121;
-    private static final int MENU_CREATE_CONTACT        = 122;
-    private QuickContactBadge mQuickContact;
-    /// @}
-
-    /// M: fix bug ALPS00414023, update sub state dynamically. @{
-    private BroadcastReceiver mSubReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            String action = intent.getAction();
-            mOpComposeExt.onReceive(action, mGetSubInfoRunnable);
-
-            if (action != null && action.equals(TelephonyIntents.ACTION_SUBINFO_RECORD_UPDATED)) {
-                    /// M: fix bug ALPS00429274, dismiss Dialog when SUB_CHANGED @{
-                    if (mSubSelectDialog != null && mSubSelectDialog.isShowing()) {
-                        mSubSelectDialog.dismiss();
-                    }
-                    /// @}
-                    /// M: Fix Bug: ALPS00503002 ;
-                    getSubInfoList();
-                    updateSendButtonState();
-                    mMsgListAdapter.notifyDataSetChanged();
-            } else if (action != null
-                    && (action.equals(TelephonyIntents.ACTION_DEFAULT_SMS_SUBSCRIPTION_CHANGED)
-                        || action.equals(TelephonyIntents.ACTION_SUBINFO_CONTENT_CHANGE))) {
-                mGetSubInfoRunnable.run();
-            }
-        }
-    };
-
-    private void saveAsMms(boolean notify) {
-        if (!MessageUtils.allowSafeDraft(this, MmsConfig.getDeviceStorageFullStatus(), false,
-                TOAST_TYPE_FOR_SAVE_DRAFT)) {
-            return;
-        }
-        if (mNeedSaveAsMms) {
-            mNeedSaveAsMms = false;
-            if (mWorkingMessage.saveAsMms(notify) != null) {
-                mHasDiscardWorkingMessage = true;
-            }
-        }
-    }
-
-    /// M: after delete the last message of one thread,
-    /// don't finish this activity if have draft. @{
-    private void makeDraftEditable(ContactList recipients) {
-        if (!mConversation.getRecipients().equals(recipients)) {
-            mConversation.setRecipients(recipients);
-            MmsLog.d(TAG, "makeDraftEditable, do not equal");
-        } else {
-            MmsLog.d(TAG, "makeDraftEditable, equal");
-            mWorkingMessage.asyncDeleteDraftSmsMessage(mConversation);
-            mConversation.clearThreadId();
-        }
-        mWorkingMessage.setConversation(mConversation);
-        updateThreadIdIfRunning();
-        invalidateOptionsMenu();
-        hideRecipientEditor();
-        initRecipientsEditor(null);
-        isInitRecipientsEditor = true;
-    }
-    /// @}
-
-    private static final int CELL_PROGRESS_DIALOG = 1;
-
-    @Override
-    protected Dialog onCreateDialog(int id) {
-        //add for ipmessage
-        Dialog dlg = mIpCompose.onIpCreateDialog(id);
-        if (dlg != null) {
-            return dlg;
-        }
-
-        ProgressDialog dialog = null;
-        if (id == CELL_PROGRESS_DIALOG) {
-            dialog = new ProgressDialog(ComposeMessageActivity.this);
-            // mProgressDialog.setTitle(getText(titleResId));
-            dialog.setMessage(getString(R.string.sum_search_networks));
-            dialog.setIndeterminate(true);
-            dialog.setCancelable(false);
-            dialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
-            // / M: fix bug ALPS00451836, remove FLAG_DISMISS_KEYGUARD flags
-            if (getWindow() != null) {
-                getWindow().clearFlags(
-                        WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD
-                                | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
-            }
-        }
-        return dialog;
-    }
-
-    /// M: fix bug ALPS00941735, set Obsolete ThreadId and except it when ConversationList query
-    long mOldThreadID = -1;
-
-    boolean mIsCheckObsolete = false;
-
-    boolean mIsSameConv = true;
-
-    private void checkObsoleteThreadId() {
-        if (isRecipientsEditorVisible()) {
-            List<String> numbers =  mRecipientsEditor.getNumbers();
-            if (numbers != null && numbers.size() > 0) {
-                if (mOldThreadID > 0 && mIsCheckObsolete
-                    && mIsSameConv && !mWorkingMessage.isDiscarded()
-                    && !FolderModeUtils.getMmsDirMode()) {
-                    mIsCheckObsolete = false;
-                    mWorkingMessage.syncWorkingRecipients();
-                    long newThreadId = mWorkingMessage.getConversation().ensureThreadId();
-                    if (mOldThreadID != newThreadId) {
-                        DraftManager.sEditingThread.add(mOldThreadID);
-                        MmsLog.d(TAG, "new recipent list != old, old Obsolete thread id = "
-                            + mOldThreadID);
-                    }
-                }
-            }
-        }
-    }
-
-    /*
-     * M: reload working message when working message is not correct.
-     */
-    private void reloadWorkingMessage() {
-        if (mTempMmsUri == null) {
-            return;
-        }
-        WorkingMessage newMessage = WorkingMessage.load(this, mTempMmsUri);
-
-        if (newMessage != null) {
-            if (newMessage.hasMediaAttachments()) {
-                newMessage.removeAllFileAttaches();
-            }
-            boolean isMmsBefore = mWorkingMessage.requiresMms();
-            newMessage.setSubject(mWorkingMessage.getSubject(), false);
-
-            mWorkingMessage = newMessage;
-            updateThreadIdIfRunning();
-
-            boolean isMmsAfter = mWorkingMessage.requiresMms();
-            if (!isMmsAfter && !isMmsBefore) {
-                mWorkingMessage.setForceUpdateThreadId(true);
-            }
-        }
-    }
-
-    /**
-     * M: For Just not send length required mms with Slot one.<br>
-     * This function:check the mms is whether legnth required mms.
-     *
-     * @return
-     */
-    public boolean isLengthRequiredMms() {
-        MmsLog.d(TAG, "isLengthRequiredMms Checked");
-        if (mWorkingMessage == null) {
-            return false;
-        }
-        if (!mWorkingMessage.requiresMms()) {
-            return false;
-        }
-        if (mWorkingMessage.hasSubject()) {
-            return false;
-        }
-        if (mWorkingMessage.hasAttachedFiles()) {
-            return false;
-        }
-        if (mWorkingMessage.hasAttachment()) {
-            return false;
-        }
-        if ((mWorkingMessage.getState() & 1) > 0) {
-            return false;
-        }
-        SlideshowModel ssm = mWorkingMessage.getSlideshow();
-        if (ssm != null && ssm.size() != 1) {
-            return false;
-        } else if (ssm != null && ssm.get(0) != null && !ssm.get(0).hasText()) {
-            return false;
-        }
-        int slotId = SubscriptionManager.from(MmsApp.getApplication())
-                .getActiveSubscriptionInfo(mSelectedSubId).getSimSlotIndex();
-        if (slotId != 0) {
-            return false;
-        }
-        if (!TelephonyManager.getDefault().isNetworkRoaming(mSelectedSubId)) {
-            return false;
-        }
-        if (ssm == null && mWorkingMessage.hasText()) {
-            return true;
-        }
-        return true;
-    }
-
-    /**
-     * M: For Just not send length required mms with Slot one.<br>
-     */
-    public void confirmForChangeMmsToSms() {
-        if (!isLengthRequiredMms()) {
-            MmsLog.d(TAG, "isLengthRequiredMms Checked false");
-            mOpComposeExt.setConfirmMmsToSms(false);
-            confirmSendMessageIfNeeded();
-            return;
-        }
-        MmsLog.d(TAG, "isLengthRequiredMms Checked true");
-        new AlertDialog.Builder(this)
-            .setTitle("")
-            .setIconAttribute(android.R.attr.alertDialogIcon)
-            .setPositiveButton(R.string.yes, new OnClickListener() {
-                @Override
-                public void onClick(DialogInterface arg0, int arg1) {
-                    mOpComposeExt.setConfirmMmsToSms(false);
-                    mWorkingMessage.setLengthRequiresMms(false, false);
-                    confirmSendMessageIfNeeded();
-                }
-            }).setNegativeButton(R.string.no, new OnClickListener() {
-                @Override
-                public void onClick(DialogInterface arg0, int arg1) {
-                    mOpComposeExt.setConfirmMmsToSms(true);
-                    mWorkingMessage.setLengthRequiresMms(true, false);
-                    updateSendButtonState();
-                }
-            }).setCancelable(true).show();
-    }
-
-    /// M: Whether attachment is being added or not. @{
-    private boolean mWaitingAttachment = false;
-    public boolean isWaitingAttachment() {
-        return mWaitingAttachment;
-    }
-
-    public void setWaitingAttachment(boolean waitingAttachment) {
-        mWaitingAttachment = waitingAttachment;
-    }
-    /// @}
-
-    /// M: add for CMCC feature fix ALPS01317511 @{
-    public boolean isWorthSaving() {
-        boolean ret = false;
-        if (mWorkingMessage != null) {
-            ret = mWorkingMessage.isWorthSaving();
-        }
-        MmsLog.d(TAG, "isWorthSaving: ret = " + ret);
-        return ret;
-    }
-
-    public boolean hasValidRecipient() {
-        boolean ret = true;
-        if (isRecipientsEditorVisible()
-                && !mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms())) {
-            ret = false;
-        }
-        MmsLog.d(TAG, "hasValidRecipient: ret = " + ret);
-        return ret;
-    }
-    /// @}
-
-
-    private void stopDraftService() {
-        if (FeatureOption.MTK_GMO_ROM_OPTIMIZE) {
-            MmsLog.d(TAG, "stop Draft Service");
-            stopService(new Intent(this, DraftService.class));
-        }
-    }
-
-    /**
-     * Get Ip conversation for ip plugin.
-     * Notice: This function is also called by operator plugin(OP01). When modify this function,
-     * please notify operator team.
-     *
-     * @return IIpConversationExt
-     */
-    public IIpConversationExt getIpConversation() {
-        return mConversation.mIpConv;
-    }
-
-    /*
-     * M: ALPS01956117. If image is compressing after onStop,
-     * async save draft operation should be delayed.
-     */
-    private boolean mNeedSaveDraftAfterStop = false;
-
-    public class ComposeActivityCallback implements IComposeActivityCallback {
-
-        public void convertIpMessageToMmsOrSms(int type, boolean isAppend, String path,
-                String text, int subId) {
-            switch (type) {
-                case IpMessageUtils.IpMessageType.TEXT:
-                    mWorkingMessage.setText(text);
-                    break;
-                case IpMessageUtils.IpMessageType.PICTURE:
-                    if (!TextUtils.isEmpty(text)) {
-                        mWorkingMessage.setText(text);
-                        if (mTextEditor != null && mTextEditor.getVisibility() == View.VISIBLE) {
-                            mTextEditor.setText(text);
-                        }
-                    }
-                    File imageFile = new File(path);
-                    Uri imageUri = Uri.fromFile(imageFile);
-                    addImage(imageUri, isAppend);
-                    saveAsMms(true);
-                    break;
-                case IpMessageUtils.IpMessageType.VOICE:
-                    if (!TextUtils.isEmpty(text)) {
-                        mWorkingMessage.setText(text);
-                        if (mTextEditor != null && mTextEditor.getVisibility() == View.VISIBLE) {
-                            mTextEditor.setText(text);
-                        }
-                    }
-                    File voiceFile = new File(path);
-                    Uri voiceUri = Uri.fromFile(voiceFile);
-                    addAudio(voiceUri, isAppend);
-                    saveAsMms(true);
-                    break;
-                case IpMessageUtils.IpMessageType.VCARD:
-                    File vCardFile = new File(path);
-                    Uri vCardUri = Uri.fromFile(vCardFile);
-                    VCardAttachment va = new VCardAttachment(ComposeMessageActivity.this);
-                    String fileName = va.getVCardFileNameByUri(vCardUri);
-                    setFileAttachment(fileName, WorkingMessage.VCARD, false);
-                    saveAsMms(true);
-                    VCardUtils.deleteVCardTempFile(getApplicationContext(), fileName);
-                    break;
-                case IpMessageUtils.IpMessageType.VIDEO:
-                    if (!TextUtils.isEmpty(text)) {
-                        mWorkingMessage.setText(text);
-                        if (mTextEditor != null && mTextEditor.getVisibility() == View.VISIBLE) {
-                            mTextEditor.setText(text);
-                        }
-                    }
-                    File videoFile = new File(path);
-                    Uri videoUri = Uri.fromFile(videoFile);
-                    addVideo(videoUri, isAppend);
-                    saveAsMms(true);
-                    break;
-                case IpMessageUtils.IpMessageType.CALENDAR:
-                    File vCalendarFile = new File(path);
-                    Uri vCalendarUri = Uri.fromFile(vCalendarFile);
-                    attachVCalendar(vCalendarUri);
-                    saveAsMms(true);
-                    break;
-                default:
-                    break;
-            }
-            if (subId > 0) {
-                mSelectedSubId = subId;
-            }
-        }
-
-        public long getCurrentThreadId() {
-            return mConversation.getThreadId();
-        }
-
-        public void deleteDraftSmsMessage() {
-            mWorkingMessage.asyncDeleteDraftSmsMessage(mConversation);
-        }
-
-        @Override
-        public String getRecipientsEditorInfo() {
-            if (mRecipientsEditor != null && isRecipientsEditorVisible()) {
-                if (mRecipientsEditor.getNumbers().size() == 1) {
-                    return mRecipientsEditor.getNumbers().get(0);
-                }
-            }
-            return null;
-        }
-
-        @Override
-        public List<String> getRecipientsEditorInfoList() {
-            if (mRecipientsEditor != null && isRecipientsEditorVisible()) {
-                return mRecipientsEditor.getNumbers();
-            }
-            return null;
-        }
-
-        @Override
-        public String[] getConversationInfo() {
-            if (mConversation != null && mConversation.getRecipients() != null) {
-                return mConversation.getRecipients().getNumbers();
-            }
-            return null;
-        }
-
-        public IIpConversationExt getIpConversation() {
-            return mConversation.mIpConv;
-        }
-
-        public void callbackCheckConditionsAndSendMessage(boolean bCheckEcmMode) {
-            checkConditionsAndSendMessage(true);
-        }
-
-        public void callbackUpdateSendButtonState() {
-            updateSendButtonState();
-        }
-
-        public void callbackUpdateButtonState(boolean canResponse) {
-            mSendButtonCanResponse = canResponse;
-        }
-
-        public void callbackSendMessage(boolean bCheckEcmMode) {
-            sendMessage(bCheckEcmMode);
-        }
-
-        public void asyncDeleteDraftSmsMessage() {
-            mWorkingMessage.asyncDeleteDraftSmsMessage(mConversation);
-        }
-
-        public void addIpContacts(int pickCount, int requestCode) {
-            addContacts(pickCount, requestCode);
-        }
-
-        public long genIpThreadIdFromContacts(Intent data) {
-            return genThreadIdFromContacts(data);
-        }
-
-        public void asyncUpdateIpThreadMuteIcon() {
-            asyncUpdateThreadMuteIcon();
-        }
-
-        public void setIpOnlineDividerString(String onLine) {
-            mMsgListAdapter.setOnlineDividerString(onLine);
-        }
-
-        public void updateIpOnlineDividerTime() {
-            mMsgListAdapter.updateOnlineDividerTime();
-        }
-
-        public void notifyIpDataSetChanged() {
-            mMsgListAdapter.notifyDataSetChanged();
-        }
-
-        public void invalidateIpOptionsMenu() {
-            invalidateOptionsMenu();
-        }
-
-        public View showIpOrMmsSendButton(boolean isMms) {
-            return showSmsOrMmsSendButton(isMms);
-        }
-
-        public void setClearIpCacheFlag(boolean clearCacheFlag) {
-            mMsgListAdapter.setClearCacheFlag(clearCacheFlag);
-        }
-
-        public void setIpDraftState(boolean hasDraft) {
-            mConversation.setDraftState(hasDraft);
-        }
-
-        public void runIpAsyncInThreadPool(final Runnable backgroundTask,
-                final Runnable postExecuteTask, final int dialogStringId) {
-            mAsyncDialog.runAsyncInThreadPool(backgroundTask, postExecuteTask, dialogStringId);
-        }
-
-        public void syncIpWorkingRecipients() {
-            mWorkingMessage.syncWorkingRecipients();
-        }
-
-        public void guaranteeIpThreadId() {
-            mConversation.guaranteeThreadId();
-        }
-
-        public void onPreIpMessageSent() {
-            onPreMessageSent();
-        }
-
-        public void resetIpMessage() {
-            resetMessage();
-        }
-
-        public void onIpMessageSent() {
-            onMessageSent();
-        }
-
-        public void onIpClick(View view) {
-            onClick(view);
-        }
-
-        public boolean isIpSubjectEditorVisible() {
-            return isSubjectEditorVisible();
-        }
-
-        public void showIpSubjectEditor(boolean isShow) {
-            showSubjectEditor(isShow);
-        }
-
-        public void drawIpBottomPanel() {
-            drawBottomPanel();
-        }
-
-        public void hideIpSharePanel() {
-        }
-
-        public void addIpAttachment(int commonAttachmentType, boolean append) {
-            if (append) {
-                addAttachment(commonAttachmentType, append);
-            } else {
-                addAttachment(commonAttachmentType, !mWorkingMessage.hasAttachedFiles());
-            }
-        }
-
-        public void enableShareButton(boolean enable) {
-        }
-
-        public void resetSharePanel() {
-        }
-
-        public IWorkingMessageCallback getWorkingMessage() {
-            return mWorkingMessage;
-        }
-
-        public void hideIpRecipientEditor() {
-            hideRecipientEditor();
-        }
-
-        public void onIpSubSelection() {
-            subSelection();
-        }
-
-        public boolean isIpRecipientEditorVisible() {
-            return isRecipientsEditorVisible();
-        }
-
-        public void updateIpTitle() {
-            updateTitle(mConversation.getRecipients());
-        }
-
-        public void hideIpInputMethod() {
-            hideInputMethod();
-        }
-
-        public void showAddAttachmentDialog(final boolean append) {
-            ComposeMessageActivity.this.showAddAttachmentDialog(append);
-        }
-
-        public boolean checkSizeBeforeAppend() {
-            try {
-                mWorkingMessage.checkSizeBeforeAppend();
-            } catch (ExceedMessageSizeException e) {
-                int result = WorkingMessage.MESSAGE_SIZE_EXCEEDED;
-                handleAddAttachmentError(result, R.string.type_common_file);
-                return false;
-            }
-            return true;
-        }
-
-        public int setAttachment(int type, Uri uri, boolean append) {
-            return mWorkingMessage.setAttachment(type, uri, append);
-        }
-
-        public void handleAddAttachmentError(int result, int mediaTypeStringId) {
-            ComposeMessageActivity.this.handleAddAttachmentError(result, mediaTypeStringId);
-        }
-
-        public void checkRecipientsCountCallback() {
-            checkRecipientsCount();
-        }
-
-        public void confirmForChangeMmsToSmsCallback() {
-            confirmForChangeMmsToSms();
-        }
-
-        public void goToConversationListCallback() {
-            goToConversationList();
-        }
-
-        public void setHomeBox(int box) {
-            mHomeBox = box;
-        }
-
-        public void setHadToSlideShowEditor(boolean hadToSlideShowEditor) {
-            mHadToSlideShowEditor = hadToSlideShowEditor;
-        }
-
-        public void setWorkingMessage(IWorkingMessageCallback workingMessage) {
-            mWorkingMessage = (WorkingMessage) workingMessage;
-        }
-
-        public void updateThreadIdIfRunningCallback() {
-            updateThreadIdIfRunning();
-        }
-
-        public void drawTopPanelCallback(boolean showSubjectEditor) {
-            drawTopPanel(showSubjectEditor);
-        }
-
-        public void processNewIntentCallback(Intent intent) {
-            processNewIntent(intent);
-        }
-
-        public void updateCounterCallback(CharSequence text, int start, int before, int count) {
-            updateCounter(text, start, before, count);
-        }
-
-        public boolean isPreparedForSendingCallback() {
-            return isPreparedForSending();
-        }
-
-        public void setIsPickContatct(boolean isPickContatct) {
-            misPickContatct = isPickContatct;
-        }
-
-        public void updateSendButtonStateCallback(boolean enabled) {
-            updateSendButtonState(enabled);
-        }
-
-        public void updateTextEditorHintCallback() {
-            updateTextEditorHint();
-        }
-
-        public void setSendButtonCanResponse(boolean sendButtonCanResponse) {
-            mSendButtonCanResponse = sendButtonCanResponse;
-        }
-
-        public boolean getSendButtonCanResponse() {
-            return mSendButtonCanResponse;
-        }
-
-        public void callbackCheckBeforeSendMessage(boolean bCheckEcmMode) {
-            checkBeforeSendMessage(bCheckEcmMode);
-        }
-
-        public boolean isHasRecipientCountCallback() {
-            return isHasRecipientCount();
-        }
-
-        public void requestRecipientsEditorFocus() {
-            if (isRecipientsEditorVisible()) {
-                mRecipientsEditor.requestFocus();
-            }
-        }
-
-        public CharSequence getTextEditorText() {
-            return mTextEditor.getText();
-        }
-
-        public void hideOrShowTopPanelCallback() {
-            hideOrShowTopPanel();
-        }
-
-        public boolean getIsSmsEnabled() {
-            return mIsSmsEnabled;
-        }
-
-        public OnCreateContextMenuListener getOnCreateContextMenuListener() {
-            return mRecipientsMenuCreateListener;
-        }
-
-        public String getNumbersFromIntentCallback(Intent intent) {
-            return getNumbersFromIntent(intent);
-        }
-
-        public void confirmSendMessageIfNeededCallback() {
-            confirmSendMessageIfNeeded();
-        }
-
-        public void setSubIdCallback(int subId) {
-            setSubId(subId);
-        }
-
-        public void updateFullScreenTextEditorHeightCallback() {
-            updateFullScreenTextEditorHeight();
-        }
-
-        public void showKeyBoardCallback(boolean isShow) {
-            showKeyBoard(isShow);
-        }
-
-        public void setTextEditorMaxHeight(int linesHeight) {
-            mTextEditor.setMaxHeight(linesHeight * mCurrentMaxHeight / mReferencedMaxHeight);
-        }
-
-        public void unpreparedForSendingAlertCallback() {
-            unpreparedForSendingAlert();
-        }
-
-        public boolean showWfcSendButtonPopUpCallback() {
-            return showWfcSendButtonPopUp();
-        }
-    }
-
-    public void setCanResponse(boolean canResponse) {
-        mClickCanResponse = canResponse;
-    }
-
-    ///M: WFC: Show pop-up @ {
-    private boolean showWfcSendButtonPopUp() {
-        MmsLog.d(TAG, "showWfcSendButtonPopUp mSelectedSubId: " + mSelectedSubId);
-        if (MessagingNotification.doShowWfcPopup(mSelectedSubId, getApplicationContext())) {
-            new AlertDialog.Builder(this)
-                .setCancelable(false)
-                .setTitle(R.string.wfc_no_cellular_network)
-                .setMessage(R.string.wfc_connect_to_available_wifi)
-                .setPositiveButton(R.string.OK, new OnClickListener() {
-                    public void onClick(DialogInterface dialog, int whichButton) {
-                        dialog.dismiss();
-                    }
-            }).show();
-            return true;
-        }
-        return false;
-    }
-   /// @}
-
-    @Override
-    public void onRequestPermissionsResult(
-            final int requestCode, final String permissions[], final int[] grantResults) {
-        Log.d(TAG, " onRequestPermissionsResult Activity Count: "
-                + PermissionCheckUtil.sPermissionsActivityStarted);
-        PermissionCheckUtil.setPermissionActivityCount(false);
-        if (isAllPermissionGranted()) {
-            mNeedRequestPermissins = false;
-            if (DraftCache.getInstance() == null) {
-                MmsApp.getApplication().onRequestPermissionsResult();
-            }
-
-            //onCreate begin
-            mForwardingMessage = false;
-
-            /// M: If cell dialog is showed before, do not show it. @{
-            if (mSavedInstanceState != null
-                    && mSavedInstanceState.getBoolean("cell_dialog_showing", false)) {
-                MmsLog.d(TAG, "cell progress dialog is showed before, do not show it now");
-                mSavedInstanceState.putBundle("android:savedDialogs", null);
-            }
-            /// @}
-
-            // add for ipmessage
-            mIpCompose = IpMessageUtils.getIpMessagePlugin(this).getIpComposeActivity();
-            // add for op plugin
-            mOpComposeExt = OpMessageUtils.getOpMessagePlugin().getOpComposeExt();
-
-            mMessageSubId = (int) Settings.System.getLong(getContentResolver(),
-                    Settings.System.SMS_SIM_SETTING, Settings.System.DEFAULT_SIM_NOT_SET);
-
-            mInputMethodManager =
-                (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
-
-            /// M: Code analyze 002,  If a new ComposeMessageActivity is created, kill old one
-            Activity compose = sCompose == null ? null : sCompose.get();
-            /// M Fix CR : ALPS01275735, which has mms draft for conversation A, enter it.
-            /// change recipients froam A to B, then come a B notification , click the notification,
-            /// enter the thread A, it will show wrong composer UI.
-            /// because conversation from cache is the same. @{
-            if (compose != null && compose instanceof ComposeMessageActivity) {
-                Intent in = this.getIntent();
-                /// M : Fix issue ALPS01767850 @{
-                if (in.getBooleanExtra("from_notification", false)) {
-                    boolean b = ((ComposeMessageActivity) compose).hasValidRecipient();
-                    if (b) {
-                        mLastThreadIdFromNotification
-                                = ((ComposeMessageActivity) compose)
-                                    .mConversation.ensureThreadId();
-                        if (!((ComposeMessageActivity) compose).mWorkingMessage.hasAttachment()) {
-                            sTextEditorText
-                                    = ((ComposeMessageActivity) compose)
-                                            .mWorkingMessage.getText().toString();
-                        } else {
-                            sTextEditorText = null;
-                        }
-                    }
-                }
-                /// @}
-                long thid = in.getLongExtra("thread_id_from_notification", -1);
-                if (((ComposeMessageActivity) compose).mConversation != null) {
-                    if (thid == ((ComposeMessageActivity) compose).mConversation.getThreadId()) {
-                        ((ComposeMessageActivity) compose).mConversation.clearThreadId();
-                    }
-                }
-            }
-            /// @}
-
-            if (compose != null && !compose.isFinishing() && mSavedInstanceState == null) {
-                MmsLog.d(TAG, "onCreate finish old compose");
-                compose.finish();
-            }
-            sCompose = null;
-            sCompose = new WeakReference(this);
-            /// @}
-            /// M: Code analyze 003,  Set or get max mms size.
-            initMessageSettings();
-            /// @}
-            resetConfiguration(getResources().getConfiguration());
-            /// M: Code analyze 004, Set max height for text editor. @{
-            WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
-            if (mIsLandscape) {
-                mCurrentMaxHeight = windowManager.getDefaultDisplay().getWidth();
-            } else {
-                mCurrentMaxHeight = windowManager.getDefaultDisplay().getHeight();
-            }
-            MmsLog.d(TAG, "onCreate(): mCurrentMaxHeight = " + mCurrentMaxHeight);
-            /// @}
-            setContentView(R.layout.compose_message_activity);
-            setProgressBarVisibility(false);
-
-            mIpCompose.onIpComposeActivityCreate(this, mIpComposeCallback, mHandler, mUiHandler,
-                    (ImageButton) findViewById(R.id.send_button_sms),
-                    (TextView) findViewById(R.id.ip_message_typing_status),
-                    (TextView) findViewById(R.id.ipmsg_joyn_stranger_remind),
-                    findViewById(R.id.bottom_panel), mSavedInstanceState,
-                    (ImageButton) findViewById(R.id.share_button),
-                    (LinearLayout) findViewById(R.id.panel_container),
-                    (EditText) findViewById(R.id.embedded_text_editor));
-
-            /// M: add for update sub state dynamically. @{
-            IntentFilter intentFilter =
-                new IntentFilter(TelephonyIntents.ACTION_SUBINFO_RECORD_UPDATED);
-            mOpComposeExt.onCreate(mIpComposeCallback, getIntent(), intentFilter, compose, this,
-                    mSavedInstanceState, mUiHandler, (ImageButton) findViewById(R.id.share_button),
-                    (LinearLayout) findViewById(R.id.panel_container),
-                    (EditText) findViewById(R.id.embedded_text_editor));
-            /// @}
-
-            /// M: Code analyze 005, Set input mode. @{
-            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
-            /// @}
-
-            // Initialize members for UI elements.
-            initResourceRefs();
-            /// M: Code analyze 006, Control Sub indicator on status bar. @{
-            mStatusBarManager = (StatusBarManager) getSystemService(Context.STATUS_BAR_SERVICE);
-            mComponentName = getComponentName();
-            /// @}
-
-            /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-            mSubCount = 0;
-            /// @}
-
-            mContentResolver = getContentResolver();
-            mBackgroundQueryHandler = new BackgroundQueryHandler(mContentResolver);
-
-            initialize(mSavedInstanceState, 0, true);
-
-            if (TRACE) {
-                android.os.Debug.startMethodTracing("compose");
-            }
-            /// M: Code analyze 008,unkown . @{
-            mDestroy = false;
-
-            /// @}
-            /// M: Code analyze 009,Show attachment dialog . @{
-            mSoloAlertDialog = new SoloAlertDialog(this);
-            /// @}
-            /// M: Code analyze 007, Get information from Sub or
-            /// save message to Sub.(Get all Sub info) @{
-            mGetSubInfoRunnable.run();
-            /// @} for ALPS00475359 end
-
-            this.registerReceiver(mSubReceiver, intentFilter);
-            /// @}
-
-            //onStart begin
-            mIsActivityStoped = false;
-            boolean isSmsEnabled = MmsConfig.isSmsEnabled(this);
-            if (isSmsEnabled != mIsSmsEnabled) {
-                mIsSmsEnabled = isSmsEnabled;
-                invalidateOptionsMenu();
-            }
-            /// M Fix CR : ALPS01257113, when sub select dialog
-            /// showed in default sms. after change to
-            /// non-default sms, dismiss the sub select dialog @{
-            if (!mIsSmsEnabled) {
-                if (mSubSelectDialog != null && mSubSelectDialog.isShowing()) {
-                    mSubSelectDialog.dismiss();
-                }
-            }
-            /// @}
-
-            /// M: Code analyze 036, Change text size if adjust font size.@{
-            float textSize =
-                MessageUtils.getPreferenceValueFloat(this, SettingListActivity.TEXT_SIZE, 18);
-            setTextSize(textSize);
-            /// @}
-
-            /// M: Code analyze 013, Get contacts from Contact app . @{
-            misPickContatct = false;
-            /// @}
-            // M:for ALPS01065027,just for compose messagelist in scrolling
-            mMsgListView.setOnScrollListener(mScrollListener);
-            mScrollListener.setIsNeedRefresh(true);
-            mScrollListener.setThreadId(mConversation.getThreadId(), ComposeMessageActivity.this);
-            initFocus();
-
-            // Register a BroadcastReceiver to listen on HTTP I/O process.
-            registerReceiver(mHttpProgressReceiver, mHttpProgressFilter);
-            mOpComposeExt.onStart(this, this);
-            loadMessageContent();
-
-            // Update the fasttrack info in case any of the recipients' contact info changed
-            // while we were paused. This can happen, for example, if a user changes or adds
-            // an avatar associated with a contact.
-            /// M: @{
-            if (mConversation.getThreadId() == 0) {
-                mWorkingMessage.syncWorkingRecipients();
-            }
-            /// @}
-
-            if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                MmsLog.vpi(TAG, "onStart: update title, mConversation=" + mConversation.toString());
-            }
-
-            ActionBar actionBar = getActionBar();
-            /// M: Add log. @{
-            if (actionBar == null) {
-                MmsLog.e(TAG, "ACTION BAR is null, window feature FEATURE_ACTION_BAR: "
-                        + getWindow().hasFeature(Window.FEATURE_ACTION_BAR)
-                        + ", feature FEATURE_NO_TITLE: "
-                        + getWindow().hasFeature(Window.FEATURE_NO_TITLE));
-            } else {
-                actionBar.setDisplayHomeAsUpEnabled(true);
-            }
-            /// @}
-
-            /// M: Code analyze 047, Extra uri from message body and get number from uri.
-            /// Then use this number to update contact cache. @{
-            mNeedUpdateContactForMessageContent = true;
-            /// @}
-
-            /// M: Code analyze 001, Plugin opeartor. @{
-            new MmsDialogNotifyUtils(this).closeMsgDialog();
-            /// @}
-
-            if (isRecipientsEditorVisible() && mIsSmsEnabled &&
-                    getResources().getConfiguration().orientation
-                        != Configuration.ORIENTATION_LANDSCAPE) {
-                getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                        WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
-            }
-            ///M: WFC: Show notification ticker @ {
-            if (ImsManager.isWfcEnabledByPlatform(getApplicationContext())) {
-//                MessagingNotification.showWfcNotification(getApplicationContext());
-            }
-            /// @}
-            if (mMsgListAdapter != null) {
-                mMsgListAdapter.setOnDataSetChangedListener(mDataSetChangedListener);
-            }
-            addRecipientsListeners();
-        } else {
-            finish();
-        }
-    }
-
-    private boolean requestAllPermissions() {
-        ArrayList<String> missingList;
-        if (CtaUtils.isCtaSupported()) {
-            if (CtaUtils.isEmailMmsSupported()) {
-                missingList = PermissionCheckUtil.getMissingPermissions(this,
-                        PermissionCheckUtil.ALL_CTA_PERMISSIONS);
-            } else {
-                missingList = PermissionCheckUtil.getMissingPermissions(this,
-                        PermissionCheckUtil.ALL_CTA_PERMISSIONS_NO_SEND_MMS);
-            }
-        } else {
-            missingList = PermissionCheckUtil.getMissingPermissions(this,
-                    PermissionCheckUtil.ALL_PERMISSIONS);
-        }
-
-        if (missingList.size() == 0) {
-            Log.d(TAG, " requestAllPermissions all permissions granted");
-            return false;
-        }
-
-        final String[] missingArray = new String[missingList.size()];
-        missingList.toArray(missingArray);
-        Log.d(TAG, " requestAllPermissions all permissions start!");
-        PermissionCheckUtil.setPermissionActivityCount(true);
-        requestPermissions(missingArray,
-                PermissionCheckUtil.REQUIRED_PERMISSIONS_REQUEST_CODE);
-        return true;
-    }
-
-    private boolean isAllPermissionGranted() {
-        String[] permissions;
-        if (CtaUtils.isCtaSupported()) {
-            if (CtaUtils.isEmailMmsSupported()) {
-                permissions = PermissionCheckUtil.ALL_CTA_PERMISSIONS;
-            } else {
-                permissions = PermissionCheckUtil.ALL_CTA_PERMISSIONS_NO_SEND_MMS;
-            }
-        } else {
-            permissions = PermissionCheckUtil.ALL_PERMISSIONS;
-        }
-
-        for (int i = 0; i < permissions.length; i++) {
-            if (!PermissionCheckUtil.hasPermission(this, permissions[i])) {
-                // Show toast
-                if (PermissionCheckUtil.isRequiredPermission(permissions[i])
-                        || PermissionCheckUtil.isNeverGrantedPermission(this, permissions[i])) {
-                    if (!PermissionCheckUtil.isPermissionChecking()) {
-                        PermissionCheckUtil.showNoPermissionsToast(this);
-                    }
-                }
-                Log.d(TAG, "isAllPermissionGranted return false");
-                return false;
-            }
-        }
-
-        Log.d(TAG, "isAllPermissionGranted return true");
-        return true;
-    }
-
-    @Override
-    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
-        if (mOpComposeExt != null) {
-            mOpComposeExt.onMultiWindowModeChanged(isInMultiWindowMode);
-        }
-    }
-
-}
Index: vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/GeneralPreferenceActivity.java
===================================================================
--- vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/GeneralPreferenceActivity.java	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/GeneralPreferenceActivity.java	(revision 5228)
@@ -1,1218 +0,0 @@
-/*
- * Copyright (C) 2007-2008 Esmertec AG.
- * Copyright (C) 2007-2008 The Android Open Source Project
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.mediatek.setting;
-
-import android.Manifest;
-import android.app.ActionBar;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.ActivityNotFoundException;
-import android.content.ContentUris;
-import android.content.ContentValues;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.res.Configuration;
-import android.content.res.Resources;
-import android.content.res.Resources.NotFoundException;
-import android.database.Cursor;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.media.ExifInterface;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Environment;
-import android.os.Handler;
-import android.preference.CheckBoxPreference;
-import android.preference.Preference;
-import android.preference.PreferenceActivity;
-import android.preference.PreferenceCategory;
-import android.preference.PreferenceManager;
-import android.preference.PreferenceScreen;
-import android.provider.MediaStore;
-import android.provider.Telephony;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemClickListener;
-import android.widget.GridView;
-import android.widget.SimpleAdapter;
-import android.widget.Toast;
-
-
-import com.android.internal.telephony.PhoneConstants;
-import com.android.mms.MmsConfig;
-import com.android.mms.R;
-import com.android.mms.ui.AsyncDialog;
-import com.android.mms.ui.FontSizeDialogAdapter;
-import com.android.mms.ui.MessageUtils;
-import com.android.mms.ui.NumberPickerDialog;
-import com.android.mms.ui.UriImage;
-import com.android.mms.util.FeatureOption;
-import com.android.mms.util.MmsLog;
-import com.android.mms.util.Recycler;
-
-import com.mediatek.cb.cbsettings.CellBroadcastSettings;
-import com.mediatek.mms.ext.IOpGeneralPreferenceActivityExt;
-import com.mediatek.mms.util.PermissionCheckUtil;
-import com.mediatek.opmsg.util.OpMessageUtils;
-import com.mediatek.setting.SimStateMonitor.SimStateListener;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.ArrayList;
-import java.util.HashMap;
-
-/**
- * With this activity, users can set preferences for MMS and SMS and
- * can access and manipulate SMS messages stored on the SIM.
- */
-public class GeneralPreferenceActivity extends PreferenceActivity
-        implements Preference.OnPreferenceChangeListener, SimStateListener {
-    private static final String TAG = "GeneralPreferenceActivity";
-
-    // Symbolic names for the keys used for preference lookup
-    public static final String GENERAL_CHAT_WALLPAPER = "pref_key_chat_wallpaper";
-
-    public static final String SHOW_EMAIL_ADDRESS = "pref_key_show_email_address";
-
-    public static final String BACKUP_MESSAGE = "pref_key_backup_message";
-
-    public static final String RESTORE_MESSAGE = "pref_key_restore_message";
-
-    public static final String AUTO_DELETE = "pref_key_auto_delete";
-
-    public static final String CELL_BROADCAST = "pref_key_cell_broadcast";
-    public static final String CELL_BROADCAST_TITLE = "pref_key_cell_broadcast_title";
-
-    public static final String STORAGE_SETTING = "pref_key_storage_settings";
-
-    public static final String DISPLAY_PREFERENCE = "pref_key_display_preference_settings";
-
-    public static final String MMS_DELETE_LIMIT = "pref_key_mms_delete_limit";
-
-    public static final String SMS_DELETE_LIMIT = "pref_key_sms_delete_limit";
-
-    public static final String WAPPUSH_AUTO_DOWNLOAD = "pref_key_wappush_sl_autoloading";
-
-    public static final String WAPPUSH_SETTING = "pref_key_wappush_settings";
-
-    public static final String WAPPUSH_ENABLED = "pref_key_wappush_enable";
-
-    private static final String MAX_SMS_PER_THREAD = "MaxSmsMessagesPerThread";
-
-    private static final String MAX_MMS_PER_THREAD = "MaxMmsMessagesPerThread";
-
-    private static final String MMS_PREFERENCE = "com.android.mms_preferences";
-
-    public static final String CHAT_SETTINGS_URI = "content://mms-sms/thread_settings";
-
-    public static final String GENERAL_WALLPAPER_FOR_PROVIDER =
-                    "/data/data/com.android.providers.telephony/" +
-                    "app_wallpaper/general_wallpaper.jpeg";
-
-    private IOpGeneralPreferenceActivityExt mOpGeneralPreferenceActivityExt;
-
-    // Menu entries
-    private static final int MENU_RESTORE_DEFAULTS = 1;
-
-    private Preference mChatWallpaperPref;
-
-    private Preference mSmsLimitPref;
-
-    private Preference mMmsLimitPref;
-
-    private Recycler mSmsRecycler;
-
-    private Recycler mMmsRecycler;
-
-    private Preference mCBsettingPref;
-
-    private Preference mFontSize;
-
-    private AlertDialog mFontSizeDialog;
-
-    private String[] mFontSizeChoices;
-
-    private String[] mFontSizeValues;
-
-    private CheckBoxPreference mShowEmailPref;
-
-    private static final int FONT_SIZE_DIALOG = 10;
-
-    public static final String FONT_SIZE_SETTING = "pref_key_message_font_size";
-
-    public static final String TEXT_SIZE = "message_font_size";
-
-    public static final int TEXT_SIZE_DEFAULT = 18;
-
-    private Preference mCellBroadcastMultiSub;
-
-    private NumberPickerDialog mSmsDisplayLimitDialog;
-
-    private NumberPickerDialog mMmsDisplayLimitDialog;
-
-    private static final String LOCATION_PHONE = "Phone";
-
-    private static final String LOCATION_SIM = "Sim";
-
-    private Handler mSMSHandler = new Handler();
-
-    private Handler mMMSHandler = new Handler();
-
-    private ProgressDialog mProgressDialog = null;
-
-    public String SUB_TITLE_NAME = "sub_title_name";
-
-    private String mChatWallpaperUri = "";
-
-    private String mWallpaperPathForCamera = "";
-
-    private static final int PICK_WALLPAPER = 2;
-
-    private static final int PICK_GALLERY = 3;
-
-    private static final int PICK_PHOTO = 4;
-
-    private static final int MMS_SIZE_LIMIT_DEFAULT = 1000;
-
-    private static final int SMS_SIZE_LIMIT_DEFAULT = 10000;
-
-    boolean mNeedRequestPermissins = false;
-  /// M: fix bug ALPS01523754.set google+ pic as wallpaper.@{
-    private AsyncDialog mAsyncDialog;
-/// @}
-    private int[] mWallpaperImage = new int[] {R.drawable.wallpaper_launcher_wallpaper,
-        R.drawable.wallpaper_launcher_gallery, R.drawable.wallpaper_launcher_camera,
-        R.drawable.wallpaper_launcher_default, };
-
-    private int[] mWallpaperText = new int[] {R.string.dialog_wallpaper_chooser_wallpapers,
-        R.string.dialog_wallpaper_chooser_gallery, R.string.dialog_wallpaper_chooser_take,
-        R.string.dialog_wallpaper_chooser_default};
-
-    /// M: add for plugin
-    @Override
-    protected void onPause() {
-        super.onPause();
-        if (mSmsDisplayLimitDialog != null) {
-            mSmsDisplayLimitDialog.dismiss();
-        }
-        if (mMmsDisplayLimitDialog != null) {
-            mMmsDisplayLimitDialog.dismiss();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        if (null != mProgressDialog && mProgressDialog.isShowing()) {
-            mProgressDialog.dismiss();
-        }
-        super.onDestroy();
-    }
-
-    @Override
-    protected void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-        MmsLog.d(TAG, "onCreate");
-        if (icicle != null && icicle.containsKey("wallpaperCameraPath")) {
-           mWallpaperPathForCamera = icicle.getString("wallpaperCameraPath", "");
-        }
-        if (requestPermissions()) {
-            mNeedRequestPermissins = true;
-            return;
-        }
-        ActionBar actionBar = getActionBar();
-        actionBar.setTitle(getResources().getString(R.string.actionbar_general_setting));
-        actionBar.setDisplayHomeAsUpEnabled(true);
-        /// M: add for plugin
-        setMessagePreferences();
-    }
-
-    /// KK migration, for default MMS function. @{
-    @Override
-    protected void onResume() {
-        super.onResume();
-        if (mNeedRequestPermissins) {
-            MmsLog.d(TAG, "onResume mNeedRequestPermissins " + mNeedRequestPermissins);
-            return;
-        }
-        MmsLog.d(TAG, "onResume");
-        setMultiCardPreference();
-        boolean isSmsEnabled = MmsConfig.isSmsEnabled(this);
-        MmsLog.d(TAG, "onResume sms enable? " + isSmsEnabled);
-        if (!isSmsEnabled) {
-            finish();
-        }
-    }
-    /// @}
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        if (mNeedRequestPermissins) {
-            MmsLog.d(TAG, "onStart mNeedRequestPermissins " + mNeedRequestPermissins);
-            return;
-        }
-        SimStateMonitor.getInstance().addListener(this);
-    }
-
-    @Override
-    protected void onStop() {
-        super.onStop();
-        if (mNeedRequestPermissins) {
-            MmsLog.d(TAG, "onStop mNeedRequestPermissins " + mNeedRequestPermissins);
-            return;
-        }
-        SimStateMonitor.getInstance().removeListener(this);
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        MmsLog.dpi(TAG, "mWallpaperPathForCamera: " + mWallpaperPathForCamera);
-        outState.putString("wallpaperCameraPath", mWallpaperPathForCamera);
-    }
-
-    private void setMessagePreferences() {
-        addPreferencesFromResource(R.xml.generalpreferences);
-        mShowEmailPref = (CheckBoxPreference) findPreference(SHOW_EMAIL_ADDRESS);
-        PreferenceCategory displayOptions =
-            (PreferenceCategory) findPreference(DISPLAY_PREFERENCE);
-        displayOptions.removePreference(mShowEmailPref);
-        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);
-        MmsLog.dpi(TAG, "email address check = " + sp.getBoolean(mShowEmailPref.getKey(), true));
-        if (mShowEmailPref != null) {
-            mShowEmailPref.setChecked(sp.getBoolean(mShowEmailPref.getKey(), true));
-        }
-
-        PreferenceCategory storageCategory = (PreferenceCategory) findPreference(STORAGE_SETTING);
-        mOpGeneralPreferenceActivityExt = OpMessageUtils.getOpMessagePlugin()
-                .getOpGeneralPreferenceActivityExt();
-        mOpGeneralPreferenceActivityExt.setMessagePreferences(
-                GeneralPreferenceActivity.this, storageCategory);
-
-        mFontSize = (Preference) findPreference(FONT_SIZE_SETTING);
-        mFontSizeChoices = getResourceArray(R.array.pref_message_font_size_choices);
-        mFontSizeValues = getResourceArray(R.array.pref_message_font_size_values);
-        mFontSize = (Preference) findPreference(FONT_SIZE_SETTING);
-        mFontSize.setSummary(mFontSizeChoices[getPreferenceValueInt(FONT_SIZE_SETTING, 0)]);
-        mChatWallpaperPref = findPreference(GENERAL_CHAT_WALLPAPER);
-        // if (FeatureOption.MTK_GMO_ROM_OPTIMIZE) {
-        removeWallPaperSetting();
-        // }
-        mCBsettingPref = findPreference(CELL_BROADCAST);
-        if (SimStateMonitor.getInstance().getSubCount() < 1) {
-            mCBsettingPref.setEnabled(false);
-        }
-        PreferenceCategory mCBsettingTitlePref = (PreferenceCategory) findPreference(CELL_BROADCAST_TITLE); 
-        getPreferenceScreen().removePreference(mCBsettingTitlePref);  
-        
-        mSmsLimitPref = findPreference(SMS_DELETE_LIMIT);
-        mMmsLimitPref = findPreference(MMS_DELETE_LIMIT);
-        if (!MmsConfig.getMmsEnabled()) {
-            PreferenceCategory storageOptions
-                    = (PreferenceCategory) findPreference(STORAGE_SETTING);
-            storageOptions.removePreference(findPreference(MMS_DELETE_LIMIT));
-        }
-        enablePushSetting();
-        mSmsRecycler = Recycler.getSmsRecycler();
-        mMmsRecycler = Recycler.getMmsRecycler();
-        // Fix up the recycler's summary with the correct values
-        setSmsDisplayLimit();
-        setMmsDisplayLimit();
-        // Change the key to the SIM-related key, if has one SIM card, else set default value.
-        if (SimStateMonitor.getInstance().getSubCount() > 1) {
-            setMultiCardPreference();
-        }
-        mChatWallpaperUri = sp.getString(GENERAL_CHAT_WALLPAPER, "");
-    }
-
-    public void removeWallPaperSetting() {
-        PreferenceCategory displayOptions =
-            (PreferenceCategory) findPreference(DISPLAY_PREFERENCE);
-        displayOptions.removePreference(findPreference(GENERAL_CHAT_WALLPAPER));
-    }
-
-    private void setMultiCardPreference() {
-        // MTK_OP02_PROTECT_END
-        if (SimStateMonitor.getInstance().getSubCount() > 1) {
-            mCellBroadcastMultiSub = findPreference(CELL_BROADCAST);
-        } else {
-            mCBsettingPref = findPreference(CELL_BROADCAST);
-            mCellBroadcastMultiSub = null;
-        }
-    }
-
-    private void setMmsDisplayLimit() {
-        mMmsLimitPref.setSummary(getString(R.string.pref_summary_delete_limit,
-                mMmsRecycler.getMessageLimit(this)));
-    }
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        super.onCreateOptionsMenu(menu);
-        menu.clear();
-        menu.add(0, MENU_RESTORE_DEFAULTS, 0, R.string.restore_default);
-        return true;
-    }
-
-    private void setSmsDisplayLimit() {
-        mSmsLimitPref.setSummary(getString(R.string.pref_summary_delete_limit,
-                mSmsRecycler.getMessageLimit(this)));
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-        case MENU_RESTORE_DEFAULTS:
-            restoreDefaultPreferences();
-            return true;
-        case android.R.id.home:
-            finish();
-            return true;
-        default:
-            break;
-        }
-        return false;
-    }
-
-    @Override
-    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,
-            Preference preference) {
-        if (preference == mSmsLimitPref) {
-            mSmsDisplayLimitDialog = new NumberPickerDialog(this, mSmsLimitListener,
-                    mSmsRecycler.getMessageLimit(this), mSmsRecycler.getMessageMinLimit(),
-                    mSmsRecycler.getMessageMaxLimit(), R.string.pref_title_sms_delete);
-            mSmsDisplayLimitDialog.show();
-        } else if (preference == mCellBroadcastMultiSub) {
-            Intent it = new Intent();
-            it.setClass(this, SubSelectActivity.class);
-            it.putExtra(SmsPreferenceActivity.PREFERENCE_KEY, preference.getKey());
-            it.putExtra(SmsPreferenceActivity.PREFERENCE_TITLE_ID, R.string.cell_broadcast);
-            startActivity(it);
-        } else if (preference == mMmsLimitPref) {
-            mMmsDisplayLimitDialog = new NumberPickerDialog(this, mMmsLimitListener,
-                    mMmsRecycler.getMessageLimit(this), mMmsRecycler.getMessageMinLimit(),
-                    mMmsRecycler.getMessageMaxLimit(), R.string.pref_title_mms_delete);
-            mMmsDisplayLimitDialog.show();
-        } else if (preference == mCBsettingPref) {
-            if (SimStateMonitor.getInstance().getSubCount() == 0) {
-                MmsLog.d(TAG, "there is no sim card");
-                return true;
-            }
-            int subId = SimStateMonitor.getInstance().getSubInfoList().get(0).getSubscriptionId();
-            MmsLog.d(TAG, "mCBsettingPref subId is : " + subId);
-            if (FeatureOption.MTK_C2K_SUPPORT && MessageUtils.isUSimType(subId)) {
-                showToast(R.string.cdma_not_support);
-            } else {
-                Intent it = new Intent();
-                it.setClass(this, CellBroadcastSettings.class);
-                it.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId);
-                it.putExtra(SUB_TITLE_NAME, SimStateMonitor.getInstance()
-                        .getSubInfoList().get(0).getDisplayName().toString());
-                startActivity(it);
-            }
-        } else if (preference == mFontSize) {
-            showDialog(FONT_SIZE_DIALOG);
-        } else if (preference == mChatWallpaperPref) {
-            pickChatWallpaper();
-        }
-        return super.onPreferenceTreeClick(preferenceScreen, preference);
-    }
-
-    private void restoreDefaultPreferences() {
-        SharedPreferences.Editor editor
-                = PreferenceManager.getDefaultSharedPreferences(
-                        GeneralPreferenceActivity.this).edit();
-        editor.putInt(FONT_SIZE_SETTING, 0);
-        editor.putFloat(TEXT_SIZE, Float.parseFloat(mFontSizeValues[0]));
-        editor.putBoolean(AUTO_DELETE, false);
-        editor.putInt(MAX_SMS_PER_THREAD, SMS_SIZE_LIMIT_DEFAULT);
-        editor.putInt(MAX_MMS_PER_THREAD, MMS_SIZE_LIMIT_DEFAULT);
-        editor.putBoolean(CELL_BROADCAST, false);
-        /// M: fix bug ALPS00759844, WAPPUSH_ENABLED should be true.
-        editor.putBoolean(WAPPUSH_ENABLED, true);
-        editor.putBoolean(WAPPUSH_AUTO_DOWNLOAD, false);
-        /// M: fix bug ALPS00432361, restore default preferences
-        /// about GroupMms and ShowEmailAddress @{
-        editor.putBoolean(SHOW_EMAIL_ADDRESS, true);
-        /// @}
-        editor.apply();
-        setPreferenceScreen(null);
-        clearWallpaperAll();
-        setMessagePreferences();
-    }
-
-    @Override
-    protected Dialog onCreateDialog(int id) {
-        switch (id) {
-        case FONT_SIZE_DIALOG:
-            FontSizeDialogAdapter adapter = new FontSizeDialogAdapter(
-                    GeneralPreferenceActivity.this, mFontSizeChoices, mFontSizeValues);
-            mFontSizeDialog = new AlertDialog.Builder(GeneralPreferenceActivity.this).setTitle(
-                R.string.message_font_size_dialog_title).setNegativeButton(
-                        R.string.message_font_size_dialog_cancel,
-                new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int which) {
-                        mFontSizeDialog.dismiss();
-                    }
-                }).setSingleChoiceItems(adapter, getFontSizeCurrentPosition(),
-                        new DialogInterface.OnClickListener() {
-                public void onClick(DialogInterface dialog, int which) {
-                    SharedPreferences.Editor editor =
-                        PreferenceManager.getDefaultSharedPreferences(
-                        GeneralPreferenceActivity.this).edit();
-                    editor.putInt(FONT_SIZE_SETTING, which);
-                    editor.putFloat(TEXT_SIZE, Float.parseFloat(mFontSizeValues[which]));
-                    editor.apply();
-                    mFontSizeDialog.dismiss();
-                    mFontSize.setSummary(mFontSizeChoices[which]);
-                }
-            }).create();
-            mFontSizeDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
-                public void onDismiss(DialogInterface dialog) {
-                    GeneralPreferenceActivity.this.removeDialog(FONT_SIZE_DIALOG);
-                }
-            });
-            return mFontSizeDialog;
-        }
-        return super.onCreateDialog(id);
-    }
-
-    /*
-     * Notes: if wap push is not support, wap push setting should be removed
-     */
-    private void enablePushSetting() {
-        PreferenceCategory wapPushOptions = (PreferenceCategory) findPreference(WAPPUSH_SETTING);
-        if (FeatureOption.MTK_WAPPUSH_SUPPORT) {
-            if (!MmsConfig.getSlAutoLanuchEnabled()) {
-                wapPushOptions.removePreference(findPreference(WAPPUSH_AUTO_DOWNLOAD));
-            }
-        } else {
-            if (getPreferenceScreen() != null) {
-                getPreferenceScreen().removePreference(wapPushOptions);
-            }
-        }
-    }
-
-    @Override
-    public boolean onPreferenceChange(Preference arg0, Object arg1) {
-        // / for Sms&Mms
-        return true;
-    }
-
-    private CharSequence getVisualTextName(
-            String enumName, int choiceNameResId, int choiceValueResId) {
-        CharSequence[] visualNames = getResources().getTextArray(choiceNameResId);
-        CharSequence[] enumNames = getResources().getTextArray(choiceValueResId);
-        // Sanity check
-        if (visualNames.length != enumNames.length) {
-            return "";
-        }
-        for (int i = 0; i < enumNames.length; i++) {
-            if (enumNames[i].equals(enumName)) {
-                return visualNames[i];
-            }
-        }
-        return "";
-    }
-
-    NumberPickerDialog.OnNumberSetListener mSmsLimitListener
-            = new NumberPickerDialog.OnNumberSetListener() {
-        public void onNumberSet(int limit) {
-            if (limit <= mSmsRecycler.getMessageMinLimit()) {
-                limit = mSmsRecycler.getMessageMinLimit();
-            } else if (limit >= mSmsRecycler.getMessageMaxLimit()) {
-                limit = mSmsRecycler.getMessageMaxLimit();
-            }
-            mSmsRecycler.setMessageLimit(GeneralPreferenceActivity.this, limit);
-            setSmsDisplayLimit();
-            if (mProgressDialog == null || !mProgressDialog.isShowing()) {
-                mProgressDialog = ProgressDialog.show(
-                        GeneralPreferenceActivity.this, "", getString(R.string.deleting), true);
-            }
-            mSMSHandler.post(new Runnable() {
-                public void run() {
-                    new Thread(new Runnable() {
-                        public void run() {
-                            Recycler.getSmsRecycler().deleteOldMessages(getApplicationContext());
-                            if (FeatureOption.MTK_WAPPUSH_SUPPORT) {
-                                Recycler.getWapPushRecycler().deleteOldMessages(
-                                        getApplicationContext());
-                            }
-                            if (null != mProgressDialog && mProgressDialog.isShowing()) {
-                                mProgressDialog.dismiss();
-                            }
-                        }
-                    }, "DeleteSMSOldMsgAfterSetNum").start();
-                }
-            });
-        }
-    };
-
-    NumberPickerDialog.OnNumberSetListener mMmsLimitListener
-            = new NumberPickerDialog.OnNumberSetListener() {
-        public void onNumberSet(int limit) {
-            if (limit <= mMmsRecycler.getMessageMinLimit()) {
-                limit = mMmsRecycler.getMessageMinLimit();
-            } else if (limit >= mMmsRecycler.getMessageMaxLimit()) {
-                limit = mMmsRecycler.getMessageMaxLimit();
-            }
-            mMmsRecycler.setMessageLimit(GeneralPreferenceActivity.this, limit);
-            setMmsDisplayLimit();
-            if (mProgressDialog == null || !mProgressDialog.isShowing()) {
-                mProgressDialog = ProgressDialog.show(
-                        GeneralPreferenceActivity.this, "", getString(R.string.deleting),
-                    true);
-            }
-            mMMSHandler.post(new Runnable() {
-                public void run() {
-                    new Thread(new Runnable() {
-                        public void run() {
-                            MmsLog.d("Recycler", "mMmsLimitListener");
-                            Recycler.getMmsRecycler().deleteOldMessages(getApplicationContext());
-                            if (null != mProgressDialog && mProgressDialog.isShowing()) {
-                                mProgressDialog.dismiss();
-                            }
-                        }
-                    }, "DeleteMMSOldMsgAfterSetNum").start();
-                }
-            });
-        }
-    };
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        MmsLog.dpi(TAG, "onConfigurationChanged: newConfig = " + newConfig + ",this = " + this);
-        super.onConfigurationChanged(newConfig);
-        setTheme(R.style.MmsTheme);
-        this.getListView().clearScrapViewsIfNeeded();
-    }
-    // MTK_OP01_PROTECT_START
-    private String[] getFontSizeArray(int resId) {
-        return getResources().getStringArray(resId);
-    }
-
-    private int getFontSizeCurrentPosition() {
-        SharedPreferences sp = getSharedPreferences(MMS_PREFERENCE, MODE_PRIVATE);
-        return sp.getInt(FONT_SIZE_SETTING, 0);
-    }
-
-    // MTK_OP01_PROTECT_END
-    private void showToast(int id) {
-        Toast t = Toast.makeText(getApplicationContext(), getString(id), Toast.LENGTH_SHORT);
-        t.show();
-    }
-
-    private int getPreferenceValueInt(String key, int defaultValue) {
-        SharedPreferences sp = getSharedPreferences(
-                "com.android.mms_preferences", MODE_PRIVATE);
-        return sp.getInt(key, defaultValue);
-    }
-
-    private String[] getResourceArray(int resId) {
-        return getResources().getStringArray(resId);
-    }
-
-    public void pickChatWallpaper() {
-        AlertDialog.Builder wallpaperDialog = new AlertDialog.Builder(this);
-        ArrayList<HashMap<String, Object>> wallpaper = new ArrayList<HashMap<String, Object>>();
-        for (int i = 0; i < 4; i++) {
-            HashMap<String, Object> hm = new HashMap<String, Object>();
-            hm.put("ItemImage", mWallpaperImage[i]);
-            hm.put("ItemText", getResources().getString(mWallpaperText[i]));
-            wallpaper.add(hm);
-        }
-        SimpleAdapter wallpaperDialogAdapter
-                = new SimpleAdapter(GeneralPreferenceActivity.this, wallpaper,
-                R.layout.wallpaper_item_each, new String[] {"ItemImage", "ItemText"}, new int[] {
-                    R.id.wallpaperitemeachimageview, R.id.wallpaperitemeachtextview});
-        LayoutInflater mInflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);
-        View layout = mInflater.inflate(R.layout.wallpaper_chooser_gridview_dialog,
-            (ViewGroup) findViewById(R.id.forwallpaperchooser));
-        GridView gv = (GridView) layout.findViewById(R.id.wallpaperchooserdialog);
-        gv.setAdapter(wallpaperDialogAdapter);
-        final AlertDialog wallpaperChooser = wallpaperDialog.setTitle(
-            getResources().getString(R.string.dialog_wallpaper_title)).setView(layout).create();
-        wallpaperChooser.show();
-        gv.setOnItemClickListener(new OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
-                switch (arg2) {
-                case 0:
-                    MmsLog.d(TAG, "system begin");
-                    pickSysWallpaper();
-                    wallpaperChooser.dismiss();
-                    break;
-                case 1:
-                    pickWallpaperFromGallery();
-                    wallpaperChooser.dismiss();
-                    break;
-                case 2:
-                    pickWallpaperFromCam();
-                    wallpaperChooser.dismiss();
-                    break;
-                case 3:
-                    new Thread() {
-                        public void run() {
-                            boolean isClearAll = clearWallpaperAll();
-                            showSaveWallpaperResult(isClearAll);
-                        }
-                    } .start();
-                    wallpaperChooser.dismiss();
-                    break;
-                default:
-                    break;
-                }
-            }
-        });
-    }
-
-    public boolean clearWallpaperAll() {
-        ContentValues cv = new ContentValues();
-        cv.put(Telephony.ThreadSettings.WALLPAPER, "");
-        Uri uri = ContentUris.withAppendedId(Uri.parse(CHAT_SETTINGS_URI), 0);
-        int i = getContentResolver().update(uri, cv, null, null);
-        if (i > 0) {
-            return true;
-        }
-        return false;
-    }
-
-    private void pickWallpaperFromCam() {
-        if (getSDCardPath(this) != null) {
-            mWallpaperPathForCamera = getSDCardPath(this) + File.separator
-                + "Message_WallPaper" + File.separator
-                + "general_wallpaper_" + System.currentTimeMillis() + ".jpeg";
-            File out = new File(mWallpaperPathForCamera);
-            if (!out.getParentFile().exists()) {
-                out.getParentFile().mkdirs();
-            }
-            Uri mWallpaperTakeuri = Uri.fromFile(out);
-            Intent imageCaptureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-            imageCaptureIntent.putExtra(MediaStore.EXTRA_OUTPUT, mWallpaperTakeuri);
-            MmsLog.dpi(TAG, "MediaStoreUri: " + mWallpaperTakeuri);
-            try {
-                startActivityForResult(imageCaptureIntent, PICK_PHOTO);
-            } catch (ActivityNotFoundException e) {
-                MmsLog.e(TAG, "pickWallpaperFromCam, ActivityNotFoundException.");
-            }
-        } else {
-            MmsLog.d(TAG, "SDcard not esisted ");
-            Intent imageCaptureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-            try {
-                startActivityForResult(imageCaptureIntent, PICK_PHOTO);
-            } catch (ActivityNotFoundException e) {
-                MmsLog.e(TAG, "pickWallpaperFromCam, ActivityNotFoundException2.");
-            }
-        }
-    }
-
-    private void pickWallpaperFromGallery() {
-        Intent intent = new Intent(Intent.ACTION_PICK);
-        intent.setType("image/*");
-        try {
-            startActivityForResult(Intent.createChooser(intent, "Gallery"), PICK_GALLERY);
-        } catch (ActivityNotFoundException e) {
-            MmsLog.e(TAG, "pickWallpaperFromGallery, ActivityNotFoundException.");
-        }
-    }
-
-    public static String getSDCardPath(Context c) {
-        File sdDir = null;
-        String sdStatus = Environment.getExternalStorageState();
-        if (sdStatus != null) {
-            boolean sdCardExist = sdStatus.equals(android.os.Environment.MEDIA_MOUNTED);
-            if (sdCardExist) {
-                sdDir = Environment.getExternalStorageDirectory();
-                return sdDir.toString();
-            } else {
-                return null;
-            }
-        }
-        return null;
-    }
-
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        if (resultCode == RESULT_OK) {
-            switch (requestCode) {
-            case PICK_PHOTO:
-                pickWallpaperFromCamResult();
-                break;
-            case PICK_WALLPAPER:
-                pickWallpaperFromSys(data);
-                MmsLog.d(TAG, "sytem result");
-                break;
-            case PICK_GALLERY:
-                pickWallpaperFromGalleryResult(data);
-                break;
-            default:
-                break;
-            }
-            return;
-        } else if (resultCode == RESULT_CANCELED) {
-            MmsLog.w(TAG, "nothing selected");
-            return;
-        }
-    }
-
-    private void pickWallpaperFromGalleryResult(final Intent data) {
-        if (null == data) {
-            return;
-        }
-        final Uri mChatWallpaperGalleryUri = data.getData();
-        MmsLog.dpi(TAG, "Save wallpaper Gallery Uri: " + mChatWallpaperGalleryUri);
-        /// M: fix bug ALPS01523754.set google+ pic as wallpaper.@{
-        if (MessageUtils.isGooglePhotosUri(mChatWallpaperGalleryUri)) {
-            MmsLog.d(TAG, "isGooglePhotosUri == true");
-            getAsyncDialog().runAsync(new Runnable() {
-                @Override
-                public void run() {
-                    String wallpapertempfilePath = MessageUtils.getTempWallpaper(
-                            getApplicationContext(), mChatWallpaperGalleryUri);
-                    final String chatWallpaperCompressForGallery
-                            = compressAndRotateForMemory(wallpapertempfilePath);
-                    new Thread() {
-                        public void run() {
-                            boolean isSaveForGallery
-                                    = saveWallpaperToMemory(chatWallpaperCompressForGallery);
-                            showSaveWallpaperResult(isSaveForGallery);
-                        }
-                    } .start();
-                }
-            }, null, R.string.adding_wallpaper_title);
-            return;
-        }
-        /// @}
-
-        Cursor c = getContentResolver().query(mChatWallpaperGalleryUri, new String[] {
-                MediaStore.Images.Media.DATA
-        },
-                null, null, null);
-        String wallpaperPathForGallery = "";
-        if (c != null) {
-            try {
-                if (c.getCount() == 0) {
-                    MmsLog.d(TAG, "[pickWallpaperFromGalleryResult] c.getCount() == 0");
-                    return;
-                } else {
-                    c.moveToFirst();
-                    wallpaperPathForGallery = c.getString(0);
-                }
-            } finally {
-                c.close();
-            }
-        } else {
-            String scheme = mChatWallpaperGalleryUri.getScheme();
-            if (scheme != null && scheme.equals("file")) {
-                String path = mChatWallpaperGalleryUri.getPath();
-                File file = new File(path);
-                if (file != null && file.isFile() && file.exists()) {
-                    wallpaperPathForGallery = path;
-                } else {
-                    MmsLog.d(TAG, "[pickWallpaperFromGalleryResult] The path haven't file");
-                    return;
-                }
-            } else {
-                MmsLog.d(TAG, "[pickWallpaperFromGalleryResult] isn't file uri");
-                return;
-            }
-        }
-
-        MmsLog.dpi(TAG, "Save wallpaper Gallery Path: " + wallpaperPathForGallery);
-        final String chatWallpaperCompressForGallery
-                = compressAndRotateForMemory(wallpaperPathForGallery);
-        new Thread() {
-            public void run() {
-                boolean isSaveForGallery = saveWallpaperToMemory(chatWallpaperCompressForGallery);
-                showSaveWallpaperResult(isSaveForGallery);
-            }
-        }.start();
-        return;
-    }
-
-    void showSaveWallpaperResult(boolean isShow) {
-        if (isShow) {
-                    GeneralPreferenceActivity.this.runOnUiThread(new Runnable() {
-                        public void run() {
-                            Toast.makeText(getApplicationContext(),
-                                getResources().getString(R.string.save_wallpaper_success),
-                                Toast.LENGTH_SHORT).show();
-                        }
-                    });
-                } else {
-                    GeneralPreferenceActivity.this.runOnUiThread(new Runnable() {
-                        public void run() {
-                            Toast.makeText(getApplicationContext(),
-                                getResources().getString(R.string.save_wallpaper_fail),
-                                Toast.LENGTH_SHORT).show();
-                        }
-                    });
-                }
-            }
-
-    private void pickWallpaperFromCamResult() {
-        final String chatWallpaperCompressForCamera
-                = compressAndRotateForMemory(mWallpaperPathForCamera);
-        new Thread() {
-            public void run() {
-                boolean isSaveForCamera = saveWallpaperToMemory(chatWallpaperCompressForCamera);
-                showSaveWallpaperResult(isSaveForCamera);
-            }
-        } .start();
-        return;
-    }
-
-    private boolean saveWallpaperToMemory(String oldWallpaper) {
-        if (oldWallpaper == null) {
-            return false;
-        }
-        ContentValues cv = new ContentValues();
-        cv.put(Telephony.ThreadSettings.WALLPAPER, GENERAL_WALLPAPER_FOR_PROVIDER);
-        /*getContentResolver().update(THREAD_SETTINGS_ID_URI, cv, null, null);
-        Cursor c = getApplicationContext().getContentResolver().query(THREAD_SETTINGS_ID_URI,
-            new String[] {ThreadSettings.THREAD_ID}, null, null, null);
-        if (c == null) {
-            MmsLog.d(TAG, "cursor is null.");
-            return false;
-        }
-        boolean isSaveSuccess = false ;
-        try {
-            if (c.getCount() > 0) {
-                c.moveToFirst();
-                int firstThreadId = c.getInt(0);
-                Uri uri = ContentUris.withAppendedId(THREAD_SETTINGS_ID_URI, firstThreadId);
-                try {
-                    OutputStream o = getContentResolver().openOutputStream(uri);
-                    Bitmap bm = BitmapFactory.decodeFile(oldWallpaper);
-                    isSaveSuccess = bm.compress(Bitmap.CompressFormat.JPEG, 100, o);
-                    MmsLog.d(TAG, "decodeFile over");
-                    if (o != null) {
-                        o.close();
-                    }
-                    if (bm != null) {
-                        bm.recycle();
-                    }
-                    File tempFile = new File(oldWallpaper);
-                    if (tempFile.exists()) {
-                        tempFile.delete();
-                    }
-                } catch (FileNotFoundException e) {
-                    MmsLog.d(TAG, "FileNotFoundException", e);
-                } catch (IOException e) {
-                    MmsLog.d(TAG, "IOException", e);
-                }
-            }
-        } finally {
-            if (c != null) {
-                c.close();
-            }
-            return isSaveSuccess;
-        }*/
-        boolean isSaveSuccess = false ;
-        Uri uri = ContentUris.withAppendedId(Uri.parse(CHAT_SETTINGS_URI), 0);
-        getContentResolver().update(uri, cv, null, null);
-        try {
-            OutputStream o = getContentResolver().openOutputStream(uri);
-            Bitmap bm = BitmapFactory.decodeFile(oldWallpaper);
-            isSaveSuccess = bm.compress(Bitmap.CompressFormat.JPEG, 100, o);
-            MmsLog.d(TAG, "decodeFile over");
-            if (o != null) {
-                o.close();
-            }
-            if (bm != null) {
-                bm.recycle();
-            }
-            File tempFile = new File(oldWallpaper);
-            if (tempFile.exists()) {
-                tempFile.delete();
-            }
-        } catch (FileNotFoundException e) {
-            MmsLog.e(TAG, "FileNotFoundException", e);
-        } catch (IOException e) {
-            MmsLog.e(TAG, "IOException", e);
-        } finally {
-            return isSaveSuccess;
-        }
-    }
-
-    public File getAlbumStorageDir(String wallpaperDirName) {
-       // Get the directory for the app's private pictures directory.
-       File file = new File(getApplicationContext().getExternalFilesDir(
-               Environment.DIRECTORY_PICTURES), wallpaperDirName);
-       if (!file.mkdirs()) {
-           MmsLog.d(TAG,  "Directory not created");
-       }
-       return file;
-    }
-
-    private String compressAndRotateForMemory(String wallpaperCache) {
-        String fosFileName = null;
-        // if wallpaperCache is null, do nothing.
-        if (wallpaperCache == null) {
-            return null;
-        }
-        File mChatWallpaperPStore = new File(wallpaperCache);
-        String chatWallpaperUri = mChatWallpaperUri;
-
-        if (mChatWallpaperPStore.exists()) {
-            File mChatWallpaperMemory = getAlbumStorageDir("wallpaper_tmp");
-
-            MmsLog.d(TAG, "mChatWallpapterMemory " + mChatWallpaperMemory.getName());
-            fosFileName = mChatWallpaperMemory + "/general_wallpaper_"
-                    + System.currentTimeMillis() + ".jpeg";
-            FileOutputStream fos = null;
-            try {
-                fos = new FileOutputStream(fosFileName, true);
-            } catch (FileNotFoundException e) {
-                MmsLog.e(TAG, "compressAndRotateForMemory, FileNotFoundException");
-            }
-            BitmapFactory.Options options = new BitmapFactory.Options();
-            options.inJustDecodeBounds = true;
-            BitmapFactory.decodeFile(wallpaperCache, options);
-            options.inJustDecodeBounds = false;
-            int wallpaperHeight = options.outHeight;
-            int wallpaperWidth = options.outWidth;
-            MmsLog.d(TAG, "wallpaperHeight = " + wallpaperHeight
-                    + " wallpaperWidth = " + wallpaperWidth);
-            int ratio = MessageUtils.calculateWallpaperSize(
-                    getApplicationContext(), wallpaperHeight, wallpaperWidth);
-            MmsLog.d(TAG, "ratio: " + ratio);
-            options.inSampleSize = ratio;
-            int orientation = 0;
-            int degree = 0;
-            boolean isCopyed = false;
-            try {
-                ExifInterface exif = new ExifInterface(wallpaperCache);
-                if (exif != null) {
-                    orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 0);
-                    degree = UriImage.getExifRotation(orientation);
-                }
-            } catch (IOException e) {
-                MmsLog.e(TAG, "compressAndRotateForMemory, FileNotFoundException1");
-            }
-            Bitmap bm = BitmapFactory.decodeFile(wallpaperCache, options);
-            if (bm != null) {
-                bm = UriImage.rotate(bm, degree);
-                isCopyed = bm.compress(Bitmap.CompressFormat.JPEG, 100, fos);
-            }
-            try {
-                if (fos != null) {
-                    fos.close();
-                }
-                if (bm != null) {
-                    bm.recycle();
-                }
-                if (!isCopyed) {
-                    return null;
-                }
-            } catch (IOException e) {
-                MmsLog.e(TAG, "compressAndRotateForMemory, FileNotFoundException2: " + e);
-            }
-            try {
-                fos.close();
-                if (bm != null) {
-                    bm.recycle();
-                }
-            } catch (IOException e) {
-                MmsLog.d(TAG, "compressAndRotateForMemory, FileNotFoundException3: " + e);
-            }
-            MmsLog.d(TAG, "isCopyed: " + isCopyed);
-            if (!isCopyed) {
-                chatWallpaperUri = mChatWallpaperPStore.getPath();
-                return chatWallpaperUri;
-            }
-            chatWallpaperUri = fosFileName;
-        }
-        return chatWallpaperUri;
-    }
-
-    private void pickSysWallpaper() {
-        Intent intent = new Intent(this, WallpaperChooser.class);
-        startActivityForResult(intent, PICK_WALLPAPER);
-    }
-
-    private void pickWallpaperFromSys(Intent data) {
-        final int sourceId = data.getIntExtra("wallpaper_index", -1);
-        MmsLog.d(TAG, "sourceId: " + sourceId);
-        new Thread() {
-            public void run() {
-                boolean isSaveForSystem = saveResourceWallpaperToMemory(sourceId);
-                showSaveWallpaperResult(isSaveForSystem);
-            }
-        } .start();
-    }
-
-    private boolean saveResourceWallpaperToMemory(int resourceId) {
-        Resources r = getResources();
-        InputStream is = null;
-        try {
-            is = r.openRawResource(resourceId);
-        } catch (NotFoundException e) {
-            MmsLog.e(TAG, "NotFoundException", e);
-        }
-        Bitmap bm = BitmapFactory.decodeStream(is);
-        ContentValues cv = new ContentValues();
-        cv.put(Telephony.ThreadSettings.WALLPAPER, GENERAL_WALLPAPER_FOR_PROVIDER);
-        /*getContentResolver().update(THREAD_SETTINGS_ID_URI, cv, null, null);
-        Cursor c = getApplicationContext().getContentResolver().query(THREAD_SETTINGS_ID_URI,
-            new String[] {ThreadSettings.THREAD_ID}, null, null, null);
-        if (c == null) {
-            MmsLog.d(TAG, "cursor is null.");
-            return false;
-        }
-        boolean isSaveSuccessed = false;
-        try {
-            if (c.getCount() > 0) {
-                c.moveToFirst();
-                int firstThreadId = c.getInt(0);
-                Uri uri = ContentUris.withAppendedId(THREAD_SETTINGS_ID_URI, firstThreadId);
-                try {
-                    OutputStream o = getContentResolver().openOutputStream(uri);
-                    isSaveSuccessed = bm.compress(Bitmap.CompressFormat.JPEG, 100, o);
-                    MmsLog.d(TAG, "decodeFile over");
-                    if (o != null) {
-                        o.close();
-                    }
-                    if (bm != null) {
-                        bm.recycle();
-                    }
-                } catch (FileNotFoundException e) {
-                    MmsLog.d(TAG, "FileNotFoundException", e);
-                } catch (IOException e) {
-                    MmsLog.d(TAG, "IOException", e);
-                }
-            }
-        } finally {
-            if (c != null) {
-                c.close();
-            }
-            return isSaveSuccessed;
-        }*/
-        boolean isSaveSuccessed = false;
-        Uri uri = ContentUris.withAppendedId(Uri.parse(CHAT_SETTINGS_URI), 0);
-        getContentResolver().update(uri, cv, null, null);
-        try {
-            OutputStream o = getContentResolver().openOutputStream(uri);
-            isSaveSuccessed = bm.compress(Bitmap.CompressFormat.JPEG, 100, o);
-            MmsLog.d(TAG, "decodeFile over");
-            if (o != null) {
-                o.close();
-            }
-            if (bm != null) {
-                bm.recycle();
-            }
-        } catch (FileNotFoundException e) {
-            MmsLog.e(TAG, "FileNotFoundException", e);
-        } catch (IOException e) {
-            MmsLog.e(TAG, "IOException", e);
-        } finally {
-            return isSaveSuccessed;
-        }
-    }
-    /// M: fix bug ALPS01523754.set google+ pic as wallpaper.@{
-    private AsyncDialog getAsyncDialog() {
-        if (mAsyncDialog == null) {
-            mAsyncDialog = new AsyncDialog(this);
-        }
-        return mAsyncDialog;
-    }
-    /// @}
-
-    @Override
-    public void onSimStateChanged() {
-        MmsLog.d(TAG, "onSimStateChanged");
-        if (SimStateMonitor.getInstance().getSubCount() < 1) {
-            mCBsettingPref.setEnabled(false);
-        } else {
-            mCBsettingPref.setEnabled(true);
-            setMultiCardPreference();
-        }
-    }
-
-
-    private boolean isPermissionGranted() {
-         String[] permissions = new String[] {
-                    Manifest.permission.READ_SMS,
-                    Manifest.permission.WRITE_SMS};
-         for (int i = 0; i < permissions.length; i++) {
-            if (!PermissionCheckUtil.hasPermission(this, permissions[i])) {
-                // Show toast
-                if (PermissionCheckUtil.isRequiredPermission(permissions[i])
-                        || PermissionCheckUtil.isNeverGrantedPermission(this, permissions[i])) {
-                    if (!PermissionCheckUtil.isPermissionChecking()) {
-                        PermissionCheckUtil.showNoPermissionsToast(this);
-                    }
-                }
-                MmsLog.d(TAG, "isPermissionGranted return false");
-                return false;
-            }
-        }
-        MmsLog.d(TAG, "isPermissionGranted return true");
-        return true;
-    }
-
-    private boolean requestPermissions() {
-        String[] permissions = new String[] {
-                    Manifest.permission.READ_SMS,
-                    Manifest.permission.WRITE_SMS};
-
-        final ArrayList<String> missingList;
-        missingList = PermissionCheckUtil.getMissingPermissions(this, permissions);
-
-        if (missingList.size() == 0) {
-        MmsLog.d(TAG, "Permission granted for General activity");
-            return false;
-        }
-        final String[] missingArray = new String[missingList.size()];
-        missingList.toArray(missingArray);
-        MmsLog.d(TAG, "Request permissions start!");
-        PermissionCheckUtil.setPermissionActivityCount(true);
-        requestPermissions(missingArray,
-            PermissionCheckUtil.REQUIRED_PERMISSIONS_REQUEST_CODE);
-        return true;
-    }
-
-    @Override
-    public void onRequestPermissionsResult(
-            final int requestCode, final String permissions[], final int[] grantResults) {
-        MmsLog.d(TAG, " onRequestPermissionsResult Activity Count: "
-                + PermissionCheckUtil.sPermissionsActivityStarted);
-        PermissionCheckUtil.setPermissionActivityCount(false);
-        if (isPermissionGranted()) {
-            mNeedRequestPermissins = false;
-            ActionBar actionBar = getActionBar();
-            actionBar.setTitle(getResources().getString(R.string.actionbar_general_setting));
-            actionBar.setDisplayHomeAsUpEnabled(true);
-            setMessagePreferences();
-            SimStateMonitor.getInstance().addListener(this);
-            boolean isSmsEnabled = MmsConfig.isSmsEnabled(this);
-            MmsLog.d(TAG, "onResume sms enable? " + isSmsEnabled);
-            if (!isSmsEnabled) {
-               finish();
-            }
-        } else {
-            finish();
-        }
-    }
-}
Index: vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/SmsPreferenceActivity.java
===================================================================
--- vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/SmsPreferenceActivity.java	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/SmsPreferenceActivity.java	(revision 5228)
@@ -1,627 +0,0 @@
-/*
- * Copyright (C) 2007-2008 Esmertec AG.
- * Copyright (C) 2007-2008 The Android Open Source Project
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mediatek.setting;
-
-import android.app.ActionBar;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.content.DialogInterface;
-import android.content.DialogInterface.OnClickListener;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.preference.CheckBoxPreference;
-import android.preference.ListPreference;
-import android.preference.Preference;
-import android.preference.PreferenceActivity;
-import android.preference.PreferenceCategory;
-import android.preference.PreferenceManager;
-import android.preference.PreferenceScreen;
-import android.telephony.SubscriptionInfo;
-import android.text.InputFilter;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.Toast;
-import android.provider.Telephony;
-
-import com.android.internal.telephony.PhoneConstants;
-import com.android.mms.MmsConfig;
-import com.android.mms.R;
-import com.android.mms.ui.MessageUtils;
-import com.android.mms.ui.SmsTemplateEditActivity;
-import com.android.mms.util.MmsLog;
-
-import com.mediatek.mms.ext.IOpSmsPreferenceActivityExt;
-import com.mediatek.opmsg.util.OpMessageUtils;
-import com.mediatek.setting.SimStateMonitor.SimStateListener;
-import com.mediatek.simmessage.ManageSimMessages;
-import com.mediatek.telephony.TelephonyManagerEx;
-import android.provider.Settings.System;
-import android.provider.Settings;
-
-
-import java.util.List;
-/**
- * With this activity, users can set preferences for MMS and SMS and can access
- * and manipulate SMS messages stored on the SIM.
- */
-public class SmsPreferenceActivity extends PreferenceActivity implements
-        Preference.OnPreferenceChangeListener, SimStateListener {
-    private static final String TAG = "SmsPreferenceActivity";
-
-    private static final boolean DEBUG = false;
-
-    public static final String SMS_DELIVERY_REPORT_MODE = "pref_key_sms_delivery_reports";
-
-    public static final String SMS_QUICK_TEXT_EDITOR = "pref_key_quick_text_editor";
-
-    public static final String SMS_SERVICE_CENTER = "pref_key_sms_service_center";
-
-    public static final String SMS_MANAGE_SIM_MESSAGES = "pref_key_manage_sim_messages";
-
-    public static final String SMS_SAVE_LOCATION = "pref_key_sms_save_location";
-
-    public static final String SMS_INPUT_MODE = "pref_key_sms_input_mode";
-
-    public static final String SMS_SETTINGS = "pref_key_sms_settings";
-
-    public static final String PREFERENCE_KEY = "PREFERENCE_KEY";
-
-    public static final String PREFERENCE_TITLE_ID = "PREFERENCE_TITLE";
-
-    public static final String SETTING_SAVE_LOCATION = "Phone";
-
-    // / M: fix bug ALPS00437648, restoreDefaultPreferences in tablet
-    public static final String SETTING_SAVE_LOCATION_TABLET = "Device";
-
-    private static final String MMS_PREFERENCE = "com.android.mms_preferences";
-
-    public static final String SDCARD_DIR_PATH = "//sdcard//message//";
-
-    // Menu entries
-    private static final int MENU_RESTORE_DEFAULTS = 1;
-
-    private static final int MAX_EDITABLE_LENGTH = 20;
-
-    private Preference mSmsQuickTextEditorPref;
-
-    private Preference mManageSimPref;
-
-    private Preference mSmsServiceCenterPref;
-
-    // MTK_OP01_PROTECT_END
-    // all preferences need change key for single sim card
-    private CheckBoxPreference mSmsDeliveryReport;
-
-    private CheckBoxPreference mSmsForwardWithSender;
-
-    // all preferences need change key for multiple sim card
-    private Preference mSmsDeliveryReportMultiSim;
-
-    private Preference mSmsServiceCenterPrefMultiSim;
-
-    private Preference mManageSimPrefMultiSim;
-
-    private Preference mSmsSaveLoactionMultiSim;
-
-    private ListPreference mSmsLocation;
-
-    private ListPreference mSmsInputMode;
-
-    private static final String LOCATION_PHONE = "Phone";
-
-    private static final String LOCATION_SIM = "Sim";
-
-    private EditText mNumberText;
-
-    private AlertDialog mNumberTextDialog;
-
-    // / M: fix bug ALPS00455172, add tablet "device" support
-    private static final String DEVICE_TYPE = "pref_key_device_type";
-
-    ///M: plug-in for Op
-    private IOpSmsPreferenceActivityExt mOpSmsPreferenceActivityExt;
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        // / KK migration, for default MMS function. @{
-        boolean isSmsEnabled = MmsConfig.isSmsEnabled(this);
-        MmsLog.d(TAG, "onResume sms enable? " + isSmsEnabled);
-        if (!isSmsEnabled) {
-            finish();
-            return;
-        }
-        // / @}
-        setListPrefSummary();
-    }
-
-    private void setListPrefSummary() {
-        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);
-        // / M: fix bug ALPS00455172, add tablet "device" support
-        SharedPreferences.Editor editor = sp.edit();
-        if (!getResources().getBoolean(R.bool.isTablet)) {
-            editor.putString(DEVICE_TYPE, "Phone");
-        } else {
-            editor.putString(DEVICE_TYPE, "Device");
-        }
-        editor.commit();
-
-        // For mSmsLocation;
-        String saveLocation = "Phone";
-
-        List<SubscriptionInfo> subInfos = SimStateMonitor.getInstance().getSubInfoList();
-        if (subInfos != null && subInfos.size() == 1) {
-            int subId = subInfos.get(0).getSubscriptionId();
-            saveLocation = sp.getString((Long.toString(subId) + "_" + SMS_SAVE_LOCATION), "Phone");
-        }
-
-        if (getResources().getBoolean(R.bool.isTablet)) {
-            // /@ M: fix bug ALPS00823808, avoid empty of the sms stroe lactaion
-            // at the first time.
-            if ("Phone".equals(saveLocation)) {
-                saveLocation = "Device";
-            }
-            mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, saveLocation,
-                    R.array.pref_tablet_sms_save_location_choices,
-                    R.array.pref_tablet_sms_save_location_values));
-            // /@
-        } else {
-            mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, saveLocation,
-                    R.array.pref_sms_save_location_choices,
-                    R.array.pref_sms_save_location_values));
-        }
-    }
-
-    @Override
-    protected void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-        MmsLog.d(TAG, "onCreate");
-        mOpSmsPreferenceActivityExt = OpMessageUtils.getOpMessagePlugin()
-                .getOpSmsPreferenceActivityExt();
-        mOpSmsPreferenceActivityExt.onCreate(this);
-        ActionBar actionBar = getActionBar();
-        actionBar.setTitle(getResources().getString(R.string.actionbar_sms_setting));
-        actionBar.setDisplayHomeAsUpEnabled(true);
-        setMessagePreferences();
-        SimStateMonitor.getInstance().addListener(this);
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        SimStateMonitor.getInstance().removeListener(this);
-    }
-
-    private void setMessagePreferences() {
-        MmsLog.dpi(TAG, "setMessagePreferences SubInfoList :"
-                + SimStateMonitor.getInstance().getSubInfoList()
-                + " SubCount is :" + SimStateMonitor.getInstance().getSubCount());
-
-        if (SimStateMonitor.getInstance().getSubCount() <= 1) {
-            addPreferencesFromResource(R.xml.smspreferences);
-        } else {
-            addPreferencesFromResource(R.xml.smsmulticardpreferences);
-        }
-        mSmsLocation = (ListPreference) findPreference(SMS_SAVE_LOCATION);
-        mSmsLocation.setOnPreferenceChangeListener(this);
-        mSmsQuickTextEditorPref = findPreference(SMS_QUICK_TEXT_EDITOR);
-        ///M: do not show sim messages when sim is off. @{
-        PreferenceCategory smsCategory = (PreferenceCategory) findPreference(SMS_SETTINGS);
-        mManageSimPref = findPreference(SMS_MANAGE_SIM_MESSAGES);
-        if (!MessageUtils.isSimMessageAccessable(this)) {
-            // If there is no SIM, this item will be disabled and can not be
-            // accessed.
-            mManageSimPref.setEnabled(false);
-        }
-        /// @}
-
-        if (SimStateMonitor.getInstance().getSubCount() <= 1) {
-            mSmsServiceCenterPref = findPreference(SMS_SERVICE_CENTER);
-			
-
-            // MTK_OP02_PROTECT_END
-            if (SimStateMonitor.getInstance().getSubCount() == 0) {
-                mSmsDeliveryReport = (CheckBoxPreference) findPreference(SMS_DELIVERY_REPORT_MODE);
-                mSmsDeliveryReport.setEnabled(false);
-                mSmsServiceCenterPref.setEnabled(false);
-                // / M: fix bug ALPS00455172, add tablet "device" support
-                if (!getResources().getBoolean(R.bool.isTablet)) {
-                    mSmsLocation.setValue("Phone");
-                } else {
-                    mSmsLocation.setValue("Device");
-                }
-                mSmsLocation.setEnabled(false);
-            } else {
-                MmsLog.d(TAG, "single sim");
-                changeSingleCardKeyToSimRelated();
-            }
-        } else {
-            setMultiCardPreference();
-        }
-
-        addSmsInputModePreference();
-        mOpSmsPreferenceActivityExt.setMessagePreferences(SmsPreferenceActivity.this, smsCategory,
-                SimStateMonitor.getInstance().getSubCount());
-
-    }
-
-    // add input mode setting for op03 request, if not remove it.
-    private void addSmsInputModePreference() {
-        if (!mOpSmsPreferenceActivityExt.addSmsInputModePreference(this)) {
-            PreferenceCategory smsCategory
-                    = (PreferenceCategory) findPreference("pref_key_sms_settings");
-            mSmsInputMode = (ListPreference) findPreference(SMS_INPUT_MODE);
-            if (mSmsInputMode != null) {
-                //smsCategory.removePreference(mSmsInputMode);
-                mSmsInputMode.setOnPreferenceChangeListener(this);
-            }
-        }
-    }
-
-    private void changeSingleCardKeyToSimRelated() {
-        // get to know which one
-        if (SimStateMonitor.getInstance().getSubCount() == 0) {
-            return;
-        }
-        SubscriptionInfo singleCardInfo = null;
-        singleCardInfo = SimStateMonitor.getInstance().getSubInfoList().get(0);
-
-        if (singleCardInfo == null) {
-            return;
-        }
-        int subId = singleCardInfo.getSubscriptionId();
-        MmsLog.d(TAG, "changeSingleCardKeyToSimRelated Got simId = " + subId);
-        // translate all key to SIM-related key;
-        mSmsDeliveryReport = (CheckBoxPreference) findPreference(SMS_DELIVERY_REPORT_MODE);
-        mSmsServiceCenterPref = findPreference(SMS_SERVICE_CENTER);
-		int isAirplaneMode=Settings.System.getInt(getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0);
-		if(isAirplaneMode == 1){
-			mSmsServiceCenterPref.setEnabled(false);
-		}else{
-			mSmsServiceCenterPref.setEnabled(true);
-		}
-        mManageSimPref = findPreference(SMS_MANAGE_SIM_MESSAGES);
-
-        mManageSimPrefMultiSim = null;
-        PreferenceCategory smsCategory
-                = (PreferenceCategory) findPreference("pref_key_sms_settings");
-
-        mSmsLocation = (ListPreference) findPreference(SMS_SAVE_LOCATION);
-        mSmsLocation.setKey(Long.toString(subId) + "_" + SMS_SAVE_LOCATION);
-        SharedPreferences spr = getSharedPreferences("com.android.mms_preferences",
-                MODE_PRIVATE);
-        // /M fix bug ALPS00837998;
-        if (!getResources().getBoolean(R.bool.isTablet)) {
-            mSmsLocation.setValue(spr.getString((Long.toString(subId) + "_" + SMS_SAVE_LOCATION),
-                    "Phone"));
-        } else {
-            mSmsLocation.setValue(spr.getString((Long.toString(subId) + "_" + SMS_SAVE_LOCATION),
-                    "Device"));
-        }
-        // /@
-
-        // MTK_OP02_PROTECT_END
-
-        // get the stored value
-        SharedPreferences sp = getSharedPreferences(MMS_PREFERENCE, MODE_PRIVATE);
-        if (mSmsDeliveryReport != null) {
-            mSmsDeliveryReport.setKey(Long.toString(subId) + "_" + SMS_DELIVERY_REPORT_MODE);
-            mSmsDeliveryReport.setChecked(sp.getBoolean(mSmsDeliveryReport.getKey(), false));
-        }
-
-        mOpSmsPreferenceActivityExt.changeSingleCardKeyToSimRelated();
-    }
-
-    private void setMultiCardPreference() {
-        mSmsDeliveryReportMultiSim = findPreference(SMS_DELIVERY_REPORT_MODE);
-        mSmsServiceCenterPrefMultiSim = findPreference(SMS_SERVICE_CENTER);
-		int isAirplaneMode=Settings.System.getInt(getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0);
-		if(isAirplaneMode == 1){
-			mSmsServiceCenterPrefMultiSim.setEnabled(false);
-		}else{
-			mSmsServiceCenterPrefMultiSim.setEnabled(true);
-		}
-        mManageSimPrefMultiSim = findPreference(SMS_MANAGE_SIM_MESSAGES);
-
-        mManageSimPref = null;
-        PreferenceCategory smsCategory = (PreferenceCategory) findPreference(SMS_SETTINGS);
-
-        if (mSmsLocation != null) {
-            smsCategory.removePreference(mSmsLocation);
-            Preference saveLocationMultiSim = new Preference(this);
-            saveLocationMultiSim.setKey(SMS_SAVE_LOCATION);
-            saveLocationMultiSim.setTitle(R.string.sms_save_location);
-            saveLocationMultiSim.setSummary(R.string.sms_save_location);
-            smsCategory.addPreference(saveLocationMultiSim);
-            mSmsSaveLoactionMultiSim = findPreference(SMS_SAVE_LOCATION);
-        }
-
-        mSmsDeliveryReportMultiSim.setKey(SMS_DELIVERY_REPORT_MODE);
-        mOpSmsPreferenceActivityExt.setMultiCardPreference();
-    }
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        super.onCreateOptionsMenu(menu);
-        menu.clear();
-        menu.add(0, MENU_RESTORE_DEFAULTS, 0, R.string.restore_default);
-        return true;
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case android.R.id.home:
-                // The user clicked on the Messaging icon in the action bar.
-                // Take them back from
-                // wherever they came from
-                finish();
-                return true;
-            case MENU_RESTORE_DEFAULTS:
-                restoreDefaultPreferences();
-                return true;
-            default:
-                break;
-        }
-        return false;
-    }
-
-    @Override
-    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,
-            Preference preference) {
-        if (preference == mManageSimPref) {
-            if (SimStateMonitor.getInstance().getSubCount() != 0) {
-                int subId = SimStateMonitor
-                        .getInstance().getSubInfoList().get(0).getSubscriptionId();
-                MmsLog.d(TAG, "slotId is : " + subId);
-                if (subId != -1) {
-                    Intent it = new Intent();
-                    it.setClass(this, ManageSimMessages.class);
-                    it.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId);
-                    startActivity(it);
-                }
-            }
-        } else if (preference == mSmsQuickTextEditorPref) {
-            Intent intent = new Intent();
-            intent.setClass(this, SmsTemplateEditActivity.class);
-            startActivity(intent);
-        } else if (preference == mSmsDeliveryReportMultiSim) {
-            Intent it = new Intent();
-            it.setClass(this, SubSelectActivity.class);
-            it.putExtra(PREFERENCE_KEY, preference.getKey());
-            it.putExtra(PREFERENCE_TITLE_ID, R.string.pref_title_sms_delivery_reports);
-            startActivity(it);
-        } else if (preference == mSmsServiceCenterPref) {
-            if (SimStateMonitor.getInstance().getSubCount() == 0) {
-                MmsLog.d(TAG, "there is no sim card");
-                return true;
-            }
-            new Thread(new Runnable() {
-                public void run() {
-                    int id = SimStateMonitor.getInstance().getSubInfoList()
-                            .get(0).getSubscriptionId();
-
-                    final Bundle result = TelephonyManagerEx.getDefault()
-                            .getScAddressWithErroCode(id);
-                    runOnUiThread(new Runnable() {
-                        public void run() {
-                            if (result != null && result.getByte(
-                                    TelephonyManagerEx.GET_SC_ADDRESS_KEY_RESULT)
-                                            == TelephonyManagerEx.ERROR_CODE_NO_ERROR) {
-                                // Means Success to get SC Address
-                                AlertDialog.Builder dialog = new AlertDialog.Builder(
-                                        SmsPreferenceActivity.this);
-                                mNumberText = new EditText(dialog.getContext());
-                                mNumberText.setHint(R.string.type_to_compose_text_enter_to_send);
-                                mNumberText.computeScroll();
-                                mNumberText.setFilters(new InputFilter[] {
-                                        new InputFilter.LengthFilter(MAX_EDITABLE_LENGTH) });
-                                //mNumberText.setInputType(
-                                //        EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_CLASS_PHONE);
-                                mNumberText.setInputType(EditorInfo.TYPE_NULL);
-                                String gotScNumber = (String) result.getCharSequence(
-                                        TelephonyManagerEx.GET_SC_ADDRESS_KEY_ADDRESS);
-                                MmsLog.d(TAG, "gotScNumber is: " + gotScNumber);
-
-                                mNumberText.setText(gotScNumber);
-                                mNumberText.setTextColor(R.color.black);
-                                mNumberTextDialog = dialog.setIcon(
-                                        R.drawable.ic_dialog_info_holo_light).setTitle(
-                                        R.string.sms_service_center).setView(mNumberText)
-                                        .setPositiveButton(R.string.OK,
-                                                new PositiveButtonListener()).setNegativeButton(
-                                                        R.string.Cancel,
-                                                        new NegativeButtonListener()).show();
-                            } else if (result != null && result.getByte(
-                                    TelephonyManagerEx.GET_SC_ADDRESS_KEY_RESULT)
-                                            == TelephonyManagerEx.ERROR_CODE_NO_SUPPORT_SC_ADDR) {
-                                Toast.makeText(getApplicationContext(),
-                                        getString(R.string.cdma_not_support),
-                                        Toast.LENGTH_SHORT).show();
-                                MmsLog.dpi(TAG, "getScAddress not support error: " + result);
-                            } else {
-                                MmsLog.dpi(TAG, "getScAddress error: " + result);
-                                showToast(R.string.sms_not_ready);
-                            }
-                        }
-                    });
-                }
-            }).start();
-
-        } else if (preference == mSmsServiceCenterPrefMultiSim
-                || preference == mManageSimPrefMultiSim
-                || (preference == mSmsSaveLoactionMultiSim
-                        && SimStateMonitor.getInstance().getSubCount() > 1)) {
-            Intent it = new Intent();
-            it.setClass(this, SubSelectActivity.class);
-            it.putExtra(PREFERENCE_KEY, preference.getKey());
-            if (preference == mSmsServiceCenterPrefMultiSim) {
-                it.putExtra(PREFERENCE_TITLE_ID, R.string.sms_service_center);
-            } else if (preference == mManageSimPrefMultiSim) {
-                it.putExtra(PREFERENCE_TITLE_ID, R.string.pref_title_manage_sim_messages);
-            } else if (preference == mSmsSaveLoactionMultiSim) {
-                it.putExtra(PREFERENCE_TITLE_ID, R.string.sms_save_location);
-            }
-            startActivity(it);
-        }
-        mOpSmsPreferenceActivityExt.onPreferenceTreeClick(preferenceScreen, preference);
-        return super.onPreferenceTreeClick(preferenceScreen, preference);
-    }
-
-    // / M: added for bug ALPS00314789 begin
-    private boolean isValidAddr(String address) {
-        boolean ret = true;
-        if (address.isEmpty()) {
-            return ret;
-        }
-        if (address.charAt(0) == '+') {
-            for (int i = 1, count = address.length(); i < count; i++) {
-                if (address.charAt(i) < '0' || address.charAt(i) > '9') {
-                    ret = false;
-                    break;
-                }
-            }
-        } else {
-            for (int i = 0, count = address.length(); i < count; i++) {
-                if (address.charAt(i) < '0' || address.charAt(i) > '9') {
-                    ret = false;
-                    break;
-                }
-            }
-        }
-        return ret;
-    }
-
-    // / M: added for bug ALPS00314789 end
-    private class PositiveButtonListener implements OnClickListener {
-        public void onClick(DialogInterface dialog, int which) {
-            // write to the SIM Card.
-            // / M: added for bug ALPS00314789 begin
-            if (!isValidAddr(mNumberText.getText().toString())) {
-                String num = mNumberText.getText().toString();
-                String strUnSpFormat = getResources().getString(R.string.unsupported_media_format,
-                        "");
-                Toast.makeText(getApplicationContext(), strUnSpFormat, Toast.LENGTH_SHORT).show();
-                return;
-            }
-            // / M: added for bug ALPS00314789 end
-            final int subId;
-            subId = SimStateMonitor.getInstance().getSubInfoList().get(0).getSubscriptionId();
-            new Thread(new Runnable() {
-                public void run() {
-                    TelephonyManagerEx.getDefault().setScAddress(
-                            subId, mNumberText.getText().toString());
-                }
-            }).start();
-        }
-    }
-
-    private class NegativeButtonListener implements OnClickListener {
-        public void onClick(DialogInterface dialog, int which) {
-            // cancel
-            dialog.dismiss();
-        }
-    }
-
-    private void restoreDefaultPreferences() {
-        SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(
-                SmsPreferenceActivity.this).edit();
-        int subCount = SimStateMonitor.getInstance().getSubCount();
-        if (subCount > 0) {
-            for (int i = 0; i < subCount; i++) {
-                int subId = SimStateMonitor.getInstance().getSubInfoList().get(i)
-                        .getSubscriptionId();
-                editor.putBoolean(Long.toString(subId) + "_" + SMS_DELIVERY_REPORT_MODE, false);
-                // / M: fix bug ALPS00437648, restoreDefaultPreferences
-                // in tablet
-                if (!getResources().getBoolean(R.bool.isTablet)) {
-                    editor.putString(Long.toString(subId) + "_" + SMS_SAVE_LOCATION,
-                            SETTING_SAVE_LOCATION);
-                } else {
-                    editor.putString(Long.toString(subId) + "_" + SMS_SAVE_LOCATION,
-                            SETTING_SAVE_LOCATION_TABLET);
-                }
-            }
-        }
-
-        int count = getContentResolver().delete(Telephony.MmsSms.CONTENT_URI_QUICKTEXT, "_id!=-1" , null);
-        int allId = MmsConfig.updateAllQuicktexts();
-        MmsConfig.setInitQuickText(true);
-
-        mOpSmsPreferenceActivityExt.restoreDefaultPreferences(this, editor);
-        editor.putString(SMS_INPUT_MODE, "Automatic"); // Add this
-        editor.apply();
-        setPreferenceScreen(null);
-        setMessagePreferences();
-        setListPrefSummary();
-    }
-
-    @Override
-    public boolean onPreferenceChange(Preference preference, Object arg1) {
-        if (mOpSmsPreferenceActivityExt.onPreferenceChange(preference, arg1)) {
-            return true;
-        }
-
-        final String key = preference.getKey();
-        if (SMS_INPUT_MODE.equals(key)) {
-            MmsLog.d(TAG, "Input Mode Changed");
-            mSmsInputMode.setValue((String) arg1);
-        } else if (preference == mSmsLocation && !(SimStateMonitor.getInstance().getSubCount() > 1)) {
-            if (!getResources().getBoolean(R.bool.isTablet)) {
-                mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, (String) arg1,
-                        R.array.pref_sms_save_location_choices,
-                        R.array.pref_sms_save_location_values));
-            } else {
-                mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, (String) arg1,
-                        R.array.pref_tablet_sms_save_location_choices,
-                        R.array.pref_tablet_sms_save_location_values));
-            }
-        }
-
-        return true;
-    }
-
-    private void showToast(int id) {
-        Toast t = Toast.makeText(getApplicationContext(), getString(id), Toast.LENGTH_SHORT);
-        t.show();
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        MmsLog.d(TAG, "onConfigurationChanged: newConfig = " + newConfig + ",this = " + this);
-        super.onConfigurationChanged(newConfig);
-        // for Migration change,maybe need check
-        (this.getListView()).clearScrapViewsIfNeeded();
-    }
-
-    @Override
-    public void onSimStateChanged() {
-        MmsLog.d(TAG, "onSimStateChanged");
-        Dialog locationDialog = mSmsLocation.getDialog();
-        if (mNumberTextDialog != null && mNumberTextDialog.isShowing()) {
-            mNumberTextDialog.dismiss();
-        }
-        if (locationDialog != null && locationDialog.isShowing()) {
-            locationDialog.dismiss();
-        }
-        setPreferenceScreen(null);
-        setMessagePreferences();
-        setListPrefSummary();
-    }
-
-}
Index: vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/res/xml/generalpreferences.xml
===================================================================
--- vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/res/xml/generalpreferences.xml	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/res/xml/generalpreferences.xml	(revision 5228)
@@ -1,62 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-    <!--
-        /* * Copyright (C) 2007-2008 Esmertec AG. * Copyright (C) 2007-2008 The
-        Android Open Source Project * * Licensed under the Apache License,
-        Version 2.0 (the "License"); * you may not use this file except in
-        compliance with the License. * You may obtain a copy of the License at *
-        * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by
-        applicable law or agreed to in writing, software * distributed under the
-        License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR
-        CONDITIONS OF ANY KIND, either express or implied. * See the License for
-        the specific language governing permissions and * limitations under the
-        License. */
-    -->
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <PreferenceCategory android:title="@string/pref_title_display_preference_settings"
-        android:key="pref_key_display_preference_settings">
-        <Preference android:key="pref_key_chat_wallpaper"
-            android:title="@string/pref_chat_wallpaper" />
-        <Preference android:key="pref_key_message_font_size"
-            android:title="@string/pref_title_message_font_size"
-            android:summary="@string/pref_summary_message_font_size" />
-        <CheckBoxPreference android:defaultValue="true"
-            android:key="pref_key_show_email_address" android:title="@string/pref_show_email_address"
-            android:summary="@string/pref_summary_show_email_address" />
-    </PreferenceCategory>
-
-    <PreferenceCategory android:title="@string/pref_sms_storage_title"
-        android:key="pref_key_storage_settings">
-        <CheckBoxPreference android:defaultValue="false"
-            android:key="pref_key_auto_delete" android:summary="@string/pref_summary_auto_delete"
-            android:title="@string/pref_title_auto_delete" />
-        <Preference android:layout="?android:attr/preferenceLayoutChild"
-            android:key="pref_key_sms_delete_limit"
-            android:dependency="pref_key_auto_delete" android:persistent="false"
-            android:summary="@string/pref_summary_delete_limit" android:title="@string/pref_title_sms_delete" />
-        <Preference android:layout="?android:attr/preferenceLayoutChild"
-            android:key="pref_key_mms_delete_limit"
-            android:dependency="pref_key_auto_delete" android:persistent="false"
-            android:summary="@string/pref_summary_delete_limit" android:title="@string/pref_title_mms_delete" />
-    </PreferenceCategory>
-
-    <PreferenceCategory 
-    	android:key="pref_key_cell_broadcast_title" 
-    	android:title="@string/cell_broadcast_title">
-        <Preference android:key="pref_key_cell_broadcast"
-            android:title="@string/cell_broadcast" android:summary="@string/cell_broadcast_settings"
-            android:persistent="false">
-        </Preference>
-    </PreferenceCategory>
-
-    <PreferenceCategory android:title="@string/pref_title_wappush_settings"
-        android:key="pref_key_wappush_settings">
-        <CheckBoxPreference android:defaultValue="true"
-            android:key="pref_key_wappush_enable" android:summary="@string/pref_summary_wappush_enable"
-            android:title="@string/pref_title_wappush_enable" />
-        <CheckBoxPreference android:defaultValue="false"
-            android:key="pref_key_wappush_sl_autoloading" android:dependency="pref_key_wappush_enable"
-            android:summary="@string/pref_summary_wappush_sl_autoloading"
-            android:title="@string/pref_title_wappush_sl_autoloading" />
-    </PreferenceCategory>
-</PreferenceScreen>
-
Index: vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpComposeExt.java
===================================================================
--- vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpComposeExt.java	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpComposeExt.java	(revision 5228)
@@ -1,502 +0,0 @@
-/* Copyright Statement:
- *
- * This software/firmware and related documentation ("MediaTek Software") are
- * protected under relevant copyright laws. The information contained herein
- * is confidential and proprietary to MediaTek Inc. and/or its licensors.
- * Without the prior written permission of MediaTek inc. and/or its licensors,
- * any reproduction, modification, use or disclosure of MediaTek Software,
- * and information contained herein, in whole or in part, shall be strictly prohibited.
- *
- * MediaTek Inc. (C) 2012. All rights reserved.
- *
- * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
- * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
- * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
- * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
- * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
- * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
- * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
- * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
- * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
- * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
- * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
- * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
- * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
- * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
- * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
- * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
- *
- * The following software/firmware and/or related documentation ("MediaTek Software")
- * have been modified by MediaTek Inc. All revisions are subject to any receiver's
- * applicable license agreements with MediaTek Inc.
- */
-
-package com.mediatek.mms.ext;
-
-import android.app.Activity;
-import android.content.AsyncQueryHandler;
-import android.content.Context;
-import android.content.ContextWrapper;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-import android.telephony.SubscriptionInfo;
-import android.util.Log;
-import android.view.ContextMenu;
-import android.view.ContextMenu.ContextMenuInfo;
-import android.view.KeyEvent;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.EditText;
-import android.widget.ImageButton;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.google.android.mms.pdu.PduBody;
-
-import com.mediatek.mms.callback.IComposeActivityCallback;
-import com.mediatek.mms.callback.IMessageItemCallback;
-import com.mediatek.mms.callback.IMessageListAdapterCallback;
-import com.mediatek.mms.callback.IRecipientsEditorCallback;
-import com.mediatek.mms.callback.ISlideshowModelCallback;
-import com.mediatek.mms.callback.ITextSizeAdjustHost;
-import com.mediatek.mms.callback.IWorkingMessageCallback;
-
-import java.util.ArrayList;
-import java.util.List;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-
-import android.telephony.SmsMessage;
-
-
-public class DefaultOpComposeExt extends ContextWrapper implements IOpComposeExt {
-    private static final String TAG = "Mms/MmsComposeImpl";
-
-    public DefaultOpComposeExt(Context context) {
-        super(context);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item, IOpWorkingMessageExt workingMessageExt,
-            InputMethodManager inputMethodManager) {
-        return false;
-    }
-
-    @Override
-    public void showSubjectEditor(EditText subjectEditor) {
-        return;
-    }
-
-    @Override
-    public void setConfirmMmsToSms(boolean needConfirm) {
-    }
-
-    public void addCallAndContactMenuItems(Context context, ContextMenu menu, int menuId,
-            ArrayList<String> urls, IMessageItemCallback msgItem) {
-        Log.d(TAG, "addCallAndContactMenuItems addMmsUrlToBookMark");
-        return;
-    }
-
-    @Override
-    public int getMessageAndSaveToSub(String[] numbers, String scAddress,
-            ArrayList<String> messages, int smsStatus,
-            long timeStamp, int subId, int srcResult) {
-        return srcResult;
-    }
-
-    @Override
-    public boolean asyncAttachVCardByContactsId(boolean append) {
-        return false;
-    }
-
-    @Override
-    public boolean processNewIntent(Intent intent) {
-        return false;
-    }
-
-    @Override
-    public boolean subSelectionDialog(int subId) {
-        return false;
-    }
-
-    @Override
-    public void editSlideshow(boolean hadToSlideShowEditor) {
-
-    }
-
-    @Override
-    public boolean onNewIntent(final Intent intent, boolean hadToSlideShowEditor, Uri tempMmsUri,
-            final IWorkingMessageCallback workingMessage, Object activity,
-            IRecipientsEditorCallback recipientsEditor, final int box) {
-        return false;
-    }
-
-    @Override
-    public boolean showMessageDetails(String timeStamp) {
-        return false;
-    }
-
-    @Override
-    public boolean updateCounter(CharSequence text, TextView textCounter,
-            IWorkingMessageCallback workingMessageCallback) {
-        return false;
-    }
-
-    @Override
-    public boolean updateCounterUiRun(TextView textEditor, int remainingInCurrentMessage,
-            int msgCount, IWorkingMessageCallback workingMessageCallback) {
-        return false;
-    }
-
-    @Override
-    public boolean onDeleteMessageListenerClick(AsyncQueryHandler backQueryHandler, long msgId,
-            long timeStamp) {
-        return false;
-    }
-
-    @Override
-    public boolean confirmSendMessageIfNeeded(boolean isRecipientsEditorVisible,
-            boolean hasInvalidRecipient) {
-        return false;
-    }
-
-    @Override
-    public boolean onCreateContextMenu(boolean isSmsEnabled, boolean isSms, int subCount,
-            boolean isSending, MenuItem.OnMenuItemClickListener l, ContextMenu menu, View v,
-            ContextMenuInfo menuInfo, long messageGroupId, int messagesCount) {
-        return false;
-    }
-
-    @Override
-    public boolean forwardMessage(Context context, IMessageItemCallback msgItem,
-            String nameAndNumber, Intent intent) {
-        return false;
-    }
-
-    @Override
-    public void editMmsMessageItem(IOpWorkingMessageExt opWorkingMessageExt) {
-    }
-
-    @Override
-    public boolean lockMessage(Context context, Uri uri, long msgId, long timeStamp, boolean lock) {
-        return false;
-    }
-
-    @Override
-    public String updateTitle(int cnt, String number, String subTitle) {
-        return subTitle;
-    }
-
-    @Override
-    public void initRecipientsEditor(Bundle bundle, View recipientsCcEditor) {
-    }
-
-    @Override
-    public void onStart(ITextSizeAdjustHost host, Activity activity) {
-
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-    }
-
-    @Override
-    public void onResume(int subCount, String text, boolean isSmsEnabled,
-            View recipientsEditor, View subjectTextEditor) {
-    }
-
-    @Override
-    public boolean onProtocolChanged(boolean isMms, CharSequence text) {
-        return false;
-    }
-
-    @Override
-    public boolean onPrepareOptionsMenu(Menu menu, boolean isSmsEnabled,
-            boolean isRecipientsEditorVisible, int contactsSize, long threadId) {
-        return false;
-    }
-
-    @Override
-    public void drawBottomPanel(boolean hasSlideshow, boolean isUpdateAttachEditor,
-            boolean isSmsEnabled) {
-    }
-
-    @Override
-    public boolean onClick(View v, ImageButton recipientsPicker) {
-        return false;
-    }
-
-    @Override
-    public boolean dispatchTouchEvent(MotionEvent ev) {
-        return false;
-    }
-
-    @Override
-    public void initResourceRefs(LinearLayout buttonWithCounter, TextView textCounter,
-                                 IOpAttachmentEditorExt attachmentEditor) {
-    }
-
-    @Override
-    public Uri startMsgListQuery(Uri conversationUri, long threadId) {
-        return conversationUri;
-    }
-
-    @Override
-    public void saveDraft(IOpWorkingMessageExt opWorkingMessageExt) {
-    }
-
-    @Override
-    public boolean sendMessage(IOpWorkingMessageExt opWorkingMessageExt, int subId) {
-        return false;
-    }
-
-    @Override
-    public void resetMessage() {
-    }
-
-    @Override
-    public boolean updateSendButtonState(boolean requiresMms, int recipientCount,
-            int smsRecipientLimit, int subCount) {
-        return false;
-    }
-
-    @Override
-    public boolean initFocus() {
-        return false;
-    }
-
-    @Override
-    public boolean handleUiMessage(Message msg, int subCount, int selectedSubId) {
-        return false;
-    }
-
-    @Override
-    public String showSubSelectedDialog(String src) {
-        return src;
-    }
-
-    public boolean addContacts(Intent intent, int pickCount, int requestCode) {
-        return false;
-    }
-
-    @Override
-    public void onSubInforChanged() {
-    }
-
-    @Override
-    public boolean onReceive(String action, Runnable getSubInfoRunnable) {
-        return false;
-    }
-
-    @Override
-    public void getSubInfoRunnable(boolean hasSlideshow) {
-    }
-
-    @Override
-    public boolean attachVCalendar(
-            boolean append,
-            int type,
-            Uri uri,
-            int mediaTypeStringId) {
-        return false;
-    }
-
-    @Override
-    public String checkRecipientsCount(String message, boolean requiresMms,
-            int recipientCount, int mmsLimitCount, boolean isRecipientsEditorEmpty,
-            boolean isConversationRecipientEmpty, Intent intent,
-            IMessageListAdapterCallback msgListAdapter,
-            List<SubscriptionInfo> subInfoList,
-            boolean isRecipientsEditorVisible) {
-        return message;
-    }
-
-
-    @Override
-    public void drawTopPanel(boolean isRecipientsEditorVisible,
-            IOpWorkingMessageExt opWorkingMessageExt) {
-        // TODO Auto-generated method stub
-
-    }
-
-    @Override
-    public boolean handleAttachmentEditorHandlerMessage(Message msg, boolean sendButtonCanResponse,
-            IWorkingMessageCallback opWorkingMessageCallback, ISlideshowModelCallback slideshow,
-            boolean compressingImage) {
-        return false;
-    }
-
-    @Override
-    public boolean haveSomethingToCopyToSDCard(Context context, PduBody body) {
-        return false;
-    }
-
-    @Override
-    public boolean onActivityResult(int requestCode, Intent data,
-            IOpWorkingMessageExt newOpWorkingMessageExt,
-            IOpWorkingMessageExt opWorkingMessageExt) {
-        return false;
-    }
-
-    @Override
-    public void onCreate(IComposeActivityCallback ipComposeActivityCallback, Intent intent,
-            IntentFilter intentFilter, Activity oldCompose, Activity compose,
-            Bundle savedInstanceState, Handler uiHandler, ImageButton shareButton,
-            LinearLayout panel,  EditText textEditor) {
-    }
-
-    @Override
-    public boolean onMenuItemClick(MenuItem item, IOpMessageItemExt opMessageItemExt,
-            Intent intentMultiSave, Intent deliveryIntent) {
-        return false;
-    }
-
-    @Override
-    public Uri onQueryMsgListRun(Uri uriSrc, long threadId) {
-        return uriSrc;
-    }
-
-    @Override
-    public int getSmsEncodingType(int encodingType, Context context) {
-    	int type = SmsMessage.ENCODING_UNKNOWN;
-    	SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-    	String encodingTypeStr = null;
-    	encodingTypeStr = prefs.getString("pref_key_sms_input_mode", "Automatic");
-    	if ("Unicode".equals(encodingTypeStr)) {
-            type = SmsMessage.ENCODING_16BIT;
-    	} else if ("GSM alphabet".equals(encodingTypeStr)) {
-            type = SmsMessage.ENCODING_7BIT;
-    	}
-    	return type;
-        //return encodingType;
-    }
-    
-    public static int getSmsEncodingTypes(int encodingType, Context context) {
-    	int type = SmsMessage.ENCODING_UNKNOWN;
-    	SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-    	String encodingTypeStr = null;
-    	encodingTypeStr = prefs.getString("pref_key_sms_input_mode", "Automatic");
-    	if ("Unicode".equals(encodingTypeStr)) {
-            type = SmsMessage.ENCODING_16BIT;
-    	} else if ("GSM alphabet".equals(encodingTypeStr)) {
-            type = SmsMessage.ENCODING_7BIT;
-    	}
-    	return type;
-        //return encodingType;
-    }
-
-    @Override
-    public boolean checkConditionsAndSendMessage(boolean isMms, final boolean bcheckMode) {
-        return false;
-    }
-
-    @Override
-    public void onDiscardDraftListenerClick() {
-    }
-
-    @Override
-    public boolean hideOrShowTopPanel(View topPanel) {
-        return false;
-    }
-
-    @Override
-    public void initActivityState(Intent intent) {
-    }
-
-    @Override
-    public int subSelection() {
-        return 0;
-    }
-
-    @Override
-    public boolean onMessageListItemHandler(Message msg, String timestamp) {
-        return false;
-    }
-
-    @Override
-    public void chipOnCreateContextMenu(ContextMenu menu) {
-    }
-
-    @Override
-    public boolean updateSendButton(boolean enabled, int subCount, boolean requiresMms,
-                                boolean hasSlideshow) {
-        return false;
-    }
-
-    @Override
-    public void onConfigurationChanged() {
-    }
-
-    @Override
-    public boolean onKeyDown(int keyCode, KeyEvent event) {
-        return false;
-    }
-
-    @Override
-    public boolean onLayoutSizeChanged(boolean isSoftKeyBoardShow) {
-        return false;
-    }
-
-    @Override
-    public void onRecipientsEditorFocusChange(boolean hasFocus) {
-    }
-
-    @Override
-    public void onRecipientsEditorTouch() {
-    }
-
-    @Override
-    public void onSubjectTextEditorFocusChange(boolean hasFocus) {
-    }
-
-    @Override
-    public void onSubjectTextEditorTouch() {
-    }
-
-    @Override
-    public void onTextEditorTouch() {
-    }
-
-    @Override
-    public void resetConfiguration(boolean isLandscapeOld,
-            boolean isLandscapeNew, boolean isSoftKeyBoardShow) {
-    }
-
-    @Override
-    public boolean updateFullScreenTextEditorHeight() {
-        return false;
-    }
-
-    @Override
-    public boolean onInitialize(Intent intent, IOpWorkingMessageExt opWorkingMessageExt) {
-        return false;
-    }
-
-    @Override
-    public void onDestroy() {
-    }
-
-    @Override
-    public boolean sendMessageForDualSendButton() {
-       return false;
-    }
-
-    @Override
-    public void initResourceRefsOnResume(LinearLayout buttonWithCounter, TextView textCounter,
-                                 IOpAttachmentEditorExt attachmentEditor) {
-    }
-
-    @Override
-    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
-    }
-
-}
Index: vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpSmsSingleRecipientSenderExt.java
===================================================================
--- vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpSmsSingleRecipientSenderExt.java	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpSmsSingleRecipientSenderExt.java	(revision 5228)
@@ -1,29 +0,0 @@
-package com.mediatek.mms.ext;
-
-import android.app.PendingIntent;
-import android.content.Context;
-
-import java.util.ArrayList;
-
-
-public class DefaultOpSmsSingleRecipientSenderExt implements IOpSmsSingleRecipientSenderExt {
-
-    @Override
-    public boolean sendMessage(Context context, int subId, String dest, String serviceCenter,
-            ArrayList<String> messages, ArrayList<PendingIntent> sentIntents,
-            ArrayList<PendingIntent> deliveryIntents) {
-        return false;
-    }
-
-    @Override
-    public boolean sendOpMessage(Context context, int subId,
-            ArrayList<PendingIntent> deliveryIntents) {
-        return false;
-    }
-
-    @Override
-    public int sendMessagePrepare(Context context, int codingType) {
-    	return DefaultOpComposeExt.getSmsEncodingTypes(codingType, context); // Add this
-        //return codingType;
-    }
-}
Index: vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/external/EccList/ecc_list.xml
===================================================================
--- vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/external/EccList/ecc_list.xml	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/vendor/mediatek/proprietary/external/EccList/ecc_list.xml	(revision 5228)
@@ -1,69 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<EccTable>
-    <!--
-        The attribute definition for tag EccEntry:
-        - Ecc: the emergnecy number
-        - Category: the service category (From 3GPP TS24.008)
-            - Bit 1 (1): Police
-            - Bit 2 (2): Ambulance
-            - Bit 3 (4): Fire Brigade
-            - Bit 4 (8): Marine Guard
-            - Bit 5 (16): Mountain Rescue
-            - Bit 6 (32): Manually initiated eCall
-            - Bit 7 (64): Automatically initiated eCall
-            - Bit 8 (128): is spare and set to "0"
-        - Condition: there are following values:
-            - 0: ecc only when no sim
-            - 1: ecc always
-            - 2: MMI will show ecc but send to nw as normal call
-        - Plmn: ecc for specific operator
-                format: xxx xx (for specific mnc) or xxx FFF (for all mnc under same mcc)
-
-        NOTICE: Please list operator specific emergency numbers before common emergency numbers
-                defined by 3GPP spec 22.101
-    -->
-
-	<EccEntry Ecc="122" Category="0" Condition="1" Plmn = "740 00" />
-	<EccEntry Ecc="122" Category="0" Condition="1" Plmn = "740 01" />
-	<EccEntry Ecc="122" Category="0" Condition="1" Plmn = "740 02" />
-	
-	<EccEntry Ecc="911" Category="0" Condition="1" Plmn = "740 00" />
-	<EccEntry Ecc="911" Category="0" Condition="1" Plmn = "740 01" />
-	<EccEntry Ecc="911" Category="0" Condition="1" Plmn = "740 02" />
-	
-    <!-- Add for China CTA -->
-    <EccEntry Ecc="110" Category="0" Condition="2" Plmn = "460 FFF" />
-    <EccEntry Ecc="119" Category="0" Condition="2" Plmn = "460 FFF" />
-    <EccEntry Ecc="120" Category="0" Condition="2" Plmn = "460 FFF" />
-    <EccEntry Ecc="122" Category="0" Condition="2" Plmn = "460 FFF" />
-
-    <!-- Add for Malaysis Digi operator -->
-    <EccEntry Ecc="999" Category="0" Condition="1" Plmn = "502 FFF" />
-
-    <!-- Add for Thailand TrueMove operator (520 00/04) -->
-    <EccEntry Ecc="112" Category="1" Condition="1" Plmn = "520 00" />
-    <EccEntry Ecc="191" Category="1" Condition="1" Plmn = "520 00" />
-    <EccEntry Ecc="911" Category="1" Condition="1" Plmn = "520 00" />
-    <EccEntry Ecc="199" Category="4" Condition="1" Plmn = "520 00" />
-    <EccEntry Ecc="1669" Category="2" Condition="1" Plmn = "520 00" />
-    <EccEntry Ecc="112" Category="1" Condition="1" Plmn = "520 04" />
-    <EccEntry Ecc="191" Category="1" Condition="1" Plmn = "520 04" />
-    <EccEntry Ecc="911" Category="1" Condition="1" Plmn = "520 04" />
-    <EccEntry Ecc="199" Category="4" Condition="1" Plmn = "520 04" />
-    <EccEntry Ecc="1669" Category="2" Condition="1" Plmn = "520 04" />
-
-    <!-- Add for Taiwan APTG operator (466 05) -->
-    <EccEntry Ecc="110" Category="1" Condition="1" Plmn = "466 05" />
-    <EccEntry Ecc="112" Category="4" Condition="1" Plmn = "466 05" />
-    <EccEntry Ecc="119" Category="2" Condition="1" Plmn = "466 05" />
-
-    <!-- 3GPP 22.101 -->
-    <EccEntry Ecc="112" Category="0" Condition="1" />
-    <EccEntry Ecc="911" Category="0" Condition="1" />
-    <EccEntry Ecc="000" Category="0" Condition="0" />
-    <EccEntry Ecc="08" Category="0" Condition="0" />
-    <EccEntry Ecc="110" Category="0" Condition="0" />
-    <EccEntry Ecc="118" Category="0" Condition="0" />
-    <EccEntry Ecc="119" Category="0" Condition="0" />
-    <EccEntry Ecc="999" Category="0" Condition="0" />
-</EccTable>
Index: vendor/branch/5058A_Entel_Chile/device/ausshine/aus6739_66_n1/full_aus6739_66_n1.mk
===================================================================
--- vendor/branch/5058A_Entel_Chile/device/ausshine/aus6739_66_n1/full_aus6739_66_n1.mk	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/device/ausshine/aus6739_66_n1/full_aus6739_66_n1.mk	(revision 5228)
@@ -1,52 +0,0 @@
-# Inherit for devices that support 64-bit primary and 32-bit secondary zygote startup script
-$(call inherit-product, $(SRC_TARGET_DIR)/product/core_64_bit.mk)
-
-# Inherit from those products. Most specific first.
-#$(call inherit-product, $(SRC_TARGET_DIR)/product/full_base_telephony.mk)
-# Inherit from those products. Most specific first.
-$(call inherit-product, $(SRC_TARGET_DIR)/product/full_base.mk)
-
-# Set target and base project for flavor build
-MTK_TARGET_PROJECT := $(subst full_,,$(TARGET_PRODUCT))
-MTK_BASE_PROJECT := $(MTK_TARGET_PROJECT)
-MTK_PROJECT_FOLDER := $(shell find device/* -maxdepth 1 -name $(MTK_BASE_PROJECT))
-MTK_TARGET_PROJECT_FOLDER := $(shell find device/* -maxdepth 1 -name $(MTK_TARGET_PROJECT))
-
-# This is where we'd set a backup provider if we had one
-#$(call inherit-product, device/sample/products/backup_overlay.mk)
-# Inherit from maguro device
-$(call inherit-product, device/ausshine/$(MTK_TARGET_PROJECT)/device.mk)
-
-# set locales & aapt config.
-include $(MTK_TARGET_PROJECT_FOLDER)/ProjectConfig.mk
-#ifneq (,$(filter OP01%, $(OPTR_SPEC_SEG_DEF)))
-  #ifeq ($(OP01_COMPATIBLE), yes)
-    #PRODUCT_LOCALES:=zh_CN en_US zh_TW ja_JP en_GB fr_FR
-  #else
-   # PRODUCT_LOCALES:=zh_CN en_US zh_TW
-  #endif
-#else ifneq (,$(filter OP09%, $(OPTR_SPEC_SEG_DEF)))
-  #PRODUCT_LOCALES:=zh_CN zh_HK zh_TW en_US pt_BR pt_PT en_GB fr_FR ja_JP
-#else
-  #PRODUCT_LOCALES := en_US zh_CN zh_TW es_ES pt_BR ru_RU fr_FR de_DE tr_TR vi_VN ms_MY in_ID th_TH it_IT ar_EG hi_IN bn_IN ur_PK fa_IR pt_PT nl_NL el_GR hu_HU tl_PH ro_RO cs_CZ ko_KR km_KH iw_IL my_MM pl_PL es_US bg_BG hr_HR lv_LV lt_LT sk_SK uk_UA de_AT da_DK fi_FI nb_NO sv_SE en_GB hy_AM zh_HK et_EE ja_JP kk_KZ sr_RS sl_SI ca_ES
-#endif
-
-PRODUCT_LOCALES:=es_US en_US pt_BR pt_PT fr_FR
-
-# Set those variables here to overwrite the inherited values.
-PRODUCT_MANUFACTURER := alps
-PRODUCT_NAME := full_aus6739_66_n1
-PRODUCT_DEVICE := aus6739_66_n1
-PRODUCT_MODEL := aus6739_66_n1
-PRODUCT_POLICY := android.policy_phone
-PRODUCT_BRAND := alps
-
-ifeq ($(TARGET_BUILD_VARIANT), eng)
-KERNEL_DEFCONFIG ?= aus6739_66_n1_debug_defconfig
-else
-KERNEL_DEFCONFIG ?= aus6739_66_n1_defconfig
-endif
-PRELOADER_TARGET_PRODUCT ?= aus6739_66_n1
-LK_PROJECT ?= aus6739_66_n1
-TRUSTY_PROJECT ?= aus6739_66_n1
-$(call inherit-product, device/cdfinger/cdfinger_product_64bit.mk)
\ No newline at end of file
Index: vendor/branch/5058A_Entel_Chile/device/ausshine/aus6739_66_n1/system.prop
===================================================================
--- vendor/branch/5058A_Entel_Chile/device/ausshine/aus6739_66_n1/system.prop	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/device/ausshine/aus6739_66_n1/system.prop	(revision 5228)
@@ -1,101 +0,0 @@
-#
-# system.prop for generic sdk
-#
-
-rild.libpath=mtk-ril.so
-rild.libargs=-d /dev/ttyC0
-
-
-# MTK, Infinity, 20090720 {
-wifi.interface=wlan0
-# MTK, Infinity, 20090720 }
-
-# MTK, mtk03034, 20101210 {
-ro.mediatek.wlan.wsc=1
-# MTK, mtk03034 20101210}
-# MTK, mtk03034, 20110318 {
-ro.mediatek.wlan.p2p=1
-# MTK, mtk03034 20110318}
-
-# MTK, mtk03034, 20101213 {
-mediatek.wlan.ctia=0
-# MTK, mtk03034 20101213}
-
-
-#
-wifi.tethering.interface=ap0
-#
-
-ro.opengles.version=196610
-# ro.kernel.qemu=1
-# ro.kernel.qemu.gles=0
-
-wifi.direct.interface=p2p0
-#dalvik.vm.heapgrowthlimit=256m
-#dalvik.vm.heapsize=512m
-
-# USB MTP WHQL
-ro.sys.usb.mtp.whql.enable=0
-
-# Power off opt in IPO
-sys.ipo.pwrdncap=2
-
-ro.sys.usb.storage.type=mtp
-
-# USB BICR function
-ro.sys.usb.bicr=no
-
-# USB Charge only function
-ro.sys.usb.charging.only=yes
-
-# audio
-ro.camera.sound.forced=0
-ro.audio.silent=0
-
-ro.zygote.preload.enable=0
-
-# temporary enables NAV bar (soft keys)
-qemu.hw.mainkeys=0
-
-ro.kernel.zio=38,108,105,16
-#ro.kernel.qemu=1
-#ro.kernel.qemu.gles=0
-#ro.boot.selinux=disable
-
-# Disable dirty region for Mali
-#debug.hwui.render_dirty_regions=false
-
-ro.sf.lcd_density=320
-
-# performance
-ro.mtk_perf_simple_start_win=1
-ro.mtk_perf_fast_start_win=1
-ro.mtk_perf_response_time=1
-
-# disable ipo for development
-sys.ipo.disable=1
-
-# shutdown audio
-ro.operator.optr=CUST
-# shutdown animation
-persist.operator.optr=CUST
-
-ro.customer.commercial.name=5058A
-ro.product.hardware.id=Proto
-ro.tct.curef.default=5058A-2*EECL1
-ro.def.software.version=SP_ALCATEL_3X_1.0
-ro.def.svn.version=021 01
-ro.def.hardware.version=PIO
-ro.mtk_default_ime=com.android.inputmethod.latin
-ro.business.name=ALCATEL 3X
-ro.business.name.email=Alcatel
-ro.mtk_gemini_support = 0
-persist.sys.timezone = America/Santiago
-ro.com.android.dataroaming=false
-
-ro.com.google.clientidbase = android-alcatel
-ro.com.google.clientidbase.am = android-alcatel
-ro.com.google.clientidbase.ms = android-alcatel
-
-persist.radio.fd.r8.legacy.off = 1
-ro.camera_default_picture_size=0x0010
\ No newline at end of file
Index: vendor/branch/5058A_Entel_Chile/device/mediatek/common/device.mk
===================================================================
--- vendor/branch/5058A_Entel_Chile/device/mediatek/common/device.mk	(revision 5227)
+++ vendor/branch/5058A_Entel_Chile/device/mediatek/common/device.mk	(revision 5228)
@@ -1,3223 +0,0 @@
-# this is platform common device config
-# you should migrate turnkey alps/build/target/product/common.mk to this file in correct way
-
-# TARGET_PREBUILT_KERNEL should be assigned by central building system
-#ifeq ($(TARGET_PREBUILT_KERNEL),)
-#LOCAL_KERNEL := device/mediatek/common/kernel
-#else
-#LOCAL_KERNEL := $(TARGET_PREBUILT_KERNEL)
-#endif
-
-#PRODUCT_COPY_FILES += $(LOCAL_KERNEL):kernel
-
-# MediaTek framework base modules
-PRODUCT_PACKAGES += \
-    mediatek-common \
-    mediatek-framework \
-    CustomPropInterface \
-    mediatek-telephony-common
-
-# yv12 implementation of wallpaper
-PRODUCT_PACKAGES += libyv12util
-
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),NONE)
-PRODUCT_PACKAGES += \
-    FwkPlugin
-endif
-
-
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-# Override the PRODUCT_BOOT_JARS to include the MediaTek system base modules for global access
-PRODUCT_BOOT_JARS += \
-    mediatek-common \
-    mediatek-framework \
-
-ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-PRODUCT_BOOT_JARS += \
-    mediatek-telephony-common
-endif
-
-endif
-
-# Telephony
-PRODUCT_COPY_FILES += device/mediatek/common/apns-conf.xml:system/etc/apns-conf.xml:mtk
-PRODUCT_COPY_FILES += device/mediatek/common/spn-conf.xml:system/etc/spn-conf.xml:mtk
-
-# Audio
-ifeq ($(findstring maxim, $(MTK_AUDIO_SPEAKER_PATH)), maxim)
-    PRODUCT_PACKAGES += libdsm
-    PRODUCT_PACKAGES += libdsmconfigparser
-    PRODUCT_PACKAGES += libdsm_interface
-else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),smartpa_nxp_tfa9887)
-    PRODUCT_PACKAGES += libtfa9887_interface
-else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),smartpa_nxp_tfa9890)
-    PRODUCT_PACKAGES += libtfa9890_interface
-else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),smartpa_richtek_rt5509)
-    PRODUCT_PACKAGES += librt_extamp_intf
-
-    ifeq ($(MTK_AUDIO_NUMBER_OF_SPEAKER),)
-        PRODUCT_COPY_FILES += \
-            vendor/mediatek/proprietary/hardware/smartpa/richtek/rt_mono_device.xml:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt_device.xml:mtk
-    else ifeq ($(MTK_AUDIO_NUMBER_OF_SPEAKER),$(filter $(MTK_AUDIO_NUMBER_OF_SPEAKER),1))
-        PRODUCT_COPY_FILES += \
-            vendor/mediatek/proprietary/hardware/smartpa/richtek/rt_mono_device.xml:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt_device.xml:mtk
-    else ifeq ($(MTK_AUDIO_NUMBER_OF_SPEAKER),$(filter $(MTK_AUDIO_NUMBER_OF_SPEAKER),2))
-        PRODUCT_COPY_FILES += \
-            vendor/mediatek/proprietary/hardware/smartpa/richtek/rt_multi_device.xml:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt_device.xml:mtk
-    endif
-    PRODUCT_COPY_FILES += \
-        $(call add-to-product-copy-files-if-exists, $(MTK_TARGET_PROJECT_FOLDER)/rt_device.xml:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt_device.xml:mtk)
-
-    PRODUCT_COPY_FILES += \
-        vendor/mediatek/proprietary/hardware/smartpa/richtek/rt5509_calibration:$(TARGET_COPY_OUT_VENDOR)/bin/rt5509_calibration:mtk
-    PRODUCT_COPY_FILES += \
-        device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/smartpa_param/rt5509_param:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt5509_param:mtk
-    PRODUCT_COPY_FILES += \
-        $(call add-to-product-copy-files-if-exists, $(MTK_TARGET_PROJECT_FOLDER)/rt5509_param:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt5509_param:mtk)
-endif
-
-PRODUCT_COPY_FILES += device/mediatek/common/audio_em.xml:$(TARGET_COPY_OUT_VENDOR)/etc/audio_em.xml:mtk
-
-RAT_CONFIG = $(strip $(MTK_PROTOCOL1_RAT_CONFIG))
-ifneq (,$(RAT_CONFIG))
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_protocol1_rat_config=$(RAT_CONFIG)
-  ifneq (,$(findstring C,$(RAT_CONFIG)))
-    # C2K is supported
-    RAT_CONFIG_C2K_SUPPORT=yes
-  endif
-  ifneq (,$(findstring L,$(RAT_CONFIG)))
-    # LTE is supported
-    RAT_CONFIG_LTE_SUPPORT=yes
-  endif
-endif
-
-# For C2K CDMA feature file
-ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-PRODUCT_COPY_FILES += frameworks/native/data/etc/android.hardware.telephony.cdma.xml:system/etc/permissions/android.hardware.telephony.cdma.xml
-endif
-
-ifeq ($(strip $(MTK_TELEPHONY_FEATURE_SWITCH_DYNAMICALLY)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_telephony_switch=1
-endif
-
-ifeq ($(strip $(MTK_MP2_PLAYBACK_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_support_mp2_playback=1
-endif
-
-ifeq ($(strip $(MTK_AUDIO_ALAC_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_alac_support=1
-endif
-
-#MTB
-PRODUCT_PACKAGES += mtk_setprop
-
-#MMS
-ifeq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifndef MTK_TB_WIFI_3G_MODE
-        PRODUCT_PACKAGES += messaging
-    else
-        ifeq ($(strip $(MTK_TB_WIFI_3G_MODE)), 3GDATA_SMS)
-            PRODUCT_PACKAGES += messaging
-        endif
-    endif
-endif
-
-ifeq ($(strip $(MTK_BSP_PACKAGE)), yes)
-    ifndef MTK_TB_WIFI_3G_MODE
-        PRODUCT_PACKAGES += messaging
-    else
-        ifeq ($(strip $(MTK_TB_WIFI_3G_MODE)), 3GDATA_SMS)
-            PRODUCT_PACKAGES += messaging
-        endif
-    endif
-endif
-
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-        ifneq ($(strip $(MTK_A1_FEATURE)), yes)
-            ifndef MTK_TB_WIFI_3G_MODE
-                PRODUCT_PACKAGES += MtkMms
-            else
-                ifeq ($(strip $(MTK_TB_WIFI_3G_MODE)), 3GDATA_SMS)
-                    PRODUCT_PACKAGES += MtkMms
-                endif
-            endif
-        endif
-    endif
-endif
-
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-        PRODUCT_PACKAGES += MtkCalendar
-        PRODUCT_PACKAGES += MtkBrowser
-        PRODUCT_PACKAGES += MtkQuickSearchBox
-        PRODUCT_PACKAGES += MtkWebView
-    endif
-endif
-
-# Telephony begin
-PRODUCT_PACKAGES += muxreport
-PRODUCT_PACKAGES += mtkrild
-PRODUCT_PACKAGES += mtk-ril
-PRODUCT_PACKAGES += libutilrilmtk
-PRODUCT_PACKAGES += gsm0710muxd
-PRODUCT_PACKAGES += mtkrildmd2
-PRODUCT_PACKAGES += mtk-rilmd2
-PRODUCT_PACKAGES += librilmtkmd2
-PRODUCT_PACKAGES += gsm0710muxdmd2
-
-ifeq ($(strip $(MTK_RIL_MODE)), c6m_1rild)
-    PRODUCT_PACKAGES += libmtk-ril
-    PRODUCT_PACKAGES += mtkfusionrild
-    PRODUCT_PACKAGES += librilfusion
-    PRODUCT_PACKAGES += riltest
-    ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-        PRODUCT_PACKAGES += libvia-ril
-    endif
-endif
-
-PRODUCT_PACKAGES += md_minilog_util
-PRODUCT_PACKAGES += SimRecoveryTestTool
-PRODUCT_PACKAGES += ppl_agent
-PRODUCT_PACKAGES += libratconfig
-# External SIM support
-ifeq ($(strip $(MTK_EXTERNAL_SIM_SUPPORT)), yes)
-    PRODUCT_PACKAGES += libvsim-adaptor-client
-endif
-
-# Remote SIM unlock
-ifeq ($(strip $(SIM_ME_LOCK_MODE)), 1)
-    PRODUCT_PACKAGES += libsimmelock
-endif
-
-ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-#For C2K RIL
-PRODUCT_PACKAGES += \
-          viarild \
-          libc2kril \
-          libviatelecom-withuim-ril \
-          viaradiooptions \
-          librpcril \
-          ctclient
-
-#Set CT6M_SUPPORT
-ifeq ($(strip $(CT6M_SUPPORT)), yes)
-PRODUCT_PACKAGES += CdmaSystemInfo
-PRODUCT_PROPERTY_OVERRIDES += ro.ct6m_support=1
-  ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-      PRODUCT_COPY_FILES += vendor/mediatek/proprietary/frameworks/base/telephony/etc/spn-conf-op09.xml:$(TARGET_COPY_OUT_VENDOR)/etc/spn-conf-op09.xml:mtk
-    endif
-  endif
-endif
-
-#For PPPD
-PRODUCT_PACKAGES += \
-          ip-up-cdma \
-          ipv6-up-cdma \
-          link-down-cdma \
-          pppd_via
-
-#For C2K control modules
-PRODUCT_PACKAGES += \
-          libc2kutils \
-          flashlessd \
-          statusd
-endif
-
-ifeq ($(MTK_RIL_MODE), c6m_1rild)
-# IMSM(93)
-PRODUCT_PACKAGES += volte_imsm_93
-else
-# MAL shared library
-PRODUCT_PACKAGES += libmdfx
-PRODUCT_PACKAGES += libmal_mdmngr
-PRODUCT_PACKAGES += libmal_nwmngr
-PRODUCT_PACKAGES += libmal_rilproxy
-PRODUCT_PACKAGES += libmal_simmngr
-PRODUCT_PACKAGES += libmal_datamngr
-PRODUCT_PACKAGES += libmal_rds
-PRODUCT_PACKAGES += libmal_epdga
-PRODUCT_PACKAGES += libmal_imsmngr
-PRODUCT_PACKAGES += libmal
-
-PRODUCT_PACKAGES += volte_imsm
-PRODUCT_PACKAGES += volte_imspa
-
-# MAL-Dongle shared library
-PRODUCT_PACKAGES += libmd_mdmngr
-PRODUCT_PACKAGES += libmd_rilproxy
-PRODUCT_PACKAGES += libmd_simmngr
-PRODUCT_PACKAGES += libmd_datamngr
-PRODUCT_PACKAGES += libmd_nwmngr
-PRODUCT_PACKAGES += libmd
-
-# # Volte IMS shared library
-PRODUCT_PACKAGES += volte_imspa_md
-
-# Add for (VzW) chipset test
-ifneq ($(strip $(MTK_VZW_CHIPTEST_MODE_SUPPORT)), 0)
-PRODUCT_PACKAGES += libatch
-PRODUCT_PACKAGES += libatcputil
-PRODUCT_PACKAGES += atcp
-PRODUCT_PACKAGES += libswext_plugin
-PRODUCT_PACKAGES += libnetmngr_plugin
-
-PRODUCT_PACKAGES += liblannetmngr_core
-PRODUCT_PACKAGES += liblannetmngr_api
-PRODUCT_PACKAGES += lannetmngrd
-PRODUCT_PACKAGES += lannetmngr_test
-endif
-
-endif
-
-# VoLTE Process
-ifeq ($(strip $(MTK_IMS_SUPPORT)),yes)
-PRODUCT_PACKAGES += Gba
-PRODUCT_PACKAGES += libipsec_ims_shr
-
-ifneq ($(MTK_RIL_MODE), c6m_1rild)
-# MAL Process
-PRODUCT_PACKAGES += mtkmal
-
-# # Volte IMS Dongle Process
-PRODUCT_PACKAGES += volte_imsm_md
-endif
-
-
-else
-    ifeq ($(strip $(MTK_EPDG_SUPPORT)),yes) # EPDG without IMS
-
-    ifneq ($(MTK_RIL_MODE), c6m_1rild)
-    # MAL Process
-    PRODUCT_PACKAGES += mtkmal
-
-    # # Volte IMS Dongle Process
-#    PRODUCT_PACKAGES += volte_imsm_md
-    endif
-
-    endif
-endif
-
-# include init.volte.rc
-ifeq ($(MTK_IMS_SUPPORT),yes)
-    ifneq ($(wildcard $(MTK_TARGET_PROJECT_FOLDER)/init.volte.rc),)
-        PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/init.volte.rc:root/init.volte.rc
-    else
-        ifneq ($(wildcard $(MTK_PROJECT_FOLDER)/init.volte.rc),)
-            PRODUCT_COPY_FILES += $(MTK_PROJECT_FOLDER)/init.volte.rc:root/init.volte.rc
-        else
-            PRODUCT_COPY_FILES += device/mediatek/common/init.volte.rc:root/init.volte.rc
-        endif
-    endif
-endif
-
-#include multi_init.rc in meta mode and factory mode.
-PRODUCT_COPY_FILES += device/mediatek/common/multi_init.rc:root/multi_init.rc
-
-PRODUCT_PACKAGES += llibmtk_vt_swip
-PRODUCT_PACKAGES += libmtk_vt_utils
-PRODUCT_PACKAGES += libmtk_vt_wrapper
-PRODUCT_PACKAGES += libmtk_vt_service
-PRODUCT_PACKAGES += vtservice
-
-# WFCA Process
-ifeq ($(strip $(MTK_WFC_SUPPORT)),yes)
-  PRODUCT_PACKAGES += wfca
-endif
-
-
-# Hwui program binary service
-PRODUCT_PACKAGES += program_binary_service
-PRODUCT_PACKAGES += program_binary_builder
-
-ifeq ($(strip $(MTK_RCS_SUPPORT)),yes)
-PRODUCT_PACKAGES += Gba
-endif
-
-ifeq ($(strip $(MTK_PRIVACY_PROTECTION_LOCK)),yes)
-  PRODUCT_PACKAGES += PrivacyProtectionLock
-endif
-
-ifeq ($(strip $(MTK_USB_CBA_SUPPORT)),yes)
-  PRODUCT_PACKAGES += UsbChecker
-endif
-
-ifeq ($(strip $(GOOGLE_RELEASE_RIL)), yes)
-    PRODUCT_PACKAGES += libril
-else
-    PRODUCT_PACKAGES += librilmtk
-endif
-# Telephony end
-
-# For MTK Camera
-PRODUCT_PACKAGES += Camera
-PRODUCT_PACKAGES += Panorama
-PRODUCT_PACKAGES += NativePip
-PRODUCT_PACKAGES += SlowMotion
-PRODUCT_PACKAGES += CameraRoot
-
-PRODUCT_DEFAULT_PROPERTY_OVERRIDES += camera.disable_zsl_mode=1
-
-PRODUCT_PACKAGES += libBnMtkCodec
-PRODUCT_PACKAGES += MtkCodecService
-PRODUCT_PACKAGES += autokd
-RODUCT_PACKAGES += \
-    dhcp6c \
-    dhcp6ctl \
-    dhcp6c.conf \
-    dhcp6cDNS.conf \
-    dhcp6s \
-    dhcp6s.conf \
-    dhcp6c.script \
-    dhcp6cctlkey \
-    libifaddrs
-
-# meta tool
-ifeq ($(MTK_INTERNAL),yes)
-ifneq ($(wildcard vendor/mediatek/proprietary/buildinfo/label.ini),)
-  include vendor/mediatek/proprietary/buildinfo/label.ini
-  ifeq ($(MTK_BUILD_VERNO),ALPS.W10.24.p0)
-    MTK_BUILD_VERNO := $(MTK_INTERNAL_BUILD_VERNO)
-  endif
-  ifeq ($(MTK_WEEK_NO),W10.24)
-    MTK_WEEK_NO := $(MTK_INTERNAL_WEEK_NO)
-  endif
-endif
-endif
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/buildinfo/branch.mk)
-PRODUCT_PROPERTY_OVERRIDES += ro.mediatek.version.release=$(strip $(MTK_BUILD_VERNO))
-PRODUCT_PROPERTY_OVERRIDES += ro.mediatek.version.sdk=4
-
-# To specify customer's releasekey
-ifeq ($(MTK_INTERNAL),yes)
-  PRODUCT_DEFAULT_DEV_CERTIFICATE := device/mediatek/common/security/releasekey
-else
-  ifeq ($(MTK_SIGNATURE_CUSTOMIZATION),yes)
-    ifeq ($(wildcard device/mediatek/common/security/$(strip $(MTK_TARGET_PROJECT))),)
-      $(error Please create device/mediatek/common/security/$(strip $(MTK_TARGET_PROJECT))/ and put your releasekey there!!)
-    else
-      PRODUCT_DEFAULT_DEV_CERTIFICATE := device/mediatek/common/security/$(strip $(MTK_TARGET_PROJECT))/releasekey
-    endif
-  else
-#   Not specify PRODUCT_DEFAULT_DEV_CERTIFICATE and the default testkey will be used.
-  endif
-endif
-
-# Handheld core hardware
-PRODUCT_COPY_FILES += frameworks/native/data/etc/handheld_core_hardware.xml:system/etc/permissions/handheld_core_hardware.xml
-
-# Bluetooth Low Energy Capability
-PRODUCT_COPY_FILES += frameworks/native/data/etc/android.hardware.bluetooth_le.xml:system/etc/permissions/android.hardware.bluetooth_le.xml
-
-# Bluetooth DUN profile
-ifeq ($(MTK_BT_BLUEDROID_DUN_GW_12),yes)
-PRODUCT_PROPERTY_OVERRIDES += bt.profiles.dun.enabled=1
-PRODUCT_PACKAGES += pppd_btdun libpppbtdun.so
-endif
-
-# Bluetooth BIP profile cover art feature
-ifeq ($(MTK_BT_BLUEDROID_AVRCP_TG_16),yes)
-  PRODUCT_PROPERTY_OVERRIDES += bt.profiles.bip.coverart.enable=1
-endif
-
-# Customer configurations
-ifneq ($(wildcard $(MTK_TARGET_PROJECT_FOLDER)/custom.conf),)
-PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/custom.conf:$(TARGET_COPY_OUT_VENDOR)/etc/custom.conf:mtk
-else
-ifdef OPTR_SPEC_SEG_DEF
-    ifneq ($(strip $(OPTR_SPEC_SEG_DEF)),NONE)
-        OPTR := $(word 1,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-        SPEC := $(word 2,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-        SEG  := $(word 3,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-        ifneq ($(wildcard vendor/mediatek/proprietary/operator/$(OPTR)/$(SPEC)/$(SEG)/custom.conf),)
-        PRODUCT_COPY_FILES += vendor/mediatek/proprietary/operator/$(OPTR)/$(SPEC)/$(SEG)/custom.conf:$(TARGET_COPY_OUT_VENDOR)/etc/custom.conf:mtk
-        else
-        PRODUCT_COPY_FILES += device/mediatek/common/custom.conf:$(TARGET_COPY_OUT_VENDOR)/etc/custom.conf:mtk
-        endif
-    else
-        PRODUCT_COPY_FILES += device/mediatek/common/custom.conf:$(TARGET_COPY_OUT_VENDOR)/etc/custom.conf:mtk
-    endif
-else
-    PRODUCT_COPY_FILES += device/mediatek/common/custom.conf:$(TARGET_COPY_OUT_VENDOR)/etc/custom.conf:mtk
-endif
-endif
-
-# Recovery
-PRODUCT_COPY_FILES += $(MTK_PROJECT_FOLDER)/recovery.fstab:$(TARGET_COPY_OUT_VENDOR)/etc/recovery.fstab:mtk
-
-ifndef MTK_PLATFORM_DIR
-  ifneq ($(wildcard device/mediatek/$(MTK_PLATFORM)),)
-    MTK_PLATFORM_DIR = $(MTK_PLATFORM)
-  else
-    MTK_PLATFORM_DIR = $(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')
-  endif
-endif
-
-ifeq ($(wildcard device/mediatek/$(MTK_PLATFORM_DIR)),)
-  $(error the platform dir changed, expected: device/mediatek/$(MTK_PLATFORM_DIR), please check manually)
-endif
-
-# GMS interface
-ifdef BUILD_GMS
-ifeq ($(strip $(BUILD_GMS)), yes)
-$(call inherit-product-if-exists, vendor/google/products/gms.mk)
-
-PRODUCT_PROPERTY_OVERRIDES += \
-      ro.com.google.clientidbase=alps-$(TARGET_PRODUCT)-{country} \
-      ro.com.google.clientidbase.ms=alps-$(TARGET_PRODUCT)-{country} \
-      ro.com.google.clientidbase.yt=alps-$(TARGET_PRODUCT)-{country} \
-      ro.com.google.clientidbase.am=alps-$(TARGET_PRODUCT)-{country} \
-      ro.com.google.clientidbase.gmm=alps-$(TARGET_PRODUCT)-{country}
-endif
-endif
-
-# prebuilt interface
-$(call inherit-product-if-exists, vendor/mediatek/common/device-vendor.mk)
-
-# mtklog config
-ifeq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-ifeq ($(TARGET_BUILD_VARIANT),eng)
-PRODUCT_COPY_FILES += device/mediatek/common/mtklog/mtklog-config-basic-eng.prop:$(TARGET_COPY_OUT_VENDOR)/etc/mtklog-config.prop:mtk
-else
-PRODUCT_COPY_FILES += device/mediatek/common/mtklog/mtklog-config-basic-user.prop:$(TARGET_COPY_OUT_VENDOR)/etc/mtklog-config.prop:mtk
-endif
-else
-ifeq ($(TARGET_BUILD_VARIANT),eng)
-PRODUCT_COPY_FILES += device/mediatek/common/mtklog/mtklog-config-bsp-eng.prop:$(TARGET_COPY_OUT_VENDOR)/etc/mtklog-config.prop:mtk
-else
-PRODUCT_COPY_FILES += device/mediatek/common/mtklog/mtklog-config-bsp-user.prop:$(TARGET_COPY_OUT_VENDOR)/etc/mtklog-config.prop:mtk
-endif
-endif
-
-# ECC List Customization
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/external/EccList/EccList.mk)
-
-#fonts
-$(call inherit-product-if-exists, frameworks/base/data/fonts/fonts.mk)
-$(call inherit-product-if-exists, external/naver-fonts/fonts.mk)
-$(call inherit-product-if-exists, external/noto-fonts/fonts.mk)
-$(call inherit-product-if-exists, external/roboto-fonts/fonts.mk)
-$(call inherit-product-if-exists, frameworks/base/data/fonts/openfont/fonts.mk)
-
-#3Dwidget
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/frameworks/base/3dwidget/appwidget.mk)
-
-# AAPT Config
-$(call inherit-product-if-exists, device/mediatek/common/aapt/aapt_config.mk)
-
-#
-# MediaTek Operator features configuration
-#
-
-ifdef OPTR_SPEC_SEG_DEF
-  ifneq ($(strip $(OPTR_SPEC_SEG_DEF)),NONE)
-    OPTR := $(word 1,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-    SPEC := $(word 2,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-    SEG  := $(word 3,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-    $(call inherit-product-if-exists, vendor/mediatek/proprietary/operator/$(OPTR)/$(SPEC)/$(SEG)/optr_apk_config.mk)
-
-    PRODUCT_PROPERTY_OVERRIDES += \
-      persist.operator.optr=$(OPTR) \
-      persist.operator.spec=$(SPEC) \
-      persist.operator.seg=$(SEG)
-  endif
-endif
-
-# Here we initializes variable MTK_REGIONAL_OP_PACK based on Carrier express pack
-ifdef MTK_CARRIEREXPRESS_PACK
-  ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),la)
-    MTK_REGIONAL_OP_PACK = OP112_SPEC0200_SEGDEFAULT OP120_SPEC0100_SEGDEFAULT OP15_SPEC0200_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),na)
-    MTK_REGIONAL_OP_PACK = OP07_SPEC0407_SEGDEFAULT OP08_SPEC0200_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),eu)
-    MTK_REGIONAL_OP_PACK = OP03_SPEC0200_SEGDEFAULT OP05_SPEC0200_SEGDEFAULT OP06_SPEC0106_SEGDEFAULT OP11_SPEC0200_SEGDEFAULT OP15_SPEC0200_SEGDEFAULT OP16_SPEC0200_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),ind)
-    MTK_REGIONAL_OP_PACK = OP18_SPEC0100_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),jpn)
-    MTK_REGIONAL_OP_PACK = OP17_SPEC0200_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),mea)
-    MTK_REGIONAL_OP_PACK = OP126_SPEC0100_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),au)
-    MTK_REGIONAL_OP_PACK = OP19_SPEC0200_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),rus)
-    MTK_REGIONAL_OP_PACK = OP127_SPEC0200_SEGDEFAULT OP113_SPEC0200_SEGDEFAULT
-  else ifneq ($(strip $(MTK_CARRIEREXPRESS_PACK)),no)
-    $(error "MTK_CARRIEREXPRESS_PACK: $(MTK_CARRIEREXPRESS_PACK) not supported")
-  endif
-endif
-
-ifdef MTK_CARRIEREXPRESS_PACK
-  ifneq ($(strip $(MTK_CARRIEREXPRESS_PACK)),no)
-      PRODUCT_PROPERTY_OVERRIDES += ro.mtk_carrierexpress_pack=$(strip $(MTK_CARRIEREXPRESS_PACK))
-      ifeq ($(strip $(MTK_CARRIEREXPRESS_APK_INSTALL_SUPPORT)),yes)
-        PRODUCT_PROPERTY_OVERRIDES += ro.mtk_carrierexpress_inst_sup=1
-      endif
-      ifeq ($(strip $(MTK_CARRIEREXPRESS_SWITCH_MODE)),2)
-        PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cxp_switch_mode=2
-      endif
-      PRODUCT_PACKAGES += usp_service
-      PRODUCT_PACKAGES += libusp_native
-      temp_optr := $(OPTR_SPEC_SEG_DEF)
-      $(foreach OP_SPEC, $(MTK_REGIONAL_OP_PACK), \
-        $(eval OPTR_SPEC_SEG_DEF := $(OP_SPEC)) \
-        $(eval OPTR     := $(word 1, $(subst _,$(space),$(OP_SPEC)))) \
-        $(eval SPEC     := $(word 2, $(subst _,$(space),$(OP_SPEC)))) \
-        $(eval SEG      := $(word 3, $(subst _,$(space),$(OP_SPEC)))) \
-        $(eval include vendor/mediatek/proprietary/operator/$(OPTR)/$(SPEC)/$(SEG)/optr_apk_config.mk))
-      OPTR_SPEC_SEG_DEF := $(temp_optr)
-  endif
-endif
-
-# add for ATCI JAVA layer service
-PRODUCT_PACKAGES += AtciService
-
-PRODUCT_PACKAGES += DataTransfer
-
-# add for OMA DM, common module used by MediatekDM & red bend DM
-PRODUCT_PACKAGES += dm_agent_binder
-
-# red bend DM config files & lib
-ifeq ($(strip $(MTK_DM_APP)),yes)
-    PRODUCT_PACKAGES += reminder.xml
-    PRODUCT_PACKAGES += tree.xml
-    PRODUCT_PACKAGES += DmApnInfo.xml
-    PRODUCT_PACKAGES += vdmconfig.xml
-    PRODUCT_PACKAGES += libvdmengine.so
-    PRODUCT_PACKAGES += libvdmfumo.so
-    PRODUCT_PACKAGES += libvdmlawmo.so
-    PRODUCT_PACKAGES += libvdmscinv.so
-    PRODUCT_PACKAGES += libvdmscomo.so
-    PRODUCT_PACKAGES += dm
-endif
-
-# MediatekDM package & lib
-ifeq ($(strip $(MTK_MDM_APP)),yes)
-    PRODUCT_PACKAGES += MediatekDM
-endif
-
-# CTM
-ifeq ($(strip $(MTK_CTM_SUPPORT)),yes)
-PRODUCT_PACKAGES += ctm
-PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ctm_flag=0
-endif
-# SmsReg package
-ifeq ($(strip $(MTK_SMSREG_APP)),yes)
-    PRODUCT_PACKAGES += SmsReg
-endif
-
-ifeq ($(strip $(MTK_CMCC_FT_PRECHECK_SUPPORT)),yes)
-  PRODUCT_PACKAGES += FTPreCheck
-endif
-
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-    PRODUCT_PACKAGES += ConfigureCheck
-else
-    ifeq ($(strip $(OPTR_SPEC_SEG_DEF)), OP09_SPEC0212_SEGC)
-        PRODUCT_PACKAGES += ConfigureCheck
-    endif
-endif
-
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/frameworks/base/voicecommand/cfg/voicecommand.mk)
-
-ifeq ($(strip $(MTK_VOICE_UNLOCK_SUPPORT)),yes)
-    PRODUCT_PACKAGES += VoiceCommand
-else
-    ifeq ($(strip $(MTK_VOICE_UI_SUPPORT)),yes)
-        PRODUCT_PACKAGES += VoiceCommand
-    else
-            ifeq ($(strip $(MTK_VOW_SUPPORT)),yes)
-                PRODUCT_PACKAGES += VoiceCommand
-            endif
-    endif
-endif
-
-ifeq ($(strip $(MTK_VOICE_UNLOCK_SUPPORT)),yes)
-    PRODUCT_PACKAGES += VoiceUnlock
-else
-    ifeq ($(strip $(MTK_VOW_SUPPORT)),yes)
-        PRODUCT_PACKAGES += VoiceUnlock
-        PRODUCT_PACKAGES += MtkVoiceWakeupInteraction
-    endif
-endif
-
-ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-    PRODUCT_PACKAGES += c2k-ril-prop
-    PRODUCT_PACKAGES += via-plugin
-endif
-
-ifeq ($(strip $(MTK_USB_CBA_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_usb_cba_support=1
-endif
-
-ifeq ($(strip $(MTK_FOTA_SUPPORT)), yes)
-   PRODUCT_PACKAGES += fota1
-endif
-
-ifeq ($(strip $(MTK_NUM_MODEM_PROTOCOL)), 1)
-  PRODUCT_PROPERTY_OVERRIDES += ro.num_md_protocol=1
-endif
-ifeq ($(strip $(MTK_NUM_MODEM_PROTOCOL)), 2)
-  PRODUCT_PROPERTY_OVERRIDES += ro.num_md_protocol=2
-endif
-ifeq ($(strip $(MTK_NUM_MODEM_PROTOCOL)), 3)
-  PRODUCT_PROPERTY_OVERRIDES += ro.num_md_protocol=3
-endif
-ifeq ($(strip $(MTK_NUM_MODEM_PROTOCOL)), 4)
-  PRODUCT_PROPERTY_OVERRIDES += ro.num_md_protocol=4
-endif
-
-ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), ss)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.multisim.config=ss
-endif
-ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsds)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.multisim.config=dsds
-endif
-ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsda)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.multisim.config=dsda
-endif
-ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), tsts)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.multisim.config=tsts
-endif
-ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), qsqs)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.multisim.config=qsqs
-endif
-
-ifeq ($(strip $(MTK_AUDIO_PROFILES)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_profiles=1
-endif
-
-ifeq ($(strip $(MTK_AUDENH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audenh_support=1
-endif
-
-# MTK_LOSSLESS_BT
-ifeq ($(strip $(MTK_LOSSLESS_BT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_lossless_bt_audio=1
-endif
-
-# MTK_LOUNDNESS
-ifeq ($(strip $(MTK_BESLOUDNESS_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_besloudness_support=1
-endif
-
-# MTK_BESSURROUND
-ifeq ($(strip $(MTK_BESSURROUND_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bessurround_support=1
-endif
-
-# MTK_ANC
-ifeq ($(strip $(MTK_HEADSET_ACTIVE_NOISE_CANCELLATION)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_active_noise_cancel=1
-endif
-
-ifeq ($(strip $(MTK_MEMORY_COMPRESSION_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mem_comp_support=1
-endif
-
-ifeq ($(strip $(MTK_WAPI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wapi_support=1
-endif
-
-ifeq ($(strip $(MTK_BT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bt_support=1
-endif
-
-ifeq ($(strip $(MTK_WAPPUSH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wappush_support=1
-endif
-
-ifeq ($(strip $(MTK_AGPS_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_agps_app=1
-endif
-
-ifeq ($(strip $(MTK_FM_TX_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fm_tx_support=1
-endif
-
-ifeq ($(strip $(MTK_VT3G324M_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_vt3g324m_support=1
-endif
-
-ifeq ($(strip $(MTK_VOICE_UI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_voice_ui_support=1
-endif
-
-ifeq ($(strip $(MTK_VOICE_UNLOCK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_voice_unlock_support=1
-endif
-
-
-
-ifneq ($(MTK_AUDIO_TUNING_TOOL_VERSION),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_tuning_tool_ver=$(strip $(MTK_AUDIO_TUNING_TOOL_VERSION))
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_tuning_tool_ver=V1
-endif
-
-ifeq ($(strip $(MTK_DM_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dm_app=1
-endif
-
-ifeq ($(strip $(MTK_MATV_ANALOG_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_matv_analog_support=1
-endif
-
-ifeq ($(strip $(MTK_WLAN_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wlan_support=1
-  PRODUCT_PACKAGES += halutil
-endif
-
-ifeq ($(strip $(MTK_IPO_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ipo_support=1
-endif
-
-ifeq ($(strip $(MTK_GPS_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_gps_support=1
-endif
-
-ifeq ($(strip $(MTK_OMACP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_omacp_support=1
-endif
-
-ifeq ($(strip $(HAVE_MATV_FEATURE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.have_matv_feature=1
-endif
-
-ifeq ($(strip $(MTK_BT_FM_OVER_BT_VIA_CONTROLLER)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bt_fm_over_bt=1
-endif
-
-ifeq ($(strip $(MTK_SEARCH_DB_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_search_db_support=1
-endif
-
-ifeq ($(strip $(MTK_DIALER_SEARCH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dialer_search_support=1
-endif
-
-ifeq ($(strip $(MTK_DHCPV6C_WIFI)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dhcpv6c_wifi=1
-endif
-
-ifeq ($(strip $(MTK_FM_SHORT_ANTENNA_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fm_short_antenna_support=1
-endif
-
-ifeq ($(strip $(HAVE_AACENCODE_FEATURE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.have_aacencode_feature=1
-endif
-
-ifeq ($(strip $(MTK_CTA_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cta_support=1
-endif
-
-ifeq ($(strip $(MTK_CLEARMOTION_SUPPORT)),yes)
-  PRODUCT_PACKAGES += libMJCjni
-  PRODUCT_PROPERTY_OVERRIDES += \
-    persist.sys.display.clearMotion=0
-  PRODUCT_PROPERTY_OVERRIDES += \
-    persist.clearMotion.fblevel.nrm=255
-  PRODUCT_PROPERTY_OVERRIDES += \
-    persist.clearMotion.fblevel.bdr=255
-endif
-
-ifeq ($(strip $(MTK_PHONE_VT_VOICE_ANSWER)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_phone_vt_voice_answer=1
-endif
-
-ifeq ($(strip $(MTK_PHONE_VOICE_RECORDING)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_phone_voice_recording=1
-endif
-
-ifeq ($(strip $(MTK_POWER_SAVING_SWITCH_UI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pwr_save_switch=1
-endif
-
-ifeq ($(strip $(MTK_FD_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fd_support=1
-endif
-
-ifeq ($(strip $(MTK_CC33_SUPPORT)), yes)
-# Only support the format: 0: turn off / 1: turn on
-    PRODUCT_PROPERTY_OVERRIDES += persist.data.cc33.support=1
-endif
-
-#DRM part
-ifeq ($(strip $(MTK_DRM_APP)), yes)
-  #OMA DRM
-  ifeq ($(strip $(MTK_OMADRM_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_oma_drm_support=1
-  endif
-  #CTA DRM
-  ifeq ($(strip $(MTK_CTA_SET)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cta_drm_support=1
-  endif
-endif
-
-#Widevine DRM
-ifeq ($(strip $(MTK_WVDRM_SUPPORT)), yes)
-  #PRODUCT_PROPERTY_OVERRIDES += ro.mtk_widevine_drm_support=1
-  ifeq ($(strip $(MTK_WVDRM_L1_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_widevine_drm_l1_support=1
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_widevine_drm_l3_support=1
-  endif
-endif
-
-#Playready DRM
-ifeq ($(strip $(MTK_PLAYREADY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_playready_drm_support=1
-endif
-
-########
-ifeq ($(strip $(MTK_DISABLE_CAPABILITY_SWITCH)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_disable_cap_switch=1
-endif
-
-ifeq ($(strip $(MTK_EAP_SIM_AKA)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_eap_sim_aka=1
-endif
-
-ifeq ($(strip $(MTK_LOG2SERVER_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log2server_app=1
-endif
-
-ifeq ($(strip $(MTK_FM_RECORDING_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fm_recording_support=1
-endif
-
-ifeq ($(strip $(MTK_AUDIO_APE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_ape_support=1
-endif
-
-ifeq ($(strip $(MTK_FLV_PLAYBACK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_flv_playback_support=1
-endif
-
-ifeq ($(strip $(MTK_FD_FORCE_REL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fd_force_rel_support=1
-endif
-
-ifeq ($(strip $(MTK_BRAZIL_CUSTOMIZATION_CLARO)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.brazil_cust_claro=1
-endif
-
-ifeq ($(strip $(MTK_BRAZIL_CUSTOMIZATION_VIVO)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.brazil_cust_vivo=1
-endif
-
-ifeq ($(strip $(MTK_WMV_PLAYBACK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wmv_playback_support=1
-endif
-
-ifeq ($(strip $(MTK_HDMI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_hdmi_support=1
-endif
-
-ifeq ($(strip $(MTK_FOTA_ENTRY)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fota_entry=1
-endif
-
-ifeq ($(strip $(MTK_SCOMO_ENTRY)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_scomo_entry=1
-endif
-
-ifeq ($(strip $(MTK_MTKPS_PLAYBACK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mtkps_playback_support=1
-endif
-
-ifeq ($(strip $(MTK_SEND_RR_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_send_rr_support=1
-endif
-
-ifeq ($(strip $(MTK_RAT_WCDMA_PREFERRED)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_rat_wcdma_preferred=1
-endif
-
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-  PRODUCT_PACKAGES += DeviceRegister
-  PRODUCT_PACKAGES += SelfRegister
-else
-
-  ifeq ($(strip $(MTK_DEVREG_APP)),yes)
-    PRODUCT_PACKAGES += DeviceRegister
-  endif
-
-  ifeq ($(strip $(MTK_CT4GREG_APP)),yes)
-    PRODUCT_PACKAGES += SelfRegister
-  endif
-endif
-
-ifeq ($(strip $(MTK_ESN_TRACK_APP)),yes)
-  PRODUCT_PACKAGES += EsnTrack
-endif
-
-ifeq ($(strip $(MTK_ESN_TRACK_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.sys.esn_track_switch=0
-endif
-
-ifeq ($(strip $(MTK_SMSREG_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_smsreg_app=1
-endif
-
-ifeq ($(strip $(MTK_DEFAULT_DATA_OFF)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_default_data_off=1
-endif
-
-ifeq ($(strip $(MTK_TB_APP_CALL_FORCE_SPEAKER_ON)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tb_call_speaker_on=1
-endif
-
-ifeq ($(strip $(MTK_EMMC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_emmc_support=1
-endif
-
-ifeq ($(strip $(MTK_UFS_BOOTING)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ufs_booting=1
-endif
-
-ifeq ($(strip $(MTK_FM_50KHZ_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fm_50khz_support=1
-endif
-
-ifeq ($(strip $(MTK_BSP_PACKAGE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bsp_package=1
-endif
-
-ifeq ($(strip $(MTK_TETHERINGIPV6_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tetheringipv6_support=1
-endif
-
-ifeq ($(strip $(MTK_PHONE_NUMBER_GEODESCRIPTION)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_phone_number_geo=1
-endif
-
-ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_c2k_support=1
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.flashless.fsm=0
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.flashless.fsm_cst=0
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.flashless.fsm_rw=0
-
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfu.enable=*72
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfu.disable=*720
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfb.enable=*90
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfb.disable=*900
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfnr.enable=*92
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfnr.disable=*920
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfdf.enable=*68
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfdf.disable=*680
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfall.disable=*730
-
-  # callWaiting
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cw.enable=*74
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cw.disable=*740
-
-  # network property
-   ifeq ($(strip $(RAT_CONFIG_LTE_SUPPORT)),yes)
-      # NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA (10)
-      PRODUCT_PROPERTY_OVERRIDES += telephony.lteOnCdmaDevice=1
-      PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=10,10
-   else
-      # NETWORK_MODE_GLOBAL(7)
-      PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=7,7
-   endif
-endif
-
-ifneq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-    ifeq ($(strip $(RAT_CONFIG_LTE_SUPPORT)),yes)
-        # NETWORK_MODE_LTE_GSM_WCDMA (9)
-        ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), ss)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsds)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9,9
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsda)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9,9
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), tsts)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9,9,9
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), qsqs)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9,9,9,9
-        else
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9
-        endif
-    else
-        # NETWORK_MODE_WCDMA_PREF(0)
-        ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), ss)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsds)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0,0
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsda)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0,0
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), tsts)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0,0,0
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), qsqs)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0,0,0,0
-        else
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0
-        endif
-    endif
-endif
-
-ifeq ($(strip $(EVDO_DT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.evdo_dt_support=1
-endif
-
-ifeq ($(strip $(EVDO_DT_VIA_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.evdo_dt_via_support=1
-endif
-
-PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ril_mode=$(strip $(MTK_RIL_MODE))
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-  ifeq ($(strip $(MTK_RIL_MODE)), c6m_1rild)
-    PRODUCT_COPY_FILES += device/mediatek/common/init.mtkfusionril.rc:root/init.ril.rc
-  else
-    PRODUCT_PACKAGES += rilproxy
-    PRODUCT_PACKAGES += mtk-rilproxy
-    PRODUCT_PACKAGES += lib-rilproxy
-    PRODUCT_COPY_FILES += device/mediatek/common/init.rilproxy.rc:root/init.rilproxy.rc
-  endif
-endif
-
-ifeq ($(strip $(MTK_SHARED_SDCARD)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_shared_sdcard=1
-endif
-
-ifeq ($(strip $(MTK_2SDCARD_SWAP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_2sdcard_swap=1
-endif
-
-ifeq ($(strip $(MTK_RAT_BALANCING)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_rat_balancing=1
-endif
-
-ifeq ($(strip $(WIFI_WEP_KEY_ID_SET)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.wifi_wep_key_id_set=1
-endif
-
-ifeq ($(strip $(OP01_COMPATIBLE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.op01_compatible=1
-endif
-
-ifeq ($(strip $(MTK_ENABLE_MD1)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_enable_md1=1
-endif
-
-ifeq ($(strip $(MTK_ENABLE_MD2)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_enable_md2=1
-endif
-
-ifeq ($(strip $(MTK_ENABLE_MD3)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_enable_md3=1
-endif
-
-ifeq ($(strip $(MTK_ANDROID_FOR_WORK_SUPPORT)), yes)
-    PRODUCT_COPY_FILES += frameworks/native/data/etc/android.software.device_admin.xml:system/etc/permissions/android.software.device_admin.xml
-    PRODUCT_COPY_FILES += frameworks/native/data/etc/android.software.managed_users.xml:system/etc/permissions/android.software.managed_users.xml
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_afw_support=1
-endif
-
-#For SOTER
-ifeq ($(strip $(MTK_SOTER_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_soter_support=1
-endif
-
-ifeq ($(strip $(MTK_NETWORK_TYPE_ALWAYS_ON)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_network_type_always_on=1
-endif
-
-ifeq ($(strip $(MTK_NFC_ADDON_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_nfc_addon_support=1
-endif
-
-ifeq ($(strip $(MTK_BENCHMARK_BOOST_TP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_benchmark_boost_tp=1
-endif
-
-ifeq ($(strip $(MTK_FLIGHT_MODE_POWER_OFF_MD)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_flight_mode_power_off_md=1
-endif
-
-ifeq ($(strip $(MTK_BT_BLE_MANAGER_SUPPORT)), yes)
-  PRODUCT_PACKAGES += BluetoothLe \
-                      BLEManager
-endif
-
-#For GattProfile
-PRODUCT_PACKAGES += GattProfile
-
-#For BtAutoTest
-PRODUCT_PACKAGES += BtAutoTest
-
-ifeq ($(strip $(MTK_AAL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_aal_support=1
-endif
-
-ifeq ($(strip $(MTK_ULTRA_DIMMING_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ultra_dimming_support=1
-endif
-
-ifeq ($(strip $(MTK_DRE30_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dre30_support=1
-endif
-
-ifneq ($(strip $(MTK_PQ_SUPPORT)), no)
-    ifeq ($(strip $(MTK_PQ_SUPPORT)), PQ_HW_VER_2)
-      PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_support=2
-    else
-        ifeq ($(strip $(MTK_PQ_SUPPORT)), PQ_HW_VER_3)
-          PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_support=3
-        endif
-    endif
-endif
-
-# pq color mode, default mode is 1 (DISP)
-ifeq ($(strip $(MTK_PQ_COLOR_MODE)), OFF)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_color_mode=0
-else
-  ifeq ($(strip $(MTK_PQ_COLOR_MODE)), MDP)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_color_mode=2
-  else
-    ifeq ($(strip $(MTK_PQ_COLOR_MODE)), DISP_MDP)
-        PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_color_mode=3
-    else
-        PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_color_mode=1
-    endif
-  endif
-endif
-
-ifeq ($(strip $(MTK_MIRAVISION_SETTING_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_miravision_support=1
-endif
-
-ifeq ($(strip $(MTK_MIRAVISION_SETTING_SUPPORT)), yes)
-  PRODUCT_PACKAGES += MiraVision
-endif
-
-ifeq ($(strip $(MTK_MIRAVISION_IMAGE_DC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_miravision_image_dc=1
-endif
-
-ifeq ($(strip $(MTK_BLULIGHT_DEFENDER_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_blulight_def_support=1
-endif
-
-ifeq ($(strip $(MTK_CHAMELEON_DISPLAY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_chameleon_support=1
-endif
-
-ifeq ($(strip $(MTK_TETHERING_EEM_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tethering_eem_support=1
-endif
-
-ifeq ($(strip $(MTK_WFD_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wfd_support=1
-endif
-
-ifeq ($(strip $(MTK_WFD_SINK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wfd_sink_support=1
-endif
-
-ifeq ($(strip $(MTK_WFD_SINK_UIBC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wfd_sink_uibc_support=1
-endif
-
-ifeq ($(strip $(MTK_WIFI_MCC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wifi_mcc_support=1
-endif
-
-ifeq ($(strip $(MTK_CROSSMOUNT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_crossmount_support=1
-endif
-
-ifeq ($(strip $(MTK_MULTIPLE_TDLS_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multiple_tdls_support=1
-endif
-
-ifeq ($(strip $(MTK_MT8193_HDMI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mt8193_hdmi_support=1
-endif
-
-ifeq ($(strip $(MTK_SYSTEM_UPDATE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_system_update_support=1
-endif
-
-ifeq ($(strip $(MTK_SIM_HOT_SWAP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_sim_hot_swap=1
-endif
-
-ifeq ($(strip $(MTK_RADIOOFF_POWER_OFF_MD)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_radiooff_power_off_md=1
-endif
-
-ifeq ($(strip $(MTK_BIP_SCWS)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bip_scws=1
-endif
-
-ifeq (OP09_SPEC0212_SEGDEFAULT,$(OPTR_SPEC_SEG_DEF))
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ctpppoe_support=1
-endif
-
-ifeq ($(strip $(MTK_IPV6_TETHER_PD_MODE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ipv6_tether_pd_mode=1
-endif
-
-ifeq ($(strip $(MTK_CACHE_MERGE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cache_merge_support=1
-endif
-
-ifeq ($(strip $(MTK_FAT_ON_NAND)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fat_on_nand=1
-endif
-
-ifeq ($(strip $(MTK_GMO_RAM_OPTIMIZE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_gmo_ram_optimize=1
-endif
-
-ifeq ($(strip $(MTK_GMO_ROM_OPTIMIZE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_gmo_rom_optimize=1
-endif
-
-ifeq ($(strip $(MTK_CMCC_FT_PRECHECK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cmcc_ft_precheck_support=1
-endif
-
-ifeq ($(strip $(MTK_MDM_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mdm_app=1
-endif
-
-ifeq ($(strip $(MTK_MDM_LAWMO)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mdm_lawmo=1
-endif
-
-ifeq ($(strip $(MTK_MDM_FUMO)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mdm_fumo=1
-endif
-
-ifeq ($(strip $(MTK_MDM_SCOMO)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mdm_scomo=1
-endif
-
-ifeq ($(strip $(MTK_MULTISIM_RINGTONE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multisim_ringtone=1
-endif
-
-ifeq ($(strip $(MTK_MT8193_HDCP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mt8193_hdcp_support=1
-endif
-
-ifeq ($(strip $(PURE_AP_USE_EXTERNAL_MODEM)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.pure_ap_use_external_modem=1
-endif
-
-ifeq ($(strip $(MTK_WFD_HDCP_TX_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wfd_hdcp_tx_support=1
-endif
-
-ifeq ($(strip $(MTK_WFD_HDCP_RX_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wfd_hdcp_rx_support=1
-endif
-
-ifeq ($(strip $(CMCC_LIGHT_CUST_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.cmcc_light_cust_support=1
-endif
-
-ifeq ($(strip $(MTK_WORLD_PHONE_POLICY)), 1)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_world_phone_policy=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_world_phone_policy=0
-endif
-
-ifeq ($(strip $(MTK_ECCCI_C2K)),yes)
-  PRODUCT_PROPERTY_OVERRIDES +=ro.mtk_md_world_mode_support=1
-endif
-
-ifeq ($(strip $(MTK_PERFSERVICE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_perfservice_support=1
-endif
-
-ifeq ($(strip $(MTK_AUDIO_CHANGE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_change_support=1
-endif
-
-ifeq ($(strip $(MTK_HDMI_HDCP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_hdmi_hdcp_support=1
-endif
-
-ifeq ($(strip $(MTK_INTERNAL_HDMI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_internal_hdmi_support=1
-endif
-
-ifeq ($(strip $(MTK_INTERNAL_MHL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_internal_mhl_support=1
-endif
-
-ifeq ($(strip $(MTK_OWNER_SDCARD_ONLY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_owner_sdcard_support=1
-endif
-
-ifeq ($(strip $(MTK_ONLY_OWNER_SIM_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_owner_sim_support=1
-endif
-
-ifeq ($(strip $(MTK_SIM_HOT_SWAP_COMMON_SLOT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_sim_hot_swap_common_slot=1
-endif
-
-ifeq ($(strip $(MTK_CTA_SET)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cta_set=1
-endif
-
-ifeq ($(strip $(MTK_CTSC_MTBF_INTERNAL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ctsc_mtbf_intersup=1
-endif
-
-ifeq ($(strip $(MTK_3GDONGLE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_3gdongle_support=1
-endif
-
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_devreg_app=1
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ct4greg_app=1
-else
-
-  ifeq ($(strip $(MTK_DEVREG_APP)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_devreg_app=1
-  endif
-
-  ifeq ($(strip $(MTK_CT4GREG_APP)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ct4greg_app=1
-  endif
-endif
-
-ifeq ($(strip $(EVDO_IR_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.evdo_ir_support=1
-endif
-
-ifeq ($(strip $(MTK_MULTI_PARTITION_MOUNT_ONLY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multi_patition=1
-endif
-
-ifeq ($(strip $(MTK_WIFI_CALLING_RIL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wifi_calling_ril_support=1
-endif
-
-ifeq ($(strip $(MTK_DRM_KEY_MNG_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_key_manager_support=1
-endif
-
-ifeq ($(strip $(MTK_DOLBY_DAP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dolby_dap_support=1
-endif
-
-ifeq ($(strip $(MTK_MOBILE_MANAGEMENT)), yes)
-  ifdef BUILD_GMS
-    ifeq ($(strip $(BUILD_GMS)), yes)
-      PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mobile_management=0
-    else
-      PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mobile_management=1
-    endif
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mobile_management=1
-  endif
-endif
-
-ifeq ($(strip $(MTK_RUNTIME_PERMISSION_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_runtime_permission=1
-endif
-
-# enable zsd+hdr
-ifeq ($(strip $(MTK_CAM_ZSDHDR_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_zsdhdr_support=1
-endif
-
-# default MFLL support level, [0~4]= off, mfll, ais, both, debug
-ifeq ($(strip $(MTK_CAM_MFB_SUPPORT)), 0)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mfb_support=0
-endif
-ifeq ($(strip $(MTK_CAM_MFB_SUPPORT)), 1)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mfb_support=1
-endif
-ifeq ($(strip $(MTK_CAM_MFB_SUPPORT)), 2)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mfb_support=2
-endif
-ifeq ($(strip $(MTK_CAM_MFB_SUPPORT)), 3)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mfb_support=3
-endif
-ifeq ($(strip $(MTK_CAM_MFB_SUPPORT)), 4)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mfb_support=4
-endif
-
-ifeq ($(strip $(MTK_CAM_DUAL_ZOOM_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_dualzoom_support=1
-endif
-
-ifeq ($(strip $(MTK_CAM_STEREO_DENOISE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_dualdenoise_support=1
-endif
-
-ifeq ($(strip $(MTK_CLEARMOTION_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_clearmotion_support=1
-endif
-
-ifeq ($(strip $(MTK_DISPLAY_120HZ_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_display_120hz_support=1
-endif
-
-ifeq ($(strip $(MTK_SLOW_MOTION_VIDEO_SUPPORT)), yes)
-	PRODUCT_PROPERTY_OVERRIDES += ro.mtk_slow_motion_support=1
-	PRODUCT_PACKAGES += libMtkVideoSpeedEffect
-	PRODUCT_PACKAGES += libjni_slow_motion
-endif
-
-ifeq ($(strip $(MTK_CAM_NATIVE_PIP_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_native_pip_support=1
-endif
-
-ifeq ($(strip $(MTK_CAM_LOMO_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libcam.jni.lomohaljni
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_lomo_support=1
-endif
-
-ifeq ($(strip $(MTK_CAM_IMAGE_REFOCUS_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_img_refocus_support=1
-endif
-
-ifeq ($(strip $(MTK_LTE_DC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_lte_dc_support=1
-endif
-
-ifeq ($(strip $(RAT_CONFIG_LTE_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_lte_support=1
-endif
-
-ifeq ($(strip $(MTK_ENABLE_MD5)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_enable_md5=1
-endif
-
-ifeq ($(strip $(MTK_FEMTO_CELL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_femto_cell_support=1
-endif
-
-ifeq ($(strip $(MTK_SAFEMEDIA_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_safemedia_support=1
-endif
-
-ifeq ($(strip $(MTK_UMTS_TDD128_MODE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_umts_tdd128_mode=1
-endif
-
-ifeq ($(strip $(MTK_SINGLE_IMEI)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_single_imei=1
-endif
-
-ifeq ($(strip $(MTK_SINGLE_3DSHOT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_single_3Dshot_support=1
-endif
-
-ifeq ($(strip $(MTK_CAM_MAV_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mav_support=1
-endif
-
-ifeq ($(strip $(MTK_CAM_FACEBEAUTY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_cfb=1
-endif
-
-ifeq ($(strip $(MTK_CAM_VIDEO_FACEBEAUTY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_vfb=1
-endif
-
-ifeq ($(strip $(MTK_RILD_READ_IMSI)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_rild_read_imsi=1
-endif
-
-ifeq ($(strip $(SIM_REFRESH_RESET_BY_MODEM)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.sim_refresh_reset_by_modem=1
-endif
-
-ifeq ($(strip $(MTK_EXTERNAL_SIM_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_external_sim_support=1
-endif
-
-ifeq ($(strip $(MTK_DISABLE_PERSIST_VSIM)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_persist_vsim_disabled=1
-endif
-
-ifneq ($(strip $(MTK_EXTERNAL_SIM_ONLY_SLOTS)),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_external_sim_only_slots=$(strip $(MTK_EXTERNAL_SIM_ONLY_SLOTS))
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_external_sim_only_slots=0
-endif
-
-ifeq ($(strip $(MTK_SUBTITLE_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libvobsub_jni
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_subtitle_support=1
-endif
-
-ifeq ($(strip $(MTK_DFO_RESOLUTION_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dfo_resolution_support=1
-endif
-
-ifeq ($(strip $(MTK_SMARTBOOK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_smartbook_support=1
-endif
-
-ifeq ($(strip $(MTK_DX_HDCP_SUPPORT)), yes)
-  PRODUCT_PACKAGES += ffffffff000000000000000000000003.tlbin libDxHdcp DxHDCP.cfg
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dx_hdcp_support=1
-endif
-
-ifeq ($(strip $(MTK_LIVE_PHOTO_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_live_photo_support=1
-endif
-
-ifeq ($(strip $(MTK_MOTION_TRACK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_motion_track_support=1
-endif
-
-ifeq ($(strip $(MTK_HOTKNOT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_hotknot_support=1
-endif
-
-ifeq ($(strip $(MTK_PASSPOINT_R2_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_passpoint_r2_support=1
-endif
-
-ifeq ($(strip $(MTK_PRIVACY_PROTECTION_LOCK)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_privacy_protection_lock=1
-endif
-
-ifeq ($(strip $(MTK_BG_POWER_SAVING_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bg_power_saving_support=1
-endif
-
-ifeq ($(strip $(MTK_BG_POWER_SAVING_UI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bg_power_saving_ui=1
-endif
-
-ifeq ($(strip $(MTK_WIFIWPSP2P_NFC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wifiwpsp2p_nfc_support=1
-endif
-
-ifeq ($(strip $(MTK_TC1_FEATURE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tc1_feature=1
-endif
-
-ifeq ($(strip $(MTK_A1_FEATURE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_a1_feature=1
-endif
-
-ifneq ($(strip $(SIM_ME_LOCK_MODE)),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.sim_me_lock_mode=$(strip $(SIM_ME_LOCK_MODE))
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.sim_me_lock_mode=0
-endif
-
-ifneq ($(strip $(MTK_AP_INFO_COLLECT)),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.ap_info_monitor=$(strip $(MTK_AP_INFO_COLLECT))
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.ap_info_monitor=0
-endif
-
-ifeq ($(strip $(MTK_DUAL_MIC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dual_mic_support=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dual_mic_support=0
-endif
-
-ifeq ($(strip $(MTK_VOICE_UNLOCK_USE_TAB_LIB)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_is_tablet=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_is_tablet=0
-endif
-
-ifeq ($(strip $(MTK_EXTERNAL_MODEM_SLOT)), 1)
-  PRODUCT_PROPERTY_OVERRIDES += ril.external.md=1
-endif
-ifeq ($(strip $(MTK_EXTERNAL_MODEM_SLOT)), 2)
-  PRODUCT_PROPERTY_OVERRIDES += ril.external.md=2
-endif
-
-ifeq ($(strip $(MTK_POWER_PERFORMANCE_STRATEGY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pow_perf_support=1
-endif
-
-# serial port open or not
-ifeq ($(strip $(MTK_SERIAL_PORT_DEFAULT_ON)),yes)
-ADDITIONAL_DEFAULT_PROPERTIES += persist.service.acm.enable=1
-else
-ADDITIONAL_DEFAULT_PROPERTIES += persist.service.acm.enable=0
-endif
-
-# for pppoe
-ifeq (OP09_SPEC0212_SEGDEFAULT,$(OPTR_SPEC_SEG_DEF))
-  PRODUCT_PACKAGES += ip-up \
-                      ip-down \
-                      pppoe \
-                      pppoe-server \
-                      launchpppoe
-  PRODUCT_PROPERTY_OVERRIDES += ro.config.pppoe_enable=1
-endif
-# for 3rd party app
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),NONE)
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_A1_FEATURE)), yes)
-      PRODUCT_PACKAGES += TouchPal
-      PRODUCT_PACKAGES += YahooNewsWidget
-    endif
-  endif
-endif
-
-#For 3rd party NLP provider
-PRODUCT_PACKAGES += Baidu_Location
-PRODUCT_PACKAGES += liblocSDK6c
-PRODUCT_PACKAGES += libnetworklocation
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_nlp_switch_support=1
-  endif
-endif
-
-# open TouchPal in OP02
-ifeq (OP02,$(word 1,$(subst _, ,$(OPTR_SPEC_SEG_DEF))))
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-     PRODUCT_PACKAGES += TouchPal
-  endif
-endif
-# open TouchPal in OP09A
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-     PRODUCT_PACKAGES += TouchPal
-  endif
-endif
-
-# open TouchPal in OP09C
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGC)
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-     PRODUCT_PACKAGES += TouchPal
-  endif
-endif
-
-# default IME
-ifeq (OP01,$(word 1,$(subst _, ,$(OPTR_SPEC_SEG_DEF))))
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_default_ime =com.iflytek.inputmethod.FlyIME
-endif
-
-# Data usage overview
-ifeq ($(strip $(MTK_DATAUSAGE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_datausage_support=1
-endif
-
-# wifi offload service common library
-PRODUCT_PACKAGES += wfo-common
-PRODUCT_PACKAGES += WfoService libwfo_jni
-
-#Define MD has the capability to setup IMS PDN
-ifeq ($(strip $(MTK_RIL_MODE)), c6m_1rild)
-  PRODUCT_PROPERTY_OVERRIDES += ro.md_auto_setup_ims=1
-endif
-
-# IMS and VoLTE feature
-ifeq ($(strip $(MTK_IMS_SUPPORT)), yes)
-    ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-        ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-            PRODUCT_PACKAGES += ImsService
-        endif
-    endif
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_ims_support=1
-  ifneq ($(filter $(strip $(MTK_MULTIPLE_IMS_SUPPORT)),2 3 4),)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multiple_ims_support=$(strip $(MTK_MULTIPLE_IMS_SUPPORT))
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multiple_ims_support=1
-  endif
-endif
-
-#WFC feature
-ifeq ($(strip $(MTK_WFC_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_wfc_support=1
-endif
-
-ifeq ($(strip $(MTK_VOLTE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_volte_support=1
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk.volte.enable=1
-endif
-
-ifeq ($(strip $(MTK_VILTE_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_vilte_support=1
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_vilte_support2=1
-  ifeq ($(strip $(MTK_VIWIFI_SUPPORT)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ims_video_call_support=vilte_viwifi
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support=1
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support2=1
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ims_video_call_support=vilte
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support=0
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support2=0
-  endif
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_vilte_ut_support=0
-endif
-
-ifeq ($(strip $(MTK_VILTE_SUPPORT)),no)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_vilte_support=0
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_vilte_support2=0
-  ifeq ($(strip $(MTK_VIWIFI_SUPPORT)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ims_video_call_support=viwifi
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support=1
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support2=1
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ims_video_call_support=none
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support=0
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support2=0
-  endif
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_vilte_ut_support=0
-endif
-
-ifeq ($(strip $(MTK_USSI_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_ussi_support=1
-endif
-
-# DTAG DUAL APN
-ifeq ($(strip $(MTK_DTAG_DUAL_APN_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dtag_dual_apn_support=1
-endif
-
-# sbc security
-ifeq ($(strip $(MTK_SECURITY_SW_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libsec
-  PRODUCT_PACKAGES += sbchk
-  PRODUCT_PACKAGES += S_ANDRO_SFL.ini
-  PRODUCT_PACKAGES += S_SECRO_SFL.ini
-  PRODUCT_PACKAGES += sec_chk.sh
-  PRODUCT_PACKAGES += AC_REGION
-endif
-
-ifeq ($(strip $(MTK_USER_ROOT_SWITCH)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_user_root_switch=1
-endif
-
-ifeq ($(strip $(MTK_DOLBY_DAP_SUPPORT)), yes)
-PRODUCT_COPY_FILES += frameworks/av/media/libeffects/data/audio_effects_dolby.conf:system/etc/audio_effects.conf
-PRODUCT_COPY_FILES += $(MTK_PROJECT_FOLDER)/dolby/ds1-default.xml:$(TARGET_COPY_OUT_VENDOR)/etc/ds1-default.xml:mtk
-else
-PRODUCT_COPY_FILES += frameworks/av/media/libeffects/data/audio_effects.conf:system/etc/audio_effects.conf
-endif
-ifeq ($(strip $(HAVE_SRSAUDIOEFFECT_FEATURE)),yes)
-  PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/SRS_AudioEffect/srs_processing/license/dts.lic:$(TARGET_COPY_OUT_VENDOR)/data/dts.lic:mtk
-  PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/SRS_AudioEffect/srs_processing/srs_processing.cfg:$(TARGET_COPY_OUT_VENDOR)/data/srs_processing.cfg:mtk
-endif
-
-ifeq ($(strip $(MTK_PERMISSION_CONTROL)), yes)
-  PRODUCT_PACKAGES += PermissionControl
-endif
-
-ifeq ($(strip $(MTK_NFC_SUPPORT)), yes)
-    ifdef MTK_NFC_PACKAGE
-        ifneq ($(wildcard vendor/mediatek/proprietary/hardware/nfc/mtknfc.mk),)
-            $(call inherit-product-if-exists, vendor/mediatek/proprietary/hardware/nfc/mtknfc.mk)
-        else
-            $(call inherit-product-if-exists, vendor/mediatek/proprietary/external/mtknfc/mtknfc.mk)
-        endif
-    else
-        PRODUCT_PACKAGES += nfcstackp
-        PRODUCT_PACKAGES += DeviceTestApp
-        PRODUCT_PACKAGES += libdta_mt6605_jni
-        PRODUCT_PACKAGES += libmtknfc_dynamic_load_jni
-        PRODUCT_PACKAGES += libnfc_mt6605_jni
-        $(call inherit-product-if-exists, vendor/mediatek/proprietary/packages/apps/DeviceTestApp/DeviceTestApp.mk)
-        $(call inherit-product-if-exists, vendor/mediatek/proprietary/external/mtknfc/mtknfc.mk)
-    endif
-endif
-
-ifeq ($(strip $(MTK_NFC_SUPPORT)), yes)
-    ifeq ($(wildcard $(MTK_TARGET_PROJECT_FOLDER)/nfcse.cfg),)
-        ifeq ($(strip $(MTK_BSP_PACKAGE)), yes)
-            PRODUCT_COPY_FILES += packages/apps/Nfc/mtk-nfc/nfcsebsp.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/nfcse.cfg:mtk
-        else
-            PRODUCT_COPY_FILES += packages/apps/Nfc/mtk-nfc/nfcsetk.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/nfcse.cfg:mtk
-        endif
-    else
-        PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/nfcse.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/nfcse.cfg:mtk
-    endif
-endif
-
-ifeq (yes,$(strip $(MTK_NFC_SUPPORT)))
-
-  PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,frameworks/native/data/etc/android.hardware.nfc.xml:system/etc/permissions/android.hardware.nfc.xml)
-
-  ifneq ($(MTK_BSP_PACKAGE), yes)
-    PRODUCT_COPY_FILES +=$(call add-to-product-copy-files-if-exists,frameworks/base/nfc-extras/com.android.nfc_extras.xml:system/etc/permissions/com.android.nfc_extras.xml)
-    PRODUCT_COPY_FILES +=$(call add-to-product-copy-files-if-exists,packages/apps/Nfc/etc/nfcee_access.xml:system/etc/nfcee_access.xml)
-    ifeq ($(MTK_NFC_GSMA_SUPPORT), yes)
-        PRODUCT_PACKAGES += com.mediatek.nfcgsma_extras
-        PRODUCT_PACKAGES += com.gsma.services.nfc
-        PRODUCT_COPY_FILES +=$(call add-to-product-copy-files-if-exists,packages/apps/Nfc/gsma/jar/com.gsma.services.nfc.xml:$(TARGET_COPY_OUT_VENDOR)/etc/permissions/com.gsma.services.nfc.xml:mtk)
-        PRODUCT_COPY_FILES +=$(call add-to-product-copy-files-if-exists,packages/apps/Nfc/gsma/jar/com.gsma.services.nfc.jar:$(TARGET_COPY_OUT_VENDOR)/framework/com.gsma.services.nfc.jar:mtk)
-
-        ifeq ($(wildcard $(MTK_TARGET_PROJECT_FOLDER)/gsma.cfg),)
-            PRODUCT_COPY_FILES += packages/apps/Nfc/gsma/gsma.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/gsma.cfg:mtk
-        endif
-
-        PRODUCT_PROPERTY_OVERRIDES += ro.mtk_nfc_gsma_support=1
-    endif
-  endif
-
-  PRODUCT_PACKAGES += Nfc
-  PRODUCT_PACKAGES += Tag
-  PRODUCT_PACKAGES += nfcc.default
-  PRODUCT_PROPERTY_OVERRIDES +=  ro.nfc.port=I2C
-
-  ifeq (yes,$(strip $(MTK_NFC_HCE_SUPPORT)))
-    PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,frameworks/native/data/etc/android.hardware.nfc.hce.xml:system/etc/permissions/android.hardware.nfc.hce.xml)
-  endif
-
-endif
-
-
-ifeq ($(strip $(MTK_NFC_OMAAC_SUPPORT)),yes)
-  PRODUCT_PACKAGES += SmartcardService
-  PRODUCT_PACKAGES += org.simalliance.openmobileapi.jar
-  PRODUCT_PACKAGES += org.simalliance.openmobileapi.xml
-  ifeq ($(strip $(MTK_NFC_SUPPORT)),yes)
-    PRODUCT_PACKAGES += eSETerminal
-  endif
-  PRODUCT_PACKAGES += Uicc1Terminal
-  PRODUCT_PACKAGES += Uicc2Terminal
-endif
-
-# IR-Learning Core
-ifeq ($(strip $(MTK_IR_LEARNING_SUPPORT)),yes)
-  PRODUCT_PACKAGES += ConsumerIrExtraService
-  PRODUCT_PACKAGES += com.mediatek.consumerir
-  PRODUCT_PACKAGES += com.mediatek.consumerirextra.xml
-  PRODUCT_PACKAGES += libconsumerir
-  PRODUCT_PACKAGES += libconsumerir_vendor
-endif
-
-# IR-Learning Test Package
-ifeq ($(strip $(MTK_IR_LEARNING_SUPPORT)),yes)
-  PRODUCT_PACKAGES += ConsumerIrValidator
-  PRODUCT_PACKAGES += ConsumerIrPermissionValidator
-endif
-
-# IRTX HAL CORE
-ifeq (yes,$(strip $(MTK_IRTX_SUPPORT)))
-    PRODUCT_PACKAGES += libconsumerir_core
-else
-ifeq (yes,$(strip $(MTK_IRTX_PWM_SUPPORT)))
-    PRODUCT_PACKAGES += libconsumerir_core
-endif
-endif
-
-ifeq ($(strip $(MTK_HOTKNOT_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libhotknot_GT1XX
-  PRODUCT_PACKAGES += libhotknot_GT9XX
-  PRODUCT_PROPERTY_OVERRIDES += ro.mediatek.hotknot.module=$(CUSTOM_KERNEL_TOUCHPANEL)
-endif
-ifeq ($(strip $(MTK_HOTKNOT_SUPPORT)), yes)
-  PRODUCT_PACKAGES += HotKnot
-  PRODUCT_PACKAGES += HotKnotBeam
-  PRODUCT_PACKAGES += HotKnotCommonUI
-  PRODUCT_PACKAGES += HotKnotConnectivity
-  PRODUCT_PACKAGES += hotknot_native_service
-  PRODUCT_PACKAGES += libhotknot_dev
-
-    ifeq ($(wildcard $(MTK_TARGET_PROJECT_FOLDER)/hotknot.cfg),)
-        PRODUCT_COPY_FILES += vendor/mediatek/proprietary/packages/apps/HotKnot/hotknot.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/hotknot.cfg:mtk
-    else
-        PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/hotknot.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/hotknot.cfg:mtk
-    endif
-endif
-
-ifeq ($(strip $(MTK_CROSSMOUNT_SUPPORT)),yes)
-  PRODUCT_PACKAGES += com.mediatek.crossmount.discovery
-  PRODUCT_PACKAGES += com.mediatek.crossmount.discovery.xml
-  PRODUCT_PACKAGES += CrossMount
-  PRODUCT_PACKAGES += com.mediatek.crossmount.adapter
-  PRODUCT_PACKAGES += com.mediatek.crossmount.adapter.xml
-  PRODUCT_PACKAGES += CrossMountSettings
-  PRODUCT_PACKAGES += CrossMountSourceCamera
-  PRODUCT_PACKAGES += CrossMountStereoSound
-  PRODUCT_PACKAGES += libcrossmount
-  PRODUCT_PACKAGES += libcrossmount_jni
-  PRODUCT_PACKAGES += sensors.virtual
-  PRODUCT_PACKAGES += SWMountViewer
-endif
-
-$(call inherit-product-if-exists, frameworks/base/data/videos/FrameworkResource.mk)
-ifeq ($(strip $(MTK_LIVE_PHOTO_SUPPORT)), yes)
-  PRODUCT_PACKAGES += com.mediatek.effect
-  PRODUCT_PACKAGES += com.mediatek.effect.xml
-endif
-
-ifeq ($(strip $(MTK_MULTICORE_OBSERVER_APP)), yes)
-  PRODUCT_PACKAGES += MultiCoreObserver
-endif
-
-# for Search, ApplicationsProvider provides apps search
-PRODUCT_PACKAGES += ApplicationsProvider
-
-# Live wallpaper configurations
-# #workaround: disable it directly since device.mk can't get the value of TARGET_BUILD_PDK
-PRODUCT_COPY_FILES += packages/wallpapers/LivePicker/android.software.live_wallpaper.xml:system/etc/permissions/android.software.live_wallpaper.xml
-
-# for JPE
-PRODUCT_PACKAGES += jpe_tool
-
-# for Camera EffectFactory
-PRODUCT_PACKAGES += libfeatureio.featurefactory
-
-ifneq ($(strip $(MTK_PLATFORM)),)
-  PRODUCT_PACKAGES += libnativecheck-jni
-endif
-
-# for mediatek-res
-PRODUCT_PACKAGES += mediatek-res
-
-# for TER service
-PRODUCT_PACKAGES += terservice
-PRODUCT_PACKAGES += tertestclient
-ifeq ($(strip $(MTK_TER_SERVICE)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ter.service.enable=1
-endif
-
-PRODUCT_PROPERTY_OVERRIDES += wfd.dummy.enable=1
-PRODUCT_PROPERTY_OVERRIDES += wfd.iframesize.level=0
-
-ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-   PRODUCT_PACKAGES += Utk
-endif
-
-ifeq ($(strip $(EVDO_IR_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += \
-    ril.evdo.irsupport=1
-endif
-
-ifeq ($(strip $(EVDO_DT_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += \
-    ril.evdo.dtsupport=1
-endif
-
-# for libudf
-ifeq ($(strip $(MTK_USER_SPACE_DEBUG_FW)),yes)
-PRODUCT_PACKAGES += libudf
-endif
-
-PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/ProjectConfig.mk:$(TARGET_COPY_OUT_VENDOR)/data/misc/ProjectConfig.mk:mtk
-
-ifeq ($(strip $(MTK_BICR_SUPPORT)), yes)
-PRODUCT_COPY_FILES += device/mediatek/common/iAmCdRom.iso:$(TARGET_COPY_OUT_VENDOR)/etc/iAmCdRom.iso:mtk
-endif
-
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-    PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,vendor/mediatek/proprietary/frameworks/base/telephony/etc/virtual-spn-conf-by-efgid1.xml:$(TARGET_COPY_OUT_VENDOR)/etc/virtual-spn-conf-by-efgid1.xml:mtk)
-    PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,vendor/mediatek/proprietary/frameworks/base/telephony/etc/virtual-spn-conf-by-efpnn.xml:$(TARGET_COPY_OUT_VENDOR)/etc/virtual-spn-conf-by-efpnn.xml:mtk)
-    PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,vendor/mediatek/proprietary/frameworks/base/telephony/etc/virtual-spn-conf-by-efspn.xml:$(TARGET_COPY_OUT_VENDOR)/etc/virtual-spn-conf-by-efspn.xml:mtk)
-    PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,vendor/mediatek/proprietary/frameworks/base/telephony/etc/virtual-spn-conf-by-imsi.xml:$(TARGET_COPY_OUT_VENDOR)/etc/virtual-spn-conf-by-imsi.xml:mtk)
-
-    ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-      PRODUCT_COPY_FILES += vendor/mediatek/proprietary/frameworks/base/telephony/etc/spn-conf-op09.xml:$(TARGET_COPY_OUT_VENDOR)/etc/spn-conf-op09.xml:mtk
-    endif
-
-    ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGC)
-      PRODUCT_COPY_FILES += vendor/mediatek/proprietary/frameworks/base/telephony/etc/spn-conf-op09.xml:$(TARGET_COPY_OUT_VENDOR)/etc/spn-conf-op09.xml:mtk
-    endif
-  endif
-endif
-
-ifeq ($(strip $(MTK_AUDIO_ALAC_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libMtkOmxAlacDec
-endif
-
-ifeq ($(strip $(TRUSTONIC_TEE_SUPPORT)), yes)
-  PRODUCT_PACKAGES += RootPA
-  PRODUCT_PACKAGES += libMcClient
-  PRODUCT_PACKAGES += libTeeClient
-  PRODUCT_PACKAGES += libMcRegistry
-  PRODUCT_PACKAGES += mcDriverDaemon
-  PRODUCT_PACKAGES += libMcTeeKeymaster
-  PRODUCT_PACKAGES += libMcGatekeeper
-  PRODUCT_PACKAGES += libsec_mem
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_trustonic_tee_support=1
-  PRODUCT_COPY_FILES += \
-      device/mediatek/common/public.libraries.vendor.txt:$(TARGET_COPY_OUT_VENDOR)/etc/public.libraries.txt:mtk
-  ifeq ($(strip $(MTK_TEE_GP_SUPPORT)),yes)
-    PRODUCT_PACKAGES += libTEECommon
-  endif
-  ifeq ($(strip $(MTK_SEC_VIDEO_PATH_SUPPORT)), yes)
-    PRODUCT_PACKAGES += libMtkH264SecVencTLCLib
-    PRODUCT_PACKAGES += libMtkH264SecVdecTLCLib
-    PRODUCT_PACKAGES += libMtkH265SecVdecTLCLib
-    PRODUCT_PACKAGES += libMtkVP9SecVdecTLCLib
-    PRODUCT_PACKAGES += libtlcWidevineModularDrm
-    PRODUCT_PACKAGES += libtlcWidevineClassicDrm
-    PRODUCT_PACKAGES += libtplay
-    ifeq ($(strip $(MTK_DRM_KEY_MNG_SUPPORT)), yes)
-      PRODUCT_PACKAGES += liburee_meta_drmkeyinstall
-    endif
-  endif
-  ifeq ($(strip $(MTK_TEE_TRUSTED_UI_SUPPORT)), yes)
-    PRODUCT_PACKAGES += libTui
-    PRODUCT_PACKAGES += TuiService
-    PRODUCT_PACKAGES += SamplePinpad
-    PRODUCT_PACKAGES += libTlcPinpad
-  endif
-endif
-
-ifeq ($(strip $(MTK_GOOGLE_TRUSTY_SUPPORT)), yes)
-  PRODUCT_PACKAGES += gatekeeper.trusty
-  PRODUCT_PACKAGES += keystore.trusty
-  PRODUCT_PACKAGES += libtrusty
-endif
-
-ifeq ($(strip $(MICROTRUST_TEE_SUPPORT)), yes)
-  PRODUCT_PACKAGES += teei_daemon
-#  PRODUCT_PACKAGES += init_thh
-#  PRODUCT_PACKAGES += libteei_fp
-#  PRODUCT_PACKAGES += libfingerprint_tac
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_microtrust_tee_support=1
-endif
-
-ifeq ($(strip $(MTK_TEE_GP_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tee_gp_support=1
-endif
-
-ifeq ($(strip $(MTK_SEC_VIDEO_PATH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_sec_video_path_support=1
-  ifeq ($(filter $(MTK_IN_HOUSE_TEE_SUPPORT) $(MTK_GOOGLE_TRUSTY_SUPPORT),yes),yes)
-  PRODUCT_PACKAGES += lib_uree_mtk_video_secure_al
-  endif
-endif
-
-ifeq ($(strip $(MTK_COMBO_SUPPORT)), yes)
-  $(call inherit-product-if-exists, device/mediatek/common/connectivity/product_package/product_package.mk)
-endif
-
-ifneq (yes,$(strip $(SPM_FW_USE_PARTITION)))
-  $(call inherit-product-if-exists,vendor/mediatek/proprietary/hardware/spm/product_package.mk)
-else
-  PRODUCT_PACKAGES += spmfw.bin
-endif
-
-MCUPMFW_ROOT_DIR := vendor/mediatek/proprietary/hardware/mcupmfw
-ifeq (yes,$(strip $(MCUPM_FW_USE_PARTITION)))
-  PRODUCT_PACKAGES += mcupmfw.img
-endif
-
-ifeq ($(strip $(MTK_SENSOR_HUB_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_sensorhub_support=1
-  PRODUCT_PACKAGES += libhwsensorhub \
-                      libsensorhub \
-                      libsensorhub_jni \
-                      sensorhubservice \
-                      libsensorhubservice
-endif
-
-ifeq ($(strip $(MTK_TC7_FEATURE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tc7_feature=1
-endif
-
-PRODUCT_PACKAGES += Launcher3
-
-#Add for CCCI Lib
-PRODUCT_PACKAGES += libccci_util
-
-ifeq ($(strip $(MTK_WMA_PLAYBACK_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libMtkOmxWmaDec
-endif
-
-ifeq ($(strip $(MTK_WMA_PLAYBACK_SUPPORT))_$(strip $(MTK_SWIP_WMAPRO)), yes_yes)
-  PRODUCT_PACKAGES += libMtkOmxWmaProDec
-endif
-
-
-# IKEv2
-ifeq ($(strip $(MTK_EPDG_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_epdg_support=1
-  PRODUCT_PACKAGES += ipsec_mon
-
-  PRODUCT_COPY_FILES += device/mediatek/common/init.epdg.rc:root/init.epdg.rc
-endif
-
-#Set mobiledata to false only in operator package
-#ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-#  ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-#    ifdef OPTR
-#      ifneq ($(strip $(OPTR)), NONE)
-#        ifeq (OP01,$(word 1,$(subst _, ,$(OPTR_SPEC_SEG_DEF))))
-#          PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=false
-#        else ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-#          PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=false
-#        else
-#          PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-#        endif
-#      else
-#        PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-#      endif
-#    else
-#      PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-#    endif
-#  else
-#    PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-#  endif
-#else
-#  PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-#endif
-PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-
-PRODUCT_PROPERTY_OVERRIDES += persist.radio.mobile.data=0,0
-#for meta mode dump data
-PRODUCT_PROPERTY_OVERRIDES += persist.meta.dumpdata=0
-
-ifneq ($(MTK_AUDIO_TUNING_TOOL_VERSION),)
-  ifneq ($(strip $(MTK_AUDIO_TUNING_TOOL_VERSION)),V1)
-    PRODUCT_PACKAGES += libaudio_param_parser
-    AUDIO_PARAM_OPTIONS_LIST += 5_POLE_HS_SUPPORT=$(MTK_HEADSET_ACTIVE_NOISE_CANCELLATION)
-    MTK_AUDIO_PARAM_DIR_LIST += device/mediatek/common/audio_param
-    #MTK_AUDIO_PARAM_FILE_LIST += SOME_ZIP_FILE
-    ifeq ($(strip $(MTK_USB_PHONECALL)),AP)
-      AUDIO_PARAM_OPTIONS_LIST += MTK_USB_PHONECALL=yes
-    endif
-
-    # speaker path customization for gain table
-    ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),int_spk_amp)
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_INT=yes
-    else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),2_in_1_spk)
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_INT=yes
-    else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),3_in_1_spk)
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_INT=yes
-    else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),int_lo_buf)
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_LO=yes
-    else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),int_hp_buf)
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_HP=yes
-    else
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_NO_ANA=yes
-    endif
-
-    # receiver path customization for gain table
-    ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),2_in_1_spk)
-      AUDIO_PARAM_OPTIONS_LIST += RCV_PATH_2_IN_1_SPK=yes
-    else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),3_in_1_spk)
-      AUDIO_PARAM_OPTIONS_LIST += RCV_PATH_3_IN_1_SPK=yes
-    else ifeq ($(findstring smartpa,$(MTK_AUDIO_SPEAKER_PATH)),smartpa)
-      ifeq ($(MTK_2IN1_SPK_SUPPORT),yes)
-        AUDIO_PARAM_OPTIONS_LIST += RCV_PATH_NO_ANA=yes
-     else
-        AUDIO_PARAM_OPTIONS_LIST += RCV_PATH_INT=yes
-      endif
-    else
-      AUDIO_PARAM_OPTIONS_LIST += RCV_PATH_INT=yes
-    endif
-
-    # Speech Parameter Tuning
-    # SPH_PARAM_VERSION: 0 support single network(MD ability related)
-    # SPH_PARAM_VERSION: 1.0 support multiple networks(MD ability related)
-    # SPH_PARAM_VERSION: 2.0 support IIR and fix WBFIR(MD ability related)
-    AUDIO_PARAM_OPTIONS_LIST += SPH_PARAM_VERSION=2.0
-    AUDIO_PARAM_OPTIONS_LIST += SPH_PARAM_TTY=yes
-    AUDIO_PARAM_OPTIONS_LIST += FIX_WB_ENH=yes
-    AUDIO_PARAM_OPTIONS_LIST += MTK_IIR_ENH_SUPPORT=yes
-    AUDIO_PARAM_OPTIONS_LIST += MTK_IIR_MIC_SUPPORT=no
-    AUDIO_PARAM_OPTIONS_LIST += MTK_FIR_IIR_ENH_SUPPORT=no
-
-    # Speech Loopback Tunning
-    ifeq ($(MTK_TC1_FEATURE),yes)
-      AUDIO_PARAM_OPTIONS_LIST += MTK_AUDIO_SPH_LPBK_PARAM=yes
-    else ifeq ($(MTK_TC10_FEATURE),yes)
-      AUDIO_PARAM_OPTIONS_LIST += MTK_AUDIO_SPH_LPBK_PARAM=yes
-    else ifeq ($(MTK_AUDIO_SPH_LPBK_PARAM),yes)
-      AUDIO_PARAM_OPTIONS_LIST += MTK_AUDIO_SPH_LPBK_PARAM=yes
-    endif
-    # Super Volume Parameter
-    AUDIO_PARAM_OPTIONS_LIST += SPH_PARAM_SV=no
-
-  endif
-endif
-
-ifeq ($(strip $(MTK_SPEECH_ENCRYPTION_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libaudiocustencrypt
-endif
-
-# aurisys framework
-ifneq ($(MTK_BASIC_PACKAGE), yes)
-  ifeq ($(MTK_AURISYS_FRAMEWORK_SUPPORT),yes)
-    # configurations
-    PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/aurisys/aurisys_config.xml:$(TARGET_COPY_OUT_VENDOR)/etc/aurisys_config.xml:mtk
-
-    # OpenDSP
-    PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/aurisys/libfvaudio/FV-SAM-MTK2.dat:$(TARGET_COPY_OUT_VENDOR)/etc/aurisys_param/FV-SAM-MTK2.dat:mtk
-    PRODUCT_PACKAGES   += libfvaudio
-
-    # mediatek IIR
-    PRODUCT_PACKAGES   += lib_iir
-
-    # mediatek BESSOUND
-    PRODUCT_PACKAGES   += libaudioloudc
-    PRODUCT_PACKAGES   += libaudiocompensationfilterc
-
-    # mediatek record/VoIP
-    PRODUCT_COPY_FILES += device/mediatek/common/audio_param/Speech_AudioParam.xml:$(TARGET_COPY_OUT_VENDOR)/etc/aurisys_param/Speech_AudioParam.xml:mtk
-    PRODUCT_PACKAGES   += lib_speech_enh
-
-    # BliSRC & Bit Converter
-    PRODUCT_PACKAGES += libaudiocomponentenginec
-
-    # tuning tool
-    PRODUCT_PACKAGES += AudioSetParam
-  endif
-endif
-
-# Audio speech enhancement library
-PRODUCT_PACKAGES += libspeech_enh_lib
-
-ifeq ($(findstring smartpa, $(MTK_AUDIO_SPEAKER_PATH)), smartpa)
-    PRODUCT_PACKAGES += libaudio_param_parser
-    MTK_AUDIO_PARAM_DIR_LIST += device/mediatek/common/audio_param_smartpa
-endif
-
-# Audio BTCVSD Lib
-PRODUCT_PACKAGES += libcvsd_mtk
-PRODUCT_PACKAGES += libmsbc_mtk
-
-# Audio Compensation Lib
-PRODUCT_PACKAGES += libaudiocompensationfilter
-
-ifeq ($(strip $(MTK_NTFS_OPENSOURCE_SUPPORT)), yes)
-  PRODUCT_PACKAGES += ntfs-3g
-  PRODUCT_PACKAGES += ntfsfix
-endif
-
-# Add for HetComm feature
-ifeq ($(strip $(MTK_HETCOMM_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_hetcomm_support=1
-  PRODUCT_PACKAGES += HetComm
-endif
-
-ifeq ($(strip $(MTK_DEINTERLACE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_deinterlace_support=1
-endif
-
-ifeq ($(strip $(MTK_DOLBY_DAP_SUPPORT)),yes)
-
-DOLBY_DAX_VERSION            := 1
-DOLBY_DAP                    := true
-DOLBY_DAP2                   := false
-DOLBY_DAP_SW                 := true
-DOLBY_DAP_HW                 := false
-DOLBY_DAP_PREGAIN            := true
-DOLBY_DAP_HW_QDSP_HAL_API    := false
-DOLBY_DAP_MOVE_EFFECT        := true
-DOLBY_DAP_BYPASS_SOUND_TYPES := false
-DOLBY_CONSUMER_APP           := true
-DOLBY_UDC                    := true
-DOLBY_UDC_VIRTUALIZE_AUDIO   := false
-DOLBY_MONO_SPEAKER           := true
-
-include vendor/dolby/ds/dolby-buildspec.mk
-$(call inherit-product, vendor/dolby/ds/dolby-product.mk)
-
-PRODUCT_COPY_FILES := \
-    vendor/dolby/device/mediatek_sw/audio_effects.conf:system/vendor/etc/audio_effects.conf:dolby \
-    vendor/dolby/device/mediatek_sw/ds1-default.xml:system/vendor/etc/dolby/ds1-default.xml:dolby \
-    $(PRODUCT_COPY_FILES)
-
-PRODUCT_RESTRICT_VENDOR_FILES := false
-endif
-
-ifeq ($(strip $(MTK_MD_DIRECT_TETHERING_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_md_direct_tethering=1
-    PRODUCT_PROPERTY_OVERRIDES += ro.tethering.bridge.interface=mdbr0
-    PRODUCT_PROPERTY_OVERRIDES += sys.mtk_md_direct_tether_enable=true
-    PRODUCT_PACKAGES += brctl
-endif
-
-#Fix me: specific enable for build error workaround
-SKIP_BOOT_JARS_CHECK := true
-
-ifeq ($(strip $(MTK_SWITCH_ANTENNA_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_switch_antenna=1
-endif
-
-ifeq ($(strip $(MTK_TDD_DATA_ONLY_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tdd_data_only_support=1
-endif
-
-ifneq ($(strip $(MTK_MD_SBP_CUSTOM_VALUE)),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_md_sbp_custom_value=$(strip $(MTK_MD_SBP_CUSTOM_VALUE))
-endif
-
-# Add for Automatic Setting for heapgrowthlimit & heapsize
-RESOLUTION_HXW=$(shell expr $(LCM_HEIGHT) \* $(LCM_WIDTH))
-
-ifeq ($(shell test $(RESOLUTION_HXW) -ge 0 && test $(RESOLUTION_HXW) -lt 1000000 && echo true), true)
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapgrowthlimit=128m
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapsize=256m
-endif
-
-ifeq ($(shell test $(RESOLUTION_HXW) -ge 1000000 && test $(RESOLUTION_HXW) -lt 3500000 && echo true), true)
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapgrowthlimit=192m
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapsize=384m
-endif
-
-ifeq ($(shell test $(RESOLUTION_HXW) -ge 3500000 && echo true), true)
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapgrowthlimit=384m
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapsize=768m
-endif
-
-PRODUCT_PACKAGES += CarrierConfig
-
-# Add for SensorHub
-PRODUCT_PACKAGES += SensorHub
-
-# Add for common service initialization
-PRODUCT_COPY_FILES += device/mediatek/common/init.common_svc.rc:root/init.common_svc.rc
-
-# M: GMO Zygote64 on demand @{
-ifeq ($(strip $(MTK_GMO_ZYGOTE_ON_DEMAND)), yes)
-    # 1 = support secondary zygote on demand, 0 = not support
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_gmo_zygote_on_demand=1
-
-    # 1 = full preload, 0 = no preload
-    PRODUCT_PROPERTY_OVERRIDES += persist.sys.mtk_zygote_preload=0
-
-    # the time to stop secondary zygote after the last forked process has been killed, in seconds
-    PRODUCT_PROPERTY_OVERRIDES += persist.sys.mtk_zygote_timeout=60
-
-    # 1 = enable debug, 0 = disable debug
-    PRODUCT_PROPERTY_OVERRIDES += persist.sys.mtk_zygote_debug=0
-
-    # include init.zygote_on_demand.rc
-    PRODUCT_COPY_FILES += device/mediatek/common/init.zygote_on_demand.rc:root/init.zygote_on_demand.rc
-endif
-# M: GMO Zygote64 on demand @}
-
-# Add for (VzW) chipset test
-ifneq ($(MTK_VZW_CHIPTEST_MODE_SUPPORT),)
-  #we dont support yes, only support 0,1,2
-  ifeq (, $(filter 0 no,$(MTK_VZW_CHIPTEST_MODE_SUPPORT)))
-    PRODUCT_COPY_FILES += device/mediatek/common/init.chiptest.rc:root/init.chiptest.rc
-    ifeq ($(strip $(MTK_VZW_CHIPTEST_MODE_SUPPORT)), 1)
-      PRODUCT_PROPERTY_OVERRIDES += persist.chiptest.enable=1
-    endif
-  endif
-endif
-
-# Add for Dynamic-SBP
-ifeq ($(strip $(MTK_DYNAMIC_SBP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.mtk_dsbp_support=1
-endif
-
-# Add for Dynamic IMS switch support
-ifeq ($(strip $(MTK_DYNAMIC_IMS_SWITCH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_dynamic_ims_switch=1
-endif
-
-# Add for MTK_CT_VOLTE_SUPPORT
-ifeq ($(strip $(MTK_CT_VOLTE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_ct_volte_support=1
-endif
-
-# Add for BRM superset
-ifeq ($(strip $(RELEASE_BRM)), yes)
-  include device/mediatek/common/releaseBRM.mk
-endif
-
-# Add for Contacts AAS and SNE
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-        PRODUCT_PACKAGES += AasSne
-    endif
-endif
-
-# Add for Contacts SimProcessor
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-        PRODUCT_PACKAGES += SimProcessor
-    endif
-endif
-
-# Add for Modem protocol2 capability setting
-ifneq ($(strip $(MTK_PROTOCOL2_RAT_CONFIG)),)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.mtk_ps2_rat=$(strip $(MTK_PROTOCOL2_RAT_CONFIG))
-endif
-
-# Add for Modem protocol3 capability setting
-ifneq ($(strip $(MTK_PROTOCOL3_RAT_CONFIG)),)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.mtk_ps3_rat=$(strip $(MTK_PROTOCOL3_RAT_CONFIG))
-endif
-
-
-ifeq ($(strip $(MTK_VIBSPK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_vibspk_support=1
-endif
-
-# Add for opt_c2k_lte_mode
-ifeq ($(strip $(MTK_C2K_LTE_MODE)), 2)
-  PRODUCT_PROPERTY_OVERRIDES +=ro.boot.opt_c2k_lte_mode=2
-else
-  ifeq ($(strip $(MTK_C2K_LTE_MODE)), 1)
-    PRODUCT_PROPERTY_OVERRIDES +=ro.boot.opt_c2k_lte_mode=1
-  else
-    ifeq ($(strip $(MTK_C2K_LTE_MODE)), 0)
-      PRODUCT_PROPERTY_OVERRIDES +=ro.boot.opt_c2k_lte_mode=0
-    endif
-  endif
-endif
-
-# Add for opt_md1_support
-ifneq ($(strip $(MTK_MD1_SUPPORT)),)
-ifneq ($(strip $(MTK_MD1_SUPPORT)), 0)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_md1_support=$(strip $(MTK_MD1_SUPPORT))
-endif
-endif
-
-# Add for opt_md3_support
-ifneq ($(strip $(MTK_MD3_SUPPORT)),)
-ifneq ($(strip $(MTK_MD3_SUPPORT)), 0)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_md3_support=$(strip $(MTK_MD3_SUPPORT))
-endif
-endif
-
-# Add for opt_lte_support
-ifneq ($(strip $(MTK_PROTOCOL1_RAT_CONFIG)),)
-ifneq ($(findstring L,$(strip $(MTK_PROTOCOL1_RAT_CONFIG))),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_lte_support=1
-endif
-endif
-
-# Add for opt_irat_support
-ifeq ($(strip $(MTK_IRAT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_irat_support=1
-endif
-
-PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILMUXD=I
-
-# Telephony RIL log configurations
-ifeq ($(strip $(MTK_TELEPHONY_CONN_LOG_CTRL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.tel_log_ctrl=1
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AT=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILC-MTK=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILC=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxMainThread=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxRoot=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxRilAdapter=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxController=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILC-RP=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxCloneMgr=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxHandlerMgr=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxIdToStr=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxMclMessenger=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RilClient=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxMclStsMgr=I
-endif
-ifneq ($(strip $(TARGET_BUILD_VARIANT)),eng)
-  # user/userdebug load
-  # V/D/(I/W/E)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DCT=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-DATA=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_RIL-DATA=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GsmCdmaPhone=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SSDecisonMaker=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GsmMmiCode=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpSsController=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-SS=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILMD2-SS=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DataSubSelector=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DcFcMgr=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DC-1=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DC-2=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RetryManager=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IccProvider=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IccPhoneBookIM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AdnRecordCache=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AdnRecordLoader=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AdnRecord=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-PHB=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpPhbController=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RmcPhbReq=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RmcPhbUrc=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RtcPhb=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-SMS=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DupSmsFilterExt=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ConSmsFwkExt=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DataOnlySmsFwk=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.VT=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsVTProvider=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IccCardProxy=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IsimFileHandler=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IsimRecords=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SIMRecords=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SpnOverride=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.UiccCard=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.UiccController=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-SIM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.MtkAgpsHelper=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.CountryDetector=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.NetworkStats=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.NetworkPolicy=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DataDispatcher=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsService=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IMS_RILA=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IMSRILRequest=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsManager=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsApp=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsBaseCommands=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsCall=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsPhone=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsPhoneCall=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsPhoneBase=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsCallSession=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsCallProfile=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsEcbm=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsEcbmProxy=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.OperatorUtils=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.WfoApp=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GbaApp=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GbaBsfProcedure=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GbaBsfResponse=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GbaDebugParam=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GbaService=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SresResponse=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsUtService=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SimservType=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SimservsTest=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsUt=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SSDecisonMaker=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SuppSrvConfig=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ECCCallHelper=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GsmConnection=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.TelephonyConf=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.TeleConfCtrler=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.TelephonyConn=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.TeleConnService=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ECCRetryHandler=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ECCNumUtils=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ECCRuleHandler=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SuppMsgMgr=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ECCSwitchPhone=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GsmCdmaConn=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GsmCdmaPhone=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.Phone=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-CC=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpCallControl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpAudioControl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RadioManager=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL_Mux=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-OEM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL_UIM_SOCKET=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILD=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-RP=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxMessage=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxDebugInfo=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxTimer=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxObject=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SlotQueueEntry=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxAction=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RFX=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpRadioMessage=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpModemMessage=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.PhoneFactory=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ProxyController=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SpnOverride=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SmsPlusCode=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AutoRegSmsFwk=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AirplaneHandler=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxDefDestUtils=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxSM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxSocketSM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxDT=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpCdmaOemCtrl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpRadioCtrl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpMDCtrl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpCdmaRadioCtrl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpFOUtils=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_RIL-SIM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.VDO_LOG=I
-else
-  # eng load
-  # V/(D/I/W/E)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DCT=D
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-DATA=D
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_RIL-DATA=D
-endif
-# endif for TARGET_BUILD_VARIANT
-else
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DCT=D
-endif
-# endif for MTK_TELEPHONY_CONN_LOG_CTRL_SUPPORT
-
-# Add for opt_eccci_c2k
-ifeq ($(strip $(MTK_ECCCI_C2K)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_eccci_c2k=1
-endif
-
-# Add for opt_using_default, always set to 1
-PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_using_default=1
-
-# Add for opt_c2k_support
-ifneq ($(strip $(MTK_PROTOCOL1_RAT_CONFIG)),)
-ifneq ($(findstring C,$(strip $(MTK_PROTOCOL1_RAT_CONFIG))),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_c2k_support=1
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_AT=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_RILC=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_ATConfig=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.LIBC2K_RIL=I
-endif
-endif
-
-# Add for Multi Ps Attach
-ifeq ($(strip $(MTK_MULTI_PS_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_data_config=1
-endif
-
-# Add for multi-window
-ifeq ($(strip $(MTK_MULTI_WINDOW_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multiwindow=1
-  PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,frameworks/native/data/etc/android.software.freeform_window_management.xml:system/etc/permissions/android.software.freeform_window_management.xml)
-endif
-
-# Audio policy config
-ifeq ($(strip $(USE_XML_AUDIO_POLICY_CONF)), 1)
-AUDIO_POLICY_PROJECT_CONFIGS := \
-  $(strip \
-    $(notdir $(wildcard $(MTK_TARGET_PROJECT_FOLDER)/audio_policy_config/*.xml)\
-    ) \
-  )
-AUDIO_POLICY_BASE_PROJECT_CONFIGS := \
-  $(strip \
-    $(filter-out $(AUDIO_POLICY_PROJECT_CONFIGS), \
-      $(notdir $(wildcard device/mediatek/$(MTK_BASE_PROJECT)/audio_policy_config/*.xml)) \
-    ) \
-  )
-AUDIO_POLICY_PLATFORM_CONFIGS := \
-  $(strip \
-    $(filter-out $(AUDIO_POLICY_PROJECT_CONFIGS) $(AUDIO_POLICY_BASE_PROJECT_CONFIGS), \
-      $(notdir $(wildcard device/mediatek/$(MTK_PLATFORM_DIR)/audio_policy_config/*.xml)) \
-    ) \
-  )
-AUDIO_POLICY_COMMON_CONFIGS := \
-  $(strip \
-    $(filter-out $(AUDIO_POLICY_PROJECT_CONFIGS) $(AUDIO_POLICY_BASE_PROJECT_CONFIGS) $(AUDIO_POLICY_PLATFORM_CONFIGS), \
-      $(notdir $(wildcard device/mediatek/common/audio_policy_config/*.xml)) \
-    ) \
-  )
-
-$(foreach x,$(AUDIO_POLICY_PROJECT_CONFIGS), \
-  $(eval PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/audio_policy_config/$(x):system/etc/$(x)) \
-)
-
-$(foreach x,$(AUDIO_POLICY_BASE_PROJECT_CONFIGS), \
-  $(eval PRODUCT_COPY_FILES += device/mediatek/$(MTK_BASE_PROJECT)/audio_policy_config/$(x):system/etc/$(x)) \
-)
-
-$(foreach x,$(AUDIO_POLICY_PLATFORM_CONFIGS), \
-  $(eval PRODUCT_COPY_FILES += device/mediatek/$(MTK_PLATFORM_DIR)/audio_policy_config/$(x):system/etc/$(x)) \
-)
-
-$(foreach x,$(AUDIO_POLICY_COMMON_CONFIGS), \
-  $(eval PRODUCT_COPY_FILES += device/mediatek/common/audio_policy_config/$(x):system/etc/$(x)) \
-)
-endif
-
-#Add for video codec customization
-PRODUCT_PROPERTY_OVERRIDES += mtk.vdec.waitkeyframeforplay=1
-
-ifeq ($(strip $(MTK_EMBMS_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_embms_support=1
-    PRODUCT_PACKAGES += \
-        EweMBMSServer \
-        com.verizon.embms.jar \
-        com.verizon.embms.xml
-endif
-
-# Add for sdcardfs
-PRODUCT_PROPERTY_OVERRIDES += ro.sys.sdcardfs=1
-
-# Add for CMCC Light Customization Support
-ifeq ($(strip $(CMCC_LIGHT_CUST_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.cmcc_light_cust_support=1
-endif
-
-# Add for USB MIDI
-PRODUCT_COPY_FILES += \
-frameworks/native/data/etc/android.software.midi.xml:system/etc/permissions/android.software.midi.xml
-
-# workaround for dex_preopt
-$(call add-product-dex-preopt-module-config,Settings,disable)
-$(call add-product-dex-preopt-module-config,DataProtection,disable)
-$(call add-product-dex-preopt-module-config,PermissionControl,disable)
-$(call add-product-dex-preopt-module-config,PrivacyProtectionLock,disable)
-
-ifeq (yes,$(strip $(MTK_BG_POWER_SAVING_SUPPORT)))
-    ifeq (yes,$(strip $(MTK_ALARM_AWARE_UPLINK_SUPPORT)))
-        PRODUCT_PROPERTY_OVERRIDES += persist.mtk.datashaping.support=1
-        PRODUCT_PROPERTY_OVERRIDES += persist.datashaping.alarmgroup=1
-    endif
-endif
-
-# Add for Running Booster Feature
-ifeq (yes,$(strip $(MTK_RUNNING_BOOSTER_SUPPORT)))
-    PRODUCT_PROPERTY_OVERRIDES += persist.duraspeed.support=1
-    PRODUCT_PACKAGES += DuraSpeed
-    ifeq (yes,$(strip $(MTK_RUNNING_BOOSTER_UPGRADE)))
-        PRODUCT_PROPERTY_OVERRIDES += persist.duraspeed.upgrade=1
-    endif
-    ifeq (yes,$(strip $(MTK_RUNNING_BOOSTER_DEFAULT_ON)))
-        PRODUCT_PROPERTY_OVERRIDES += persist.duraspeed.app.on=1
-    endif
-endif
-
-# Add for Resolution Switch feature
-ifeq ($(strip $(MTK_RESOLUTION_SWITCH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_res_switch=1
-endif
-
-# Add for Display HDR feature
-ifeq ($(strip $(MTK_HDR_VIDEO_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_hdr_video_support=1
-endif
-
-# Add for App Working Set feature
-ifeq ($(strip $(MTK_AWS_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_aws_support=1
-endif
-
-ifeq ($(strip $(MTK_MLC_NAND_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mlc_nand_support=1
-endif
-ifeq ($(strip $(MTK_TLC_NAND_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tlc_nand_support=1
-endif
-
-# for sensor multi-hal
-ifeq ($(USE_SENSOR_MULTI_HAL), true)
-  PRODUCT_COPY_FILES += $(MTK_PROJECT_FOLDER)/hals.conf:system/etc/sensors/hals.conf:mtk
-  PRODUCT_PROPERTY_OVERRIDES += ro.hardware.sensors=$(MTK_BASE_PROJECT)
-  PRODUCT_PACKAGES += sensors.$(MTK_BASE_PROJECT)
-endif
-
-# for hifi sensors feature
-ifeq ($(strip $(CUSTOM_HIFI_SENSORS)), yes)
-  PRODUCT_COPY_FILES += frameworks/native/data/etc/android.hardware.sensor.hifi_sensors.xml:system/etc/permissions/android.hardware.sensor.hifi_sensors.xml
-endif
-
-# for VR high performane feature
-ifeq ($(MTK_VR_HIGH_PERFORMANCE_SUPPORT),yes)
-  PRODUCT_COPY_FILES += frameworks/native/data/etc/android.hardware.vr.high_performance.xml:system/etc/permissions/android.hardware.vr.high_performance.xml
-  PRODUCT_PACKAGES += vr.$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')
-endif
-
-
-# Add EmergencyInfo apk to TK load
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-        PRODUCT_PACKAGES += EmergencyInfo
-    endif
-endif
-
-# Add for SKT customization
-ifeq ($(strip $(MTK_KOR_CUSTOMIZATION_SKT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_kor_customization_skt=1
-  PRODUCT_PROPERTY_OVERRIDES += persist.ril.sim.regmode=0
-endif
-
-# for KSC5601 decoding to write phonebook
-ifeq ($(strip $(KSC5601_WRITE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.ksc5601_write=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.ksc5601_write=0
-endif
-
-# for email field ucs2 decoding
-ifeq ($(strip $(EMAIL_SUPPORT_UCS2)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.email_support_ucs2=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.email_support_ucs2=0
-endif
-
-# for decoding USSD of KSC5601 for KOR operator
-ifeq ($(strip $(USSD_KSC5601)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.ussd_ksc5601=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.ussd_ksc5601=0
-endif
-
-#======================lovelyfonts start ==============================
-ifeq ($(strip $(LOVELYFONTS_SUPPORT)), yes)
-  PRODUCT_PACKAGES += LovelyFonts
-endif
-
-ifeq ($(strip $(MTK_YIQI_FONTS_FRAMEWORK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.lovelyfonts_support=1
-  PRODUCT_COPY_FILES += frameworks/base/lovelyfontsframework/clib/lib/libFonts.so:system/lib/libFonts.so
-  ifneq ($(strip $(TARGET_CPU_ABI_LIST_64_BIT)),"")
-    PRODUCT_COPY_FILES += frameworks/base/lovelyfontsframework/clib/lib64/libFonts.so:system/lib64/libFonts.so
-  endif
-  PRODUCT_COPY_FILES += frameworks/base/lovelyfontsframework/init.lovelyfonts.rc:root/init.lovelyfonts.rc
-  PRODUCT_PACKAGES += LovelyFontContainerService
-endif
-#======================lovelyfonts end  =======================
-
-# Log control for SMS
-ifneq ($(strip $(TARGET_BUILD_VARIANT)),eng)
-  # user/userdebug load
-  # V/D/(I/W/E)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.CdmaMoSms=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.CdmaMtSms=I
-else
-  # eng load
-  # V/(D/I/W/E)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.CdmaMoSms=D
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.CdmaMtSms=D
-endif
-
-# Add for LWA feature support
-ifeq ($(strip $(MTK_LWA_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_lwa_support=1
-endif
-
-# Add for LWI feature support
-ifeq ($(strip $(MTK_LWI_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_lwi_support=1
-endif
-
-# Add for FTL feature support
-ifeq ($(strip $(MTK_NAND_MTK_FTL_SUPPORT)), yes)
-   PRODUCT_PROPERTY_OVERRIDES += ro.mtk_nand_ftl_support=1
-endif
-
-# Add for MNTL feature support
-ifeq ($(strip $(MNTL_SUPPORT)), yes)
-   PRODUCT_PROPERTY_OVERRIDES += ro.mntl_support=1
-endif
-
-# MTK internal load or customer eng/userdebug load will buildin log daemon.
-# Customer user load default not have MTK log daemon.
-# If customer user load want buildin the log daemon, You need set
-# MTK_LOG_CUSTOMER_SUPPORT_ALL to yes, it will buildin log daemon as internal load.
-# Each log daemon is decided by its feature option.
-# Case: MTK internal load
-ifeq ($(strip $(MTK_INTERNAL)),yes)
-  ifeq ($(strip $(MTK_LOG_SUPPORT_GPS)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=0
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=1
-  endif
-  ifeq ($(strip $(MTK_MTKLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += MTKLogger
-    ifeq ($(strip $(MTK_BTLOGGER_SUPPORT)),yes)
-      PRODUCT_PACKAGES += BtTool
-    endif
-  endif
-  ifeq ($(strip $(MTK_NETWORK_LOG_SUPPORT)),yes)
-    PRODUCT_PACKAGES += netdiag
-  endif
-  PRODUCT_PACKAGES += tcpdump
-  ifeq ($(strip $(MTK_LOG_SUPPORT_MOBILE_LOG)),yes)
-    PRODUCT_PACKAGES += mobile_log_d
-  endif
-# Add for ModemMonitor(MDM) framework
-  ifeq ($(strip $(MTK_MODEM_MONITOR_SUPPORT)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_modem_monitor_support=1
-    PRODUCT_PACKAGES += \
-      md_monitor \
-      md_monitor_ctrl \
-      MDMLSample \
-      MDMConfig
-  endif
-  ifeq ($(strip $(MTK_AEE_SUPPORT)),yes)
-    HAVE_AEE_FEATURE = yes
-  else
-    HAVE_AEE_FEATURE = no
-  endif
-# Case: Customer eng/userdebug load
-else ifneq ($(strip $(TARGET_BUILD_VARIANT)),user)
-  ifeq ($(strip $(MTK_LOG_SUPPORT_GPS)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=0
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=1
-  endif
-  ifeq ($(strip $(MTK_MTKLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += MTKLogger
-    ifeq ($(strip $(MTK_BTLOGGER_SUPPORT)),yes)
-      PRODUCT_PACKAGES += BtTool
-    endif
-  endif
-  ifeq ($(strip $(MTK_NETWORK_LOG_SUPPORT)),yes)
-    PRODUCT_PACKAGES += netdiag
-  endif
-  PRODUCT_PACKAGES += tcpdump
-  ifeq ($(strip $(MTK_LOG_SUPPORT_MOBILE_LOG)),yes)
-    PRODUCT_PACKAGES += mobile_log_d
-  endif
-# Add for ModemMonitor(MDM) framework
-  ifeq ($(strip $(MTK_MODEM_MONITOR_SUPPORT)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_modem_monitor_support=1
-    PRODUCT_PACKAGES += \
-      md_monitor \
-      md_monitor_ctrl \
-      MDMLSample \
-      MDMConfig
-  endif
-  ifeq ($(strip $(MTK_AEE_SUPPORT)),yes)
-    HAVE_AEE_FEATURE = yes
-  else
-    HAVE_AEE_FEATURE = no
-  endif
-# Case: Customer user load and MTK_LOG_CUSTOMER_SUPPORT = yes
-else ifeq ($(strip $(MTK_LOG_CUSTOMER_SUPPORT)),yes)
-  ifeq ($(strip $(MTK_LOG_SUPPORT_GPS)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=0
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=1
-  endif
-  ifeq ($(strip $(MTK_MTKLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += MTKLogger
-    ifeq ($(strip $(MTK_BTLOGGER_SUPPORT)),yes)
-      PRODUCT_PACKAGES += BtTool
-    endif
-  endif
-  ifeq ($(strip $(MTK_NETWORK_LOG_SUPPORT)),yes)
-    PRODUCT_PACKAGES += netdiag
-    PRODUCT_PACKAGES += tcpdump
-  endif
-  ifeq ($(strip $(MTK_LOG_SUPPORT_MOBILE_LOG)),yes)
-    PRODUCT_PACKAGES += mobile_log_d
-  endif
-# Add for ModemMonitor(MDM) framework
-  ifeq ($(strip $(MTK_MODEM_MONITOR_SUPPORT)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_modem_monitor_support=1
-    PRODUCT_PACKAGES += \
-      md_monitor \
-      md_monitor_ctrl \
-      MDMLSample \
-      MDMConfig
-  endif
-  ifeq ($(strip $(MTK_AEE_SUPPORT)),yes)
-    HAVE_AEE_FEATURE = yes
-  else
-    HAVE_AEE_FEATURE = no
-  endif
-# Other Case: Customer user load and MTK_LOG_CUSTOMER_SUPPORT = no
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=1
-  HAVE_AEE_FEATURE = no
-endif
-
-# AEE Config
-ifeq ($(HAVE_AEE_FEATURE),yes)
-  ifneq ($(MTK_CHIPTEST_INT),yes)
-    ifneq ($(wildcard vendor/mediatek/proprietary/external/aee_config_internal/init.aee.mtk.rc),)
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/external/aee_config_internal/aee.mk)
-    else
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/external/aee/config_external/aee.mk)
-    endif
-  else  # MTK_CHEPTEST_INT
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/external/aee/config_external/aee.mk)
-  endif  # MTK_CHEPTEST_INT
-PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/aee/binary/aee-config:$(TARGET_COPY_OUT_VENDOR)/etc/aee-config:mtk
-
-PRODUCT_PROPERTY_OVERRIDES += ro.have_aee_feature=1
-PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/aee/binary/bin/debuggerd:system/bin/debuggerd:mtk
-  ifeq ($(MTK_K64_SUPPORT), yes)
-    PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/aee/binary/bin/debuggerd64:system/bin/debuggerd64:mtk
-  endif
-# MRDUMP
-PRODUCT_PACKAGES += \
-    libmrdump \
-    mrdump_tool \
-    ksyms-query
-endif
-
-# Modem log daemon built in according to feature option flow.
-ifeq ($(strip $(MTK_INTERNAL)),yes)
-  ifeq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += \
-      libmdloggerrecycle \
-      libmemoryDumpEncoder \
-      mdlogger
-    ifneq ($(strip $(MTK_MD1_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD1_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger1
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD2_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD2_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger2
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD5_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD5_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger5
-      endif
-    endif
-    #  $(call inherit-product-if-exists, vendor/mediatek/proprietary/protect-app/external/emdlogger/usb_port.mk)
-    ifneq ($(wildcard device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop),)
-      PRODUCT_COPY_FILES += device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop:$(TARGET_COPY_OUT_VENDOR)/etc/emdlogger_usb_config.prop:mtk
-    endif
-  endif
-  ifneq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-      PRODUCT_PACKAGES += libmdloggerrecycle
-    endif
-  endif
-  ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-    PRODUCT_PACKAGES += emdlogger3
-  endif
-else ifneq ($(strip $(TARGET_BUILD_VARIANT)),user)
-  ifeq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += \
-      libmdloggerrecycle \
-      libmemoryDumpEncoder \
-      mdlogger
-    ifneq ($(strip $(MTK_MD1_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD1_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger1
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD2_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD2_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger2
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD5_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD5_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger5
-      endif
-    endif
-    #  $(call inherit-product-if-exists, vendor/mediatek/proprietary/protect-app/external/emdlogger/usb_port.mk)
-    ifneq ($(wildcard device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop),)
-      PRODUCT_COPY_FILES += device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop:$(TARGET_COPY_OUT_VENDOR)/etc/emdlogger_usb_config.prop:mtk
-    endif
-  endif
-  ifneq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-      PRODUCT_PACKAGES += libmdloggerrecycle
-    endif
-  endif
-  ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-    PRODUCT_PACKAGES += emdlogger3
-  endif
-else ifeq ($(strip $(MTK_LOG_CUSTOMER_SUPPORT)),yes)
-  ifeq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += \
-      libmdloggerrecycle \
-      libmemoryDumpEncoder \
-      mdlogger
-    ifneq ($(strip $(MTK_MD1_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD1_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger1
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD2_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD2_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger2
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD5_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD5_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger5
-      endif
-    endif
-    #  $(call inherit-product-if-exists, vendor/mediatek/proprietary/protect-app/external/emdlogger/usb_port.mk)
-    ifneq ($(wildcard device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop),)
-      PRODUCT_COPY_FILES += device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop:$(TARGET_COPY_OUT_VENDOR)/etc/emdlogger_usb_config.prop:mtk
-    endif
-  endif
-  ifneq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-      PRODUCT_PACKAGES += libmdloggerrecycle
-    endif
-  endif
-  ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-    PRODUCT_PACKAGES += emdlogger3
-  endif
-endif
-
-ifeq ($(strip $(NFC_CHIP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.nfc.vendor=STMicro
-  PRODUCT_PROPERTY_OVERRIDES += ro.nfc.chipset=st21nfc
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_nfc_addon_support=1
-  PRODUCT_BOOT_JARS += com.st.android.nfc_extensions
-  PRODUCT_COPY_FILES += \
-    frameworks/native/data/etc/android.hardware.nfc.xml:system/etc/permissions/android.hardware.nfc.xml \
-    frameworks/native/data/etc/android.hardware.nfc.hce.xml:system/etc/permissions/android.hardware.nfc.hce.xml \
-    frameworks/native/data/etc/android.hardware.nfc.hcef.xml:system/etc/permissions/android.hardware.nfc.hcef.xml \
-    frameworks/native/data/etc/com.android.nfc_extras.xml:system/etc/permissions/com.android.nfc_extras.xml \
-    vendor/mediatek/proprietary/frameworks/opt/ST-Extension/nfc/nfcee_access.xml:system/etc/nfcee_access.xml:mtk \
-    vendor/mediatek/proprietary/frameworks/opt/ST-Extension/frameworks/NfcExtensions/com.st.android.nfc_extensions.xml:$(TARGET_COPY_OUT_VENDOR)/etc/permissions/com.st.android.nfc_extensions.xml:mtk
-
-  ifeq ($(strip $(TARGET_BUILD_VARIANT)),eng)
-    PRODUCT_COPY_FILES += \
-      vendor/mediatek/proprietary/frameworks/opt/ST-Extension/nfc/libnfc-st.conf:system/vendor/etc/libnfc-st.conf
-  else
-    PRODUCT_COPY_FILES += \
-      vendor/mediatek/proprietary/frameworks/opt/ST-Extension/nfc/libnfc-st.conf-user:system/vendor/etc/libnfc-st.conf
-  endif
-
-  ifeq ($(strip $(ST_NFC_FM_SE_CONFIG)), 3)
-    ifneq ($(wildcard $(MTK_PROJECT_FOLDER)/script_DB10mtk_2UICC.txt),)
-      ST_NFC_SCRIPT_PATH = $(MTK_PROJECT_FOLDER)/script_DB10mtk_2UICC.txt
-    else
-      ST_NFC_SCRIPT_PATH = device/mediatek/$(MTK_PLATFORM_DIR)/script_DB10mtk_2UICC.txt
-    endif
-    PRODUCT_COPY_FILES += \
-      $(ST_NFC_SCRIPT_PATH):$(TARGET_COPY_OUT_VENDOR)/etc/script_DB10mtk.txt:mtk
-  endif
-  ifeq ($(strip $(ST_NFC_FM_SE_CONFIG)), 5)
-    ifneq ($(wildcard $(MTK_PROJECT_FOLDER)/script_DB10mtk_UICC_eSE.txt),)
-      ST_NFC_SCRIPT_PATH = $(MTK_PROJECT_FOLDER)/script_DB10mtk_UICC_eSE.txt
-    else
-      ST_NFC_SCRIPT_PATH = device/mediatek/$(MTK_PLATFORM_DIR)/script_DB10mtk_UICC_eSE.txt
-    endif
-    PRODUCT_COPY_FILES += \
-      $(ST_NFC_SCRIPT_PATH):$(TARGET_COPY_OUT_VENDOR)/etc/script_DB10mtk.txt:mtk
-
-    ifeq ($(strip $(MTK_NFC_OMAAC_SUPPORT)), yes)
-      PRODUCT_PACKAGES += eSETerminal_st
-    endif
-  endif
-
-  PRODUCT_PACKAGES += \
-    nfc_nci.st21nfc.default \
-    libstnfc-nci \
-    libnfc_st_jni \
-    Nfc_st \
-    Tag \
-    com.android.nfc_extras \
-    com.st.android.nfc_extensions \
-    STFlashTool \
-    nfcstackp \
-    stDTAservice \
-    libdtaNfaProvider \
-    libstDTA \
-    STNFCDta \
-    ixitdata.xml
-endif
-
-# Add for log much detect
-ifeq ($(strip $(MTK_INTERNAL)), yes)
-   PRODUCT_PROPERTY_OVERRIDES += ro.mtk_internal=1
-endif
-
-# Add WallpaperPicker
-PRODUCT_PACKAGES += WallpaperPicker
-
-ifdef CUSTOM_MODEM
-  ifeq ($(strip $(TARGET_BUILD_VARIANT)),eng)
-    MTK_MODEM_MODULE_MAKEFILES := $(foreach item,$(CUSTOM_MODEM),$(firstword $(wildcard vendor/mediatek/proprietary/modem/$(patsubst %_prod,%,$(item))/Android.mk vendor/mediatek/proprietary/modem/$(item)/Android.mk)))
-  else
-    MTK_MODEM_MODULE_MAKEFILES := $(foreach item,$(CUSTOM_MODEM),$(firstword $(wildcard vendor/mediatek/proprietary/modem/$(patsubst %_prod,%,$(item))_prod/Android.mk vendor/mediatek/proprietary/modem/$(item)/Android.mk)))
-  endif
-$(foreach f,$(wildcard $(patsubst %/Android.mk,%/makefile/product_*.mk,$(MTK_MODEM_MODULE_MAKEFILES))),\
-  $(eval $(call inherit-product-if-exists,$(f)))\
-)
-endif
-
-ifeq ($(strip $(MTK_FULLSCREEN_SWITCH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fullscreen_switch=1
-  PRODUCT_PACKAGES += FullscreenSwitchService
-  PRODUCT_PACKAGES += FullscreenMode
-  PRODUCT_PACKAGES += FullscreenSwitchProvider
-endif
