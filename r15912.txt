Index: vendor/branch/5058T_Claro_Honduras/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java
===================================================================
--- vendor/branch/5058T_Claro_Honduras/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java	(revision 0)
+++ vendor/branch/5058T_Claro_Honduras/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java	(revision 15912)
@@ -0,0 +1,2463 @@
+/*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.phone;
+
+import com.android.ims.ImsManager;
+import com.android.internal.telephony.Phone;
+import com.android.internal.telephony.PhoneConstants;
+import com.android.internal.telephony.PhoneFactory;
+import com.android.internal.telephony.TelephonyIntents;
+import com.android.internal.telephony.TelephonyProperties;
+import com.android.settingslib.RestrictedLockUtils;
+
+import com.mediatek.internal.telephony.ITelephonyEx;
+import com.mediatek.phone.PhoneFeatureConstants;
+import com.mediatek.phone.PhoneFeatureConstants.FeatureOption;
+import com.mediatek.phone.ext.ExtensionManager;
+import com.mediatek.phone.ext.IMobileNetworkSettingsExt;
+import com.mediatek.settings.Enhanced4GLteSwitchPreference;
+import com.mediatek.settings.MobileNetworkSettingsOmEx;
+import com.mediatek.settings.TelephonyUtils;
+import com.mediatek.settings.cdma.CdmaNetworkSettings;
+import com.mediatek.settings.cdma.TelephonyUtilsEx;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import android.app.ActionBar;
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.DialogInterface.OnKeyListener;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.database.ContentObserver;
+import android.net.Uri;
+import android.os.AsyncResult;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.os.PersistableBundle;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.preference.ListPreference;
+import android.preference.Preference;
+import android.preference.PreferenceActivity;
+import android.preference.PreferenceScreen;
+import android.preference.SwitchPreference;
+import android.telecom.TelecomManager;
+import android.telephony.CarrierConfigManager;
+import android.provider.Settings;
+import android.telephony.RadioAccessFamily;
+import android.telephony.PhoneStateListener;
+import android.telephony.SubscriptionInfo;
+import android.telephony.SubscriptionManager;
+import android.telephony.TelephonyManager;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.TabHost.OnTabChangeListener;
+import android.widget.TabHost.TabContentFactory;
+import android.widget.TabHost.TabSpec;
+import android.widget.TabHost;
+
+/**
+ * "Mobile network settings" screen.  This preference screen lets you
+ * enable/disable mobile data, and control data roaming and other
+ * network-specific mobile data features.  It's used on non-voice-capable
+ * tablets as well as regular phone devices.
+ *
+ * Note that this PreferenceActivity is part of the phone app, even though
+ * you reach it from the "Wireless & Networks" section of the main
+ * Settings app.  It's not part of the "Call settings" hierarchy that's
+ * available from the Phone app (see CallFeaturesSetting for that.)
+ */
+public class MobileNetworkSettings extends PreferenceActivity implements
+        DialogInterface.OnClickListener, DialogInterface.OnDismissListener,
+        Preference.OnPreferenceChangeListener {
+
+    // debug data
+    private static final String LOG_TAG = "NetworkSettings";
+    private static final boolean DBG =
+        SystemProperties.get("ro.build.type").equals("eng") ? true : false;
+    public static final int REQUEST_CODE_EXIT_ECM = 17;
+
+    // Number of active Subscriptions to show tabs
+    private static final int TAB_THRESHOLD = 2;
+
+    //String keys for preference lookup
+    public static final String BUTTON_PREFERED_NETWORK_MODE = "preferred_network_mode_key";
+    private static final String BUTTON_ROAMING_KEY = "button_roaming_key";
+    private static final String BUTTON_CDMA_LTE_DATA_SERVICE_KEY = "cdma_lte_data_service_key";
+    public static final String BUTTON_ENABLED_NETWORKS_KEY = "enabled_networks_key";
+    private static final String BUTTON_4G_LTE_KEY = "enhanced_4g_lte";
+    private static final String BUTTON_CELL_BROADCAST_SETTINGS = "cell_broadcast_settings";
+    private static final String BUTTON_APN_EXPAND_KEY = "button_apn_key";
+    private static final String BUTTON_OPERATOR_SELECTION_EXPAND_KEY = "button_carrier_sel_key";
+    private static final String BUTTON_CARRIER_SETTINGS_KEY = "carrier_settings_key";
+    private static final String BUTTON_CDMA_SYSTEM_SELECT_KEY = "cdma_system_select_key";
+
+    static final int preferredNetworkMode = Phone.PREFERRED_NT_MODE;
+
+    //Information about logical "up" Activity
+    private static final String UP_ACTIVITY_PACKAGE = "com.android.settings";
+    private static final String UP_ACTIVITY_CLASS =
+            "com.android.settings.Settings$WirelessSettingsActivity";
+
+    private SubscriptionManager mSubscriptionManager;
+    private TelephonyManager mTelephonyManager;
+
+    //UI objects
+    private ListPreference mButtonPreferredNetworkMode;
+    private ListPreference mButtonEnabledNetworks;
+    private RestrictedSwitchPreference mButtonDataRoam;
+    private SwitchPreference mButton4glte;
+    private Preference mLteDataServicePref;
+
+    private static final String iface = "rmnet0"; //TODO: this will go away
+    private List<SubscriptionInfo> mActiveSubInfos;
+
+    private UserManager mUm;
+    private Phone mPhone;
+    private MyHandler mHandler;
+    private boolean mOkClicked;
+
+    // We assume the the value returned by mTabHost.getCurrentTab() == slotId
+    private TabHost mTabHost;
+
+    //GsmUmts options and Cdma options
+    GsmUmtsOptions mGsmUmtsOptions;
+    CdmaOptions mCdmaOptions;
+
+    private Preference mClickedPreference;
+    private boolean mShow4GForLTE;
+    private boolean mIsGlobalCdma;
+    private boolean mUnavailable;
+
+    /// Add for C2K OM features
+    private CdmaNetworkSettings mCdmaNetworkSettings;
+
+    private final PhoneStateListener mPhoneStateListener = new PhoneStateListener() {
+        /*
+         * Enable/disable the 'Enhanced 4G LTE Mode' when in/out of a call
+         * and depending on TTY mode and TTY support over VoLTE.
+         * @see android.telephony.PhoneStateListener#onCallStateChanged(int,
+         * java.lang.String)
+         */
+        @Override
+        public void onCallStateChanged(int state, String incomingNumber) {
+            log("PhoneStateListener.onCallStateChanged: state=" + state);
+
+            updateScreenStatus();
+
+            /// M: should also update enable state in other places, so exact to method
+            /*
+            boolean enabled = (state == TelephonyManager.CALL_STATE_IDLE)
+                    && ImsManager.isNonTtyOrTtyOnVolteEnabled(getApplicationContext(), mPhone
+                            .getPhoneId());
+            Preference pref = getPreferenceScreen().findPreference(BUTTON_4G_LTE_KEY);
+            if (pref != null) pref.setEnabled(enabled && hasActiveSubscriptions());
+            */
+            updateEnhanced4glteEnableState();
+        }
+    };
+
+    /// M: Replaced with mReceiver
+    /*private final BroadcastReceiver mPhoneChangeReceiver = new PhoneChangeReceiver();
+
+    private class PhoneChangeReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (DBG) log("onReceive:");
+            // When the radio changes (ex: CDMA->GSM), refresh all options.
+            mGsmUmtsOptions = null;
+            mCdmaOptions = null;
+            updateBody();
+        }
+    }*/
+
+    //This is a method implemented for DialogInterface.OnClickListener.
+    //  Used to dismiss the dialogs when they come up.
+    public void onClick(DialogInterface dialog, int which) {
+        if (which == DialogInterface.BUTTON_POSITIVE) {
+            mPhone.setDataRoamingEnabled(true);
+            mOkClicked = true;
+        } else {
+            // Reset the toggle
+            mButtonDataRoam.setChecked(false);
+        }
+    }
+
+    @Override
+    public void onDismiss(DialogInterface dialog) {
+        // Assuming that onClick gets called first
+        mButtonDataRoam.setChecked(mOkClicked);
+    }
+
+    /**
+     * Invoked on each preference click in this hierarchy, overrides
+     * PreferenceActivity's implementation.  Used to make sure we track the
+     * preference click events.
+     */
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
+        /** TODO: Refactor and get rid of the if's using subclasses */
+        final int phoneSubId = mPhone.getSubId();
+        if (mCdmaNetworkSettings != null &&
+            mCdmaNetworkSettings.onPreferenceTreeClick(preferenceScreen, preference)) {
+            return true;
+        }
+        /// M: Add for Plug-in @{
+        if (mExt.onPreferenceTreeClick(preferenceScreen, preference)) {
+            return true;
+        } else
+        /// @}
+        if (preference.getKey().equals(BUTTON_4G_LTE_KEY)) {
+            return true;
+        } else if (mGsmUmtsOptions != null &&
+                mGsmUmtsOptions.preferenceTreeClick(preference) == true) {
+            return true;
+        } else if (mCdmaOptions != null &&
+                   mCdmaOptions.preferenceTreeClick(preference) == true) {
+            /** M: Change get ECM mode by function @{
+            if (Boolean.parseBoolean(
+                    SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
+            */
+            if (mPhone.isInEcm()) {
+            /** @} */
+
+                mClickedPreference = preference;
+
+                // In ECM mode launch ECM app dialog
+                startActivityForResult(
+                    new Intent(TelephonyIntents.ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS, null),
+                    REQUEST_CODE_EXIT_ECM);
+            }
+            return true;
+        } else if (preference == mButtonPreferredNetworkMode) {
+            //displays the value taken from the Settings.System
+            int settingsNetworkMode = android.provider.Settings.Global.getInt(mPhone.getContext().
+                    getContentResolver(),
+                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                    preferredNetworkMode);
+            mButtonPreferredNetworkMode.setValue(Integer.toString(settingsNetworkMode));
+            return true;
+        } else if (preference == mLteDataServicePref) {
+            String tmpl = android.provider.Settings.Global.getString(getContentResolver(),
+                        android.provider.Settings.Global.SETUP_PREPAID_DATA_SERVICE_URL);
+            if (!TextUtils.isEmpty(tmpl)) {
+                TelephonyManager tm = (TelephonyManager) getSystemService(
+                        Context.TELEPHONY_SERVICE);
+                String imsi = tm.getSubscriberId();
+                if (imsi == null) {
+                    imsi = "";
+                }
+                final String url = TextUtils.isEmpty(tmpl) ? null
+                        : TextUtils.expandTemplate(tmpl, imsi).toString();
+                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+                startActivity(intent);
+            } else {
+                if (DBG) {
+                    android.util.Log.e(LOG_TAG, "Missing SETUP_PREPAID_DATA_SERVICE_URL");
+                }
+            }
+            return true;
+        }  else if (preference == mButtonEnabledNetworks) {
+            int settingsNetworkMode = android.provider.Settings.Global.getInt(mPhone.getContext().
+                            getContentResolver(),
+                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                    preferredNetworkMode);
+            /** M: Remove this for LW project, for we need set a temple value.
+            mButtonEnabledNetworks.setValue(Integer.toString(settingsNetworkMode));
+             */
+            return true;
+        } else if (preference == mButtonDataRoam) {
+            // Do not disable the preference screen if the user clicks Data roaming.
+            return true;
+        } else {
+            // if the button is anything but the simple toggle preference,
+            // we'll need to disable all preferences to reject all click
+            // events until the sub-activity's UI comes up.
+            preferenceScreen.setEnabled(false);
+            // Let the intents be launched by the Preference manager
+            return false;
+        }
+    }
+
+    private final SubscriptionManager.OnSubscriptionsChangedListener mOnSubscriptionsChangeListener
+            = new SubscriptionManager.OnSubscriptionsChangedListener() {
+        @Override
+        public void onSubscriptionsChanged() {
+            if (DBG) {
+                log("onSubscriptionsChanged:");
+            }
+            /// M: add for hot swap @{
+            if (TelephonyUtils.isHotSwapHanppened(
+                    mActiveSubInfos, PhoneUtils.getActiveSubInfoList())) {
+                log("onSubscriptionsChanged:hot swap hanppened");
+                dissmissDialog(mButtonPreferredNetworkMode);
+                dissmissDialog(mButtonEnabledNetworks);
+                finish();
+                return;
+            }
+            /// @}
+            initializeSubscriptions();
+        }
+    };
+
+    private void initializeSubscriptions() {
+        if (isDestroyed()) { // Process preferences in activity only if its not destroyed
+            return;
+        }
+        int currentTab = 0;
+        if (DBG) {
+            log("initializeSubscriptions:+");
+        }
+        // Before updating the the active subscription list check
+        // if tab updating is needed as the list is changing.
+        List<SubscriptionInfo> sil = mSubscriptionManager.getActiveSubscriptionInfoList();
+        TabState state = isUpdateTabsNeeded(sil);
+
+        // Update to the active subscription list
+        mActiveSubInfos.clear();
+        if (sil != null) {
+            mActiveSubInfos.addAll(sil);
+            /* M: remove for 3SIM feature
+            // If there is only 1 sim then currenTab should represent slot no. of the sim.
+            if (sil.size() == 1) {
+                currentTab = sil.get(0).getSimSlotIndex();
+            }*/
+        }
+
+        switch (state) {
+            case UPDATE: {
+                if (DBG) {
+                    log("initializeSubscriptions: UPDATE");
+                }
+                currentTab = mTabHost != null ? mTabHost.getCurrentTab() : mCurrentTab;
+
+                setContentView(com.android.internal.R.layout.common_tab_settings);
+
+                mTabHost = (TabHost) findViewById(android.R.id.tabhost);
+                mTabHost.setup();
+
+                // Update the tabName. Since the mActiveSubInfos are in slot order
+                // we can iterate though the tabs and subscription info in one loop. But
+                // we need to handle the case where a slot may be empty.
+
+                /// M: change design for 3SIM feature @{
+                for (int index = 0; index  < mActiveSubInfos.size(); index++) {
+                    String tabName = String.valueOf(mActiveSubInfos.get(index).getDisplayName());
+                    if (DBG) {
+                        log("initializeSubscriptions: tab=" + index + " name=" + tabName);
+                    }
+
+                    mTabHost.addTab(buildTabSpec(String.valueOf(index), tabName));
+                }
+                /// @}
+
+                mTabHost.setOnTabChangedListener(mTabListener);
+                mTabHost.setCurrentTab(currentTab);
+                break;
+            }
+            case NO_TABS: {
+                if (DBG) log("initializeSubscriptions: NO_TABS");
+
+                if (mTabHost != null) {
+                    mTabHost.clearAllTabs();
+                    mTabHost = null;
+                }
+                setContentView(com.android.internal.R.layout.common_tab_settings);
+                break;
+            }
+            case DO_NOTHING: {
+                if (DBG) log("initializeSubscriptions: DO_NOTHING");
+                if (mTabHost != null) {
+                    currentTab = mTabHost.getCurrentTab();
+                }
+                break;
+            }
+        }
+
+        updatePhone(convertTabToSlot(currentTab));
+        updateBody();
+        if (DBG) {
+            log("initializeSubscriptions:-");
+        }
+    }
+
+    private enum TabState {
+        NO_TABS, UPDATE, DO_NOTHING
+    }
+    private TabState isUpdateTabsNeeded(List<SubscriptionInfo> newSil) {
+        TabState state = TabState.DO_NOTHING;
+        if (newSil == null) {
+            if (mActiveSubInfos.size() >= TAB_THRESHOLD) {
+                if (DBG) log("isUpdateTabsNeeded: NO_TABS, size unknown and was tabbed");
+                state = TabState.NO_TABS;
+            }
+        } else if (newSil.size() < TAB_THRESHOLD && mActiveSubInfos.size() >= TAB_THRESHOLD) {
+            if (DBG) log("isUpdateTabsNeeded: NO_TABS, size went to small");
+            state = TabState.NO_TABS;
+        } else if (newSil.size() >= TAB_THRESHOLD && mActiveSubInfos.size() < TAB_THRESHOLD) {
+            if (DBG) log("isUpdateTabsNeeded: UPDATE, size changed");
+            state = TabState.UPDATE;
+        } else if (newSil.size() >= TAB_THRESHOLD) {
+            Iterator<SubscriptionInfo> siIterator = mActiveSubInfos.iterator();
+            for(SubscriptionInfo newSi : newSil) {
+                SubscriptionInfo curSi = siIterator.next();
+                if (!newSi.getDisplayName().equals(curSi.getDisplayName())) {
+                    if (DBG) log("isUpdateTabsNeeded: UPDATE, new name=" + newSi.getDisplayName());
+                    state = TabState.UPDATE;
+                    break;
+                }
+            }
+        }
+        if (DBG) {
+            log("isUpdateTabsNeeded:- " + state
+                + " newSil.size()=" + ((newSil != null) ? newSil.size() : 0)
+                + " mActiveSubInfos.size()=" + mActiveSubInfos.size());
+        }
+        return state;
+    }
+
+    private OnTabChangeListener mTabListener = new OnTabChangeListener() {
+        @Override
+        public void onTabChanged(String tabId) {
+            if (DBG) log("onTabChanged:");
+            // The User has changed tab; update the body.
+            updatePhone(convertTabToSlot(Integer.parseInt(tabId)));
+            mCurrentTab = Integer.parseInt(tabId);
+            updateBody();
+        }
+    };
+
+    private void updatePhone(int slotId) {
+        final SubscriptionInfo sir = mSubscriptionManager
+                .getActiveSubscriptionInfoForSimSlotIndex(slotId);
+        try {
+            if (sir != null) {
+                mPhone = PhoneFactory.getPhone(
+                        SubscriptionManager.getPhoneId(sir.getSubscriptionId()));
+            }
+            if (mPhone == null) {
+                // Do the best we can
+                mPhone = PhoneGlobals.getPhone();
+            }
+        } catch (IllegalStateException e) {
+            Log.e(LOG_TAG, "Phone not initialize");
+            finish();
+        }
+        log("updatePhone:- slotId=" + slotId + " sir=" + sir);
+    }
+
+    private TabContentFactory mEmptyTabContent = new TabContentFactory() {
+        @Override
+        public View createTabContent(String tag) {
+            return new View(mTabHost.getContext());
+        }
+    };
+
+    private TabSpec buildTabSpec(String tag, String title) {
+        return mTabHost.newTabSpec(tag).setIndicator(title).setContent(
+                mEmptyTabContent);
+    }
+
+    @Override
+    protected void onCreate(Bundle icicle) {
+        if (DBG) log("onCreate:+");
+        super.onCreate(icicle);
+        /// Add for cmcc open market @{
+        mOmEx = new MobileNetworkSettingsOmEx(this);
+        /// @}
+        /// M: init plug-in
+        mExt = ExtensionManager.getMobileNetworkSettingsExt();
+
+        mHandler = new MyHandler();
+        mUm = (UserManager) getSystemService(Context.USER_SERVICE);
+        mSubscriptionManager = SubscriptionManager.from(this);
+        mTelephonyManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
+
+        if (mUm.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)) {
+            mUnavailable = true;
+            setContentView(R.layout.telephony_disallowed_preference_screen);
+            return;
+        }
+
+        addPreferencesFromResource(R.xml.network_setting);
+
+        mButton4glte = (SwitchPreference)findPreference(BUTTON_4G_LTE_KEY);
+        mButton4glte.setOnPreferenceChangeListener(this);
+
+        try {
+            Context con = createPackageContext("com.android.systemui", 0);
+            int id = con.getResources().getIdentifier("config_show4GForLTE",
+                    "bool", "com.android.systemui");
+            mShow4GForLTE = con.getResources().getBoolean(id);
+        } catch (NameNotFoundException e) {
+            loge("NameNotFoundException for show4GFotLTE");
+            mShow4GForLTE = false;
+        }
+
+        //get UI object references
+        PreferenceScreen prefSet = getPreferenceScreen();
+
+        mButtonDataRoam = (RestrictedSwitchPreference) prefSet.findPreference(BUTTON_ROAMING_KEY);
+        mButtonPreferredNetworkMode = (ListPreference) prefSet.findPreference(
+                BUTTON_PREFERED_NETWORK_MODE);
+        mButtonEnabledNetworks = (ListPreference) prefSet.findPreference(
+                BUTTON_ENABLED_NETWORKS_KEY);
+        mButtonDataRoam.setOnPreferenceChangeListener(this);
+
+        mLteDataServicePref = prefSet.findPreference(BUTTON_CDMA_LTE_DATA_SERVICE_KEY);
+
+        // Initialize mActiveSubInfo
+        int max = mSubscriptionManager.getActiveSubscriptionInfoCountMax();
+        mActiveSubInfos = new ArrayList<SubscriptionInfo>(max);
+        /// M: for screen rotate
+        if (icicle != null) {
+            mCurrentTab = icicle.getInt(CURRENT_TAB);
+        }
+
+        initializeSubscriptions();
+
+        initIntentFilter();
+        registerReceiver(mReceiver, mIntentFilter);
+        mSubscriptionManager.addOnSubscriptionsChangedListener(mOnSubscriptionsChangeListener);
+        mTelephonyManager.listen(
+                mPhoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
+
+        /// M: [CT VOLTE]
+        getContentResolver().registerContentObserver(
+                Settings.Global.getUriFor(Settings.Global.ENHANCED_4G_MODE_ENABLED),
+                true, mContentObserver);
+        getContentResolver().registerContentObserver(
+                Settings.Global.getUriFor(Settings.Global.ENHANCED_4G_MODE_ENABLED_SIM2),
+                true, mContentObserver);
+        if (DBG) log("onCreate:-");
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        // M: replace with mReceiver
+        //unregisterReceiver(mPhoneChangeReceiver);
+        unregisterReceiver(mReceiver);
+
+        if (DBG) {
+            log("onDestroy " + this);
+        }
+        if (mCdmaNetworkSettings != null) {
+            mCdmaNetworkSettings.onDestroy();
+            mCdmaNetworkSettings = null;
+        }
+        if (mSubscriptionManager != null) {
+            mSubscriptionManager
+                    .removeOnSubscriptionsChangedListener(mOnSubscriptionsChangeListener);
+        }
+        if (mTelephonyManager != null) {
+            mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE);
+        }
+        /// M: For plugin to unregister listener
+        if(mExt != null) {
+            mExt.unRegister();
+        }
+        /// Add for cmcc open market @{
+        if(mOmEx != null){
+            mOmEx.unRegister();
+        }
+        /// @}
+
+        /// M: [CT VOLTE] @{
+        getContentResolver().unregisterContentObserver(mContentObserver);
+        if(mDialog != null && mDialog.isShowing()) {
+            mDialog.dismiss();
+        }
+        /// @}
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        if (DBG) log("onResume:+");
+
+        if (mUnavailable) {
+            if (DBG) log("onResume:- ignore mUnavailable == false");
+            return;
+        }
+
+        /// M: for C2K OM features @{
+        if (mCdmaNetworkSettings != null) {
+            mCdmaNetworkSettings.onResume();
+        }
+        /// @}
+
+        // upon resumption from the sub-activity, make sure we re-enable the
+        // preferences.
+        // getPreferenceScreen().setEnabled(true);
+
+        // Set UI state in onResume because a user could go home, launch some
+        // app to change this setting's backend, and re-launch this settings app
+        // and the UI state would be inconsistent with actual state
+        mButtonDataRoam.setChecked(mPhone.getDataRoamingEnabled());
+
+        if (getPreferenceScreen().findPreference(BUTTON_PREFERED_NETWORK_MODE) != null
+                || getPreferenceScreen().findPreference(BUTTON_ENABLED_NETWORKS_KEY) != null)  {
+            updatePreferredNetworkUIFromDb();
+        }
+
+        /** M: Add For [MTK_Enhanced4GLTE]
+        if (ImsManager.isVolteEnabledByPlatform(this)
+                && ImsManager.isVolteProvisionedOnDevice(this)) {
+            TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
+            tm.listen(mPhoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
+        }
+
+        // NOTE: Buttons will be enabled/disabled in mPhoneStateListener
+        boolean enh4glteMode = ImsManager.isEnhanced4gLteModeSettingEnabledByUser(this)
+                && ImsManager.isNonTtyOrTtyOnVolteEnabled(this);
+        mButton4glte.setChecked(enh4glteMode);
+
+        mSubscriptionManager.addOnSubscriptionsChangedListener(mOnSubscriptionsChangeListener);
+        @} */
+        /// M: For screen update
+        updateScreenStatus();
+        /// M: For plugin to update UI
+        if (mExt != null) {
+            mExt.onResume();
+        }
+
+        if (DBG) log("onResume:-");
+
+    }
+
+    @Override
+    protected void onPause() {
+        /// M: For plugin to update UI
+        if (mExt != null) {
+            mExt.onPause();
+        }
+        super.onPause();
+    }
+
+    private boolean hasActiveSubscriptions() {
+        return mActiveSubInfos.size() > 0;
+    }
+
+    private void updateBody() {
+        final Context context = getApplicationContext();
+        PreferenceScreen prefSet = getPreferenceScreen();
+        boolean isLteOnCdma = mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE;
+        final int phoneSubId = mPhone.getSubId();
+
+        log("updateBody: isLteOnCdma=" + isLteOnCdma + " phoneSubId=" + phoneSubId);
+
+        if (prefSet != null) {
+            prefSet.removeAll();
+            prefSet.addPreference(mButtonDataRoam);
+            prefSet.addPreference(mButtonPreferredNetworkMode);
+            prefSet.addPreference(mButtonEnabledNetworks);
+            prefSet.addPreference(mButton4glte);
+        }
+
+        int settingsNetworkMode = android.provider.Settings.Global.getInt(
+                mPhone.getContext().getContentResolver(),
+                android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                preferredNetworkMode);
+
+        PersistableBundle carrierConfig =
+                PhoneGlobals.getInstance().getCarrierConfigForSubId(mPhone.getSubId());
+        mIsGlobalCdma = isLteOnCdma
+                && carrierConfig.getBoolean(CarrierConfigManager.KEY_SHOW_CDMA_CHOICES_BOOL);
+        if (carrierConfig.getBoolean(CarrierConfigManager.KEY_HIDE_CARRIER_NETWORK_SETTINGS_BOOL)) {
+            prefSet.removePreference(mButtonPreferredNetworkMode);
+            prefSet.removePreference(mButtonEnabledNetworks);
+            prefSet.removePreference(mLteDataServicePref);
+        } else if (carrierConfig.getBoolean(CarrierConfigManager
+                    .KEY_HIDE_PREFERRED_NETWORK_TYPE_BOOL)
+                && !mPhone.getServiceState().getRoaming()) {
+            prefSet.removePreference(mButtonPreferredNetworkMode);
+            prefSet.removePreference(mButtonEnabledNetworks);
+
+            final int phoneType = mPhone.getPhoneType();
+            if (phoneType == PhoneConstants.PHONE_TYPE_CDMA) {
+                mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
+                // In World mode force a refresh of GSM Options.
+                if (isWorldMode()) {
+                    mGsmUmtsOptions = null;
+                }
+            } else if (phoneType == PhoneConstants.PHONE_TYPE_GSM) {
+                mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, phoneSubId);
+            } else {
+                throw new IllegalStateException("Unexpected phone type: " + phoneType);
+            }
+            // Since pref is being hidden from user, set network mode to default
+            // in case it is currently something else. That is possible if user
+            // changed the setting while roaming and is now back to home network.
+            settingsNetworkMode = preferredNetworkMode;
+        } else if (carrierConfig.getBoolean(CarrierConfigManager.KEY_WORLD_PHONE_BOOL) == true) {
+            prefSet.removePreference(mButtonEnabledNetworks);
+            // set the listener for the mButtonPreferredNetworkMode list preference so we can issue
+            // change Preferred Network Mode.
+            mButtonPreferredNetworkMode.setOnPreferenceChangeListener(this);
+
+            mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
+            mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, phoneSubId);
+        } else {
+            if (DBG) {
+                log("updatebody is not world phone");
+            }
+            prefSet.removePreference(mButtonPreferredNetworkMode);
+            final int phoneType = mPhone.getPhoneType();
+            ITelephonyEx iTelEx = ITelephonyEx.Stub.asInterface(
+                    ServiceManager.getService(Context.TELEPHONY_SERVICE_EX));
+            int mainPhoneId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
+            if (iTelEx != null) {
+                try {
+                    mainPhoneId = iTelEx.getMainCapabilityPhoneId();
+                } catch (RemoteException e) {
+                    loge("UpdateEnabledNetworksValueAndSummary get iTelEx error" +
+                            e.getMessage());
+                }
+            }
+            //M:03387838 if both SIM are CT4G then show non primary SIM as GSM
+            if (TelephonyUtilsEx.isCDMAPhone(mPhone)
+                    /// M: [CT VOLTE]
+                    || (TelephonyUtilsEx.isCtVolteEnabled() && TelephonyUtilsEx.isCt4gSim(mPhone
+                    .getSubId()) && (!TelephonyUtilsEx.isBothslotCtSim(mSubscriptionManager) ||
+                    (mainPhoneId == mPhone.getPhoneId())))) {
+                if (DBG) {
+                    log("phoneType == PhoneConstants.PHONE_TYPE_CDMA or is CT VOLTE...");
+                }
+                int lteForced = android.provider.Settings.Global.getInt(
+                        mPhone.getContext().getContentResolver(),
+                        android.provider.Settings.Global.LTE_SERVICE_FORCED + mPhone.getSubId(),
+                        0);
+
+                if (isLteOnCdma) {
+                    if (lteForced == 0) {
+                        mButtonEnabledNetworks.setEntries(
+                                R.array.enabled_networks_cdma_choices);
+                        mButtonEnabledNetworks.setEntryValues(
+                                R.array.enabled_networks_cdma_values);
+                    } else {
+                        switch (settingsNetworkMode) {
+                            case Phone.NT_MODE_CDMA:
+                            case Phone.NT_MODE_CDMA_NO_EVDO:
+                            case Phone.NT_MODE_EVDO_NO_CDMA:
+                                mButtonEnabledNetworks.setEntries(
+                                        R.array.enabled_networks_cdma_no_lte_choices);
+                                mButtonEnabledNetworks.setEntryValues(
+                                        R.array.enabled_networks_cdma_no_lte_values);
+                                break;
+                            case Phone.NT_MODE_GLOBAL:
+                            case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
+                            case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
+                            case Phone.NT_MODE_LTE_ONLY:
+                                mButtonEnabledNetworks.setEntries(
+                                        R.array.enabled_networks_cdma_only_lte_choices);
+                                mButtonEnabledNetworks.setEntryValues(
+                                        R.array.enabled_networks_cdma_only_lte_values);
+                                break;
+                            default:
+                                mButtonEnabledNetworks.setEntries(
+                                        R.array.enabled_networks_cdma_choices);
+                                mButtonEnabledNetworks.setEntryValues(
+                                        R.array.enabled_networks_cdma_values);
+                                break;
+                        }
+                    }
+                }
+                mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
+
+                // In World mode force a refresh of GSM Options.
+                if (isWorldMode()) {
+                    mGsmUmtsOptions = null;
+                }
+                /// M: support for cdma @{
+                if (FeatureOption.isMtk3gDongleSupport()) {
+                    PreferenceScreen activateDevice = (PreferenceScreen)
+                            prefSet.findPreference(BUTTON_CDMA_ACTIVATE_DEVICE_KEY);
+                    if (activateDevice != null) {
+                        prefSet.removePreference(activateDevice);
+                    }
+                }
+                /// @}
+            } else if (phoneType == PhoneConstants.PHONE_TYPE_GSM) {
+                if (isSupportTdscdma()) {
+                    mButtonEnabledNetworks.setEntries(
+                            R.array.enabled_networks_tdscdma_choices);
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_tdscdma_values);
+                } else if (!carrierConfig.getBoolean(CarrierConfigManager.KEY_PREFER_2G_BOOL)
+                        && !getResources().getBoolean(R.bool.config_enabled_lte)) {
+                    mButtonEnabledNetworks.setEntries(
+                            R.array.enabled_networks_except_gsm_lte_choices);
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_except_gsm_lte_values);
+                } else if (!carrierConfig.getBoolean(CarrierConfigManager.KEY_PREFER_2G_BOOL)) {
+                    int select = (mShow4GForLTE == true) ?
+                            R.array.enabled_networks_except_gsm_4g_choices
+                            : R.array.enabled_networks_except_gsm_choices;
+                    mButtonEnabledNetworks.setEntries(select);
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_except_gsm_values);
+                } else if (!FeatureOption.isMtkLteSupport()) {
+                    mButtonEnabledNetworks.setEntries(
+                            R.array.enabled_networks_except_lte_choices);
+                    if (isC2kLteSupport() && FeatureOption.isNeedDisable4G()) {
+                        if (DBG) {
+                            log("for bad phone change entries~");
+                        }
+                        mButtonEnabledNetworks.setEntryValues(
+                                R.array.enabled_networks_except_lte_values_c2k);
+                    } else {
+                        mButtonEnabledNetworks.setEntryValues(
+                                R.array.enabled_networks_except_lte_values);
+                    }
+                } else if (mIsGlobalCdma) {
+                    mButtonEnabledNetworks.setEntries(
+                            R.array.enabled_networks_cdma_choices);
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_cdma_values);
+                } else {
+                    int select = (mShow4GForLTE == true) ? R.array.enabled_networks_4g_choices
+                            : R.array.enabled_networks_choices;
+                    mButtonEnabledNetworks.setEntries(select);
+                    mExt.changeEntries(mButtonEnabledNetworks);
+                    /// Add for C2K @{
+                    if (isC2kLteSupport()) {
+                        if (DBG) {
+                            log("Change to C2K values");
+                        }
+                        mButtonEnabledNetworks.setEntryValues(
+                                R.array.enabled_networks_values_c2k);
+                    } else {
+                        mButtonEnabledNetworks.setEntryValues(
+                                R.array.enabled_networks_values);
+                    }
+                    /// @}
+                }
+                mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, phoneSubId);
+            } else {
+                throw new IllegalStateException("Unexpected phone type: " + phoneType);
+            }
+            if (isWorldMode()) {
+                mButtonEnabledNetworks.setEntries(
+                        R.array.preferred_network_mode_choices_world_mode);
+                mButtonEnabledNetworks.setEntryValues(
+                        R.array.preferred_network_mode_values_world_mode);
+            }
+            mButtonEnabledNetworks.setOnPreferenceChangeListener(this);
+            if (DBG) {
+                log("settingsNetworkMode: " + settingsNetworkMode);
+            }
+        }
+
+        final boolean missingDataServiceUrl = TextUtils.isEmpty(
+                android.provider.Settings.Global.getString(getContentResolver(),
+                        android.provider.Settings.Global.SETUP_PREPAID_DATA_SERVICE_URL));
+        if (!isLteOnCdma || missingDataServiceUrl) {
+            prefSet.removePreference(mLteDataServicePref);
+        } else {
+            android.util.Log.d(LOG_TAG, "keep ltePref");
+        }
+
+        /// M: add mtk feature.
+        onCreateMTK(prefSet);
+
+        // Enable enhanced 4G LTE mode settings depending on whether exists on platform
+        /** M: Add For [MTK_Enhanced4GLTE] @{
+        if (!(ImsManager.isVolteEnabledByPlatform(this)
+                && ImsManager.isVolteProvisionedOnDevice(this))) {
+            Preference pref = prefSet.findPreference(BUTTON_4G_LTE_KEY);
+            if (pref != null) {
+                prefSet.removePreference(pref);
+            }
+        }
+        @} */
+
+        ActionBar actionBar = getActionBar();
+        if (actionBar != null) {
+            // android.R.id.home will be triggered in onOptionsItemSelected()
+            actionBar.setDisplayHomeAsUpEnabled(true);
+        }
+
+        // Enable link to CMAS app settings depending on the value in config.xml.
+        final boolean isCellBroadcastAppLinkEnabled = this.getResources().getBoolean(
+                com.android.internal.R.bool.config_cellBroadcastAppLinks);
+        if (!mUm.isAdminUser() || !isCellBroadcastAppLinkEnabled
+                || mUm.hasUserRestriction(UserManager.DISALLOW_CONFIG_CELL_BROADCASTS)) {
+            PreferenceScreen root = getPreferenceScreen();
+            Preference ps = findPreference(BUTTON_CELL_BROADCAST_SETTINGS);
+            if (ps != null) {
+                root.removePreference(ps);
+            }
+        }
+
+        // Get the networkMode from Settings.System and displays it
+        mButtonDataRoam.setChecked(mPhone.getDataRoamingEnabled());
+
+        mButtonEnabledNetworks.setValue(Integer.toString(settingsNetworkMode));
+        mButtonPreferredNetworkMode.setValue(Integer.toString(settingsNetworkMode));
+        UpdatePreferredNetworkModeSummary(settingsNetworkMode);
+        UpdateEnabledNetworksValueAndSummary(settingsNetworkMode);
+        // Display preferred network type based on what modem returns b/18676277
+        /// M: no need set mode here
+        //mPhone.setPreferredNetworkType(settingsNetworkMode, mHandler
+        //        .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
+
+        /**
+         * Enable/disable depending upon if there are any active subscriptions.
+         *
+         * I've decided to put this enable/disable code at the bottom as the
+         * code above works even when there are no active subscriptions, thus
+         * putting it afterwards is a smaller change. This can be refined later,
+         * but you do need to remember that this all needs to work when subscriptions
+         * change dynamically such as when hot swapping sims.
+
+        boolean hasActiveSubscriptions = hasActiveSubscriptions();
+        TelephonyManager tm = (TelephonyManager) getSystemService(
+                Context.TELEPHONY_SERVICE);
+        boolean canChange4glte = (tm.getCallState() == TelephonyManager.CALL_STATE_IDLE) &&
+                ImsManager.isNonTtyOrTtyOnVolteEnabled(getApplicationContext()) &&
+                carrierConfig.getBoolean(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL);
+        boolean useVariant4glteTitle = carrierConfig.getBoolean(
+                CarrierConfigManager.KEY_ENHANCED_4G_LTE_TITLE_VARIANT_BOOL);
+        int enhanced4glteModeTitleId = useVariant4glteTitle ?
+                R.string.enhanced_4g_lte_mode_title_variant :
+                R.string.enhanced_4g_lte_mode_title;
+        */
+        mButtonDataRoam.setDisabledByAdmin(false);
+        // mButtonDataRoam.setEnabled(hasActiveSubscriptions);
+        if (mButtonDataRoam.isEnabled()) {
+            if (RestrictedLockUtils.hasBaseUserRestriction(context,
+                    UserManager.DISALLOW_DATA_ROAMING, UserHandle.myUserId())) {
+                mButtonDataRoam.setEnabled(false);
+            } else {
+                mButtonDataRoam.checkRestrictionAndSetDisabled(UserManager.DISALLOW_DATA_ROAMING);
+            }
+        }
+        /*
+        mButtonPreferredNetworkMode.setEnabled(hasActiveSubscriptions);
+        mButtonEnabledNetworks.setEnabled(hasActiveSubscriptions);
+        mButton4glte.setTitle(enhanced4glteModeTitleId);
+        mButton4glte.setEnabled(hasActiveSubscriptions && canChange4glte);
+        mLteDataServicePref.setEnabled(hasActiveSubscriptions);
+        Preference ps;
+        PreferenceScreen root = getPreferenceScreen();
+        ps = findPreference(BUTTON_CELL_BROADCAST_SETTINGS);
+        if (ps != null) {
+            ps.setEnabled(hasActiveSubscriptions);
+        }
+        ps = findPreference(BUTTON_APN_EXPAND_KEY);
+        if (ps != null) {
+            ps.setEnabled(hasActiveSubscriptions);
+        }
+        ps = findPreference(BUTTON_OPERATOR_SELECTION_EXPAND_KEY);
+        if (ps != null) {
+            ps.setEnabled(hasActiveSubscriptions);
+        }
+        ps = findPreference(BUTTON_CARRIER_SETTINGS_KEY);
+        if (ps != null) {
+            ps.setEnabled(hasActiveSubscriptions);
+        }
+        ps = findPreference(BUTTON_CDMA_SYSTEM_SELECT_KEY);
+        if (ps != null) {
+            ps.setEnabled(hasActiveSubscriptions);
+        }*/
+
+        /// Add for cmcc open market @{
+        mOmEx.updateNetworkTypeSummary(mButtonEnabledNetworks);
+        /// @}
+
+        /// M: Add for L+W DSDS.
+        updateNetworkModeForLwDsds();
+        /// M: Add for Plug-in @{
+        if (mButtonEnabledNetworks != null) {
+            if (DBG) {
+                log("Enter plug-in update updateNetworkTypeSummary - Enabled again!");
+            }
+            mExt.updateNetworkTypeSummary(mButtonEnabledNetworks);
+        }
+        /// @}
+    }
+
+    /* M: move unregister Subscriptions Change Listener to onDestory
+    @Override
+    protected void onPause() {
+        super.onPause();
+        if (DBG) log("onPause:+");
+
+        if (ImsManager.isVolteEnabledByPlatform(this)
+                && ImsManager.isVolteProvisionedOnDevice(this)) {
+            TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
+            tm.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE);
+        }
+
+        mSubscriptionManager
+            .removeOnSubscriptionsChangedListener(mOnSubscriptionsChangeListener);
+        if (DBG) log("onPause:-");
+    }*/
+
+    /**
+     * Implemented to support onPreferenceChangeListener to look for preference
+     * changes specifically on CLIR.
+     *
+     * @param preference is the preference to be changed, should be mButtonCLIR.
+     * @param objValue should be the value of the selection, NOT its localized
+     * display value.
+     */
+    public boolean onPreferenceChange(Preference preference, Object objValue) {
+        final int phoneSubId = mPhone.getSubId();
+        if (onPreferenceChangeMTK(preference, objValue)) {
+            return true;
+        }
+        if (preference == mButtonPreferredNetworkMode) {
+            //NOTE onPreferenceChange seems to be called even if there is no change
+            //Check if the button value is changed from the System.Setting
+            mButtonPreferredNetworkMode.setValue((String) objValue);
+            int buttonNetworkMode;
+            buttonNetworkMode = Integer.parseInt((String) objValue);
+            int settingsNetworkMode = android.provider.Settings.Global.getInt(
+                    mPhone.getContext().getContentResolver(),
+                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                    preferredNetworkMode);
+
+            log("onPreferenceChange buttonNetworkMode:"
+                    + buttonNetworkMode + " settingsNetworkMode:" + settingsNetworkMode);
+
+            if (buttonNetworkMode != settingsNetworkMode) {
+                int modemNetworkMode;
+                // if new mode is invalid ignore it
+                switch (buttonNetworkMode) {
+                    case Phone.NT_MODE_WCDMA_PREF:
+                    case Phone.NT_MODE_GSM_ONLY:
+                    case Phone.NT_MODE_WCDMA_ONLY:
+                    case Phone.NT_MODE_GSM_UMTS:
+                    case Phone.NT_MODE_CDMA:
+                    case Phone.NT_MODE_CDMA_NO_EVDO:
+                    case Phone.NT_MODE_EVDO_NO_CDMA:
+                    case Phone.NT_MODE_GLOBAL:
+                    case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
+                    case Phone.NT_MODE_LTE_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_ONLY:
+                    case Phone.NT_MODE_LTE_WCDMA:
+                    case Phone.NT_MODE_TDSCDMA_ONLY:
+                    case Phone.NT_MODE_TDSCDMA_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA:
+                    case Phone.NT_MODE_TDSCDMA_GSM:
+                    case Phone.NT_MODE_LTE_TDSCDMA_GSM:
+                    case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
+                    case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+                        // This is one of the modes we recognize
+                        modemNetworkMode = buttonNetworkMode;
+                        break;
+                    default:
+                        loge("Invalid Network Mode (" + buttonNetworkMode + ") chosen. Ignore.");
+                        return true;
+                }
+
+                mButtonPreferredNetworkMode.setValue(Integer.toString(modemNetworkMode));
+                mButtonPreferredNetworkMode.setSummary(mButtonPreferredNetworkMode.getEntry());
+
+                /// M: 03100374, need to revert the network mode if set fail
+                mPreNetworkMode = settingsNetworkMode;
+
+                android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                        android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                        buttonNetworkMode );
+
+                if (DBG) {
+                    log("setPreferredNetworkType, networkType: " + modemNetworkMode);
+                }
+                //Set the modem network mode
+                mPhone.setPreferredNetworkType(modemNetworkMode, mHandler
+                        .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
+            }
+        } else if (preference == mButtonEnabledNetworks) {
+            mButtonEnabledNetworks.setValue((String) objValue);
+            int buttonNetworkMode;
+            buttonNetworkMode = Integer.parseInt((String) objValue);
+            if (DBG) {
+                log("buttonNetworkMode: " + buttonNetworkMode);
+            }
+            int settingsNetworkMode = android.provider.Settings.Global.getInt(
+                    mPhone.getContext().getContentResolver(),
+                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                    preferredNetworkMode);
+
+            if (DBG) {
+                log("buttonNetworkMode: " + buttonNetworkMode +
+                    "settingsNetworkMode: " + settingsNetworkMode);
+            }
+            if (buttonNetworkMode != settingsNetworkMode) {
+                int modemNetworkMode;
+                // if new mode is invalid ignore it
+                switch (buttonNetworkMode) {
+                    case Phone.NT_MODE_WCDMA_PREF:
+                    case Phone.NT_MODE_GSM_ONLY:
+                    case Phone.NT_MODE_LTE_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
+                    case Phone.NT_MODE_CDMA:
+                    case Phone.NT_MODE_CDMA_NO_EVDO:
+                    case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
+                    case Phone.NT_MODE_TDSCDMA_ONLY:
+                    case Phone.NT_MODE_TDSCDMA_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA:
+                    case Phone.NT_MODE_TDSCDMA_GSM:
+                    case Phone.NT_MODE_LTE_TDSCDMA_GSM:
+                    case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
+                    case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+                    case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+                    case Phone.NT_MODE_WCDMA_ONLY:
+                    case Phone.NT_MODE_LTE_ONLY:
+                    /// M: Add for C2K
+                    case Phone.NT_MODE_GLOBAL:
+                        // This is one of the modes we recognize
+                        modemNetworkMode = buttonNetworkMode;
+                        break;
+                    default:
+                        loge("Invalid Network Mode (" + buttonNetworkMode + ") chosen. Ignore.");
+                        return true;
+                }
+
+                UpdateEnabledNetworksValueAndSummary(buttonNetworkMode);
+
+                /// M: 03100374, need to revert the network mode if set fail
+                mPreNetworkMode = settingsNetworkMode;
+
+                android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                        android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                        buttonNetworkMode );
+
+                if (DBG) log("setPreferredNetworkType, networkType: " + modemNetworkMode);
+
+                //Set the modem network mode
+                mPhone.setPreferredNetworkType(modemNetworkMode, mHandler
+                        .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
+            }
+        } else if (preference == mButton4glte) {
+            SwitchPreference enhanced4gModePref = (SwitchPreference) preference;
+            boolean enhanced4gMode = !enhanced4gModePref.isChecked();
+            enhanced4gModePref.setChecked(enhanced4gMode);
+            ImsManager.setEnhanced4gLteModeSetting(this, enhanced4gModePref.isChecked());
+        } else if (preference == mButtonDataRoam) {
+            if (DBG) {
+                log("onPreferenceTreeClick: preference == mButtonDataRoam.");
+            }
+            //normally called on the toggle click
+            if (!mButtonDataRoam.isChecked()) {
+                // First confirm with a warning dialog about charges
+                mOkClicked = false;
+                /// M:Add for plug-in @{
+                /* Google Code, delete by MTK
+                new AlertDialog.Builder(this).setMessage(
+                        getResources().getString(R.string.roaming_warning))
+                        .setTitle(android.R.string.dialog_alert_title)
+                */
+                if (isDestroyed()) { // Access preferences of activity only if it is not destroyed
+                    return true;
+                }
+                AlertDialog.Builder builder = new AlertDialog.Builder(this);
+                builder.setMessage(getResources().getString(R.string.roaming_warning))
+                        .setTitle(android.R.string.dialog_alert_title);
+                mExt.customizeAlertDialog(mButtonDataRoam, builder);
+                builder.setIconAttribute(android.R.attr.alertDialogIcon)
+                        .setPositiveButton(android.R.string.yes, this)
+                        .setNegativeButton(android.R.string.no, this)
+                        .show()
+                        .setOnDismissListener(this);
+                /// @}
+            } else {
+                mPhone.setDataRoamingEnabled(false);
+            }
+            return true;
+        }
+
+        /// Add for Plug-in @{
+        mExt.onPreferenceChange(preference, objValue);
+        /// @}
+        /// M: no need updateBody here
+        //updateBody();
+        // always let the preference setting proceed.
+        return true;
+    }
+
+    private class MyHandler extends Handler {
+
+        static final int MESSAGE_SET_PREFERRED_NETWORK_TYPE = 0;
+
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+                case MESSAGE_SET_PREFERRED_NETWORK_TYPE:
+                    handleSetPreferredNetworkTypeResponse(msg);
+                    break;
+            }
+        }
+
+        private void handleSetPreferredNetworkTypeResponse(Message msg) {
+            /// M: 03100374 restore network mode in case set fail
+            restorePreferredNetworkTypeIfNeeded(msg);
+
+            if (isDestroyed()) { // Access preferences of activity only if it is not destroyed
+                return;
+            }
+
+            AsyncResult ar = (AsyncResult) msg.obj;
+            final int phoneSubId = mPhone.getSubId();
+
+            if (ar.exception == null) {
+                int networkMode;
+                if (getPreferenceScreen().findPreference(BUTTON_PREFERED_NETWORK_MODE) != null)  {
+                    networkMode =  Integer.parseInt(mButtonPreferredNetworkMode.getValue());
+                    if (DBG) {
+                        log("handleSetPreferredNetwrokTypeResponse1: networkMode:" + networkMode);
+                    }
+                    android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                            android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                            networkMode );
+                }
+                if (getPreferenceScreen().findPreference(BUTTON_ENABLED_NETWORKS_KEY) != null)  {
+                    networkMode = Integer.parseInt(mButtonEnabledNetworks.getValue());
+                    if (DBG) {
+                        log("handleSetPreferredNetwrokTypeResponse2: networkMode:" + networkMode);
+                    }
+                    android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                            android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                            networkMode );
+                }
+            } else {
+                if (DBG) {
+                    log("handleSetPreferredNetworkTypeResponse: exception in setting network mode.");
+                }
+                updatePreferredNetworkUIFromDb();
+            }
+        }
+    }
+
+    private void updatePreferredNetworkUIFromDb() {
+        final int phoneSubId = mPhone.getSubId();
+
+        int settingsNetworkMode = android.provider.Settings.Global.getInt(
+                mPhone.getContext().getContentResolver(),
+                android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                preferredNetworkMode);
+
+        if (DBG) {
+            log("updatePreferredNetworkUIFromDb: settingsNetworkMode = " +
+                    settingsNetworkMode);
+        }
+
+        UpdatePreferredNetworkModeSummary(settingsNetworkMode);
+        UpdateEnabledNetworksValueAndSummary(settingsNetworkMode);
+        // changes the mButtonPreferredNetworkMode accordingly to settingsNetworkMode
+        mButtonPreferredNetworkMode.setValue(Integer.toString(settingsNetworkMode));
+    }
+
+    private void UpdatePreferredNetworkModeSummary(int NetworkMode) {
+        // M: if is not 3/4G phone, init the preference with gsm only type @{
+        if (!isCapabilityPhone(mPhone)) {
+            NetworkMode = Phone.NT_MODE_GSM_ONLY;
+            if (DBG) {
+                log("init PreferredNetworkMode with gsm only");
+            }
+        }
+        // @}
+        switch(NetworkMode) {
+            case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
+            case Phone.NT_MODE_TDSCDMA_GSM:
+            case Phone.NT_MODE_WCDMA_PREF:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_wcdma_perf_summary);
+                break;
+            case Phone.NT_MODE_GSM_ONLY:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_gsm_only_summary);
+                break;
+            case Phone.NT_MODE_TDSCDMA_WCDMA:
+            case Phone.NT_MODE_WCDMA_ONLY:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_wcdma_only_summary);
+                break;
+            case Phone.NT_MODE_GSM_UMTS:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_gsm_wcdma_summary);
+                break;
+            case Phone.NT_MODE_CDMA:
+                switch (mPhone.getLteOnCdmaMode()) {
+                    case PhoneConstants.LTE_ON_CDMA_TRUE:
+                        mButtonPreferredNetworkMode.setSummary(
+                            R.string.preferred_network_mode_cdma_summary);
+                    break;
+                    case PhoneConstants.LTE_ON_CDMA_FALSE:
+                    default:
+                        mButtonPreferredNetworkMode.setSummary(
+                            R.string.preferred_network_mode_cdma_evdo_summary);
+                        break;
+                }
+                break;
+            case Phone.NT_MODE_CDMA_NO_EVDO:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_cdma_only_summary);
+                break;
+            case Phone.NT_MODE_EVDO_NO_CDMA:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_evdo_only_summary);
+                break;
+            case Phone.NT_MODE_LTE_TDSCDMA:
+            case Phone.NT_MODE_LTE_ONLY:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_lte_summary);
+                break;
+            case Phone.NT_MODE_LTE_TDSCDMA_GSM:
+            case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
+            case Phone.NT_MODE_LTE_GSM_WCDMA:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_lte_gsm_wcdma_summary);
+                break;
+            case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_lte_cdma_evdo_summary);
+                break;
+            case Phone.NT_MODE_TDSCDMA_ONLY:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_tdscdma_summary);
+                break;
+            case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+            case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
+                if (mPhone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA ||
+                        mIsGlobalCdma ||
+                        isWorldMode()) {
+                    mButtonPreferredNetworkMode.setSummary(
+                            R.string.preferred_network_mode_global_summary);
+                } else {
+                    mButtonPreferredNetworkMode.setSummary(
+                            R.string.preferred_network_mode_lte_summary);
+                }
+                break;
+            case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+            case Phone.NT_MODE_GLOBAL:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_cdma_evdo_gsm_wcdma_summary);
+                break;
+            case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
+            case Phone.NT_MODE_LTE_WCDMA:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_lte_wcdma_summary);
+                break;
+            default:
+                mButtonPreferredNetworkMode.setSummary(
+                        R.string.preferred_network_mode_global_summary);
+        }
+        /// Add for Plug-in @{
+        mExt.updateNetworkTypeSummary(mButtonPreferredNetworkMode);
+        mExt.customizePreferredNetworkMode(mButtonPreferredNetworkMode, mPhone.getSubId());
+        /// @}
+        /// Add for cmcc open market @{
+        mOmEx.updateNetworkTypeSummary(mButtonPreferredNetworkMode);
+        /// @}
+    }
+
+    private void UpdateEnabledNetworksValueAndSummary(int NetworkMode) {
+        Log.d(LOG_TAG, "NetworkMode: " + NetworkMode);
+        // M: if is not 3/4G phone, init the preference with gsm only type @{
+        if (!isCapabilityPhone(mPhone)) {
+            NetworkMode = Phone.NT_MODE_GSM_ONLY;
+            if (DBG) {
+                log("init EnabledNetworks with gsm only");
+            }
+        }
+        // @}
+        switch (NetworkMode) {
+            case Phone.NT_MODE_TDSCDMA_WCDMA:
+            case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
+            case Phone.NT_MODE_TDSCDMA_GSM:
+                mButtonEnabledNetworks.setValue(
+                        Integer.toString(Phone.NT_MODE_TDSCDMA_GSM_WCDMA));
+                mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                break;
+            case Phone.NT_MODE_WCDMA_ONLY:
+            case Phone.NT_MODE_GSM_UMTS:
+            case Phone.NT_MODE_WCDMA_PREF:
+                if (!mIsGlobalCdma) {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_WCDMA_PREF));
+                    mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                } else {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
+                    mButtonEnabledNetworks.setSummary(R.string.network_global);
+                }
+                break;
+            case Phone.NT_MODE_GSM_ONLY:
+                if (!mIsGlobalCdma) {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_GSM_ONLY));
+                    mButtonEnabledNetworks.setSummary(R.string.network_2G);
+                } else {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
+                    mButtonEnabledNetworks.setSummary(R.string.network_global);
+                }
+                break;
+            case Phone.NT_MODE_LTE_GSM_WCDMA:
+                if (isWorldMode()) {
+                    mButtonEnabledNetworks.setSummary(
+                            R.string.preferred_network_mode_lte_gsm_umts_summary);
+                    controlCdmaOptions(false);
+                    controlGsmOptions(true);
+                    break;
+                }
+            case Phone.NT_MODE_LTE_ONLY:
+            case Phone.NT_MODE_LTE_WCDMA:
+                if (!mIsGlobalCdma) {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_GSM_WCDMA));
+                    mButtonEnabledNetworks.setSummary((mShow4GForLTE == true)
+                            ? R.string.network_4G : R.string.network_lte);
+                } else {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
+                    mButtonEnabledNetworks.setSummary(R.string.network_global);
+                }
+                break;
+            case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
+                if (isWorldMode()) {
+                    mButtonEnabledNetworks.setSummary(
+                            R.string.preferred_network_mode_lte_cdma_summary);
+                    ITelephonyEx iTelEx = ITelephonyEx.Stub.asInterface(
+                            ServiceManager.getService(Context.TELEPHONY_SERVICE_EX));
+                    int mainPhoneId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
+                    if (iTelEx != null) {
+                        try {
+                            mainPhoneId = iTelEx.getMainCapabilityPhoneId();
+                        } catch (RemoteException e) {
+                            loge("UpdateEnabledNetworksValueAndSummary get iTelEx error" +
+                                    e.getMessage());
+                        }
+                    }
+                    //M: 3362969 support it as GSM instead of CDMA
+                    if (TelephonyUtilsEx.isCdma3gCard(mPhone.getSubId()) &&
+                        mainPhoneId != mPhone.getPhoneId()) {
+                        controlCdmaOptions(false);
+                        controlGsmOptions(true);
+                    } else {
+                        controlCdmaOptions(true);
+                        controlGsmOptions(false);
+                    }
+
+                } else {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_CDMA_AND_EVDO));
+                    mButtonEnabledNetworks.setSummary(R.string.network_lte);
+                }
+                break;
+            case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+                mButtonEnabledNetworks.setValue(
+                        Integer.toString(Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA));
+                mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                break;
+            case Phone.NT_MODE_CDMA:
+            case Phone.NT_MODE_EVDO_NO_CDMA:
+            case Phone.NT_MODE_GLOBAL:
+                /// M: For C2K @{
+                if (isC2kLteSupport()) {
+                    if (DBG) {
+                        log("Update value to Global for c2k project");
+                    }
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_GLOBAL));
+                } else {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_CDMA));
+                }
+                /// @}
+
+                mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                break;
+            case Phone.NT_MODE_CDMA_NO_EVDO:
+                mButtonEnabledNetworks.setValue(
+                        Integer.toString(Phone.NT_MODE_CDMA_NO_EVDO));
+                mButtonEnabledNetworks.setSummary(R.string.network_1x);
+                break;
+            case Phone.NT_MODE_TDSCDMA_ONLY:
+                mButtonEnabledNetworks.setValue(
+                        Integer.toString(Phone.NT_MODE_TDSCDMA_ONLY));
+                mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                break;
+            case Phone.NT_MODE_LTE_TDSCDMA_GSM:
+            case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
+            case Phone.NT_MODE_LTE_TDSCDMA:
+            case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
+            case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
+            case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
+                if (isSupportTdscdma()) {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA));
+                    mButtonEnabledNetworks.setSummary(R.string.network_lte);
+                } else {
+                    if (isWorldMode()) {
+                        ITelephonyEx iTelEx = ITelephonyEx.Stub.asInterface(
+                                ServiceManager.getService(Context.TELEPHONY_SERVICE_EX));
+                        int mainPhoneId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
+                        if (iTelEx != null) {
+                            try {
+                                mainPhoneId = iTelEx.getMainCapabilityPhoneId();
+                            } catch (RemoteException e) {
+                                loge("UpdateEnabledNetworksValueAndSummary get iTelEx error" +
+                                        e.getMessage());
+                            }
+                        }
+                        //M: 3362969 support it as GSM instead of CDMA
+                        if (TelephonyUtilsEx.isCdma3gCard(mPhone.getSubId()) &&
+                            mainPhoneId != mPhone.getPhoneId()) {
+                            controlCdmaOptions(false);
+                            controlGsmOptions(true);
+                        } else {
+                            controlCdmaOptions(true);
+                            controlGsmOptions(false);
+                        }
+                    }
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
+                    if (mPhone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA ||
+                            mIsGlobalCdma ||
+                            isWorldMode()) {
+                        mButtonEnabledNetworks.setSummary(R.string.network_global);
+                    } else {
+                        mButtonEnabledNetworks.setSummary((mShow4GForLTE == true)
+                                ? R.string.network_4G : R.string.network_lte);
+                    }
+                }
+                break;
+            default:
+                String errMsg = "Invalid Network Mode (" + NetworkMode + "). Ignore.";
+                loge(errMsg);
+                mButtonEnabledNetworks.setSummary(errMsg);
+        }
+
+        //OP18 plugin
+        mExt.updatePreferredNetworkValueAndSummary(mButtonEnabledNetworks, NetworkMode);
+
+        /// Add for Plug-in @{
+        if (mButtonEnabledNetworks != null) {
+            if (DBG) {
+                log("Enter plug-in update updateNetworkTypeSummary - Enabled.");
+            }
+            mExt.updateNetworkTypeSummary(mButtonEnabledNetworks);
+            mExt.customizePreferredNetworkMode(mButtonEnabledNetworks, mPhone.getSubId());
+            /// Add for cmcc open market @{
+            mOmEx.updateNetworkTypeSummary(mButtonEnabledNetworks);
+            /// @}
+        }
+        /// @}
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        switch(requestCode) {
+        case REQUEST_CODE_EXIT_ECM:
+            Boolean isChoiceYes =
+                data.getBooleanExtra(EmergencyCallbackModeExitDialog.EXTRA_EXIT_ECM_RESULT, false);
+            if (isChoiceYes && mClickedPreference != null) {
+                // If the phone exits from ECM mode, show the CDMA Options
+                mCdmaOptions.showDialog(mClickedPreference);
+            } else {
+                // do nothing
+            }
+            break;
+
+        default:
+            break;
+        }
+    }
+
+    private static void log(String msg) {
+        Log.d(LOG_TAG, msg);
+    }
+
+    private static void loge(String msg) {
+        Log.e(LOG_TAG, msg);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        final int itemId = item.getItemId();
+        if (itemId == android.R.id.home) {  // See ActionBar#setDisplayHomeAsUpEnabled()
+            // Commenting out "logical up" capability. This is a workaround for issue 5278083.
+            //
+            // Settings app may not launch this activity via UP_ACTIVITY_CLASS but the other
+            // Activity that looks exactly same as UP_ACTIVITY_CLASS ("SubSettings" Activity).
+            // At that moment, this Activity launches UP_ACTIVITY_CLASS on top of the Activity.
+            // which confuses users.
+            // TODO: introduce better mechanism for "up" capability here.
+            /*Intent intent = new Intent(Intent.ACTION_MAIN);
+            intent.setClassName(UP_ACTIVITY_PACKAGE, UP_ACTIVITY_CLASS);
+            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+            startActivity(intent);*/
+            finish();
+            return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    private boolean isWorldMode() {
+        boolean worldModeOn = false;
+        final TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
+        final String configString = getResources().getString(R.string.config_world_mode);
+
+        if (!TextUtils.isEmpty(configString)) {
+            String[] configArray = configString.split(";");
+            // Check if we have World mode configuration set to True only or config is set to True
+            // and SIM GID value is also set and matches to the current SIM GID.
+            if (configArray != null &&
+                   ((configArray.length == 1 && configArray[0].equalsIgnoreCase("true")) ||
+                       (configArray.length == 2 && !TextUtils.isEmpty(configArray[1]) &&
+                           tm != null && configArray[1].equalsIgnoreCase(tm.getGroupIdLevel1())))) {
+                               worldModeOn = true;
+            }
+        }
+
+        if (DBG) {
+            log("isWorldMode=" + worldModeOn);
+        }
+
+        return worldModeOn;
+    }
+
+    private void controlGsmOptions(boolean enable) {
+        PreferenceScreen prefSet = getPreferenceScreen();
+        if (prefSet == null) {
+            return;
+        }
+
+        if (mGsmUmtsOptions == null) {
+            mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, mPhone.getSubId());
+        }
+        PreferenceScreen apnExpand =
+                (PreferenceScreen) prefSet.findPreference(BUTTON_APN_EXPAND_KEY);
+        PreferenceScreen operatorSelectionExpand =
+                (PreferenceScreen) prefSet.findPreference(BUTTON_OPERATOR_SELECTION_EXPAND_KEY);
+        PreferenceScreen carrierSettings =
+                (PreferenceScreen) prefSet.findPreference(BUTTON_CARRIER_SETTINGS_KEY);
+        if (apnExpand != null) {
+            apnExpand.setEnabled(isWorldMode() || enable);
+        }
+        if (operatorSelectionExpand != null) {
+            if (enable) {
+                operatorSelectionExpand.setEnabled(true);
+            } else {
+                prefSet.removePreference(operatorSelectionExpand);
+            }
+        }
+        if (carrierSettings != null) {
+            prefSet.removePreference(carrierSettings);
+        }
+    }
+
+    private void controlCdmaOptions(boolean enable) {
+        PreferenceScreen prefSet = getPreferenceScreen();
+        if (prefSet == null) {
+            return;
+        }
+        if (enable && mCdmaOptions == null) {
+            mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
+        }
+        CdmaSystemSelectListPreference systemSelect =
+                (CdmaSystemSelectListPreference)prefSet.findPreference
+                        (BUTTON_CDMA_SYSTEM_SELECT_KEY);
+        if (systemSelect != null) {
+            systemSelect.setEnabled(enable);
+        }
+    }
+
+    private boolean isSupportTdscdma() {
+        /// M: TODO: temple solution for MR1 changes
+        /*
+        if (getResources().getBoolean(R.bool.config_support_tdscdma)) {
+            return true;
+        }
+
+        String operatorNumeric = mPhone.getServiceState().getOperatorNumeric();
+        String[] numericArray = getResources().getStringArray(
+                R.array.config_support_tdscdma_roaming_on_networks);
+        if (numericArray.length == 0 || operatorNumeric == null) {
+            return false;
+        }
+        for (String numeric : numericArray) {
+            if (operatorNumeric.equals(numeric)) {
+                return true;
+            }
+        }
+        */
+        return false;
+    }
+
+    private void dissmissDialog(ListPreference preference) {
+        Dialog dialog = null;
+        if (preference != null) {
+            dialog = preference.getDialog();
+            if (dialog != null) {
+                dialog.dismiss();
+            }
+        }
+    }
+
+    // -------------------- Mediatek ---------------------
+    // M: Add for plug-in
+    private IMobileNetworkSettingsExt mExt;
+    // M: Add for cmcc open market
+    private MobileNetworkSettingsOmEx mOmEx;
+    /// M: add for plmn list
+    public static final String BUTTON_PLMN_LIST = "button_plmn_key";
+    private static final String BUTTON_CDMA_ACTIVATE_DEVICE_KEY = "cdma_activate_device_key";
+    /// M: c2k 4g data only
+    private static final String SINGLE_LTE_DATA = "single_lte_data";
+    /// M: for screen rotate @{
+    private static final String CURRENT_TAB = "current_tab";
+    private int mCurrentTab = 0;
+    /// @}
+    private Preference mPLMNPreference;
+    private IntentFilter mIntentFilter;
+
+    /// M: 03100374 restore network mode in case set fail
+    private int mPreNetworkMode = -1;
+
+    private Dialog mDialog;
+
+    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+            if (DBG) {
+                log("action: " + action);
+            }
+            /// When receive aiplane mode, we would like to finish the activity, for
+            //  we can't get the modem capability, and will show the user selected network
+            //  mode as summary, this will make user misunderstand.(ALPS01971666)
+            if (action.equals(Intent.ACTION_AIRPLANE_MODE_CHANGED)) {
+                finish();
+            } else if (action.equals(Intent.ACTION_MSIM_MODE_CHANGED)
+                    || action.equals(TelephonyIntents.ACTION_MD_TYPE_CHANGE)
+                    || action.equals(TelephonyIntents.ACTION_LOCATED_PLMN_CHANGED)
+                    || mExt.customizeDualVolteReceiveIntent(action)) {
+                updateScreenStatus();
+            }
+            /// Add for Sim Switch @{
+            else if (action.equals(TelephonyIntents.ACTION_SET_RADIO_CAPABILITY_DONE)) {
+                if (DBG) {
+                    log("Siwtch done Action ACTION_SET_PHONE_RAT_FAMILY_DONE received ");
+                }
+                mPhone = PhoneUtils.getPhoneUsingSubId(mPhone.getSubId());
+                updateScreenStatus();
+            } else if (action.equals(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED)) {
+                // When the radio changes (ex: CDMA->GSM), refresh all options.
+                mGsmUmtsOptions = null;
+                mCdmaOptions = null;
+                updateBody();
+            } else if (action.equals(TelephonyIntents.ACTION_RAT_CHANGED)) {
+                handleRatChanged(intent);
+            }
+            /// @}
+        }
+    };
+
+    private void onCreateMTK(PreferenceScreen prefSet) {
+
+        /// M: Add For [MTK_Enhanced4GLTE] @{
+        addEnhanced4GLteSwitchPreference(prefSet);
+        /// @}
+
+        /// M: For 2G only project remove select network mode item @{
+        if (TelephonyUtils.is2GOnlyProject()) {
+            if (DBG) {
+                log("[initPreferenceForMobileNetwork]only 2G");
+            }
+            if (findPreference(BUTTON_PREFERED_NETWORK_MODE) != null) {
+                prefSet.removePreference(mButtonPreferredNetworkMode);
+            }
+            if (findPreference(BUTTON_ENABLED_NETWORKS_KEY) != null) {
+                prefSet.removePreference(mButtonEnabledNetworks);
+            }
+        }
+        /// @}
+
+        /// M: Add for plmn list @{
+        if (!FeatureOption.isMtk3gDongleSupport() && FeatureOption.isMtkCtaSet()
+                && !TelephonyUtilsEx.isCDMAPhone(mPhone)) {
+            if (DBG) {
+                log("---addPLMNList---");
+            }
+            addPLMNList(prefSet);
+        }
+        /// @}
+
+        ITelephonyEx iTelEx = ITelephonyEx.Stub.asInterface(
+                    ServiceManager.getService(Context.TELEPHONY_SERVICE_EX));
+            int mainPhoneId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
+            if (iTelEx != null) {
+                try {
+                    mainPhoneId = iTelEx.getMainCapabilityPhoneId();
+                } catch (RemoteException e) {
+                    loge("UpdateEnabledNetworksValueAndSummary get iTelEx error" +
+                            e.getMessage());
+                }
+            }
+        /// M: Add For C2K OM, OP09 will implement its own cdma network setting @{
+        if (FeatureOption.isMtkLteSupport()
+                && (isC2kLteSupport())
+                && ((TelephonyUtilsEx.isCdmaCardInserted(mPhone)
+                        || PhoneFeatureConstants.FeatureOption.isCTLteTddTestSupport())
+                        /// M:[CT VOLTE]
+                        || (TelephonyUtilsEx.isCtVolteEnabled()
+                                && TelephonyUtilsEx.isCt4gSim(mPhone.getSubId()) &&
+                                (!TelephonyUtilsEx.isBothslotCt4gSim(mSubscriptionManager) ||
+                                (mainPhoneId == mPhone.getPhoneId()))))
+                && !mExt.isCtPlugin()) {
+            if (mCdmaNetworkSettings != null) {
+                if (DBG) {
+                    log("CdmaNetworkSettings destroy " + this);
+                }
+                mCdmaNetworkSettings.onDestroy();
+                mCdmaNetworkSettings = null;
+            }
+            mCdmaNetworkSettings = new CdmaNetworkSettings(this, prefSet, mPhone);
+            mCdmaNetworkSettings.onResume();
+        }
+        /// @}
+
+        /// Add for plug-in @{
+        if (mPhone != null) {
+            mExt.initOtherMobileNetworkSettings(this, mPhone.getSubId());
+        }
+        mExt.initMobileNetworkSettings(this, convertTabToSlot(mCurrentTab));
+        /// @}
+        /// Add for cmcc open market @{
+        mOmEx.initMobileNetworkSettings(this, convertTabToSlot(mCurrentTab));
+        /// @}
+
+        updateScreenStatus();
+        mExt.onResume();
+
+        /// M: for mtk 3m
+        handleC2k3MScreen(prefSet);
+        /// M: for mtk 4m
+        handleC2k4MScreen(prefSet);
+        /// M: for mtk 5m
+        handleC2k5MScreen(prefSet);
+    }
+
+    /**
+     * Update the preferred network mode item Entries & Values
+     */
+    private void updateNetworkModeForLwDsds() {
+        /// Get main phone Id;
+        ITelephonyEx iTelEx = ITelephonyEx.Stub.asInterface(
+                ServiceManager.getService(Context.TELEPHONY_SERVICE_EX));
+        int mainPhoneId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
+        if (iTelEx != null) {
+            try{
+                mainPhoneId = iTelEx.getMainCapabilityPhoneId();
+            } catch (RemoteException e) {
+                loge("handleLwDsdsNetworkMode get iTelEx error" + e.getMessage());
+            }
+        }
+        /// If the phone main phone we should do nothing special;
+        if (DBG) {
+            log("handleLwDsdsNetworkMode mainPhoneId = " + mainPhoneId);
+        }
+        if (mainPhoneId != mPhone.getPhoneId()) {
+            /// We should compare the user's setting value & modem support info;
+            int settingsNetworkMode = android.provider.Settings.Global.getInt(
+                    mPhone.getContext().getContentResolver(),
+                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE
+                    + mPhone.getSubId(), Phone.NT_MODE_GSM_ONLY);
+            int currRat = mPhone.getRadioAccessFamily();
+            if (DBG) {
+                log("updateNetworkModeForLwDsds settingsNetworkMode = "
+                    + settingsNetworkMode + "; currRat = " + currRat);
+            }
+            if ((currRat & RadioAccessFamily.RAF_LTE) == RadioAccessFamily.RAF_LTE) {
+                int select = mShow4GForLTE ? R.array.enabled_networks_4g_choices
+                        : R.array.enabled_networks_choices;
+                mButtonEnabledNetworks.setEntries(select);
+                mButtonEnabledNetworks.setEntryValues(isC2kLteSupport() ?
+                        R.array.enabled_networks_values_c2k : R.array.enabled_networks_values);
+                if (DBG) {
+                    log("updateNetworkModeForLwDsds mShow4GForLTE = " + mShow4GForLTE);
+                }
+            } else if ((currRat & RadioAccessFamily.RAF_UMTS) == RadioAccessFamily.RAF_UMTS) {
+                // Support 3/2G for WorldMode is uLWG
+                mButtonEnabledNetworks.setEntries(
+                        R.array.enabled_networks_except_lte_choices);
+                if (isC2kLteSupport()) {
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_except_lte_values_c2k);
+                } else {
+                    mButtonEnabledNetworks.setEntryValues(
+                            R.array.enabled_networks_except_lte_values);
+                }
+                // If user select contain LTE, should set UI to 3G;
+                // NT_MODE_LTE_CDMA_AND_EVDO = 8 is the smallest value supporting LTE.
+                if (settingsNetworkMode > Phone.NT_MODE_LTE_CDMA_AND_EVDO) {
+                    if (DBG) {
+                        log("updateNetworkModeForLwDsds set network mode to 3G");
+                    }
+                    if (isC2kLteSupport()) {
+                        mButtonEnabledNetworks.setValue(
+                                Integer.toString(Phone.NT_MODE_GLOBAL));
+                    } else {
+                        mButtonEnabledNetworks.setValue(
+                                Integer.toString(Phone.NT_MODE_WCDMA_PREF));
+                    }
+                    mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                } else {
+                    if (DBG) {
+                        log("updateNetworkModeForLwDsds set to what user select. ");
+                    }
+                    UpdateEnabledNetworksValueAndSummary(settingsNetworkMode);
+                }
+            } else {
+                // Only support 2G for WorldMode is uLtTG
+                if (DBG) {
+                    log("updateNetworkModeForLwDsds set to 2G only.");
+                }
+                mButtonEnabledNetworks.setSummary(R.string.network_2G);
+                mButtonEnabledNetworks.setEnabled(false);
+            }
+        }
+    }
+
+    private void initIntentFilter() {
+        /// M: for receivers sim lock gemini phone @{
+        mIntentFilter = new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
+        mIntentFilter.addAction(TelephonyIntents.ACTION_EF_CSP_CONTENT_NOTIFY);
+        mIntentFilter.addAction(Intent.ACTION_MSIM_MODE_CHANGED);
+        mIntentFilter.addAction(TelephonyIntents.ACTION_MD_TYPE_CHANGE);
+        mIntentFilter.addAction(TelephonyIntents.ACTION_LOCATED_PLMN_CHANGED);
+        mIntentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
+        ///@}
+        /// M: Add for Sim Switch @{
+        mIntentFilter.addAction(TelephonyIntents.ACTION_SET_RADIO_CAPABILITY_DONE);
+        mIntentFilter.addAction(TelephonyIntents.ACTION_RAT_CHANGED);
+        mExt.customizeDualVolteIntentFilter(mIntentFilter);
+        /// @}
+    }
+
+    private void addPLMNList(PreferenceScreen prefSet) {
+        // add PLMNList, if c2k project the order should under the 4g data only
+        int order = prefSet.findPreference(SINGLE_LTE_DATA) != null ?
+                prefSet.findPreference(SINGLE_LTE_DATA).getOrder() : mButtonDataRoam.getOrder();
+        mPLMNPreference = new Preference(this);
+        mPLMNPreference.setKey(BUTTON_PLMN_LIST);
+        mPLMNPreference.setTitle(R.string.plmn_list_setting_title);
+        Intent intentPlmn = new Intent();
+        intentPlmn.setClassName("com.android.phone", "com.mediatek.settings.PLMNListPreference");
+        intentPlmn.putExtra(SubscriptionInfoHelper.SUB_ID_EXTRA, mPhone.getSubId());
+        mPLMNPreference.setIntent(intentPlmn);
+        mPLMNPreference.setOrder(order + 1);
+       // prefSet.addPreference(mPLMNPreference);
+    }
+
+    private void updateScreenStatus() {
+        boolean isIdle = (TelephonyManager.getDefault().getCallState()
+                == TelephonyManager.CALL_STATE_IDLE);
+        boolean isShouldEnabled = isIdle && TelephonyUtils.isRadioOn(mPhone.getSubId(), this);
+        if (DBG) {
+            log("updateNetworkModePreference:isShouldEnabled = "
+                + isShouldEnabled + ", isIdle = " + isIdle);
+        }
+        getPreferenceScreen().setEnabled(isShouldEnabled
+                || PhoneFeatureConstants.FeatureOption.isCTLteTddTestSupport());
+        updateCapabilityRelatedPreference(isShouldEnabled);
+    }
+
+    /**
+     * Add for update the display of network mode preference.
+     * @param enable is the preference or not
+     */
+    private void updateCapabilityRelatedPreference(boolean enable) {
+        // if airplane mode is on or all SIMs closed, should also dismiss dialog
+        boolean isNWModeEnabled = enable && isCapabilityPhone(mPhone);
+        if (DBG) {
+            log("updateNetworkModePreference:isNWModeEnabled = " + isNWModeEnabled);
+        }
+        updateNetworkModePreference(mButtonPreferredNetworkMode, isNWModeEnabled);
+        updateNetworkModePreference(mButtonEnabledNetworks, isNWModeEnabled);
+        /// M: Add for L+W DSDS.
+        updateNetworkModeForLwDsds();
+        /// Add for [MTK_Enhanced4GLTE]
+        updateEnhanced4GLteSwitchPreference();
+
+        /// Update CDMA network settings
+        if (TelephonyUtilsEx.isCDMAPhone(mPhone) && mCdmaNetworkSettings != null) {
+            mCdmaNetworkSettings.onResume();
+        } else {
+            if (DBG) {
+                log("updateCapabilityRelatedPreference don't update cdma settings");
+            }
+        }
+    }
+
+    /**
+     * Add for update the display of network mode preference.
+     * @param enable is the preference or not
+     */
+    private void updateNetworkModePreference(ListPreference preference, boolean enable) {
+        // if airplane mode is on or all SIMs closed, should also dismiss dialog
+        if (preference != null) {
+            preference.setEnabled(enable);
+            if (!enable) {
+                dissmissDialog(preference);
+            }
+            if (getPreferenceScreen().findPreference(preference.getKey()) != null) {
+                updatePreferredNetworkUIFromDb();
+            }
+            /// Add for Plug-in @{
+            mExt.customizePreferredNetworkMode(preference, mPhone.getSubId());
+            mExt.updateLTEModeStatus(preference);
+            /// @}
+            /// Add for cmcc open market @{
+            mOmEx.updateLTEModeStatus(preference);
+            /// @}
+        }
+    }
+
+    /**
+     * handle network mode change result by framework world phone sim switch logical.
+     * @param intent which contains the info of network mode
+     */
+    private void handleRatChanged(Intent intent) {
+        int phoneId = intent.getIntExtra(PhoneConstants.PHONE_KEY, 0);
+        int modemMode = intent.getIntExtra(TelephonyIntents.EXTRA_RAT, -1);
+        if (DBG) {
+            log("handleRatChanged phoneId: " + phoneId + " modemMode: " + modemMode);
+        }
+        Phone phone = PhoneFactory.getPhone(phoneId);
+        /* For ALPS02337896, don't update the DB value when rat change.
+         * This may lead to ALPS01923338 happens again.
+        if (modemMode != -1 && isCapabilityPhone(phone)) {
+            android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE +
+                    phone.getSubId(),
+                    modemMode);
+        }
+        */
+        if (phoneId == mPhone.getPhoneId() && isCapabilityPhone(phone)) {
+            updateBody();
+        }
+    }
+
+    /**
+     * Is the phone has 3/4G capability or not.
+     * @return true if phone has 3/4G capability
+     */
+    private boolean isCapabilityPhone(Phone phone) {
+        boolean result = phone != null ? ((phone.getRadioAccessFamily()
+                & (RadioAccessFamily.RAF_UMTS | RadioAccessFamily.RAF_LTE)) > 0) : false;
+        return result;
+    }
+
+    // M: Add for [MTK_Enhanced4GLTE] @{
+    // Use our own button instand of Google default one mButton4glte
+    private Enhanced4GLteSwitchPreference mEnhancedButton4glte;
+
+    /**
+     * Add our switchPreference & Remove google default one.
+     * @param preferenceScreen
+     */
+    private void addEnhanced4GLteSwitchPreference(PreferenceScreen preferenceScreen) {
+        boolean volteEnabled = ImsManager.isVolteEnabledByPlatform(this, mPhone.getPhoneId());
+        if (DBG) {
+            log("[addEnhanced4GLteSwitchPreference] volteEnabled :"
+                + volteEnabled);
+        }
+        if (mButton4glte != null) {
+            if (DBG) {
+                log("[addEnhanced4GLteSwitchPreference] Remove mButton4glte!");
+            }
+            preferenceScreen.removePreference(mButton4glte);
+        }
+        //volteEnabled = false;
+        if (volteEnabled && !mExt.isCtPlugin()) {
+            int order = mButtonEnabledNetworks.getOrder() + 1;
+            mEnhancedButton4glte = new Enhanced4GLteSwitchPreference(this, mPhone.getSubId());
+            /// Still use Google's key, title, and summary.
+            mEnhancedButton4glte.setKey(BUTTON_4G_LTE_KEY);
+            /// M: [CT VOLTE]
+            // show "VOLTE" for CT SIM
+            if (TelephonyUtilsEx.isCtVolteEnabled()
+                    && TelephonyUtilsEx.isCtSim(mPhone.getSubId())) {
+                mEnhancedButton4glte.setTitle(R.string.hd_voice_switch_title);
+            } else {
+                PersistableBundle carrierConfig =
+                    PhoneGlobals.getInstance().getCarrierConfigForSubId(mPhone.getSubId());
+                boolean useVariant4glteTitle = carrierConfig.getBoolean(
+                        CarrierConfigManager.KEY_ENHANCED_4G_LTE_TITLE_VARIANT_BOOL);
+                int enhanced4glteModeTitleId = useVariant4glteTitle ?
+                        R.string.enhanced_4g_lte_mode_title_variant :
+                        R.string.enhanced_4g_lte_mode_title;
+                mEnhancedButton4glte.setTitle(enhanced4glteModeTitleId);
+            }
+            /// M: [CT VOLTE]
+            // show "VOLTE" for CT SIM
+            if (!TelephonyUtilsEx.isCtVolteEnabled()
+                    || !TelephonyUtilsEx.isCtSim(mPhone.getSubId())) {
+            /// @}
+                mEnhancedButton4glte.setSummary(R.string.enhanced_4g_lte_mode_summary);
+            }
+            mEnhancedButton4glte.setOnPreferenceChangeListener(this);
+            mEnhancedButton4glte.setOrder(order);
+            //preferenceScreen.addPreference(mEnhancedButton4glte);
+            ///M: Plug-in to customize the LTE switch @{
+            mExt.customizeEnhanced4GLteSwitchPreference(this, mEnhancedButton4glte);
+            ///@}
+        } else {
+            mEnhancedButton4glte = null;
+        }
+    }
+
+    /**
+     * Update the subId in mEnhancedButton4glte.
+     */
+    private void updateEnhanced4GLteSwitchPreference() {
+        if (mEnhancedButton4glte != null) {
+            if (ImsManager.isVolteEnabledByPlatform(this, mPhone.getPhoneId()) &&
+                    (SystemProperties.getInt("ro.mtk_multiple_ims_support", 1) == 1  &&
+                    TelephonyUtilsEx.getMainPhoneId() == mPhone.getPhoneId()) ||
+                    (SystemProperties.getInt("ro.mtk_multiple_ims_support", 1) > 1 &&
+                    isCapabilityPhone(mPhone))) {
+                    log("updateEnhanced4GLteSwitchPreference add switcher");
+                if (findPreference(BUTTON_4G_LTE_KEY) == null) {
+                    getPreferenceScreen().addPreference(mEnhancedButton4glte);
+                }
+            } else {
+                if (findPreference(BUTTON_4G_LTE_KEY) != null) {
+                    getPreferenceScreen().removePreference(mEnhancedButton4glte);
+                }
+            }
+            if (findPreference(BUTTON_4G_LTE_KEY) != null) {
+                mEnhancedButton4glte.setSubId(mPhone.getSubId());
+                boolean enh4glteMode = ImsManager.isEnhanced4gLteModeSettingEnabledByUser(this,
+                        mPhone.getPhoneId())
+                        && ImsManager.isNonTtyOrTtyOnVolteEnabled(this, mPhone.getPhoneId());
+                if (DBG) {
+                    log("[updateEnhanced4GLteSwitchPreference] SubId = " + mPhone.getSubId()
+                        + ", enh4glteMode=" + enh4glteMode);
+                }
+                mEnhancedButton4glte.setChecked(enh4glteMode);
+                /// M: update enabled state
+                updateEnhanced4glteEnableState();
+            }
+        }
+    }
+
+    private void updateEnhanced4glteEnableState() {
+        if (mEnhancedButton4glte != null) {
+            boolean inCall = TelecomManager.from(this).isInCall();
+            boolean nontty = ImsManager.isNonTtyOrTtyOnVolteEnabled(getApplicationContext(),
+                    mPhone.getPhoneId());
+            /// M: [CT VOLTE] @{
+            boolean enableForCtVolte = true;
+            int subId = mPhone.getSubId();
+            if (TelephonyUtilsEx.isCtVolteEnabled() && TelephonyUtilsEx.isCtSim(subId)) {
+                int settingsNetworkMode = android.provider.Settings.Global.getInt(mPhone
+                        .getContext().getContentResolver(),
+                        android.provider.Settings.Global.PREFERRED_NETWORK_MODE + subId,
+                        Phone.PREFERRED_NT_MODE);
+                enableForCtVolte = TelephonyUtilsEx.isCt4gSim(subId)
+                        && (settingsNetworkMode == Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA ||
+                            settingsNetworkMode == Phone.NT_MODE_LTE_CDMA_AND_EVDO);
+            }
+            /// @}
+            /// M: [CMCC DUAl VOLTE] @{
+            enableForCtVolte = mExt.customizeDualVolteOpDisable(subId, enableForCtVolte);
+            /// @}
+            boolean secondEnabled = isSecondVolteEnabled();
+            log("updateEnhanced4glteEnableState, incall = " + inCall + ", nontty = " + nontty
+                    + ", enableForCtVolte = " + enableForCtVolte + ", secondEnabled = "
+                    + secondEnabled);
+            mEnhancedButton4glte.setEnabled(!inCall && nontty && hasActiveSubscriptions()
+                    && enableForCtVolte && secondEnabled);
+            /// M: [CMCC DUAl VOLTE] @{
+            mExt.customizeDualVolteOpHide(getPreferenceScreen(), mEnhancedButton4glte, enableForCtVolte);
+            /// @}
+        }
+    }
+
+    /**
+     * For [MTK_Enhanced4GLTE]
+     * We add our own SwitchPreference, and its own onPreferenceChange call backs.
+     * @param preference
+     * @param objValue
+     * @return
+     */
+    private boolean onPreferenceChangeMTK(Preference preference, Object objValue) {
+        String volteTitle = getResources().getString(R.string.hd_voice_switch_title);
+        String lteTitle = getResources().getString(R.string.enhanced_4g_lte_mode_title);
+        log("[onPreferenceChangeMTK] Preference = " + preference.getTitle());
+
+        if ((mEnhancedButton4glte == preference) || preference.getTitle().equals(volteTitle)
+                || preference.getTitle().equals(lteTitle)) {
+            Enhanced4GLteSwitchPreference ltePref = (Enhanced4GLteSwitchPreference) preference;
+            if (DBG) {
+                log("[onPreferenceChangeMTK] IsChecked = " + ltePref.isChecked());
+            }
+
+            /// M: [CT VOLTE] @{
+            if (TelephonyUtilsEx.isCtVolteEnabled() && TelephonyUtilsEx.isCtSim(mPhone.getSubId())
+                    && !ltePref.isChecked()) {
+                int type = TelephonyManager.getDefault().getNetworkType(mPhone.getSubId());
+                if (DBG) {
+                    log("network type = " + type);
+                }
+                if (TelephonyManager.NETWORK_TYPE_LTE != type
+                        && !TelephonyUtilsEx.isRoaming(mPhone)
+                        && (TelephonyUtilsEx.getMainPhoneId() == mPhone.getPhoneId()
+                        || TelephonyUtilsEx.isBothslotCt4gSim(mSubscriptionManager))) {
+                    showVolteUnavailableDialog();
+                    return false;
+                }
+            }
+            ltePref.setChecked(!ltePref.isChecked());
+            ImsManager.setEnhanced4gLteModeSetting(this, ltePref.isChecked(), mPhone.getPhoneId());
+            return true;
+        }
+        return false;
+    }
+    /// @}
+
+    /**
+     * [CT VOLTE]When network type is not LTE, show dialog.
+     */
+    private void showVolteUnavailableDialog() {
+        if (DBG) {
+            log("showVolteUnavailableDialog ...");
+        }
+        final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        String title = this.getString(R.string.alert_ct_volte_unavailable, PhoneUtils
+                .getSubDisplayName(mPhone.getSubId()));
+        Dialog dialog = builder.setMessage(title).setNegativeButton(android.R.string.cancel,
+                new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        if (DBG) {
+                            log("dialog cancel mEnhanced4GLteSwitchPreference.setchecked  = "
+                                + !mEnhancedButton4glte.isChecked());
+                        }
+                        mEnhancedButton4glte.setChecked(false);
+
+                    }
+                }).setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                mEnhancedButton4glte.setChecked(true);
+                if (DBG) {
+                    log("dialog ok" + " ims set " + mEnhancedButton4glte.isChecked() + " mSlotId = "
+                        + SubscriptionManager.getPhoneId(mPhone.getSubId()));
+                }
+                ImsManager.setEnhanced4gLteModeSetting(MobileNetworkSettings.this,
+                        mEnhancedButton4glte.isChecked(), mPhone.getPhoneId());
+            }
+        }).create();
+        dialog.setCanceledOnTouchOutside(false);
+        dialog.setOnKeyListener(new OnKeyListener() {
+            @Override
+            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
+                if (KeyEvent.KEYCODE_BACK == keyCode) {
+                    if (null != dialog) {
+                        log("onKey keycode = back"
+                                + "dialog cancel mEnhanced4GLteSwitchPreference.setchecked  = "
+                                + !mEnhancedButton4glte.isChecked());
+                        mEnhancedButton4glte.setChecked(!mEnhancedButton4glte.isChecked());
+                        dialog.dismiss();
+                        return true;
+                    }
+                }
+                return false;
+            }
+        });
+        mDialog = dialog;
+        dialog.show();
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putInt(CURRENT_TAB, mCurrentTab);
+    }
+
+    /**
+     * For [MTK_3SIM].
+     * Convert Tab id to Slot id.
+     * @param currentTab tab id
+     * @return slotId
+     */
+    private int convertTabToSlot(int currentTab) {
+        int slotId = mActiveSubInfos.size() > currentTab ?
+                mActiveSubInfos.get(currentTab).getSimSlotIndex() : 0;
+        if (DBG) {
+            log("convertTabToSlot: info size=" + mActiveSubInfos.size() +
+                    " currentTab=" + currentTab + " slotId=" + slotId);
+        }
+        return slotId;
+    }
+
+    /**
+     * For C2k Common screen, (3M, 5M)
+     * @param preset
+     */
+    private void handleC2kCommonScreen(PreferenceScreen prefSet) {
+        if (DBG) {
+            log("--- go to C2k Common (3M, 5M) screen ---");
+        }
+        if (prefSet.findPreference(BUTTON_PREFERED_NETWORK_MODE) != null) {
+            prefSet.removePreference(prefSet.findPreference(BUTTON_PREFERED_NETWORK_MODE));
+        }
+        if (TelephonyUtilsEx.isCDMAPhone(mPhone)) {
+            if (prefSet.findPreference(BUTTON_ENABLED_NETWORKS_KEY) != null) {
+                prefSet.removePreference(prefSet.findPreference(BUTTON_ENABLED_NETWORKS_KEY));
+            }
+        }
+    }
+
+    /**
+     * For C2k 3M
+     * @param preset
+     */
+    private void handleC2k3MScreen(PreferenceScreen prefSet) {
+        if (!FeatureOption.isMtkLteSupport() && FeatureOption.isMtkC2k3MSupport()) {
+
+            handleC2kCommonScreen(prefSet);
+            if (DBG) {
+                log("--- go to C2k 3M ---");
+            }
+            if (!TelephonyUtilsEx.isCDMAPhone(mPhone)) {
+                mButtonEnabledNetworks.setEntries(R.array.enabled_networks_except_lte_choices);
+                mButtonEnabledNetworks.setEntryValues(
+                        R.array.enabled_networks_except_lte_values_c2k);
+            }
+        }
+    }
+
+    /**
+     * For C2k OM 4M
+     * @param preset
+     */
+    private void handleC2k4MScreen(PreferenceScreen prefSet) {
+        if (FeatureOption.isMtkLteSupport() && FeatureOption.isMtkC2k4MSupport()) {
+            if (DBG) {
+                log("--- go to C2k 4M ---");
+            }
+            if (PhoneConstants.PHONE_TYPE_GSM == mPhone.getPhoneType()) {
+                mButtonEnabledNetworks.setEntries(
+                        R.array.enabled_networks_except_td_cdma_3g_choices);
+                mButtonEnabledNetworks.setEntryValues(
+                        R.array.enabled_networks_except_td_cdma_3g_values);
+            }
+        }
+    }
+
+    /**
+     * For C2k 5M
+     * Under 5M(CLLWG).
+     * @param prefSet
+     */
+    private void handleC2k5MScreen(PreferenceScreen prefSet) {
+        if (FeatureOption.isMtkLteSupport() && FeatureOption.isMtkC2k5MSupport()) {
+
+            handleC2kCommonScreen(prefSet);
+            if (DBG) {
+                log("--- go to c2k 5M ---");
+            }
+            if (!TelephonyUtilsEx.isCDMAPhone(mPhone)) {
+                mButtonEnabledNetworks.setEntries(R.array.enabled_networks_4g_choices);
+                mButtonEnabledNetworks.setEntryValues(R.array.enabled_networks_values_c2k);
+            }
+        }
+    }
+
+    /**
+     * Whether support c2k LTE or not
+     * @return true if support else false.
+     */
+    private boolean isC2kLteSupport() {
+        return FeatureOption.isMtkSrlteSupport()
+                || FeatureOption.isMtkSvlteSupport();
+    }
+
+    /// M: if set fail, restore the preferred network type
+    private void restorePreferredNetworkTypeIfNeeded(Message msg) {
+        AsyncResult ar = (AsyncResult) msg.obj;
+        if (ar.exception != null && mPreNetworkMode != -1 && mPhone != null) {
+            final int phoneSubId = mPhone.getSubId();
+            if (DBG) {
+                log("set failed, reset preferred network mode to " + mPreNetworkMode +
+                    ", sub id = " + phoneSubId);
+            }
+            android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                    mPreNetworkMode );
+        }
+        mPreNetworkMode = -1;
+    }
+
+    /// M: [CT VOLTE]
+    private ContentObserver mContentObserver = new ContentObserver(new Handler()) {
+        @Override
+        public void onChange(boolean selfChange) {
+            if (DBG) {
+                log("onChange...");
+            }
+            updateEnhanced4GLteSwitchPreference();
+        }
+    };
+
+    private boolean isSecondVolteEnabled() {
+        if (!TelephonyUtilsEx.isBothslotCtSim(mSubscriptionManager)) {
+            return true;
+        }
+        if (TelephonyUtilsEx.getMainPhoneId() == mPhone.getPhoneId()) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
\ No newline at end of file
Index: vendor/branch/5058T_Claro_Honduras/packages/services/Telephony/res/values/strings.xml
===================================================================
--- vendor/branch/5058T_Claro_Honduras/packages/services/Telephony/res/values/strings.xml	(revision 0)
+++ vendor/branch/5058T_Claro_Honduras/packages/services/Telephony/res/values/strings.xml	(revision 15912)
@@ -0,0 +1,1748 @@
+<?xml version="1.0" encoding="utf-8" standalone="no"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+
+    <!-- Official label of the phone app, as seen in "Manage Applications"
+         and other settings UIs.  This is the version of the label for
+         tablet devices, where the phone app handles mobile data but not
+         actual phone calls. -->
+    <string name="phoneAppLabel" product="tablet">Cellular Data</string>
+
+    <!-- Official label of the phone app, as seen in "Manage Applications"
+         and other settings UIs. -->
+    <string name="phoneAppLabel" product="default">Phone Services</string>
+
+    <!-- Screen title for Emergency Dialer UI -->
+    <string name="emergencyDialerIconLabel">Emergency dialler</string>
+    <!-- Activity label for the in-call UI -->
+    <string name="phoneIconLabel">Phone</string>
+    <!-- Title of FDN list screen -->
+    <string name="fdnListLabel">FDN list</string>
+
+    <!-- Call status -->
+    <!-- Incoming call screen, name of "unknown" caller -->
+    <string name="unknown">Unknown</string>
+    <!-- Incoming call screen, string when number hidden -->
+    <string name="private_num">Private number</string>
+    <!-- Incoming call screen, string when called from a pay phone -->
+    <string name="payphone">Payphone</string>
+    <!-- In-call screen: status label for a call that's on hold -->
+    <string name="onHold">On hold</string>
+    <!-- Possible error messages with outgoing calls --><skip/>
+    <string name="mmiStarted">MMI code started</string>
+    <!-- Dialog label when a USSD code starts running -->
+    <string name="ussdRunning">USSD code running\u2026</string>
+    <!-- Dialog label when an MMI code is canceled -->
+    <string name="mmiCancelled">MMI code canceled</string>
+    <!-- Label for "cancel" button on the MMI dialog -->
+    <string name="cancel">Cancel</string>
+    <!-- Toast string displayed to user if the input in MMI dialog is < 1 or > 160 -->
+    <string name="enter_input">USSD message must be between <xliff:g id="min_len">%d</xliff:g> and <xliff:g id="max_len">%d</xliff:g> characters. Try again.</string>
+
+    <!-- Label for "Manage conference call" panel [CHAR LIMIT=40] -->
+    <string name="manageConferenceLabel">Manage conference call</string>
+
+    <!-- Positive button label ("OK") used in several dialogs in the phone UI [CHAR LIMIT=10] -->
+    <string name="ok">OK</string>
+
+    <!-- "Audio mode" popup menu: Item label to select the speakerphone [CHAR LIMIT=25] -->
+    <string name="audio_mode_speaker">Speaker</string>
+    <!-- "Audio mode" popup menu: Item label to select the handset earpiece [CHAR LIMIT=25] -->
+    <string name="audio_mode_earpiece">Handset earpiece</string>
+    <!-- "Audio mode" popup menu: Item label to select the wired headset [CHAR LIMIT=25] -->
+    <string name="audio_mode_wired_headset">Wired headset</string>
+    <!-- "Audio mode" popup menu: Item label to select the bluetooth headset [CHAR LIMIT=25] -->
+    <string name="audio_mode_bluetooth">Bluetooth</string>
+
+    <!-- post dial -->
+    <!-- In-call screen: body text of the dialog that appears when we encounter
+         the "wait" character in a phone number to be dialed; this dialog asks the
+         user if it's OK to send the numbers following the "wait". -->
+    <string name="wait_prompt_str">Send the following tones?\n</string>
+    <!-- In-call screen: body text of the dialog that appears when we encounter
+         the "PAUSE" character in a phone number to be dialed; this dialog gives
+         informative message to the user to show the sending numbers following the "Pause". -->
+    <string name="pause_prompt_str">Sending tones\n</string>
+    <!-- In-call screen: button label on the "wait" prompt dialog -->
+    <string name="send_button">Send</string>
+    <!-- In-call screen: button label on the "wait" prompt dialog in CDMA Mode-->
+    <string name="pause_prompt_yes">Yes</string>
+    <!-- In-call screen: button label on the "wait" prompt dialog in CDMA Mode-->
+    <string name="pause_prompt_no">No</string>
+    <!-- In-call screen: on the "wild" character dialog, this is the label
+         for a text widget that lets the user enter the digits that should
+         replace the "wild" character. -->
+    <string name="wild_prompt_str">Replace wild character with</string>
+
+    <!-- missing voicemail number -->
+    <!-- Title of the "Missing voicemail number" dialog -->
+    <string name="no_vm_number">Missing voicemail number</string>
+    <!-- Body text of the "Missing voicemail number" dialog -->
+    <string name="no_vm_number_msg">No voicemail number is stored on the SIM card.</string>
+    <!-- Button label on the "Missing voicemail number" dialog -->
+    <string name="add_vm_number_str">Add number</string>
+
+    <!-- Status message displayed on SIM PIN unlock panel -->
+    <string name="puk_unlocked">Your SIM card has been unblocked. Your phone is unlocking\u2026</string>
+    <!-- network depersonalization -->
+    <!-- Label text for PIN entry widget on SIM Network Depersonalization panel -->
+    <string name="label_ndp">SIM network unlock PIN</string>
+    <!-- Button label on SIM Network Depersonalization panel -->
+    <string name="sim_ndp_unlock_text">Unlock</string>
+    <!-- Button label on SIM Network Depersonalization panel -->
+    <string name="sim_ndp_dismiss_text">Dismiss</string>
+    <!-- Status message displayed on SIM Network Depersonalization panel -->
+    <string name="requesting_unlock">Requesting network unlock\u2026</string>
+    <!-- Error message displayed on SIM Network Depersonalization panel -->
+    <string name="unlock_failed">Network unlock request unsuccessful.</string>
+    <!-- Success message displayed on SIM Network Depersonalization panel -->
+    <string name="unlock_success">Network unlock successful.</string>
+
+    <!-- settings strings -->
+
+    <!-- Error message for users that aren't allowed to modify Mobile Network settings [CHAR LIMIT=none] -->
+    <string name="mobile_network_settings_not_available">Mobile network settings are not available for this user</string>
+    <!-- GSM Call settings screen, setting option name. [CHAR LIMIT=40] -->
+    <string name="labelGSMMore">GSM call settings</string>
+    <!-- GSM Call settings screen, setting option name with label indicating the SIM the settings
+         are applied to. [CHAR LIMIT=40] -->
+    <string name="labelGsmMore_with_label">GSM call settings (<xliff:g example="T\u2011Mobile" id="subscriptionlabel">%s</xliff:g>)</string>
+    <!-- CDMA Call settings screen, setting option name -->
+    <string name="labelCDMAMore">CDMA call settings</string>
+    <!-- CDMA Call settings screen, setting option name with label indicating the SIM the settings
+         are applied to. [CHAR LIMIT=40] -->
+    <string name="labelCdmaMore_with_label">CDMA call settings (<xliff:g example="Verizon" id="subscriptionlabel">%s</xliff:g>)</string>
+    <!-- Mobile network settings screen, setting option name -->
+    <string name="apn_settings">Access Point Names</string>
+	<string name="apn_settings_algb">Access Point Names</string>
+	<string name="apn_settings_alie">Access Point Names</string>
+    <!-- Label for the "Network settings" screen in the Settings UI -->
+    <string name="settings_label">Network settings</string>
+
+    <!-- Label for settings screen for phone accounts. -->
+    <string name="phone_accounts">Calling accounts</string>
+    <!-- Label for list item which opens a dialog to select the default outgoing account -->
+    <string name="phone_accounts_make_calls_with">Make calls with</string>
+    <!-- Label for list item which opens a dialog to select the default outgoing account for SIP calls. -->
+    <string name="phone_accounts_make_sip_calls_with">Make SIP calls with</string>
+    <!-- Entry in dialog to "ask first" for accounts when making a call -->
+    <string name="phone_accounts_ask_every_time">Ask first</string>
+    <!-- Account label for when a SIM account has no service (i.e. airplane mode) -->
+    <string name="phone_accounts_default_account_label">No network available</string>
+
+    <!-- Label for heading of the per-account settings section in the phone accounts settings
+         screen. -->
+    <string name="phone_accounts_settings_header">Settings</string>
+    <!-- Label for invoking phone account selection screen -->
+    <string name="phone_accounts_choose_accounts">Choose accounts</string>
+    <!-- Label for heading in the phone account selection screen -->
+    <string name="phone_accounts_selection_header">Phone accounts</string>
+    <!-- Title for the button to add a new sip account. [CHAR LIMIT=NONE] -->
+    <string name="phone_accounts_add_sip_account">Add SIP account</string>
+    <!-- Description label for icon to configure a phone account's settings. -->
+    <string name="phone_accounts_configure_account_settings">Configure account settings</string>
+    <!-- Label for heading that takes user to the list of calling accounts where they can enable
+         and disable all accounts. -->
+    <string name="phone_accounts_all_calling_accounts">All calling accounts</string>
+    <!-- Summary for all-calling-account setting indicating that is where the user goes to enable
+         and disable phone accounts. -->
+    <string name="phone_accounts_all_calling_accounts_summary">Select which accounts can make calls</string>
+
+    <!-- Title for setting to select Wi-Fi call manager account -->
+    <string name="wifi_calling">Wi\u2011Fi calling</string>
+    <!-- Built-in label for the default connection service setting. -->
+    <string name="connection_service_default_label">Built\u2011in connection service</string>
+    <!-- Call settings screen, setting option name -->
+    <string name="voicemail">Voicemail</string>
+    <!-- Title of the "Voicemail" settings screen, with a text label identifying which SIM the settings are for. -->
+    <string name="voicemail_settings_with_label">Voicemail (<xliff:g example="Mock Carrier" id="subscriptionlabel">%s</xliff:g>)</string>
+    <!-- Call forwarding dialog box, voicemail number prefix -->
+    <string name="voicemail_abbreviated">VM:</string>
+    <!-- Mobile network settings screen, setting option name -->
+    <string name="networks">Network operators</string>
+    <!-- Cell Broadcast settings title.  [CHAR LIMIT=50] -->
+    <string name="cell_broadcast_settings">Cell Broadcast settings</string>
+    <!-- Call settings screen title -->
+    <string name="call_settings">Call settings</string>
+    <!-- GSM Call settings screen, setting option name -->
+    <string name="additional_gsm_call_settings">Additional settings</string>
+    <!-- GSM Call settings screen, setting option name, with label identifying the SIM the settings are for. -->
+    <string name="additional_gsm_call_settings_with_label">Additional settings (<xliff:g example="Verizon" id="subscriptionlabel">%s</xliff:g>)</string>
+    <!-- GSM-only Call settings screen, setting option name-->
+    <string name="sum_gsm_call_settings">Additional GSM only call settings</string>
+    <!-- CDMA Call settings screen, setting option name -->
+    <string name="additional_cdma_call_settings">Additional CDMA call settings</string>
+    <!-- CDMA-only Call settings screen, setting option name-->
+    <string name="sum_cdma_call_settings">Additional CDMA only call settings</string>
+    <!-- Call setting screen, nework service setting name -->
+    <string name="labelNwService">Network service settings</string>
+    <!-- Call settings screen, setting option name -->
+    <string name="labelCallerId">Caller ID</string>
+    <!-- Additional call settings screen, setting summary text when the setting is being loaded [CHAR LIMIT=40] -->
+    <string name="sum_loading_settings">Loading settings\u2026</string>
+    <!-- Additional call settings screen, setting summary text when Caller ID is hidden -->
+    <string name="sum_hide_caller_id">Number hidden in outgoing calls</string>
+    <!-- Additional call settings screen, setting summary text when Caller ID is shown -->
+    <string name="sum_show_caller_id">Number displayed in outgoing calls</string>
+    <!-- Additional call settings screen, setting summary text for default Caller ID value -->
+    <string name="sum_default_caller_id">Use default operator settings to display my number in outgoing calls</string>
+    <!-- Additional call settings screen, setting check box name -->
+    <string name="labelCW">Call waiting</string>
+    <!-- Additional call settings screen, setting summary text when call waiting check box is selected -->
+    <string name="sum_cw_enabled">During a call, notify me of incoming calls</string>
+    <!-- Additional call settings screen, setting summary text when call waiting check box is clear -->
+    <string name="sum_cw_disabled">During a call, notify me of incoming calls</string>
+    <!-- Call forwarding settings screen, section heading -->
+    <string name="call_forwarding_settings">Call forwarding settings</string>
+    <!-- Call forwarding settings screen, section heading, with a label identifying the SIM the settings are for. -->
+    <string name="call_forwarding_settings_with_label">Call forwarding settings (<xliff:g example="Verizon" id="subscriptionlabel">%s</xliff:g>)</string>
+    <!-- Call settings screen, setting option name -->
+    <string name="labelCF">Call forwarding</string>
+
+    <!-- Call forwarding settings screen, setting option name -->
+    <string name="labelCFU">Always forward</string>
+    <!-- Call forwarding dialog box, text field label -->
+    <string name="messageCFU">Always use this number</string>
+    <!-- Call forwarding settings screen, setting summary text when forwarding all calls -->
+    <string name="sum_cfu_enabled_indicator">Forwarding all calls</string>
+    <!-- Call forwarding settings screen, setting summary text the Always forward is set -->
+    <string name="sum_cfu_enabled">Forwarding all calls to <xliff:g example="555\u20111212" id="phonenumber">{0}</xliff:g></string>
+    <!-- Call forwarding settings screen, Always forward is enabled but the number is unavailable -->
+    <string name="sum_cfu_enabled_no_number">Number is unavailable</string>
+    <!-- Call forwarding settings screen, setting summary text when Always forward is disabled -->
+    <string name="sum_cfu_disabled">Disabled</string>
+
+    <!-- Call forwarding settings screen, setting option name -->
+    <string name="labelCFB">When busy</string>
+    <!-- Call forwarding dialog box, text field label -->
+    <string name="messageCFB">Number when busy</string>
+    <!-- Call forwarding settings screen, setting summary text when forwarding to specific number when busy -->
+    <string name="sum_cfb_enabled">Forwarding to <xliff:g example="555\u20111212" id="phonenumber">{0}</xliff:g></string>
+    <!-- Call forwarding settings screen, setting summary text when forwarding when busy is disabled -->
+    <string name="sum_cfb_disabled">Disabled</string>
+    <!-- Error message displayed after failing to disable forwarding calls when the phone is busy -->
+    <string name="disable_cfb_forbidden">Your operator doesn\'t support disabling call forwarding when your phone is busy.</string>
+
+    <!-- Call forwarding settings screen, setting option name -->
+    <string name="labelCFNRy">When unanswered</string>
+    <!-- Call forwarding dialog box, text field label -->
+    <string name="messageCFNRy">Number when unanswered</string>
+    <!-- Call forwarding settings screen, setting summary text when forwarding to a specific number when unanswered -->
+    <string name="sum_cfnry_enabled">Forwarding to <xliff:g example="555\u20111212" id="phonenumber">{0}</xliff:g></string>
+    <!-- Call forwarding settings screen, setting summary text when Forward when unanswered is disabled -->
+    <string name="sum_cfnry_disabled">Disabled</string>
+    <!-- Error message displayed after failing to disable forwarding calls when the phone does not answer -->
+    <string name="disable_cfnry_forbidden">Your operator doesn\'t support disabling call forwarding when your phone doesn\'t answer.</string>
+
+    <!-- Call forwarding settings screen, setting option name -->
+    <string name="labelCFNRc">When unreachable</string>
+    <!-- Call forwarding dialog box, text field label -->
+    <string name="messageCFNRc">Number when unreachable</string>
+    <!-- Call forwarding settings screen, setting summary text when forwarding to a specific number when unreachable-->
+    <string name="sum_cfnrc_enabled">Forwarding to <xliff:g example="555\u20111212" id="phonenumber">{0}</xliff:g></string>
+    <!-- Call forwarding settings screen, setting summary text when Forward when unreachable is disabled -->
+    <string name="sum_cfnrc_disabled">Disabled</string>
+    <!-- Error message displayed after failing to disable forwarding calls when the phone is unreachable -->
+    <string name="disable_cfnrc_forbidden">Your carrier doesn\'t support disabling call forwarding when your phone is unreachable.</string>
+
+    <!-- Title of the progress dialog displayed while updating Call settings -->
+    <string name="updating_title">Call settings</string>
+    <!-- Toast in Call settings when asked to launch settings for a secondary user -->
+    <string name="call_settings_admin_user_only">Call settings can only be changed by the admin user.</string>
+    <!-- Title of the "Call settings" settings screen, with a text label identifying which SIM the settings are for. -->
+    <string name="call_settings_with_label">Settings (<xliff:g example="Mock Carrier" id="subscriptionlabel">%s</xliff:g>)</string>
+    <!-- Title of the alert dialog displayed if an error occurs while updating Call settings -->
+    <string name="error_updating_title">Call settings error</string>
+    <!-- Toast in Call settings dialog while settings are being read -->
+    <string name="reading_settings">Reading settings\u2026</string>
+    <!-- Toast in Call settings dialog while settings are being saved -->
+    <string name="updating_settings">Updating settings\u2026</string>
+    <!-- Toast in Call settings dialog while settings are being reverted -->
+    <string name="reverting_settings">Reverting settings\u2026</string>
+    <!-- Status message displayed in the "Call settings error" dialog -->
+    <string name="response_error">Unexpected response from network.</string>
+    <!-- Status message displayed in the "Call settings error" dialog -->
+    <string name="exception_error">Network or SIM card error.</string>
+    <!-- Status message displayed in the "Call settings error" dialog when
+         current SS request is modified to a different request by STK CC -->
+    <string name="stk_cc_ss_to_dial_error">SS request modified to DIAL request.</string>
+    <string name="stk_cc_ss_to_ussd_error">SS request modified to USSD request.</string>
+    <string name="stk_cc_ss_to_ss_error">SS request modified to new SS request.</string>
+
+    <!-- Status message displayed in the "Call settings error" dialog when operation fails due to FDN
+         [CHAR LIMIT=NONE] -->
+    <string name="fdn_check_failure">Your Phone app\'s Fixed Dialing Numbers setting is turned on. As a result, some call\u2011related features aren\'t working.</string>
+    <!-- Status message displayed in the "Call settings error" dialog -->
+    <string name="radio_off_error">Turn on the radio before viewing these settings.</string>
+    <!-- Button label used to dismiss the "Call settings error" dialog -->
+    <string name="close_dialog">OK</string>
+    <!-- Button label used in several settings-related dialogs -->
+    <string name="enable">Turn on</string>
+	<string name="enable_algb">enable</string>
+    <!-- Button label used in several settings-related dialogs -->
+    <string name="disable">Turn off</string>
+	<string name="disable_algb">disable</string>
+    <!-- Button label which indicates the user wants to update a stored
+         phone number; used in several settings-related dialogs -->
+    <string name="change_num">Update</string>
+    <!-- Phone settings: Caller ID preference values -->
+    <string-array name="clir_display_values">
+        <!-- Phone settings "Caller ID" preference option: use the default value -->
+        <item>Network default</item>
+        <!-- Phone settings "Caller ID" preference option: hide outgoing Caller ID info -->
+        <item>Hide number</item>
+        <!-- Phone settings "Caller ID" preference option: show outgoing Caller ID info -->
+        <item>Show number</item>
+    </string-array>
+    <!-- Phone settings: Internal keys used for Caller ID preference values.  DO NOT TRANSLATE. -->
+    <string-array name="clir_values" translatable="false">
+        <!-- Phone settings: Internal key used for Caller ID preference values.  DO NOT TRANSLATE. -->
+        <item><xliff:g>DEFAULT</xliff:g></item>
+        <!-- Phone settings: Internal key used for Caller ID preference values.  DO NOT TRANSLATE. -->
+        <item><xliff:g>HIDE</xliff:g></item>
+        <!-- Phone settings: Internal key used for Caller ID preference values.  DO NOT TRANSLATE. -->
+        <item><xliff:g>SHOW</xliff:g></item>
+    </string-array>
+
+    <string name="preferred_roaming_mode_summary">"Disable"</string>
+     <string name="preferred_roaming_mode_dialogtitle">"Roaming mode"</string>
+     <string name="roaming_mode_warning">"When you allow data roaming, you may incur significant roaming charges."</string>
+     <string-array name="preferred_roaming_mode_choices">
+        <item>"Disable"</item>
+        <item>"National roaming only"</item>
+        <item>"All networks"</item>
+     </string-array>
+	 <string-array name="preferred_roaming_mode_choices_alie">
+        <item>"Disable"</item>
+        <item>"National roaming only"</item>
+        <item>"International roaming"</item>
+     </string-array>
+    <string-array name="preferred_roaming_mode_values">
+        <item>0</item>
+        <item>1</item>
+        <item>2</item>
+     </string-array>
+
+    <!-- voicemail setting strings --><skip/>
+    <!-- Call settings screen, Set voicemail number dialog text -->
+    <string name="vm_changed">Voicemail number changed</string>
+    <!-- Call settings screen, Set voicemail number dialog text -->
+    <string name="vm_change_failed">Couldn\'t change the voicemail number.\nContact your carrier if this problem persists.</string>
+    <!-- Call settings screen, displayed when vm provider supplied forwarding number change fails-->
+    <string name="fw_change_failed">Couldn\'t change the forwarding number.\nContact your carrier if this problem persists.</string>
+    <!-- Call settings screen, displayed when forwarding number read fails-->
+    <string name="fw_get_in_vm_failed">Couldn\'t retrieve and save current forwarding number settings.\nSwitch to the new provider anyway?</string>
+    <!-- Call settings screen, Set voicemail number dialog text -->
+    <string name="no_change">No changes were made.</string>
+    <!-- Call settings screen, "Voicemail" provider setting summary text when no provider is selected -->
+    <string name="sum_voicemail_choose_provider">Choose voicemail service</string>
+    <!-- Call settings screen, "Voicemail" screen, default option - Your Carrier -->
+    <string name="voicemail_default">Your carrier</string>
+
+    <!-- Hint for the old PIN field in the change vociemail PIN dialog -->
+    <string name="vm_change_pin_old_pin">Old PIN</string>
+    <!-- Hint for the new PIN field in the change vociemail PIN dialog -->
+    <string name="vm_change_pin_new_pin">New PIN</string>
+
+    <!-- Message on the dialog when PIN changing is in progress -->
+    <string name="vm_change_pin_progress_message">Please wait.</string>
+    <!-- Error message for the voicemail PIN change if the PIN is too short -->
+    <string name="vm_change_pin_error_too_short">The new PIN is too short</string>
+    <!-- Error message for the voicemail PIN change if the PIN is too long -->
+    <string name="vm_change_pin_error_too_long">The new PIN is too long</string>
+    <!-- Error message for the voicemail PIN change if the PIN is too weak -->
+    <string name="vm_change_pin_error_too_weak">The new PIN is too weak. A strong password should not have continuous sequence or repeated digits.</string>
+    <!-- Error message for the voicemail PIN change if the old PIN entered doesn't match  -->
+    <string name="vm_change_pin_error_mismatch">The old PIN doesn\'t match</string>
+    <!-- Error message for the voicemail PIN change if the new PIN contains invalid character -->
+    <string name="vm_change_pin_error_invalid">The new PIN contains invalid characters</string>
+    <!-- Error message for the voicemail PIN change if operation has failed -->
+    <string name="vm_change_pin_error_system_error">Unable to change PIN</string>
+    <!-- Message to replace the transcription if a visual voicemail message is not supported-->
+    <string name="vvm_unsupported_message_format">Unsupported message type, call <xliff:g example="*86" id="number">%s</xliff:g> to listen.</string>
+
+    <!-- networks setting strings --><skip/>
+    <!-- Mobile network settings screen title -->
+    <string name="mobile_networks">Mobile network settings</string>
+    <!-- Available networks screen title/heading -->
+    <string name="label_available">Available networks</string>
+    <!-- Mobile network settings screen, toast when searching for available networks -->
+    <string name="load_networks_progress">Searching\u2026</string>
+    <!-- Available networks screen, text when no networks are found -->
+    <string name="empty_networks_list">No networks found.</string>
+    <!-- Available networks screen, setting option name -->
+    <string name="search_networks">Search networks</string>
+    <!-- Available networks screen, toast when an error is encountered when searching for networks -->
+    <string name="network_query_error">Error while searching for networks.</string>
+    <!-- Available networks screen, toast when registering on a specific network -->
+    <string name="register_on_network">Registering on <xliff:g id="network">%s</xliff:g>\u2026</string>
+    <!-- Available networks screen, toast when SIM card isn't allowed on a network -->
+    <string name="not_allowed">Your SIM card doesn\'t allow a connection to this network.</string>
+    <!-- Available networks screen, toast when unable to connect to a network temporarily -->
+    <string name="connect_later">Can\'t connect to this network right now. Try again later.</string>
+    <!-- Available networks screen, toast when registered on a specific network -->
+    <string name="registration_done">Registered on network.</string>
+    <!-- Mobile network settings screen setting option summary text -->
+    <string name="sum_carrier_select">Choose a network operator</string>
+    <!-- Available networks screen, setting summary text -->
+    <string name="sum_search_networks">Search for all available networks</string>
+    <!-- Available networks screen, setting option name -->
+    <string name="select_automatically">Choose automatically</string>
+    <!-- Available networks screen, setting summary text -->
+    <string name="sum_select_automatically">Automatically choose preferred network</string>
+    <string name="register_automatically">Automatic registration\u2026</string>
+    <string name="preferred_network_mode_title">Preferred network type</string>
+    <string name="preferred_network_mode_summary">Change the network operating mode</string>
+    <string name="preferred_network_mode_dialogtitle">Preferred network type</string>
+    <!-- Mobile network settings, summary for preferred network mode WCDMA preferred[CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_wcdma_perf_summary">Preferred network mode: WCDMA preferred</string>
+    <!-- Mobile network settings, summary for preferred network mode GSM [CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_gsm_only_summary">Preferred network mode: GSM only</string>
+    <!-- Mobile network settings, summary for preferred network mode WCDMA only [CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_wcdma_only_summary">Preferred network mode: WCDMA only</string>
+    <!-- Mobile network settings, summary for preferred network mode GSM / UMTS [CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_gsm_wcdma_summary">Preferred network mode: GSM / WCDMA</string>
+    <!-- Mobile network settings, summary for preferred network mode CDMA [CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_cdma_summary">Preferred network mode: CDMA</string>
+    <!-- Mobile network settings, summary for preferred network mode CDMA / EvDo [CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_cdma_evdo_summary">Preferred network mode: CDMA / EvDo</string>
+    <!-- Mobile network settings, summary for preferred network mode CDMA only [CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_cdma_only_summary">Preferred network mode: CDMA only</string>
+    <!-- Mobile network settings, summary for preferred network mode EvDo only [CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_evdo_only_summary">Preferred network mode: EvDo only</string>
+    <!-- Mobile network settings, summary for preferred network mode CDMA/EvDo/GSM/WCDMA[CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_cdma_evdo_gsm_wcdma_summary">Preferred network mode: CDMA/EvDo/GSM/WCDMA</string>
+    <!-- Mobile network settings, summary for preferred network mode LTE [CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_lte_summary">Preferred network mode: LTE</string>
+    <!-- Mobile network settings, summary for preferred network mode GSM/WCDMA/LTE [CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_lte_gsm_wcdma_summary">Preferred network mode: GSM/WCDMA/LTE</string>
+    <!-- Mobile network settings, summary for preferred network mode CDMA+LTE/EVDO[CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_lte_cdma_evdo_summary">Preferred network mode: CDMA+LTE/EVDO</string>
+    <!-- Mobile network settings, summary for preferred network mode Global[CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_global_summary">Preferred network mode: Global</string>
+    <!-- Mobile network settings, summary for preferred network mode LTE / WCDMA[CHAR LIMIT=100] -->
+    <string name="preferred_network_mode_lte_wcdma_summary">Preferred network mode: LTE / WCDMA</string>
+     <!-- Mobile network settings, summary for preferred network mode LTE / GSM / UMTS [CHAR LIMIT=100] -->
+     <string name="preferred_network_mode_lte_gsm_umts_summary">Preferred network mode: LTE / GSM / UMTS</string>
+     <!-- Mobile network settings, summary for preferred network mode LTE / CDMA [CHAR LIMIT=100] -->
+     <string name="preferred_network_mode_lte_cdma_summary">Preferred network mode: LTE / CDMA</string>
+     <!-- Mobile network settings, summary for preferred network mode TDSCDMTA [CHAR LIMIT=100] -->
+     <string name="preferred_network_mode_tdscdma_summary">Preferred network mode: TDSCDMA</string>
+
+    <string-array name="preferred_network_mode_choices">
+        <item>"LTE / WCDMA"</item>
+        <item>"LTE"</item>
+        <item>Global</item>
+        <item>"GSM/WCDMA/LTE"</item>
+        <item>CDMA + LTE/EvDo</item>
+        <item>"CDMA/EvDo/GSM/WCDMA"</item>
+        <item>EvDo only</item>
+        <item>CDMA w/o EvDo</item>
+        <item>CDMA/EvDo auto</item>
+        <item>GSM/WCDMA auto</item>
+        <item>WCDMA only</item>
+        <item>GSM only</item>
+        <item>GSM/WCDMA preferred</item>
+    </string-array>
+    <string-array name="preferred_network_mode_values" translatable="false">
+        <item>12</item>
+        <item>11</item>
+        <item>10</item>
+        <item>9</item>
+        <item>8</item>
+        <item>7</item>
+        <item>6</item>
+        <item>5</item>
+        <item>4</item>
+        <item>3</item>
+        <item>2</item>
+        <item>1</item>
+        <item>0</item>
+    </string-array>
+    <!-- Cellular network 4G title [CHAR LIMIT=30] -->
+    <string name="enhanced_4g_lte_mode_title">Enhanced 4G LTE mode</string>
+    <!-- Carrier variant of Enhaced 4G LTE Mode title.  [CHAR LIMIT=50] -->
+    <string name="enhanced_4g_lte_mode_title_variant">Advanced calling</string>
+    <!-- Cellular network 4G summary [CHAR LIMIT=80] -->
+    <string name="enhanced_4g_lte_mode_summary">Use LTE services to improve voice and other communications (recommended)</string>
+
+    <!-- Mobile network settings screen, data enabling checkbox name -->
+    <string name="data_enabled">Data enabled</string>
+    <!-- Mobile network settings screen, setting summary text when check box is not selected (explains what selecting it would do) [CHAR LIMITS=40] -->
+    <string name="data_enable_summary">Allow data usage</string>
+    <!-- Mobile network settings screen, title for alert dialog -->
+    <string name="dialog_alert_title">Attention</string>
+    <!-- Mobile network settings screen, setting check box name -->
+    <string name="roaming">Data roaming</string>
+    <!-- Mobile network settings screen, setting summary text when check box is selected -->
+    <string name="roaming_enable">Connect to data services when roaming</string>
+    <!-- Mobile network settings screen, setting summary text when check box is clear -->
+    <string name="roaming_disable">Connect to data services when roaming</string>
+    <!-- Mobile network settings UI: notification message shown when you
+         lose data connectivity because you're roaming and you have the
+         "data roaming" feature turned off. -->
+    <string name="roaming_reenable_message">You\'ve lost data connectivity because you left your home network with data roaming turned off.</string>
+    <!-- Mobile network settings screen, dialog message when user selects the Data roaming check box 
+    <string name="roaming_warning">You may incur significant charges.</string>-->
+	<string name="roaming_warning">You may incur significant charges.</string>
+	<string name="roaming_warning_digicel_jamaica">You are going to use the roaming data service,any price information please contact your mobile operator.</string>
+	<string name="roaming_warning_cable">Allow data Roaming?</string>
+	<string name="roaming_warning_algb">When you allow data roaming, you may incur significant roaming charges.</string>
+    <!-- Mobile network settings screen, dialog message title when user selects the Data roaming check box -->
+    <string name="roaming_alert_title">Allow data roaming?</string>
+
+    <!-- Mobile network settings screen, title for alert dialog with punc-->
+    <string name="dialog_alert_title_with_punc">"Attention!"</string>
+    <!-- Mobile network settings screen, dialog message when user selects the Data roaming -->
+    <string name="roaming_warning2">"When you allow data roaming, you may incur significant roaming charges. Are you sure to enable allow data roaming?"</string>
+
+    <!-- Mobile network settings screen, roaming option disable -->
+    <string name="roaming_option_disable">"Disable"</string>
+    <!-- Mobile network settings screen, roaming option national roaming only -->
+    <string name="roaming_option_national_roaming_only">"National roaming only"</string>
+    <!-- Mobile network settings screen, roaming option all networks -->
+    <string name="roaming_option_all_networks">"All networks"</string>
+
+    <!-- Mobile network settings screen, show roaming reminder title -->
+    <string name="show_roaming_reminder">"Show roaming reminder"</string>
+    <!-- Mobile network settings screen, show roaming reminder option always -->
+    <string name="show_roaming_reminder_option_always">"Always"</string>
+    <!-- Mobile network settings screen, show roaming reminder option once -->
+    <string name="show_roaming_reminder_option_once">"Once"</string>
+    <!-- Mobile network settings screen, show roaming reminder never -->
+    <string name="show_roaming_reminder_option_never">"Never"</string>
+
+    <!-- Roaming reminder title -->
+    <string name="roaming_reminder_title">"Roaming reminder"</string>
+    <!-- Roaming reminder button continue -->
+    <string name="roaming_reminder_btn_continue">"Continue"</string>
+    <!-- Roaming reminder button disable -->
+    <string name="roaming_reminder_btn_disable">"Disable"</string>
+    <!-- Roaming reminder message single sim -->
+    <string name="roaming_reminder_message_single_sim">"Data roaming is enabled right now. This may incur significant roaming charges. Are you sure you want to continue using data roaming?"</string>
+    <!-- Roaming reminder message multiple sim -->
+    <string name="roaming_reminder_message_multiple_sim">"Data roaming is enabled right now for %s. This may incur significant roaming charges. Are you sure you want to continue using data roaming?"</string>
+
+    <!-- USSD aggregation dialog box: separator strings between messages (new-lines will be added before and after) -->
+    <string name="ussd_dialog_sep" translatable="false">----------</string>
+
+    <string name="gsm_umts_options">GSM/UMTS Options</string>
+    <string name="cdma_options">CDMA Options</string>
+
+    <!-- Screen option on the mobile network settings to go into data usage settings -->
+    <string name="throttle_data_usage">Data usage</string>
+    <!-- Data usage settings screen option for checking the current usage -->
+    <string name="throttle_current_usage">Data used in current period</string>
+    <!-- Data usage settings screen option for time frame-->
+    <string name="throttle_time_frame">Data use period</string>
+    <!-- Data usage settings screen option for throttling rate-->
+    <string name="throttle_rate">Data rate policy</string>
+    <!-- Data usage settings screen option for accessing the carrier website-->
+    <string name="throttle_help">Learn more</string>
+
+    <string name="throttle_status_subtext"><xliff:g id="used">%1$s</xliff:g> (<xliff:g id="used">%2$d</xliff:g>\u066A) of <xliff:g id="used">%3$s</xliff:g> period maximum\nNext period starts in <xliff:g id="used">%4$d</xliff:g> days (<xliff:g id="used">%5$s</xliff:g>)</string>
+
+    <string name="throttle_data_usage_subtext"><xliff:g id="used">%1$s</xliff:g> (<xliff:g id="used">%2$d</xliff:g>\u066A) of <xliff:g id="used">%3$s</xliff:g> period maximum</string>
+
+    <string name="throttle_data_rate_reduced_subtext"><xliff:g id="used">%1$s</xliff:g> maximum exceeded\nData rate reduced to <xliff:g id="used">%2$d</xliff:g> Kb/s</string>
+
+    <string name="throttle_time_frame_subtext"><xliff:g id="used">%1$d</xliff:g>\u066A of cycle elapsed\nNext period starts in <xliff:g id="used">%2$d</xliff:g> days (<xliff:g id="used">%3$s</xliff:g>)</string>
+
+    <string name="throttle_rate_subtext">Data rate reduced to <xliff:g id="used">%1$d</xliff:g> Kb/s if data use limit is exceeded</string>
+
+    <string name="throttle_help_subtext">More information about your carrier\'s mobile network data use policy</string>
+
+    <string name="cell_broadcast_sms">Cell Broadcast SMS</string>
+
+    <string name="enable_disable_cell_bc_sms">Cell Broadcast SMS</string>
+    <string name="cell_bc_sms_enable">Cell Broadcast SMS enabled</string>
+    <string name="cell_bc_sms_disable">Cell Broadcast SMS disabled</string>
+
+    <string name="cb_sms_settings">Cell Broadcast SMS settings</string>
+
+    <string name="enable_disable_emergency_broadcast">Emergency Broadcast</string>
+    <string name="emergency_broadcast_enable">Emergency Broadcast enabled</string>
+    <string name="emergency_broadcast_disable">Emergency Broadcast disabled</string>
+
+    <string name="enable_disable_administrative">Administrative</string>
+    <string name="administrative_enable">Administrative enabled</string>
+    <string name="administrative_disable">Administrative disabled</string>
+
+    <string name="enable_disable_maintenance">Maintenance</string>
+    <string name="maintenance_enable">Maintenance enabled</string>
+    <string name="maintenance_disable">Maintenance disabled</string>
+
+    <string name="general_news_settings">General News</string>
+    <string name="bf_news_settings">Business and Financial News</string>
+    <string name="sports_news_settings">Sports News</string>
+    <string name="entertainment_news_settings">Entertainment News</string>
+
+    <string name="enable_disable_local">Local</string>
+    <string name="local_enable">Local news enabled</string>
+    <string name="local_disable">Local news disabled</string>
+
+    <string name="enable_disable_regional">Regional</string>
+    <string name="regional_enable">Regional news enabled</string>
+    <string name="regional_disable">Regional news disabled</string>
+
+    <string name="enable_disable_national">National</string>
+    <string name="national_enable">National news enabled</string>
+    <string name="national_disable">National news disabled</string>
+
+    <string name="enable_disable_international">International</string>
+    <string name="international_enable">International news enabled</string>
+    <string name="international_disable">International news disabled</string>
+
+    <string name="list_language_title">Language</string>
+    <string name="list_language_summary">Select the news language</string>
+    <string-array name="list_language_entries">
+        <item>English</item>
+        <item>French</item>
+        <item>Spanish</item>
+        <item>Japanese</item>
+        <item>Korean</item>
+        <item>Chinese</item>
+        <item>Hebrew</item>
+    </string-array>
+    <string-array name="list_language_values">
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+        <item>4</item>
+        <item>5</item>
+        <item>6</item>
+        <item>7</item>
+    </string-array>
+    <string name="list_language_dtitle">Languages</string>
+
+    <string name="enable_disable_local_weather">Local weather</string>
+    <string name="local_weather_enable">Local weather enabled</string>
+    <string name="local_weather_disable">Local weather disabled</string>
+
+    <string name="enable_disable_atr">Area traffic report</string>
+    <string name="atr_enable">Area traffic reports enabled</string>
+    <string name="atr_disable">Area traffic reports disabled</string>
+
+    <string name="enable_disable_lafs">Local Airport Flight Schedules</string>
+    <string name="lafs_enable">Local Airport Flight Schedules enabled</string>
+    <string name="lafs_disable">Local Airport Flight Schedules disabled</string>
+
+    <string name="enable_disable_restaurants">Restaurants</string>
+    <string name="restaurants_enable">Restaurants enabled</string>
+    <string name="restaurants_disable">Restaurants disabled</string>
+
+    <string name="enable_disable_lodgings">Lodgings</string>
+    <string name="lodgings_enable">Lodgings enabled</string>
+    <string name="lodgings_disable">Lodgings disabled</string>
+
+    <string name="enable_disable_retail_directory">Retail directory</string>
+    <string name="retail_directory_enable">Retail directory enabled</string>
+    <string name="retail_directory_disable">Retail Directory disabled</string>
+
+    <string name="enable_disable_advertisements">Advertisements</string>
+    <string name="advertisements_enable">Advertisements enabled</string>
+    <string name="advertisements_disable">Advertisements disabled</string>
+
+    <string name="enable_disable_stock_quotes">Stock quotes</string>
+    <string name="stock_quotes_enable">Stock Quotes enabled</string>
+    <string name="stock_quotes_disable">Stock quotes disabled</string>
+
+    <string name="enable_disable_eo">Employment Opportunities</string>
+    <string name="eo_enable">Employment opportunity enabled</string>
+    <string name="eo_disable">Employment opportunity disabled</string>
+
+    <string name="enable_disable_mhh">Medical, Health, and Hospital</string>
+    <string name="mhh_enable">Medical, Health, and Hospital enabled</string>
+    <string name="mhh_disable">Medical, Health, and Hospital disabled</string>
+
+    <string name="enable_disable_technology_news">Technology News</string>
+    <string name="technology_news_enable">Technology News enabled</string>
+    <string name="technology_news_disable">Technology News disabled</string>
+
+    <string name="enable_disable_multi_category">Multi-category</string>
+    <string name="multi_category_enable">Multi\u2011category enabled</string>
+    <string name="multi_category_disable">Multi\u2011category disabled</string>
+
+    <string name="network_lte">LTE (recommended)</string>
+	<string name="network_lte_claro_do">"LTE/WCDMA/GSM(Auto)"</string>
+    <string name="network_4G">4G (recommended)</string>
+	<string name="network_lte_telefonica">"LTE/3G/2G"</string>
+    <string name="network_4G_telefonica">"4G/3G/2G"</string>
+	<string name="network_4G_argentina">"4G/3G/2G(Auto)"</string>
+    <string name="network_4G_claro_peru">"4G/3G/2G"</string>
+	<string name="network_4G_bitel_peru">"4G/3G/2G"</string>
+    <string name="network_lte_cable">"LTE/3G/2G"</string>
+    <string name="network_4G_cable">"LTE/3G/2G"</string>
+	<string name="network_4G_telcel">"4G/3G/2G(Auto)"</string>
+    <string name="network_4G_claro">"4G/3G/2G(Auto)"</string>
+	<string name="network_4G_alwe">"4G/3G/2G(Auto)"</string>
+	<string name="network_4G_avec">"4G/3G/2G"</string>
+	<string name="network_4G_bse">"4G/3G/2G"</string>
+    <string name="network_4G_Brazil">"4G/3G/2G(Auto)"</string>
+    <string name="network_4G_wom">"4G/3G/2G(Auto)"</string>
+	<string name="network_4G_alru">LTE/UMTS/GSM (auto)</string>
+    <string name="network_4G_etecsa_cuba">"LTE/WCDMA/GSM(Auto)"</string>
+	<string name="network_4G_algb">4G(preferred)/3G/2G</string>
+	
+    <string name="network_lte_telcel">"LTE (Auto)"</string>
+	<string name="network_4G_digicel_jamaica">LTE/WCDMA/GSM</string>
+
+    <string name="network_3G" translatable="false">3G/2G(Auto)</string>
+	<string name="network_3G_alru">UMTS/GSM (auto)</string>
+    <string name="network_3G_auto_claro">"3G/2G(Auto)"</string>
+	<string name="network_3G_auto_argentina">"3G/2G(Auto)"</string>
+	<string name="network_3G_auto_claro_peru">"3G/2G(Auto)"</string>
+	<string name="network_3G_auto_bitel_peru">"3G/2G(Auto)"</string>	
+	<string name="network_wcdma_auto_claro_do">"GSM/WCDMA(Auto)"</string>
+    <string name="network_3G_auto_telcel">"3G/2G(Auto)"</string>
+	<string name="network_3G_auto_avec" translatable="false">3G/2G</string>
+    <string name="network_3G_auto_etecsa_cuba">"WCDMA/GSM(Auto)"</string>
+    <string name="network_3G_telcel">"3G only"</string>
+	<string name="network_3G_argentina">"Sólo 3G"</string>
+	<string name="network_3G_claro_peru">"3G only"</string>
+	<string name="network_3G_bitel_peru">"3G only"</string>		
+	<string name="network_3G_alwe">"3G only"</string>	
+    <string name="network_3G_claro">"3G only"</string>
+	<string name="network_3G_digicel_jamaica">WCDMA/GSM</string>
+	<string name="network_3G_algb">3G(preferred)/2G</string>
+	<string name="network_3G_only_algb">3G only</string>
+	<string name="network_3G_only_digicel_jamaica">WCDMA only</string>
+    <string name="network_3G_only_etecsa_cuba">WCDMA only</string>
+	<string name="network_UMTS_alru">UMTS only</string>
+	<string name="network_wcdma_claro_do" translatable="false">WCDMA only</string>
+    <string name="network_2G_telcel">"2G only"</string>
+    <string name="network_2G_argentina">"Sólo 2G"</string>
+    <string name="network_2G_claro">"2G only"</string>
+    <string name="network_2G">"2G only"</string>
+	<string name="network_2G_digicel_jamaica">GSM only</string>
+	<string name="network_2G_avec">"2G"</string>
+	<string name="network_GSM_alru">GSM only</string>
+	<string name="network_gsm_claro_do" translatable="false">GSM only</string>
+    <string name="network_2G_etecsa_cuba">GSM only</string>
+	<string name="network_lte_only_alru" translatable="false">LTE only</string>
+	<string name="network_lte_only_bse" translatable="false">4G only</string>
+    <string name="network_1x" translatable="false">1x</string>
+    <string name="network_global">Global</string>
+
+    <string-array name="enabled_networks_except_gsm_choices" translatable="false">
+        <item>@string/network_lte</item>
+        <item>@string/network_3G</item>
+    </string-array>
+    <string-array name="enabled_networks_except_gsm_4g_choices" translatable="false">
+        <item>@string/network_4G</item>
+        <item>@string/network_3G</item>
+    </string-array>
+    <string-array name="enabled_networks_except_gsm_values" translatable="false">
+        <item>9</item>
+        <item>0</item>
+    </string-array>
+
+    <string-array name="enabled_networks_except_lte_choices" translatable="false">
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+    <string-array name="enabled_networks_except_lte_values" translatable="false">
+        <item>0</item>
+        <item>1</item>
+    </string-array>
+
+    <string-array name="enabled_networks_except_gsm_lte_choices" translatable="false">
+        <item>@string/network_3G</item>
+    </string-array>
+    <string-array name="enabled_networks_except_gsm_lte_values" translatable="false">
+        <item>0</item>
+    </string-array>
+
+    <string-array name="enabled_networks_choices" translatable="false">
+        <item>@string/network_lte</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+    <string-array name="enabled_networks_choices_etecsa_cuba" translatable="false">
+        <item>@string/network_4G_etecsa_cuba</item>
+        <item>@string/network_3G_auto_etecsa_cuba</item>
+        <item>@string/network_3G_only_etecsa_cuba</item>
+        <item>@string/network_2G_etecsa_cuba</item>
+    </string-array>
+    <string-array name="enabled_networks_4g_choices" translatable="false">
+        <item>@string/network_4G</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+    <string-array name="enabled_networks_4g_Brazil" translatable="false">
+        <item>@string/network_4G_Brazil</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+	<string-array name="enabled_networks_4g_argentina" translatable="false">
+        <item>@string/network_4G_argentina</item>
+        <item>@string/network_3G_auto_argentina</item>
+        <item>@string/network_3G_argentina</item>
+		<item>@string/network_2G_argentina</item>
+    </string-array>
+	<string-array name="enabled_networks_4g_claro_peru" translatable="false">
+        <item>@string/network_4G_claro_peru</item>
+        <item>@string/network_3G_auto_claro_peru</item>
+        <item>@string/network_3G_claro_peru</item>
+		<item>@string/network_2G</item>
+    </string-array>
+	<string-array name="enabled_networks_4g_bitel_peru" translatable="false">
+        <item>@string/network_4G_bitel_peru</item>
+        <item>@string/network_3G_auto_bitel_peru</item>
+        <item>@string/network_3G_bitel_peru</item>
+		<item>@string/network_2G</item>
+    </string-array>
+    <string-array name="enabled_networks_4g_wom" translatable="false">
+        <item>@string/network_4G_wom</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+    <string-array name="enabled_networks_choices_claro_do" translatable="false">
+        <item>@string/network_lte_claro_do</item>
+		<item>@string/network_wcdma_auto_claro_do</item>
+        <item>@string/network_wcdma_claro_do</item>
+        <item>@string/network_gsm_claro_do</item>
+    </string-array>
+	
+	<string-array name="enabled_networks_choices_telefonica" translatable="false">
+        <item>@string/network_lte_telefonica</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+    <string-array name="enabled_networks_4g_choices_telefonica" translatable="false">
+        <item>@string/network_4G_telefonica</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+    
+    <string-array name="enabled_networks_choices_cable" translatable="false">
+        <item>@string/network_lte_cable</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+    <string-array name="enabled_networks_4g_choices_cable" translatable="false">
+        <item>@string/network_4G_cable</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+    <string-array name="enabled_networks_4g_choices_claro" translatable="false">
+        <item>@string/network_4G_claro</item>
+        <item>@string/network_3G_auto_claro</item>
+        <item>@string/network_3G_claro</item>
+        <item>@string/network_2G_claro</item>
+    </string-array>
+	<string-array name="enabled_networks_4g_choices_alwe" translatable="false">
+        <item>@string/network_4G_alwe</item>
+        <item>@string/network_3G</item>
+		<item>@string/network_3G_alwe</item>
+        <item>@string/network_2G</item>
+    </string-array>
+	<string-array name="enabled_networks_4g_choices_algb" translatable="false">
+        <item>@string/network_4G_algb</item>
+        <item>@string/network_3G_algb</item>
+		<item>@string/network_3G_only_algb</item>
+    </string-array>
+    <string-array name="enabled_networks_4g_choices_digicel_jamaica" translatable="false">
+        <item>@string/network_4G_digicel_jamaica</item>
+        <item>@string/network_3G_digicel_jamaica</item>
+		<item>@string/network_3G_only_digicel_jamaica</item>
+        <item>@string/network_2G_digicel_jamaica</item>
+    </string-array>	
+	<string-array name="enabled_networks_values_etecsa_cuba" translatable="false">
+                <item>9</item>
+		<item>0</item>
+		<item>2</item>
+                <item>1</item>
+        </string-array>
+	<string-array name="enabled_networks_values_claro_peru" translatable="false">
+        <item>9</item>
+		<item>0</item>
+		<item>2</item>
+        <item>1</item>
+    </string-array>
+	<string-array name="enabled_networks_values_bitel_peru" translatable="false">
+        <item>9</item>
+		<item>0</item>
+		<item>2</item>
+        <item>1</item>
+    </string-array>
+	
+    <string-array name="enabled_networks_values_argentina" translatable="false">
+        <item>9</item>
+		<item>0</item>
+		<item>2</item>
+        <item>1</item>
+    </string-array>
+
+	
+	<string-array name="enabled_networks_values_algb" translatable="false">
+        <item>9</item>
+		<item>0</item>
+		<item>2</item>
+    </string-array>
+    <string-array name="enabled_networks_values_digicel_jamaica" translatable="false">
+        <item>9</item>
+		<item>0</item>
+		<item>2</item>
+        <item>1</item>
+    </string-array>
+	<string-array name="enabled_networks_values_claro_do" translatable="false">
+        <item>9</item>
+		<item>0</item>
+		<item>2</item>
+        <item>1</item>
+
+    </string-array>
+    <string-array name="enabled_networks_values_Claro" translatable="false">
+        <item>9</item>
+        <item>0</item>
+		<item>2</item>
+        <item>1</item>
+    </string-array>
+    <string-array name="enabled_networks_4g_choices_avec" translatable="false">
+        <item>@string/network_4G_avec</item>
+        <item>@string/network_3G_auto_avec</item>
+        <item>@string/network_2G_avec</item>
+    </string-array>
+	
+	<string-array name="enabled_networks_values_alwe" translatable="false">
+        <item>9</item>
+        <item>0</item>
+		<item>2</item>
+        <item>1</item>
+    </string-array>
+    
+    <string-array name="enabled_networks_values" translatable="false">
+        <item>9</item>
+        <item>0</item>
+        <item>1</item>
+    </string-array>
+	
+	<string-array name="enabled_networks_choices_Alru" translatable="false">
+        <item>@string/network_4G_alru</item>
+        <item>@string/network_3G_alru</item>
+		<item>@string/network_lte_only_alru</item>
+		<item>@string/network_UMTS_alru</item>
+        <item>@string/network_GSM_alru</item>
+    </string-array>
+    
+    <string-array name="enabled_networks_choices_claro" translatable="false">
+        <item>@string/network_4G_claro</item>
+        <item>@string/network_3G_auto_claro</item>
+        <item>@string/network_3G_claro</item>
+        <item>@string/network_2G_claro</item>
+    </string-array>
+    
+    <string-array name="enabled_networks_choices_Bse" translatable="false">
+        <item>@string/network_4G_bse</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_GSM_alru</item>
+	<item>@string/network_lte_only_bse</item>
+    </string-array>
+    
+	<string-array name="nabled_networks_4g_choices_Alru" translatable="false">
+        <item>@string/network_4G_alru</item>
+        <item>@string/network_3G_alru</item>
+		<item>@string/network_lte_only_alru</item>
+		<item>@string/network_UMTS_alru</item>
+        <item>@string/network_GSM_alru</item>
+    </string-array>
+	<string-array name="enabled_networks_values_Alru" translatable="false">
+        <item>9</item>
+        <item>0</item>
+        <item>11</item>
+		<item>2</item>
+        <item>1</item>
+	</string-array>
+
+<string-array name="enabled_networks_values_Bse" translatable="false">
+        <item>9</item>
+        <item>0</item>
+        <item>1</item>
+        <item>11</item>
+	</string-array>
+ <string-array name="enabled_networks_choices_telcel" translatable="false">
+        <item>@string/network_lte_telcel</item>
+        <item>@string/network_3G_auto_telcel</item>
+        <item>@string/network_3G_telcel</item>
+        <item>@string/network_2G_telcel</item>
+    </string-array>
+    
+    <string-array name="enabled_networks_4g_choices_telcel" translatable="false">
+        <item>@string/network_4G_telcel</item>
+        <item>@string/network_3G_auto_telcel</item>
+        <item>@string/network_3G_telcel</item>
+        <item>@string/network_2G_telcel</item>
+    </string-array>
+    <string-array name="enabled_networks_values_telcel" translatable="false">
+        <item>9</item>
+        <item>0</item>
+        <item>2</item>
+        <item>1</item>
+    </string-array>
+    <string-array name="enabled_networks_cdma_choices" translatable="false">
+        <item>@string/network_lte</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_1x</item>
+        <item>@string/network_global</item>
+    </string-array>
+    <string-array name="enabled_networks_cdma_values" translatable="false">
+        <item>8</item>
+        <item>4</item>
+        <item>5</item>
+        <item>10</item>
+    </string-array>
+
+    <string-array name="enabled_networks_cdma_no_lte_choices" translatable="false">
+        <item>@string/network_3G</item>
+        <item>@string/network_1x</item>
+    </string-array>
+    <string-array name="enabled_networks_cdma_no_lte_values" translatable="false">
+        <item>4</item>
+        <item>5</item>
+    </string-array>
+
+    <string-array name="enabled_networks_cdma_only_lte_choices" translatable="false">
+        <item>@string/network_lte</item>
+        <item>@string/network_global</item>
+    </string-array>
+    <string-array name="enabled_networks_cdma_only_lte_values" translatable="false">
+        <item>8</item>
+        <item>10</item>
+    </string-array>
+
+    <string-array name="enabled_networks_tdscdma_choices" translatable="false">
+        <item>@string/network_lte</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+    <string-array name="enabled_networks_tdscdma_values" translatable="false">
+        <item>22</item>
+        <item>18</item>
+        <item>1</item>
+    </string-array>
+
+    <!-- CDMA System select strings -->
+    <!-- Mobile network settings screen, setting option name -->
+    <string name="cdma_system_select_title">System select</string>
+    <!-- Mobile network settings screen, setting summary text -->
+    <string name="cdma_system_select_summary">Change the CDMA roaming mode</string>
+    <!-- System select settings screen title -->
+    <string name="cdma_system_select_dialogtitle">System select</string>
+    <string-array name="cdma_system_select_choices">
+        <!-- System select dialog screen, setting option name -->
+        <item>Home only</item>
+        <!-- Remove the following option "Affiliated Networks" from the option list -->
+        <!-- <item>Affiliated Networks</item> -->
+        <!-- System select dialog screen, setting option name -->
+        <item>Automatic</item>
+    </string-array>
+    <string-array name="cdma_system_select_values" translatable="false">
+        <!-- Do not translate. -->
+        <item>0</item>
+        <!-- Remove the following value "1" which corresponds to "Affiliated Networks" above -->
+        <!-- <item>"1"</item>  -->
+        <!-- Do not translate. -->
+        <item>2</item>
+    </string-array>
+
+    <string name="cdma_subscription_title">CDMA subscription</string>
+    <string name="cdma_subscription_summary">Switch between RUIM/SIM and NV</string>
+    <string name="cdma_subscription_dialogtitle">subscription</string>
+    <string-array name="cdma_subscription_choices">
+        <item>"RUIM/SIM"</item>
+        <item>"NV"</item>
+    </string-array>
+    <string-array name="cdma_subscription_values">
+        <item>0</item>
+        <item>1</item>
+    </string-array>
+    <!-- Preference title with which users can activate CDMA network [CHAR LIMIT=30] -->
+    <string name="cdma_activate_device">Activate device</string>
+    <!-- Preference title for launching an account manager page for prepaid LTE [CHAR LIMIT=30] -->
+    <string name="cdma_lte_data_service">Set up data service</string>
+
+    <!-- A menu item in "Mobile network settings" that allows the user to update the phone
+         with mobile operator specific settings. [CHAR LIMIT=25] -->
+    <string name="carrier_settings_title">Operator settings</string>
+
+    <!-- FDN settings strings -->
+    <!-- Label for "Fixed Dialing Number" settings in call settings. -->
+    <string name="fdn">Fixed Dialling Numbers</string>
+    <!-- Title for "Fixed Dialing Number" settings, with a label to identify the SIM the settings
+        apply to. -->
+    <string name="fdn_with_label">Fixed dialling numbers (<xliff:g example="Verizon" id="subscriptionlabel">%s</xliff:g>)</string>
+
+    <!-- Call settings screen, button label that takes you to the Fixed Dialing Number management screen -->
+    <string name="manage_fdn_list">FDN list</string>
+    <!-- Title for settings screen to manage Fixed Dialing Number contacts, with a label to identify
+         the SIM the settings apply to. -->
+    <string name="fdn_list_with_label">FDN list (<xliff:g example="Verizon" id="subscriptionlabel">%s</xliff:g>)</string>
+    <!-- Call settings screen, preference item label -->
+    <string name="fdn_activation">FDN activation</string>
+    <!-- Call settings setting option name when FDN is enabled -->
+    <string name="fdn_enabled">Fixed Dialling Numbers are enabled</string>
+    <!-- Call settings setting option name  when FDN is disabled-->
+    <string name="fdn_disabled">Fixed Dialling Numbers are disabled</string>
+    <!-- Call settings screen, setting option name -->
+    <string name="enable_fdn">Enable FDN</string>
+    <!-- Call settings screen, setting option name -->
+    <string name="disable_fdn">Disable FDN</string>
+    <!-- Call settings screen, setting option name -->
+    <string name="change_pin2">Change PIN2</string>
+    <!-- Call settings screen, setting option name when FDN is enabled -->
+    <string name="enable_fdn_ok">Disable FDN</string>
+    <!-- Call settings screen, setting option name when FDN is disabled -->
+    <string name="disable_fdn_ok">Enable FDN</string>
+    <!-- Call settings screen, setting summary text -->
+    <string name="sum_fdn">Manage Fixed Dialling Numbers</string>
+    <!-- Call settings, FDN screen, setting option name -->
+    <string name="sum_fdn_change_pin">Change PIN for FDN access</string>
+    <!-- Call settings, FDN screen, setting option name -->
+    <string name="sum_fdn_manage_list">Manage phone number list</string>
+    <!-- Voice privacy on CDMA is an added layer of voice encryption. Theoretically, it would be harder to break in to a phone call with this feature enabled. -->
+    <string name="voice_privacy">Voice privacy</string>
+    <string name="voice_privacy_summary">Enable enhanced privacy mode</string>
+    <string name="tty_mode_option_title">TTY mode</string>
+    <string name="tty_mode_option_summary">Set TTY mode</string>
+    <string name="auto_retry_mode_title">Auto-retry</string>
+    <string name="auto_retry_mode_summary">Enable Auto\u2011retry mode</string>
+    <!-- TTY Mode change is NOT allowed during a video call -->
+    <string name="tty_mode_not_allowed_video_call">TTY Mode change is not allowed during a video call</string>
+    <!-- FDN list screen: menu item label -->
+    <string name="menu_add">Add contact</string>
+    <!-- FDN list screen: menu item label -->
+    <string name="menu_edit">Edit contact</string>
+    <!-- FDN list screen: menu item label -->
+    <string name="menu_delete">Delete contact</string>
+
+    <!-- FDN related strings -->
+    <!-- Label for PIN2 entry screen -->
+    <string name="get_pin2">Type PIN2</string>
+    <!-- "Edit FDN Contact" screen: Label for the "name" text field -->
+    <string name="name">Name</string>
+    <!-- "Edit FDN Contact" screen: Label for the "number" text field -->
+    <string name="number">Number</string>
+    <!-- "Edit FDN Contact" screen: Button label for "save" action -->
+    <string name="save">Save</string>
+    <!-- Title of "Edit FDN Contact" screen for a new contact -->
+    <string name="add_fdn_contact">Add fixed dialling number</string>
+    <!-- "Edit FDN Contact" screen: status message displayed in a popup (toast) -->
+    <string name="adding_fdn_contact">Adding fixed dialling number…</string>
+    <!-- "Edit FDN Contact" screen: status message displayed in a popup (toast) -->
+    <string name="fdn_contact_added">Fixed dialling number added.</string>
+    <!-- Title of "Edit FDN Contact" screen when editing an already-existing contact -->
+    <string name="edit_fdn_contact">Edit fixed dialling number</string>
+    <!-- "Edit FDN Contact" screen: status message displayed in a popup (toast) -->
+    <string name="updating_fdn_contact">Updating fixed dialling number…</string>
+    <!-- "Edit FDN Contact" screen: status message displayed in a popup (toast) -->
+    <string name="fdn_contact_updated">Fixed dialling number updated.</string>
+    <!-- Title of "Delete FDN Contact" screen -->
+    <string name="delete_fdn_contact">Delete fixed dialling number</string>
+    <!-- "Delete FDN Contact" screen: status message displayed in a popup (toast) -->
+    <string name="deleting_fdn_contact">Deleting fixed dialling number…</string>
+    <!-- "Delete FDN Contact" screen: status message displayed in a popup (toast) -->
+    <string name="fdn_contact_deleted">Fixed dialling number deleted.</string>
+    <!-- FDN settings: error message displayed in a popup (toast) -->
+    <string name="pin2_invalid">FDN wasn\'t updated because you typed an incorrect PIN.</string>
+    <!-- FDN settings: error message displayed in a popup (toast) -->
+    <string name="fdn_invalid_number">FDN wasn\'t updated because the number can\'t exceed 20 digits.</string>
+    <!-- FDN settings: error message displayed in a popup (toast), when the entered
+         FDN number was inappropriate, OR, PIN2 the user entered was incorrect.
+         Because of API restriction, there's no way to determine which is the exact
+         cause of the failure.
+         [CHAR LIMIT=NONE] -->
+    <string name="pin2_or_fdn_invalid">FDN wasn\'t updated. The PIN2 was incorrect, or the phone number was rejected, or FDN list is full.</string>
+    <!-- FDN settings: error message displayed in a popup (toast) -->
+    <string name="fdn_failed">FDN operation failed.</string>
+
+    <!-- ADN related strings -->
+    <!-- Placeholder text displayed while loading the list of SIM contacts -->
+    <string name="simContacts_emptyLoading">Reading from SIM card\u2026</string>
+    <!-- Call settings, string that appears on FDN contact list when there are no contacts on the SIM. -->
+    <string name="simContacts_empty">No contacts on your SIM card.</string>
+    <!-- Call settings: title of the dialog that lets you select contacts from the SIM. -->
+    <string name="simContacts_title">Select contacts to import</string>
+    <!-- Appears when user tries to import contacts in SIM during airplane mode [CHAR LIMIT=NONE] -->
+    <string name="simContacts_airplaneMode">Turn off aeroplane mode to import contacts from the SIM card.</string>
+
+    <!-- SIM PIN strings -->
+    <!-- Title of "Enable/disable SIM PIN" screen -->
+    <string name="enable_pin">Enable/disable SIM PIN</string>
+    <!-- Title of "Change SIM PIN" screen -->
+    <string name="change_pin">Change SIM PIN</string>
+    <!-- SIM PIN screen: label for PIN entry widget -->
+    <string name="enter_pin_text">SIM PIN:</string>
+    <!-- SIM PIN screen: label for PIN entry widget -->
+    <string name="oldPinLabel">Old PIN</string>
+    <!-- SIM PIN screen: label for PIN entry widget -->
+    <string name="newPinLabel">New PIN</string>
+    <!-- SIM PIN screen: label for PIN entry widget -->
+    <string name="confirmPinLabel">Confirm new PIN</string>
+    <!-- SIM PIN screen: error message -->
+    <string name="badPin">The old PIN you typed isn\'t correct. Try again.</string>
+    <!-- SIM PIN screen: error message -->
+    <string name="mismatchPin">The PINs you typed don\'t match. Try again.</string>
+    <!-- SIM PIN screen: error message when PIN is too short or too long -->
+    <string name="invalidPin">Type a PIN that is 4\u20118 digits.</string>
+    <!-- Title of "Disable SIM PIN" screen -->
+    <string name="disable_sim_pin">Clear SIM PIN</string>
+    <!-- Title of "Enable SIM PIN" screen -->
+    <string name="enable_sim_pin">Set SIM PIN</string>
+    <!-- SIM PIN screen: progress message displayed while enabling -->
+    <string name="enable_in_progress">Setting PIN\u2026</string>
+    <!-- SIM PIN screen: status message displayed in a popup (toast) -->
+    <string name="enable_pin_ok">PIN set</string>
+    <!-- SIM PIN screen: status message displayed in a popup (toast) -->
+    <string name="disable_pin_ok">PIN cleared</string>
+    <!-- SIM PIN screen: error message displayed in a popup (toast) -->
+    <string name="pin_failed">PIN incorrect</string>
+    <!-- SIM PIN screen: status message displayed in a popup (toast) -->
+    <string name="pin_changed">PIN updated</string>
+    <!-- SIM PIN screen: error message displayed in a dialog -->
+    <string name="puk_requested">Password incorrect. PIN now blocked. PUK requested.</string>
+
+    <!-- SIM PIN2 strings -->
+    <!-- SIM PIN2 screen: label for PIN entry widget -->
+    <string name="enter_pin2_text">PIN2</string>
+    <!-- SIM PIN2 screen: label for PIN entry widget -->
+    <string name="oldPin2Label">Old PIN2</string>
+    <!-- SIM PIN2 screen: label for PIN entry widget -->
+    <string name="newPin2Label">New PIN2</string>
+    <!-- SIM PIN2 screen: label for PIN entry widget -->
+    <string name="confirmPin2Label">Confirm new PIN2</string>
+    <!-- SIM PIN2 screen: error message -->
+    <string name="badPuk2">PUK2 incorrect. Try again.</string>
+    <!-- SIM PIN2 screen: error message -->
+    <string name="badPin2">Old PIN2 incorrect. Try again.</string>
+    <!-- SIM PIN2 screen: error message -->
+    <string name="mismatchPin2">PIN2s don\'t match. Try again.</string>
+    <!-- SIM PIN2 screen: error message -->
+    <string name="invalidPin2">Enter a PIN2 that is 4\u20118 digits.</string>
+    <!-- SIM PIN2 screen: error message -->
+    <string name="invalidPuk2">Enter a PUK2 that is 8 digits.</string>
+    <!-- SIM PIN2 screen: status message displayed in a popup (toast) -->
+    <string name="pin2_changed">PIN2 updated</string>
+    <!-- SIM PIN2 screen: label for PUK2 entry widget -->
+    <string name="label_puk2_code">Enter PUK2 code</string>
+    <!-- SIM PIN2 screen: error message displayed in a dialog -->
+    <string name="fdn_enable_puk2_requested">Password incorrect. PIN2 now Blocked. To try again, change PIN 2.</string>
+    <!-- SIM PIN2 screen: error message displayed in a dialog -->
+    <string name="puk2_requested">Password incorrect. SIM now locked. Enter PUK2.</string>
+    <!-- SIM PIN2 screen: error message -->
+    <string name="puk2_blocked">PUK2 is permanently blocked.</string>
+    <!-- SIM PIN2 screen: error message -->
+    <string name="pin2_attempts">\nYou have <xliff:g id="number">%d</xliff:g> remaining attempts.</string>
+    <!-- SIM PIN screen: status message displayed in a popup (toast) -->
+    <string name="pin2_unblocked">PIN2 no longer blocked</string>
+    <!-- SIM PIN screen: error message shown in dialog when there is a network or sim error.
+         [CHAR LIMIT=NONE] -->
+    <string name="pin2_error_exception">Network or SIM card error</string>
+
+    <!-- SIM PIN screen: button label -->
+    <string name="doneButton">Done</string>
+
+    <!-- Used in FakePhoneActivity test code.  DO NOT TRANSLATE. -->
+    <string name="fake_phone_activity_phoneNumber_text" translatable="false">(650) 555-1234</string>
+    <!-- Used in FakePhoneActivity test code.  DO NOT TRANSLATE. -->
+    <string name="fake_phone_activity_infoText_text" translatable="false">Incoming phone number</string>
+    <!-- Used in FakePhoneActivity test code.  DO NOT TRANSLATE. -->
+    <string name="fake_phone_activity_placeCall_text" translatable="false">Fake Incoming Call</string>
+
+    <!-- Call settings screen, Set voicemail dialog title -->
+    <string name="voicemail_settings_number_label">Voicemail number</string>
+
+    <!-- Card titles -->
+    <!-- In-call screen: status label for a call in the "dialing" state -->
+    <string name="card_title_dialing">Dialling</string>
+    <!-- In-call screen: status label for a re-dialing call -->
+    <string name="card_title_redialing">Redialling</string>
+    <!-- In-call screen: status label for a conference call -->
+    <string name="card_title_conf_call">Conference call</string>
+    <!-- In-call screen: status label for an incoming call -->
+    <string name="card_title_incoming_call">Incoming call</string>
+    <!-- In-call screen: status label displayed briefly after a call ends -->
+    <string name="card_title_call_ended">Call ended</string>
+    <!-- In-call screen: status label for call that's on hold -->
+    <string name="card_title_on_hold">On hold</string>
+    <!-- In-call screen: status label for a call that's in the process of hanging up -->
+    <string name="card_title_hanging_up">Hanging up</string>
+    <!-- In-call screen: status label for a call that's in CDMA flash mode -->
+    <string name="card_title_in_call">In call</string>
+
+    <!-- Notification strings -->
+    <!-- Label for the "Voicemail" notification item, when expanded. -->
+    <string name="notification_voicemail_title">New voicemail</string>
+    <!-- Label for the expanded "Voicemail" notification item,
+         including a count of messages. -->
+    <string name="notification_voicemail_title_count">New voicemail (<xliff:g id="count">%d</xliff:g>)</string>
+    <!-- Message displayed in the "Voicemail" notification item, allowing the user
+         to dial the indicated number. -->
+    <string name="notification_voicemail_text_format">Dial <xliff:g id="voicemail_number">%s</xliff:g></string>
+    <!-- Message displayed in the "Voicemail" notification item,
+         indicating that there's no voicemail number available -->
+    <string name="notification_voicemail_no_vm_number">Voicemail number unknown</string>
+    <!-- Label for the "No service" notification item, when expanded. -->
+    <string name="notification_network_selection_title">No service</string>
+    <!-- Label for the expanded "No service" notification item, including the
+         operator name set by user -->
+    <string name="notification_network_selection_text">Selected network (<xliff:g id="operator_name">%s</xliff:g>) unavailable</string>
+
+    <!-- In-call screen: call failure message displayed in an error dialog. [CHAR_LIMIT=NONE] -->
+    <string name="incall_error_power_off">Turn off aeroplane mode to make a call.</string>
+    <!-- In-call screen: call failure message displayed in an error dialog when in airplane mode, WFC is enabled, not wifi-only, and not connected to wireless networks. [CHAR_LIMIT=NONE] -->
+    <string name="incall_error_power_off_wfc">Turn off aeroplane mode or connect to a wireless network to make a call.</string>
+    <!-- In-call screen: call failure message displayed when the user attempts to make a non-emergency call while the phone is in emergency callback mode. -->
+    <string name="incall_error_ecm_emergency_only">Exit emergency callback mode to make a non\u2011emergency call.</string>
+    <!-- In-call screen: call failure message displayed in an error dialog.
+         This string is currently unused (see comments in InCallScreen.java.) -->
+    <string name="incall_error_emergency_only">Not registered on network.</string>
+    <!-- In-call screen: call failure message displayed in an error dialog -->
+    <string name="incall_error_out_of_service">Mobile network not available</string>
+    <!-- In-call screen: call failure message displayed in an error dialog -->
+    <string name="incall_error_out_of_service_wfc">Mobile network is not available. Connect to a wireless network to make a call.</string>
+    <!-- In-call screen: call failure message displayed in an error dialog -->
+    <string name="incall_error_no_phone_number_supplied">To place a call, enter a valid number.</string>
+    <!-- In-call screen: call failure message displayed in an error dialog -->
+    <string name="incall_error_call_failed">Couldn\'t call</string>
+    <!-- In-call screen: call failure message displayed in an error dialog -->
+    <string name="incall_error_cannot_add_call">Call cannot be added at this time.</string>
+    <!-- In-call screen: status message displayed in a dialog when starting an MMI -->
+    <string name="incall_status_dialed_mmi">Starting MMI sequence\u2026</string>
+    <!-- In-call screen: message displayed in an error dialog -->
+    <string name="incall_error_supp_service_unknown">Service not supported</string>
+    <!-- In-call screen: message displayed in an error dialog -->
+    <string name="incall_error_supp_service_switch">Can\'t switch calls</string>
+    <!-- In-call screen: message displayed in an error dialog -->
+    <string name="incall_error_supp_service_separate">Can\'t separate call</string>
+    <!-- In-call screen: message displayed in an error dialog -->
+    <string name="incall_error_supp_service_transfer">Can\'t transfer</string>
+    <!-- In-call screen: message displayed in an error dialog -->
+    <string name="incall_error_supp_service_conference">Unable to conference calls.</string>
+    <!-- In-call screen: message displayed in an error dialog -->
+    <string name="incall_error_supp_service_reject">Can\'t reject call</string>
+    <!-- In-call screen: message displayed in an error dialog -->
+    <string name="incall_error_supp_service_hangup">Can\'t release call(s).</string>
+    <!-- In-call screen: message displayed in an error dialog -->
+    <string name="incall_error_supp_service_hold">Can\'t hold calls.</string>
+    <!-- In-call screen: call failure message displayed in an error dialog when WFC is enabled, is wifi-only, and not connected to a wireless network. [CHAR_LIMIT=NONE] -->
+    <string name="incall_error_wfc_only_no_wireless_network">Connect to a wireless network to make a call.</string>
+    <!-- In-call screen: call failure message displayed in an error dialog when the user is connected to a wireless network, but wifi calling is turned off. [CHAR_LIMIT=NONE] -->
+    <string name="incall_error_promote_wfc">Enable Wi\u2011Fi calling to make a call</string>
+
+    <!-- Dialog title for the "radio enable" UI for emergency calls -->
+    <string name="emergency_enable_radio_dialog_title">Emergency call</string>
+    <!-- Status message for the "radio enable" UI for emergency calls -->
+    <string name="emergency_enable_radio_dialog_message">Turning on radio\u2026</string>
+    <!-- Status message for the "radio enable" UI for emergency calls -->
+    <string name="emergency_enable_radio_dialog_retry">No service. Trying again\u2026</string>
+    <!-- Toast message shown when user tries to turn on airplane mode while in an emergency call -->
+    <string name="radio_off_during_emergency_call">Cannot enter aeroplane mode during an emergency call.</string>
+
+    <!-- Dialer text on Emergency Dialer -->
+    <!-- Emergency dialer: message displayed in an error dialog -->
+    <string name="dial_emergency_error">Can\'t call. <xliff:g id="non_emergency_number">%s</xliff:g> is not an emergency number.</string>
+    <!-- Emergency dialer: message displayed in an error dialog -->
+    <string name="dial_emergency_empty_error">Can\'t call. Dial an emergency number.</string>
+
+    <!-- Displayed in the text entry box in the dialer when in landscape mode to guide the user
+         to dial using the physical keyboard -->
+    <string name="dialerKeyboardHintText">Use keyboard to dial</string>
+
+    <!-- Text for the onscreen "Hold" button -->
+    <string name="onscreenHoldText">Hold</string>
+    <!-- Text for the onscreen "End call" button -->
+    <string name="onscreenEndCallText">End</string>
+    <!-- Text for the onscreen "Show Dialpad" button -->
+    <string name="onscreenShowDialpadText">Dialpad</string>
+    <!-- Text for the onscreen "Mute" button -->
+    <string name="onscreenMuteText">Mute</string>
+    <!-- Text for the onscreen "Add call" button -->
+    <string name="onscreenAddCallText">Add call</string>
+    <!-- Text for the onscreen "Merge calls" button -->
+    <string name="onscreenMergeCallsText">Merge calls</string>
+    <!-- Text for the onscreen "Swap calls" button -->
+    <string name="onscreenSwapCallsText">Swap</string>
+    <!-- Text for the onscreen "Manage calls" button -->
+    <string name="onscreenManageCallsText">Manage calls</string>
+    <!-- Text for the onscreen "Manage conference" button [CHAR LIMIT=20] -->
+    <string name="onscreenManageConferenceText">Manage conference</string>
+    <!-- Text for the onscreen "Audio" button that lets you switch
+         between speaker / bluetooth / earpiece [CHAR LIMIT=10] -->
+    <string name="onscreenAudioText">Audio</string>
+    <!-- Text for the onscreen "Video call" button used to change a voice call
+         to a video call. [CHAR LIMIT=10] -->
+    <string name="onscreenVideoCallText">Video call</string>
+
+    <!-- Menu item label in SIM Contacts: Import a single contact entry from the SIM card -->
+    <string name="importSimEntry">Import</string>
+    <!-- Menu item label in SIM Contacts: Import all contact entries from the SIM card -->
+    <string name="importAllSimEntries">Import all</string>
+    <!-- SIM Contacts: status message displayed while importing card -->
+    <string name="importingSimContacts">Importing SIM contacts</string>
+    <!-- Import a single contact entry from contacts to the SIM card -->
+    <string name="importToFDNfromContacts">Import from contacts</string>
+    <string name="fdnContactsTooMore">There are more than 10 contacts in FDN list, please remove some before adding.</string>
+
+    <!-- Message shown when a single contact is imported from SIM card -->
+    <string name="singleContactImportedMsg">Imported contact</string>
+    <!-- Message shown when a single contact could not be imported from SIM card -->
+    <string name="failedToImportSingleContactMsg">Couldn\'t import contact</string>
+
+    <!-- Hearing aid settings -->
+    <string name="hac_mode_title">Hearing aids</string>
+    <string name="hac_mode_summary">Turn on hearing aid compatibility</string>
+
+    <!-- Service option entries.  -->
+    <string-array name="tty_mode_entries">
+        <item>TTY Off</item>
+        <item>TTY Full</item>
+        <item>"TTY HCO"</item>
+        <item>"TTY VCO"</item>
+    </string-array>
+
+    <!-- Do not translate. -->
+    <string-array name="tty_mode_values" translatable="false">
+        <!-- Do not translate. -->
+        <item>0</item>
+        <!-- Do not translate. -->
+        <item>1</item>
+        <!-- Do not translate. -->
+        <item>2</item>
+        <!-- Do not translate. -->
+        <item>3</item>
+    </string-array>
+
+    <!-- Dtmf tones settings -->
+    <!-- Title for the DTMF Tones options displayed in Call Settings -->
+    <string name="dtmf_tones_title">DTMF tones</string>
+    <!-- Summary for the DTMF Tones options displayed in Call Settings -->
+    <string name="dtmf_tones_summary">Set the length of DTMF tones</string>
+    <!-- Options displayed as part of DTMF Tones in Call Settings -->
+    <string-array name="dtmf_tone_entries">
+      <item>Normal</item>
+      <item>Long</item>
+    </string-array>
+    <!-- Do not translate. -->
+    <string-array name="dtmf_tone_values" translatable="false">
+       <item>0</item>
+       <item>1</item>
+    </string-array>
+
+    <!-- Title for the dialog used to display CDMA DisplayInfo -->
+    <string name="network_info_message">Network message</string>
+    <!-- Title for the dialog used to display a network error message to the user -->
+    <string name="network_error_message">Error message</string>
+
+    <!-- OTA-specific strings -->
+    <!-- Title shown on OTA screen -->
+    <string name="ota_title_activate">Activate your phone</string>
+    <!-- Message displayed on the OTA activation screen. -->
+    <string name="ota_touch_activate">A special call needs to be made to activate your phone service. \n\nAfter pressing \u201CActivate\u201D, listen to the instructions provided to activate your phone.</string>
+    <!-- Title shown during Hands Free Activation -->
+    <string name="ota_hfa_activation_title">Activating...</string>
+    <!-- Message shown during the hands free activation screen of the setup wizard. -->
+    <string name="ota_hfa_activation_dialog_message">The phone is activating your mobile data service.\n\nThis can take up to 5 minutes.</string>
+    <!-- Title of skip activation dialog -->
+    <string name="ota_skip_activation_dialog_title">Skip activation\?</string>
+    <!-- Message displayed in skip activation dialog  -->
+    <string name="ota_skip_activation_dialog_message">If you skip activation, you can\'t place calls or connect to mobile data networks (though you can connect to Wi\u2011Fi networks). Until you activate your phone, you are asked to activate it each time you turn it on.</string>
+    <!-- Label shown on dialog button that allows the user to skip activation -->
+    <string name="ota_skip_activation_dialog_skip_label">Skip</string>
+
+    <!-- Button label within the OTA activation screen -->
+    <string name="ota_activate">Activate</string>
+    <!-- Title text shown when phone activation is successful -->
+    <string name="ota_title_activate_success">Phone is activated.</string>
+    <!-- Title text shown on screen where activation fails -->
+    <string name="ota_title_problem_with_activation">Problem with activation</string>
+    <!-- Message displayed on the OTA "listening" screen. This message
+         needs to be kept at 2 lines or less to be sure that there's
+         enough room for the dialpad. [CHAR LIMIT=80] -->
+    <string name="ota_listen">Follow the spoken instructions until you hear that activation is complete.</string>
+
+    <!-- Button label within the OTA listen screen -->
+    <string name="ota_speaker">Speaker</string>
+    <!-- String to be displayed on OTA listen screen once user has selected the
+         correct option to begin provisioning -->
+    <string name="ota_progress">Programming your phone\u2026</string>
+    <!-- String to display within the OTA Fail Notice dialog -->
+    <string name="ota_failure">Couldn\'t program your phone</string>
+    <!-- String to be displayed on the OTA Fail/Success screen upon successful provisioning -->
+    <string name="ota_successful">Your phone is now activated. It may take up to 15 minutes for service to start.</string>
+    <!-- String to be displayed on the OTA Fail/Success screen upon unsuccessful provisioning -->
+    <string name="ota_unsuccessful">Your phone didn\'t activate. \nYou may need to find an area with better coverage (near a window, or outside). \n\nTry again or call customer service for more options.</string>
+    <!-- String to display within the OTA SPC Fail Notice dialog -->
+    <string name="ota_spc_failure">EXCESS SPC FAILURES</string>
+    <!-- Button label in OTA listen screen that cancels activation and goes to the previous screen -->
+    <string name="ota_call_end">Back</string>
+    <!-- Button label shown on OTA error screen to allow the user to try again -->
+    <string name="ota_try_again">Try again</string>
+    <!-- Button label shown on OTA screens that have a next screen -->
+    <string name="ota_next">Next</string>
+
+    <!-- Emergency Callback Mode (ECM) -->
+    <string name="ecm_exit_dialog">"EcmExitDialog"</string>
+    <!-- ECM: Status bar notification message -->
+    <string name="phone_entered_ecm_text">Entered Emergency Callback Mode</string>
+    <!-- ECM: Notification title -->
+    <string name="phone_in_ecm_notification_title">Emergency Callback Mode</string>
+    <!-- ECM: Notification body -->
+    <string name="phone_in_ecm_call_notification_text">Data connection disabled</string>
+    <plurals name="phone_in_ecm_notification_time">
+        <!-- number of minutes is one -->
+        <item quantity="one">No data connection for <xliff:g id="count">%s</xliff:g> minute</item>
+        <!-- number of minutes is not equal to one -->
+        <item quantity="other">No data connection for <xliff:g id="count">%s</xliff:g> minutes</item>
+    </plurals>
+    <!-- ECM: Dialog box message for exiting from the notifications screen -->
+    <plurals name="alert_dialog_exit_ecm">
+        <!-- number of minutes is one -->
+        <item quantity="one">The phone will be in Emergency Callback mode for <xliff:g id="count">%s</xliff:g> minute. While in this mode no apps using a data connection can be used. Do you want to exit now?</item>
+        <!-- number of minutes is not equal to one -->
+        <item quantity="other">The phone will be in Emergency Callback mode for <xliff:g id="count">%s</xliff:g> minutes. While in this mode no applications using a data connection can be used. Do you want to exit now?</item>
+    </plurals>
+    <!-- ECM: Dialog box message for exiting from any other app -->
+    <plurals name="alert_dialog_not_avaialble_in_ecm">
+        <!-- number of minutes is one -->
+        <item quantity="one">The selected action isn\'t available while in the Emergency Callback mode. The phone will be in this mode for <xliff:g id="count">%s</xliff:g> minute. Do you want to exit now?</item>
+        <!-- number of minutes is not equal to one -->
+        <item quantity="other">The selected action isn\'t available while in the Emergency Callback mode. The phone will be in this mode for <xliff:g id="count">%s</xliff:g> minutes. Do you want to exit now?</item>
+    </plurals>
+    <!-- ECM: Dialog box message while in emergency call -->
+    <string name="alert_dialog_in_ecm_call">The selected action isn\'t available while in an emergency call.</string>
+    <!-- ECM: Progress text -->
+    <string name="progress_dialog_exiting_ecm">Exiting Emergency Callback mode</string>
+    <!-- ECM: ECM exit dialog choice -->
+    <string name="alert_dialog_yes">Yes</string>
+    <!-- ECM: ECM exit dialog choice -->
+    <string name="alert_dialog_no">No</string>
+    <!-- ECM: ECM exit dialog choice -->
+    <string name="alert_dialog_dismiss">Dismiss</string>
+
+    <!-- For incoming calls, this is a string we can get from a CDMA network instead of
+         the actual phone number, to indicate there's no number present.  DO NOT TRANSLATE. -->
+    <string-array name="absent_num" translatable="false">
+        <item>ABSENT NUMBER</item>
+        <item>ABSENTNUMBER</item>
+    </string-array>
+
+    <!-- Preference for Voicemail service provider under "Voicemail" settings.
+         [CHAR LIMIT=40] -->
+    <string name="voicemail_provider">Service</string>
+
+    <!-- Preference for Voicemail setting of each provider.
+         [CHAR LIMIT=40] -->
+    <string name="voicemail_settings">Setup</string>
+
+    <!-- String to display in voicemail number summary when no voicemail num is set -->
+    <string name="voicemail_number_not_set">&lt;not set&gt;</string>
+
+    <!-- Title displayed above settings coming after voicemail in the call features screen -->
+    <string name="other_settings">Other call settings</string>
+
+    <!-- Title displayed in the overlay when a call is placed using a 3rd party provider.
+         [CHAR LIMIT=40] -->
+    <string name="calling_via_template">Calling via <xliff:g id="provider_name">%s</xliff:g></string>
+
+    <!-- Use this as a default to describe the contact photo; currently for screen readers through accessibility. -->
+    <string name="contactPhoto">contact photo</string>
+    <!-- Use this to describe the separate conference call button; currently for screen readers through accessibility. -->
+    <string name="goPrivate">go private</string>
+    <!--  Use this to describe the select contact button in EditPhoneNumberPreference; currently for screen readers through accessibility. -->
+    <string name="selectContact">select contact</string>
+
+    <!-- Dialog title to notify user that Voice calling is not supported
+         on this device. [CHAR LIMIT=40] -->
+    <string name="not_voice_capable">Voice calling not supported</string>
+
+    <!-- String describing the Dial ImageButton
+
+         Used by AccessibilityService to announce the purpose of the button.
+         [CHAR LIMIT=NONE]
+    -->
+    <string name="description_dial_button">dial</string>
+
+    <!-- Title for the vibration settings for voicemail notifications [CHAR LIMIT=40] -->
+    <string msgid="8731372580674292759" name="voicemail_notification_vibrate_when_title">Vibrate</string>
+    <!-- Dialog title for the vibration settings for voice mail notifications [CHAR LIMIT=40]-->
+    <string msgid="8995274609647451109" name="voicemail_notification_vibarte_when_dialog_title">Vibrate</string>
+
+    <!-- Visual voicemail on/off title [CHAR LIMIT=40] -->
+    <string name="voicemail_visual_voicemail_switch_title">Visual Voicemail</string>
+
+    <!-- Voicemail change PIN dialog title [CHAR LIMIT=40] -->
+    <string name="voicemail_set_pin_dialog_title">Set PIN</string>
+    <!-- Voicemail change PIN dialog title [CHAR LIMIT=40] -->
+    <string name="voicemail_change_pin_dialog_title">Change PIN</string>
+
+    <!-- Voicemail ringtone title. The user clicks on this preference to select
+         which sound to play when a voicemail notification is received.
+         [CHAR LIMIT=30] -->
+    <string name="voicemail_notification_ringtone_title">Sound</string>
+
+    <!-- The default value value for voicemail notification. -->
+    <string name="voicemail_notification_vibrate_when_default" translatable="false">never</string>
+
+    <!-- Actual values used in our code for voicemail notifications. DO NOT TRANSLATE -->
+    <string-array name="voicemail_notification_vibrate_when_values" translatable="false">
+        <item>always</item>
+        <item>silent</item>
+        <item>never</item>
+    </string-array>
+
+    <!-- Title for the category "ringtone", which is shown above ringtone and vibration
+         related settings.
+         [CHAR LIMIT=30] -->
+    <string name="preference_category_ringtone">Ringtone &amp; Vibrate</string>
+
+    <!-- String resource for the font-family to use for the call setting activity's title
+         Do not translate. -->
+    <string name="call_settings_title_font_family">"sans-serif-light"</string>
+
+    <!-- Label for PSTN connection service. -->
+    <string name="pstn_connection_service_label">Built\u2011in SIM cards</string>
+
+    <!-- Label for enabling video calling. -->
+    <string name="enable_video_calling_title">Turn on video calling</string>
+
+    <!-- Message for dialog shown when the user tries to turn on video calling but enhanced 4G LTE
+         is disabled. They have to turn on Enhanced 4G LTE capability in network settings first. -->
+    <string name="enable_video_calling_dialog_msg">To turn on video calling, you need to enable Enhanced 4G LTE Mode in network settings.</string>
+
+    <!-- Label for action button in dialog which opens mobile network settings, for video calling
+         setting. -->
+    <string name="enable_video_calling_dialog_settings">Network settings</string>
+
+    <!-- Label for close button in dialog, for video calling setting. -->
+    <string name="enable_video_calling_dialog_close">Close</string>
+
+    <!-- Strings used in Settings->Sim cards for each installed Sim. -->
+    <string name="sim_label_emergency_calls">Emergency calls</string>
+    <string name="sim_description_emergency_calls">Emergency calling only</string>
+    <string name="sim_description_default">SIM card, slot: <xliff:g id="slot_id">%s</xliff:g></string>
+
+    <!-- Title for activity to control accessibility settings such as TTY mode and hearing aid
+         compatability. [CHAR LIMIT=40] -->
+    <string name="accessibility_settings_activity_title">Accessibility</string>
+
+    <!-- Configuration setting for world mode Format is <true;GID if any to be checked>-->
+    <string name="config_world_mode" translatable="false"/>
+
+    <!-- Status hint label for an incoming call over a wifi network which has not been accepted yet.
+         [CHAR LIMIT=25] -->
+    <string name="status_hint_label_incoming_wifi_call">Wi\u2011Fi call from</string>
+    <!-- Status hint label for a call being made over a wifi network. [CHAR LIMIT=25] -->
+    <string name="status_hint_label_wifi_call">Wi\u2011Fi call</string>
+
+    <!-- DO NOT TRANSLATE. Internal key for a voicemail notification preference. -->
+    <string name="voicemail_notification_ringtone_key">voicemail_notification_ringtone_key</string>
+    <!-- DO NOT TRANSLATE. Internal key for a voicemail notification preference. -->
+    <string name="voicemail_notification_vibrate_key">voicemail_notification_vibrate_key</string>
+    <!-- DO NOT TRANSLATE. Internal key for a visual voicemail preference. -->
+    <string name="voicemail_visual_voicemail_key">voicemail_visual_voicemail_key</string>
+    <!-- DO NOT TRANSLATE. Internal key for a voicemail change pin preference. -->
+    <string name="voicemail_change_pin_key">voicemail_change_pin_key</string>
+    <!-- DO NOT TRANSLATE. Internal key for tty mode preference. -->
+    <string name="tty_mode_key">button_tty_mode_key</string>
+    <!-- DO NOT TRANSLATE. Internal key for a voicemail notification preference. -->
+    <string name="wifi_calling_settings_key">button_wifi_calling_settings_key</string>
+
+    <!-- Hint appearing below a selected action on the emergency dialer telling user to tap again to execute the action [CHAR LIMIT=NONE] -->
+    <string name="emergency_action_launch_hint">Touch again to open</string>
+
+    <!-- Strings for IMAP -->
+
+    <!-- String used in place of a message that could not be properly decoded (e.g. bad base64
+       data was received.) [CHAR LIMIT=none] -->
+    <string name="message_decode_error">There was an error while decoding the message.</string>
+
+    <!-- Call failure reason: SIM card and roaming capabilities have already been activated. [CHAR LIMIT=NONE]-->
+    <string name="callFailed_cdma_activation">A SIM card has activated your service and updated your phone\'s roaming capabilities.</string>
+
+    <!-- Call failure reason: Cannot add a call because there are already too many active calls. -->
+    <string name="callFailed_cdma_call_limit">There are too many active calls. End or merge existing calls before placing a new one. </string>
+
+    <!-- The title for the change voicemail PIN activity -->
+    <string name="change_pin_title">Change voicemail PIN</string>
+    <!-- The label for the continue button in change voicemail PIN activity -->
+    <string name="change_pin_continue_label">Continue</string>
+    <!-- The label for the cancel button in change voicemail PIN activity -->
+    <string name="change_pin_cancel_label">Cancel</string>
+    <!-- The label for the ok button in change voicemail PIN activity -->
+    <string name="change_pin_ok_label">Ok</string>
+    <!-- The title for the enter old pin step in change voicemail PIN activity -->
+    <string name="change_pin_enter_old_pin_header">Confirm your old PIN</string>
+    <!-- The hint for the enter old pin step in change voicemail PIN activity -->
+    <string name="change_pin_enter_old_pin_hint">Enter your voicemail PIN to continue</string>
+    <!-- The title for the enter new pin step in change voicemail PIN activity -->
+    <string name="change_pin_enter_new_pin_header">Set a new PIN</string>
+    <!-- The hint for the enter new pin step in change voicemail PIN activity -->
+    <string name="change_pin_enter_new_pin_hint">PIN must be <xliff:g example="4" id="min">%1$d</xliff:g>\u2011<xliff:g example="7" id="max">%2$d</xliff:g> digits</string>
+    <!-- The title for the confirm new pin step in change voicemail PIN activity -->
+    <string name="change_pin_confirm_pin_header">Confirm your PIN</string>
+    <!-- The error message for th confirm new pin step in change voicemail PIN activity, if the pin doen't match the one previously entered -->
+    <string name="change_pin_confirm_pins_dont_match">PINs don\'t match</string>
+    <!-- The toast to show after the voicemail PIN has been successfully changed -->
+    <string name="change_pin_succeeded">Voicemail PIN updated</string>
+    <!-- The error message to show if the server reported an error while attempting to change the voicemail PIN -->
+    <string name="change_pin_system_error">Unable to set PIN</string>
+    <string name="dialog_voicemail_not_ready_message">To set up voicemail, go to Menu &gt; Settings.</string>
+    <string name="fdn_list_dialog_call">Dial contact</string>
+    <string name="fdn_list_dialog_edit">Edit contact</string>
+    <string name="fdn_list_dialog_send">Send message to contact</string>
+    <string name="menu_sendSMS">Text contact</string>
+	
+	<string name="attention_dialog_title">"Attention. LTE only mode is going to be activated"</string>
+	<string name="attention_dialog_text">"Are you sure you want to select LTE only network mode? \n In this mode ONLY data services will be available and you will NOT be able to: \n • make emergency calls, \n • make and receive voice calls, \n • send and receive SMS, \n • send USSD. \n If you want to select LTE only network mode, tap OK, if you prefer to keep current network mode, tap Cancel."</string>
+	<string name="attention_dialog_ok">"OK"</string>
+	<string name="attention_dialog_cancel">"Cancel"</string>
+	
+	<string name="attention_Notification_panel_title">"LTE only mode is activated"</string>
+	<string name="attention_Notification_panel_text">"ONLY data services are available for your device. You CANNOT make emergency calls, make and receive voice calls, send and receive SMS and send USSD. If you want to deactivate this mode, just tap this message."</string>
+	
+    <!-- whj add for  entel -->
+    <string name="network_4G_entel">"4G/3G/2G(Auto)"</string>
+    <string-array name="enabled_networks_4g_choices_entel" translatable="false">
+        <item>@string/network_4G_entel</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+    <!-- whj end -->
+    
+    <!-- sw add for  cnt -->
+    <string name="network_4G_cnt">"4G/3G/2G(Auto)"</string>
+    <string-array name="enabled_networks_4g_choices_cnt" translatable="false">
+        <item>@string/network_4G_cnt</item>
+        <item>@string/network_3G</item>
+        <item>@string/network_2G</item>
+    </string-array>
+    <!-- sw end --> 
+	    <!-- wxr add for  NaOpenMarket -->
+    <string name="network_3G_na" translatable="false">3G</string>
+	<string name="network_2G_na" translatable="false">2G</string>
+    <string-array name="enabled_networks_4g_choices_na" translatable="false">
+        <item>@string/network_lte</item>
+        <item>@string/network_3G_na</item>
+        <item>@string/network_2G_na</item>
+    </string-array>
+    <!-- wxr end -->
+	<!-- wxr add for  alie -->
+    <string name="network_4G_alie">"4G/3G/2G(Auto)"</string>
+	<string name="network_3G_alie">"3G/2G(Auto)"</string>
+    <string-array name="enabled_networks_4g_choices_alie" translatable="false">
+        <item>@string/network_4G_alie</item>
+        <item>@string/network_3G_alie</item>
+        <item>@string/network_3G_alwe</item>
+		<item>@string/network_2G</item>
+    </string-array>
+	<string-array name="enabled_networks_values_alie" translatable="false">
+        <item>9</item>
+        <item>0</item>
+		<item>2</item>
+        <item>1</item>
+    </string-array>
+    <string name="sum_search_available_networks">Searching for all available networks will disconnect the data connection which is in use. Continue?</string>
+	<!-- wxr end -->
+	
+	<string name="emergency_calls_only">Emergency calls only</string>
+</resources>
\ No newline at end of file
