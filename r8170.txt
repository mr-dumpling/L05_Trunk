Index: vendor/branch/5058I_ALRU/packages/apps/Contacts/Android.mk
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Contacts/Android.mk	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/apps/Contacts/Android.mk	(revision 8170)
@@ -45,7 +45,7 @@
     libphonenumber
 
 LOCAL_PACKAGE_NAME := Contacts
-LOCAL_CERTIFICATE := shared
+LOCAL_CERTIFICATE := platform
 LOCAL_PRIVILEGED_MODULE := true
 
 LOCAL_PROGUARD_FLAG_FILES := proguard.flags
Index: vendor/branch/5058I_ALRU/packages/apps/Contacts/AndroidManifest.xml
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Contacts/AndroidManifest.xml	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/apps/Contacts/AndroidManifest.xml	(revision 8170)
@@ -17,6 +17,7 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
     package="com.android.contacts"
+	android:sharedUserId="android.uid.system"
     android:versionCode="10422"
     android:versionName="1.4.22">
 
Index: vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/quickcontact/QuickContactActivity.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/quickcontact/QuickContactActivity.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/quickcontact/QuickContactActivity.java	(revision 8170)
@@ -1,3216 +0,0 @@
-/*
-* Copyright (C) 2014 MediaTek Inc.
-* Modification based on code covered by the mentioned copyright
-* and/or permission notice(s).
-*/
-/*
- * Copyright (C) 2009 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.contacts.quickcontact;
-
-import android.accounts.Account;
-import android.animation.ArgbEvaluator;
-import android.animation.ObjectAnimator;
-import android.app.Activity;
-import android.app.Fragment;
-import android.app.LoaderManager.LoaderCallbacks;
-import android.app.SearchManager;
-import android.content.ActivityNotFoundException;
-import android.content.ContentUris;
-import android.content.ContentValues;
-import android.content.Context;
-import android.content.Intent;
-import android.content.Loader;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.content.res.ColorStateList;
-import android.content.res.Configuration;
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.Color;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffColorFilter;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.os.Trace;
-import android.provider.CalendarContract;
-import android.provider.ContactsContract;
-import android.provider.ContactsContract.CommonDataKinds.Email;
-import android.provider.ContactsContract.CommonDataKinds.Event;
-import android.provider.ContactsContract.CommonDataKinds.GroupMembership;
-import android.provider.ContactsContract.CommonDataKinds.Identity;
-import android.provider.ContactsContract.CommonDataKinds.Im;
-import android.provider.ContactsContract.CommonDataKinds.Nickname;
-import android.provider.ContactsContract.CommonDataKinds.Note;
-import android.provider.ContactsContract.CommonDataKinds.Organization;
-import android.provider.ContactsContract.CommonDataKinds.Phone;
-import android.provider.ContactsContract.CommonDataKinds.Relation;
-import android.provider.ContactsContract.CommonDataKinds.SipAddress;
-import android.provider.ContactsContract.CommonDataKinds.StructuredPostal;
-import android.provider.ContactsContract.CommonDataKinds.Website;
-import android.provider.ContactsContract.Contacts;
-import android.provider.ContactsContract.Data;
-import android.provider.ContactsContract.Directory;
-import android.provider.ContactsContract.DisplayNameSources;
-import android.provider.ContactsContract.DataUsageFeedback;
-import android.provider.ContactsContract.Intents;
-import android.provider.ContactsContract.QuickContact;
-import android.provider.ContactsContract.RawContacts;
-import android.support.v4.content.ContextCompat;
-import android.support.v7.graphics.Palette;
-import android.support.v7.widget.CardView;
-import android.telecom.PhoneAccount;
-import android.telecom.TelecomManager;
-import android.text.BidiFormatter;
-import android.text.Spannable;
-import android.text.SpannableString;
-import android.text.TextDirectionHeuristics;
-import android.text.TextUtils;
-import android.view.ContextMenu;
-import android.view.ContextMenu.ContextMenuInfo;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.View.OnCreateContextMenuListener;
-import android.view.WindowManager;
-import android.view.accessibility.AccessibilityEvent;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-import android.widget.LinearLayout;
-import android.widget.Toast;
-import android.widget.Toolbar;
-
-import com.android.contacts.ContactSaveService;
-import com.android.contacts.ContactsActivity;
-import com.android.contacts.ContactsApplication;
-import com.android.contacts.NfcHandler;
-import com.android.contacts.R;
-
-import com.android.contacts.activities.ContactEditorBaseActivity;
-import com.android.contacts.activities.PeopleActivity;
-import com.android.contacts.common.CallUtil;
-import com.android.contacts.common.ClipboardUtils;
-import com.android.contacts.common.Collapser;
-import com.android.contacts.common.ContactPhotoManager;
-import com.android.contacts.common.ContactsUtils;
-import com.android.contacts.common.activity.RequestDesiredPermissionsActivity;
-import com.android.contacts.common.activity.RequestPermissionsActivity;
-import com.android.contacts.common.compat.CompatUtils;
-import com.android.contacts.common.compat.EventCompat;
-import com.android.contacts.common.compat.MultiWindowCompat;
-import com.android.contacts.common.dialog.CallSubjectDialog;
-import com.android.contacts.common.editor.SelectAccountDialogFragment;
-import com.android.contacts.common.interactions.TouchPointManager;
-import com.android.contacts.common.lettertiles.LetterTileDrawable;
-import com.android.contacts.common.list.ShortcutIntentBuilder;
-import com.android.contacts.common.list.ShortcutIntentBuilder.OnShortcutIntentCreatedListener;
-import com.android.contacts.common.logging.Logger;
-import com.android.contacts.common.logging.ScreenEvent.ScreenType;
-import com.android.contacts.common.model.AccountTypeManager;
-import com.android.contacts.common.model.Contact;
-import com.android.contacts.common.model.ContactLoader;
-import com.android.contacts.common.model.RawContact;
-import com.android.contacts.common.model.account.AccountType;
-import com.android.contacts.common.model.account.AccountWithDataSet;
-import com.android.contacts.common.model.dataitem.DataItem;
-import com.android.contacts.common.model.dataitem.DataKind;
-import com.android.contacts.common.model.dataitem.EmailDataItem;
-import com.android.contacts.common.model.dataitem.EventDataItem;
-import com.android.contacts.common.model.dataitem.GroupMembershipDataItem;
-import com.android.contacts.common.model.dataitem.ImDataItem;
-import com.android.contacts.common.model.dataitem.NicknameDataItem;
-import com.android.contacts.common.model.dataitem.NoteDataItem;
-import com.android.contacts.common.model.dataitem.OrganizationDataItem;
-import com.android.contacts.common.model.dataitem.PhoneDataItem;
-import com.android.contacts.common.model.dataitem.RelationDataItem;
-import com.android.contacts.common.model.dataitem.SipAddressDataItem;
-import com.android.contacts.common.model.dataitem.StructuredNameDataItem;
-import com.android.contacts.common.model.dataitem.StructuredPostalDataItem;
-import com.android.contacts.common.model.dataitem.WebsiteDataItem;
-import com.android.contacts.common.model.ValuesDelta;
-import com.android.contacts.common.util.Constants;
-import com.android.contacts.common.util.ImplicitIntentsUtil;
-import com.android.contacts.common.util.DateUtils;
-import com.android.contacts.common.util.MaterialColorMapUtils;
-import com.android.contacts.common.util.MaterialColorMapUtils.MaterialPalette;
-import com.android.contacts.common.util.UriUtils;
-import com.android.contacts.common.util.ViewUtil;
-import com.android.contacts.common.vcard.VCardCommonArguments;
-import com.android.contacts.detail.ContactDisplayUtils;
-import com.android.contacts.editor.AggregationSuggestionEngine;
-import com.android.contacts.editor.AggregationSuggestionEngine.Suggestion;
-import com.android.contacts.editor.ContactEditorFragment;
-import com.android.contacts.editor.EditorIntents;
-import com.android.contacts.interactions.CalendarInteractionsLoader;
-import com.android.contacts.interactions.CallLogInteractionsLoader;
-import com.android.contacts.interactions.ContactDeletionInteraction;
-import com.android.contacts.interactions.ContactInteraction;
-import com.android.contacts.interactions.JoinContactsDialogFragment;
-import com.android.contacts.interactions.JoinContactsDialogFragment.JoinContactsListener;
-import com.android.contacts.interactions.SmsInteractionsLoader;
-import com.android.contacts.quickcontact.ExpandingEntryCardView.Entry;
-import com.android.contacts.quickcontact.ExpandingEntryCardView.EntryContextMenuInfo;
-import com.android.contacts.quickcontact.ExpandingEntryCardView.EntryTag;
-import com.android.contacts.quickcontact.ExpandingEntryCardView.ExpandingEntryCardViewListener;
-import com.android.contacts.quickcontact.WebAddress.ParseException;
-import com.android.contacts.util.ImageViewDrawableSetter;
-import com.android.contacts.util.PhoneCapabilityTester;
-import com.android.contacts.util.SchedulingUtils;
-import com.android.contacts.util.StructuredPostalUtils;
-import com.android.contacts.widget.MultiShrinkScroller;
-import com.android.contacts.widget.MultiShrinkScroller.MultiShrinkScrollerListener;
-import com.android.contacts.widget.QuickContactImageView;
-import com.android.contactsbind.HelpUtils;
-
-import com.google.common.collect.Lists;
-import com.mediatek.contacts.ExtensionManager;
-import com.mediatek.contacts.GlobalEnv;
-import com.mediatek.contacts.quickcontact.QuickContactUtils;
-import com.mediatek.contacts.ContactsSystemProperties;
-import com.mediatek.contacts.model.dataitem.ImsCallDataItem;
-import com.mediatek.contacts.simcontact.SimCardUtils;
-import com.mediatek.contacts.util.AccountTypeUtils;
-import com.mediatek.contacts.util.Log;
-
-import java.lang.SecurityException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Calendar;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
-import java.util.concurrent.ConcurrentHashMap;
-
-/**
- * Mostly translucent {@link Activity} that shows QuickContact dialog. It loads
- * data asynchronously, and then shows a popup with details centered around
- * {@link Intent#getSourceBounds()}.
- */
-public class QuickContactActivity extends ContactsActivity
-        implements AggregationSuggestionEngine.Listener, JoinContactsListener {
-
-    /**
-     * QuickContacts immediately takes up the full screen. All possible information is shown.
-     * This value for {@link android.provider.ContactsContract.QuickContact#EXTRA_MODE}
-     * should only be used by the Contacts app.
-     */
-    public static final int MODE_FULLY_EXPANDED = 4;
-
-    /** Used to pass the screen where the user came before launching this Activity. */
-    public static final String EXTRA_PREVIOUS_SCREEN_TYPE = "previous_screen_type";
-
-    private static final String TAG = "QuickContact";
-
-    private static final String KEY_THEME_COLOR = "theme_color";
-    private static final String KEY_IS_SUGGESTION_LIST_COLLAPSED = "is_suggestion_list_collapsed";
-    private static final String KEY_SELECTED_SUGGESTION_CONTACTS = "selected_suggestion_contacts";
-    private static final String KEY_PREVIOUS_CONTACT_ID = "previous_contact_id";
-    private static final String KEY_SUGGESTIONS_AUTO_SELECTED = "suggestions_auto_seleted";
-
-    private static final int ANIMATION_STATUS_BAR_COLOR_CHANGE_DURATION = 150;
-    private static final int REQUEST_CODE_CONTACT_EDITOR_ACTIVITY = 1;
-    private static final int SCRIM_COLOR = Color.argb(0xC8, 0, 0, 0);
-    private static final int REQUEST_CODE_CONTACT_SELECTION_ACTIVITY = 2;
-    private static final String MIMETYPE_SMS = "vnd.android-dir/mms-sms";
-
-    /** This is the Intent action to install a shortcut in the launcher. */
-    private static final String ACTION_INSTALL_SHORTCUT =
-            "com.android.launcher.action.INSTALL_SHORTCUT";
-
-    @SuppressWarnings("deprecation")
-    private static final String LEGACY_AUTHORITY = android.provider.Contacts.AUTHORITY;
-
-    private static final String MIMETYPE_GPLUS_PROFILE =
-            "vnd.android.cursor.item/vnd.googleplus.profile";
-    private static final String GPLUS_PROFILE_DATA_5_ADD_TO_CIRCLE = "addtocircle";
-    private static final String GPLUS_PROFILE_DATA_5_VIEW_PROFILE = "view";
-    private static final String MIMETYPE_HANGOUTS =
-            "vnd.android.cursor.item/vnd.googleplus.profile.comm";
-    private static final String HANGOUTS_DATA_5_VIDEO = "hangout";
-    private static final String HANGOUTS_DATA_5_MESSAGE = "conversation";
-    private static final String CALL_ORIGIN_QUICK_CONTACTS_ACTIVITY =
-            "com.android.contacts.quickcontact.QuickContactActivity";
-
-    /**
-     * The URI used to load the the Contact. Once the contact is loaded, use Contact#getLookupUri()
-     * instead of referencing this URI.
-     */
-    private Uri mLookupUri;
-    private String[] mExcludeMimes;
-    private int mExtraMode;
-    private String mExtraPrioritizedMimeType;
-    private int mStatusBarColor;
-    private boolean mHasAlreadyBeenOpened;
-    private boolean mOnlyOnePhoneNumber;
-    private boolean mOnlyOneEmail;
-
-    private QuickContactImageView mPhotoView;
-    private ExpandingEntryCardView mContactCard;
-    /// M:[for RCS-e] show Joyn Card(rcs-e plugin) under ContactCard.
-    private ExpandingEntryCardView mJoynCard;
-    private ExpandingEntryCardView mNoContactDetailsCard;
-    private ExpandingEntryCardView mRecentCard;
-    private ExpandingEntryCardView mAboutCard;
-
-    // Suggestion card.
-    private CardView mCollapsedSuggestionCardView;
-    private CardView mExpandSuggestionCardView;
-    private View mCollapasedSuggestionHeader;
-    private TextView mCollapsedSuggestionCardTitle;
-    private TextView mExpandSuggestionCardTitle;
-    private ImageView mSuggestionSummaryPhoto;
-    private TextView mSuggestionForName;
-    private TextView mSuggestionContactsNumber;
-    private LinearLayout mSuggestionList;
-    private Button mSuggestionsCancelButton;
-    private Button mSuggestionsLinkButton;
-    private boolean mIsSuggestionListCollapsed;
-    private boolean mSuggestionsShouldAutoSelected = true;
-    private long mPreviousContactId = 0;
-
-    private MultiShrinkScroller mScroller;
-    private SelectAccountDialogFragmentListener mSelectAccountFragmentListener;
-    private AsyncTask<Void, Void, Cp2DataCardModel> mEntriesAndActionsTask;
-    private AsyncTask<Void, Void, Void> mRecentDataTask;
-
-    private AggregationSuggestionEngine mAggregationSuggestionEngine;
-    private List<Suggestion> mSuggestions;
-
-    private TreeSet<Long> mSelectedAggregationIds = new TreeSet<>();
-    /**
-     * The last copy of Cp2DataCardModel that was passed to {@link #populateContactAndAboutCard}.
-     */
-    private Cp2DataCardModel mCachedCp2DataCardModel;
-    /**
-     *  This scrim's opacity is controlled in two different ways. 1) Before the initial entrance
-     *  animation finishes, the opacity is animated by a value animator. This is designed to
-     *  distract the user from the length of the initial loading time. 2) After the initial
-     *  entrance animation, the opacity is directly related to scroll position.
-     */
-    private ColorDrawable mWindowScrim;
-    private boolean mIsEntranceAnimationFinished;
-    private MaterialColorMapUtils mMaterialColorMapUtils;
-    private boolean mIsExitAnimationInProgress;
-    private boolean mHasComputedThemeColor;
-
-    /**
-     * Used to stop the ExpandingEntry cards from adjusting between an entry click and the intent
-     * being launched.
-     */
-    private boolean mHasIntentLaunched;
-
-    private Contact mContactData;
-    private ContactLoader mContactLoader;
-    private PorterDuffColorFilter mColorFilter;
-    private int mColorFilterColor;
-
-    private final ImageViewDrawableSetter mPhotoSetter = new ImageViewDrawableSetter();
-
-    /**
-     * {@link #LEADING_MIMETYPES} is used to sort MIME-types.
-     *
-     * <p>The MIME-types in {@link #LEADING_MIMETYPES} appear in the front of the dialog,
-     * in the order specified here.</p>
-     */
-    private static final List<String> LEADING_MIMETYPES = Lists.newArrayList(
-            Phone.CONTENT_ITEM_TYPE, SipAddress.CONTENT_ITEM_TYPE, Email.CONTENT_ITEM_TYPE,
-            StructuredPostal.CONTENT_ITEM_TYPE);
-
-    private static final List<String> SORTED_ABOUT_CARD_MIMETYPES = Lists.newArrayList(
-            Nickname.CONTENT_ITEM_TYPE,
-            // Phonetic name is inserted after nickname if it is available.
-            // No mimetype for phonetic name exists.
-            Website.CONTENT_ITEM_TYPE,
-            Organization.CONTENT_ITEM_TYPE,
-            Event.CONTENT_ITEM_TYPE,
-            Relation.CONTENT_ITEM_TYPE,
-            Im.CONTENT_ITEM_TYPE,
-            GroupMembership.CONTENT_ITEM_TYPE,
-            Identity.CONTENT_ITEM_TYPE,
-            Note.CONTENT_ITEM_TYPE);
-
-    private static final BidiFormatter sBidiFormatter = BidiFormatter.getInstance();
-
-    /** Id for the background contact loader */
-    private static final int LOADER_CONTACT_ID = 0;
-
-    private static final String KEY_LOADER_EXTRA_PHONES =
-            QuickContactActivity.class.getCanonicalName() + ".KEY_LOADER_EXTRA_PHONES";
-
-    /** Id for the background Sms Loader */
-    private static final int LOADER_SMS_ID = 1;
-    private static final int MAX_SMS_RETRIEVE = 3;
-
-    /** Id for the back Calendar Loader */
-    private static final int LOADER_CALENDAR_ID = 2;
-    private static final String KEY_LOADER_EXTRA_EMAILS =
-            QuickContactActivity.class.getCanonicalName() + ".KEY_LOADER_EXTRA_EMAILS";
-    private static final int MAX_PAST_CALENDAR_RETRIEVE = 3;
-    private static final int MAX_FUTURE_CALENDAR_RETRIEVE = 3;
-    private static final long PAST_MILLISECOND_TO_SEARCH_LOCAL_CALENDAR =
-            1L * 24L * 60L * 60L * 1000L /* 1 day */;
-    private static final long FUTURE_MILLISECOND_TO_SEARCH_LOCAL_CALENDAR =
-            7L * 24L * 60L * 60L * 1000L /* 7 days */;
-
-    /** Id for the background Call Log Loader */
-    private static final int LOADER_CALL_LOG_ID = 3;
-    private static final int MAX_CALL_LOG_RETRIEVE = 3;
-    private static final int MIN_NUM_CONTACT_ENTRIES_SHOWN = 3;
-    private static final int MIN_NUM_COLLAPSED_RECENT_ENTRIES_SHOWN = 3;
-    private static final int CARD_ENTRY_ID_EDIT_CONTACT = -2;
-
-
-    private static final int[] mRecentLoaderIds = new int[]{
-        LOADER_SMS_ID,
-        LOADER_CALENDAR_ID,
-        LOADER_CALL_LOG_ID};
-    /**
-     * ConcurrentHashMap constructor params: 4 is initial table size, 0.9f is
-     * load factor before resizing, 1 means we only expect a single thread to
-     * write to the map so make only a single shard
-     */
-    private Map<Integer, List<ContactInteraction>> mRecentLoaderResults =
-        new ConcurrentHashMap<>(4, 0.9f, 1);
-
-    private static final String FRAGMENT_TAG_SELECT_ACCOUNT = "select_account_fragment";
-
-    final OnClickListener mEntryClickHandler = new OnClickListener() {
-        @Override
-        public void onClick(View v) {
-            final Object entryTagObject = v.getTag();
-            if (entryTagObject == null || !(entryTagObject instanceof EntryTag)) {
-                Log.w(TAG, "EntryTag was not used correctly");
-                return;
-            }
-            final EntryTag entryTag = (EntryTag) entryTagObject;
-            final Intent intent = entryTag.getIntent();
-            final int dataId = entryTag.getId();
-            Log.d(TAG, "[onClick]intent = " + intent + ",dataId = " + dataId);
-            if (dataId == CARD_ENTRY_ID_EDIT_CONTACT) {
-                editContact();
-                return;
-            }
-
-            // Pass the touch point through the intent for use in the InCallUI
-            if (Intent.ACTION_CALL.equals(intent.getAction())) {
-                if (TouchPointManager.getInstance().hasValidPoint()) {
-                    Bundle extras = new Bundle();
-                    extras.putParcelable(TouchPointManager.TOUCH_POINT,
-                            TouchPointManager.getInstance().getPoint());
-                    intent.putExtra(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS, extras);
-                }
-            }
-
-            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-            mHasIntentLaunched = true;
-            try {
-                ImplicitIntentsUtil.startActivityInAppIfPossible(QuickContactActivity.this, intent);
-            } catch (SecurityException ex) {
-                Toast.makeText(QuickContactActivity.this, R.string.missing_app,
-                        Toast.LENGTH_SHORT).show();
-                Log.e(TAG, "QuickContacts does not have permission to launch "
-                        + intent);
-            } catch (ActivityNotFoundException ex) {
-                Toast.makeText(QuickContactActivity.this, R.string.missing_app,
-                        Toast.LENGTH_SHORT).show();
-            }
-
-            // Default to USAGE_TYPE_CALL. Usage is summed among all types for sorting each data id
-            // so the exact usage type is not necessary in all cases
-            String usageType = DataUsageFeedback.USAGE_TYPE_CALL;
-
-            final Uri intentUri = intent.getData();
-            if ((intentUri != null && intentUri.getScheme() != null &&
-                    intentUri.getScheme().equals(ContactsUtils.SCHEME_SMSTO)) ||
-                    (intent.getType() != null && intent.getType().equals(MIMETYPE_SMS))) {
-                usageType = DataUsageFeedback.USAGE_TYPE_SHORT_TEXT;
-            }
-
-            // Data IDs start at 1 so anything less is invalid
-            if (dataId > 0) {
-                final Uri dataUsageUri = DataUsageFeedback.FEEDBACK_URI.buildUpon()
-                        .appendPath(String.valueOf(dataId))
-                        .appendQueryParameter(DataUsageFeedback.USAGE_TYPE, usageType)
-                        .build();
-                try {
-                final boolean successful = getContentResolver().update(
-                        dataUsageUri, new ContentValues(), null, null) > 0;
-                if (!successful) {
-                    Log.w(TAG, "DataUsageFeedback increment failed");
-                }
-                } catch (SecurityException ex) {
-                    Log.w(TAG, "DataUsageFeedback increment failed", ex);
-                }
-            } else {
-                Log.w(TAG, "Invalid Data ID");
-            }
-        }
-    };
-
-    final ExpandingEntryCardViewListener mExpandingEntryCardViewListener
-            = new ExpandingEntryCardViewListener() {
-        @Override
-        public void onCollapse(int heightDelta) {
-            mScroller.prepareForShrinkingScrollChild(heightDelta);
-        }
-
-        @Override
-        public void onExpand() {
-            mScroller.setDisableTouchesForSuppressLayout(/* areTouchesDisabled = */ true);
-        }
-
-        @Override
-        public void onExpandDone() {
-            mScroller.setDisableTouchesForSuppressLayout(/* areTouchesDisabled = */ false);
-        }
-    };
-
-    @Override
-    public void onAggregationSuggestionChange() {
-        Log.d(TAG, "[onAggregationSuggestionChange]");
-        if (mAggregationSuggestionEngine == null) {
-            return;
-        }
-        mSuggestions = mAggregationSuggestionEngine.getSuggestions();
-        mCollapsedSuggestionCardView.setVisibility(View.GONE);
-        mExpandSuggestionCardView.setVisibility(View.GONE);
-        mSuggestionList.removeAllViews();
-
-        if (mContactData == null) {
-            return;
-        }
-
-        final String suggestionForName = mContactData.getDisplayName();
-        final int suggestionNumber = mSuggestions.size();
-        Log.d(TAG, "[onAggregationSuggestionChange] suggestionNumber=" + suggestionNumber
-                + ", mSelectedAggregationIds=" + mSelectedAggregationIds);
-        if (suggestionNumber <= 0) {
-            mSelectedAggregationIds.clear();
-            return;
-        }
-
-        ContactPhotoManager.DefaultImageRequest
-                request = new ContactPhotoManager.DefaultImageRequest(
-                suggestionForName, mContactData.getLookupKey(), ContactPhotoManager.TYPE_DEFAULT,
-                /* isCircular */ true );
-        final long photoId = mContactData.getPhotoId();
-        final byte[] photoBytes = mContactData.getThumbnailPhotoBinaryData();
-        if (photoBytes != null) {
-            ContactPhotoManager.getInstance(this).loadThumbnail(mSuggestionSummaryPhoto, photoId,
-                /* darkTheme */ false , /* isCircular */ true , request);
-        } else {
-            ContactPhotoManager.DEFAULT_AVATAR.applyDefaultImage(mSuggestionSummaryPhoto,
-                    -1, false, request);
-        }
-
-        final String suggestionTitle = getResources().getQuantityString(
-                R.plurals.quickcontact_suggestion_card_title, suggestionNumber, suggestionNumber);
-        mCollapsedSuggestionCardTitle.setText(suggestionTitle);
-        mExpandSuggestionCardTitle.setText(suggestionTitle);
-
-        mSuggestionForName.setText(suggestionForName);
-        final int linkedContactsNumber = mContactData.getRawContacts().size();
-        final String contactsInfo;
-        final String accountName = mContactData.getRawContacts().get(0).getAccountName();
-        if (linkedContactsNumber == 1 && accountName == null) {
-            mSuggestionContactsNumber.setVisibility(View.INVISIBLE);
-        }
-        if (linkedContactsNumber == 1 && accountName != null) {
-            contactsInfo = getResources().getString(R.string.contact_from_account_name,
-                    accountName);
-        } else {
-            contactsInfo = getResources().getString(
-                    R.string.quickcontact_contacts_number, linkedContactsNumber);
-        }
-        mSuggestionContactsNumber.setText(contactsInfo);
-
-        final Set<Long> suggestionContactIds = new HashSet<>();
-        for (Suggestion suggestion : mSuggestions) {
-            mSuggestionList.addView(inflateSuggestionListView(suggestion));
-            suggestionContactIds.add(suggestion.contactId);
-        }
-        Log.d(TAG, "[onAggregationSuggestionChange]suggestionContactIds=" + suggestionContactIds);
-
-        if (mIsSuggestionListCollapsed) {
-            collapseSuggestionList();
-        } else {
-            expandSuggestionList();
-        }
-
-        // Remove contact Ids that are not suggestions.
-        final Set<Long> selectedSuggestionIds = com.google.common.collect.Sets.intersection(
-                mSelectedAggregationIds, suggestionContactIds);
-        mSelectedAggregationIds = new TreeSet<>(selectedSuggestionIds);
-        Log.d(TAG, "[onAggregationSuggestionChange]"
-                + "mSelectedAggregationIds = " + mSelectedAggregationIds);
-        if (!mSelectedAggregationIds.isEmpty()) {
-            enableLinkButton();
-        }
-
-        /// M: ALPS02783465. not show duplicate contacts for sim contact.@{
-        if (mContactData != null && mContactData.getIndicate() > 0) {
-            Log.d(TAG, "[onAggregationSuggestionChange] sim disable duplicate card View");
-            mCollapasedSuggestionHeader.setVisibility(View.GONE);
-            mCollapsedSuggestionCardView.setVisibility(View.GONE);
-        }
-        /// @}
-    }
-
-    private void collapseSuggestionList() {
-        mCollapsedSuggestionCardView.setVisibility(View.VISIBLE);
-        mExpandSuggestionCardView.setVisibility(View.GONE);
-        mIsSuggestionListCollapsed = true;
-    }
-
-    private void expandSuggestionList() {
-        mCollapsedSuggestionCardView.setVisibility(View.GONE);
-        mExpandSuggestionCardView.setVisibility(View.VISIBLE);
-        mIsSuggestionListCollapsed = false;
-    }
-
-    private View inflateSuggestionListView(final Suggestion suggestion) {
-        final LayoutInflater layoutInflater = LayoutInflater.from(this);
-        final View suggestionView = layoutInflater.inflate(
-                R.layout.quickcontact_suggestion_contact_item, null);
-
-        ContactPhotoManager.DefaultImageRequest
-                request = new ContactPhotoManager.DefaultImageRequest(
-                suggestion.name, suggestion.lookupKey, ContactPhotoManager.TYPE_DEFAULT, /*
-                isCircular */ true);
-        final ImageView photo = (ImageView) suggestionView.findViewById(
-                R.id.aggregation_suggestion_photo);
-        if (suggestion.photo != null) {
-            ContactPhotoManager.getInstance(this).loadThumbnail(photo, suggestion.photoId,
-                   /* darkTheme */ false, /* isCircular */ true, request);
-        } else {
-            ContactPhotoManager.DEFAULT_AVATAR.applyDefaultImage(photo, -1, false, request);
-        }
-
-        final TextView name = (TextView) suggestionView.findViewById(R.id.aggregation_suggestion_name);
-        name.setText(suggestion.name);
-
-        final TextView accountNameView = (TextView) suggestionView.findViewById(
-                R.id.aggregation_suggestion_account_name);
-        final String accountName = suggestion.rawContacts.get(0).accountName;
-        if (!TextUtils.isEmpty(accountName)) {
-            accountNameView.setText(
-                    getResources().getString(R.string.contact_from_account_name, accountName));
-        } else {
-            accountNameView.setVisibility(View.INVISIBLE);
-        }
-
-        final CheckBox checkbox = (CheckBox) suggestionView.findViewById(R.id.suggestion_checkbox);
-        final int[][] stateSet = new int[][] {
-                new int[] { android.R.attr.state_checked },
-                new int[] { -android.R.attr.state_checked }
-        };
-        final int[] colors = new int[] { mColorFilterColor, mColorFilterColor };
-        if (suggestion != null && suggestion.name != null) {
-            checkbox.setContentDescription(suggestion.name + " " +
-                    getResources().getString(R.string.contact_from_account_name, accountName));
-        }
-        checkbox.setButtonTintList(new ColorStateList(stateSet, colors));
-        checkbox.setChecked(mSuggestionsShouldAutoSelected ||
-                mSelectedAggregationIds.contains(suggestion.contactId));
-        if (checkbox.isChecked()) {
-            mSelectedAggregationIds.add(suggestion.contactId);
-        }
-        checkbox.setTag(suggestion.contactId);
-        checkbox.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final CheckBox checkBox = (CheckBox) v;
-                final Long contactId = (Long) checkBox.getTag();
-                if (mSelectedAggregationIds.contains(mContactData.getId())) {
-                    mSelectedAggregationIds.remove(mContactData.getId());
-                }
-                if (checkBox.isChecked()) {
-                    mSelectedAggregationIds.add(contactId);
-                    if (mSelectedAggregationIds.size() >= 1) {
-                        enableLinkButton();
-                    }
-                } else {
-                    mSelectedAggregationIds.remove(contactId);
-                    mSuggestionsShouldAutoSelected = false;
-                    if (mSelectedAggregationIds.isEmpty()) {
-                        disableLinkButton();
-                    }
-                }
-            }
-        });
-
-        return suggestionView;
-    }
-
-    private void enableLinkButton() {
-        mSuggestionsLinkButton.setClickable(true);
-        mSuggestionsLinkButton.getBackground().setColorFilter(mColorFilter);
-        mSuggestionsLinkButton.setTextColor(
-                ContextCompat.getColor(this, android.R.color.white));
-        mSuggestionsLinkButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                Log.d(TAG, "click link button, mContactData.getId()=" + mContactData.getId()
-                        + ", mSelectedAggregationIds=" + mSelectedAggregationIds);
-                // Join selected contacts.
-                if (!mSelectedAggregationIds.contains(mContactData.getId())) {
-                    mSelectedAggregationIds.add(mContactData.getId());
-                }
-                JoinContactsDialogFragment.start(
-                        QuickContactActivity.this, mSelectedAggregationIds);
-            }
-        });
-    }
-
-    @Override
-    public void onContactsJoined() {
-        disableLinkButton();
-    }
-
-    private void disableLinkButton() {
-        mSuggestionsLinkButton.setClickable(false);
-        mSuggestionsLinkButton.getBackground().setColorFilter(
-                ContextCompat.getColor(this, R.color.disabled_button_background),
-                PorterDuff.Mode.SRC_ATOP);
-        mSuggestionsLinkButton.setTextColor(
-                ContextCompat.getColor(this, R.color.disabled_button_text));
-    }
-
-    private interface ContextMenuIds {
-        static final int COPY_TEXT = 0;
-        static final int CLEAR_DEFAULT = 1;
-        static final int SET_DEFAULT = 2;
-        /// M: add ip call
-        static final int IP_CALL = 3;
-    }
-
-    private final OnCreateContextMenuListener mEntryContextMenuListener =
-            new OnCreateContextMenuListener() {
-        @Override
-        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
-            if (menuInfo == null) {
-                return;
-            }
-            final EntryContextMenuInfo info = (EntryContextMenuInfo) menuInfo;
-            menu.setHeaderTitle(info.getCopyText());
-            /// M: add ip call
-            if (Phone.CONTENT_ITEM_TYPE.equals(info.getMimeType()) &&
-                    PhoneCapabilityTester.isPhone(ContactsApplication.getInstance())) {
-                menu.add(ContextMenu.NONE, ContextMenuIds.IP_CALL,
-                    ContextMenu.NONE, getString(R.string.contact_detail_ip_call));
-            }
-            menu.add(ContextMenu.NONE, ContextMenuIds.COPY_TEXT,
-                    ContextMenu.NONE, getString(R.string.copy_text));
-
-            // Don't allow setting or clearing of defaults for non-editable contacts
-            if (!isContactEditable()) {
-                return;
-            }
-
-            final String selectedMimeType = info.getMimeType();
-
-            // Defaults to true will only enable the detail to be copied to the clipboard.
-            boolean onlyOneOfMimeType = true;
-
-            // Only allow primary support for Phone and Email content types
-            if (Phone.CONTENT_ITEM_TYPE.equals(selectedMimeType)) {
-                onlyOneOfMimeType = mOnlyOnePhoneNumber;
-            } else if (Email.CONTENT_ITEM_TYPE.equals(selectedMimeType)) {
-                onlyOneOfMimeType = mOnlyOneEmail;
-            }
-
-            // Checking for previously set default
-            if (info.isSuperPrimary()) {
-                menu.add(ContextMenu.NONE, ContextMenuIds.CLEAR_DEFAULT,
-                        ContextMenu.NONE, getString(R.string.clear_default));
-            } else if (!onlyOneOfMimeType) {
-                menu.add(ContextMenu.NONE, ContextMenuIds.SET_DEFAULT,
-                        ContextMenu.NONE, getString(R.string.set_default));
-            }
-        }
-    };
-
-    @Override
-    public boolean onContextItemSelected(MenuItem item) {
-        EntryContextMenuInfo menuInfo;
-        try {
-            menuInfo = (EntryContextMenuInfo) item.getMenuInfo();
-        } catch (ClassCastException e) {
-            Log.e(TAG, "bad menuInfo", e);
-            return false;
-        }
-
-        switch (item.getItemId()) {
-            /// M: add ip call
-            case ContextMenuIds.IP_CALL:
-                QuickContactUtils.dialIpCall(this, menuInfo.getCopyText());
-                return true;
-            case ContextMenuIds.COPY_TEXT:
-                ClipboardUtils.copyText(this, menuInfo.getCopyLabel(), menuInfo.getCopyText(),
-                        true);
-                return true;
-            case ContextMenuIds.SET_DEFAULT:
-                final Intent setIntent = ContactSaveService.createSetSuperPrimaryIntent(this,
-                        menuInfo.getId());
-                this.startService(setIntent);
-                return true;
-            case ContextMenuIds.CLEAR_DEFAULT:
-                final Intent clearIntent = ContactSaveService.createClearPrimaryIntent(this,
-                        menuInfo.getId());
-                this.startService(clearIntent);
-                return true;
-            default:
-                throw new IllegalArgumentException("Unknown menu option " + item.getItemId());
-        }
-    }
-
-    /**
-     * Headless fragment used to handle account selection callbacks invoked from
-     * {@link DirectoryContactUtil}.
-     */
-    public static class SelectAccountDialogFragmentListener extends Fragment
-            implements SelectAccountDialogFragment.Listener {
-
-        private QuickContactActivity mQuickContactActivity;
-
-        public SelectAccountDialogFragmentListener() {}
-
-        @Override
-        public void onAccountChosen(AccountWithDataSet account, Bundle extraArgs) {
-            DirectoryContactUtil.createCopy(mQuickContactActivity.mContactData.getContentValues(),
-                    account, mQuickContactActivity);
-        }
-
-        @Override
-        public void onAccountSelectorCancelled() {}
-
-        /**
-         * Set the parent activity. Since rotation can cause this fragment to be used across
-         * more than one activity instance, we need to explicitly set this value instead
-         * of making this class non-static.
-         */
-        public void setQuickContactActivity(QuickContactActivity quickContactActivity) {
-            mQuickContactActivity = quickContactActivity;
-        }
-    }
-
-    final MultiShrinkScrollerListener mMultiShrinkScrollerListener
-            = new MultiShrinkScrollerListener() {
-        @Override
-        public void onScrolledOffBottom() {
-            finish();
-        }
-
-        @Override
-        public void onEnterFullscreen() {
-            updateStatusBarColor();
-        }
-
-        @Override
-        public void onExitFullscreen() {
-            updateStatusBarColor();
-        }
-
-        @Override
-        public void onStartScrollOffBottom() {
-            mIsExitAnimationInProgress = true;
-        }
-
-        @Override
-        public void onEntranceAnimationDone() {
-            mIsEntranceAnimationFinished = true;
-        }
-
-        @Override
-        public void onTransparentViewHeightChange(float ratio) {
-            if (mIsEntranceAnimationFinished) {
-                mWindowScrim.setAlpha((int) (0xFF * ratio));
-            }
-        }
-    };
-
-
-    /**
-     * Data items are compared to the same mimetype based off of three qualities:
-     * 1. Super primary
-     * 2. Primary
-     * 3. Times used
-     */
-    private final Comparator<DataItem> mWithinMimeTypeDataItemComparator =
-            new Comparator<DataItem>() {
-        @Override
-        public int compare(DataItem lhs, DataItem rhs) {
-            if (!lhs.getMimeType().equals(rhs.getMimeType())) {
-                Log.wtf(TAG, "Comparing DataItems with different mimetypes lhs.getMimeType(): " +
-                        lhs.getMimeType() + " rhs.getMimeType(): " + rhs.getMimeType());
-                return 0;
-            }
-
-            if (lhs.isSuperPrimary()) {
-                return -1;
-            } else if (rhs.isSuperPrimary()) {
-                return 1;
-            } else if (lhs.isPrimary() && !rhs.isPrimary()) {
-                return -1;
-            } else if (!lhs.isPrimary() && rhs.isPrimary()) {
-                return 1;
-            } else {
-                final int lhsTimesUsed =
-                        lhs.getTimesUsed() == null ? 0 : lhs.getTimesUsed();
-                final int rhsTimesUsed =
-                        rhs.getTimesUsed() == null ? 0 : rhs.getTimesUsed();
-
-                return rhsTimesUsed - lhsTimesUsed;
-            }
-        }
-    };
-
-    /**
-     * Sorts among different mimetypes based off:
-     * 1. Whether one of the mimetypes is the prioritized mimetype
-     * 2. Number of times used
-     * 3. Last time used
-     * 4. Statically defined
-     */
-    private final Comparator<List<DataItem>> mAmongstMimeTypeDataItemComparator =
-            new Comparator<List<DataItem>> () {
-        @Override
-        public int compare(List<DataItem> lhsList, List<DataItem> rhsList) {
-            final DataItem lhs = lhsList.get(0);
-            final DataItem rhs = rhsList.get(0);
-            final String lhsMimeType = lhs.getMimeType();
-            final String rhsMimeType = rhs.getMimeType();
-
-            // 1. Whether one of the mimetypes is the prioritized mimetype
-            if (!TextUtils.isEmpty(mExtraPrioritizedMimeType) && !lhsMimeType.equals(rhsMimeType)) {
-                if (rhsMimeType.equals(mExtraPrioritizedMimeType)) {
-                    return 1;
-                }
-                if (lhsMimeType.equals(mExtraPrioritizedMimeType)) {
-                    return -1;
-                }
-            }
-
-            // 2. Number of times used
-            final int lhsTimesUsed = lhs.getTimesUsed() == null ? 0 : lhs.getTimesUsed();
-            final int rhsTimesUsed = rhs.getTimesUsed() == null ? 0 : rhs.getTimesUsed();
-            final int timesUsedDifference = rhsTimesUsed - lhsTimesUsed;
-            if (timesUsedDifference != 0) {
-                return timesUsedDifference;
-            }
-
-            // 3. Last time used
-            final long lhsLastTimeUsed =
-                    lhs.getLastTimeUsed() == null ? 0 : lhs.getLastTimeUsed();
-            final long rhsLastTimeUsed =
-                    rhs.getLastTimeUsed() == null ? 0 : rhs.getLastTimeUsed();
-            final long lastTimeUsedDifference = rhsLastTimeUsed - lhsLastTimeUsed;
-            if (lastTimeUsedDifference > 0) {
-                return 1;
-            } else if (lastTimeUsedDifference < 0) {
-                return -1;
-            }
-
-            // 4. Resort to a statically defined mimetype order.
-            if (!lhsMimeType.equals(rhsMimeType)) {
-            for (String mimeType : LEADING_MIMETYPES) {
-                if (lhsMimeType.equals(mimeType)) {
-                    return -1;
-                } else if (rhsMimeType.equals(mimeType)) {
-                    return 1;
-                }
-            }
-            }
-            return 0;
-        }
-    };
-
-    @Override
-    public boolean dispatchTouchEvent(MotionEvent ev) {
-        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
-            TouchPointManager.getInstance().setPoint((int) ev.getRawX(), (int) ev.getRawY());
-        }
-        return super.dispatchTouchEvent(ev);
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        Trace.beginSection("onCreate()");
-        super.onCreate(savedInstanceState);
-
-        if (RequestPermissionsActivity.startPermissionActivity(this) ||
-                RequestDesiredPermissionsActivity.startPermissionActivity(this)) {
-            return;
-        }
-
-        final int previousScreenType = getIntent().getIntExtra
-                (EXTRA_PREVIOUS_SCREEN_TYPE, ScreenType.UNKNOWN);
-        Logger.logScreenView(this, ScreenType.QUICK_CONTACT, previousScreenType);
-
-        if (CompatUtils.isLollipopCompatible()) {
-            getWindow().setStatusBarColor(Color.TRANSPARENT);
-        }
-
-        processIntent(getIntent());
-
-        // Show QuickContact in front of soft input
-         getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM,
-                WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
-
-        setContentView(R.layout.quickcontact_activity);
-
-        mMaterialColorMapUtils = new MaterialColorMapUtils(getResources());
-
-        mScroller = (MultiShrinkScroller) findViewById(R.id.multiscroller);
-
-        mContactCard = (ExpandingEntryCardView) findViewById(R.id.communication_card);
-        /// M: [for rcs-e]
-        mJoynCard = (ExpandingEntryCardView) ExtensionManager.getInstance()
-            .getViewCustomExtension().getQuickContactCardViewCustom().createCardView(
-                    (LinearLayout)findViewById(R.id.card_container),
-                    (View) mContactCard, mLookupUri, this);
-        mNoContactDetailsCard = (ExpandingEntryCardView) findViewById(R.id.no_contact_data_card);
-        mRecentCard = (ExpandingEntryCardView) findViewById(R.id.recent_card);
-        mAboutCard = (ExpandingEntryCardView) findViewById(R.id.about_card);
-
-        mCollapsedSuggestionCardView = (CardView) findViewById(R.id.collapsed_suggestion_card);
-        mExpandSuggestionCardView = (CardView) findViewById(R.id.expand_suggestion_card);
-        mCollapasedSuggestionHeader = findViewById(R.id.collapsed_suggestion_header);
-        mCollapsedSuggestionCardTitle = (TextView) findViewById(
-                R.id.collapsed_suggestion_card_title);
-        mExpandSuggestionCardTitle = (TextView) findViewById(R.id.expand_suggestion_card_title);
-        mSuggestionSummaryPhoto = (ImageView) findViewById(R.id.suggestion_icon);
-        mSuggestionForName = (TextView) findViewById(R.id.suggestion_for_name);
-        mSuggestionContactsNumber = (TextView) findViewById(R.id.suggestion_for_contacts_number);
-        mSuggestionList = (LinearLayout) findViewById(R.id.suggestion_list);
-        mSuggestionsCancelButton= (Button) findViewById(R.id.cancel_button);
-        mSuggestionsLinkButton = (Button) findViewById(R.id.link_button);
-        if (savedInstanceState != null) {
-            mIsSuggestionListCollapsed = savedInstanceState.getBoolean(
-                    KEY_IS_SUGGESTION_LIST_COLLAPSED, true);
-            mPreviousContactId = savedInstanceState.getLong(KEY_PREVIOUS_CONTACT_ID);
-            mSuggestionsShouldAutoSelected = savedInstanceState.getBoolean(
-                    KEY_SUGGESTIONS_AUTO_SELECTED, true);
-            mSelectedAggregationIds = (TreeSet<Long>)
-                    savedInstanceState.getSerializable(KEY_SELECTED_SUGGESTION_CONTACTS);
-        } else {
-            mIsSuggestionListCollapsed = true;
-            mSelectedAggregationIds.clear();
-        }
-        if (mSelectedAggregationIds.isEmpty()) {
-            disableLinkButton();
-        } else {
-            enableLinkButton();
-        }
-        mCollapasedSuggestionHeader.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                mCollapsedSuggestionCardView.setVisibility(View.GONE);
-                mExpandSuggestionCardView.setVisibility(View.VISIBLE);
-                mIsSuggestionListCollapsed = false;
-                mExpandSuggestionCardTitle.requestFocus();
-                mExpandSuggestionCardTitle.sendAccessibilityEvent(
-                        AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
-            }
-        });
-
-        mSuggestionsCancelButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                mCollapsedSuggestionCardView.setVisibility(View.VISIBLE);
-                mExpandSuggestionCardView.setVisibility(View.GONE);
-                mIsSuggestionListCollapsed = true;
-            }
-        });
-
-        mNoContactDetailsCard.setOnClickListener(mEntryClickHandler);
-        mContactCard.setOnClickListener(mEntryClickHandler);
-        mContactCard.setExpandButtonText(
-        getResources().getString(R.string.expanding_entry_card_view_see_all));
-        mContactCard.setOnCreateContextMenuListener(mEntryContextMenuListener);
-
-        mRecentCard.setOnClickListener(mEntryClickHandler);
-        mRecentCard.setTitle(getResources().getString(R.string.recent_card_title));
-
-        mAboutCard.setOnClickListener(mEntryClickHandler);
-        mAboutCard.setOnCreateContextMenuListener(mEntryContextMenuListener);
-
-        mPhotoView = (QuickContactImageView) findViewById(R.id.photo);
-
-        //M:OP01 RCS will go to contact detail activity, update photo from rcs server.@{
-        ExtensionManager.getInstance().getRcsExtension()
-                .updateContactPhotoFromRcsServer(mLookupUri, mPhotoView, this);
-        /** @} */
-
-        final View transparentView = findViewById(R.id.transparent_view);
-        if (mScroller != null) {
-            transparentView.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    mScroller.scrollOffBottom();
-                }
-            });
-        }
-
-        // Allow a shadow to be shown under the toolbar.
-        ViewUtil.addRectangularOutlineProvider(findViewById(R.id.toolbar_parent), getResources());
-
-        final Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
-        setActionBar(toolbar);
-        getActionBar().setTitle(null);
-        // Put a TextView with a known resource id into the ActionBar. This allows us to easily
-        // find the correct TextView location & size later.
-        toolbar.addView(getLayoutInflater().inflate(R.layout.quickcontact_title_placeholder, null));
-
-        mHasAlreadyBeenOpened = savedInstanceState != null;
-        mIsEntranceAnimationFinished = mHasAlreadyBeenOpened;
-        mWindowScrim = new ColorDrawable(SCRIM_COLOR);
-        mWindowScrim.setAlpha(0);
-        getWindow().setBackgroundDrawable(mWindowScrim);
-
-        mScroller.initialize(mMultiShrinkScrollerListener, mExtraMode == MODE_FULLY_EXPANDED,
-                /* maximumHeaderTextSize */ -1,
-                /* shouldUpdateNameViewHeight */ true);
-        // mScroller needs to perform asynchronous measurements after initalize(), therefore
-        // we can't mark this as GONE.
-        mScroller.setVisibility(View.INVISIBLE);
-
-        setHeaderNameText(R.string.missing_name);
-
-        mSelectAccountFragmentListener= (SelectAccountDialogFragmentListener) getFragmentManager()
-                .findFragmentByTag(FRAGMENT_TAG_SELECT_ACCOUNT);
-        if (mSelectAccountFragmentListener == null) {
-            mSelectAccountFragmentListener = new SelectAccountDialogFragmentListener();
-            getFragmentManager().beginTransaction().add(0, mSelectAccountFragmentListener,
-                    FRAGMENT_TAG_SELECT_ACCOUNT).commit();
-            mSelectAccountFragmentListener.setRetainInstance(true);
-        }
-        mSelectAccountFragmentListener.setQuickContactActivity(this);
-
-        SchedulingUtils.doOnPreDraw(mScroller, /* drawNextFrame = */ true,
-                new Runnable() {
-                    @Override
-                    public void run() {
-                        if (!mHasAlreadyBeenOpened) {
-                            // The initial scrim opacity must match the scrim opacity that would be
-                            // achieved by scrolling to the starting position.
-                            final float alphaRatio = mExtraMode == MODE_FULLY_EXPANDED ?
-                                    1 : mScroller.getStartingTransparentHeightRatio();
-                            final int duration = getResources().getInteger(
-                                    android.R.integer.config_shortAnimTime);
-                            final int desiredAlpha = (int) (0xFF * alphaRatio);
-                            ObjectAnimator o = ObjectAnimator.ofInt(mWindowScrim, "alpha", 0,
-                                    desiredAlpha).setDuration(duration);
-
-                            o.start();
-                        }
-                    }
-                });
-
-        if (savedInstanceState != null) {
-            final int color = savedInstanceState.getInt(KEY_THEME_COLOR, 0);
-            SchedulingUtils.doOnPreDraw(mScroller, /* drawNextFrame = */ false,
-                    new Runnable() {
-                        @Override
-                        public void run() {
-                            // Need to wait for the pre draw before setting the initial scroll
-                            // value. Prior to pre draw all scroll values are invalid.
-                            if (mHasAlreadyBeenOpened) {
-                                mScroller.setVisibility(View.VISIBLE);
-                                mScroller.setScroll(mScroller.getScrollNeededToBeFullScreen());
-                            }
-                            // Need to wait for pre draw for setting the theme color. Setting the
-                            // header tint before the MultiShrinkScroller has been measured will
-                            // cause incorrect tinting calculations.
-                            if (color != 0) {
-                                setThemeColor(mMaterialColorMapUtils
-                                        .calculatePrimaryAndSecondaryColor(color));
-                            }
-                        }
-                    });
-        }
-        Trace.endSection();
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        Log.d(TAG, "[onActivityResult] requestCode is " + requestCode
-                + ", resultCode is " + resultCode);
-        final boolean deletedOrSplit = requestCode == REQUEST_CODE_CONTACT_EDITOR_ACTIVITY &&
-                (resultCode == ContactDeletionInteraction.RESULT_CODE_DELETED ||
-                resultCode == ContactEditorBaseActivity.RESULT_CODE_SPLIT);
-        if (deletedOrSplit) {
-            finish();
-        } else if (requestCode == REQUEST_CODE_CONTACT_SELECTION_ACTIVITY &&
-                resultCode != RESULT_CANCELED) {
-            /* M: [Google Issue]ALPS03375904
-             * fix photo view display issue (tint and image blend together),
-             * needs to re-compute theme color @{ */
-            mHasComputedThemeColor = false;
-            /* @} */
-            processIntent(data);
-        }
-    }
-
-    @Override
-    protected void onNewIntent(Intent intent) {
-        super.onNewIntent(intent);
-        Log.d(TAG, "[onNewIntent]");
-        mHasAlreadyBeenOpened = true;
-        mIsEntranceAnimationFinished = true;
-        mHasComputedThemeColor = false;
-        processIntent(intent);
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle savedInstanceState) {
-        super.onSaveInstanceState(savedInstanceState);
-        if (mColorFilter != null) {
-            savedInstanceState.putInt(KEY_THEME_COLOR, mColorFilterColor);
-        }
-        savedInstanceState.putBoolean(KEY_IS_SUGGESTION_LIST_COLLAPSED, mIsSuggestionListCollapsed);
-        savedInstanceState.putLong(KEY_PREVIOUS_CONTACT_ID, mPreviousContactId);
-        savedInstanceState.putBoolean(
-                KEY_SUGGESTIONS_AUTO_SELECTED, mSuggestionsShouldAutoSelected);
-        savedInstanceState.putSerializable(
-                KEY_SELECTED_SUGGESTION_CONTACTS, mSelectedAggregationIds);
-    }
-
-    private void processIntent(Intent intent) {
-        if (intent == null) {
-            Log.w(TAG, "[processIntent]intent is null,return!");
-            finish();
-            return;
-        }
-        Uri lookupUri = intent.getData();
-        Log.d(TAG, "The original uri from intent: " + lookupUri);
-
-        // Check to see whether it comes from the old version.
-        if (lookupUri != null && LEGACY_AUTHORITY.equals(lookupUri.getAuthority())) {
-            final long rawContactId = ContentUris.parseId(lookupUri);
-            lookupUri = RawContacts.getContactLookupUri(getContentResolver(),
-                    ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId));
-            Log.d(TAG, "The uri from old version: " + lookupUri);
-        }
-        mExtraMode = getIntent().getIntExtra(QuickContact.EXTRA_MODE, QuickContact.MODE_LARGE);
-        if (isMultiWindowOnPhone()) {
-            mExtraMode = QuickContact.MODE_LARGE;
-        }
-        mExtraPrioritizedMimeType =
-                getIntent().getStringExtra(QuickContact.EXTRA_PRIORITIZED_MIMETYPE);
-        final Uri oldLookupUri = mLookupUri;
-
-        if (lookupUri == null) {
-            Log.w(TAG, "[processIntent]lookupUri is null,return!");
-            finish();
-            return;
-        }
-        mLookupUri = lookupUri;
-        Log.d(TAG, "[processIntent] original uri is oldLookupUri = " + oldLookupUri
-                + ", new uri from intent is mLookupUri = " + mLookupUri);
-        mExcludeMimes = intent.getStringArrayExtra(QuickContact.EXTRA_EXCLUDE_MIMES);
-        if (oldLookupUri == null) {
-            mContactLoader = (ContactLoader) getLoaderManager().initLoader(
-                    LOADER_CONTACT_ID, null, mLoaderContactCallbacks);
-        } else if (oldLookupUri != mLookupUri) {
-            // After copying a directory contact, the contact URI changes. Therefore,
-            // we need to reload the new contact.
-            destroyInteractionLoaders();
-            mContactLoader = (ContactLoader) (Loader<?>) getLoaderManager().getLoader(
-                    LOADER_CONTACT_ID);
-            mContactLoader.setLookupUri(mLookupUri);
-            mCachedCp2DataCardModel = null;
-        }
-        mContactLoader.forceLoad();
-
-        NfcHandler.register(this, mLookupUri);
-
-        // M: Add for presence @{
-        ExtensionManager.getInstance().getContactsCommonPresenceExtension().processIntent(intent);
-    }
-
-    private void destroyInteractionLoaders() {
-        for (int interactionLoaderId : mRecentLoaderIds) {
-            getLoaderManager().destroyLoader(interactionLoaderId);
-        }
-    }
-
-    private void runEntranceAnimation() {
-        if (mHasAlreadyBeenOpened) {
-            return;
-        }
-        mHasAlreadyBeenOpened = true;
-        mScroller.scrollUpForEntranceAnimation(/* scrollToCurrentPosition */ !isMultiWindowOnPhone()
-                && (mExtraMode != MODE_FULLY_EXPANDED));
-    }
-
-    private boolean isMultiWindowOnPhone() {
-        return MultiWindowCompat.isInMultiWindowMode(this) && PhoneCapabilityTester.isPhone(this);
-    }
-
-    /** Assign this string to the view if it is not empty. */
-    private void setHeaderNameText(int resId) {
-        if (mScroller != null) {
-            mScroller.setTitle(getText(resId) == null ? null : getText(resId).toString(),
-                    /* isPhoneNumber= */ false);
-        }
-    }
-
-    /** Assign this string to the view if it is not empty. */
-    private void setHeaderNameText(String value, boolean isPhoneNumber) {
-        if (!TextUtils.isEmpty(value)) {
-            if (mScroller != null) {
-                mScroller.setTitle(value, isPhoneNumber);
-            }
-        }
-    }
-
-    /**
-     * Check if the given MIME-type appears in the list of excluded MIME-types
-     * that the most-recent caller requested.
-     */
-    private boolean isMimeExcluded(String mimeType) {
-        if (mExcludeMimes == null) return false;
-        for (String excludedMime : mExcludeMimes) {
-            if (TextUtils.equals(excludedMime, mimeType)) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Handle the result from the ContactLoader
-     */
-    private void bindContactData(final Contact data) {
-        Log.d(TAG, "[bindContactData]");
-        Trace.beginSection("bindContactData");
-        mContactData = data;
-        invalidateOptionsMenu();
-
-        Trace.endSection();
-        Trace.beginSection("Set display photo & name");
-
-        mPhotoView.setIsBusiness(mContactData.isDisplayNameFromOrganization());
-        mPhotoSetter.setupContactPhoto(data, mPhotoView);
-        extractAndApplyTintFromPhotoViewAsynchronously();
-        final String displayName = ContactDisplayUtils.getDisplayName(this, data).toString();
-        setHeaderNameText(
-                displayName, mContactData.getDisplayNameSource() == DisplayNameSources.PHONE);
-        final String phoneticName = ContactDisplayUtils.getPhoneticName(this, data);
-        if (mScroller != null) {
-            // Show phonetic name only when it doesn't equal the display name.
-            if (!TextUtils.isEmpty(phoneticName) && !phoneticName.equals(displayName)) {
-                mScroller.setPhoneticName(phoneticName);
-            } else {
-                mScroller.setPhoneticNameGone();
-            }
-        }
-
-        Trace.endSection();
-
-        mEntriesAndActionsTask = new AsyncTask<Void, Void, Cp2DataCardModel>() {
-
-            @Override
-            protected Cp2DataCardModel doInBackground(
-                    Void... params) {
-                Log.d(TAG, "[Cp2DataCardModel] doInBackground");
-                return generateDataModelFromContact(data);
-            }
-
-            @Override
-            protected void onPostExecute(Cp2DataCardModel cardDataModel) {
-                super.onPostExecute(cardDataModel);
-                // Check that original AsyncTask parameters are still valid and the activity
-                // is still running before binding to UI. A new intent could invalidate
-                // the results, for example.
-                Log.d(TAG, "[Cp2DataCardModel] onPostExecute");
-                if (data == mContactData && !isCancelled()) {
-                    bindDataToCards(cardDataModel);
-                    showActivity();
-                ///M:[Google Issue][ALPS03391875] save DataModel event activity stopped @{
-                } else {
-                    Log.e(TAG, "[Cp2DataCardModel] Async task cancelled !!! isCancelled():" +
-                            isCancelled() + ", data:" + data + ", mContactData:" + mContactData);
-                    mCachedCp2DataCardModel = cardDataModel;
-                /// @}
-                }
-            }
-        };
-        mEntriesAndActionsTask.execute();
-        Log.d(TAG, "[bindContactData] mEntriesAndActionsTask.execute()");
-    }
-
-    private void bindDataToCards(Cp2DataCardModel cp2DataCardModel) {
-        startInteractionLoaders(cp2DataCardModel);
-        populateContactAndAboutCard(cp2DataCardModel, /* shouldAddPhoneticName */ true);
-        populateSuggestionCard();
-    }
-
-    private void startInteractionLoaders(Cp2DataCardModel cp2DataCardModel) {
-        final Map<String, List<DataItem>> dataItemsMap = cp2DataCardModel.dataItemsMap;
-        final List<DataItem> phoneDataItems = dataItemsMap.get(Phone.CONTENT_ITEM_TYPE);
-        if (phoneDataItems != null) {
-            /// M: Reset the value as the size may change,
-            //  otherwise when size > 1, the value will always be true.
-            mOnlyOnePhoneNumber = phoneDataItems.size() == 1 ? true : false;
-        }
-        String[] phoneNumbers = null;
-        if (phoneDataItems != null) {
-            phoneNumbers = new String[phoneDataItems.size()];
-            for (int i = 0; i < phoneDataItems.size(); ++i) {
-                phoneNumbers[i] = ((PhoneDataItem) phoneDataItems.get(i)).getNumber();
-            }
-        }
-        final Bundle phonesExtraBundle = new Bundle();
-        phonesExtraBundle.putStringArray(KEY_LOADER_EXTRA_PHONES, phoneNumbers);
-
-        Trace.beginSection("start sms loader");
-        getLoaderManager().initLoader(
-                LOADER_SMS_ID,
-                phonesExtraBundle,
-                mLoaderInteractionsCallbacks);
-        Trace.endSection();
-
-        Trace.beginSection("start call log loader");
-        getLoaderManager().initLoader(
-                LOADER_CALL_LOG_ID,
-                phonesExtraBundle,
-                mLoaderInteractionsCallbacks);
-        Trace.endSection();
-
-
-        Trace.beginSection("start calendar loader");
-        final List<DataItem> emailDataItems = dataItemsMap.get(Email.CONTENT_ITEM_TYPE);
-        if (emailDataItems != null) {
-            /// M: Reset the value as the size may change,
-            //  otherwise when size > 1, the value will always be true.
-            mOnlyOneEmail = emailDataItems.size() == 1 ? true : false;
-        }
-        String[] emailAddresses = null;
-        if (emailDataItems != null) {
-            emailAddresses = new String[emailDataItems.size()];
-            for (int i = 0; i < emailDataItems.size(); ++i) {
-                emailAddresses[i] = ((EmailDataItem) emailDataItems.get(i)).getAddress();
-            }
-        }
-        final Bundle emailsExtraBundle = new Bundle();
-        emailsExtraBundle.putStringArray(KEY_LOADER_EXTRA_EMAILS, emailAddresses);
-        getLoaderManager().initLoader(
-                LOADER_CALENDAR_ID,
-                emailsExtraBundle,
-                mLoaderInteractionsCallbacks);
-        Trace.endSection();
-    }
-
-    private void showActivity() {
-        Log.d(TAG, "[showActivity]");
-        if (mScroller != null) {
-            mScroller.setVisibility(View.VISIBLE);
-            SchedulingUtils.doOnPreDraw(mScroller, /* drawNextFrame = */ false,
-                    new Runnable() {
-                        @Override
-                        public void run() {
-                            runEntranceAnimation();
-                        }
-                    });
-        }
-    }
-
-    private List<List<Entry>> buildAboutCardEntries(Map<String, List<DataItem>> dataItemsMap) {
-        final List<List<Entry>> aboutCardEntries = new ArrayList<>();
-        for (String mimetype : SORTED_ABOUT_CARD_MIMETYPES) {
-            final List<DataItem> mimeTypeItems = dataItemsMap.get(mimetype);
-            if (mimeTypeItems == null) {
-                continue;
-            }
-            // Set aboutCardTitleOut = null, since SORTED_ABOUT_CARD_MIMETYPES doesn't contain
-            // the name mimetype.
-            final List<Entry> aboutEntries = dataItemsToEntries(mimeTypeItems,
-                    /* aboutCardTitleOut = */ null);
-            if (aboutEntries.size() > 0) {
-                aboutCardEntries.add(aboutEntries);
-            }
-        }
-        return aboutCardEntries;
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        // If returning from a launched activity, repopulate the contact and about card
-        if (mHasIntentLaunched) {
-            mHasIntentLaunched = false;
-            populateContactAndAboutCard(mCachedCp2DataCardModel, /* shouldAddPhoneticName */ false);
-        }
-
-        // When exiting the activity and resuming, we want to force a full reload of all the
-        // interaction data in case something changed in the background. On screen rotation,
-        // we don't need to do this. And, mCachedCp2DataCardModel will be null, so we won't.
-        if (mCachedCp2DataCardModel != null) {
-            destroyInteractionLoaders();
-            startInteractionLoaders(mCachedCp2DataCardModel);
-        }
-        ///M:[for rcs] update Rcs contact on the top left@{
-        ExtensionManager.getInstance().getRcsExtension()
-                .getQuickContactRcsScroller()
-                .updateRcsContact(mContactLoader.getLookupUri(), false);
-        ///@}
-    }
-
-    private void populateSuggestionCard() {
-        Log.d(TAG, "[populateSuggestionCard] mPreviousContactId = " + mPreviousContactId
-                + ", mContactData.getId()" + mContactData.getId());
-
-        // Initialize suggestion related view and data.
-        if (mPreviousContactId != mContactData.getId()) {
-            mCollapsedSuggestionCardView.setVisibility(View.GONE);
-            mExpandSuggestionCardView.setVisibility(View.GONE);
-            mIsSuggestionListCollapsed = true;
-            mSuggestionsShouldAutoSelected = true;
-            mSuggestionList.removeAllViews();
-        }
-
-        // Do not show the card when it's directory contact or invisible.
-        if (DirectoryContactUtil.isDirectoryContact(mContactData)
-                || InvisibleContactUtil.isInvisibleAndAddable(mContactData, this)) {
-            return;
-        }
-
-        if (mAggregationSuggestionEngine == null) {
-            mAggregationSuggestionEngine = new AggregationSuggestionEngine(this);
-            mAggregationSuggestionEngine.setListener(this);
-            mAggregationSuggestionEngine.setSuggestionsLimit(getResources().getInteger(
-                    R.integer.quickcontact_suggestions_limit));
-            mAggregationSuggestionEngine.start();
-        }
-
-        mAggregationSuggestionEngine.setContactId(mContactData.getId());
-        if (mPreviousContactId != 0
-                && mPreviousContactId != mContactData.getId()) {
-            // Clear selected Ids when listing suggestions for new contact Id.
-            mSelectedAggregationIds.clear();
-        }
-        mPreviousContactId = mContactData.getId();
-
-        // Trigger suggestion engine to compute suggestions.
-        if (mContactData.getId() <= 0) {
-            return;
-        }
-        final ContentValues values = new ContentValues();
-        values.put(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,
-                mContactData.getDisplayName());
-        values.put(ContactsContract.CommonDataKinds.StructuredName.PHONETIC_FAMILY_NAME,
-                mContactData.getPhoneticName());
-        mAggregationSuggestionEngine.onNameChange(ValuesDelta.fromBefore(values));
-    }
-
-    private void populateContactAndAboutCard(Cp2DataCardModel cp2DataCardModel,
-            boolean shouldAddPhoneticName) {
-        mCachedCp2DataCardModel = cp2DataCardModel;
-        if (mHasIntentLaunched || cp2DataCardModel == null) {
-            return;
-        }
-        Trace.beginSection("bind contact card");
-
-        final List<List<Entry>> contactCardEntries = cp2DataCardModel.contactCardEntries;
-        final List<List<Entry>> aboutCardEntries = cp2DataCardModel.aboutCardEntries;
-        final String customAboutCardName = cp2DataCardModel.customAboutCardName;
-
-        if (contactCardEntries.size() > 0) {
-            final boolean firstEntriesArePrioritizedMimeType =
-                    !TextUtils.isEmpty(mExtraPrioritizedMimeType) &&
-                    mCachedCp2DataCardModel.dataItemsMap.containsKey(mExtraPrioritizedMimeType) &&
-                    mCachedCp2DataCardModel.dataItemsMap.get(mExtraPrioritizedMimeType).size() != 0;
-            mContactCard.initialize(contactCardEntries,
-                    /* numInitialVisibleEntries = */ MIN_NUM_CONTACT_ENTRIES_SHOWN,
-                    /* isExpanded = */ mContactCard.isExpanded(),
-                    /* isAlwaysExpanded = */ false,
-                    mExpandingEntryCardViewListener,
-                    mScroller,
-                    firstEntriesArePrioritizedMimeType);
-            mContactCard.setVisibility(View.VISIBLE);
-        } else {
-            mContactCard.setVisibility(View.GONE);
-        }
-        Trace.endSection();
-
-        Trace.beginSection("bind about card");
-
-        // Phonetic name is not a data item, so the entry needs to be created separately
-        // But if mCachedCp2DataCardModel is passed to this method (e.g. returning from editor
-        // without saving any changes), then it should include phoneticName and the phoneticName
-        // shouldn't be changed. If this is the case, we shouldn't add it again. b/27459294
-        final String phoneticName = mContactData.getPhoneticName();
-        if (shouldAddPhoneticName && !TextUtils.isEmpty(phoneticName)) {
-            Entry phoneticEntry = new Entry(/* viewId = */ -1,
-                    /* icon = */ null,
-                    getResources().getString(R.string.name_phonetic),
-                    phoneticName,
-                    /* subHeaderIcon = */ null,
-                    /* text = */ null,
-                    /* textIcon = */ null,
-                    /* primaryContentDescription = */ null,
-                    /* intent = */ null,
-                    /* alternateIcon = */ null,
-                    /* alternateIntent = */ null,
-                    /* alternateContentDescription = */ null,
-                    /* shouldApplyColor = */ false,
-                    /* isEditable = */ false,
-                    /* EntryContextMenuInfo = */ new EntryContextMenuInfo(phoneticName,
-                            getResources().getString(R.string.name_phonetic),
-                            /* mimeType = */ null, /* id = */ -1, /* isPrimary = */ false),
-                    /* thirdIcon = */ null,
-                    /* thirdIntent = */ null,
-                    /* thirdContentDescription = */ null,
-                    /* thirdAction = */ Entry.ACTION_NONE,
-                    /* thirdExtras = */ null,
-                    /* iconResourceId = */  0);
-            List<Entry> phoneticList = new ArrayList<>();
-            phoneticList.add(phoneticEntry);
-            // Phonetic name comes after nickname. Check to see if the first entry type is nickname
-            if (aboutCardEntries.size() > 0 && aboutCardEntries.get(0).get(0).getHeader().equals(
-                    getResources().getString(R.string.header_nickname_entry))) {
-                aboutCardEntries.add(1, phoneticList);
-            } else {
-                aboutCardEntries.add(0, phoneticList);
-            }
-        }
-
-
-        /// M: Bug fix ALPS01775443, after deleted name in editor, need refresh about card.
-        mAboutCard.setTitle(customAboutCardName);
-
-        if (aboutCardEntries.size() > 0) {
-            mAboutCard.initialize(aboutCardEntries,
-                    /* numInitialVisibleEntries = */ 1,
-                    /* isExpanded = */ true,
-                    /* isAlwaysExpanded = */ true,
-                    mExpandingEntryCardViewListener,
-                    mScroller);
-        } else {
-            /// M: Bug fix ALPS01763309, after deleted all about card informations
-            //  in editor, need refresh about card. @{
-            mAboutCard.initialize(aboutCardEntries, 1, true, true,
-                    mExpandingEntryCardViewListener, mScroller);
-            mAboutCard.setVisibility(View.GONE);
-            /// @}
-        }
-
-        if (contactCardEntries.size() == 0 && aboutCardEntries.size() == 0) {
-            initializeNoContactDetailCard();
-        } else {
-            mNoContactDetailsCard.setVisibility(View.GONE);
-        }
-
-        // If the Recent card is already initialized (all recent data is loaded), show the About
-        // card if it has entries. Otherwise About card visibility will be set in bindRecentData()
-        if (isAllRecentDataLoaded() && aboutCardEntries.size() > 0) {
-            mAboutCard.setVisibility(View.VISIBLE);
-        }
-        Trace.endSection();
-    }
-
-    /**
-     * Create a card that shows "Add email" and "Add phone number" entries in grey.
-     */
-    private void initializeNoContactDetailCard() {
-        Log.d(TAG, "[initializeNoContactDetailCard]");
-        final Drawable phoneIcon = getResources().getDrawable(
-                R.drawable.ic_phone_24dp).mutate();
-        final Entry phonePromptEntry = new Entry(CARD_ENTRY_ID_EDIT_CONTACT,
-                phoneIcon, getString(R.string.quickcontact_add_phone_number),
-                /* subHeader = */ null, /* subHeaderIcon = */ null, /* text = */ null,
-                /* textIcon = */ null, /* primaryContentDescription = */ null,
-                getEditContactIntent(),
-                /* alternateIcon = */ null, /* alternateIntent = */ null,
-                /* alternateContentDescription = */ null, /* shouldApplyColor = */ true,
-                /* isEditable = */ false, /* EntryContextMenuInfo = */ null,
-                /* thirdIcon = */ null, /* thirdIntent = */ null,
-                /* thirdContentDescription = */ null,
-                /* thirdAction = */ Entry.ACTION_NONE,
-                /* thirdExtras = */ null,
-                R.drawable.ic_phone_24dp);
-
-        final Drawable emailIcon = getResources().getDrawable(
-                R.drawable.ic_email_24dp).mutate();
-        final Entry emailPromptEntry = new Entry(CARD_ENTRY_ID_EDIT_CONTACT,
-                emailIcon, getString(R.string.quickcontact_add_email), /* subHeader = */ null,
-                /* subHeaderIcon = */ null,
-                /* text = */ null, /* textIcon = */ null, /* primaryContentDescription = */ null,
-                getEditContactIntent(), /* alternateIcon = */ null,
-                /* alternateIntent = */ null, /* alternateContentDescription = */ null,
-                /* shouldApplyColor = */ true, /* isEditable = */ false,
-                /* EntryContextMenuInfo = */ null, /* thirdIcon = */ null,
-                /* thirdIntent = */ null, /* thirdContentDescription = */ null,
-                /* thirdAction = */ Entry.ACTION_NONE, /* thirdExtras = */ null,
-                R.drawable.ic_email_24dp);
-
-        final List<List<Entry>> promptEntries = new ArrayList<>();
-        promptEntries.add(new ArrayList<Entry>(1));
-        /// M: ALPS02782438.not support to show email for sim and Ruim type.@{
-        //promptEntries.add(new ArrayList<Entry>(1));
-        promptEntries.get(0).add(phonePromptEntry);
-        if (isSupportShowEmailData(mContactData)) {
-            promptEntries.add(new ArrayList<Entry>(1));
-            promptEntries.get(1).add(emailPromptEntry);
-        }
-        /// @}
-        final int subHeaderTextColor = getResources().getColor(
-                R.color.quickcontact_entry_sub_header_text_color);
-        final PorterDuffColorFilter greyColorFilter =
-                new PorterDuffColorFilter(subHeaderTextColor, PorterDuff.Mode.SRC_ATOP);
-        mNoContactDetailsCard.initialize(promptEntries, /*M: ALPS02782438.//2*/promptEntries.size(),
-                /* isExpanded = */ true,
-                /* isAlwaysExpanded = */ true, mExpandingEntryCardViewListener, mScroller);
-        mNoContactDetailsCard.setVisibility(View.VISIBLE);
-        mNoContactDetailsCard.setEntryHeaderColor(subHeaderTextColor);
-        mNoContactDetailsCard.setColorAndFilter(subHeaderTextColor, greyColorFilter);
-    }
-
-    /**
-     * Builds the {@link DataItem}s Map out of the Contact.
-     * @param data The contact to build the data from.
-     * @return A pair containing a list of data items sorted within mimetype and sorted
-     *  amongst mimetype. The map goes from mimetype string to the sorted list of data items within
-     *  mimetype
-     */
-    private Cp2DataCardModel generateDataModelFromContact(
-            Contact data) {
-        Trace.beginSection("Build data items map");
-        Log.d(TAG, "[generateDataModelFromContact] start contact: " + data);
-        final Map<String, List<DataItem>> dataItemsMap = new HashMap<>();
-
-        final ResolveCache cache = ResolveCache.getInstance(this);
-        for (RawContact rawContact : data.getRawContacts()) {
-            for (DataItem dataItem : rawContact.getDataItems()) {
-                dataItem.setRawContactId(rawContact.getId());
-
-                final String mimeType = dataItem.getMimeType();
-                if (mimeType == null) continue;
-
-                final AccountType accountType = rawContact.getAccountType(this);
-                final DataKind dataKind = AccountTypeManager.getInstance(this)
-                        .getKindOrFallback(accountType, mimeType);
-                if (dataKind == null) continue;
-
-                dataItem.setDataKind(dataKind);
-
-                final boolean hasData = !TextUtils.isEmpty(dataItem.buildDataString(this,
-                        dataKind));
-
-                if (isMimeExcluded(mimeType) || !hasData) continue;
-
-                List<DataItem> dataItemListByType = dataItemsMap.get(mimeType);
-                if (dataItemListByType == null) {
-                    dataItemListByType = new ArrayList<>();
-                    dataItemsMap.put(mimeType, dataItemListByType);
-                }
-                dataItemListByType.add(dataItem);
-            }
-        }
-        Trace.endSection();
-
-        Trace.beginSection("sort within mimetypes");
-        /*
-         * Sorting is a multi part step. The end result is to a have a sorted list of the most
-         * used data items, one per mimetype. Then, within each mimetype, the list of data items
-         * for that type is also sorted, based off of {super primary, primary, times used} in that
-         * order.
-         */
-        final List<List<DataItem>> dataItemsList = new ArrayList<>();
-        for (List<DataItem> mimeTypeDataItems : dataItemsMap.values()) {
-            // Remove duplicate data items
-            Collapser.collapseList(mimeTypeDataItems, this);
-            // Sort within mimetype
-            Collections.sort(mimeTypeDataItems, mWithinMimeTypeDataItemComparator);
-            // Add to the list of data item lists
-            dataItemsList.add(mimeTypeDataItems);
-        }
-        Trace.endSection();
-
-        Trace.beginSection("sort amongst mimetypes");
-        // Sort amongst mimetypes to bubble up the top data items for the contact card
-        Collections.sort(dataItemsList, mAmongstMimeTypeDataItemComparator);
-        Trace.endSection();
-
-        Trace.beginSection("cp2 data items to entries");
-
-        final List<List<Entry>> contactCardEntries = new ArrayList<>();
-        final List<List<Entry>> aboutCardEntries = buildAboutCardEntries(dataItemsMap);
-        final MutableString aboutCardName = new MutableString();
-
-        for (int i = 0; i < dataItemsList.size(); ++i) {
-            final List<DataItem> dataItemsByMimeType = dataItemsList.get(i);
-            final DataItem topDataItem = dataItemsByMimeType.get(0);
-            if (SORTED_ABOUT_CARD_MIMETYPES.contains(topDataItem.getMimeType())) {
-                // About card mimetypes are built in buildAboutCardEntries, skip here
-                continue;
-            } else {
-                List<Entry> contactEntries = dataItemsToEntries(dataItemsList.get(i),
-                        aboutCardName);
-                if (contactEntries.size() > 0) {
-                    contactCardEntries.add(contactEntries);
-                }
-            }
-        }
-
-        Trace.endSection();
-
-        final Cp2DataCardModel dataModel = new Cp2DataCardModel();
-        dataModel.customAboutCardName = aboutCardName.value;
-        dataModel.aboutCardEntries = aboutCardEntries;
-        dataModel.contactCardEntries = contactCardEntries;
-        dataModel.dataItemsMap = dataItemsMap;
-        Log.d(TAG, "[generateDataModelFromContact] end contact: " + data);
-        return dataModel;
-    }
-
-    /**
-     * Class used to hold the About card and Contact cards' data model that gets generated
-     * on a background thread. All data is from CP2.
-     */
-    private static class Cp2DataCardModel {
-        /**
-         * A map between a mimetype string and the corresponding list of data items. The data items
-         * are in sorted order using mWithinMimeTypeDataItemComparator.
-         */
-        public Map<String, List<DataItem>> dataItemsMap;
-        public List<List<Entry>> aboutCardEntries;
-        public List<List<Entry>> contactCardEntries;
-        public String customAboutCardName;
-    }
-
-    private static class MutableString {
-        public String value;
-    }
-
-    /**
-     * Converts a {@link DataItem} into an {@link ExpandingEntryCardView.Entry} for display.
-     * If the {@link ExpandingEntryCardView.Entry} has no visual elements, null is returned.
-     *
-     * This runs on a background thread. This is set as static to avoid accidentally adding
-     * additional dependencies on unsafe things (like the Activity).
-     *
-     * @param dataItem The {@link DataItem} to convert.
-     * @param secondDataItem A second {@link DataItem} to help build a full entry for some
-     *  mimetypes
-     * @return The {@link ExpandingEntryCardView.Entry}, or null if no visual elements are present.
-     */
-    private static Entry dataItemToEntry(DataItem dataItem, DataItem secondDataItem,
-            Context context, Contact contactData,
-            final MutableString aboutCardName) {
-        Log.d(TAG, "[dataItemToEntry] contact:" + contactData + " dataItem:" + dataItem.getClass());
-        Drawable icon = null;
-        String header = null;
-        String subHeader = null;
-        Drawable subHeaderIcon = null;
-        String text = null;
-        Drawable textIcon = null;
-        StringBuilder primaryContentDescription = new StringBuilder();
-        Spannable phoneContentDescription = null;
-        Spannable smsContentDescription = null;
-        Intent intent = null;
-        boolean shouldApplyColor = true;
-        Drawable alternateIcon = null;
-        Intent alternateIntent = null;
-        StringBuilder alternateContentDescription = new StringBuilder();
-        final boolean isEditable = false;
-        EntryContextMenuInfo entryContextMenuInfo = null;
-        Drawable thirdIcon = null;
-        Intent thirdIntent = null;
-        int thirdAction = Entry.ACTION_NONE;
-        String thirdContentDescription = null;
-        Bundle thirdExtras = null;
-        int iconResourceId = 0;
-
-        context = context.getApplicationContext();
-        final Resources res = context.getResources();
-        DataKind kind = dataItem.getDataKind();
-
-        QuickContactUtils.resetSipAddress();
-        /// M: Fix ALPS01995031
-        if (contactData == null) {
-            Log.w(TAG, "[dataItemToEntry] contact data is null.");
-            return null;
-        }
-        if (dataItem instanceof ImDataItem) {
-            final ImDataItem im = (ImDataItem) dataItem;
-            intent = ContactsUtils.buildImIntent(context, im).first;
-            final boolean isEmail = im.isCreatedFromEmail();
-            final int protocol;
-            if (!im.isProtocolValid()) {
-                protocol = Im.PROTOCOL_CUSTOM;
-            } else {
-                protocol = isEmail ? Im.PROTOCOL_GOOGLE_TALK : im.getProtocol();
-            }
-            if (protocol == Im.PROTOCOL_CUSTOM) {
-                // If the protocol is custom, display the "IM" entry header as well to distinguish
-                // this entry from other ones
-                header = res.getString(R.string.header_im_entry);
-                subHeader = Im.getProtocolLabel(res, protocol,
-                        im.getCustomProtocol()).toString();
-                text = im.getData();
-            } else {
-                header = Im.getProtocolLabel(res, protocol,
-                        im.getCustomProtocol()).toString();
-                subHeader = im.getData();
-            }
-            entryContextMenuInfo = new EntryContextMenuInfo(im.getData(), header,
-                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
-        } else if (dataItem instanceof OrganizationDataItem) {
-            final OrganizationDataItem organization = (OrganizationDataItem) dataItem;
-            header = res.getString(R.string.header_organization_entry);
-            subHeader = organization.getCompany();
-            entryContextMenuInfo = new EntryContextMenuInfo(subHeader, header,
-                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
-            text = organization.getTitle();
-        } else if (dataItem instanceof NicknameDataItem) {
-            final NicknameDataItem nickname = (NicknameDataItem) dataItem;
-            // Build nickname entries
-            final boolean isNameRawContact =
-                (contactData.getNameRawContactId() == dataItem.getRawContactId());
-
-            final boolean duplicatesTitle =
-                isNameRawContact
-                && contactData.getDisplayNameSource() == DisplayNameSources.NICKNAME;
-
-            if (!duplicatesTitle) {
-                header = res.getString(R.string.header_nickname_entry);
-                subHeader = nickname.getName();
-                entryContextMenuInfo = new EntryContextMenuInfo(subHeader, header,
-                        dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
-            }
-        } else if (dataItem instanceof NoteDataItem) {
-            final NoteDataItem note = (NoteDataItem) dataItem;
-            header = res.getString(R.string.header_note_entry);
-            subHeader = note.getNote();
-            entryContextMenuInfo = new EntryContextMenuInfo(subHeader, header,
-                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
-        } else if (dataItem instanceof WebsiteDataItem) {
-            final WebsiteDataItem website = (WebsiteDataItem) dataItem;
-            header = res.getString(R.string.header_website_entry);
-            subHeader = website.getUrl();
-            entryContextMenuInfo = new EntryContextMenuInfo(subHeader, header,
-                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
-            try {
-                final WebAddress webAddress = new WebAddress(website.buildDataStringForDisplay
-                        (context, kind));
-                intent = new Intent(Intent.ACTION_VIEW, Uri.parse(webAddress.toString()));
-            } catch (final ParseException e) {
-                Log.e(TAG, "Couldn't parse website: " + website.buildDataStringForDisplay(
-                        context, kind));
-            }
-        } else if (dataItem instanceof EventDataItem) {
-            final EventDataItem event = (EventDataItem) dataItem;
-            final String dataString = event.buildDataStringForDisplay(context, kind);
-            final Calendar cal = DateUtils.parseDate(dataString, false);
-            if (cal != null) {
-                final Date nextAnniversary =
-                        DateUtils.getNextAnnualDate(cal);
-                final Uri.Builder builder = CalendarContract.CONTENT_URI.buildUpon();
-                builder.appendPath("time");
-                ContentUris.appendId(builder, nextAnniversary.getTime());
-                intent = new Intent(Intent.ACTION_VIEW).setData(builder.build());
-            }
-            header = res.getString(R.string.header_event_entry);
-            if (event.hasKindTypeColumn(kind)) {
-                subHeader = EventCompat.getTypeLabel(res, event.getKindTypeColumn(kind),
-                        event.getLabel()).toString();
-            }
-            text = DateUtils.formatDate(context, dataString);
-            entryContextMenuInfo = new EntryContextMenuInfo(text, header,
-                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
-        } else if (dataItem instanceof RelationDataItem) {
-            final RelationDataItem relation = (RelationDataItem) dataItem;
-            final String dataString = relation.buildDataStringForDisplay(context, kind);
-            if (!TextUtils.isEmpty(dataString)) {
-                intent = new Intent(Intent.ACTION_SEARCH);
-                intent.putExtra(SearchManager.QUERY, dataString);
-                intent.setType(Contacts.CONTENT_TYPE);
-            }
-            header = res.getString(R.string.header_relation_entry);
-            subHeader = relation.getName();
-            entryContextMenuInfo = new EntryContextMenuInfo(subHeader, header,
-                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
-            if (relation.hasKindTypeColumn(kind)) {
-                text = Relation.getTypeLabel(res,
-                        relation.getKindTypeColumn(kind),
-                        relation.getLabel()).toString();
-            }
-        } else if (dataItem instanceof PhoneDataItem) {
-            final PhoneDataItem phone = (PhoneDataItem) dataItem;
-            String phoneLabel = null;
-            if (!TextUtils.isEmpty(phone.getNumber())) {
-                primaryContentDescription.append(res.getString(R.string.call_other)).append(" ");
-                header = sBidiFormatter.unicodeWrap(phone.buildDataStringForDisplay(context, kind),
-                        TextDirectionHeuristics.LTR);
-                entryContextMenuInfo = new EntryContextMenuInfo(header,
-                        res.getString(R.string.phoneLabelsGroup), dataItem.getMimeType(),
-                        dataItem.getId(), dataItem.isSuperPrimary());
-                if (phone.hasKindTypeColumn(kind)) {
-                    final int kindTypeColumn = phone.getKindTypeColumn(kind);
-                    final String label = phone.getLabel();
-                    phoneLabel = label;
-                    if (kindTypeColumn == Phone.TYPE_CUSTOM && TextUtils.isEmpty(label)) {
-                        text = "";
-                    } else {
-                        text = Phone.getTypeLabel(res, kindTypeColumn, label).toString();
-                        ///M:[for AAS]show Primary Number/Additional Number@{
-                        int subId = contactData.getIndicate();
-                        subHeader = GlobalEnv.getAasExtension().getSubheaderString(
-                                subId, dataItem.getContentValues().getAsInteger(Data.DATA2));
-                        text = (String) GlobalEnv.getAasExtension().getTypeLabel(
-                                dataItem.getContentValues().getAsInteger(Data.DATA2),
-                                (CharSequence) dataItem.getContentValues().getAsString(Data.DATA3),
-                                (String) text, subId);
-                        ///@}
-                        phoneLabel= text;
-                        primaryContentDescription.append(text).append(" ");
-                    }
-
-                }
-                primaryContentDescription.append(header);
-                phoneContentDescription = com.android.contacts.common.util.ContactDisplayUtils
-                        .getTelephoneTtsSpannable(primaryContentDescription.toString(), header);
-                icon = res.getDrawable(R.drawable.ic_phone_24dp);
-                iconResourceId = R.drawable.ic_phone_24dp;
-                if (PhoneCapabilityTester.isPhone(context)) {
-                    intent = CallUtil.getCallIntent(phone.getNumber());
-                }
-                /// M: mtk add isSupportSms() method to enable Sms dynamically.@{
-                if (PhoneCapabilityTester.isSupportSms(context)) {
-                    alternateIntent = new Intent(Intent.ACTION_SENDTO,
-                            Uri.fromParts(ContactsUtils.SCHEME_SMSTO, phone.getNumber(), null));
-
-                    alternateIcon = res.getDrawable(R.drawable.ic_message_24dp_mirrored);
-                    alternateContentDescription.append(res.getString(R.string.sms_custom, header));
-                }
-                /// @}
-                smsContentDescription = com.android.contacts.common.util.ContactDisplayUtils
-                        .getTelephoneTtsSpannable(alternateContentDescription.toString(), header);
-                int videoCapability = CallUtil.getVideoCallingAvailability(context);
-                boolean isPresenceEnabled =
-                        (videoCapability & CallUtil.VIDEO_CALLING_PRESENCE) != 0;
-                boolean isVideoEnabled = (videoCapability & CallUtil.VIDEO_CALLING_ENABLED) != 0;
-                ///M: Video Entry @{
-                isVideoEnabled = ExtensionManager.getInstance().getOp01Extension()
-                        .isVideoButtonEnabled(isVideoEnabled, contactData.getLookupUri(), context);
-                ///@}
-
-                if (CallUtil.isCallWithSubjectSupported(context)) {
-                    thirdIcon = res.getDrawable(R.drawable.ic_call_note_white_24dp);
-                    thirdAction = Entry.ACTION_CALL_WITH_SUBJECT;
-                    thirdContentDescription =
-                            res.getString(R.string.call_with_a_note);
-
-                    // Create a bundle containing the data the call subject dialog requires.
-                    thirdExtras = new Bundle();
-                    thirdExtras.putLong(CallSubjectDialog.ARG_PHOTO_ID,
-                            contactData.getPhotoId());
-                    thirdExtras.putParcelable(CallSubjectDialog.ARG_PHOTO_URI,
-                            UriUtils.parseUriOrNull(contactData.getPhotoUri()));
-                    thirdExtras.putParcelable(CallSubjectDialog.ARG_CONTACT_URI,
-                            contactData.getLookupUri());
-                    thirdExtras.putString(CallSubjectDialog.ARG_NAME_OR_NUMBER,
-                            contactData.getDisplayName());
-                    thirdExtras.putBoolean(CallSubjectDialog.ARG_IS_BUSINESS, false);
-                    thirdExtras.putString(CallSubjectDialog.ARG_NUMBER,
-                            phone.getNumber());
-                    thirdExtras.putString(CallSubjectDialog.ARG_DISPLAY_NUMBER,
-                            phone.getFormattedPhoneNumber());
-                    thirdExtras.putString(CallSubjectDialog.ARG_NUMBER_LABEL,
-                            phoneLabel);
-                } else if (isVideoEnabled|| ExtensionManager.getInstance()
-                        .getContactsCommonPresenceExtension().isShowVideoIcon()) {
-                    // Check to ensure carrier presence indicates the number supports video calling.
-                    int carrierPresence = dataItem.getCarrierPresence();
-                    boolean isPresent = (carrierPresence & Phone.CARRIER_PRESENCE_VT_CAPABLE) != 0;
-
-                    if ((isPresenceEnabled && isPresent) || !isPresenceEnabled) {
-                        thirdIcon = res.getDrawable(R.drawable.ic_videocam);
-                        thirdAction = Entry.ACTION_INTENT;
-                        thirdIntent = CallUtil.getVideoCallIntent(phone.getNumber(),
-                                CALL_ORIGIN_QUICK_CONTACTS_ACTIVITY);
-                        thirdContentDescription =
-                                res.getString(R.string.description_video_call);
-                    }
-                }
-                ExtensionManager.getInstance().getContactsCommonPresenceExtension().
-                    setVideoIconAlpha(phone.getNumber(), thirdIcon);
-            }
-        } else if (dataItem instanceof EmailDataItem) {
-            final EmailDataItem email = (EmailDataItem) dataItem;
-            final String address = email.getData();
-            if (!TextUtils.isEmpty(address)) {
-                primaryContentDescription.append(res.getString(R.string.email_other)).append(" ");
-                final Uri mailUri = Uri.fromParts(ContactsUtils.SCHEME_MAILTO, address, null);
-                intent = new Intent(Intent.ACTION_SENDTO, mailUri);
-                header = email.getAddress();
-                entryContextMenuInfo = new EntryContextMenuInfo(header,
-                        res.getString(R.string.emailLabelsGroup), dataItem.getMimeType(),
-                        dataItem.getId(), dataItem.isSuperPrimary());
-                if (email.hasKindTypeColumn(kind)) {
-                    text = Email.getTypeLabel(res, email.getKindTypeColumn(kind),
-                            email.getLabel()).toString();
-                    primaryContentDescription.append(text).append(" ");
-                }
-                primaryContentDescription.append(header);
-                icon = res.getDrawable(R.drawable.ic_email_24dp);
-                iconResourceId = R.drawable.ic_email_24dp;
-            }
-        } else if (dataItem instanceof StructuredPostalDataItem) {
-            StructuredPostalDataItem postal = (StructuredPostalDataItem) dataItem;
-            final String postalAddress = postal.getFormattedAddress();
-            if (!TextUtils.isEmpty(postalAddress)) {
-                primaryContentDescription.append(res.getString(R.string.map_other)).append(" ");
-                intent = StructuredPostalUtils.getViewPostalAddressIntent(postalAddress);
-                header = postal.getFormattedAddress();
-                entryContextMenuInfo = new EntryContextMenuInfo(header,
-                        res.getString(R.string.postalLabelsGroup), dataItem.getMimeType(),
-                        dataItem.getId(), dataItem.isSuperPrimary());
-                if (postal.hasKindTypeColumn(kind)) {
-                    text = StructuredPostal.getTypeLabel(res,
-                            postal.getKindTypeColumn(kind), postal.getLabel()).toString();
-                    primaryContentDescription.append(text).append(" ");
-                }
-                primaryContentDescription.append(header);
-                alternateIntent =
-                        StructuredPostalUtils.getViewPostalAddressDirectionsIntent(postalAddress);
-                alternateIcon = res.getDrawable(R.drawable.ic_directions_24dp);
-                alternateContentDescription.append(res.getString(
-                        R.string.content_description_directions)).append(" ").append(header);
-                icon = res.getDrawable(R.drawable.ic_place_24dp);
-                iconResourceId = R.drawable.ic_place_24dp;
-            }
-        } else if (dataItem instanceof SipAddressDataItem) {
-            final SipAddressDataItem sip = (SipAddressDataItem) dataItem;
-            final String address = sip.getSipAddress();
-            if (!TextUtils.isEmpty(address)) {
-                QuickContactUtils.setSipAddress(address);
-                primaryContentDescription.append(res.getString(R.string.call_other)).append(
-                        " ");
-                if (PhoneCapabilityTester.isSipPhone(context)) {
-                    final Uri callUri = Uri.fromParts(PhoneAccount.SCHEME_SIP, address, null);
-                    intent = CallUtil.getCallIntent(callUri);
-                }
-                header = address;
-                entryContextMenuInfo = new EntryContextMenuInfo(header,
-                        res.getString(R.string.phoneLabelsGroup), dataItem.getMimeType(),
-                        dataItem.getId(), dataItem.isSuperPrimary());
-                if (sip.hasKindTypeColumn(kind)) {
-                    text = SipAddress.getTypeLabel(res,
-                            sip.getKindTypeColumn(kind), sip.getLabel()).toString();
-                    primaryContentDescription.append(text).append(" ");
-                }
-                primaryContentDescription.append(header);
-                icon = res.getDrawable(R.drawable.ic_dialer_sip_black_24dp);
-                iconResourceId = R.drawable.ic_dialer_sip_black_24dp;
-            }
-        } else if (dataItem instanceof StructuredNameDataItem) {
-            // If the name is already set and this is not the super primary value then leave the
-            // current value. This way we show the super primary value when we are able to.
-            if (dataItem.isSuperPrimary() || aboutCardName.value == null
-                    || aboutCardName.value.isEmpty()) {
-                final String givenName = ((StructuredNameDataItem) dataItem).getGivenName();
-                if (!TextUtils.isEmpty(givenName)) {
-                    aboutCardName.value = res.getString(R.string.about_card_title) +
-                            " " + givenName;
-                } else {
-                    aboutCardName.value = res.getString(R.string.about_card_title);
-                }
-            }
-        } else if (dataItem instanceof ImsCallDataItem) { // M: add IMS Call
-            if (ContactsSystemProperties.MTK_VOLTE_SUPPORT &&
-                    ContactsSystemProperties.MTK_IMS_SUPPORT) {
-                final ImsCallDataItem ims = (ImsCallDataItem) dataItem;
-                String imsUri = ims.getUrl();
-                if (!TextUtils.isEmpty(imsUri)) {
-                    String imsLabel = ims.getLabel();
-                    Log.d(TAG, "imsUri: " + imsUri + ", imsLabel: " + imsLabel);
-                    intent = CallUtil.getCallIntent(Uri.fromParts(PhoneAccount.SCHEME_TEL,
-                            imsUri, null), null, Constants.DIAL_NUMBER_INTENT_IMS);
-                    icon = res.getDrawable(R.drawable.ic_dialer_ims_black);
-                    text = res.getString(R.string.imsCallLabelsGroup);
-                    header = imsUri;
-                }
-            }
-        /// M: Group member ship.
-        } else if (dataItem instanceof GroupMembershipDataItem) {
-            final GroupMembershipDataItem groupDataItem = (GroupMembershipDataItem) dataItem;
-            String groupTitle = QuickContactUtils.getGroupTitle(contactData.getGroupMetaData(),
-                    groupDataItem.getGroupRowId());
-            if (!TextUtils.isEmpty(groupTitle)) {
-                header = res.getString(R.string.contact_detail_group_list_title);
-                subHeader = groupTitle;
-            }
-        } else {
-            // Custom DataItem
-            header = dataItem.buildDataStringForDisplay(context, kind);
-            text = kind.typeColumn;
-            intent = new Intent(Intent.ACTION_VIEW);
-            final Uri uri = ContentUris.withAppendedId(Data.CONTENT_URI, dataItem.getId());
-            intent.setDataAndType(uri, dataItem.getMimeType());
-
-            if (intent != null) {
-                final String mimetype = intent.getType();
-
-                // Build advanced entry for known 3p types. Otherwise default to ResolveCache icon.
-                switch (mimetype) {
-                    case MIMETYPE_GPLUS_PROFILE:
-                        // If a secondDataItem is available, use it to build an entry with
-                        // alternate actions
-                        if (secondDataItem != null) {
-                            icon = res.getDrawable(R.drawable.ic_google_plus_24dp);
-                            alternateIcon = res.getDrawable(R.drawable.ic_add_to_circles_black_24);
-                            final GPlusOrHangoutsDataItemModel itemModel =
-                                    new GPlusOrHangoutsDataItemModel(intent, alternateIntent,
-                                            dataItem, secondDataItem, alternateContentDescription,
-                                            header, text, context);
-
-                            populateGPlusOrHangoutsDataItemModel(itemModel);
-                            intent = itemModel.intent;
-                            alternateIntent = itemModel.alternateIntent;
-                            alternateContentDescription = itemModel.alternateContentDescription;
-                            header = itemModel.header;
-                            text = itemModel.text;
-                        } else {
-                            if (GPLUS_PROFILE_DATA_5_ADD_TO_CIRCLE.equals(
-                                    intent.getDataString())) {
-                                icon = res.getDrawable(R.drawable.ic_add_to_circles_black_24);
-                            } else {
-                                icon = res.getDrawable(R.drawable.ic_google_plus_24dp);
-                            }
-                        }
-                        break;
-                    case MIMETYPE_HANGOUTS:
-                        // If a secondDataItem is available, use it to build an entry with
-                        // alternate actions
-                        if (secondDataItem != null) {
-                            icon = res.getDrawable(R.drawable.ic_hangout_24dp);
-                            alternateIcon = res.getDrawable(R.drawable.ic_hangout_video_24dp);
-                            final GPlusOrHangoutsDataItemModel itemModel =
-                                    new GPlusOrHangoutsDataItemModel(intent, alternateIntent,
-                                            dataItem, secondDataItem, alternateContentDescription,
-                                            header, text, context);
-
-                            populateGPlusOrHangoutsDataItemModel(itemModel);
-                            intent = itemModel.intent;
-                            alternateIntent = itemModel.alternateIntent;
-                            alternateContentDescription = itemModel.alternateContentDescription;
-                            header = itemModel.header;
-                            text = itemModel.text;
-                        } else {
-                            if (HANGOUTS_DATA_5_VIDEO.equals(intent.getDataString())) {
-                                icon = res.getDrawable(R.drawable.ic_hangout_video_24dp);
-                            } else {
-                                icon = res.getDrawable(R.drawable.ic_hangout_24dp);
-                            }
-                        }
-                        break;
-                    default:
-                        entryContextMenuInfo = new EntryContextMenuInfo(header, mimetype,
-                                dataItem.getMimeType(), dataItem.getId(),
-                                dataItem.isSuperPrimary());
-                        icon = ResolveCache.getInstance(context).getIcon(
-                                dataItem.getMimeType(), intent);
-                        // Call mutate to create a new Drawable.ConstantState for color filtering
-                        if (icon != null) {
-                            icon.mutate();
-                        }
-                        shouldApplyColor = false;
-                }
-            }
-        }
-
-        if (intent != null) {
-            // Do not set the intent is there are no resolves
-            if (!PhoneCapabilityTester.isIntentRegistered(context, intent)) {
-                intent = null;
-            }
-        }
-
-        if (alternateIntent != null) {
-            // Do not set the alternate intent is there are no resolves
-            if (!PhoneCapabilityTester.isIntentRegistered(context, alternateIntent)) {
-                alternateIntent = null;
-            } else if (TextUtils.isEmpty(alternateContentDescription)) {
-                // Attempt to use package manager to find a suitable content description if needed
-                alternateContentDescription.append(getIntentResolveLabel(alternateIntent, context));
-            }
-        }
-
-        // If the Entry has no visual elements, return null
-        if (icon == null && TextUtils.isEmpty(header) && TextUtils.isEmpty(subHeader) &&
-                subHeaderIcon == null && TextUtils.isEmpty(text) && textIcon == null) {
-            Log.d(TAG, "[dataItemToEntry] has no visual elements");
-            return null;
-        }
-
-        // Ignore dataIds from the Me profile.
-        final int dataId = dataItem.getId() > Integer.MAX_VALUE ?
-                -1 : (int) dataItem.getId();
-        Log.d(TAG, "[dataItemToEntry] end ");
-        return new Entry(dataId, icon, header, subHeader, subHeaderIcon, text, textIcon,
-                phoneContentDescription == null
-                        ? new SpannableString(primaryContentDescription.toString())
-                        : phoneContentDescription,
-                intent, alternateIcon, alternateIntent,
-                smsContentDescription == null
-                        ? new SpannableString(alternateContentDescription.toString())
-                        : smsContentDescription,
-                shouldApplyColor, isEditable,
-                entryContextMenuInfo, thirdIcon, thirdIntent, thirdContentDescription, thirdAction,
-                thirdExtras, iconResourceId);
-
-        /* M: add sim icon & sim name @{
-        return new Entry(dataId, icon, header, subHeader, subHeaderIcon, text, textIcon, null, null,
-                new SpannableString(primaryContentDescription.toString()),
-                intent, alternateIcon, alternateIntent,
-                smsContentDescription == null
-                        ? new SpannableString(alternateContentDescription.toString())
-                        : smsContentDescription,
-                shouldApplyColor, isEditable,
-                entryContextMenuInfo, thirdIcon, thirdIntent, thirdContentDescription, thirdAction,
-                thirdExtras, iconResourceId);
-         @} */
-    }
-
-    private List<Entry> dataItemsToEntries(List<DataItem> dataItems,
-            MutableString aboutCardTitleOut) {
-        Log.d(TAG, "[dataItemsToEntries]");
-        // Hangouts and G+ use two data items to create one entry.
-        if (dataItems.get(0).getMimeType().equals(MIMETYPE_GPLUS_PROFILE) ||
-                dataItems.get(0).getMimeType().equals(MIMETYPE_HANGOUTS)) {
-            return gPlusOrHangoutsDataItemsToEntries(dataItems);
-        } else {
-            final List<Entry> entries = new ArrayList<>();
-            for (DataItem dataItem : dataItems) {
-                final Entry entry = dataItemToEntry(dataItem, /* secondDataItem = */ null,
-                        this, mContactData, aboutCardTitleOut);
-                if (entry != null) {
-                    entries.add(entry);
-                }
-            }
-            return entries;
-        }
-    }
-
-    /**
-     * G+ and Hangout entries are unique in that a single ExpandingEntryCardView.Entry consists
-     * of two data items. This method attempts to build each entry using the two data items if
-     * they are available. If there are more or less than two data items, a fall back is used
-     * and each data item gets its own entry.
-     */
-    private List<Entry> gPlusOrHangoutsDataItemsToEntries(List<DataItem> dataItems) {
-        Log.d(TAG, "[gPlusOrHangoutsDataItemsToEntries] start");
-        final List<Entry> entries = new ArrayList<>();
-        final Map<Long, List<DataItem>> buckets = new HashMap<>();
-        // Put the data items into buckets based on the raw contact id
-        for (DataItem dataItem : dataItems) {
-            List<DataItem> bucket = buckets.get(dataItem.getRawContactId());
-            if (bucket == null) {
-                bucket = new ArrayList<>();
-                buckets.put(dataItem.getRawContactId(), bucket);
-            }
-            bucket.add(dataItem);
-        }
-
-        // Use the buckets to build entries. If a bucket contains two data items, build the special
-        // entry, otherwise fall back to the normal entry.
-        for (List<DataItem> bucket : buckets.values()) {
-            if (bucket.size() == 2) {
-                // Use the pair to build an entry
-                final Entry entry = dataItemToEntry(bucket.get(0),
-                        /* secondDataItem = */ bucket.get(1), this, mContactData,
-                        /* aboutCardName = */ null);
-                if (entry != null) {
-                    entries.add(entry);
-                }
-            } else {
-                for (DataItem dataItem : bucket) {
-                    final Entry entry = dataItemToEntry(dataItem, /* secondDataItem = */ null,
-                            this, mContactData, /* aboutCardName = */ null);
-                    if (entry != null) {
-                        entries.add(entry);
-                    }
-                }
-            }
-        }
-        Log.d(TAG, "[gPlusOrHangoutsDataItemsToEntries] end");
-        return entries;
-    }
-
-    /**
-     * Used for statically passing around G+ or Hangouts data items and entry fields to
-     * populateGPlusOrHangoutsDataItemModel.
-     */
-    private static final class GPlusOrHangoutsDataItemModel {
-        public Intent intent;
-        public Intent alternateIntent;
-        public DataItem dataItem;
-        public DataItem secondDataItem;
-        public StringBuilder alternateContentDescription;
-        public String header;
-        public String text;
-        public Context context;
-
-        public GPlusOrHangoutsDataItemModel(Intent intent, Intent alternateIntent,
-                DataItem dataItem,
-                DataItem secondDataItem, StringBuilder alternateContentDescription, String header,
-                String text, Context context) {
-            this.intent = intent;
-            this.alternateIntent = alternateIntent;
-            this.dataItem = dataItem;
-            this.secondDataItem = secondDataItem;
-            this.alternateContentDescription = alternateContentDescription;
-            this.header = header;
-            this.text = text;
-            this.context = context;
-        }
-    }
-
-    private static void populateGPlusOrHangoutsDataItemModel(
-            GPlusOrHangoutsDataItemModel dataModel) {
-        final Intent secondIntent = new Intent(Intent.ACTION_VIEW);
-        secondIntent.setDataAndType(ContentUris.withAppendedId(Data.CONTENT_URI,
-                dataModel.secondDataItem.getId()), dataModel.secondDataItem.getMimeType());
-        // There is no guarantee the order the data items come in. Second
-        // data item does not necessarily mean it's the alternate.
-        // Hangouts video and Add to circles should be alternate. Swap if needed
-        if (HANGOUTS_DATA_5_VIDEO.equals(
-                dataModel.dataItem.getContentValues().getAsString(Data.DATA5)) ||
-                GPLUS_PROFILE_DATA_5_ADD_TO_CIRCLE.equals(
-                        dataModel.dataItem.getContentValues().getAsString(Data.DATA5))) {
-            dataModel.alternateIntent = dataModel.intent;
-            dataModel.alternateContentDescription = new StringBuilder(dataModel.header);
-
-            dataModel.intent = secondIntent;
-            dataModel.header = dataModel.secondDataItem.buildDataStringForDisplay(dataModel.context,
-                    dataModel.secondDataItem.getDataKind());
-            dataModel.text = dataModel.secondDataItem.getDataKind().typeColumn;
-        } else if (HANGOUTS_DATA_5_MESSAGE.equals(
-                dataModel.dataItem.getContentValues().getAsString(Data.DATA5)) ||
-                GPLUS_PROFILE_DATA_5_VIEW_PROFILE.equals(
-                        dataModel.dataItem.getContentValues().getAsString(Data.DATA5))) {
-            dataModel.alternateIntent = secondIntent;
-            dataModel.alternateContentDescription = new StringBuilder(
-                    dataModel.secondDataItem.buildDataStringForDisplay(dataModel.context,
-                            dataModel.secondDataItem.getDataKind()));
-        }
-    }
-
-    private static String getIntentResolveLabel(Intent intent, Context context) {
-        final List<ResolveInfo> matches = context.getPackageManager().queryIntentActivities(intent,
-                PackageManager.MATCH_DEFAULT_ONLY);
-
-        // Pick first match, otherwise best found
-        ResolveInfo bestResolve = null;
-        final int size = matches.size();
-        if (size == 1) {
-            bestResolve = matches.get(0);
-        } else if (size > 1) {
-            bestResolve = ResolveCache.getInstance(context).getBestResolve(intent, matches);
-        }
-
-        if (bestResolve == null) {
-            return null;
-        }
-
-        return String.valueOf(bestResolve.loadLabel(context.getPackageManager()));
-    }
-
-    /**
-     * Asynchronously extract the most vibrant color from the PhotoView. Once extracted,
-     * apply this tint to {@link MultiShrinkScroller}. This operation takes about 20-30ms
-     * on a Nexus 5.
-     */
-    private void extractAndApplyTintFromPhotoViewAsynchronously() {
-        if (mScroller == null) {
-            Log.d(TAG, "[extractAndApplyTintFromPhotoViewAsynchronously] mScroller=null");
-            return;
-        }
-        final Drawable imageViewDrawable = mPhotoView.getDrawable();
-        new AsyncTask<Void, Void, MaterialPalette>() {
-            @Override
-            protected MaterialPalette doInBackground(Void... params) {
-                Log.d(TAG, "[extractAndApplyTintFromPhotoViewAsynchronously] doInBackground start");
-                if (mContactData == null) {
-                    Log.w(TAG, "[doInBackground] mContactData is null...");
-                }
-
-                if (imageViewDrawable instanceof BitmapDrawable && mContactData != null
-                        && mContactData.getThumbnailPhotoBinaryData() != null
-                        && mContactData.getThumbnailPhotoBinaryData().length > 0) {
-                    // Perform the color analysis on the thumbnail instead of the full sized
-                    // image, so that our results will be as similar as possible to the Bugle
-                    // app.
-                    final Bitmap bitmap = BitmapFactory.decodeByteArray(
-                            mContactData.getThumbnailPhotoBinaryData(), 0,
-                            mContactData.getThumbnailPhotoBinaryData().length);
-                    try {
-                        final int primaryColor = colorFromBitmap(bitmap);
-                        if (primaryColor != 0) {
-                            return mMaterialColorMapUtils.calculatePrimaryAndSecondaryColor(
-                                    primaryColor);
-                        }
-                    } finally {
-                        bitmap.recycle();
-                    }
-                }
-                if (imageViewDrawable instanceof LetterTileDrawable) {
-                    final int primaryColor = ((LetterTileDrawable) imageViewDrawable).getColor();
-                    return mMaterialColorMapUtils.calculatePrimaryAndSecondaryColor(primaryColor);
-                }
-                Log.d(TAG, "[extractAndApplyTintFromPhotoViewAsynchronously] doInBackground end");
-                return MaterialColorMapUtils.getDefaultPrimaryAndSecondaryColors(getResources());
-            }
-
-            @Override
-            protected void onPostExecute(MaterialPalette palette) {
-                super.onPostExecute(palette);
-                Log.d(TAG, "extractAndApplyTintFromPhotoViewAsynchronously [onPostExecute]");
-                //M:OP01 RCS will get photo from rcs server, and refresh thumbnail Photo.@{
-                mHasComputedThemeColor = ExtensionManager.getInstance().getRcsExtension().
-                        needUpdateContactPhoto(imageViewDrawable instanceof LetterTileDrawable,
-                        mHasComputedThemeColor);
-                /** @} */
-                if (mHasComputedThemeColor) {
-                    // If we had previously computed a theme color from the contact photo,
-                    // then do not update the theme color. Changing the theme color several
-                    // seconds after QC has started, as a result of an updated/upgraded photo,
-                    // is a jarring experience. On the other hand, changing the theme color after
-                    // a rotation or onNewIntent() is perfectly fine.
-                    return;
-                }
-                // Check that the Photo has not changed. If it has changed, the new tint
-                // color needs to be extracted
-                if (imageViewDrawable == mPhotoView.getDrawable()) {
-                    Log.d(TAG, "[extractAndApplyTintFromPhotoViewAsynchronously] onPostExecute"
-                            + "to update color and photo in suggestion card");
-                    mHasComputedThemeColor = true;
-                    setThemeColor(palette);
-                    // update color and photo in suggestion card
-                    onAggregationSuggestionChange();
-                }
-            }
-        }.execute();
-        Log.d(TAG, "[extractAndApplyTintFromPhotoViewAsynchronously] execute()");
-    }
-
-    private void setThemeColor(MaterialPalette palette) {
-        // If the color is invalid, use the predefined default
-        mColorFilterColor = palette.mPrimaryColor;
-        mScroller.setHeaderTintColor(mColorFilterColor);
-        mStatusBarColor = palette.mSecondaryColor;
-        updateStatusBarColor();
-
-        mColorFilter =
-                new PorterDuffColorFilter(mColorFilterColor, PorterDuff.Mode.SRC_ATOP);
-        mContactCard.setColorAndFilter(mColorFilterColor, mColorFilter);
-        mRecentCard.setColorAndFilter(mColorFilterColor, mColorFilter);
-        mAboutCard.setColorAndFilter(mColorFilterColor, mColorFilter);
-        mSuggestionsCancelButton.setTextColor(mColorFilterColor);
-
-        /// M: [for RCS-e]
-        if (mJoynCard != null) {
-            mJoynCard.setColorAndFilter(mColorFilterColor, mColorFilter);
-        }
-    }
-
-    private void updateStatusBarColor() {
-        if (mScroller == null || !CompatUtils.isLollipopCompatible()) {
-            return;
-        }
-        final int desiredStatusBarColor;
-        // Only use a custom status bar color if QuickContacts touches the top of the viewport.
-        if (mScroller.getScrollNeededToBeFullScreen() <= 0) {
-            desiredStatusBarColor = mStatusBarColor;
-        } else {
-            desiredStatusBarColor = Color.TRANSPARENT;
-        }
-        // Animate to the new color.
-        final ObjectAnimator animation = ObjectAnimator.ofInt(getWindow(), "statusBarColor",
-                getWindow().getStatusBarColor(), desiredStatusBarColor);
-        animation.setDuration(ANIMATION_STATUS_BAR_COLOR_CHANGE_DURATION);
-        animation.setEvaluator(new ArgbEvaluator());
-        animation.start();
-    }
-
-    private int colorFromBitmap(Bitmap bitmap) {
-        // Author of Palette recommends using 24 colors when analyzing profile photos.
-        final int NUMBER_OF_PALETTE_COLORS = 24;
-        final Palette palette = Palette.generate(bitmap, NUMBER_OF_PALETTE_COLORS);
-        if (palette != null && palette.getVibrantSwatch() != null) {
-            return palette.getVibrantSwatch().getRgb();
-        }
-        return 0;
-    }
-
-    private List<Entry> contactInteractionsToEntries(List<ContactInteraction> interactions) {
-        final List<Entry> entries = new ArrayList<>();
-        for (ContactInteraction interaction : interactions) {
-            if (interaction == null) {
-                continue;
-            }
-            entries.add(new Entry(/* id = */ -1,
-                    interaction.getIcon(this),
-                    interaction.getViewHeader(this),
-                    interaction.getViewBody(this),
-                    interaction.getBodyIcon(this),
-                    interaction.getViewFooter(this),
-                    interaction.getFooterIcon(this),
-                    /* M: add sim icon @ { */
-                    interaction.getSimIcon(this),
-                    interaction.getSimName(this),
-                    /* @ } */
-                    interaction.getContentDescription(this),
-                    interaction.getIntent(),
-                    /* alternateIcon = */ null,
-                    /* alternateIntent = */ null,
-                    /* alternateContentDescription = */ null,
-                    /* shouldApplyColor = */ true,
-                    /* isEditable = */ false,
-                    /* EntryContextMenuInfo = */ null,
-                    /* thirdIcon = */ null,
-                    /* thirdIntent = */ null,
-                    /* thirdContentDescription = */ null,
-                    /* thirdAction = */ Entry.ACTION_NONE,
-                    /* thirdActionExtras = */ null,
-                    interaction.getIconResourceId()));
-        }
-        return entries;
-    }
-
-    private final LoaderCallbacks<Contact> mLoaderContactCallbacks =
-            new LoaderCallbacks<Contact>() {
-        @Override
-        public void onLoaderReset(Loader<Contact> loader) {
-            Log.d(TAG, "[onLoaderReset], mContactData been set null");
-            mContactData = null;
-        }
-
-        @Override
-        public void onLoadFinished(Loader<Contact> loader, Contact data) {
-            Trace.beginSection("onLoadFinished()");
-            try {
-
-                if (isFinishing()) {
-                    return;
-                }
-                if (data.isError()) {
-                    // This means either the contact is invalid or we had an
-                    // internal error such as an acore crash.
-                    Log.i(TAG, "Failed to load contact: " + ((ContactLoader)loader).getLookupUri());
-                    Toast.makeText(QuickContactActivity.this, R.string.invalidContactMessage,
-                            Toast.LENGTH_LONG).show();
-                    finish();
-                    return;
-                }
-                if (data.isNotFound()) {
-                    Log.i(TAG, "No contact found: " + ((ContactLoader)loader).getLookupUri());
-                    if (!ExtensionManager.getInstance().getContactsPickerExtension()
-                            .openAddProfileScreen(mLookupUri, QuickContactActivity.this)) {
-                        Toast.makeText(QuickContactActivity.this, R.string.invalidContactMessage,
-                                Toast.LENGTH_LONG).show();
-                    }
-                    finish();
-                    return;
-                }
-                Log.d(TAG, "onLoadFinished " + " | data.getContactId() : "
-                        + data.getContactId() + " | data.getUri() : " + data.getUri());
-
-                bindContactData(data);
-
-                ///M:[for rcs] update Rcs contact on the top left@{
-                ExtensionManager.getInstance().getRcsExtension()
-                        .getQuickContactRcsScroller()
-                        .updateRcsContact(mContactLoader.getLookupUri(), true);
-                Log.d(TAG, "onLoadFinished end");
-                ///@}
-            } finally {
-                Trace.endSection();
-            }
-        }
-
-        @Override
-        public Loader<Contact> onCreateLoader(int id, Bundle args) {
-            if (mLookupUri == null) {
-                Log.wtf(TAG, "Lookup uri wasn't initialized. Loader was started too early");
-            }
-            // Load all contact data. We need loadGroupMetaData=true to determine whether the
-            // contact is invisible. If it is, we need to display an "Add to Contacts" MenuItem.
-            return new ContactLoader(getApplicationContext(), mLookupUri,
-                    true /*loadGroupMetaData*/, false /*loadInvitableAccountTypes*/,
-                    true /*postViewNotification*/, true /*computeFormattedPhoneNumber*/);
-        }
-    };
-
-    @Override
-    public void onBackPressed() {
-        if (mScroller != null) {
-            if (!mIsExitAnimationInProgress) {
-                mScroller.scrollOffBottom();
-            }
-        } else {
-            super.onBackPressed();
-        }
-    }
-
-    @Override
-    public void finish() {
-        super.finish();
-
-        // override transitions to skip the standard window animations
-        overridePendingTransition(0, 0);
-    }
-
-    private final LoaderCallbacks<List<ContactInteraction>> mLoaderInteractionsCallbacks =
-            new LoaderCallbacks<List<ContactInteraction>>() {
-
-        @Override
-        public Loader<List<ContactInteraction>> onCreateLoader(int id, Bundle args) {
-            Loader<List<ContactInteraction>> loader = null;
-            switch (id) {
-                case LOADER_SMS_ID:
-                    loader = new SmsInteractionsLoader(
-                            QuickContactActivity.this,
-                            args.getStringArray(KEY_LOADER_EXTRA_PHONES),
-                            MAX_SMS_RETRIEVE);
-                    break;
-                case LOADER_CALENDAR_ID:
-                    final String[] emailsArray = args.getStringArray(KEY_LOADER_EXTRA_EMAILS);
-                    List<String> emailsList = null;
-                    if (emailsArray != null) {
-                        emailsList = Arrays.asList(args.getStringArray(KEY_LOADER_EXTRA_EMAILS));
-                    }
-                    loader = new CalendarInteractionsLoader(
-                            QuickContactActivity.this,
-                            emailsList,
-                            MAX_FUTURE_CALENDAR_RETRIEVE,
-                            MAX_PAST_CALENDAR_RETRIEVE,
-                            FUTURE_MILLISECOND_TO_SEARCH_LOCAL_CALENDAR,
-                            PAST_MILLISECOND_TO_SEARCH_LOCAL_CALENDAR);
-                    break;
-                case LOADER_CALL_LOG_ID:
-                    loader = new CallLogInteractionsLoader(
-                            QuickContactActivity.this,
-                            args.getStringArray(KEY_LOADER_EXTRA_PHONES),
-                            MAX_CALL_LOG_RETRIEVE);
-            }
-            return loader;
-        }
-
-        @Override
-        public void onLoadFinished(Loader<List<ContactInteraction>> loader,
-                List<ContactInteraction> data) {
-            mRecentLoaderResults.put(loader.getId(), data);
-
-            if (isAllRecentDataLoaded()) {
-                bindRecentData();
-            }
-        }
-
-        @Override
-        public void onLoaderReset(Loader<List<ContactInteraction>> loader) {
-            mRecentLoaderResults.remove(loader.getId());
-        }
-    };
-
-    private boolean isAllRecentDataLoaded() {
-        return mRecentLoaderResults.size() == mRecentLoaderIds.length;
-    }
-
-    private void bindRecentData() {
-        final List<ContactInteraction> allInteractions = new ArrayList<>();
-        final List<List<Entry>> interactionsWrapper = new ArrayList<>();
-
-        // Serialize mRecentLoaderResults into a single list. This should be done on the main
-        // thread to avoid races against mRecentLoaderResults edits.
-        for (List<ContactInteraction> loaderInteractions : mRecentLoaderResults.values()) {
-            allInteractions.addAll(loaderInteractions);
-        }
-
-        mRecentDataTask = new AsyncTask<Void, Void, Void>() {
-            @Override
-            protected Void doInBackground(Void... params) {
-                Trace.beginSection("sort recent loader results");
-
-                // Sort the interactions by most recent
-                Collections.sort(allInteractions, new Comparator<ContactInteraction>() {
-                    @Override
-                    public int compare(ContactInteraction a, ContactInteraction b) {
-                        if (a == null && b == null) {
-                            return 0;
-                        }
-                        if (a == null) {
-                            return 1;
-                        }
-                        if (b == null) {
-                            return -1;
-                        }
-                        if (a.getInteractionDate() > b.getInteractionDate()) {
-                            return -1;
-                        }
-                        if (a.getInteractionDate() == b.getInteractionDate()) {
-                            return 0;
-                        }
-                        return 1;
-                    }
-                });
-
-                Trace.endSection();
-                Trace.beginSection("contactInteractionsToEntries");
-
-                // Wrap each interaction in its own list so that an icon is displayed for each entry
-                for (Entry contactInteraction : contactInteractionsToEntries(allInteractions)) {
-                    List<Entry> entryListWrapper = new ArrayList<>(1);
-                    entryListWrapper.add(contactInteraction);
-                    interactionsWrapper.add(entryListWrapper);
-                }
-
-                Trace.endSection();
-                Log.d(TAG, "[bindRecentData] doInBackground()");
-                return null;
-            }
-
-            @Override
-            protected void onPostExecute(Void aVoid) {
-                super.onPostExecute(aVoid);
-                Trace.beginSection("initialize recents card");
-
-                if (allInteractions.size() > 0) {
-                    mRecentCard.initialize(interactionsWrapper,
-                    /* numInitialVisibleEntries = */ MIN_NUM_COLLAPSED_RECENT_ENTRIES_SHOWN,
-                    /* isExpanded = */ mRecentCard.isExpanded(), /* isAlwaysExpanded = */ false,
-                            mExpandingEntryCardViewListener, mScroller);
-                    mRecentCard.setVisibility(View.VISIBLE);
-                } else {
-                    /// M: Fix ALPS01763309
-                    mRecentCard.setVisibility(View.GONE);
-                }
-
-                Trace.endSection();
-
-                // About card is initialized along with the contact card, but since it appears after
-                // the recent card in the UI, we hold off until making it visible until the recent
-                // card is also ready to avoid stuttering.
-                if (mAboutCard.shouldShow()) {
-                    mAboutCard.setVisibility(View.VISIBLE);
-                } else {
-                    mAboutCard.setVisibility(View.GONE);
-                }
-                mRecentDataTask = null;
-                Log.d(TAG, "[bindRecentData] onPostExecute(). size()=" + allInteractions.size());
-            }
-        };
-        mRecentDataTask.execute();
-    }
-
-    @Override
-    protected void onStop() {
-        super.onStop();
-
-        if (mEntriesAndActionsTask != null) {
-            // Once the activity is stopped, we will no longer want to bind mEntriesAndActionsTask's
-            // results on the UI thread. In some circumstances Activities are killed without
-            // onStop() being called. This is not a problem, because in these circumstances
-            // the entire process will be killed.
-            mEntriesAndActionsTask.cancel(/* mayInterruptIfRunning = */ false);
-        }
-        if (mRecentDataTask != null) {
-            mRecentDataTask.cancel(/* mayInterruptIfRunning = */ false);
-        }
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        if (mAggregationSuggestionEngine != null) {
-            mAggregationSuggestionEngine.quit();
-        }
-        ///M: Video Entry @{
-        ExtensionManager.getInstance().getOp01Extension().resetVideoState();
-        ///@}
-    }
-
-    /**
-     * M: sdn contact isn't possible to edit.
-     * Returns true if it is possible to edit the current contact.
-     */
-    private boolean isContactEditable() {
-        return mContactData != null && !mContactData.isDirectoryEntry() &&
-            !mContactData.isSdnContacts();
-    }
-
-    /**
-     * Returns true if it is possible to share the current contact.
-     */
-    private boolean isContactShareable() {
-        return mContactData != null && !mContactData.isDirectoryEntry();
-    }
-
-    /// M: add isEditingUserProfile flag for user profile feature
-    private Intent getEditContactIntent() {
-        return EditorIntents.createCompactEditContactIntent(
-                mContactData.getLookupUri(),
-                mHasComputedThemeColor
-                        ? new MaterialPalette(mColorFilterColor, mStatusBarColor) : null,
-                mContactData.getPhotoId());
-    }
-
-    private void editContact() {
-        mHasIntentLaunched = true;
-        mContactLoader.cacheResult();
-        startActivityForResult(getEditContactIntent(), REQUEST_CODE_CONTACT_EDITOR_ACTIVITY);
-    }
-
-    private void deleteContact() {
-        final Uri contactUri = mContactData.getLookupUri();
-        ContactDeletionInteraction.start(this, contactUri, /* finishActivityWhenDone =*/ true);
-    }
-
-    private void toggleStar(MenuItem starredMenuItem) {
-        // Make sure there is a contact
-        if (mContactData != null) {
-            // Read the current starred value from the UI instead of using the last
-            // loaded state. This allows rapid tapping without writing the same
-            // value several times
-            final boolean isStarred = starredMenuItem.isChecked();
-
-            // To improve responsiveness, swap out the picture (and tag) in the UI already
-            ContactDisplayUtils.configureStarredMenuItem(starredMenuItem,
-                    mContactData.isDirectoryEntry(), mContactData.isUserProfile(),
-                    !isStarred);
-
-            // Now perform the real save
-            final Intent intent = ContactSaveService.createSetStarredIntent(
-                    QuickContactActivity.this, mContactData.getLookupUri(), !isStarred);
-            startService(intent);
-
-            final CharSequence accessibilityText = !isStarred
-                    ? getResources().getText(R.string.description_action_menu_add_star)
-                    : getResources().getText(R.string.description_action_menu_remove_star);
-            // Accessibility actions need to have an associated view. We can't access the MenuItem's
-            // underlying view, so put this accessibility action on the root view.
-            mScroller.announceForAccessibility(accessibilityText);
-        }
-    }
-    ///M:
-     /**
-     * Calls into the contacts provider to get a pre-authorized version of the given URI.
-     */
-    private Uri getPreAuthorizedUri(Uri uri) {
-        final Bundle uriBundle = new Bundle();
-        uriBundle.putParcelable(ContactsContract.Authorization.KEY_URI_TO_AUTHORIZE, uri);
-        final Bundle authResponse = getContentResolver().call(
-                ContactsContract.AUTHORITY_URI,
-                ContactsContract.Authorization.AUTHORIZATION_METHOD,
-                null,
-                uriBundle);
-        if (authResponse != null) {
-            return (Uri) authResponse.getParcelable(
-                    ContactsContract.Authorization.KEY_AUTHORIZED_URI);
-        } else {
-            return uri;
-        }
-    }
-
-    private void shareContact() {
-        Log.d(TAG, "[shareContact]");
-        final String lookupKey = mContactData.getLookupKey();
-        Uri shareUri = Uri.withAppendedPath(Contacts.CONTENT_VCARD_URI, lookupKey);
-        final Intent intent = new Intent(Intent.ACTION_SEND);
-        intent.setType(Contacts.CONTENT_VCARD_TYPE);
-        if (mContactData.isUserProfile()) {
-            // User is sharing the profile.  We don't want to force the receiver to have
-            // the highly-privileged READ_PROFILE permission, so we need to request a
-            // pre-authorized URI from the provider.
-            shareUri = getPreAuthorizedUri(shareUri);
-            /** M for ALPS01752410 @{*/
-            intent.putExtra("userProfile", "true");
-        } else {
-            intent.putExtra("contactId", String.valueOf(mContactData.getContactId()));
-            /** @} */
-        }
-        intent.putExtra(Intent.EXTRA_STREAM, shareUri);
-        /// M: Bug fix ALPS01749969, google default bug, need add the extra ARG_CALLING_ACTIVITY.
-        intent.putExtra(VCardCommonArguments.ARG_CALLING_ACTIVITY,
-                PeopleActivity.class.getName());
-
-        // Launch chooser to share contact via
-        final CharSequence chooseTitle = getText(R.string.share_via);
-        final Intent chooseIntent = Intent.createChooser(intent, chooseTitle);
-
-        try {
-            mHasIntentLaunched = true;
-            ImplicitIntentsUtil.startActivityOutsideApp(this, chooseIntent);
-        } catch (final ActivityNotFoundException ex) {
-            Toast.makeText(this, R.string.share_error, Toast.LENGTH_SHORT).show();
-        }
-    }
-
-    /**
-     * Creates a launcher shortcut with the current contact.
-     */
-    private void createLauncherShortcutWithContact() {
-        final ShortcutIntentBuilder builder = new ShortcutIntentBuilder(this,
-                new OnShortcutIntentCreatedListener() {
-
-                    @Override
-                    public void onShortcutIntentCreated(Uri uri, Intent shortcutIntent) {
-                        // Broadcast the shortcutIntent to the launcher to create a
-                        // shortcut to this contact
-                        shortcutIntent.setAction(ACTION_INSTALL_SHORTCUT);
-                        QuickContactActivity.this.sendBroadcast(shortcutIntent);
-
-                        // Send a toast to give feedback to the user that a shortcut to this
-                        // contact was added to the launcher.
-                        final String displayName = shortcutIntent
-                                .getStringExtra(Intent.EXTRA_SHORTCUT_NAME);
-                        final String toastMessage = TextUtils.isEmpty(displayName)
-                                ? getString(R.string.createContactShortcutSuccessful_NoName)
-                                : getString(R.string.createContactShortcutSuccessful, displayName);
-                        Toast.makeText(QuickContactActivity.this, toastMessage,
-                                Toast.LENGTH_SHORT).show();
-                    }
-
-                });
-        builder.createContactShortcutIntent(mContactData.getLookupUri());
-    }
-
-    private boolean isShortcutCreatable() {
-        if (mContactData == null || mContactData.isUserProfile() ||
-                mContactData.isDirectoryEntry()) {
-            return false;
-        }
-        final Intent createShortcutIntent = new Intent();
-        createShortcutIntent.setAction(ACTION_INSTALL_SHORTCUT);
-        final List<ResolveInfo> receivers = getPackageManager()
-                .queryBroadcastReceivers(createShortcutIntent, 0);
-        return receivers != null && receivers.size() > 0;
-    }
-
-    @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
-        final MenuInflater inflater = getMenuInflater();
-        inflater.inflate(R.menu.quickcontact, menu);
-        return true;
-    }
-
-    @Override
-    public boolean onPrepareOptionsMenu(Menu menu) {
-        if (mContactData != null) {
-            final MenuItem starredMenuItem = menu.findItem(R.id.menu_star);
-            ContactDisplayUtils.configureStarredMenuItem(starredMenuItem,
-                    mContactData.isDirectoryEntry(), mContactData.isUserProfile(),
-                    mContactData.getStarred());
-
-            /// M: Disable sim contact star menu.
-            if (mContactData.getIndicate() > 0) {
-                starredMenuItem.setVisible(false);
-            }
-
-            final MenuItem editMenuItem = menu.findItem(R.id.menu_edit);
-
-            // Configure edit MenuItem
-            /// M: hide edit nenu if it is a sdn contact.
-            Log.d(TAG, "[onPrepareOptionsMenu] is sdn contact: " + mContactData.isSdnContacts());
-            if (mContactData.isSdnContacts()) {
-                editMenuItem.setVisible(false);
-            } else {
-                editMenuItem.setVisible(true);
-                editMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
-                if (DirectoryContactUtil.isDirectoryContact(mContactData) ||
-                        InvisibleContactUtil.isInvisibleAndAddable(mContactData, this)) {
-                    editMenuItem.setIcon(R.drawable.ic_person_add_tinted_24dp);
-                    editMenuItem.setTitle(R.string.menu_add_contact);
-                } else if (isContactEditable()) {
-                    editMenuItem.setIcon(R.drawable.ic_create_24dp);
-                    editMenuItem.setTitle(R.string.menu_editContact);
-                } else {
-                    editMenuItem.setVisible(false);
-                }
-            }
-
-            final MenuItem deleteMenuItem = menu.findItem(R.id.menu_delete);
-            deleteMenuItem.setVisible(isContactEditable() && !mContactData.isUserProfile());
-
-            final MenuItem shareMenuItem = menu.findItem(R.id.menu_share);
-            shareMenuItem.setVisible(isContactShareable());
-
-            final MenuItem shortcutMenuItem = menu.findItem(R.id.menu_create_contact_shortcut);
-            /// M: hide the shortcut menu when it is sim contact.
-            if (mContactData != null && mContactData.getIndicate() >= 0) {
-                shortcutMenuItem.setVisible(false);
-                Log.d(TAG, "[[onPrepareOptionsMenu]] contact indicator: " +
-                        mContactData.getIndicate());
-            } else {
-                shortcutMenuItem.setVisible(isShortcutCreatable());
-            }
-            final MenuItem helpMenu = menu.findItem(R.id.menu_help);
-            helpMenu.setVisible(HelpUtils.isHelpAndFeedbackAvailable());
-            //M:OP01 RCS will add quick contact menu item @{
-            ExtensionManager.getInstance().getRcsExtension().
-                    addQuickContactMenuOptions(menu, mLookupUri, this);
-            /** @} */
-            Log.d(TAG, "[onPrepareOptionsMenu] return true");
-            return true;
-        }
-        Log.d(TAG, "[onPrepareOptionsMenu] return false");
-        return false;
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        Log.d(TAG, "[onOptionsItemSelected] item = " + item.getTitle());
-        switch (item.getItemId()) {
-            case R.id.menu_star:
-                toggleStar(item);
-                return true;
-            case R.id.menu_edit:
-                if (DirectoryContactUtil.isDirectoryContact(mContactData)) {
-                    // This action is used to launch the contact selector, with the option of
-                    // creating a new contact. Creating a new contact is an INSERT, while selecting
-                    // an exisiting one is an edit. The fields in the edit screen will be
-                    // prepopulated with data.
-
-                    final Intent intent = new Intent(Intent.ACTION_INSERT_OR_EDIT);
-                    intent.setType(Contacts.CONTENT_ITEM_TYPE);
-
-                    ArrayList<ContentValues> values = mContactData.getContentValues();
-
-                    // Only pre-fill the name field if the provided display name is an nickname
-                    // or better (e.g. structured name, nickname)
-                    if (mContactData.getDisplayNameSource() >= DisplayNameSources.NICKNAME) {
-                        intent.putExtra(Intents.Insert.NAME, mContactData.getDisplayName());
-                    } else if (mContactData.getDisplayNameSource()
-                            == DisplayNameSources.ORGANIZATION) {
-                        // This is probably an organization. Instead of copying the organization
-                        // name into a name entry, copy it into the organization entry. This
-                        // way we will still consider the contact an organization.
-                        final ContentValues organization = new ContentValues();
-                        organization.put(Organization.COMPANY, mContactData.getDisplayName());
-                        organization.put(Data.MIMETYPE, Organization.CONTENT_ITEM_TYPE);
-                        values.add(organization);
-                    }
-
-                    // Last time used and times used are aggregated values from the usage stat
-                    // table. They need to be removed from data values so the SQL table can insert
-                    // properly
-                    for (ContentValues value : values) {
-                        value.remove(Data.LAST_TIME_USED);
-                        value.remove(Data.TIMES_USED);
-                    }
-                    intent.putExtra(Intents.Insert.DATA, values);
-
-                    // If the contact can only export to the same account, add it to the intent.
-                    // Otherwise the ContactEditorFragment will show a dialog for selecting an
-                    // account.
-                    if (mContactData.getDirectoryExportSupport() ==
-                            Directory.EXPORT_SUPPORT_SAME_ACCOUNT_ONLY) {
-                        intent.putExtra(Intents.Insert.EXTRA_ACCOUNT,
-                                new Account(mContactData.getDirectoryAccountName(),
-                                        mContactData.getDirectoryAccountType()));
-                        intent.putExtra(Intents.Insert.EXTRA_DATA_SET,
-                                mContactData.getRawContacts().get(0).getDataSet());
-                    }
-
-                    // Add this flag to disable the delete menu option on directory contact joins
-                    // with local contacts. The delete option is ambiguous when joining contacts.
-                    intent.putExtra(ContactEditorFragment.INTENT_EXTRA_DISABLE_DELETE_MENU_OPTION,
-                            true);
-
-                    QuickContactUtils.addSipExtra(intent);
-                    startActivityForResult(intent, REQUEST_CODE_CONTACT_SELECTION_ACTIVITY);
-                } else if (InvisibleContactUtil.isInvisibleAndAddable(mContactData, this)) {
-                    InvisibleContactUtil.addToDefaultGroup(mContactData, this);
-                } else if (isContactEditable()) {
-                    editContact();
-                }
-                return true;
-            case R.id.menu_delete:
-                if (isContactEditable()) {
-                deleteContact();
-                }
-                return true;
-            case R.id.menu_share:
-                if (isContactShareable()) {
-                    shareContact();
-                }
-                return true;
-            case R.id.menu_create_contact_shortcut:
-                if (isShortcutCreatable()) {
-                createLauncherShortcutWithContact();
-                }
-                return true;
-            case R.id.menu_help:
-                HelpUtils.launchHelpAndFeedbackForContactScreen(this);
-                return true;
-            default:
-                return super.onOptionsItemSelected(item);
-        }
-    }
-
-    /// M: ALPS02782438.not support to show email for sim,Ruim and Usim which not support email
-    /// field. @{
-    private boolean isSupportShowEmailData(Contact contactsData) {
-        Log.d(TAG, "[isSupportShowEmailData] data : " + contactsData);
-        if (contactsData == null) {
-            return false;
-        }
-        String accoutType = contactsData.getRawContacts().get(0).getAccountTypeString();
-        Log.d(TAG, "[isSupportShowEmailData] accoutType : " + accoutType);
-        if (AccountTypeUtils.ACCOUNT_TYPE_SIM.equals(accoutType) ||
-                AccountTypeUtils.ACCOUNT_TYPE_RUIM.equals(accoutType)) {
-            Log.i(TAG, "[isSupportShowEmailData] Ruim or sim not support email! ");
-            return false;
-        }
-        if (AccountTypeUtils.ACCOUNT_TYPE_USIM.equals(accoutType)) {
-            String accountName = contactsData.getRawContacts().get(0).getAccountName();
-            int subId = AccountTypeUtils.getSubIdBySimAccountName(getApplicationContext(),
-                    accountName);
-            int emailCount = SimCardUtils.getIccCardEmailCount(subId);
-            Log.d(TAG, "[isSupportShowEmailData] Usim type, accountName: " + accountName +
-                    ",subId: " + subId + ",emailCount: " + emailCount);
-            if (emailCount <= 0) {
-                Log.i(TAG, "[isSupportShowEmailData] Usim not support email field,remove it!!");
-                return false;
-            }
-        }
-        return true;
-    }
-    /// @}
-}
Index: vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/widget/MultiShrinkScroller.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/widget/MultiShrinkScroller.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/widget/MultiShrinkScroller.java	(revision 8170)
@@ -1,1404 +0,0 @@
-package com.android.contacts.widget;
-
-import android.app.Activity;
-import com.android.contacts.R;
-import com.android.contacts.common.compat.CompatUtils;
-import com.android.contacts.compat.EdgeEffectCompat;
-import com.android.contacts.quickcontact.ExpandingEntryCardView;
-import com.android.contacts.test.NeededForReflection;
-import com.android.contacts.util.SchedulingUtils;
-
-import android.animation.Animator;
-import android.animation.Animator.AnimatorListener;
-import android.animation.AnimatorListenerAdapter;
-import android.animation.ObjectAnimator;
-import android.animation.ValueAnimator;
-import android.animation.ValueAnimator.AnimatorUpdateListener;
-import android.content.Context;
-import android.content.res.TypedArray;
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.ColorMatrix;
-import android.graphics.ColorMatrixColorFilter;
-import android.graphics.drawable.GradientDrawable;
-import android.hardware.display.DisplayManager;
-import android.net.Uri;
-import android.os.Trace;
-import android.support.v4.view.ViewCompat;
-import android.support.v4.view.animation.PathInterpolatorCompat;
-import android.util.AttributeSet;
-import android.util.TypedValue;
-import android.view.Display;
-import android.view.Gravity;
-import android.view.MotionEvent;
-import android.view.VelocityTracker;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewConfiguration;
-import android.view.animation.AnimationUtils;
-import android.view.animation.Interpolator;
-import android.widget.EdgeEffect;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.Scroller;
-import android.widget.ScrollView;
-import android.widget.TextView;
-import android.widget.Toolbar;
-
-import com.mediatek.contacts.ExtensionManager;
-
-/**
- * A custom {@link ViewGroup} that operates similarly to a {@link ScrollView}, except with multiple
- * subviews. These subviews are scrolled or shrinked one at a time, until each reaches their
- * minimum or maximum value.
- *
- * MultiShrinkScroller is designed for a specific problem. As such, this class is designed to be
- * used with a specific layout file: quickcontact_activity.xml. MultiShrinkScroller expects subviews
- * with specific ID values.
- *
- * MultiShrinkScroller's code is heavily influenced by ScrollView. Nonetheless, several ScrollView
- * features are missing. For example: handling of KEYCODES, OverScroll bounce and saving
- * scroll state in savedInstanceState bundles.
- *
- * Before copying this approach to nested scrolling, consider whether something simpler & less
- * customized will work for you. For example, see the re-usable StickyHeaderListView used by
- * WifiSetupActivity (very nice). Alternatively, check out Google+'s cover photo scrolling or
- * Android L's built in nested scrolling support. I thought I needed a more custom ViewGroup in
- * order to track velocity, modify EdgeEffect color & perform the originally specified animations.
- * As a result this ViewGroup has non-standard talkback and keyboard support.
- */
-public class MultiShrinkScroller extends FrameLayout {
-
-    /**
-     * 1000 pixels per second. Ie, 1 pixel per millisecond.
-     */
-    private static final int PIXELS_PER_SECOND = 1000;
-
-    /**
-     * Length of the acceleration animations. This value was taken from ValueAnimator.java.
-     */
-    private static final int EXIT_FLING_ANIMATION_DURATION_MS = 250;
-
-    /**
-     * In portrait mode, the height:width ratio of the photo's starting height.
-     */
-    private static final float INTERMEDIATE_HEADER_HEIGHT_RATIO = 0.6f;
-
-    /**
-     * Color blending will only be performed on the contact photo once the toolbar is compressed
-     * to this ratio of its full height.
-     */
-    private static final float COLOR_BLENDING_START_RATIO = 0.5f;
-
-    private static final float SPRING_DAMPENING_FACTOR = 0.01f;
-
-    /**
-     * When displaying a letter tile drawable, this alpha value should be used at the intermediate
-     * toolbar height.
-     */
-    private static final float DESIRED_INTERMEDIATE_LETTER_TILE_ALPHA = 0.8f;
-
-    private float[] mLastEventPosition = { 0, 0 };
-    private VelocityTracker mVelocityTracker;
-    private boolean mIsBeingDragged = false;
-    private boolean mReceivedDown = false;
-    /**
-     * Did the current downwards fling/scroll-animation start while we were fullscreen?
-     */
-    private boolean mIsFullscreenDownwardsFling = false;
-
-    private ScrollView mScrollView;
-    private View mScrollViewChild;
-    private View mToolbar;
-    private QuickContactImageView mPhotoView;
-    private View mPhotoViewContainer;
-    private View mTransparentView;
-    private MultiShrinkScrollerListener mListener;
-    private TextView mLargeTextView;
-    private TextView mPhoneticNameView;
-    private View mTitleAndPhoneticNameView;
-    private View mPhotoTouchInterceptOverlay;
-    /** Contains desired size & vertical offset of the title, once the header is fully compressed */
-    private TextView mInvisiblePlaceholderTextView;
-    private View mTitleGradientView;
-    private View mActionBarGradientView;
-    private View mStartColumn;
-    private int mHeaderTintColor;
-    private int mMaximumHeaderHeight;
-    private int mMinimumHeaderHeight;
-    /**
-     * When the contact photo is tapped, it is resized to max size or this size. This value also
-     * sometimes represents the maximum achievable header size achieved by scrolling. To enforce
-     * this maximum in scrolling logic, always access this value via
-     * {@link #getMaximumScrollableHeaderHeight}.
-     */
-    private int mIntermediateHeaderHeight;
-    /**
-     * If true, regular scrolling can expand the header beyond mIntermediateHeaderHeight. The
-     * header, that contains the contact photo, can expand to a height equal its width.
-     */
-    private boolean mIsOpenContactSquare;
-    private int mMaximumHeaderTextSize;
-    private int mMaximumPhoneticNameViewHeight;
-    private int mMaximumFullNameViewHeight;
-    private int mCollapsedTitleBottomMargin;
-    private int mCollapsedTitleStartMargin;
-    private int mMinimumPortraitHeaderHeight;
-    private int mMaximumPortraitHeaderHeight;
-    /**
-     * True once the header has touched the top of the screen at least once.
-     */
-    private boolean mHasEverTouchedTheTop;
-    private boolean mIsTouchDisabledForDismissAnimation;
-    private boolean mIsTouchDisabledForSuppressLayout;
-
-    private final Scroller mScroller;
-    private final EdgeEffect mEdgeGlowBottom;
-    private final EdgeEffect mEdgeGlowTop;
-    private final int mTouchSlop;
-    private final int mMaximumVelocity;
-    private final int mMinimumVelocity;
-    private final int mDismissDistanceOnScroll;
-    private final int mDismissDistanceOnRelease;
-    private final int mSnapToTopSlopHeight;
-    private final int mTransparentStartHeight;
-    private final int mMaximumTitleMargin;
-    private final float mToolbarElevation;
-    /// M: bug fix for ALPS01768247
-    private boolean mIsTwoPanel;
-    private final float mLandscapePhotoRatio;
-    private final int mActionBarSize;
-
-    // Objects used to perform color filtering on the header. These are stored as fields for
-    // the sole purpose of avoiding "new" operations inside animation loops.
-    private final ColorMatrix mWhitenessColorMatrix = new ColorMatrix();
-    private final ColorMatrix mColorMatrix = new ColorMatrix();
-    private final float[] mAlphaMatrixValues = {
-            0, 0, 0, 0, 0,
-            0, 0, 0, 0, 0,
-            0, 0, 0, 0, 0,
-            0, 0, 0, 1, 0
-    };
-    private final ColorMatrix mMultiplyBlendMatrix = new ColorMatrix();
-    private final float[] mMultiplyBlendMatrixValues = {
-            0, 0, 0, 0, 0,
-            0, 0, 0, 0, 0,
-            0, 0, 0, 0, 0,
-            0, 0, 0, 1, 0
-    };
-
-    private final Interpolator mTextSizePathInterpolator =
-            PathInterpolatorCompat.create(0.16f, 0.4f, 0.2f, 1);
-
-    private final int[] mGradientColors = new int[] {0,0x88000000};
-    private GradientDrawable mTitleGradientDrawable = new GradientDrawable(
-            GradientDrawable.Orientation.TOP_BOTTOM, mGradientColors);
-    private GradientDrawable mActionBarGradientDrawable = new GradientDrawable(
-            GradientDrawable.Orientation.BOTTOM_TOP, mGradientColors);
-
-    public interface MultiShrinkScrollerListener {
-        void onScrolledOffBottom();
-
-        void onStartScrollOffBottom();
-
-        void onTransparentViewHeightChange(float ratio);
-
-        void onEntranceAnimationDone();
-
-        void onEnterFullscreen();
-
-        void onExitFullscreen();
-    }
-
-    private final AnimatorListener mSnapToBottomListener = new AnimatorListenerAdapter() {
-        @Override
-        public void onAnimationEnd(Animator animation) {
-            if (getScrollUntilOffBottom() > 0 && mListener != null) {
-                // Due to a rounding error, after the animation finished we haven't fully scrolled
-                // off the screen. Lie to the listener: tell it that we did scroll off the screen.
-                mListener.onScrolledOffBottom();
-                // No other messages need to be sent to the listener.
-                mListener = null;
-            }
-        }
-    };
-
-    /**
-     * Interpolator from android.support.v4.view.ViewPager. Snappier and more elastic feeling
-     * than the default interpolator.
-     */
-    private static final Interpolator sInterpolator = new Interpolator() {
-
-        /**
-         * {@inheritDoc}
-         */
-        @Override
-        public float getInterpolation(float t) {
-            t -= 1.0f;
-            return t * t * t * t * t + 1.0f;
-        }
-    };
-
-    public MultiShrinkScroller(Context context) {
-        this(context, null);
-    }
-
-    public MultiShrinkScroller(Context context, AttributeSet attrs) {
-        this(context, attrs, 0);
-    }
-
-    public MultiShrinkScroller(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-
-        final ViewConfiguration configuration = ViewConfiguration.get(context);
-        setFocusable(false);
-        // Drawing must be enabled in order to support EdgeEffect
-        setWillNotDraw(/* willNotDraw = */ false);
-
-        mEdgeGlowBottom = new EdgeEffect(context);
-        mEdgeGlowTop = new EdgeEffect(context);
-        mScroller = new Scroller(context, sInterpolator);
-        mTouchSlop = configuration.getScaledTouchSlop();
-        mMinimumVelocity = configuration.getScaledMinimumFlingVelocity();
-        mMaximumVelocity = configuration.getScaledMaximumFlingVelocity();
-        mTransparentStartHeight = (int) getResources().getDimension(
-                R.dimen.quickcontact_starting_empty_height);
-        mToolbarElevation = getResources().getDimension(
-                R.dimen.quick_contact_toolbar_elevation);
-        mIsTwoPanel = getResources().getBoolean(R.bool.quickcontact_two_panel);
-        mMaximumTitleMargin = (int) getResources().getDimension(
-                R.dimen.quickcontact_title_initial_margin);
-
-        mDismissDistanceOnScroll = (int) getResources().getDimension(
-                R.dimen.quickcontact_dismiss_distance_on_scroll);
-        mDismissDistanceOnRelease = (int) getResources().getDimension(
-                R.dimen.quickcontact_dismiss_distance_on_release);
-        mSnapToTopSlopHeight = (int) getResources().getDimension(
-                R.dimen.quickcontact_snap_to_top_slop_height);
-
-        final TypedValue photoRatio = new TypedValue();
-        getResources().getValue(R.dimen.quickcontact_landscape_photo_ratio, photoRatio,
-                            /* resolveRefs = */ true);
-        mLandscapePhotoRatio = photoRatio.getFloat();
-
-        final TypedArray attributeArray = context.obtainStyledAttributes(
-                new int[]{android.R.attr.actionBarSize});
-        mActionBarSize = attributeArray.getDimensionPixelSize(0, 0);
-        mMinimumHeaderHeight = mActionBarSize;
-        // This value is approximately equal to the portrait ActionBar size. It isn't exactly the
-        // same, since the landscape and portrait ActionBar sizes can be different.
-        mMinimumPortraitHeaderHeight = mMinimumHeaderHeight;
-        attributeArray.recycle();
-    }
-
-    /**
-     * This method must be called inside the Activity's OnCreate.
-     */
-    public void initialize(MultiShrinkScrollerListener listener, boolean isOpenContactSquare,
-                final int maximumHeaderTextSize, final boolean shouldUpdateNameViewHeight) {
-        mScrollView = (ScrollView) findViewById(R.id.content_scroller);
-        mScrollViewChild = findViewById(R.id.card_container);
-        mToolbar = findViewById(R.id.toolbar_parent);
-        mPhotoViewContainer = findViewById(R.id.toolbar_parent);
-        mTransparentView = findViewById(R.id.transparent_view);
-        mLargeTextView = (TextView) findViewById(R.id.large_title);
-        mPhoneticNameView = (TextView) findViewById(R.id.phonetic_name);
-        mTitleAndPhoneticNameView = findViewById(R.id.title_and_phonetic_name);
-        mInvisiblePlaceholderTextView = (TextView) findViewById(R.id.placeholder_textview);
-        mStartColumn = findViewById(R.id.empty_start_column);
-        // Touching the empty space should close the card
-        if (mStartColumn != null) {
-            mStartColumn.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    scrollOffBottom();
-                }
-            });
-            findViewById(R.id.empty_end_column).setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    scrollOffBottom();
-                }
-            });
-        }
-        mListener = listener;
-        mIsOpenContactSquare = isOpenContactSquare;
-
-        mPhotoView = (QuickContactImageView) findViewById(R.id.photo);
-
-        mTitleGradientView = findViewById(R.id.title_gradient);
-        mTitleGradientView.setBackground(mTitleGradientDrawable);
-        mActionBarGradientView = findViewById(R.id.action_bar_gradient);
-        mActionBarGradientView.setBackground(mActionBarGradientDrawable);
-        mCollapsedTitleStartMargin = ((Toolbar) findViewById(R.id.toolbar)).getContentInsetStart();
-
-        mPhotoTouchInterceptOverlay = findViewById(R.id.photo_touch_intercept_overlay);
-        if (!mIsTwoPanel) {
-            mPhotoTouchInterceptOverlay.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    expandHeader();
-                }
-            });
-        }
-
-        SchedulingUtils.doOnPreDraw(this, /* drawNextFrame = */ false, new Runnable() {
-            @Override
-            public void run() {
-                /** M: Bug Fix for ALPS1747395 @{ */
-                if (getContext() == null) {
-                    return;
-                }
-                /** }@ */
-                /// M: bug fix for ALPS01768247
-                mIsTwoPanel = getResources().getBoolean(R.bool.quickcontact_two_panel);
-                if (!mIsTwoPanel) {
-                    // We never want the height of the photo view to exceed its width.
-                    mMaximumHeaderHeight = mPhotoViewContainer.getWidth();
-                    mIntermediateHeaderHeight = (int) (mMaximumHeaderHeight
-                            * INTERMEDIATE_HEADER_HEIGHT_RATIO);
-                }
-                mMaximumPortraitHeaderHeight = mIsTwoPanel ? getHeight()
-                        : mPhotoViewContainer.getWidth();
-                setHeaderHeight(getMaximumScrollableHeaderHeight());
-                if (shouldUpdateNameViewHeight) {
-                    mMaximumHeaderTextSize = mTitleAndPhoneticNameView.getHeight();
-                    mMaximumFullNameViewHeight = mLargeTextView.getHeight();
-                    // We cannot rely on mPhoneticNameView.getHeight() since it could be 0
-                    final int phoneticNameSize = getResources().getDimensionPixelSize(
-                            R.dimen.quickcontact_maximum_phonetic_name_size);
-                    final int fullNameSize = getResources().getDimensionPixelSize(
-                            R.dimen.quickcontact_maximum_title_size);
-                    mMaximumPhoneticNameViewHeight =
-                            mMaximumFullNameViewHeight * phoneticNameSize / fullNameSize;
-                }
-                if (maximumHeaderTextSize > 0) {
-                    mMaximumHeaderTextSize = maximumHeaderTextSize;
-                }
-                if (mIsTwoPanel) {
-                    mMaximumHeaderHeight = getHeight();
-                    mMinimumHeaderHeight = mMaximumHeaderHeight;
-                    mIntermediateHeaderHeight = mMaximumHeaderHeight;
-
-                    // Permanently set photo width and height.
-                    final ViewGroup.LayoutParams photoLayoutParams
-                            = mPhotoViewContainer.getLayoutParams();
-                    photoLayoutParams.height = mMaximumHeaderHeight;
-                    photoLayoutParams.width = (int) (mMaximumHeaderHeight * mLandscapePhotoRatio);
-                    mPhotoViewContainer.setLayoutParams(photoLayoutParams);
-
-                    // Permanently set title width and margin.
-                    final FrameLayout.LayoutParams largeTextLayoutParams
-                            = (FrameLayout.LayoutParams) mTitleAndPhoneticNameView
-                            .getLayoutParams();
-                    largeTextLayoutParams.width = photoLayoutParams.width -
-                            largeTextLayoutParams.leftMargin - largeTextLayoutParams.rightMargin;
-                    largeTextLayoutParams.gravity = Gravity.BOTTOM | Gravity.START;
-                    mTitleAndPhoneticNameView.setLayoutParams(largeTextLayoutParams);
-                } else {
-                    // Set the width of mLargeTextView as if it was nested inside
-                    // mPhotoViewContainer.
-                    mLargeTextView.setWidth(mPhotoViewContainer.getWidth()
-                            - 2 * mMaximumTitleMargin);
-                    mPhoneticNameView.setWidth(mPhotoViewContainer.getWidth()
-                            - 2 * mMaximumTitleMargin);
-                }
-
-                calculateCollapsedLargeTitlePadding();
-                updateHeaderTextSizeAndMargin();
-                configureGradientViewHeights();
-            }
-        });
-        ///M:[for rcs-e] show joyn icon on the top left@{
-        ExtensionManager.getInstance().getViewCustomExtension()
-        .getQuickContactScrollerCustom()
-        .createJoynIconView((FrameLayout) findViewById(R.id.placeholder_container),
-                mLargeTextView, ((Activity) getContext()).getIntent().getData());
-        ///@}
-        ///M:[for rcs] show Rcs icon on the top left@{
-        ExtensionManager.getInstance().getRcsExtension()
-                .getQuickContactRcsScroller()
-                .createRcsIconView(
-                    (FrameLayout) findViewById(R.id.placeholder_container),
-                    mLargeTextView,
-                    ((Activity) getContext()).getIntent().getData());
-        ///@}
-    }
-
-    private void configureGradientViewHeights() {
-        final FrameLayout.LayoutParams actionBarGradientLayoutParams
-                = (FrameLayout.LayoutParams) mActionBarGradientView.getLayoutParams();
-        actionBarGradientLayoutParams.height = mActionBarSize;
-        mActionBarGradientView.setLayoutParams(actionBarGradientLayoutParams);
-        final FrameLayout.LayoutParams titleGradientLayoutParams
-                = (FrameLayout.LayoutParams) mTitleGradientView.getLayoutParams();
-        final float TITLE_GRADIENT_SIZE_COEFFICIENT = 1.25f;
-        final FrameLayout.LayoutParams largeTextLayoutParms
-                = (FrameLayout.LayoutParams) mTitleAndPhoneticNameView.getLayoutParams();
-        titleGradientLayoutParams.height = (int) ((mMaximumHeaderTextSize
-                + largeTextLayoutParms.bottomMargin) * TITLE_GRADIENT_SIZE_COEFFICIENT);
-        mTitleGradientView.setLayoutParams(titleGradientLayoutParams);
-    }
-
-    public void setTitle(String title, boolean isPhoneNumber) {
-        mLargeTextView.setText(title);
-        // We have a phone number as "mLargeTextView" so make it always LTR.
-        if (isPhoneNumber) {
-            mLargeTextView.setTextDirection(View.TEXT_DIRECTION_LTR);
-        }
-        mPhotoTouchInterceptOverlay.setContentDescription(title);
-    }
-
-    public void setPhoneticName(String phoneticName) {
-        // Set phonetic name only when it was gone before or got changed.
-        if (mPhoneticNameView.getVisibility() == View.VISIBLE
-                && phoneticName.equals(mPhoneticNameView.getText())) {
-            return;
-        }
-        mPhoneticNameView.setText(phoneticName);
-        // Every time the phonetic name is changed, set mPhoneticNameView as visible,
-        // in case it just changed from Visibility=GONE.
-        mPhoneticNameView.setVisibility(View.VISIBLE);
-        // TODO try not using initialize() to refresh phonetic name view: b/27410518
-        initialize(mListener, mIsOpenContactSquare, /* maximumHeaderTextSize */
-                (mMaximumFullNameViewHeight + mMaximumPhoneticNameViewHeight),
-                /* shouldUpdateNameViewHeight */ false);
-    }
-
-    public void setPhoneticNameGone() {
-        // Remove phonetic name only when it was visible before.
-        if (mPhoneticNameView.getVisibility() == View.GONE) {
-            return;
-        }
-        mPhoneticNameView.setVisibility(View.GONE);
-        // Initialize to make Visibility work.
-        // TODO try not using initialize() to refresh phonetic name view: b/27410518
-        initialize(mListener, mIsOpenContactSquare,
-                /* maximumHeaderTextSize */ mMaximumFullNameViewHeight,
-                /* shouldUpdateNameViewHeight */ false);
-    }
-
-    @Override
-    public boolean onInterceptTouchEvent(MotionEvent event) {
-        if (mVelocityTracker == null) {
-            mVelocityTracker = VelocityTracker.obtain();
-        }
-        mVelocityTracker.addMovement(event);
-
-        // The only time we want to intercept touch events is when we are being dragged.
-        return shouldStartDrag(event);
-    }
-
-    private boolean shouldStartDrag(MotionEvent event) {
-        if (mIsTouchDisabledForDismissAnimation || mIsTouchDisabledForSuppressLayout) return false;
-
-
-        if (mIsBeingDragged) {
-            mIsBeingDragged = false;
-            return false;
-        }
-
-        switch (event.getAction()) {
-            // If we are in the middle of a fling and there is a down event, we'll steal it and
-            // start a drag.
-            case MotionEvent.ACTION_DOWN:
-                updateLastEventPosition(event);
-                if (!mScroller.isFinished()) {
-                    startDrag();
-                    return true;
-                } else {
-                    mReceivedDown = true;
-                }
-                break;
-
-            // Otherwise, we will start a drag if there is enough motion in the direction we are
-            // capable of scrolling.
-            case MotionEvent.ACTION_MOVE:
-                if (motionShouldStartDrag(event)) {
-                    updateLastEventPosition(event);
-                    startDrag();
-                    return true;
-                }
-                break;
-        }
-
-        return false;
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        if (mIsTouchDisabledForDismissAnimation || mIsTouchDisabledForSuppressLayout) return true;
-
-        final int action = event.getAction();
-
-        if (mVelocityTracker == null) {
-            mVelocityTracker = VelocityTracker.obtain();
-        }
-        mVelocityTracker.addMovement(event);
-
-        if (!mIsBeingDragged) {
-            if (shouldStartDrag(event)) {
-                return true;
-            }
-
-            if (action == MotionEvent.ACTION_UP && mReceivedDown) {
-                mReceivedDown = false;
-                return performClick();
-            }
-            return true;
-        }
-
-        switch (action) {
-            case MotionEvent.ACTION_MOVE:
-                final float delta = updatePositionAndComputeDelta(event);
-                scrollTo(0, getScroll() + (int) delta);
-                mReceivedDown = false;
-
-                if (mIsBeingDragged) {
-                    final int distanceFromMaxScrolling = getMaximumScrollUpwards() - getScroll();
-                    if (delta > distanceFromMaxScrolling) {
-                        // The ScrollView is being pulled upwards while there is no more
-                        // content offscreen, and the view port is already fully expanded.
-                        EdgeEffectCompat.onPull(mEdgeGlowBottom, delta / getHeight(),
-                                1 - event.getX() / getWidth());
-                    }
-
-                    if (!mEdgeGlowBottom.isFinished()) {
-                        postInvalidateOnAnimation();
-                    }
-
-                    if (shouldDismissOnScroll()) {
-                        scrollOffBottom();
-                    }
-
-                }
-                break;
-
-            case MotionEvent.ACTION_UP:
-            case MotionEvent.ACTION_CANCEL:
-                stopDrag(action == MotionEvent.ACTION_CANCEL);
-                mReceivedDown = false;
-                break;
-        }
-
-        return true;
-    }
-
-    public void setHeaderTintColor(int color) {
-        mHeaderTintColor = color;
-        updatePhotoTintAndDropShadow();
-        if (CompatUtils.isLollipopCompatible()) {
-            // Use the same amount of alpha on the new tint color as the previous tint color.
-            final int edgeEffectAlpha = Color.alpha(mEdgeGlowBottom.getColor());
-            mEdgeGlowBottom.setColor((color & 0xffffff) | Color.argb(edgeEffectAlpha, 0, 0, 0));
-            mEdgeGlowTop.setColor(mEdgeGlowBottom.getColor());
-        }
-    }
-
-    /**
-     * Expand to maximum size.
-     */
-    private void expandHeader() {
-        if (getHeaderHeight() != mMaximumHeaderHeight) {
-            final ObjectAnimator animator = ObjectAnimator.ofInt(this, "headerHeight",
-                    mMaximumHeaderHeight);
-            animator.setDuration(ExpandingEntryCardView.DURATION_EXPAND_ANIMATION_CHANGE_BOUNDS);
-            animator.start();
-            // Scroll nested scroll view to its top
-            if (mScrollView.getScrollY() != 0) {
-                ObjectAnimator.ofInt(mScrollView, "scrollY", -mScrollView.getScrollY()).start();
-            }
-        }
-    }
-
-    private void startDrag() {
-        mIsBeingDragged = true;
-        mScroller.abortAnimation();
-    }
-
-    private void stopDrag(boolean cancelled) {
-        mIsBeingDragged = false;
-        if (!cancelled && getChildCount() > 0) {
-            final float velocity = getCurrentVelocity();
-            if (velocity > mMinimumVelocity || velocity < -mMinimumVelocity) {
-                fling(-velocity);
-                onDragFinished(mScroller.getFinalY() - mScroller.getStartY());
-            } else {
-                onDragFinished(/* flingDelta = */ 0);
-            }
-        } else {
-            onDragFinished(/* flingDelta = */ 0);
-        }
-
-        if (mVelocityTracker != null) {
-            mVelocityTracker.recycle();
-            mVelocityTracker = null;
-        }
-
-        mEdgeGlowBottom.onRelease();
-    }
-
-    private void onDragFinished(int flingDelta) {
-        if (getTransparentViewHeight() <= 0) {
-            // Don't perform any snapping if quick contacts is full screen.
-            return;
-        }
-        if (!snapToTopOnDragFinished(flingDelta)) {
-            // The drag/fling won't result in the content at the top of the Window. Consider
-            // snapping the content to the bottom of the window.
-            snapToBottomOnDragFinished();
-        }
-    }
-
-    /**
-     * If needed, snap the subviews to the top of the Window.
-     *
-     * @return TRUE if QuickContacts will snap/fling to to top after this method call.
-     */
-    private boolean snapToTopOnDragFinished(int flingDelta) {
-        if (!mHasEverTouchedTheTop) {
-            // If the current fling is predicted to scroll past the top, then we don't need to snap
-            // to the top. However, if the fling only flings past the top by a tiny amount,
-            // it will look nicer to snap than to fling.
-            final float predictedScrollPastTop = getTransparentViewHeight() - flingDelta;
-            if (predictedScrollPastTop < -mSnapToTopSlopHeight) {
-                return false;
-            }
-
-            if (getTransparentViewHeight() <= mTransparentStartHeight) {
-                // We are above the starting scroll position so snap to the top.
-                mScroller.forceFinished(true);
-                smoothScrollBy(getTransparentViewHeight());
-                return true;
-            }
-            return false;
-        }
-        if (getTransparentViewHeight() < mDismissDistanceOnRelease) {
-            mScroller.forceFinished(true);
-            smoothScrollBy(getTransparentViewHeight());
-            return true;
-        }
-        return false;
-    }
-
-    /**
-     * If needed, scroll all the subviews off the bottom of the Window.
-     */
-    private void snapToBottomOnDragFinished() {
-        if (mHasEverTouchedTheTop) {
-            if (getTransparentViewHeight() > mDismissDistanceOnRelease) {
-                scrollOffBottom();
-            }
-            return;
-        }
-        if (getTransparentViewHeight() > mTransparentStartHeight) {
-            scrollOffBottom();
-        }
-    }
-
-    /**
-     * Returns TRUE if we have scrolled far QuickContacts far enough that we should dismiss it
-     * without waiting for the user to finish their drag.
-     */
-    private boolean shouldDismissOnScroll() {
-        return mHasEverTouchedTheTop && getTransparentViewHeight() > mDismissDistanceOnScroll;
-    }
-
-    /**
-     * Return ratio of non-transparent:viewgroup-height for this viewgroup at the starting position.
-     */
-    public float getStartingTransparentHeightRatio() {
-        return getTransparentHeightRatio(mTransparentStartHeight);
-    }
-
-    private float getTransparentHeightRatio(int transparentHeight) {
-        final float heightRatio = (float) transparentHeight / getHeight();
-        // Clamp between [0, 1] in case this is called before height is initialized.
-        return 1.0f - Math.max(Math.min(1.0f, heightRatio), 0f);
-    }
-
-    public void scrollOffBottom() {
-        mIsTouchDisabledForDismissAnimation = true;
-        final Interpolator interpolator = new AcceleratingFlingInterpolator(
-                EXIT_FLING_ANIMATION_DURATION_MS, getCurrentVelocity(),
-                getScrollUntilOffBottom());
-        mScroller.forceFinished(true);
-        ObjectAnimator translateAnimation = ObjectAnimator.ofInt(this, "scroll",
-                getScroll() - getScrollUntilOffBottom());
-        translateAnimation.setRepeatCount(0);
-        translateAnimation.setInterpolator(interpolator);
-        translateAnimation.setDuration(EXIT_FLING_ANIMATION_DURATION_MS);
-        translateAnimation.addListener(mSnapToBottomListener);
-        translateAnimation.start();
-        if (mListener != null) {
-            mListener.onStartScrollOffBottom();
-        }
-    }
-
-    /**
-     * @param scrollToCurrentPosition if true, will scroll from the bottom of the screen to the
-     * current position. Otherwise, will scroll from the bottom of the screen to the top of the
-     * screen.
-     */
-    public void scrollUpForEntranceAnimation(boolean scrollToCurrentPosition) {
-        final int currentPosition = getScroll();
-        final int bottomScrollPosition = currentPosition
-                - (getHeight() - getTransparentViewHeight()) + 1;
-        final Interpolator interpolator = AnimationUtils.loadInterpolator(getContext(),
-                android.R.interpolator.linear_out_slow_in);
-        final int desiredValue = currentPosition + (scrollToCurrentPosition ? currentPosition
-                : getTransparentViewHeight());
-        final ObjectAnimator animator = ObjectAnimator.ofInt(this, "scroll", bottomScrollPosition,
-                desiredValue);
-        animator.setInterpolator(interpolator);
-        animator.addUpdateListener(new AnimatorUpdateListener() {
-            @Override
-            public void onAnimationUpdate(ValueAnimator animation) {
-                if (animation.getAnimatedValue().equals(desiredValue) && mListener != null) {
-                    mListener.onEntranceAnimationDone();
-                }
-            }
-        });
-        animator.start();
-    }
-
-    @Override
-    public void scrollTo(int x, int y) {
-        final int delta = y - getScroll();
-        boolean wasFullscreen = getScrollNeededToBeFullScreen() <= 0;
-        if (delta > 0) {
-            scrollUp(delta);
-        } else {
-            scrollDown(delta);
-        }
-        updatePhotoTintAndDropShadow();
-        updateHeaderTextSizeAndMargin();
-        final boolean isFullscreen = getScrollNeededToBeFullScreen() <= 0;
-        mHasEverTouchedTheTop |= isFullscreen;
-        if (mListener != null) {
-            if (wasFullscreen && !isFullscreen) {
-                 mListener.onExitFullscreen();
-            } else if (!wasFullscreen && isFullscreen) {
-                mListener.onEnterFullscreen();
-            }
-            if (!isFullscreen || !wasFullscreen) {
-                mListener.onTransparentViewHeightChange(
-                        getTransparentHeightRatio(getTransparentViewHeight()));
-            }
-        }
-    }
-
-    /**
-     * Change the height of the header/toolbar. Do *not* use this outside animations. This was
-     * designed for use by {@link #prepareForShrinkingScrollChild}.
-     */
-    @NeededForReflection
-    public void setToolbarHeight(int delta) {
-        final ViewGroup.LayoutParams toolbarLayoutParams
-                = mToolbar.getLayoutParams();
-        toolbarLayoutParams.height = delta;
-        mToolbar.setLayoutParams(toolbarLayoutParams);
-
-        updatePhotoTintAndDropShadow();
-        updateHeaderTextSizeAndMargin();
-    }
-
-    @NeededForReflection
-    public int getToolbarHeight() {
-        return mToolbar.getLayoutParams().height;
-    }
-
-    /**
-     * Set the height of the toolbar and update its tint accordingly.
-     */
-    @NeededForReflection
-    public void setHeaderHeight(int height) {
-        final ViewGroup.LayoutParams toolbarLayoutParams
-                = mToolbar.getLayoutParams();
-        toolbarLayoutParams.height = height;
-        mToolbar.setLayoutParams(toolbarLayoutParams);
-        updatePhotoTintAndDropShadow();
-        updateHeaderTextSizeAndMargin();
-    }
-
-    @NeededForReflection
-    public int getHeaderHeight() {
-        return mToolbar.getLayoutParams().height;
-    }
-
-    @NeededForReflection
-    public void setScroll(int scroll) {
-        scrollTo(0, scroll);
-    }
-
-    /**
-     * Returns the total amount scrolled inside the nested ScrollView + the amount of shrinking
-     * performed on the ToolBar. This is the value inspected by animators.
-     */
-    @NeededForReflection
-    public int getScroll() {
-        return mTransparentStartHeight - getTransparentViewHeight()
-                + getMaximumScrollableHeaderHeight() - getToolbarHeight()
-                + mScrollView.getScrollY();
-    }
-
-    private int getMaximumScrollableHeaderHeight() {
-        return mIsOpenContactSquare ? mMaximumHeaderHeight : mIntermediateHeaderHeight;
-    }
-
-    /**
-     * A variant of {@link #getScroll} that pretends the header is never larger than
-     * than mIntermediateHeaderHeight. This function is sometimes needed when making scrolling
-     * decisions that will not change the header size (ie, snapping to the bottom or top).
-     *
-     * When mIsOpenContactSquare is true, this function considers mIntermediateHeaderHeight ==
-     * mMaximumHeaderHeight, since snapping decisions will be made relative the full header
-     * size when mIsOpenContactSquare = true.
-     *
-     * This value should never be used in conjunction with {@link #getScroll} values.
-     */
-    private int getScroll_ignoreOversizedHeaderForSnapping() {
-        return mTransparentStartHeight - getTransparentViewHeight()
-                + Math.max(getMaximumScrollableHeaderHeight() - getToolbarHeight(), 0)
-                + mScrollView.getScrollY();
-    }
-
-    /**
-     * Amount of transparent space above the header/toolbar.
-     */
-    public int getScrollNeededToBeFullScreen() {
-        return getTransparentViewHeight();
-    }
-
-    /**
-     * Return amount of scrolling needed in order for all the visible subviews to scroll off the
-     * bottom.
-     */
-    private int getScrollUntilOffBottom() {
-        return getHeight() + getScroll_ignoreOversizedHeaderForSnapping()
-                - mTransparentStartHeight;
-    }
-
-    @Override
-    public void computeScroll() {
-        if (mScroller.computeScrollOffset()) {
-            // Examine the fling results in order to activate EdgeEffect and halt flings.
-            final int oldScroll = getScroll();
-            scrollTo(0, mScroller.getCurrY());
-            final int delta = mScroller.getCurrY() - oldScroll;
-            final int distanceFromMaxScrolling = getMaximumScrollUpwards() - getScroll();
-            if (delta > distanceFromMaxScrolling && distanceFromMaxScrolling > 0) {
-                mEdgeGlowBottom.onAbsorb((int) mScroller.getCurrVelocity());
-            }
-            if (mIsFullscreenDownwardsFling && getTransparentViewHeight() > 0) {
-                // Halt the fling once QuickContact's top is on screen.
-                scrollTo(0, getScroll() + getTransparentViewHeight());
-                mEdgeGlowTop.onAbsorb((int) mScroller.getCurrVelocity());
-                mScroller.abortAnimation();
-                mIsFullscreenDownwardsFling = false;
-            }
-            if (!awakenScrollBars()) {
-                // Keep on drawing until the animation has finished.
-                postInvalidateOnAnimation();
-            }
-            if (mScroller.getCurrY() >= getMaximumScrollUpwards()) {
-                // Halt the fling once QuickContact's bottom is on screen.
-                mScroller.abortAnimation();
-                mIsFullscreenDownwardsFling = false;
-            }
-        }
-    }
-
-    @Override
-    public void draw(Canvas canvas) {
-        super.draw(canvas);
-
-        final int width = getWidth() - getPaddingLeft() - getPaddingRight();
-        final int height = getHeight();
-
-        if (!mEdgeGlowBottom.isFinished()) {
-            final int restoreCount = canvas.save();
-
-            // Draw the EdgeEffect on the bottom of the Window (Or a little bit below the bottom
-            // of the Window if we start to scroll upwards while EdgeEffect is visible). This
-            // does not need to consider the case where this MultiShrinkScroller doesn't fill
-            // the Window, since the nested ScrollView should be set to fillViewport.
-            canvas.translate(-width + getPaddingLeft(),
-                    height + getMaximumScrollUpwards() - getScroll());
-
-            canvas.rotate(180, width, 0);
-            if (mIsTwoPanel) {
-                // Only show the EdgeEffect on the bottom of the ScrollView.
-                mEdgeGlowBottom.setSize(mScrollView.getWidth(), height);
-                if (getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
-                    canvas.translate(mPhotoViewContainer.getWidth(), 0);
-                }
-            } else {
-                mEdgeGlowBottom.setSize(width, height);
-            }
-            if (mEdgeGlowBottom.draw(canvas)) {
-                postInvalidateOnAnimation();
-            }
-            canvas.restoreToCount(restoreCount);
-        }
-
-        if (!mEdgeGlowTop.isFinished()) {
-            final int restoreCount = canvas.save();
-            if (mIsTwoPanel) {
-                mEdgeGlowTop.setSize(mScrollView.getWidth(), height);
-                if (getLayoutDirection() != View.LAYOUT_DIRECTION_RTL) {
-                    canvas.translate(mPhotoViewContainer.getWidth(), 0);
-                }
-            } else {
-                mEdgeGlowTop.setSize(width, height);
-            }
-            if (mEdgeGlowTop.draw(canvas)) {
-                postInvalidateOnAnimation();
-            }
-            canvas.restoreToCount(restoreCount);
-        }
-    }
-
-    private float getCurrentVelocity() {
-        if (mVelocityTracker == null) {
-            return 0;
-        }
-        mVelocityTracker.computeCurrentVelocity(PIXELS_PER_SECOND, mMaximumVelocity);
-        return mVelocityTracker.getYVelocity();
-    }
-
-    private void fling(float velocity) {
-        // For reasons I do not understand, scrolling is less janky when maxY=Integer.MAX_VALUE
-        // then when maxY is set to an actual value.
-        mScroller.fling(0, getScroll(), 0, (int) velocity, 0, 0, -Integer.MAX_VALUE,
-                Integer.MAX_VALUE);
-        if (velocity < 0 && mTransparentView.getHeight() <= 0) {
-            mIsFullscreenDownwardsFling = true;
-        }
-        invalidate();
-    }
-
-    private int getMaximumScrollUpwards() {
-        if (!mIsTwoPanel) {
-            return mTransparentStartHeight
-                    // How much the Header view can compress
-                    + getMaximumScrollableHeaderHeight() - getFullyCompressedHeaderHeight()
-                    // How much the ScrollView can scroll. 0, if child is smaller than ScrollView.
-                    + Math.max(0, mScrollViewChild.getHeight() - getHeight()
-                    + getFullyCompressedHeaderHeight());
-        } else {
-            return mTransparentStartHeight
-                    // How much the ScrollView can scroll. 0, if child is smaller than ScrollView.
-                    + Math.max(0, mScrollViewChild.getHeight() - getHeight());
-        }
-    }
-
-    private int getTransparentViewHeight() {
-        return mTransparentView.getLayoutParams().height;
-    }
-
-    private void setTransparentViewHeight(int height) {
-        mTransparentView.getLayoutParams().height = height;
-        mTransparentView.setLayoutParams(mTransparentView.getLayoutParams());
-    }
-
-    private void scrollUp(int delta) {
-        if (getTransparentViewHeight() != 0) {
-            final int originalValue = getTransparentViewHeight();
-            setTransparentViewHeight(getTransparentViewHeight() - delta);
-            setTransparentViewHeight(Math.max(0, getTransparentViewHeight()));
-            delta -= originalValue - getTransparentViewHeight();
-        }
-        final ViewGroup.LayoutParams toolbarLayoutParams
-                = mToolbar.getLayoutParams();
-        if (toolbarLayoutParams.height > getFullyCompressedHeaderHeight()) {
-            final int originalValue = toolbarLayoutParams.height;
-            toolbarLayoutParams.height -= delta;
-            toolbarLayoutParams.height = Math.max(toolbarLayoutParams.height,
-                    getFullyCompressedHeaderHeight());
-            mToolbar.setLayoutParams(toolbarLayoutParams);
-            delta -= originalValue - toolbarLayoutParams.height;
-        }
-        mScrollView.scrollBy(0, delta);
-    }
-
-    /**
-     * Returns the minimum size that we want to compress the header to, given that we don't want to
-     * allow the the ScrollView to scroll unless there is new content off of the edge of ScrollView.
-     */
-    private int getFullyCompressedHeaderHeight() {
-        return Math.min(Math.max(mToolbar.getLayoutParams().height - getOverflowingChildViewSize(),
-                mMinimumHeaderHeight), getMaximumScrollableHeaderHeight());
-    }
-
-    /**
-     * Returns the amount of mScrollViewChild that doesn't fit inside its parent.
-     */
-    private int getOverflowingChildViewSize() {
-        final int usedScrollViewSpace = mScrollViewChild.getHeight();
-        return -getHeight() + usedScrollViewSpace + mToolbar.getLayoutParams().height;
-    }
-
-    private void scrollDown(int delta) {
-        if (mScrollView.getScrollY() > 0) {
-            final int originalValue = mScrollView.getScrollY();
-            mScrollView.scrollBy(0, delta);
-            delta -= mScrollView.getScrollY() - originalValue;
-        }
-        final ViewGroup.LayoutParams toolbarLayoutParams = mToolbar.getLayoutParams();
-        if (toolbarLayoutParams.height < getMaximumScrollableHeaderHeight()) {
-            final int originalValue = toolbarLayoutParams.height;
-            toolbarLayoutParams.height -= delta;
-            toolbarLayoutParams.height = Math.min(toolbarLayoutParams.height,
-                    getMaximumScrollableHeaderHeight());
-            mToolbar.setLayoutParams(toolbarLayoutParams);
-            delta -= originalValue - toolbarLayoutParams.height;
-        }
-        setTransparentViewHeight(getTransparentViewHeight() - delta);
-
-        if (getScrollUntilOffBottom() <= 0) {
-            post(new Runnable() {
-                @Override
-                public void run() {
-                    if (mListener != null) {
-                        mListener.onScrolledOffBottom();
-                        // No other messages need to be sent to the listener.
-                        mListener = null;
-                    }
-                }
-            });
-        }
-    }
-
-    /**
-     * Set the header size and padding, based on the current scroll position.
-     */
-    private void updateHeaderTextSizeAndMargin() {
-        if (mIsTwoPanel) {
-            // The text size stays at a constant size & location in two panel layouts.
-            return;
-        }
-
-        // The pivot point for scaling should be middle of the starting side.
-        if (getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
-            mTitleAndPhoneticNameView.setPivotX(mTitleAndPhoneticNameView.getWidth());
-        } else {
-            mTitleAndPhoneticNameView.setPivotX(0);
-        }
-        mTitleAndPhoneticNameView.setPivotY(mMaximumHeaderTextSize / 2);
-
-        final int toolbarHeight = mToolbar.getLayoutParams().height;
-        mPhotoTouchInterceptOverlay.setClickable(toolbarHeight != mMaximumHeaderHeight);
-
-        if (toolbarHeight >= mMaximumHeaderHeight) {
-            // Everything is full size when the header is fully expanded.
-            mTitleAndPhoneticNameView.setScaleX(1);
-            mTitleAndPhoneticNameView.setScaleY(1);
-            setInterpolatedTitleMargins(1);
-            return;
-        }
-
-        final float ratio = (toolbarHeight  - mMinimumHeaderHeight)
-                / (float)(mMaximumHeaderHeight - mMinimumHeaderHeight);
-        final float minimumSize = mInvisiblePlaceholderTextView.getHeight();
-        float bezierOutput = mTextSizePathInterpolator.getInterpolation(ratio);
-        float scale = (minimumSize + (mMaximumHeaderTextSize - minimumSize) * bezierOutput)
-                / mMaximumHeaderTextSize;
-
-        // Clamp to reasonable/finite values before passing into framework. The values
-        // can be wacky before the first pre-render.
-        bezierOutput = (float) Math.min(bezierOutput, 1.0f);
-        scale = (float) Math.min(scale, 1.0f);
-
-        mTitleAndPhoneticNameView.setScaleX(scale);
-        mTitleAndPhoneticNameView.setScaleY(scale);
-        setInterpolatedTitleMargins(bezierOutput);
-        ExtensionManager.getInstance().getViewCustomExtension().getQuickContactScrollerCustom()
-        .updateJoynIconView();
-        ///M:[for rcs] update Rcs icon on the top left@{
-        ExtensionManager.getInstance().getRcsExtension().getQuickContactRcsScroller()
-                .updateRcsIconView();
-        ///@}
-    }
-
-    /**
-     * Calculate the padding around mTitleAndPhoneticNameView so that it will look appropriate once it
-     * finishes moving into its target location/size.
-     */
-    private void calculateCollapsedLargeTitlePadding() {
-        int invisiblePlaceHolderLocation[] = new int[2];
-        int largeTextViewRectLocation[] = new int[2];
-        mInvisiblePlaceholderTextView.getLocationOnScreen(invisiblePlaceHolderLocation);
-        mToolbar.getLocationOnScreen(largeTextViewRectLocation);
-        // Distance between top of toolbar to the center of the target rectangle.
-        final int desiredTopToCenter = invisiblePlaceHolderLocation[1]
-                + mInvisiblePlaceholderTextView.getHeight() / 2
-                - largeTextViewRectLocation[1];
-        // Padding needed on the mTitleAndPhoneticNameView so that it has the same amount of
-        // padding as the target rectangle.
-        mCollapsedTitleBottomMargin =
-                desiredTopToCenter - mMaximumHeaderTextSize / 2;
-    }
-
-    /**
-     * Interpolate the title's margin size. When {@param x}=1, use the maximum title margins.
-     * When {@param x}=0, use the margin values taken from {@link #mInvisiblePlaceholderTextView}.
-     */
-    private void setInterpolatedTitleMargins(float x) {
-        final FrameLayout.LayoutParams titleLayoutParams
-                = (FrameLayout.LayoutParams) mTitleAndPhoneticNameView.getLayoutParams();
-        final LinearLayout.LayoutParams toolbarLayoutParams
-                = (LinearLayout.LayoutParams) mToolbar.getLayoutParams();
-
-        // Need to add more to margin start if there is a start column
-        int startColumnWidth = mStartColumn == null ? 0 : mStartColumn.getWidth();
-
-        titleLayoutParams.setMarginStart((int) (mCollapsedTitleStartMargin * (1 - x)
-                + mMaximumTitleMargin * x) + startColumnWidth);
-        // How offset the title should be from the bottom of the toolbar
-        final int pretendBottomMargin =  (int) (mCollapsedTitleBottomMargin * (1 - x)
-                + mMaximumTitleMargin * x) ;
-        // Calculate how offset the title should be from the top of the screen. Instead of
-        // calling mTitleAndPhoneticNameView.getHeight() use the mMaximumHeaderTextSize for this
-        // calculation. The getHeight() value acts unexpectedly when mTitleAndPhoneticNameView is
-        // partially clipped by its parent.
-        titleLayoutParams.topMargin = getTransparentViewHeight()
-                + toolbarLayoutParams.height - pretendBottomMargin
-                - mMaximumHeaderTextSize;
-        titleLayoutParams.bottomMargin = 0;
-        mTitleAndPhoneticNameView.setLayoutParams(titleLayoutParams);
-    }
-
-    private void updatePhotoTintAndDropShadow() {
-        // Let's keep an eye on how long this method takes to complete.
-        Trace.beginSection("updatePhotoTintAndDropShadow");
-
-        if (mIsTwoPanel && !mPhotoView.isBasedOffLetterTile()) {
-            // When in two panel mode, UX considers photo tinting unnecessary for non letter
-            // tile photos.
-            mTitleGradientDrawable.setAlpha(0xFF);
-            mActionBarGradientDrawable.setAlpha(0xFF);
-            return;
-        }
-
-        // We need to use toolbarLayoutParams to determine the height, since the layout
-        // params can be updated before the height change is reflected inside the View#getHeight().
-        final int toolbarHeight = getToolbarHeight();
-
-        if (toolbarHeight <= mMinimumHeaderHeight && !mIsTwoPanel) {
-            ViewCompat.setElevation(mPhotoViewContainer, mToolbarElevation);
-        } else {
-            ViewCompat.setElevation(mPhotoViewContainer, 0);
-        }
-
-        // Reuse an existing mColorFilter (to avoid GC pauses) to change the photo's tint.
-        mPhotoView.clearColorFilter();
-        mColorMatrix.reset();
-
-        final int gradientAlpha;
-        if (!mPhotoView.isBasedOffLetterTile()) {
-            // Constants and equations were arbitrarily picked to choose values for saturation,
-            // whiteness, tint and gradient alpha. There were four main objectives:
-            // 1) The transition period between the unmodified image and fully colored image should
-            //    be very short.
-            // 2) The tinting should be fully applied even before the background image is fully
-            //    faded out and desaturated. Why? A half tinted photo looks bad and results in
-            //    unappealing colors.
-            // 3) The function should have a derivative of 0 at ratio = 1 to avoid discontinuities.
-            // 4) The entire process should look awesome.
-            final float ratio = calculateHeightRatioToBlendingStartHeight(toolbarHeight);
-            final float alpha = 1.0f - (float) Math.min(Math.pow(ratio, 1.5f) * 2f, 1f);
-            final float tint = (float) Math.min(Math.pow(ratio, 1.5f) * 3f, 1f);
-            mColorMatrix.setSaturation(alpha);
-            mColorMatrix.postConcat(alphaMatrix(alpha, Color.WHITE));
-            mColorMatrix.postConcat(multiplyBlendMatrix(mHeaderTintColor, tint));
-            gradientAlpha = (int) (255 * alpha);
-        } else if (mIsTwoPanel) {
-            mColorMatrix.reset();
-            mColorMatrix.postConcat(alphaMatrix(DESIRED_INTERMEDIATE_LETTER_TILE_ALPHA,
-                    mHeaderTintColor));
-            gradientAlpha = 0;
-        } else {
-            // We want a function that has DESIRED_INTERMEDIATE_LETTER_TILE_ALPHA value
-            // at the intermediate position and uses TILE_EXPONENT. Finding an equation
-            // that satisfies this condition requires the following arithmetic.
-            final float ratio = calculateHeightRatioToFullyOpen(toolbarHeight);
-            final float intermediateRatio = calculateHeightRatioToFullyOpen((int)
-                    (mMaximumPortraitHeaderHeight * INTERMEDIATE_HEADER_HEIGHT_RATIO));
-            final float TILE_EXPONENT = 3f;
-            final float slowingFactor = (float) ((1 - intermediateRatio) / intermediateRatio
-                    / (1 - Math.pow(1 - DESIRED_INTERMEDIATE_LETTER_TILE_ALPHA, 1/TILE_EXPONENT)));
-            float linearBeforeIntermediate = Math.max(1 - (1 - ratio) / intermediateRatio
-                    / slowingFactor, 0);
-            float colorAlpha = 1 - (float) Math.pow(linearBeforeIntermediate, TILE_EXPONENT);
-            mColorMatrix.postConcat(alphaMatrix(colorAlpha, mHeaderTintColor));
-            gradientAlpha = 0;
-        }
-
-        // TODO: remove re-allocation of ColorMatrixColorFilter objects (b/17627000)
-        mPhotoView.setColorFilter(new ColorMatrixColorFilter(mColorMatrix));
-
-        // Tell the photo view what tint we are trying to achieve. Depending on the type of
-        // drawable used, the photo view may or may not use this tint.
-        mPhotoView.setTint(mHeaderTintColor);
-        mTitleGradientDrawable.setAlpha(gradientAlpha);
-        mActionBarGradientDrawable.setAlpha(gradientAlpha);
-
-        Trace.endSection();
-    }
-
-    private float calculateHeightRatioToFullyOpen(int height) {
-        return (height - mMinimumPortraitHeaderHeight)
-                / (float) (mMaximumPortraitHeaderHeight - mMinimumPortraitHeaderHeight);
-    }
-
-    private float calculateHeightRatioToBlendingStartHeight(int height) {
-        final float intermediateHeight = mMaximumPortraitHeaderHeight
-                * COLOR_BLENDING_START_RATIO;
-        final float interpolatingHeightRange = intermediateHeight - mMinimumPortraitHeaderHeight;
-        if (height > intermediateHeight) {
-            return 0;
-        }
-        return (intermediateHeight - height) / interpolatingHeightRange;
-    }
-
-    /**
-     * Simulates alpha blending an image with {@param color}.
-     */
-    private ColorMatrix alphaMatrix(float alpha, int color) {
-        mAlphaMatrixValues[0] = Color.red(color) * alpha / 255;
-        mAlphaMatrixValues[6] = Color.green(color) * alpha / 255;
-        mAlphaMatrixValues[12] = Color.blue(color) * alpha / 255;
-        mAlphaMatrixValues[4] = 255 * (1 - alpha);
-        mAlphaMatrixValues[9] = 255 * (1 - alpha);
-        mAlphaMatrixValues[14] = 255 * (1 - alpha);
-        mWhitenessColorMatrix.set(mAlphaMatrixValues);
-        return mWhitenessColorMatrix;
-    }
-
-    /**
-     * Simulates multiply blending an image with a single {@param color}.
-     *
-     * Multiply blending is [Sa * Da, Sc * Dc]. See {@link android.graphics.PorterDuff}.
-     */
-    private ColorMatrix multiplyBlendMatrix(int color, float alpha) {
-        mMultiplyBlendMatrixValues[0] = multiplyBlend(Color.red(color), alpha);
-        mMultiplyBlendMatrixValues[6] = multiplyBlend(Color.green(color), alpha);
-        mMultiplyBlendMatrixValues[12] = multiplyBlend(Color.blue(color), alpha);
-        mMultiplyBlendMatrix.set(mMultiplyBlendMatrixValues);
-        return mMultiplyBlendMatrix;
-    }
-
-    private float multiplyBlend(int color, float alpha) {
-        return color * alpha / 255.0f + (1 - alpha);
-    }
-
-    private void updateLastEventPosition(MotionEvent event) {
-        mLastEventPosition[0] = event.getX();
-        mLastEventPosition[1] = event.getY();
-    }
-
-    private boolean motionShouldStartDrag(MotionEvent event) {
-        final float deltaY = event.getY() - mLastEventPosition[1];
-        return deltaY > mTouchSlop || deltaY < -mTouchSlop;
-    }
-
-    private float updatePositionAndComputeDelta(MotionEvent event) {
-        final int VERTICAL = 1;
-        final float position = mLastEventPosition[VERTICAL];
-        updateLastEventPosition(event);
-        float elasticityFactor = 1;
-        if (position < mLastEventPosition[VERTICAL] && mHasEverTouchedTheTop) {
-            // As QuickContacts is dragged from the top of the window, its rate of movement will
-            // slow down in proportion to its distance from the top. This will feel springy.
-            elasticityFactor += mTransparentView.getHeight() * SPRING_DAMPENING_FACTOR;
-        }
-        return (position - mLastEventPosition[VERTICAL]) / elasticityFactor;
-    }
-
-    private void smoothScrollBy(int delta) {
-        if (delta == 0) {
-            // Delta=0 implies the code calling smoothScrollBy is sloppy. We should avoid doing
-            // this, since it prevents Views from being able to register any clicks for 250ms.
-            throw new IllegalArgumentException("Smooth scrolling by delta=0 is "
-                    + "pointless and harmful");
-        }
-        mScroller.startScroll(0, getScroll(), 0, delta);
-        invalidate();
-    }
-
-    /**
-     * Interpolator that enforces a specific starting velocity. This is useful to avoid a
-     * discontinuity between dragging speed and flinging speed.
-     *
-     * Similar to a {@link android.view.animation.AccelerateInterpolator} in the sense that
-     * getInterpolation() is a quadratic function.
-     */
-    private class AcceleratingFlingInterpolator implements Interpolator {
-
-        private final float mStartingSpeedPixelsPerFrame;
-        private final float mDurationMs;
-        private final int mPixelsDelta;
-        private final float mNumberFrames;
-
-        public AcceleratingFlingInterpolator(int durationMs, float startingSpeedPixelsPerSecond,
-                int pixelsDelta) {
-            mStartingSpeedPixelsPerFrame = startingSpeedPixelsPerSecond / getRefreshRate();
-            mDurationMs = durationMs;
-            mPixelsDelta = pixelsDelta;
-            mNumberFrames = mDurationMs / getFrameIntervalMs();
-        }
-
-        @Override
-        public float getInterpolation(float input) {
-            final float animationIntervalNumber = mNumberFrames * input;
-            final float linearDelta = (animationIntervalNumber * mStartingSpeedPixelsPerFrame)
-                    / mPixelsDelta;
-            // Add the results of a linear interpolator (with the initial speed) with the
-            // results of a AccelerateInterpolator.
-            if (mStartingSpeedPixelsPerFrame > 0) {
-                return Math.min(input * input + linearDelta, 1);
-            } else {
-                // Initial fling was in the wrong direction, make sure that the quadratic component
-                // grows faster in order to make up for this.
-                return Math.min(input * (input - linearDelta) + linearDelta, 1);
-            }
-        }
-
-        private float getRefreshRate() {
-            final DisplayManager displayManager = (DisplayManager) MultiShrinkScroller
-                    .this.getContext().getSystemService(Context.DISPLAY_SERVICE);
-            return displayManager.getDisplay(Display.DEFAULT_DISPLAY).getRefreshRate();
-        }
-
-        public long getFrameIntervalMs() {
-            return (long)(1000 / getRefreshRate());
-        }
-    }
-
-    /**
-     * Expand the header if the mScrollViewChild is about to shrink by enough to create new empty
-     * space at the bottom of this ViewGroup.
-     */
-    public void prepareForShrinkingScrollChild(int heightDelta) {
-        final int newEmptyScrollViewSpace = -getOverflowingChildViewSize() + heightDelta;
-        if (newEmptyScrollViewSpace > 0 && !mIsTwoPanel) {
-            final int newDesiredToolbarHeight = Math.min(getToolbarHeight()
-                    + newEmptyScrollViewSpace, getMaximumScrollableHeaderHeight());
-            ObjectAnimator.ofInt(this, "toolbarHeight", newDesiredToolbarHeight).setDuration(
-                    ExpandingEntryCardView.DURATION_COLLAPSE_ANIMATION_CHANGE_BOUNDS).start();
-        }
-    }
-
-    /**
-     * If {@param areTouchesDisabled} is TRUE, ignore all of the user's touches.
-     */
-    public void setDisableTouchesForSuppressLayout(boolean areTouchesDisabled) {
-        // The card expansion animation uses the Transition framework's ChangeBounds API. This
-        // invokes suppressLayout(true) on the MultiShrinkScroller. As a result, we need to avoid
-        // all layout changes during expansion in order to avoid weird layout artifacts.
-        mIsTouchDisabledForSuppressLayout = areTouchesDisabled;
-    }
-
-}
Index: vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/contacts/widget/MultiShrinkScroller.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/contacts/widget/MultiShrinkScroller.java	(revision 0)
+++ vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/contacts/widget/MultiShrinkScroller.java	(revision 8170)
@@ -0,0 +1,1404 @@
+package com.android.contacts.widget;
+
+import android.app.Activity;
+import com.android.contacts.R;
+import com.android.contacts.common.compat.CompatUtils;
+import com.android.contacts.compat.EdgeEffectCompat;
+import com.android.contacts.quickcontact.ExpandingEntryCardView;
+import com.android.contacts.test.NeededForReflection;
+import com.android.contacts.util.SchedulingUtils;
+
+import android.animation.Animator;
+import android.animation.Animator.AnimatorListener;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.ObjectAnimator;
+import android.animation.ValueAnimator;
+import android.animation.ValueAnimator.AnimatorUpdateListener;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.ColorMatrix;
+import android.graphics.ColorMatrixColorFilter;
+import android.graphics.drawable.GradientDrawable;
+import android.hardware.display.DisplayManager;
+import android.net.Uri;
+import android.os.Trace;
+import android.support.v4.view.ViewCompat;
+import android.support.v4.view.animation.PathInterpolatorCompat;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.Display;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewConfiguration;
+import android.view.animation.AnimationUtils;
+import android.view.animation.Interpolator;
+import android.widget.EdgeEffect;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.Scroller;
+import android.widget.ScrollView;
+import android.widget.TextView;
+import android.widget.Toolbar;
+
+import com.mediatek.contacts.ExtensionManager;
+
+/**
+ * A custom {@link ViewGroup} that operates similarly to a {@link ScrollView}, except with multiple
+ * subviews. These subviews are scrolled or shrinked one at a time, until each reaches their
+ * minimum or maximum value.
+ *
+ * MultiShrinkScroller is designed for a specific problem. As such, this class is designed to be
+ * used with a specific layout file: quickcontact_activity.xml. MultiShrinkScroller expects subviews
+ * with specific ID values.
+ *
+ * MultiShrinkScroller's code is heavily influenced by ScrollView. Nonetheless, several ScrollView
+ * features are missing. For example: handling of KEYCODES, OverScroll bounce and saving
+ * scroll state in savedInstanceState bundles.
+ *
+ * Before copying this approach to nested scrolling, consider whether something simpler & less
+ * customized will work for you. For example, see the re-usable StickyHeaderListView used by
+ * WifiSetupActivity (very nice). Alternatively, check out Google+'s cover photo scrolling or
+ * Android L's built in nested scrolling support. I thought I needed a more custom ViewGroup in
+ * order to track velocity, modify EdgeEffect color & perform the originally specified animations.
+ * As a result this ViewGroup has non-standard talkback and keyboard support.
+ */
+public class MultiShrinkScroller extends FrameLayout {
+
+    /**
+     * 1000 pixels per second. Ie, 1 pixel per millisecond.
+     */
+    private static final int PIXELS_PER_SECOND = 1000;
+
+    /**
+     * Length of the acceleration animations. This value was taken from ValueAnimator.java.
+     */
+    private static final int EXIT_FLING_ANIMATION_DURATION_MS = 250;
+
+    /**
+     * In portrait mode, the height:width ratio of the photo's starting height.
+     */
+    private static final float INTERMEDIATE_HEADER_HEIGHT_RATIO = 0.6f;
+
+    /**
+     * Color blending will only be performed on the contact photo once the toolbar is compressed
+     * to this ratio of its full height.
+     */
+    private static final float COLOR_BLENDING_START_RATIO = 0.5f;
+
+    private static final float SPRING_DAMPENING_FACTOR = 0.01f;
+
+    /**
+     * When displaying a letter tile drawable, this alpha value should be used at the intermediate
+     * toolbar height.
+     */
+    private static final float DESIRED_INTERMEDIATE_LETTER_TILE_ALPHA = 0.8f;
+
+    private float[] mLastEventPosition = { 0, 0 };
+    private VelocityTracker mVelocityTracker;
+    private boolean mIsBeingDragged = false;
+    private boolean mReceivedDown = false;
+    /**
+     * Did the current downwards fling/scroll-animation start while we were fullscreen?
+     */
+    private boolean mIsFullscreenDownwardsFling = false;
+
+    private ScrollView mScrollView;
+    private View mScrollViewChild;
+    private View mToolbar;
+    private QuickContactImageView mPhotoView;
+    private View mPhotoViewContainer;
+    private View mTransparentView;
+    private MultiShrinkScrollerListener mListener;
+    private TextView mLargeTextView;
+    private TextView mPhoneticNameView;
+    private View mTitleAndPhoneticNameView;
+    private View mPhotoTouchInterceptOverlay;
+    /** Contains desired size & vertical offset of the title, once the header is fully compressed */
+    private TextView mInvisiblePlaceholderTextView;
+    private View mTitleGradientView;
+    private View mActionBarGradientView;
+    private View mStartColumn;
+    private int mHeaderTintColor;
+    private int mMaximumHeaderHeight;
+    private int mMinimumHeaderHeight;
+    /**
+     * When the contact photo is tapped, it is resized to max size or this size. This value also
+     * sometimes represents the maximum achievable header size achieved by scrolling. To enforce
+     * this maximum in scrolling logic, always access this value via
+     * {@link #getMaximumScrollableHeaderHeight}.
+     */
+    private int mIntermediateHeaderHeight;
+    /**
+     * If true, regular scrolling can expand the header beyond mIntermediateHeaderHeight. The
+     * header, that contains the contact photo, can expand to a height equal its width.
+     */
+    private boolean mIsOpenContactSquare;
+    private int mMaximumHeaderTextSize;
+    private int mMaximumPhoneticNameViewHeight;
+    private int mMaximumFullNameViewHeight;
+    private int mCollapsedTitleBottomMargin;
+    private int mCollapsedTitleStartMargin;
+    private int mMinimumPortraitHeaderHeight;
+    private int mMaximumPortraitHeaderHeight;
+    /**
+     * True once the header has touched the top of the screen at least once.
+     */
+    private boolean mHasEverTouchedTheTop;
+    private boolean mIsTouchDisabledForDismissAnimation;
+    private boolean mIsTouchDisabledForSuppressLayout;
+
+    private final Scroller mScroller;
+    private final EdgeEffect mEdgeGlowBottom;
+    private final EdgeEffect mEdgeGlowTop;
+    private final int mTouchSlop;
+    private final int mMaximumVelocity;
+    private final int mMinimumVelocity;
+    private final int mDismissDistanceOnScroll;
+    private final int mDismissDistanceOnRelease;
+    private final int mSnapToTopSlopHeight;
+    private final int mTransparentStartHeight;
+    private final int mMaximumTitleMargin;
+    private final float mToolbarElevation;
+    /// M: bug fix for ALPS01768247
+    private boolean mIsTwoPanel;
+    private final float mLandscapePhotoRatio;
+    private final int mActionBarSize;
+
+    // Objects used to perform color filtering on the header. These are stored as fields for
+    // the sole purpose of avoiding "new" operations inside animation loops.
+    private final ColorMatrix mWhitenessColorMatrix = new ColorMatrix();
+    private final ColorMatrix mColorMatrix = new ColorMatrix();
+    private final float[] mAlphaMatrixValues = {
+            0, 0, 0, 0, 0,
+            0, 0, 0, 0, 0,
+            0, 0, 0, 0, 0,
+            0, 0, 0, 1, 0
+    };
+    private final ColorMatrix mMultiplyBlendMatrix = new ColorMatrix();
+    private final float[] mMultiplyBlendMatrixValues = {
+            0, 0, 0, 0, 0,
+            0, 0, 0, 0, 0,
+            0, 0, 0, 0, 0,
+            0, 0, 0, 1, 0
+    };
+
+    private final Interpolator mTextSizePathInterpolator =
+            PathInterpolatorCompat.create(0.16f, 0.4f, 0.2f, 1);
+
+    private final int[] mGradientColors = new int[] {0,0x88000000};
+    private GradientDrawable mTitleGradientDrawable = new GradientDrawable(
+            GradientDrawable.Orientation.TOP_BOTTOM, mGradientColors);
+    private GradientDrawable mActionBarGradientDrawable = new GradientDrawable(
+            GradientDrawable.Orientation.BOTTOM_TOP, mGradientColors);
+
+    public interface MultiShrinkScrollerListener {
+        void onScrolledOffBottom();
+
+        void onStartScrollOffBottom();
+
+        void onTransparentViewHeightChange(float ratio);
+
+        void onEntranceAnimationDone();
+
+        void onEnterFullscreen();
+
+        void onExitFullscreen();
+    }
+
+    private final AnimatorListener mSnapToBottomListener = new AnimatorListenerAdapter() {
+        @Override
+        public void onAnimationEnd(Animator animation) {
+            if (getScrollUntilOffBottom() > 0 && mListener != null) {
+                // Due to a rounding error, after the animation finished we haven't fully scrolled
+                // off the screen. Lie to the listener: tell it that we did scroll off the screen.
+                mListener.onScrolledOffBottom();
+                // No other messages need to be sent to the listener.
+                mListener = null;
+            }
+        }
+    };
+
+    /**
+     * Interpolator from android.support.v4.view.ViewPager. Snappier and more elastic feeling
+     * than the default interpolator.
+     */
+    private static final Interpolator sInterpolator = new Interpolator() {
+
+        /**
+         * {@inheritDoc}
+         */
+        @Override
+        public float getInterpolation(float t) {
+            t -= 1.0f;
+            return t * t * t * t * t + 1.0f;
+        }
+    };
+
+    public MultiShrinkScroller(Context context) {
+        this(context, null);
+    }
+
+    public MultiShrinkScroller(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public MultiShrinkScroller(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+
+        final ViewConfiguration configuration = ViewConfiguration.get(context);
+        setFocusable(false);
+        // Drawing must be enabled in order to support EdgeEffect
+        setWillNotDraw(/* willNotDraw = */ false);
+
+        mEdgeGlowBottom = new EdgeEffect(context);
+        mEdgeGlowTop = new EdgeEffect(context);
+        mScroller = new Scroller(context, sInterpolator);
+        mTouchSlop = configuration.getScaledTouchSlop();
+        mMinimumVelocity = configuration.getScaledMinimumFlingVelocity();
+        mMaximumVelocity = configuration.getScaledMaximumFlingVelocity();
+        mTransparentStartHeight = (int) getResources().getDimension(
+                R.dimen.quickcontact_starting_empty_height);
+        mToolbarElevation = getResources().getDimension(
+                R.dimen.quick_contact_toolbar_elevation);
+        mIsTwoPanel = getResources().getBoolean(R.bool.quickcontact_two_panel);
+        mMaximumTitleMargin = (int) getResources().getDimension(
+                R.dimen.quickcontact_title_initial_margin);
+
+        mDismissDistanceOnScroll = (int) getResources().getDimension(
+                R.dimen.quickcontact_dismiss_distance_on_scroll);
+        mDismissDistanceOnRelease = (int) getResources().getDimension(
+                R.dimen.quickcontact_dismiss_distance_on_release);
+        mSnapToTopSlopHeight = (int) getResources().getDimension(
+                R.dimen.quickcontact_snap_to_top_slop_height);
+
+        final TypedValue photoRatio = new TypedValue();
+        getResources().getValue(R.dimen.quickcontact_landscape_photo_ratio, photoRatio,
+                            /* resolveRefs = */ true);
+        mLandscapePhotoRatio = photoRatio.getFloat();
+
+        final TypedArray attributeArray = context.obtainStyledAttributes(
+                new int[]{android.R.attr.actionBarSize});
+        mActionBarSize = attributeArray.getDimensionPixelSize(0, 0);
+        mMinimumHeaderHeight = mActionBarSize;
+        // This value is approximately equal to the portrait ActionBar size. It isn't exactly the
+        // same, since the landscape and portrait ActionBar sizes can be different.
+        mMinimumPortraitHeaderHeight = mMinimumHeaderHeight;
+        attributeArray.recycle();
+    }
+
+    /**
+     * This method must be called inside the Activity's OnCreate.
+     */
+    public void initialize(MultiShrinkScrollerListener listener, boolean isOpenContactSquare,
+                final int maximumHeaderTextSize, final boolean shouldUpdateNameViewHeight) {
+        mScrollView = (ScrollView) findViewById(R.id.content_scroller);
+        mScrollViewChild = findViewById(R.id.card_container);
+        mToolbar = findViewById(R.id.toolbar_parent);
+        mPhotoViewContainer = findViewById(R.id.toolbar_parent);
+        mTransparentView = findViewById(R.id.transparent_view);
+        mLargeTextView = (TextView) findViewById(R.id.large_title);
+        mPhoneticNameView = (TextView) findViewById(R.id.phonetic_name);
+        mTitleAndPhoneticNameView = findViewById(R.id.title_and_phonetic_name);
+        mInvisiblePlaceholderTextView = (TextView) findViewById(R.id.placeholder_textview);
+        mStartColumn = findViewById(R.id.empty_start_column);
+        // Touching the empty space should close the card
+        if (mStartColumn != null) {
+            mStartColumn.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    scrollOffBottom();
+                }
+            });
+            findViewById(R.id.empty_end_column).setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    scrollOffBottom();
+                }
+            });
+        }
+        mListener = listener;
+        mIsOpenContactSquare = isOpenContactSquare;
+
+        mPhotoView = (QuickContactImageView) findViewById(R.id.photo);
+
+        mTitleGradientView = findViewById(R.id.title_gradient);
+        mTitleGradientView.setBackground(mTitleGradientDrawable);
+        mActionBarGradientView = findViewById(R.id.action_bar_gradient);
+        mActionBarGradientView.setBackground(mActionBarGradientDrawable);
+        mCollapsedTitleStartMargin = ((Toolbar) findViewById(R.id.toolbar)).getContentInsetStart();
+
+        mPhotoTouchInterceptOverlay = findViewById(R.id.photo_touch_intercept_overlay);
+        if (!mIsTwoPanel) {
+            mPhotoTouchInterceptOverlay.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    expandHeader();
+                }
+            });
+        }
+
+        SchedulingUtils.doOnPreDraw(this, /* drawNextFrame = */ false, new Runnable() {
+            @Override
+            public void run() {
+                /** M: Bug Fix for ALPS1747395 @{ */
+                if (getContext() == null) {
+                    return;
+                }
+                /** }@ */
+                /// M: bug fix for ALPS01768247
+                mIsTwoPanel = getResources().getBoolean(R.bool.quickcontact_two_panel);
+                if (!mIsTwoPanel) {
+                    // We never want the height of the photo view to exceed its width.
+                    mMaximumHeaderHeight = mPhotoViewContainer.getWidth();
+                    mIntermediateHeaderHeight = (int) (mMaximumHeaderHeight
+                            * INTERMEDIATE_HEADER_HEIGHT_RATIO);
+                }
+                mMaximumPortraitHeaderHeight = mIsTwoPanel ? getHeight()
+                        : mPhotoViewContainer.getWidth();
+                setHeaderHeight(getMaximumScrollableHeaderHeight());
+                if (shouldUpdateNameViewHeight) {
+                    mMaximumHeaderTextSize = mTitleAndPhoneticNameView.getHeight();
+                    mMaximumFullNameViewHeight = mLargeTextView.getHeight();
+                    // We cannot rely on mPhoneticNameView.getHeight() since it could be 0
+                    final int phoneticNameSize = getResources().getDimensionPixelSize(
+                            R.dimen.quickcontact_maximum_phonetic_name_size);
+                    final int fullNameSize = getResources().getDimensionPixelSize(
+                            R.dimen.quickcontact_maximum_title_size);
+                    mMaximumPhoneticNameViewHeight =
+                            mMaximumFullNameViewHeight * phoneticNameSize / fullNameSize;
+                }
+                if (maximumHeaderTextSize > 0) {
+                    mMaximumHeaderTextSize = maximumHeaderTextSize;
+                }
+                if (mIsTwoPanel) {
+                    mMaximumHeaderHeight = getHeight();
+                    mMinimumHeaderHeight = mMaximumHeaderHeight;
+                    mIntermediateHeaderHeight = mMaximumHeaderHeight;
+
+                    // Permanently set photo width and height.
+                    final ViewGroup.LayoutParams photoLayoutParams
+                            = mPhotoViewContainer.getLayoutParams();
+                    photoLayoutParams.height = mMaximumHeaderHeight;
+                    photoLayoutParams.width = (int) (mMaximumHeaderHeight * mLandscapePhotoRatio);
+                    mPhotoViewContainer.setLayoutParams(photoLayoutParams);
+
+                    // Permanently set title width and margin.
+                    final FrameLayout.LayoutParams largeTextLayoutParams
+                            = (FrameLayout.LayoutParams) mTitleAndPhoneticNameView
+                            .getLayoutParams();
+                    largeTextLayoutParams.width = photoLayoutParams.width -
+                            largeTextLayoutParams.leftMargin - largeTextLayoutParams.rightMargin;
+                    largeTextLayoutParams.gravity = Gravity.BOTTOM | Gravity.START;
+                    mTitleAndPhoneticNameView.setLayoutParams(largeTextLayoutParams);
+                } else {
+                    // Set the width of mLargeTextView as if it was nested inside
+                    // mPhotoViewContainer.
+                    mLargeTextView.setWidth(mPhotoViewContainer.getWidth()
+                            - 2 * mMaximumTitleMargin);
+                    mPhoneticNameView.setWidth(mPhotoViewContainer.getWidth()
+                            - 2 * mMaximumTitleMargin);
+                }
+
+                calculateCollapsedLargeTitlePadding();
+                updateHeaderTextSizeAndMargin();
+                configureGradientViewHeights();
+            }
+        });
+        ///M:[for rcs-e] show joyn icon on the top left@{
+        ExtensionManager.getInstance().getViewCustomExtension()
+        .getQuickContactScrollerCustom()
+        .createJoynIconView((FrameLayout) findViewById(R.id.placeholder_container),
+                mLargeTextView, ((Activity) getContext()).getIntent().getData());
+        ///@}
+        ///M:[for rcs] show Rcs icon on the top left@{
+        ExtensionManager.getInstance().getRcsExtension()
+                .getQuickContactRcsScroller()
+                .createRcsIconView(
+                    (FrameLayout) findViewById(R.id.placeholder_container),
+                    mLargeTextView,
+                    ((Activity) getContext()).getIntent().getData());
+        ///@}
+    }
+
+    private void configureGradientViewHeights() {
+        final FrameLayout.LayoutParams actionBarGradientLayoutParams
+                = (FrameLayout.LayoutParams) mActionBarGradientView.getLayoutParams();
+        actionBarGradientLayoutParams.height = mActionBarSize;
+        mActionBarGradientView.setLayoutParams(actionBarGradientLayoutParams);
+        final FrameLayout.LayoutParams titleGradientLayoutParams
+                = (FrameLayout.LayoutParams) mTitleGradientView.getLayoutParams();
+        final float TITLE_GRADIENT_SIZE_COEFFICIENT = 1.25f;
+        final FrameLayout.LayoutParams largeTextLayoutParms
+                = (FrameLayout.LayoutParams) mTitleAndPhoneticNameView.getLayoutParams();
+        titleGradientLayoutParams.height = (int) ((mMaximumHeaderTextSize
+                + largeTextLayoutParms.bottomMargin) * TITLE_GRADIENT_SIZE_COEFFICIENT);
+        mTitleGradientView.setLayoutParams(titleGradientLayoutParams);
+    }
+
+    public void setTitle(String title, boolean isPhoneNumber) {
+        mLargeTextView.setText(title);
+        // We have a phone number as "mLargeTextView" so make it always LTR.
+        if (isPhoneNumber) {
+            mLargeTextView.setTextDirection(View.TEXT_DIRECTION_LTR);
+        }
+        mPhotoTouchInterceptOverlay.setContentDescription(title);
+    }
+
+    public void setPhoneticName(String phoneticName) {
+        // Set phonetic name only when it was gone before or got changed.
+        if (mPhoneticNameView.getVisibility() == View.VISIBLE
+                && phoneticName.equals(mPhoneticNameView.getText())) {
+            return;
+        }
+        mPhoneticNameView.setText(phoneticName);
+        // Every time the phonetic name is changed, set mPhoneticNameView as visible,
+        // in case it just changed from Visibility=GONE.
+        mPhoneticNameView.setVisibility(View.VISIBLE);
+        // TODO try not using initialize() to refresh phonetic name view: b/27410518
+        initialize(mListener, mIsOpenContactSquare, /* maximumHeaderTextSize */
+                (mMaximumFullNameViewHeight + mMaximumPhoneticNameViewHeight),
+                /* shouldUpdateNameViewHeight */ false);
+    }
+
+    public void setPhoneticNameGone() {
+        // Remove phonetic name only when it was visible before.
+        if (mPhoneticNameView.getVisibility() == View.GONE) {
+            return;
+        }
+        mPhoneticNameView.setVisibility(View.GONE);
+        // Initialize to make Visibility work.
+        // TODO try not using initialize() to refresh phonetic name view: b/27410518
+        initialize(mListener, mIsOpenContactSquare,
+                /* maximumHeaderTextSize */ mMaximumFullNameViewHeight,
+                /* shouldUpdateNameViewHeight */ false);
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(MotionEvent event) {
+        if (mVelocityTracker == null) {
+            mVelocityTracker = VelocityTracker.obtain();
+        }
+        mVelocityTracker.addMovement(event);
+
+        // The only time we want to intercept touch events is when we are being dragged.
+        return shouldStartDrag(event);
+    }
+
+    private boolean shouldStartDrag(MotionEvent event) {
+        if (mIsTouchDisabledForDismissAnimation || mIsTouchDisabledForSuppressLayout) return false;
+
+
+        if (mIsBeingDragged) {
+            mIsBeingDragged = false;
+            return false;
+        }
+
+        switch (event.getAction()) {
+            // If we are in the middle of a fling and there is a down event, we'll steal it and
+            // start a drag.
+            case MotionEvent.ACTION_DOWN:
+                updateLastEventPosition(event);
+                if (!mScroller.isFinished()) {
+                    startDrag();
+                    return true;
+                } else {
+                    mReceivedDown = true;
+                }
+                break;
+
+            // Otherwise, we will start a drag if there is enough motion in the direction we are
+            // capable of scrolling.
+            case MotionEvent.ACTION_MOVE:
+                if (motionShouldStartDrag(event)) {
+                    updateLastEventPosition(event);
+                    startDrag();
+                    return true;
+                }
+                break;
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (mIsTouchDisabledForDismissAnimation || mIsTouchDisabledForSuppressLayout) return true;
+
+        final int action = event.getAction();
+
+        if (mVelocityTracker == null) {
+            mVelocityTracker = VelocityTracker.obtain();
+        }
+        mVelocityTracker.addMovement(event);
+
+        if (!mIsBeingDragged) {
+            if (shouldStartDrag(event)) {
+                return true;
+            }
+
+            if (action == MotionEvent.ACTION_UP && mReceivedDown) {
+                mReceivedDown = false;
+                return performClick();
+            }
+            return true;
+        }
+
+        switch (action) {
+            case MotionEvent.ACTION_MOVE:
+                final float delta = updatePositionAndComputeDelta(event);
+                scrollTo(0, getScroll() + (int) delta);
+                mReceivedDown = false;
+
+                if (mIsBeingDragged) {
+                    final int distanceFromMaxScrolling = getMaximumScrollUpwards() - getScroll();
+                    if (delta > distanceFromMaxScrolling) {
+                        // The ScrollView is being pulled upwards while there is no more
+                        // content offscreen, and the view port is already fully expanded.
+                        EdgeEffectCompat.onPull(mEdgeGlowBottom, delta / getHeight(),
+                                1 - event.getX() / getWidth());
+                    }
+
+                    if (!mEdgeGlowBottom.isFinished()) {
+                        postInvalidateOnAnimation();
+                    }
+
+                    if (shouldDismissOnScroll()) {
+                        scrollOffBottom();
+                    }
+
+                }
+                break;
+
+            case MotionEvent.ACTION_UP:
+            case MotionEvent.ACTION_CANCEL:
+                stopDrag(action == MotionEvent.ACTION_CANCEL);
+                mReceivedDown = false;
+                break;
+        }
+
+        return true;
+    }
+
+    public void setHeaderTintColor(int color) {
+        mHeaderTintColor = color;
+        updatePhotoTintAndDropShadow();
+        if (CompatUtils.isLollipopCompatible()) {
+            // Use the same amount of alpha on the new tint color as the previous tint color.
+            final int edgeEffectAlpha = Color.alpha(mEdgeGlowBottom.getColor());
+            mEdgeGlowBottom.setColor((color & 0xffffff) | Color.argb(edgeEffectAlpha, 0, 0, 0));
+            mEdgeGlowTop.setColor(mEdgeGlowBottom.getColor());
+        }
+    }
+
+    /**
+     * Expand to maximum size.
+     */
+    private void expandHeader() {
+        if (getHeaderHeight() != mMaximumHeaderHeight) {
+            final ObjectAnimator animator = ObjectAnimator.ofInt(this, "headerHeight",
+                    mMaximumHeaderHeight);
+            animator.setDuration(ExpandingEntryCardView.DURATION_EXPAND_ANIMATION_CHANGE_BOUNDS);
+            animator.start();
+            // Scroll nested scroll view to its top
+            if (mScrollView.getScrollY() != 0) {
+                ObjectAnimator.ofInt(mScrollView, "scrollY", -mScrollView.getScrollY()).start();
+            }
+        }
+    }
+
+    private void startDrag() {
+        mIsBeingDragged = true;
+        mScroller.abortAnimation();
+    }
+
+    private void stopDrag(boolean cancelled) {
+        mIsBeingDragged = false;
+        if (!cancelled && getChildCount() > 0) {
+            final float velocity = getCurrentVelocity();
+            if (velocity > mMinimumVelocity || velocity < -mMinimumVelocity) {
+                fling(-velocity);
+                onDragFinished(mScroller.getFinalY() - mScroller.getStartY());
+            } else {
+                onDragFinished(/* flingDelta = */ 0);
+            }
+        } else {
+            onDragFinished(/* flingDelta = */ 0);
+        }
+
+        if (mVelocityTracker != null) {
+            mVelocityTracker.recycle();
+            mVelocityTracker = null;
+        }
+
+        mEdgeGlowBottom.onRelease();
+    }
+
+    private void onDragFinished(int flingDelta) {
+        if (getTransparentViewHeight() <= 0) {
+            // Don't perform any snapping if quick contacts is full screen.
+            return;
+        }
+        if (!snapToTopOnDragFinished(flingDelta)) {
+            // The drag/fling won't result in the content at the top of the Window. Consider
+            // snapping the content to the bottom of the window.
+            snapToBottomOnDragFinished();
+        }
+    }
+
+    /**
+     * If needed, snap the subviews to the top of the Window.
+     *
+     * @return TRUE if QuickContacts will snap/fling to to top after this method call.
+     */
+    private boolean snapToTopOnDragFinished(int flingDelta) {
+        if (!mHasEverTouchedTheTop) {
+            // If the current fling is predicted to scroll past the top, then we don't need to snap
+            // to the top. However, if the fling only flings past the top by a tiny amount,
+            // it will look nicer to snap than to fling.
+            final float predictedScrollPastTop = getTransparentViewHeight() - flingDelta;
+            if (predictedScrollPastTop < -mSnapToTopSlopHeight) {
+                return false;
+            }
+
+            if (getTransparentViewHeight() <= mTransparentStartHeight) {
+                // We are above the starting scroll position so snap to the top.
+                mScroller.forceFinished(true);
+                smoothScrollBy(getTransparentViewHeight());
+                return true;
+            }
+            return false;
+        }
+        if (getTransparentViewHeight() < mDismissDistanceOnRelease) {
+            mScroller.forceFinished(true);
+            smoothScrollBy(getTransparentViewHeight());
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * If needed, scroll all the subviews off the bottom of the Window.
+     */
+    private void snapToBottomOnDragFinished() {
+        if (mHasEverTouchedTheTop) {
+            if (getTransparentViewHeight() > mDismissDistanceOnRelease) {
+                scrollOffBottom();
+            }
+            return;
+        }
+        if (getTransparentViewHeight() > mTransparentStartHeight) {
+            scrollOffBottom();
+        }
+    }
+
+    /**
+     * Returns TRUE if we have scrolled far QuickContacts far enough that we should dismiss it
+     * without waiting for the user to finish their drag.
+     */
+    private boolean shouldDismissOnScroll() {
+        return mHasEverTouchedTheTop && getTransparentViewHeight() > mDismissDistanceOnScroll;
+    }
+
+    /**
+     * Return ratio of non-transparent:viewgroup-height for this viewgroup at the starting position.
+     */
+    public float getStartingTransparentHeightRatio() {
+        return getTransparentHeightRatio(mTransparentStartHeight);
+    }
+
+    private float getTransparentHeightRatio(int transparentHeight) {
+        final float heightRatio = (float) transparentHeight / getHeight();
+        // Clamp between [0, 1] in case this is called before height is initialized.
+        return 1.0f - Math.max(Math.min(1.0f, heightRatio), 0f);
+    }
+
+    public void scrollOffBottom() {
+        mIsTouchDisabledForDismissAnimation = true;
+        final Interpolator interpolator = new AcceleratingFlingInterpolator(
+                EXIT_FLING_ANIMATION_DURATION_MS, getCurrentVelocity(),
+                getScrollUntilOffBottom());
+        mScroller.forceFinished(true);
+        ObjectAnimator translateAnimation = ObjectAnimator.ofInt(this, "scroll",
+                getScroll() - getScrollUntilOffBottom());
+        translateAnimation.setRepeatCount(0);
+        translateAnimation.setInterpolator(interpolator);
+        translateAnimation.setDuration(EXIT_FLING_ANIMATION_DURATION_MS);
+        translateAnimation.addListener(mSnapToBottomListener);
+        translateAnimation.start();
+        if (mListener != null) {
+            mListener.onStartScrollOffBottom();
+        }
+    }
+
+    /**
+     * @param scrollToCurrentPosition if true, will scroll from the bottom of the screen to the
+     * current position. Otherwise, will scroll from the bottom of the screen to the top of the
+     * screen.
+     */
+    public void scrollUpForEntranceAnimation(boolean scrollToCurrentPosition) {
+        final int currentPosition = getScroll();
+        final int bottomScrollPosition = currentPosition
+                - (getHeight() - getTransparentViewHeight()) + 1;
+        final Interpolator interpolator = AnimationUtils.loadInterpolator(getContext(),
+                android.R.interpolator.linear_out_slow_in);
+        final int desiredValue = currentPosition + (scrollToCurrentPosition ? currentPosition
+                : getTransparentViewHeight());
+        final ObjectAnimator animator = ObjectAnimator.ofInt(this, "scroll", bottomScrollPosition,
+                desiredValue);
+        animator.setInterpolator(interpolator);
+        animator.addUpdateListener(new AnimatorUpdateListener() {
+            @Override
+            public void onAnimationUpdate(ValueAnimator animation) {
+                if (animation.getAnimatedValue().equals(desiredValue) && mListener != null) {
+                    mListener.onEntranceAnimationDone();
+                }
+            }
+        });
+        animator.start();
+    }
+
+    @Override
+    public void scrollTo(int x, int y) {
+        final int delta = y - getScroll();
+        boolean wasFullscreen = getScrollNeededToBeFullScreen() <= 0;
+        if (delta > 0) {
+            scrollUp(delta);
+        } else {
+            scrollDown(delta);
+        }
+        updatePhotoTintAndDropShadow();
+        updateHeaderTextSizeAndMargin();
+        final boolean isFullscreen = getScrollNeededToBeFullScreen() <= 0;
+        mHasEverTouchedTheTop |= isFullscreen;
+        if (mListener != null) {
+            if (wasFullscreen && !isFullscreen) {
+                 mListener.onExitFullscreen();
+            } else if (!wasFullscreen && isFullscreen) {
+                mListener.onEnterFullscreen();
+            }
+            if (!isFullscreen || !wasFullscreen) {
+                mListener.onTransparentViewHeightChange(
+                        getTransparentHeightRatio(getTransparentViewHeight()));
+            }
+        }
+    }
+
+    /**
+     * Change the height of the header/toolbar. Do *not* use this outside animations. This was
+     * designed for use by {@link #prepareForShrinkingScrollChild}.
+     */
+    @NeededForReflection
+    public void setToolbarHeight(int delta) {
+        final ViewGroup.LayoutParams toolbarLayoutParams
+                = mToolbar.getLayoutParams();
+        toolbarLayoutParams.height = delta;
+        mToolbar.setLayoutParams(toolbarLayoutParams);
+
+        updatePhotoTintAndDropShadow();
+        updateHeaderTextSizeAndMargin();
+    }
+
+    @NeededForReflection
+    public int getToolbarHeight() {
+        return mToolbar.getLayoutParams().height;
+    }
+
+    /**
+     * Set the height of the toolbar and update its tint accordingly.
+     */
+    @NeededForReflection
+    public void setHeaderHeight(int height) {
+        final ViewGroup.LayoutParams toolbarLayoutParams
+                = mToolbar.getLayoutParams();
+        toolbarLayoutParams.height = height;
+        mToolbar.setLayoutParams(toolbarLayoutParams);
+        updatePhotoTintAndDropShadow();
+        updateHeaderTextSizeAndMargin();
+    }
+
+    @NeededForReflection
+    public int getHeaderHeight() {
+        return mToolbar.getLayoutParams().height;
+    }
+
+    @NeededForReflection
+    public void setScroll(int scroll) {
+        scrollTo(0, scroll);
+    }
+
+    /**
+     * Returns the total amount scrolled inside the nested ScrollView + the amount of shrinking
+     * performed on the ToolBar. This is the value inspected by animators.
+     */
+    @NeededForReflection
+    public int getScroll() {
+        return mTransparentStartHeight - getTransparentViewHeight()
+                + getMaximumScrollableHeaderHeight() - getToolbarHeight()
+                + mScrollView.getScrollY();
+    }
+
+    private int getMaximumScrollableHeaderHeight() {
+        return mIsOpenContactSquare ? mMaximumHeaderHeight : mIntermediateHeaderHeight;
+    }
+
+    /**
+     * A variant of {@link #getScroll} that pretends the header is never larger than
+     * than mIntermediateHeaderHeight. This function is sometimes needed when making scrolling
+     * decisions that will not change the header size (ie, snapping to the bottom or top).
+     *
+     * When mIsOpenContactSquare is true, this function considers mIntermediateHeaderHeight ==
+     * mMaximumHeaderHeight, since snapping decisions will be made relative the full header
+     * size when mIsOpenContactSquare = true.
+     *
+     * This value should never be used in conjunction with {@link #getScroll} values.
+     */
+    private int getScroll_ignoreOversizedHeaderForSnapping() {
+        return mTransparentStartHeight - getTransparentViewHeight()
+                + Math.max(getMaximumScrollableHeaderHeight() - getToolbarHeight(), 0)
+                + mScrollView.getScrollY();
+    }
+
+    /**
+     * Amount of transparent space above the header/toolbar.
+     */
+    public int getScrollNeededToBeFullScreen() {
+        return getTransparentViewHeight();
+    }
+
+    /**
+     * Return amount of scrolling needed in order for all the visible subviews to scroll off the
+     * bottom.
+     */
+    private int getScrollUntilOffBottom() {
+        return getHeight() + getScroll_ignoreOversizedHeaderForSnapping()
+                - mTransparentStartHeight;
+    }
+
+    @Override
+    public void computeScroll() {
+        if (mScroller.computeScrollOffset()) {
+            // Examine the fling results in order to activate EdgeEffect and halt flings.
+            final int oldScroll = getScroll();
+            scrollTo(0, mScroller.getCurrY());
+            final int delta = mScroller.getCurrY() - oldScroll;
+            final int distanceFromMaxScrolling = getMaximumScrollUpwards() - getScroll();
+            if (delta > distanceFromMaxScrolling && distanceFromMaxScrolling > 0) {
+                mEdgeGlowBottom.onAbsorb((int) mScroller.getCurrVelocity());
+            }
+            if (mIsFullscreenDownwardsFling && getTransparentViewHeight() > 0) {
+                // Halt the fling once QuickContact's top is on screen.
+                scrollTo(0, getScroll() + getTransparentViewHeight());
+                mEdgeGlowTop.onAbsorb((int) mScroller.getCurrVelocity());
+                mScroller.abortAnimation();
+                mIsFullscreenDownwardsFling = false;
+            }
+            if (!awakenScrollBars()) {
+                // Keep on drawing until the animation has finished.
+                postInvalidateOnAnimation();
+            }
+            if (mScroller.getCurrY() >= getMaximumScrollUpwards()) {
+                // Halt the fling once QuickContact's bottom is on screen.
+                mScroller.abortAnimation();
+                mIsFullscreenDownwardsFling = false;
+            }
+        }
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        super.draw(canvas);
+
+        final int width = getWidth() - getPaddingLeft() - getPaddingRight();
+        final int height = getHeight();
+
+        if (!mEdgeGlowBottom.isFinished()) {
+            final int restoreCount = canvas.save();
+
+            // Draw the EdgeEffect on the bottom of the Window (Or a little bit below the bottom
+            // of the Window if we start to scroll upwards while EdgeEffect is visible). This
+            // does not need to consider the case where this MultiShrinkScroller doesn't fill
+            // the Window, since the nested ScrollView should be set to fillViewport.
+            canvas.translate(-width + getPaddingLeft(),
+                    height + getMaximumScrollUpwards() - getScroll());
+
+            canvas.rotate(180, width, 0);
+            if (mIsTwoPanel) {
+                // Only show the EdgeEffect on the bottom of the ScrollView.
+                mEdgeGlowBottom.setSize(mScrollView.getWidth(), height);
+                if (getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
+                    canvas.translate(mPhotoViewContainer.getWidth(), 0);
+                }
+            } else {
+                mEdgeGlowBottom.setSize(width, height);
+            }
+            if (mEdgeGlowBottom.draw(canvas)) {
+                postInvalidateOnAnimation();
+            }
+            canvas.restoreToCount(restoreCount);
+        }
+
+        if (!mEdgeGlowTop.isFinished()) {
+            final int restoreCount = canvas.save();
+            if (mIsTwoPanel) {
+                mEdgeGlowTop.setSize(mScrollView.getWidth(), height);
+                if (getLayoutDirection() != View.LAYOUT_DIRECTION_RTL) {
+                    canvas.translate(mPhotoViewContainer.getWidth(), 0);
+                }
+            } else {
+                mEdgeGlowTop.setSize(width, height);
+            }
+            if (mEdgeGlowTop.draw(canvas)) {
+                postInvalidateOnAnimation();
+            }
+            canvas.restoreToCount(restoreCount);
+        }
+    }
+
+    private float getCurrentVelocity() {
+        if (mVelocityTracker == null) {
+            return 0;
+        }
+        mVelocityTracker.computeCurrentVelocity(PIXELS_PER_SECOND, mMaximumVelocity);
+        return mVelocityTracker.getYVelocity();
+    }
+
+    private void fling(float velocity) {
+        // For reasons I do not understand, scrolling is less janky when maxY=Integer.MAX_VALUE
+        // then when maxY is set to an actual value.
+        mScroller.fling(0, getScroll(), 0, (int) velocity, 0, 0, -Integer.MAX_VALUE,
+                Integer.MAX_VALUE);
+        if (velocity < 0 && mTransparentView.getHeight() <= 0) {
+            mIsFullscreenDownwardsFling = true;
+        }
+        invalidate();
+    }
+
+    private int getMaximumScrollUpwards() {
+        if (!mIsTwoPanel) {
+            return mTransparentStartHeight
+                    // How much the Header view can compress
+                    + getMaximumScrollableHeaderHeight() - getFullyCompressedHeaderHeight()
+                    // How much the ScrollView can scroll. 0, if child is smaller than ScrollView.
+                    + Math.max(0, mScrollViewChild.getHeight() - getHeight()
+                    + getFullyCompressedHeaderHeight());
+        } else {
+            return mTransparentStartHeight
+                    // How much the ScrollView can scroll. 0, if child is smaller than ScrollView.
+                    + Math.max(0, mScrollViewChild.getHeight() - getHeight());
+        }
+    }
+
+    private int getTransparentViewHeight() {
+        return mTransparentView.getLayoutParams().height;
+    }
+
+    private void setTransparentViewHeight(int height) {
+        mTransparentView.getLayoutParams().height = height;
+        mTransparentView.setLayoutParams(mTransparentView.getLayoutParams());
+    }
+
+    private void scrollUp(int delta) {
+        if (getTransparentViewHeight() != 0) {
+            final int originalValue = getTransparentViewHeight();
+            setTransparentViewHeight(getTransparentViewHeight() - delta);
+            setTransparentViewHeight(Math.max(0, getTransparentViewHeight()));
+            delta -= originalValue - getTransparentViewHeight();
+        }
+        final ViewGroup.LayoutParams toolbarLayoutParams
+                = mToolbar.getLayoutParams();
+        if (toolbarLayoutParams.height > getFullyCompressedHeaderHeight()) {
+            final int originalValue = toolbarLayoutParams.height;
+            toolbarLayoutParams.height -= delta;
+            toolbarLayoutParams.height = Math.max(toolbarLayoutParams.height,
+                    getFullyCompressedHeaderHeight());
+            mToolbar.setLayoutParams(toolbarLayoutParams);
+            delta -= originalValue - toolbarLayoutParams.height;
+        }
+        mScrollView.scrollBy(0, delta);
+    }
+
+    /**
+     * Returns the minimum size that we want to compress the header to, given that we don't want to
+     * allow the the ScrollView to scroll unless there is new content off of the edge of ScrollView.
+     */
+    private int getFullyCompressedHeaderHeight() {
+        return Math.min(Math.max(mToolbar.getLayoutParams().height - getOverflowingChildViewSize(),
+                mMinimumHeaderHeight), getMaximumScrollableHeaderHeight());
+    }
+
+    /**
+     * Returns the amount of mScrollViewChild that doesn't fit inside its parent.
+     */
+    private int getOverflowingChildViewSize() {
+        final int usedScrollViewSpace = mScrollViewChild.getHeight();
+        return -getHeight() + usedScrollViewSpace + mToolbar.getLayoutParams().height;
+    }
+
+    private void scrollDown(int delta) {
+        if (mScrollView.getScrollY() > 0) {
+            final int originalValue = mScrollView.getScrollY();
+            mScrollView.scrollBy(0, delta);
+            delta -= mScrollView.getScrollY() - originalValue;
+        }
+        final ViewGroup.LayoutParams toolbarLayoutParams = mToolbar.getLayoutParams();
+        if (toolbarLayoutParams.height < getMaximumScrollableHeaderHeight()) {
+            final int originalValue = toolbarLayoutParams.height;
+            toolbarLayoutParams.height -= delta;
+            toolbarLayoutParams.height = Math.min(toolbarLayoutParams.height,
+                    getMaximumScrollableHeaderHeight());
+            mToolbar.setLayoutParams(toolbarLayoutParams);
+            delta -= originalValue - toolbarLayoutParams.height;
+        }
+        setTransparentViewHeight(getTransparentViewHeight() - delta);
+
+        if (getScrollUntilOffBottom() <= 0) {
+            post(new Runnable() {
+                @Override
+                public void run() {
+                    if (mListener != null) {
+                        mListener.onScrolledOffBottom();
+                        // No other messages need to be sent to the listener.
+                        mListener = null;
+                    }
+                }
+            });
+        }
+    }
+
+    /**
+     * Set the header size and padding, based on the current scroll position.
+     */
+    private void updateHeaderTextSizeAndMargin() {
+        if (mIsTwoPanel) {
+            // The text size stays at a constant size & location in two panel layouts.
+            return;
+        }
+
+        // The pivot point for scaling should be middle of the starting side.
+        if (getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
+            mTitleAndPhoneticNameView.setPivotX(mTitleAndPhoneticNameView.getWidth());
+        } else {
+            mTitleAndPhoneticNameView.setPivotX(0);
+        }
+        mTitleAndPhoneticNameView.setPivotY(mMaximumHeaderTextSize / 2);
+
+        final int toolbarHeight = mToolbar.getLayoutParams().height;
+        mPhotoTouchInterceptOverlay.setClickable(toolbarHeight != mMaximumHeaderHeight);
+
+        if (toolbarHeight >= mMaximumHeaderHeight) {
+            // Everything is full size when the header is fully expanded.
+            mTitleAndPhoneticNameView.setScaleX(1);
+            mTitleAndPhoneticNameView.setScaleY(1);
+            setInterpolatedTitleMargins(1);
+            return;
+        }
+
+        final float ratio = (toolbarHeight  - mMinimumHeaderHeight)
+                / (float)(mMaximumHeaderHeight - mMinimumHeaderHeight);
+        final float minimumSize = mInvisiblePlaceholderTextView.getHeight();
+        float bezierOutput = mTextSizePathInterpolator.getInterpolation(ratio);
+        float scale = (minimumSize + (mMaximumHeaderTextSize - minimumSize) * bezierOutput)
+                / mMaximumHeaderTextSize;
+
+        // Clamp to reasonable/finite values before passing into framework. The values
+        // can be wacky before the first pre-render.
+        bezierOutput = (float) Math.min(bezierOutput, 1.0f);
+        scale = (float) Math.min(scale, 1.0f);
+
+        mTitleAndPhoneticNameView.setScaleX(scale);
+        mTitleAndPhoneticNameView.setScaleY(scale);
+        setInterpolatedTitleMargins(bezierOutput);
+        ExtensionManager.getInstance().getViewCustomExtension().getQuickContactScrollerCustom()
+        .updateJoynIconView();
+        ///M:[for rcs] update Rcs icon on the top left@{
+        ExtensionManager.getInstance().getRcsExtension().getQuickContactRcsScroller()
+                .updateRcsIconView();
+        ///@}
+    }
+
+    /**
+     * Calculate the padding around mTitleAndPhoneticNameView so that it will look appropriate once it
+     * finishes moving into its target location/size.
+     */
+    private void calculateCollapsedLargeTitlePadding() {
+        int invisiblePlaceHolderLocation[] = new int[2];
+        int largeTextViewRectLocation[] = new int[2];
+        mInvisiblePlaceholderTextView.getLocationOnScreen(invisiblePlaceHolderLocation);
+        mToolbar.getLocationOnScreen(largeTextViewRectLocation);
+        // Distance between top of toolbar to the center of the target rectangle.
+        final int desiredTopToCenter = invisiblePlaceHolderLocation[1]
+                + mInvisiblePlaceholderTextView.getHeight() / 2
+                - largeTextViewRectLocation[1];
+        // Padding needed on the mTitleAndPhoneticNameView so that it has the same amount of
+        // padding as the target rectangle.
+        mCollapsedTitleBottomMargin =
+                desiredTopToCenter - mMaximumHeaderTextSize / 2;
+    }
+
+    /**
+     * Interpolate the title's margin size. When {@param x}=1, use the maximum title margins.
+     * When {@param x}=0, use the margin values taken from {@link #mInvisiblePlaceholderTextView}.
+     */
+    private void setInterpolatedTitleMargins(float x) {
+        final FrameLayout.LayoutParams titleLayoutParams
+                = (FrameLayout.LayoutParams) mTitleAndPhoneticNameView.getLayoutParams();
+        final LinearLayout.LayoutParams toolbarLayoutParams
+                = (LinearLayout.LayoutParams) mToolbar.getLayoutParams();
+
+        // Need to add more to margin start if there is a start column
+        int startColumnWidth = mStartColumn == null ? 0 : mStartColumn.getWidth();
+
+        titleLayoutParams.setMarginStart((int) (mCollapsedTitleStartMargin * (1 - x)
+                + mMaximumTitleMargin * x) + startColumnWidth);
+        // How offset the title should be from the bottom of the toolbar
+        final int pretendBottomMargin =  (int) (mCollapsedTitleBottomMargin * (1 - x)
+                + mMaximumTitleMargin * x) ;
+        // Calculate how offset the title should be from the top of the screen. Instead of
+        // calling mTitleAndPhoneticNameView.getHeight() use the mMaximumHeaderTextSize for this
+        // calculation. The getHeight() value acts unexpectedly when mTitleAndPhoneticNameView is
+        // partially clipped by its parent.
+        titleLayoutParams.topMargin = getTransparentViewHeight()
+                + toolbarLayoutParams.height - pretendBottomMargin
+                - mMaximumHeaderTextSize;
+        titleLayoutParams.bottomMargin = 0;
+        mTitleAndPhoneticNameView.setLayoutParams(titleLayoutParams);
+    }
+
+    private void updatePhotoTintAndDropShadow() {
+        // Let's keep an eye on how long this method takes to complete.
+        Trace.beginSection("updatePhotoTintAndDropShadow");
+
+        if (mIsTwoPanel && !mPhotoView.isBasedOffLetterTile()) {
+            // When in two panel mode, UX considers photo tinting unnecessary for non letter
+            // tile photos.
+            mTitleGradientDrawable.setAlpha(0xFF);
+            mActionBarGradientDrawable.setAlpha(0xFF);
+            return;
+        }
+
+        // We need to use toolbarLayoutParams to determine the height, since the layout
+        // params can be updated before the height change is reflected inside the View#getHeight().
+        final int toolbarHeight = getToolbarHeight();
+
+        if (toolbarHeight <= mMinimumHeaderHeight && !mIsTwoPanel) {
+            ViewCompat.setElevation(mPhotoViewContainer, mToolbarElevation);
+        } else {
+            ViewCompat.setElevation(mPhotoViewContainer, 0);
+        }
+
+        // Reuse an existing mColorFilter (to avoid GC pauses) to change the photo's tint.
+        mPhotoView.clearColorFilter();
+        mColorMatrix.reset();
+
+        final int gradientAlpha;
+        if (!mPhotoView.isBasedOffLetterTile()) {
+            // Constants and equations were arbitrarily picked to choose values for saturation,
+            // whiteness, tint and gradient alpha. There were four main objectives:
+            // 1) The transition period between the unmodified image and fully colored image should
+            //    be very short.
+            // 2) The tinting should be fully applied even before the background image is fully
+            //    faded out and desaturated. Why? A half tinted photo looks bad and results in
+            //    unappealing colors.
+            // 3) The function should have a derivative of 0 at ratio = 1 to avoid discontinuities.
+            // 4) The entire process should look awesome.
+            final float ratio = calculateHeightRatioToBlendingStartHeight(toolbarHeight);
+            final float alpha = 1.0f - (float) Math.min(Math.pow(ratio, 1.5f) * 2f, 1f);
+            final float tint = (float) Math.min(Math.pow(ratio, 1.5f) * 3f, 1f);
+            mColorMatrix.setSaturation(alpha);
+            mColorMatrix.postConcat(alphaMatrix(alpha, Color.WHITE));
+            mColorMatrix.postConcat(multiplyBlendMatrix(mHeaderTintColor, tint));
+            gradientAlpha = (int) (255 * alpha);
+        } else if (mIsTwoPanel) {
+            mColorMatrix.reset();
+            mColorMatrix.postConcat(alphaMatrix(DESIRED_INTERMEDIATE_LETTER_TILE_ALPHA,
+                    mHeaderTintColor));
+            gradientAlpha = 0;
+        } else {
+            // We want a function that has DESIRED_INTERMEDIATE_LETTER_TILE_ALPHA value
+            // at the intermediate position and uses TILE_EXPONENT. Finding an equation
+            // that satisfies this condition requires the following arithmetic.
+            final float ratio = calculateHeightRatioToFullyOpen(toolbarHeight);
+            final float intermediateRatio = calculateHeightRatioToFullyOpen((int)
+                    (mMaximumPortraitHeaderHeight * INTERMEDIATE_HEADER_HEIGHT_RATIO));
+            final float TILE_EXPONENT = 3f;
+            final float slowingFactor = (float) ((1 - intermediateRatio) / intermediateRatio
+                    / (1 - Math.pow(1 - DESIRED_INTERMEDIATE_LETTER_TILE_ALPHA, 1/TILE_EXPONENT)));
+            float linearBeforeIntermediate = Math.max(1 - (1 - ratio) / intermediateRatio
+                    / slowingFactor, 0);
+            float colorAlpha = 1 - (float) Math.pow(linearBeforeIntermediate, TILE_EXPONENT);
+            mColorMatrix.postConcat(alphaMatrix(colorAlpha, mHeaderTintColor));
+            gradientAlpha = 0;
+        }
+
+        // TODO: remove re-allocation of ColorMatrixColorFilter objects (b/17627000)
+        mPhotoView.setColorFilter(new ColorMatrixColorFilter(mColorMatrix));
+
+        // Tell the photo view what tint we are trying to achieve. Depending on the type of
+        // drawable used, the photo view may or may not use this tint.
+        mPhotoView.setTint(mHeaderTintColor);
+        mTitleGradientDrawable.setAlpha(gradientAlpha);
+        mActionBarGradientDrawable.setAlpha(gradientAlpha);
+
+        Trace.endSection();
+    }
+
+    private float calculateHeightRatioToFullyOpen(int height) {
+        return (height - mMinimumPortraitHeaderHeight)
+                / (float) (mMaximumPortraitHeaderHeight - mMinimumPortraitHeaderHeight);
+    }
+
+    private float calculateHeightRatioToBlendingStartHeight(int height) {
+        final float intermediateHeight = mMaximumPortraitHeaderHeight
+                * COLOR_BLENDING_START_RATIO;
+        final float interpolatingHeightRange = intermediateHeight - mMinimumPortraitHeaderHeight;
+        if (height > intermediateHeight) {
+            return 0;
+        }
+        return (intermediateHeight - height) / interpolatingHeightRange;
+    }
+
+    /**
+     * Simulates alpha blending an image with {@param color}.
+     */
+    private ColorMatrix alphaMatrix(float alpha, int color) {
+        mAlphaMatrixValues[0] = Color.red(color) * alpha / 255;
+        mAlphaMatrixValues[6] = Color.green(color) * alpha / 255;
+        mAlphaMatrixValues[12] = Color.blue(color) * alpha / 255;
+        mAlphaMatrixValues[4] = 255 * (1 - alpha);
+        mAlphaMatrixValues[9] = 255 * (1 - alpha);
+        mAlphaMatrixValues[14] = 255 * (1 - alpha);
+        mWhitenessColorMatrix.set(mAlphaMatrixValues);
+        return mWhitenessColorMatrix;
+    }
+
+    /**
+     * Simulates multiply blending an image with a single {@param color}.
+     *
+     * Multiply blending is [Sa * Da, Sc * Dc]. See {@link android.graphics.PorterDuff}.
+     */
+    private ColorMatrix multiplyBlendMatrix(int color, float alpha) {
+        mMultiplyBlendMatrixValues[0] = multiplyBlend(Color.red(color), alpha);
+        mMultiplyBlendMatrixValues[6] = multiplyBlend(Color.green(color), alpha);
+        mMultiplyBlendMatrixValues[12] = multiplyBlend(Color.blue(color), alpha);
+        mMultiplyBlendMatrix.set(mMultiplyBlendMatrixValues);
+        return mMultiplyBlendMatrix;
+    }
+
+    private float multiplyBlend(int color, float alpha) {
+        return color * alpha / 255.0f + (1 - alpha);
+    }
+
+    private void updateLastEventPosition(MotionEvent event) {
+        mLastEventPosition[0] = event.getX();
+        mLastEventPosition[1] = event.getY();
+    }
+
+    private boolean motionShouldStartDrag(MotionEvent event) {
+        final float deltaY = event.getY() - mLastEventPosition[1];
+        return deltaY > mTouchSlop || deltaY < -mTouchSlop;
+    }
+
+    private float updatePositionAndComputeDelta(MotionEvent event) {
+        final int VERTICAL = 1;
+        final float position = mLastEventPosition[VERTICAL];
+        updateLastEventPosition(event);
+        float elasticityFactor = 1;
+        if (position < mLastEventPosition[VERTICAL] && mHasEverTouchedTheTop) {
+            // As QuickContacts is dragged from the top of the window, its rate of movement will
+            // slow down in proportion to its distance from the top. This will feel springy.
+            elasticityFactor += mTransparentView.getHeight() * SPRING_DAMPENING_FACTOR;
+        }
+        return (position - mLastEventPosition[VERTICAL]) / elasticityFactor;
+    }
+
+    private void smoothScrollBy(int delta) {
+        if (delta == 0) {
+            // Delta=0 implies the code calling smoothScrollBy is sloppy. We should avoid doing
+            // this, since it prevents Views from being able to register any clicks for 250ms.
+            throw new IllegalArgumentException("Smooth scrolling by delta=0 is "
+                    + "pointless and harmful");
+        }
+        mScroller.startScroll(0, getScroll(), 0, delta);
+        invalidate();
+    }
+
+    /**
+     * Interpolator that enforces a specific starting velocity. This is useful to avoid a
+     * discontinuity between dragging speed and flinging speed.
+     *
+     * Similar to a {@link android.view.animation.AccelerateInterpolator} in the sense that
+     * getInterpolation() is a quadratic function.
+     */
+    private class AcceleratingFlingInterpolator implements Interpolator {
+
+        private final float mStartingSpeedPixelsPerFrame;
+        private final float mDurationMs;
+        private final int mPixelsDelta;
+        private final float mNumberFrames;
+
+        public AcceleratingFlingInterpolator(int durationMs, float startingSpeedPixelsPerSecond,
+                int pixelsDelta) {
+            mStartingSpeedPixelsPerFrame = startingSpeedPixelsPerSecond / getRefreshRate();
+            mDurationMs = durationMs;
+            mPixelsDelta = pixelsDelta;
+            mNumberFrames = mDurationMs / getFrameIntervalMs();
+        }
+
+        @Override
+        public float getInterpolation(float input) {
+            final float animationIntervalNumber = mNumberFrames * input;
+            final float linearDelta = (animationIntervalNumber * mStartingSpeedPixelsPerFrame)
+                    / mPixelsDelta;
+            // Add the results of a linear interpolator (with the initial speed) with the
+            // results of a AccelerateInterpolator.
+            if (mStartingSpeedPixelsPerFrame > 0) {
+                return Math.min(input * input + linearDelta, 1);
+            } else {
+                // Initial fling was in the wrong direction, make sure that the quadratic component
+                // grows faster in order to make up for this.
+                return Math.min(input * (input - linearDelta) + linearDelta, 1);
+            }
+        }
+
+        private float getRefreshRate() {
+            final DisplayManager displayManager = (DisplayManager) MultiShrinkScroller
+                    .this.getContext().getSystemService(Context.DISPLAY_SERVICE);
+            return displayManager.getDisplay(Display.DEFAULT_DISPLAY).getRefreshRate();
+        }
+
+        public long getFrameIntervalMs() {
+            return (long)(1000 / getRefreshRate());
+        }
+    }
+
+    /**
+     * Expand the header if the mScrollViewChild is about to shrink by enough to create new empty
+     * space at the bottom of this ViewGroup.
+     */
+    public void prepareForShrinkingScrollChild(int heightDelta) {
+        final int newEmptyScrollViewSpace = -getOverflowingChildViewSize() + heightDelta;
+        if (newEmptyScrollViewSpace > 0 && !mIsTwoPanel) {
+            final int newDesiredToolbarHeight = Math.min(getToolbarHeight()
+                    + newEmptyScrollViewSpace, getMaximumScrollableHeaderHeight());
+            ObjectAnimator.ofInt(this, "toolbarHeight", newDesiredToolbarHeight).setDuration(
+                    ExpandingEntryCardView.DURATION_COLLAPSE_ANIMATION_CHANGE_BOUNDS).start();
+        }
+    }
+
+    /**
+     * If {@param areTouchesDisabled} is TRUE, ignore all of the user's touches.
+     */
+    public void setDisableTouchesForSuppressLayout(boolean areTouchesDisabled) {
+        // The card expansion animation uses the Transition framework's ChangeBounds API. This
+        // invokes suppressLayout(true) on the MultiShrinkScroller. As a result, we need to avoid
+        // all layout changes during expansion in order to avoid weird layout artifacts.
+        mIsTouchDisabledForSuppressLayout = areTouchesDisabled;
+    }
+
+}

Property changes on: vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/contacts/widget/MultiShrinkScroller.java
___________________________________________________________________
Added: svn:executable
## -0,0 +1 ##
+*
\ No newline at end of property
Index: vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/contacts/quickcontact/QuickContactActivity.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/contacts/quickcontact/QuickContactActivity.java	(revision 0)
+++ vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/contacts/quickcontact/QuickContactActivity.java	(revision 8170)
@@ -0,0 +1,3216 @@
+/*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
+ * Copyright (C) 2009 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.contacts.quickcontact;
+
+import android.accounts.Account;
+import android.animation.ArgbEvaluator;
+import android.animation.ObjectAnimator;
+import android.app.Activity;
+import android.app.Fragment;
+import android.app.LoaderManager.LoaderCallbacks;
+import android.app.SearchManager;
+import android.content.ActivityNotFoundException;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.Intent;
+import android.content.Loader;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.content.res.ColorStateList;
+import android.content.res.Configuration;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Color;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Trace;
+import android.provider.CalendarContract;
+import android.provider.ContactsContract;
+import android.provider.ContactsContract.CommonDataKinds.Email;
+import android.provider.ContactsContract.CommonDataKinds.Event;
+import android.provider.ContactsContract.CommonDataKinds.GroupMembership;
+import android.provider.ContactsContract.CommonDataKinds.Identity;
+import android.provider.ContactsContract.CommonDataKinds.Im;
+import android.provider.ContactsContract.CommonDataKinds.Nickname;
+import android.provider.ContactsContract.CommonDataKinds.Note;
+import android.provider.ContactsContract.CommonDataKinds.Organization;
+import android.provider.ContactsContract.CommonDataKinds.Phone;
+import android.provider.ContactsContract.CommonDataKinds.Relation;
+import android.provider.ContactsContract.CommonDataKinds.SipAddress;
+import android.provider.ContactsContract.CommonDataKinds.StructuredPostal;
+import android.provider.ContactsContract.CommonDataKinds.Website;
+import android.provider.ContactsContract.Contacts;
+import android.provider.ContactsContract.Data;
+import android.provider.ContactsContract.Directory;
+import android.provider.ContactsContract.DisplayNameSources;
+import android.provider.ContactsContract.DataUsageFeedback;
+import android.provider.ContactsContract.Intents;
+import android.provider.ContactsContract.QuickContact;
+import android.provider.ContactsContract.RawContacts;
+import android.support.v4.content.ContextCompat;
+import android.support.v7.graphics.Palette;
+import android.support.v7.widget.CardView;
+import android.telecom.PhoneAccount;
+import android.telecom.TelecomManager;
+import android.text.BidiFormatter;
+import android.text.Spannable;
+import android.text.SpannableString;
+import android.text.TextDirectionHeuristics;
+import android.text.TextUtils;
+import android.view.ContextMenu;
+import android.view.ContextMenu.ContextMenuInfo;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnCreateContextMenuListener;
+import android.view.WindowManager;
+import android.view.accessibility.AccessibilityEvent;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.LinearLayout;
+import android.widget.Toast;
+import android.widget.Toolbar;
+
+import com.android.contacts.ContactSaveService;
+import com.android.contacts.ContactsActivity;
+import com.android.contacts.ContactsApplication;
+import com.android.contacts.NfcHandler;
+import com.android.contacts.R;
+
+import com.android.contacts.activities.ContactEditorBaseActivity;
+import com.android.contacts.activities.PeopleActivity;
+import com.android.contacts.common.CallUtil;
+import com.android.contacts.common.ClipboardUtils;
+import com.android.contacts.common.Collapser;
+import com.android.contacts.common.ContactPhotoManager;
+import com.android.contacts.common.ContactsUtils;
+import com.android.contacts.common.activity.RequestDesiredPermissionsActivity;
+import com.android.contacts.common.activity.RequestPermissionsActivity;
+import com.android.contacts.common.compat.CompatUtils;
+import com.android.contacts.common.compat.EventCompat;
+import com.android.contacts.common.compat.MultiWindowCompat;
+import com.android.contacts.common.dialog.CallSubjectDialog;
+import com.android.contacts.common.editor.SelectAccountDialogFragment;
+import com.android.contacts.common.interactions.TouchPointManager;
+import com.android.contacts.common.lettertiles.LetterTileDrawable;
+import com.android.contacts.common.list.ShortcutIntentBuilder;
+import com.android.contacts.common.list.ShortcutIntentBuilder.OnShortcutIntentCreatedListener;
+import com.android.contacts.common.logging.Logger;
+import com.android.contacts.common.logging.ScreenEvent.ScreenType;
+import com.android.contacts.common.model.AccountTypeManager;
+import com.android.contacts.common.model.Contact;
+import com.android.contacts.common.model.ContactLoader;
+import com.android.contacts.common.model.RawContact;
+import com.android.contacts.common.model.account.AccountType;
+import com.android.contacts.common.model.account.AccountWithDataSet;
+import com.android.contacts.common.model.dataitem.DataItem;
+import com.android.contacts.common.model.dataitem.DataKind;
+import com.android.contacts.common.model.dataitem.EmailDataItem;
+import com.android.contacts.common.model.dataitem.EventDataItem;
+import com.android.contacts.common.model.dataitem.GroupMembershipDataItem;
+import com.android.contacts.common.model.dataitem.ImDataItem;
+import com.android.contacts.common.model.dataitem.NicknameDataItem;
+import com.android.contacts.common.model.dataitem.NoteDataItem;
+import com.android.contacts.common.model.dataitem.OrganizationDataItem;
+import com.android.contacts.common.model.dataitem.PhoneDataItem;
+import com.android.contacts.common.model.dataitem.RelationDataItem;
+import com.android.contacts.common.model.dataitem.SipAddressDataItem;
+import com.android.contacts.common.model.dataitem.StructuredNameDataItem;
+import com.android.contacts.common.model.dataitem.StructuredPostalDataItem;
+import com.android.contacts.common.model.dataitem.WebsiteDataItem;
+import com.android.contacts.common.model.ValuesDelta;
+import com.android.contacts.common.util.Constants;
+import com.android.contacts.common.util.ImplicitIntentsUtil;
+import com.android.contacts.common.util.DateUtils;
+import com.android.contacts.common.util.MaterialColorMapUtils;
+import com.android.contacts.common.util.MaterialColorMapUtils.MaterialPalette;
+import com.android.contacts.common.util.UriUtils;
+import com.android.contacts.common.util.ViewUtil;
+import com.android.contacts.common.vcard.VCardCommonArguments;
+import com.android.contacts.detail.ContactDisplayUtils;
+import com.android.contacts.editor.AggregationSuggestionEngine;
+import com.android.contacts.editor.AggregationSuggestionEngine.Suggestion;
+import com.android.contacts.editor.ContactEditorFragment;
+import com.android.contacts.editor.EditorIntents;
+import com.android.contacts.interactions.CalendarInteractionsLoader;
+import com.android.contacts.interactions.CallLogInteractionsLoader;
+import com.android.contacts.interactions.ContactDeletionInteraction;
+import com.android.contacts.interactions.ContactInteraction;
+import com.android.contacts.interactions.JoinContactsDialogFragment;
+import com.android.contacts.interactions.JoinContactsDialogFragment.JoinContactsListener;
+import com.android.contacts.interactions.SmsInteractionsLoader;
+import com.android.contacts.quickcontact.ExpandingEntryCardView.Entry;
+import com.android.contacts.quickcontact.ExpandingEntryCardView.EntryContextMenuInfo;
+import com.android.contacts.quickcontact.ExpandingEntryCardView.EntryTag;
+import com.android.contacts.quickcontact.ExpandingEntryCardView.ExpandingEntryCardViewListener;
+import com.android.contacts.quickcontact.WebAddress.ParseException;
+import com.android.contacts.util.ImageViewDrawableSetter;
+import com.android.contacts.util.PhoneCapabilityTester;
+import com.android.contacts.util.SchedulingUtils;
+import com.android.contacts.util.StructuredPostalUtils;
+import com.android.contacts.widget.MultiShrinkScroller;
+import com.android.contacts.widget.MultiShrinkScroller.MultiShrinkScrollerListener;
+import com.android.contacts.widget.QuickContactImageView;
+import com.android.contactsbind.HelpUtils;
+
+import com.google.common.collect.Lists;
+import com.mediatek.contacts.ExtensionManager;
+import com.mediatek.contacts.GlobalEnv;
+import com.mediatek.contacts.quickcontact.QuickContactUtils;
+import com.mediatek.contacts.ContactsSystemProperties;
+import com.mediatek.contacts.model.dataitem.ImsCallDataItem;
+import com.mediatek.contacts.simcontact.SimCardUtils;
+import com.mediatek.contacts.util.AccountTypeUtils;
+import com.mediatek.contacts.util.Log;
+
+import java.lang.SecurityException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.concurrent.ConcurrentHashMap;
+
+/**
+ * Mostly translucent {@link Activity} that shows QuickContact dialog. It loads
+ * data asynchronously, and then shows a popup with details centered around
+ * {@link Intent#getSourceBounds()}.
+ */
+public class QuickContactActivity extends ContactsActivity
+        implements AggregationSuggestionEngine.Listener, JoinContactsListener {
+
+    /**
+     * QuickContacts immediately takes up the full screen. All possible information is shown.
+     * This value for {@link android.provider.ContactsContract.QuickContact#EXTRA_MODE}
+     * should only be used by the Contacts app.
+     */
+    public static final int MODE_FULLY_EXPANDED = 4;
+
+    /** Used to pass the screen where the user came before launching this Activity. */
+    public static final String EXTRA_PREVIOUS_SCREEN_TYPE = "previous_screen_type";
+
+    private static final String TAG = "QuickContact";
+
+    private static final String KEY_THEME_COLOR = "theme_color";
+    private static final String KEY_IS_SUGGESTION_LIST_COLLAPSED = "is_suggestion_list_collapsed";
+    private static final String KEY_SELECTED_SUGGESTION_CONTACTS = "selected_suggestion_contacts";
+    private static final String KEY_PREVIOUS_CONTACT_ID = "previous_contact_id";
+    private static final String KEY_SUGGESTIONS_AUTO_SELECTED = "suggestions_auto_seleted";
+
+    private static final int ANIMATION_STATUS_BAR_COLOR_CHANGE_DURATION = 150;
+    private static final int REQUEST_CODE_CONTACT_EDITOR_ACTIVITY = 1;
+    private static final int SCRIM_COLOR = Color.argb(0xC8, 0, 0, 0);
+    private static final int REQUEST_CODE_CONTACT_SELECTION_ACTIVITY = 2;
+    private static final String MIMETYPE_SMS = "vnd.android-dir/mms-sms";
+
+    /** This is the Intent action to install a shortcut in the launcher. */
+    private static final String ACTION_INSTALL_SHORTCUT =
+            "com.android.launcher.action.INSTALL_SHORTCUT";
+
+    @SuppressWarnings("deprecation")
+    private static final String LEGACY_AUTHORITY = android.provider.Contacts.AUTHORITY;
+
+    private static final String MIMETYPE_GPLUS_PROFILE =
+            "vnd.android.cursor.item/vnd.googleplus.profile";
+    private static final String GPLUS_PROFILE_DATA_5_ADD_TO_CIRCLE = "addtocircle";
+    private static final String GPLUS_PROFILE_DATA_5_VIEW_PROFILE = "view";
+    private static final String MIMETYPE_HANGOUTS =
+            "vnd.android.cursor.item/vnd.googleplus.profile.comm";
+    private static final String HANGOUTS_DATA_5_VIDEO = "hangout";
+    private static final String HANGOUTS_DATA_5_MESSAGE = "conversation";
+    private static final String CALL_ORIGIN_QUICK_CONTACTS_ACTIVITY =
+            "com.android.contacts.quickcontact.QuickContactActivity";
+
+    /**
+     * The URI used to load the the Contact. Once the contact is loaded, use Contact#getLookupUri()
+     * instead of referencing this URI.
+     */
+    private Uri mLookupUri;
+    private String[] mExcludeMimes;
+    private int mExtraMode;
+    private String mExtraPrioritizedMimeType;
+    private int mStatusBarColor;
+    private boolean mHasAlreadyBeenOpened;
+    private boolean mOnlyOnePhoneNumber;
+    private boolean mOnlyOneEmail;
+
+    private QuickContactImageView mPhotoView;
+    private ExpandingEntryCardView mContactCard;
+    /// M:[for RCS-e] show Joyn Card(rcs-e plugin) under ContactCard.
+    private ExpandingEntryCardView mJoynCard;
+    private ExpandingEntryCardView mNoContactDetailsCard;
+    private ExpandingEntryCardView mRecentCard;
+    private ExpandingEntryCardView mAboutCard;
+
+    // Suggestion card.
+    private CardView mCollapsedSuggestionCardView;
+    private CardView mExpandSuggestionCardView;
+    private View mCollapasedSuggestionHeader;
+    private TextView mCollapsedSuggestionCardTitle;
+    private TextView mExpandSuggestionCardTitle;
+    private ImageView mSuggestionSummaryPhoto;
+    private TextView mSuggestionForName;
+    private TextView mSuggestionContactsNumber;
+    private LinearLayout mSuggestionList;
+    private Button mSuggestionsCancelButton;
+    private Button mSuggestionsLinkButton;
+    private boolean mIsSuggestionListCollapsed;
+    private boolean mSuggestionsShouldAutoSelected = true;
+    private long mPreviousContactId = 0;
+
+    private MultiShrinkScroller mScroller;
+    private SelectAccountDialogFragmentListener mSelectAccountFragmentListener;
+    private AsyncTask<Void, Void, Cp2DataCardModel> mEntriesAndActionsTask;
+    private AsyncTask<Void, Void, Void> mRecentDataTask;
+
+    private AggregationSuggestionEngine mAggregationSuggestionEngine;
+    private List<Suggestion> mSuggestions;
+
+    private TreeSet<Long> mSelectedAggregationIds = new TreeSet<>();
+    /**
+     * The last copy of Cp2DataCardModel that was passed to {@link #populateContactAndAboutCard}.
+     */
+    private Cp2DataCardModel mCachedCp2DataCardModel;
+    /**
+     *  This scrim's opacity is controlled in two different ways. 1) Before the initial entrance
+     *  animation finishes, the opacity is animated by a value animator. This is designed to
+     *  distract the user from the length of the initial loading time. 2) After the initial
+     *  entrance animation, the opacity is directly related to scroll position.
+     */
+    private ColorDrawable mWindowScrim;
+    private boolean mIsEntranceAnimationFinished;
+    private MaterialColorMapUtils mMaterialColorMapUtils;
+    private boolean mIsExitAnimationInProgress;
+    private boolean mHasComputedThemeColor;
+
+    /**
+     * Used to stop the ExpandingEntry cards from adjusting between an entry click and the intent
+     * being launched.
+     */
+    private boolean mHasIntentLaunched;
+
+    private Contact mContactData;
+    private ContactLoader mContactLoader;
+    private PorterDuffColorFilter mColorFilter;
+    private int mColorFilterColor;
+
+    private final ImageViewDrawableSetter mPhotoSetter = new ImageViewDrawableSetter();
+
+    /**
+     * {@link #LEADING_MIMETYPES} is used to sort MIME-types.
+     *
+     * <p>The MIME-types in {@link #LEADING_MIMETYPES} appear in the front of the dialog,
+     * in the order specified here.</p>
+     */
+    private static final List<String> LEADING_MIMETYPES = Lists.newArrayList(
+            Phone.CONTENT_ITEM_TYPE, SipAddress.CONTENT_ITEM_TYPE, Email.CONTENT_ITEM_TYPE,
+            StructuredPostal.CONTENT_ITEM_TYPE);
+
+    private static final List<String> SORTED_ABOUT_CARD_MIMETYPES = Lists.newArrayList(
+            Nickname.CONTENT_ITEM_TYPE,
+            // Phonetic name is inserted after nickname if it is available.
+            // No mimetype for phonetic name exists.
+            Website.CONTENT_ITEM_TYPE,
+            Organization.CONTENT_ITEM_TYPE,
+            Event.CONTENT_ITEM_TYPE,
+            Relation.CONTENT_ITEM_TYPE,
+            Im.CONTENT_ITEM_TYPE,
+            GroupMembership.CONTENT_ITEM_TYPE,
+            Identity.CONTENT_ITEM_TYPE,
+            Note.CONTENT_ITEM_TYPE);
+
+    private static final BidiFormatter sBidiFormatter = BidiFormatter.getInstance();
+
+    /** Id for the background contact loader */
+    private static final int LOADER_CONTACT_ID = 0;
+
+    private static final String KEY_LOADER_EXTRA_PHONES =
+            QuickContactActivity.class.getCanonicalName() + ".KEY_LOADER_EXTRA_PHONES";
+
+    /** Id for the background Sms Loader */
+    private static final int LOADER_SMS_ID = 1;
+    private static final int MAX_SMS_RETRIEVE = 3;
+
+    /** Id for the back Calendar Loader */
+    private static final int LOADER_CALENDAR_ID = 2;
+    private static final String KEY_LOADER_EXTRA_EMAILS =
+            QuickContactActivity.class.getCanonicalName() + ".KEY_LOADER_EXTRA_EMAILS";
+    private static final int MAX_PAST_CALENDAR_RETRIEVE = 3;
+    private static final int MAX_FUTURE_CALENDAR_RETRIEVE = 3;
+    private static final long PAST_MILLISECOND_TO_SEARCH_LOCAL_CALENDAR =
+            1L * 24L * 60L * 60L * 1000L /* 1 day */;
+    private static final long FUTURE_MILLISECOND_TO_SEARCH_LOCAL_CALENDAR =
+            7L * 24L * 60L * 60L * 1000L /* 7 days */;
+
+    /** Id for the background Call Log Loader */
+    private static final int LOADER_CALL_LOG_ID = 3;
+    private static final int MAX_CALL_LOG_RETRIEVE = 3;
+    private static final int MIN_NUM_CONTACT_ENTRIES_SHOWN = 3;
+    private static final int MIN_NUM_COLLAPSED_RECENT_ENTRIES_SHOWN = 3;
+    private static final int CARD_ENTRY_ID_EDIT_CONTACT = -2;
+
+
+    private static final int[] mRecentLoaderIds = new int[]{
+        LOADER_SMS_ID,
+        LOADER_CALENDAR_ID,
+        LOADER_CALL_LOG_ID};
+    /**
+     * ConcurrentHashMap constructor params: 4 is initial table size, 0.9f is
+     * load factor before resizing, 1 means we only expect a single thread to
+     * write to the map so make only a single shard
+     */
+    private Map<Integer, List<ContactInteraction>> mRecentLoaderResults =
+        new ConcurrentHashMap<>(4, 0.9f, 1);
+
+    private static final String FRAGMENT_TAG_SELECT_ACCOUNT = "select_account_fragment";
+
+    final OnClickListener mEntryClickHandler = new OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            final Object entryTagObject = v.getTag();
+            if (entryTagObject == null || !(entryTagObject instanceof EntryTag)) {
+                Log.w(TAG, "EntryTag was not used correctly");
+                return;
+            }
+            final EntryTag entryTag = (EntryTag) entryTagObject;
+            final Intent intent = entryTag.getIntent();
+            final int dataId = entryTag.getId();
+            Log.d(TAG, "[onClick]intent = " + intent + ",dataId = " + dataId);
+            if (dataId == CARD_ENTRY_ID_EDIT_CONTACT) {
+                editContact();
+                return;
+            }
+
+            // Pass the touch point through the intent for use in the InCallUI
+            if (Intent.ACTION_CALL.equals(intent.getAction())) {
+                if (TouchPointManager.getInstance().hasValidPoint()) {
+                    Bundle extras = new Bundle();
+                    extras.putParcelable(TouchPointManager.TOUCH_POINT,
+                            TouchPointManager.getInstance().getPoint());
+                    intent.putExtra(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS, extras);
+                }
+            }
+
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+            mHasIntentLaunched = true;
+            try {
+                ImplicitIntentsUtil.startActivityInAppIfPossible(QuickContactActivity.this, intent);
+            } catch (SecurityException ex) {
+                Toast.makeText(QuickContactActivity.this, R.string.missing_app,
+                        Toast.LENGTH_SHORT).show();
+                Log.e(TAG, "QuickContacts does not have permission to launch "
+                        + intent);
+            } catch (ActivityNotFoundException ex) {
+                Toast.makeText(QuickContactActivity.this, R.string.missing_app,
+                        Toast.LENGTH_SHORT).show();
+            }
+
+            // Default to USAGE_TYPE_CALL. Usage is summed among all types for sorting each data id
+            // so the exact usage type is not necessary in all cases
+            String usageType = DataUsageFeedback.USAGE_TYPE_CALL;
+
+            final Uri intentUri = intent.getData();
+            if ((intentUri != null && intentUri.getScheme() != null &&
+                    intentUri.getScheme().equals(ContactsUtils.SCHEME_SMSTO)) ||
+                    (intent.getType() != null && intent.getType().equals(MIMETYPE_SMS))) {
+                usageType = DataUsageFeedback.USAGE_TYPE_SHORT_TEXT;
+            }
+
+            // Data IDs start at 1 so anything less is invalid
+            if (dataId > 0) {
+                final Uri dataUsageUri = DataUsageFeedback.FEEDBACK_URI.buildUpon()
+                        .appendPath(String.valueOf(dataId))
+                        .appendQueryParameter(DataUsageFeedback.USAGE_TYPE, usageType)
+                        .build();
+                try {
+                final boolean successful = getContentResolver().update(
+                        dataUsageUri, new ContentValues(), null, null) > 0;
+                if (!successful) {
+                    Log.w(TAG, "DataUsageFeedback increment failed");
+                }
+                } catch (SecurityException ex) {
+                    Log.w(TAG, "DataUsageFeedback increment failed", ex);
+                }
+            } else {
+                Log.w(TAG, "Invalid Data ID");
+            }
+        }
+    };
+
+    final ExpandingEntryCardViewListener mExpandingEntryCardViewListener
+            = new ExpandingEntryCardViewListener() {
+        @Override
+        public void onCollapse(int heightDelta) {
+            mScroller.prepareForShrinkingScrollChild(heightDelta);
+        }
+
+        @Override
+        public void onExpand() {
+            mScroller.setDisableTouchesForSuppressLayout(/* areTouchesDisabled = */ true);
+        }
+
+        @Override
+        public void onExpandDone() {
+            mScroller.setDisableTouchesForSuppressLayout(/* areTouchesDisabled = */ false);
+        }
+    };
+
+    @Override
+    public void onAggregationSuggestionChange() {
+        Log.d(TAG, "[onAggregationSuggestionChange]");
+        if (mAggregationSuggestionEngine == null) {
+            return;
+        }
+        mSuggestions = mAggregationSuggestionEngine.getSuggestions();
+        mCollapsedSuggestionCardView.setVisibility(View.GONE);
+        mExpandSuggestionCardView.setVisibility(View.GONE);
+        mSuggestionList.removeAllViews();
+
+        if (mContactData == null) {
+            return;
+        }
+
+        final String suggestionForName = mContactData.getDisplayName();
+        final int suggestionNumber = mSuggestions.size();
+        Log.d(TAG, "[onAggregationSuggestionChange] suggestionNumber=" + suggestionNumber
+                + ", mSelectedAggregationIds=" + mSelectedAggregationIds);
+        if (suggestionNumber <= 0) {
+            mSelectedAggregationIds.clear();
+            return;
+        }
+
+        ContactPhotoManager.DefaultImageRequest
+                request = new ContactPhotoManager.DefaultImageRequest(
+                suggestionForName, mContactData.getLookupKey(), ContactPhotoManager.TYPE_DEFAULT,
+                /* isCircular */ true );
+        final long photoId = mContactData.getPhotoId();
+        final byte[] photoBytes = mContactData.getThumbnailPhotoBinaryData();
+        if (photoBytes != null) {
+            ContactPhotoManager.getInstance(this).loadThumbnail(mSuggestionSummaryPhoto, photoId,
+                /* darkTheme */ false , /* isCircular */ true , request);
+        } else {
+            ContactPhotoManager.DEFAULT_AVATAR.applyDefaultImage(mSuggestionSummaryPhoto,
+                    -1, false, request);
+        }
+
+        final String suggestionTitle = getResources().getQuantityString(
+                R.plurals.quickcontact_suggestion_card_title, suggestionNumber, suggestionNumber);
+        mCollapsedSuggestionCardTitle.setText(suggestionTitle);
+        mExpandSuggestionCardTitle.setText(suggestionTitle);
+
+        mSuggestionForName.setText(suggestionForName);
+        final int linkedContactsNumber = mContactData.getRawContacts().size();
+        final String contactsInfo;
+        final String accountName = mContactData.getRawContacts().get(0).getAccountName();
+        if (linkedContactsNumber == 1 && accountName == null) {
+            mSuggestionContactsNumber.setVisibility(View.INVISIBLE);
+        }
+        if (linkedContactsNumber == 1 && accountName != null) {
+            contactsInfo = getResources().getString(R.string.contact_from_account_name,
+                    accountName);
+        } else {
+            contactsInfo = getResources().getString(
+                    R.string.quickcontact_contacts_number, linkedContactsNumber);
+        }
+        mSuggestionContactsNumber.setText(contactsInfo);
+
+        final Set<Long> suggestionContactIds = new HashSet<>();
+        for (Suggestion suggestion : mSuggestions) {
+            mSuggestionList.addView(inflateSuggestionListView(suggestion));
+            suggestionContactIds.add(suggestion.contactId);
+        }
+        Log.d(TAG, "[onAggregationSuggestionChange]suggestionContactIds=" + suggestionContactIds);
+
+        if (mIsSuggestionListCollapsed) {
+            collapseSuggestionList();
+        } else {
+            expandSuggestionList();
+        }
+
+        // Remove contact Ids that are not suggestions.
+        final Set<Long> selectedSuggestionIds = com.google.common.collect.Sets.intersection(
+                mSelectedAggregationIds, suggestionContactIds);
+        mSelectedAggregationIds = new TreeSet<>(selectedSuggestionIds);
+        Log.d(TAG, "[onAggregationSuggestionChange]"
+                + "mSelectedAggregationIds = " + mSelectedAggregationIds);
+        if (!mSelectedAggregationIds.isEmpty()) {
+            enableLinkButton();
+        }
+
+        /// M: ALPS02783465. not show duplicate contacts for sim contact.@{
+        if (mContactData != null && mContactData.getIndicate() > 0) {
+            Log.d(TAG, "[onAggregationSuggestionChange] sim disable duplicate card View");
+            mCollapasedSuggestionHeader.setVisibility(View.GONE);
+            mCollapsedSuggestionCardView.setVisibility(View.GONE);
+        }
+        /// @}
+    }
+
+    private void collapseSuggestionList() {
+        mCollapsedSuggestionCardView.setVisibility(View.VISIBLE);
+        mExpandSuggestionCardView.setVisibility(View.GONE);
+        mIsSuggestionListCollapsed = true;
+    }
+
+    private void expandSuggestionList() {
+        mCollapsedSuggestionCardView.setVisibility(View.GONE);
+        mExpandSuggestionCardView.setVisibility(View.VISIBLE);
+        mIsSuggestionListCollapsed = false;
+    }
+
+    private View inflateSuggestionListView(final Suggestion suggestion) {
+        final LayoutInflater layoutInflater = LayoutInflater.from(this);
+        final View suggestionView = layoutInflater.inflate(
+                R.layout.quickcontact_suggestion_contact_item, null);
+
+        ContactPhotoManager.DefaultImageRequest
+                request = new ContactPhotoManager.DefaultImageRequest(
+                suggestion.name, suggestion.lookupKey, ContactPhotoManager.TYPE_DEFAULT, /*
+                isCircular */ true);
+        final ImageView photo = (ImageView) suggestionView.findViewById(
+                R.id.aggregation_suggestion_photo);
+        if (suggestion.photo != null) {
+            ContactPhotoManager.getInstance(this).loadThumbnail(photo, suggestion.photoId,
+                   /* darkTheme */ false, /* isCircular */ true, request);
+        } else {
+            ContactPhotoManager.DEFAULT_AVATAR.applyDefaultImage(photo, -1, false, request);
+        }
+
+        final TextView name = (TextView) suggestionView.findViewById(R.id.aggregation_suggestion_name);
+        name.setText(suggestion.name);
+
+        final TextView accountNameView = (TextView) suggestionView.findViewById(
+                R.id.aggregation_suggestion_account_name);
+        final String accountName = suggestion.rawContacts.get(0).accountName;
+        if (!TextUtils.isEmpty(accountName)) {
+            accountNameView.setText(
+                    getResources().getString(R.string.contact_from_account_name, accountName));
+        } else {
+            accountNameView.setVisibility(View.INVISIBLE);
+        }
+
+        final CheckBox checkbox = (CheckBox) suggestionView.findViewById(R.id.suggestion_checkbox);
+        final int[][] stateSet = new int[][] {
+                new int[] { android.R.attr.state_checked },
+                new int[] { -android.R.attr.state_checked }
+        };
+        final int[] colors = new int[] { mColorFilterColor, mColorFilterColor };
+        if (suggestion != null && suggestion.name != null) {
+            checkbox.setContentDescription(suggestion.name + " " +
+                    getResources().getString(R.string.contact_from_account_name, accountName));
+        }
+        checkbox.setButtonTintList(new ColorStateList(stateSet, colors));
+        checkbox.setChecked(mSuggestionsShouldAutoSelected ||
+                mSelectedAggregationIds.contains(suggestion.contactId));
+        if (checkbox.isChecked()) {
+            mSelectedAggregationIds.add(suggestion.contactId);
+        }
+        checkbox.setTag(suggestion.contactId);
+        checkbox.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                final CheckBox checkBox = (CheckBox) v;
+                final Long contactId = (Long) checkBox.getTag();
+                if (mSelectedAggregationIds.contains(mContactData.getId())) {
+                    mSelectedAggregationIds.remove(mContactData.getId());
+                }
+                if (checkBox.isChecked()) {
+                    mSelectedAggregationIds.add(contactId);
+                    if (mSelectedAggregationIds.size() >= 1) {
+                        enableLinkButton();
+                    }
+                } else {
+                    mSelectedAggregationIds.remove(contactId);
+                    mSuggestionsShouldAutoSelected = false;
+                    if (mSelectedAggregationIds.isEmpty()) {
+                        disableLinkButton();
+                    }
+                }
+            }
+        });
+
+        return suggestionView;
+    }
+
+    private void enableLinkButton() {
+        mSuggestionsLinkButton.setClickable(true);
+        mSuggestionsLinkButton.getBackground().setColorFilter(mColorFilter);
+        mSuggestionsLinkButton.setTextColor(
+                ContextCompat.getColor(this, android.R.color.white));
+        mSuggestionsLinkButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                Log.d(TAG, "click link button, mContactData.getId()=" + mContactData.getId()
+                        + ", mSelectedAggregationIds=" + mSelectedAggregationIds);
+                // Join selected contacts.
+                if (!mSelectedAggregationIds.contains(mContactData.getId())) {
+                    mSelectedAggregationIds.add(mContactData.getId());
+                }
+                JoinContactsDialogFragment.start(
+                        QuickContactActivity.this, mSelectedAggregationIds);
+            }
+        });
+    }
+
+    @Override
+    public void onContactsJoined() {
+        disableLinkButton();
+    }
+
+    private void disableLinkButton() {
+        mSuggestionsLinkButton.setClickable(false);
+        mSuggestionsLinkButton.getBackground().setColorFilter(
+                ContextCompat.getColor(this, R.color.disabled_button_background),
+                PorterDuff.Mode.SRC_ATOP);
+        mSuggestionsLinkButton.setTextColor(
+                ContextCompat.getColor(this, R.color.disabled_button_text));
+    }
+
+    private interface ContextMenuIds {
+        static final int COPY_TEXT = 0;
+        static final int CLEAR_DEFAULT = 1;
+        static final int SET_DEFAULT = 2;
+        /// M: add ip call
+        static final int IP_CALL = 3;
+    }
+
+    private final OnCreateContextMenuListener mEntryContextMenuListener =
+            new OnCreateContextMenuListener() {
+        @Override
+        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
+            if (menuInfo == null) {
+                return;
+            }
+            final EntryContextMenuInfo info = (EntryContextMenuInfo) menuInfo;
+            menu.setHeaderTitle(info.getCopyText());
+            /// M: add ip call
+            if (Phone.CONTENT_ITEM_TYPE.equals(info.getMimeType()) &&
+                    PhoneCapabilityTester.isPhone(ContactsApplication.getInstance())) {
+                menu.add(ContextMenu.NONE, ContextMenuIds.IP_CALL,
+                    ContextMenu.NONE, getString(R.string.contact_detail_ip_call));
+            }
+            menu.add(ContextMenu.NONE, ContextMenuIds.COPY_TEXT,
+                    ContextMenu.NONE, getString(R.string.copy_text));
+
+            // Don't allow setting or clearing of defaults for non-editable contacts
+            if (!isContactEditable()) {
+                return;
+            }
+
+            final String selectedMimeType = info.getMimeType();
+
+            // Defaults to true will only enable the detail to be copied to the clipboard.
+            boolean onlyOneOfMimeType = true;
+
+            // Only allow primary support for Phone and Email content types
+            if (Phone.CONTENT_ITEM_TYPE.equals(selectedMimeType)) {
+                onlyOneOfMimeType = mOnlyOnePhoneNumber;
+            } else if (Email.CONTENT_ITEM_TYPE.equals(selectedMimeType)) {
+                onlyOneOfMimeType = mOnlyOneEmail;
+            }
+
+            // Checking for previously set default
+            if (info.isSuperPrimary()) {
+                menu.add(ContextMenu.NONE, ContextMenuIds.CLEAR_DEFAULT,
+                        ContextMenu.NONE, getString(R.string.clear_default));
+            } else if (!onlyOneOfMimeType) {
+                menu.add(ContextMenu.NONE, ContextMenuIds.SET_DEFAULT,
+                        ContextMenu.NONE, getString(R.string.set_default));
+            }
+        }
+    };
+
+    @Override
+    public boolean onContextItemSelected(MenuItem item) {
+        EntryContextMenuInfo menuInfo;
+        try {
+            menuInfo = (EntryContextMenuInfo) item.getMenuInfo();
+        } catch (ClassCastException e) {
+            Log.e(TAG, "bad menuInfo", e);
+            return false;
+        }
+
+        switch (item.getItemId()) {
+            /// M: add ip call
+            case ContextMenuIds.IP_CALL:
+                QuickContactUtils.dialIpCall(this, menuInfo.getCopyText());
+                return true;
+            case ContextMenuIds.COPY_TEXT:
+                ClipboardUtils.copyText(this, menuInfo.getCopyLabel(), menuInfo.getCopyText(),
+                        true);
+                return true;
+            case ContextMenuIds.SET_DEFAULT:
+                final Intent setIntent = ContactSaveService.createSetSuperPrimaryIntent(this,
+                        menuInfo.getId());
+                this.startService(setIntent);
+                return true;
+            case ContextMenuIds.CLEAR_DEFAULT:
+                final Intent clearIntent = ContactSaveService.createClearPrimaryIntent(this,
+                        menuInfo.getId());
+                this.startService(clearIntent);
+                return true;
+            default:
+                throw new IllegalArgumentException("Unknown menu option " + item.getItemId());
+        }
+    }
+
+    /**
+     * Headless fragment used to handle account selection callbacks invoked from
+     * {@link DirectoryContactUtil}.
+     */
+    public static class SelectAccountDialogFragmentListener extends Fragment
+            implements SelectAccountDialogFragment.Listener {
+
+        private QuickContactActivity mQuickContactActivity;
+
+        public SelectAccountDialogFragmentListener() {}
+
+        @Override
+        public void onAccountChosen(AccountWithDataSet account, Bundle extraArgs) {
+            DirectoryContactUtil.createCopy(mQuickContactActivity.mContactData.getContentValues(),
+                    account, mQuickContactActivity);
+        }
+
+        @Override
+        public void onAccountSelectorCancelled() {}
+
+        /**
+         * Set the parent activity. Since rotation can cause this fragment to be used across
+         * more than one activity instance, we need to explicitly set this value instead
+         * of making this class non-static.
+         */
+        public void setQuickContactActivity(QuickContactActivity quickContactActivity) {
+            mQuickContactActivity = quickContactActivity;
+        }
+    }
+
+    final MultiShrinkScrollerListener mMultiShrinkScrollerListener
+            = new MultiShrinkScrollerListener() {
+        @Override
+        public void onScrolledOffBottom() {
+            finish();
+        }
+
+        @Override
+        public void onEnterFullscreen() {
+            updateStatusBarColor();
+        }
+
+        @Override
+        public void onExitFullscreen() {
+            updateStatusBarColor();
+        }
+
+        @Override
+        public void onStartScrollOffBottom() {
+            mIsExitAnimationInProgress = true;
+        }
+
+        @Override
+        public void onEntranceAnimationDone() {
+            mIsEntranceAnimationFinished = true;
+        }
+
+        @Override
+        public void onTransparentViewHeightChange(float ratio) {
+            if (mIsEntranceAnimationFinished) {
+                mWindowScrim.setAlpha((int) (0xFF * ratio));
+            }
+        }
+    };
+
+
+    /**
+     * Data items are compared to the same mimetype based off of three qualities:
+     * 1. Super primary
+     * 2. Primary
+     * 3. Times used
+     */
+    private final Comparator<DataItem> mWithinMimeTypeDataItemComparator =
+            new Comparator<DataItem>() {
+        @Override
+        public int compare(DataItem lhs, DataItem rhs) {
+            if (!lhs.getMimeType().equals(rhs.getMimeType())) {
+                Log.wtf(TAG, "Comparing DataItems with different mimetypes lhs.getMimeType(): " +
+                        lhs.getMimeType() + " rhs.getMimeType(): " + rhs.getMimeType());
+                return 0;
+            }
+
+            if (lhs.isSuperPrimary()) {
+                return -1;
+            } else if (rhs.isSuperPrimary()) {
+                return 1;
+            } else if (lhs.isPrimary() && !rhs.isPrimary()) {
+                return -1;
+            } else if (!lhs.isPrimary() && rhs.isPrimary()) {
+                return 1;
+            } else {
+                final int lhsTimesUsed =
+                        lhs.getTimesUsed() == null ? 0 : lhs.getTimesUsed();
+                final int rhsTimesUsed =
+                        rhs.getTimesUsed() == null ? 0 : rhs.getTimesUsed();
+
+                return rhsTimesUsed - lhsTimesUsed;
+            }
+        }
+    };
+
+    /**
+     * Sorts among different mimetypes based off:
+     * 1. Whether one of the mimetypes is the prioritized mimetype
+     * 2. Number of times used
+     * 3. Last time used
+     * 4. Statically defined
+     */
+    private final Comparator<List<DataItem>> mAmongstMimeTypeDataItemComparator =
+            new Comparator<List<DataItem>> () {
+        @Override
+        public int compare(List<DataItem> lhsList, List<DataItem> rhsList) {
+            final DataItem lhs = lhsList.get(0);
+            final DataItem rhs = rhsList.get(0);
+            final String lhsMimeType = lhs.getMimeType();
+            final String rhsMimeType = rhs.getMimeType();
+
+            // 1. Whether one of the mimetypes is the prioritized mimetype
+            if (!TextUtils.isEmpty(mExtraPrioritizedMimeType) && !lhsMimeType.equals(rhsMimeType)) {
+                if (rhsMimeType.equals(mExtraPrioritizedMimeType)) {
+                    return 1;
+                }
+                if (lhsMimeType.equals(mExtraPrioritizedMimeType)) {
+                    return -1;
+                }
+            }
+
+            // 2. Number of times used
+            final int lhsTimesUsed = lhs.getTimesUsed() == null ? 0 : lhs.getTimesUsed();
+            final int rhsTimesUsed = rhs.getTimesUsed() == null ? 0 : rhs.getTimesUsed();
+            final int timesUsedDifference = rhsTimesUsed - lhsTimesUsed;
+            if (timesUsedDifference != 0) {
+                return timesUsedDifference;
+            }
+
+            // 3. Last time used
+            final long lhsLastTimeUsed =
+                    lhs.getLastTimeUsed() == null ? 0 : lhs.getLastTimeUsed();
+            final long rhsLastTimeUsed =
+                    rhs.getLastTimeUsed() == null ? 0 : rhs.getLastTimeUsed();
+            final long lastTimeUsedDifference = rhsLastTimeUsed - lhsLastTimeUsed;
+            if (lastTimeUsedDifference > 0) {
+                return 1;
+            } else if (lastTimeUsedDifference < 0) {
+                return -1;
+            }
+
+            // 4. Resort to a statically defined mimetype order.
+            if (!lhsMimeType.equals(rhsMimeType)) {
+            for (String mimeType : LEADING_MIMETYPES) {
+                if (lhsMimeType.equals(mimeType)) {
+                    return -1;
+                } else if (rhsMimeType.equals(mimeType)) {
+                    return 1;
+                }
+            }
+            }
+            return 0;
+        }
+    };
+
+    @Override
+    public boolean dispatchTouchEvent(MotionEvent ev) {
+        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
+            TouchPointManager.getInstance().setPoint((int) ev.getRawX(), (int) ev.getRawY());
+        }
+        return super.dispatchTouchEvent(ev);
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        Trace.beginSection("onCreate()");
+        super.onCreate(savedInstanceState);
+
+        if (RequestPermissionsActivity.startPermissionActivity(this) ||
+                RequestDesiredPermissionsActivity.startPermissionActivity(this)) {
+            return;
+        }
+
+        final int previousScreenType = getIntent().getIntExtra
+                (EXTRA_PREVIOUS_SCREEN_TYPE, ScreenType.UNKNOWN);
+        Logger.logScreenView(this, ScreenType.QUICK_CONTACT, previousScreenType);
+
+        if (CompatUtils.isLollipopCompatible()) {
+            getWindow().setStatusBarColor(Color.TRANSPARENT);
+        }
+
+        processIntent(getIntent());
+
+        // Show QuickContact in front of soft input
+         getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM,
+                WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
+
+        setContentView(R.layout.quickcontact_activity);
+
+        mMaterialColorMapUtils = new MaterialColorMapUtils(getResources());
+
+        mScroller = (MultiShrinkScroller) findViewById(R.id.multiscroller);
+
+        mContactCard = (ExpandingEntryCardView) findViewById(R.id.communication_card);
+        /// M: [for rcs-e]
+        mJoynCard = (ExpandingEntryCardView) ExtensionManager.getInstance()
+            .getViewCustomExtension().getQuickContactCardViewCustom().createCardView(
+                    (LinearLayout)findViewById(R.id.card_container),
+                    (View) mContactCard, mLookupUri, this);
+        mNoContactDetailsCard = (ExpandingEntryCardView) findViewById(R.id.no_contact_data_card);
+        mRecentCard = (ExpandingEntryCardView) findViewById(R.id.recent_card);
+        mAboutCard = (ExpandingEntryCardView) findViewById(R.id.about_card);
+
+        mCollapsedSuggestionCardView = (CardView) findViewById(R.id.collapsed_suggestion_card);
+        mExpandSuggestionCardView = (CardView) findViewById(R.id.expand_suggestion_card);
+        mCollapasedSuggestionHeader = findViewById(R.id.collapsed_suggestion_header);
+        mCollapsedSuggestionCardTitle = (TextView) findViewById(
+                R.id.collapsed_suggestion_card_title);
+        mExpandSuggestionCardTitle = (TextView) findViewById(R.id.expand_suggestion_card_title);
+        mSuggestionSummaryPhoto = (ImageView) findViewById(R.id.suggestion_icon);
+        mSuggestionForName = (TextView) findViewById(R.id.suggestion_for_name);
+        mSuggestionContactsNumber = (TextView) findViewById(R.id.suggestion_for_contacts_number);
+        mSuggestionList = (LinearLayout) findViewById(R.id.suggestion_list);
+        mSuggestionsCancelButton= (Button) findViewById(R.id.cancel_button);
+        mSuggestionsLinkButton = (Button) findViewById(R.id.link_button);
+        if (savedInstanceState != null) {
+            mIsSuggestionListCollapsed = savedInstanceState.getBoolean(
+                    KEY_IS_SUGGESTION_LIST_COLLAPSED, true);
+            mPreviousContactId = savedInstanceState.getLong(KEY_PREVIOUS_CONTACT_ID);
+            mSuggestionsShouldAutoSelected = savedInstanceState.getBoolean(
+                    KEY_SUGGESTIONS_AUTO_SELECTED, true);
+            mSelectedAggregationIds = (TreeSet<Long>)
+                    savedInstanceState.getSerializable(KEY_SELECTED_SUGGESTION_CONTACTS);
+        } else {
+            mIsSuggestionListCollapsed = true;
+            mSelectedAggregationIds.clear();
+        }
+        if (mSelectedAggregationIds.isEmpty()) {
+            disableLinkButton();
+        } else {
+            enableLinkButton();
+        }
+        mCollapasedSuggestionHeader.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                mCollapsedSuggestionCardView.setVisibility(View.GONE);
+                mExpandSuggestionCardView.setVisibility(View.VISIBLE);
+                mIsSuggestionListCollapsed = false;
+                mExpandSuggestionCardTitle.requestFocus();
+                mExpandSuggestionCardTitle.sendAccessibilityEvent(
+                        AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
+            }
+        });
+
+        mSuggestionsCancelButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                mCollapsedSuggestionCardView.setVisibility(View.VISIBLE);
+                mExpandSuggestionCardView.setVisibility(View.GONE);
+                mIsSuggestionListCollapsed = true;
+            }
+        });
+
+        mNoContactDetailsCard.setOnClickListener(mEntryClickHandler);
+        mContactCard.setOnClickListener(mEntryClickHandler);
+        mContactCard.setExpandButtonText(
+        getResources().getString(R.string.expanding_entry_card_view_see_all));
+        mContactCard.setOnCreateContextMenuListener(mEntryContextMenuListener);
+
+        mRecentCard.setOnClickListener(mEntryClickHandler);
+        mRecentCard.setTitle(getResources().getString(R.string.recent_card_title));
+
+        mAboutCard.setOnClickListener(mEntryClickHandler);
+        mAboutCard.setOnCreateContextMenuListener(mEntryContextMenuListener);
+
+        mPhotoView = (QuickContactImageView) findViewById(R.id.photo);
+
+        //M:OP01 RCS will go to contact detail activity, update photo from rcs server.@{
+        ExtensionManager.getInstance().getRcsExtension()
+                .updateContactPhotoFromRcsServer(mLookupUri, mPhotoView, this);
+        /** @} */
+
+        final View transparentView = findViewById(R.id.transparent_view);
+        if (mScroller != null) {
+            transparentView.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    mScroller.scrollOffBottom();
+                }
+            });
+        }
+
+        // Allow a shadow to be shown under the toolbar.
+        ViewUtil.addRectangularOutlineProvider(findViewById(R.id.toolbar_parent), getResources());
+
+        final Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        setActionBar(toolbar);
+        getActionBar().setTitle(null);
+        // Put a TextView with a known resource id into the ActionBar. This allows us to easily
+        // find the correct TextView location & size later.
+        toolbar.addView(getLayoutInflater().inflate(R.layout.quickcontact_title_placeholder, null));
+
+        mHasAlreadyBeenOpened = savedInstanceState != null;
+        mIsEntranceAnimationFinished = mHasAlreadyBeenOpened;
+        mWindowScrim = new ColorDrawable(SCRIM_COLOR);
+        mWindowScrim.setAlpha(0);
+        getWindow().setBackgroundDrawable(mWindowScrim);
+
+        mScroller.initialize(mMultiShrinkScrollerListener, mExtraMode == MODE_FULLY_EXPANDED,
+                /* maximumHeaderTextSize */ -1,
+                /* shouldUpdateNameViewHeight */ true);
+        // mScroller needs to perform asynchronous measurements after initalize(), therefore
+        // we can't mark this as GONE.
+        mScroller.setVisibility(View.INVISIBLE);
+
+        setHeaderNameText(R.string.missing_name);
+
+        mSelectAccountFragmentListener= (SelectAccountDialogFragmentListener) getFragmentManager()
+                .findFragmentByTag(FRAGMENT_TAG_SELECT_ACCOUNT);
+        if (mSelectAccountFragmentListener == null) {
+            mSelectAccountFragmentListener = new SelectAccountDialogFragmentListener();
+            getFragmentManager().beginTransaction().add(0, mSelectAccountFragmentListener,
+                    FRAGMENT_TAG_SELECT_ACCOUNT).commit();
+            mSelectAccountFragmentListener.setRetainInstance(true);
+        }
+        mSelectAccountFragmentListener.setQuickContactActivity(this);
+
+        SchedulingUtils.doOnPreDraw(mScroller, /* drawNextFrame = */ true,
+                new Runnable() {
+                    @Override
+                    public void run() {
+                        if (!mHasAlreadyBeenOpened) {
+                            // The initial scrim opacity must match the scrim opacity that would be
+                            // achieved by scrolling to the starting position.
+                            final float alphaRatio = mExtraMode == MODE_FULLY_EXPANDED ?
+                                    1 : mScroller.getStartingTransparentHeightRatio();
+                            final int duration = getResources().getInteger(
+                                    android.R.integer.config_shortAnimTime);
+                            final int desiredAlpha = (int) (0xFF * alphaRatio);
+                            ObjectAnimator o = ObjectAnimator.ofInt(mWindowScrim, "alpha", 0,
+                                    desiredAlpha).setDuration(duration);
+
+                            o.start();
+                        }
+                    }
+                });
+
+        if (savedInstanceState != null) {
+            final int color = savedInstanceState.getInt(KEY_THEME_COLOR, 0);
+            SchedulingUtils.doOnPreDraw(mScroller, /* drawNextFrame = */ false,
+                    new Runnable() {
+                        @Override
+                        public void run() {
+                            // Need to wait for the pre draw before setting the initial scroll
+                            // value. Prior to pre draw all scroll values are invalid.
+                            if (mHasAlreadyBeenOpened) {
+                                mScroller.setVisibility(View.VISIBLE);
+                                mScroller.setScroll(mScroller.getScrollNeededToBeFullScreen());
+                            }
+                            // Need to wait for pre draw for setting the theme color. Setting the
+                            // header tint before the MultiShrinkScroller has been measured will
+                            // cause incorrect tinting calculations.
+                            if (color != 0) {
+                                setThemeColor(mMaterialColorMapUtils
+                                        .calculatePrimaryAndSecondaryColor(color));
+                            }
+                        }
+                    });
+        }
+        Trace.endSection();
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        Log.d(TAG, "[onActivityResult] requestCode is " + requestCode
+                + ", resultCode is " + resultCode);
+        final boolean deletedOrSplit = requestCode == REQUEST_CODE_CONTACT_EDITOR_ACTIVITY &&
+                (resultCode == ContactDeletionInteraction.RESULT_CODE_DELETED ||
+                resultCode == ContactEditorBaseActivity.RESULT_CODE_SPLIT);
+        if (deletedOrSplit) {
+            finish();
+        } else if (requestCode == REQUEST_CODE_CONTACT_SELECTION_ACTIVITY &&
+                resultCode != RESULT_CANCELED) {
+            /* M: [Google Issue]ALPS03375904
+             * fix photo view display issue (tint and image blend together),
+             * needs to re-compute theme color @{ */
+            mHasComputedThemeColor = false;
+            /* @} */
+            processIntent(data);
+        }
+    }
+
+    @Override
+    protected void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        Log.d(TAG, "[onNewIntent]");
+        mHasAlreadyBeenOpened = true;
+        mIsEntranceAnimationFinished = true;
+        mHasComputedThemeColor = false;
+        processIntent(intent);
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle savedInstanceState) {
+        super.onSaveInstanceState(savedInstanceState);
+        if (mColorFilter != null) {
+            savedInstanceState.putInt(KEY_THEME_COLOR, mColorFilterColor);
+        }
+        savedInstanceState.putBoolean(KEY_IS_SUGGESTION_LIST_COLLAPSED, mIsSuggestionListCollapsed);
+        savedInstanceState.putLong(KEY_PREVIOUS_CONTACT_ID, mPreviousContactId);
+        savedInstanceState.putBoolean(
+                KEY_SUGGESTIONS_AUTO_SELECTED, mSuggestionsShouldAutoSelected);
+        savedInstanceState.putSerializable(
+                KEY_SELECTED_SUGGESTION_CONTACTS, mSelectedAggregationIds);
+    }
+
+    private void processIntent(Intent intent) {
+        if (intent == null) {
+            Log.w(TAG, "[processIntent]intent is null,return!");
+            finish();
+            return;
+        }
+        Uri lookupUri = intent.getData();
+        Log.d(TAG, "The original uri from intent: " + lookupUri);
+
+        // Check to see whether it comes from the old version.
+        if (lookupUri != null && LEGACY_AUTHORITY.equals(lookupUri.getAuthority())) {
+            final long rawContactId = ContentUris.parseId(lookupUri);
+            lookupUri = RawContacts.getContactLookupUri(getContentResolver(),
+                    ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId));
+            Log.d(TAG, "The uri from old version: " + lookupUri);
+        }
+        mExtraMode = getIntent().getIntExtra(QuickContact.EXTRA_MODE, QuickContact.MODE_LARGE);
+        if (isMultiWindowOnPhone()) {
+            mExtraMode = QuickContact.MODE_LARGE;
+        }
+        mExtraPrioritizedMimeType =
+                getIntent().getStringExtra(QuickContact.EXTRA_PRIORITIZED_MIMETYPE);
+        final Uri oldLookupUri = mLookupUri;
+
+        if (lookupUri == null) {
+            Log.w(TAG, "[processIntent]lookupUri is null,return!");
+            finish();
+            return;
+        }
+        mLookupUri = lookupUri;
+        Log.d(TAG, "[processIntent] original uri is oldLookupUri = " + oldLookupUri
+                + ", new uri from intent is mLookupUri = " + mLookupUri);
+        mExcludeMimes = intent.getStringArrayExtra(QuickContact.EXTRA_EXCLUDE_MIMES);
+        if (oldLookupUri == null) {
+            mContactLoader = (ContactLoader) getLoaderManager().initLoader(
+                    LOADER_CONTACT_ID, null, mLoaderContactCallbacks);
+        } else if (oldLookupUri != mLookupUri) {
+            // After copying a directory contact, the contact URI changes. Therefore,
+            // we need to reload the new contact.
+            destroyInteractionLoaders();
+            mContactLoader = (ContactLoader) (Loader<?>) getLoaderManager().getLoader(
+                    LOADER_CONTACT_ID);
+            mContactLoader.setLookupUri(mLookupUri);
+            mCachedCp2DataCardModel = null;
+        }
+        mContactLoader.forceLoad();
+
+        NfcHandler.register(this, mLookupUri);
+
+        // M: Add for presence @{
+        ExtensionManager.getInstance().getContactsCommonPresenceExtension().processIntent(intent);
+    }
+
+    private void destroyInteractionLoaders() {
+        for (int interactionLoaderId : mRecentLoaderIds) {
+            getLoaderManager().destroyLoader(interactionLoaderId);
+        }
+    }
+
+    private void runEntranceAnimation() {
+        if (mHasAlreadyBeenOpened) {
+            return;
+        }
+        mHasAlreadyBeenOpened = true;
+        mScroller.scrollUpForEntranceAnimation(/* scrollToCurrentPosition */ !isMultiWindowOnPhone()
+                && (mExtraMode != MODE_FULLY_EXPANDED));
+    }
+
+    private boolean isMultiWindowOnPhone() {
+        return MultiWindowCompat.isInMultiWindowMode(this) && PhoneCapabilityTester.isPhone(this);
+    }
+
+    /** Assign this string to the view if it is not empty. */
+    private void setHeaderNameText(int resId) {
+        if (mScroller != null) {
+            mScroller.setTitle(getText(resId) == null ? null : getText(resId).toString(),
+                    /* isPhoneNumber= */ false);
+        }
+    }
+
+    /** Assign this string to the view if it is not empty. */
+    private void setHeaderNameText(String value, boolean isPhoneNumber) {
+        if (!TextUtils.isEmpty(value)) {
+            if (mScroller != null) {
+                mScroller.setTitle(value, isPhoneNumber);
+            }
+        }
+    }
+
+    /**
+     * Check if the given MIME-type appears in the list of excluded MIME-types
+     * that the most-recent caller requested.
+     */
+    private boolean isMimeExcluded(String mimeType) {
+        if (mExcludeMimes == null) return false;
+        for (String excludedMime : mExcludeMimes) {
+            if (TextUtils.equals(excludedMime, mimeType)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Handle the result from the ContactLoader
+     */
+    private void bindContactData(final Contact data) {
+        Log.d(TAG, "[bindContactData]");
+        Trace.beginSection("bindContactData");
+        mContactData = data;
+        invalidateOptionsMenu();
+
+        Trace.endSection();
+        Trace.beginSection("Set display photo & name");
+
+        mPhotoView.setIsBusiness(mContactData.isDisplayNameFromOrganization());
+        mPhotoSetter.setupContactPhoto(data, mPhotoView);
+        extractAndApplyTintFromPhotoViewAsynchronously();
+        final String displayName = ContactDisplayUtils.getDisplayName(this, data).toString();
+        setHeaderNameText(
+                displayName, mContactData.getDisplayNameSource() == DisplayNameSources.PHONE);
+        final String phoneticName = ContactDisplayUtils.getPhoneticName(this, data);
+        if (mScroller != null) {
+            // Show phonetic name only when it doesn't equal the display name.
+            if (!TextUtils.isEmpty(phoneticName) && !phoneticName.equals(displayName)) {
+                mScroller.setPhoneticName(phoneticName);
+            } else {
+                mScroller.setPhoneticNameGone();
+            }
+        }
+
+        Trace.endSection();
+
+        mEntriesAndActionsTask = new AsyncTask<Void, Void, Cp2DataCardModel>() {
+
+            @Override
+            protected Cp2DataCardModel doInBackground(
+                    Void... params) {
+                Log.d(TAG, "[Cp2DataCardModel] doInBackground");
+                return generateDataModelFromContact(data);
+            }
+
+            @Override
+            protected void onPostExecute(Cp2DataCardModel cardDataModel) {
+                super.onPostExecute(cardDataModel);
+                // Check that original AsyncTask parameters are still valid and the activity
+                // is still running before binding to UI. A new intent could invalidate
+                // the results, for example.
+                Log.d(TAG, "[Cp2DataCardModel] onPostExecute");
+                if (data == mContactData && !isCancelled()) {
+                    bindDataToCards(cardDataModel);
+                    showActivity();
+                ///M:[Google Issue][ALPS03391875] save DataModel event activity stopped @{
+                } else {
+                    Log.e(TAG, "[Cp2DataCardModel] Async task cancelled !!! isCancelled():" +
+                            isCancelled() + ", data:" + data + ", mContactData:" + mContactData);
+                    mCachedCp2DataCardModel = cardDataModel;
+                /// @}
+                }
+            }
+        };
+        mEntriesAndActionsTask.execute();
+        Log.d(TAG, "[bindContactData] mEntriesAndActionsTask.execute()");
+    }
+
+    private void bindDataToCards(Cp2DataCardModel cp2DataCardModel) {
+        startInteractionLoaders(cp2DataCardModel);
+        populateContactAndAboutCard(cp2DataCardModel, /* shouldAddPhoneticName */ true);
+        populateSuggestionCard();
+    }
+
+    private void startInteractionLoaders(Cp2DataCardModel cp2DataCardModel) {
+        final Map<String, List<DataItem>> dataItemsMap = cp2DataCardModel.dataItemsMap;
+        final List<DataItem> phoneDataItems = dataItemsMap.get(Phone.CONTENT_ITEM_TYPE);
+        if (phoneDataItems != null) {
+            /// M: Reset the value as the size may change,
+            //  otherwise when size > 1, the value will always be true.
+            mOnlyOnePhoneNumber = phoneDataItems.size() == 1 ? true : false;
+        }
+        String[] phoneNumbers = null;
+        if (phoneDataItems != null) {
+            phoneNumbers = new String[phoneDataItems.size()];
+            for (int i = 0; i < phoneDataItems.size(); ++i) {
+                phoneNumbers[i] = ((PhoneDataItem) phoneDataItems.get(i)).getNumber();
+            }
+        }
+        final Bundle phonesExtraBundle = new Bundle();
+        phonesExtraBundle.putStringArray(KEY_LOADER_EXTRA_PHONES, phoneNumbers);
+
+        Trace.beginSection("start sms loader");
+        getLoaderManager().initLoader(
+                LOADER_SMS_ID,
+                phonesExtraBundle,
+                mLoaderInteractionsCallbacks);
+        Trace.endSection();
+
+        Trace.beginSection("start call log loader");
+        getLoaderManager().initLoader(
+                LOADER_CALL_LOG_ID,
+                phonesExtraBundle,
+                mLoaderInteractionsCallbacks);
+        Trace.endSection();
+
+
+        Trace.beginSection("start calendar loader");
+        final List<DataItem> emailDataItems = dataItemsMap.get(Email.CONTENT_ITEM_TYPE);
+        if (emailDataItems != null) {
+            /// M: Reset the value as the size may change,
+            //  otherwise when size > 1, the value will always be true.
+            mOnlyOneEmail = emailDataItems.size() == 1 ? true : false;
+        }
+        String[] emailAddresses = null;
+        if (emailDataItems != null) {
+            emailAddresses = new String[emailDataItems.size()];
+            for (int i = 0; i < emailDataItems.size(); ++i) {
+                emailAddresses[i] = ((EmailDataItem) emailDataItems.get(i)).getAddress();
+            }
+        }
+        final Bundle emailsExtraBundle = new Bundle();
+        emailsExtraBundle.putStringArray(KEY_LOADER_EXTRA_EMAILS, emailAddresses);
+        getLoaderManager().initLoader(
+                LOADER_CALENDAR_ID,
+                emailsExtraBundle,
+                mLoaderInteractionsCallbacks);
+        Trace.endSection();
+    }
+
+    private void showActivity() {
+        Log.d(TAG, "[showActivity]");
+        if (mScroller != null) {
+            mScroller.setVisibility(View.VISIBLE);
+            SchedulingUtils.doOnPreDraw(mScroller, /* drawNextFrame = */ false,
+                    new Runnable() {
+                        @Override
+                        public void run() {
+                            runEntranceAnimation();
+                        }
+                    });
+        }
+    }
+
+    private List<List<Entry>> buildAboutCardEntries(Map<String, List<DataItem>> dataItemsMap) {
+        final List<List<Entry>> aboutCardEntries = new ArrayList<>();
+        for (String mimetype : SORTED_ABOUT_CARD_MIMETYPES) {
+            final List<DataItem> mimeTypeItems = dataItemsMap.get(mimetype);
+            if (mimeTypeItems == null) {
+                continue;
+            }
+            // Set aboutCardTitleOut = null, since SORTED_ABOUT_CARD_MIMETYPES doesn't contain
+            // the name mimetype.
+            final List<Entry> aboutEntries = dataItemsToEntries(mimeTypeItems,
+                    /* aboutCardTitleOut = */ null);
+            if (aboutEntries.size() > 0) {
+                aboutCardEntries.add(aboutEntries);
+            }
+        }
+        return aboutCardEntries;
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        // If returning from a launched activity, repopulate the contact and about card
+        if (mHasIntentLaunched) {
+            mHasIntentLaunched = false;
+            populateContactAndAboutCard(mCachedCp2DataCardModel, /* shouldAddPhoneticName */ false);
+        }
+
+        // When exiting the activity and resuming, we want to force a full reload of all the
+        // interaction data in case something changed in the background. On screen rotation,
+        // we don't need to do this. And, mCachedCp2DataCardModel will be null, so we won't.
+        if (mCachedCp2DataCardModel != null) {
+            destroyInteractionLoaders();
+            startInteractionLoaders(mCachedCp2DataCardModel);
+        }
+        ///M:[for rcs] update Rcs contact on the top left@{
+        ExtensionManager.getInstance().getRcsExtension()
+                .getQuickContactRcsScroller()
+                .updateRcsContact(mContactLoader.getLookupUri(), false);
+        ///@}
+    }
+
+    private void populateSuggestionCard() {
+        Log.d(TAG, "[populateSuggestionCard] mPreviousContactId = " + mPreviousContactId
+                + ", mContactData.getId()" + mContactData.getId());
+
+        // Initialize suggestion related view and data.
+        if (mPreviousContactId != mContactData.getId()) {
+            mCollapsedSuggestionCardView.setVisibility(View.GONE);
+            mExpandSuggestionCardView.setVisibility(View.GONE);
+            mIsSuggestionListCollapsed = true;
+            mSuggestionsShouldAutoSelected = true;
+            mSuggestionList.removeAllViews();
+        }
+
+        // Do not show the card when it's directory contact or invisible.
+        if (DirectoryContactUtil.isDirectoryContact(mContactData)
+                || InvisibleContactUtil.isInvisibleAndAddable(mContactData, this)) {
+            return;
+        }
+
+        if (mAggregationSuggestionEngine == null) {
+            mAggregationSuggestionEngine = new AggregationSuggestionEngine(this);
+            mAggregationSuggestionEngine.setListener(this);
+            mAggregationSuggestionEngine.setSuggestionsLimit(getResources().getInteger(
+                    R.integer.quickcontact_suggestions_limit));
+            mAggregationSuggestionEngine.start();
+        }
+
+        mAggregationSuggestionEngine.setContactId(mContactData.getId());
+        if (mPreviousContactId != 0
+                && mPreviousContactId != mContactData.getId()) {
+            // Clear selected Ids when listing suggestions for new contact Id.
+            mSelectedAggregationIds.clear();
+        }
+        mPreviousContactId = mContactData.getId();
+
+        // Trigger suggestion engine to compute suggestions.
+        if (mContactData.getId() <= 0) {
+            return;
+        }
+        final ContentValues values = new ContentValues();
+        values.put(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,
+                mContactData.getDisplayName());
+        values.put(ContactsContract.CommonDataKinds.StructuredName.PHONETIC_FAMILY_NAME,
+                mContactData.getPhoneticName());
+        mAggregationSuggestionEngine.onNameChange(ValuesDelta.fromBefore(values));
+    }
+
+    private void populateContactAndAboutCard(Cp2DataCardModel cp2DataCardModel,
+            boolean shouldAddPhoneticName) {
+        mCachedCp2DataCardModel = cp2DataCardModel;
+        if (mHasIntentLaunched || cp2DataCardModel == null) {
+            return;
+        }
+        Trace.beginSection("bind contact card");
+
+        final List<List<Entry>> contactCardEntries = cp2DataCardModel.contactCardEntries;
+        final List<List<Entry>> aboutCardEntries = cp2DataCardModel.aboutCardEntries;
+        final String customAboutCardName = cp2DataCardModel.customAboutCardName;
+
+        if (contactCardEntries.size() > 0) {
+            final boolean firstEntriesArePrioritizedMimeType =
+                    !TextUtils.isEmpty(mExtraPrioritizedMimeType) &&
+                    mCachedCp2DataCardModel.dataItemsMap.containsKey(mExtraPrioritizedMimeType) &&
+                    mCachedCp2DataCardModel.dataItemsMap.get(mExtraPrioritizedMimeType).size() != 0;
+            mContactCard.initialize(contactCardEntries,
+                    /* numInitialVisibleEntries = */ MIN_NUM_CONTACT_ENTRIES_SHOWN,
+                    /* isExpanded = */ mContactCard.isExpanded(),
+                    /* isAlwaysExpanded = */ false,
+                    mExpandingEntryCardViewListener,
+                    mScroller,
+                    firstEntriesArePrioritizedMimeType);
+            mContactCard.setVisibility(View.VISIBLE);
+        } else {
+            mContactCard.setVisibility(View.GONE);
+        }
+        Trace.endSection();
+
+        Trace.beginSection("bind about card");
+
+        // Phonetic name is not a data item, so the entry needs to be created separately
+        // But if mCachedCp2DataCardModel is passed to this method (e.g. returning from editor
+        // without saving any changes), then it should include phoneticName and the phoneticName
+        // shouldn't be changed. If this is the case, we shouldn't add it again. b/27459294
+        final String phoneticName = mContactData.getPhoneticName();
+        if (shouldAddPhoneticName && !TextUtils.isEmpty(phoneticName)) {
+            Entry phoneticEntry = new Entry(/* viewId = */ -1,
+                    /* icon = */ null,
+                    getResources().getString(R.string.name_phonetic),
+                    phoneticName,
+                    /* subHeaderIcon = */ null,
+                    /* text = */ null,
+                    /* textIcon = */ null,
+                    /* primaryContentDescription = */ null,
+                    /* intent = */ null,
+                    /* alternateIcon = */ null,
+                    /* alternateIntent = */ null,
+                    /* alternateContentDescription = */ null,
+                    /* shouldApplyColor = */ false,
+                    /* isEditable = */ false,
+                    /* EntryContextMenuInfo = */ new EntryContextMenuInfo(phoneticName,
+                            getResources().getString(R.string.name_phonetic),
+                            /* mimeType = */ null, /* id = */ -1, /* isPrimary = */ false),
+                    /* thirdIcon = */ null,
+                    /* thirdIntent = */ null,
+                    /* thirdContentDescription = */ null,
+                    /* thirdAction = */ Entry.ACTION_NONE,
+                    /* thirdExtras = */ null,
+                    /* iconResourceId = */  0);
+            List<Entry> phoneticList = new ArrayList<>();
+            phoneticList.add(phoneticEntry);
+            // Phonetic name comes after nickname. Check to see if the first entry type is nickname
+            if (aboutCardEntries.size() > 0 && aboutCardEntries.get(0).get(0).getHeader().equals(
+                    getResources().getString(R.string.header_nickname_entry))) {
+                aboutCardEntries.add(1, phoneticList);
+            } else {
+                aboutCardEntries.add(0, phoneticList);
+            }
+        }
+
+
+        /// M: Bug fix ALPS01775443, after deleted name in editor, need refresh about card.
+        mAboutCard.setTitle(customAboutCardName);
+
+        if (aboutCardEntries.size() > 0) {
+            mAboutCard.initialize(aboutCardEntries,
+                    /* numInitialVisibleEntries = */ 1,
+                    /* isExpanded = */ true,
+                    /* isAlwaysExpanded = */ true,
+                    mExpandingEntryCardViewListener,
+                    mScroller);
+        } else {
+            /// M: Bug fix ALPS01763309, after deleted all about card informations
+            //  in editor, need refresh about card. @{
+            mAboutCard.initialize(aboutCardEntries, 1, true, true,
+                    mExpandingEntryCardViewListener, mScroller);
+            mAboutCard.setVisibility(View.GONE);
+            /// @}
+        }
+
+        if (contactCardEntries.size() == 0 && aboutCardEntries.size() == 0) {
+            initializeNoContactDetailCard();
+        } else {
+            mNoContactDetailsCard.setVisibility(View.GONE);
+        }
+
+        // If the Recent card is already initialized (all recent data is loaded), show the About
+        // card if it has entries. Otherwise About card visibility will be set in bindRecentData()
+        if (isAllRecentDataLoaded() && aboutCardEntries.size() > 0) {
+            mAboutCard.setVisibility(View.VISIBLE);
+        }
+        Trace.endSection();
+    }
+
+    /**
+     * Create a card that shows "Add email" and "Add phone number" entries in grey.
+     */
+    private void initializeNoContactDetailCard() {
+        Log.d(TAG, "[initializeNoContactDetailCard]");
+        final Drawable phoneIcon = getResources().getDrawable(
+                R.drawable.ic_phone_24dp).mutate();
+        final Entry phonePromptEntry = new Entry(CARD_ENTRY_ID_EDIT_CONTACT,
+                phoneIcon, getString(R.string.quickcontact_add_phone_number),
+                /* subHeader = */ null, /* subHeaderIcon = */ null, /* text = */ null,
+                /* textIcon = */ null, /* primaryContentDescription = */ null,
+                getEditContactIntent(),
+                /* alternateIcon = */ null, /* alternateIntent = */ null,
+                /* alternateContentDescription = */ null, /* shouldApplyColor = */ true,
+                /* isEditable = */ false, /* EntryContextMenuInfo = */ null,
+                /* thirdIcon = */ null, /* thirdIntent = */ null,
+                /* thirdContentDescription = */ null,
+                /* thirdAction = */ Entry.ACTION_NONE,
+                /* thirdExtras = */ null,
+                R.drawable.ic_phone_24dp);
+
+        final Drawable emailIcon = getResources().getDrawable(
+                R.drawable.ic_email_24dp).mutate();
+        final Entry emailPromptEntry = new Entry(CARD_ENTRY_ID_EDIT_CONTACT,
+                emailIcon, getString(R.string.quickcontact_add_email), /* subHeader = */ null,
+                /* subHeaderIcon = */ null,
+                /* text = */ null, /* textIcon = */ null, /* primaryContentDescription = */ null,
+                getEditContactIntent(), /* alternateIcon = */ null,
+                /* alternateIntent = */ null, /* alternateContentDescription = */ null,
+                /* shouldApplyColor = */ true, /* isEditable = */ false,
+                /* EntryContextMenuInfo = */ null, /* thirdIcon = */ null,
+                /* thirdIntent = */ null, /* thirdContentDescription = */ null,
+                /* thirdAction = */ Entry.ACTION_NONE, /* thirdExtras = */ null,
+                R.drawable.ic_email_24dp);
+
+        final List<List<Entry>> promptEntries = new ArrayList<>();
+        promptEntries.add(new ArrayList<Entry>(1));
+        /// M: ALPS02782438.not support to show email for sim and Ruim type.@{
+        //promptEntries.add(new ArrayList<Entry>(1));
+        promptEntries.get(0).add(phonePromptEntry);
+        if (isSupportShowEmailData(mContactData)) {
+            promptEntries.add(new ArrayList<Entry>(1));
+            promptEntries.get(1).add(emailPromptEntry);
+        }
+        /// @}
+        final int subHeaderTextColor = getResources().getColor(
+                R.color.quickcontact_entry_sub_header_text_color);
+        final PorterDuffColorFilter greyColorFilter =
+                new PorterDuffColorFilter(subHeaderTextColor, PorterDuff.Mode.SRC_ATOP);
+        mNoContactDetailsCard.initialize(promptEntries, /*M: ALPS02782438.//2*/promptEntries.size(),
+                /* isExpanded = */ true,
+                /* isAlwaysExpanded = */ true, mExpandingEntryCardViewListener, mScroller);
+        mNoContactDetailsCard.setVisibility(View.VISIBLE);
+        mNoContactDetailsCard.setEntryHeaderColor(subHeaderTextColor);
+        mNoContactDetailsCard.setColorAndFilter(subHeaderTextColor, greyColorFilter);
+    }
+
+    /**
+     * Builds the {@link DataItem}s Map out of the Contact.
+     * @param data The contact to build the data from.
+     * @return A pair containing a list of data items sorted within mimetype and sorted
+     *  amongst mimetype. The map goes from mimetype string to the sorted list of data items within
+     *  mimetype
+     */
+    private Cp2DataCardModel generateDataModelFromContact(
+            Contact data) {
+        Trace.beginSection("Build data items map");
+        Log.d(TAG, "[generateDataModelFromContact] start contact: " + data);
+        final Map<String, List<DataItem>> dataItemsMap = new HashMap<>();
+
+        final ResolveCache cache = ResolveCache.getInstance(this);
+        for (RawContact rawContact : data.getRawContacts()) {
+            for (DataItem dataItem : rawContact.getDataItems()) {
+                dataItem.setRawContactId(rawContact.getId());
+
+                final String mimeType = dataItem.getMimeType();
+                if (mimeType == null) continue;
+
+                final AccountType accountType = rawContact.getAccountType(this);
+                final DataKind dataKind = AccountTypeManager.getInstance(this)
+                        .getKindOrFallback(accountType, mimeType);
+                if (dataKind == null) continue;
+
+                dataItem.setDataKind(dataKind);
+
+                final boolean hasData = !TextUtils.isEmpty(dataItem.buildDataString(this,
+                        dataKind));
+
+                if (isMimeExcluded(mimeType) || !hasData) continue;
+
+                List<DataItem> dataItemListByType = dataItemsMap.get(mimeType);
+                if (dataItemListByType == null) {
+                    dataItemListByType = new ArrayList<>();
+                    dataItemsMap.put(mimeType, dataItemListByType);
+                }
+                dataItemListByType.add(dataItem);
+            }
+        }
+        Trace.endSection();
+
+        Trace.beginSection("sort within mimetypes");
+        /*
+         * Sorting is a multi part step. The end result is to a have a sorted list of the most
+         * used data items, one per mimetype. Then, within each mimetype, the list of data items
+         * for that type is also sorted, based off of {super primary, primary, times used} in that
+         * order.
+         */
+        final List<List<DataItem>> dataItemsList = new ArrayList<>();
+        for (List<DataItem> mimeTypeDataItems : dataItemsMap.values()) {
+            // Remove duplicate data items
+            Collapser.collapseList(mimeTypeDataItems, this);
+            // Sort within mimetype
+            Collections.sort(mimeTypeDataItems, mWithinMimeTypeDataItemComparator);
+            // Add to the list of data item lists
+            dataItemsList.add(mimeTypeDataItems);
+        }
+        Trace.endSection();
+
+        Trace.beginSection("sort amongst mimetypes");
+        // Sort amongst mimetypes to bubble up the top data items for the contact card
+        Collections.sort(dataItemsList, mAmongstMimeTypeDataItemComparator);
+        Trace.endSection();
+
+        Trace.beginSection("cp2 data items to entries");
+
+        final List<List<Entry>> contactCardEntries = new ArrayList<>();
+        final List<List<Entry>> aboutCardEntries = buildAboutCardEntries(dataItemsMap);
+        final MutableString aboutCardName = new MutableString();
+
+        for (int i = 0; i < dataItemsList.size(); ++i) {
+            final List<DataItem> dataItemsByMimeType = dataItemsList.get(i);
+            final DataItem topDataItem = dataItemsByMimeType.get(0);
+            if (SORTED_ABOUT_CARD_MIMETYPES.contains(topDataItem.getMimeType())) {
+                // About card mimetypes are built in buildAboutCardEntries, skip here
+                continue;
+            } else {
+                List<Entry> contactEntries = dataItemsToEntries(dataItemsList.get(i),
+                        aboutCardName);
+                if (contactEntries.size() > 0) {
+                    contactCardEntries.add(contactEntries);
+                }
+            }
+        }
+
+        Trace.endSection();
+
+        final Cp2DataCardModel dataModel = new Cp2DataCardModel();
+        dataModel.customAboutCardName = aboutCardName.value;
+        dataModel.aboutCardEntries = aboutCardEntries;
+        dataModel.contactCardEntries = contactCardEntries;
+        dataModel.dataItemsMap = dataItemsMap;
+        Log.d(TAG, "[generateDataModelFromContact] end contact: " + data);
+        return dataModel;
+    }
+
+    /**
+     * Class used to hold the About card and Contact cards' data model that gets generated
+     * on a background thread. All data is from CP2.
+     */
+    private static class Cp2DataCardModel {
+        /**
+         * A map between a mimetype string and the corresponding list of data items. The data items
+         * are in sorted order using mWithinMimeTypeDataItemComparator.
+         */
+        public Map<String, List<DataItem>> dataItemsMap;
+        public List<List<Entry>> aboutCardEntries;
+        public List<List<Entry>> contactCardEntries;
+        public String customAboutCardName;
+    }
+
+    private static class MutableString {
+        public String value;
+    }
+
+    /**
+     * Converts a {@link DataItem} into an {@link ExpandingEntryCardView.Entry} for display.
+     * If the {@link ExpandingEntryCardView.Entry} has no visual elements, null is returned.
+     *
+     * This runs on a background thread. This is set as static to avoid accidentally adding
+     * additional dependencies on unsafe things (like the Activity).
+     *
+     * @param dataItem The {@link DataItem} to convert.
+     * @param secondDataItem A second {@link DataItem} to help build a full entry for some
+     *  mimetypes
+     * @return The {@link ExpandingEntryCardView.Entry}, or null if no visual elements are present.
+     */
+    private static Entry dataItemToEntry(DataItem dataItem, DataItem secondDataItem,
+            Context context, Contact contactData,
+            final MutableString aboutCardName) {
+        Log.d(TAG, "[dataItemToEntry] contact:" + contactData + " dataItem:" + dataItem.getClass());
+        Drawable icon = null;
+        String header = null;
+        String subHeader = null;
+        Drawable subHeaderIcon = null;
+        String text = null;
+        Drawable textIcon = null;
+        StringBuilder primaryContentDescription = new StringBuilder();
+        Spannable phoneContentDescription = null;
+        Spannable smsContentDescription = null;
+        Intent intent = null;
+        boolean shouldApplyColor = true;
+        Drawable alternateIcon = null;
+        Intent alternateIntent = null;
+        StringBuilder alternateContentDescription = new StringBuilder();
+        final boolean isEditable = false;
+        EntryContextMenuInfo entryContextMenuInfo = null;
+        Drawable thirdIcon = null;
+        Intent thirdIntent = null;
+        int thirdAction = Entry.ACTION_NONE;
+        String thirdContentDescription = null;
+        Bundle thirdExtras = null;
+        int iconResourceId = 0;
+
+        context = context.getApplicationContext();
+        final Resources res = context.getResources();
+        DataKind kind = dataItem.getDataKind();
+
+        QuickContactUtils.resetSipAddress();
+        /// M: Fix ALPS01995031
+        if (contactData == null) {
+            Log.w(TAG, "[dataItemToEntry] contact data is null.");
+            return null;
+        }
+        if (dataItem instanceof ImDataItem) {
+            final ImDataItem im = (ImDataItem) dataItem;
+            intent = ContactsUtils.buildImIntent(context, im).first;
+            final boolean isEmail = im.isCreatedFromEmail();
+            final int protocol;
+            if (!im.isProtocolValid()) {
+                protocol = Im.PROTOCOL_CUSTOM;
+            } else {
+                protocol = isEmail ? Im.PROTOCOL_GOOGLE_TALK : im.getProtocol();
+            }
+            if (protocol == Im.PROTOCOL_CUSTOM) {
+                // If the protocol is custom, display the "IM" entry header as well to distinguish
+                // this entry from other ones
+                header = res.getString(R.string.header_im_entry);
+                subHeader = Im.getProtocolLabel(res, protocol,
+                        im.getCustomProtocol()).toString();
+                text = im.getData();
+            } else {
+                header = Im.getProtocolLabel(res, protocol,
+                        im.getCustomProtocol()).toString();
+                subHeader = im.getData();
+            }
+            entryContextMenuInfo = new EntryContextMenuInfo(im.getData(), header,
+                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
+        } else if (dataItem instanceof OrganizationDataItem) {
+            final OrganizationDataItem organization = (OrganizationDataItem) dataItem;
+            header = res.getString(R.string.header_organization_entry);
+            subHeader = organization.getCompany();
+            entryContextMenuInfo = new EntryContextMenuInfo(subHeader, header,
+                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
+            text = organization.getTitle();
+        } else if (dataItem instanceof NicknameDataItem) {
+            final NicknameDataItem nickname = (NicknameDataItem) dataItem;
+            // Build nickname entries
+            final boolean isNameRawContact =
+                (contactData.getNameRawContactId() == dataItem.getRawContactId());
+
+            final boolean duplicatesTitle =
+                isNameRawContact
+                && contactData.getDisplayNameSource() == DisplayNameSources.NICKNAME;
+
+            if (!duplicatesTitle) {
+                header = res.getString(R.string.header_nickname_entry);
+                subHeader = nickname.getName();
+                entryContextMenuInfo = new EntryContextMenuInfo(subHeader, header,
+                        dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
+            }
+        } else if (dataItem instanceof NoteDataItem) {
+            final NoteDataItem note = (NoteDataItem) dataItem;
+            header = res.getString(R.string.header_note_entry);
+            subHeader = note.getNote();
+            entryContextMenuInfo = new EntryContextMenuInfo(subHeader, header,
+                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
+        } else if (dataItem instanceof WebsiteDataItem) {
+            final WebsiteDataItem website = (WebsiteDataItem) dataItem;
+            header = res.getString(R.string.header_website_entry);
+            subHeader = website.getUrl();
+            entryContextMenuInfo = new EntryContextMenuInfo(subHeader, header,
+                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
+            try {
+                final WebAddress webAddress = new WebAddress(website.buildDataStringForDisplay
+                        (context, kind));
+                intent = new Intent(Intent.ACTION_VIEW, Uri.parse(webAddress.toString()));
+            } catch (final ParseException e) {
+                Log.e(TAG, "Couldn't parse website: " + website.buildDataStringForDisplay(
+                        context, kind));
+            }
+        } else if (dataItem instanceof EventDataItem) {
+            final EventDataItem event = (EventDataItem) dataItem;
+            final String dataString = event.buildDataStringForDisplay(context, kind);
+            final Calendar cal = DateUtils.parseDate(dataString, false);
+            if (cal != null) {
+                final Date nextAnniversary =
+                        DateUtils.getNextAnnualDate(cal);
+                final Uri.Builder builder = CalendarContract.CONTENT_URI.buildUpon();
+                builder.appendPath("time");
+                ContentUris.appendId(builder, nextAnniversary.getTime());
+                intent = new Intent(Intent.ACTION_VIEW).setData(builder.build());
+            }
+            header = res.getString(R.string.header_event_entry);
+            if (event.hasKindTypeColumn(kind)) {
+                subHeader = EventCompat.getTypeLabel(res, event.getKindTypeColumn(kind),
+                        event.getLabel()).toString();
+            }
+            text = DateUtils.formatDate(context, dataString);
+            entryContextMenuInfo = new EntryContextMenuInfo(text, header,
+                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
+        } else if (dataItem instanceof RelationDataItem) {
+            final RelationDataItem relation = (RelationDataItem) dataItem;
+            final String dataString = relation.buildDataStringForDisplay(context, kind);
+            if (!TextUtils.isEmpty(dataString)) {
+                intent = new Intent(Intent.ACTION_SEARCH);
+                intent.putExtra(SearchManager.QUERY, dataString);
+                intent.setType(Contacts.CONTENT_TYPE);
+            }
+            header = res.getString(R.string.header_relation_entry);
+            subHeader = relation.getName();
+            entryContextMenuInfo = new EntryContextMenuInfo(subHeader, header,
+                    dataItem.getMimeType(), dataItem.getId(), dataItem.isSuperPrimary());
+            if (relation.hasKindTypeColumn(kind)) {
+                text = Relation.getTypeLabel(res,
+                        relation.getKindTypeColumn(kind),
+                        relation.getLabel()).toString();
+            }
+        } else if (dataItem instanceof PhoneDataItem) {
+            final PhoneDataItem phone = (PhoneDataItem) dataItem;
+            String phoneLabel = null;
+            if (!TextUtils.isEmpty(phone.getNumber())) {
+                primaryContentDescription.append(res.getString(R.string.call_other)).append(" ");
+                header = sBidiFormatter.unicodeWrap(phone.buildDataStringForDisplay(context, kind),
+                        TextDirectionHeuristics.LTR);
+                entryContextMenuInfo = new EntryContextMenuInfo(header,
+                        res.getString(R.string.phoneLabelsGroup), dataItem.getMimeType(),
+                        dataItem.getId(), dataItem.isSuperPrimary());
+                if (phone.hasKindTypeColumn(kind)) {
+                    final int kindTypeColumn = phone.getKindTypeColumn(kind);
+                    final String label = phone.getLabel();
+                    phoneLabel = label;
+                    if (kindTypeColumn == Phone.TYPE_CUSTOM && TextUtils.isEmpty(label)) {
+                        text = "";
+                    } else {
+                        text = Phone.getTypeLabel(res, kindTypeColumn, label).toString();
+                        ///M:[for AAS]show Primary Number/Additional Number@{
+                        int subId = contactData.getIndicate();
+                        subHeader = GlobalEnv.getAasExtension().getSubheaderString(
+                                subId, dataItem.getContentValues().getAsInteger(Data.DATA2));
+                        text = (String) GlobalEnv.getAasExtension().getTypeLabel(
+                                dataItem.getContentValues().getAsInteger(Data.DATA2),
+                                (CharSequence) dataItem.getContentValues().getAsString(Data.DATA3),
+                                (String) text, subId);
+                        ///@}
+                        phoneLabel= text;
+                        primaryContentDescription.append(text).append(" ");
+                    }
+
+                }
+                primaryContentDescription.append(header);
+                phoneContentDescription = com.android.contacts.common.util.ContactDisplayUtils
+                        .getTelephoneTtsSpannable(primaryContentDescription.toString(), header);
+                icon = res.getDrawable(R.drawable.ic_phone_24dp);
+                iconResourceId = R.drawable.ic_phone_24dp;
+                if (PhoneCapabilityTester.isPhone(context)) {
+                    intent = CallUtil.getCallIntent(phone.getNumber());
+                }
+                /// M: mtk add isSupportSms() method to enable Sms dynamically.@{
+                if (PhoneCapabilityTester.isSupportSms(context)) {
+                    alternateIntent = new Intent(Intent.ACTION_SENDTO,
+                            Uri.fromParts(ContactsUtils.SCHEME_SMSTO, phone.getNumber(), null));
+
+                    alternateIcon = res.getDrawable(R.drawable.ic_message_24dp_mirrored);
+                    alternateContentDescription.append(res.getString(R.string.sms_custom, header));
+                }
+                /// @}
+                smsContentDescription = com.android.contacts.common.util.ContactDisplayUtils
+                        .getTelephoneTtsSpannable(alternateContentDescription.toString(), header);
+                int videoCapability = CallUtil.getVideoCallingAvailability(context);
+                boolean isPresenceEnabled =
+                        (videoCapability & CallUtil.VIDEO_CALLING_PRESENCE) != 0;
+                boolean isVideoEnabled = (videoCapability & CallUtil.VIDEO_CALLING_ENABLED) != 0;
+                ///M: Video Entry @{
+                isVideoEnabled = ExtensionManager.getInstance().getOp01Extension()
+                        .isVideoButtonEnabled(isVideoEnabled, contactData.getLookupUri(), context);
+                ///@}
+
+                if (CallUtil.isCallWithSubjectSupported(context)) {
+                    thirdIcon = res.getDrawable(R.drawable.ic_call_note_white_24dp);
+                    thirdAction = Entry.ACTION_CALL_WITH_SUBJECT;
+                    thirdContentDescription =
+                            res.getString(R.string.call_with_a_note);
+
+                    // Create a bundle containing the data the call subject dialog requires.
+                    thirdExtras = new Bundle();
+                    thirdExtras.putLong(CallSubjectDialog.ARG_PHOTO_ID,
+                            contactData.getPhotoId());
+                    thirdExtras.putParcelable(CallSubjectDialog.ARG_PHOTO_URI,
+                            UriUtils.parseUriOrNull(contactData.getPhotoUri()));
+                    thirdExtras.putParcelable(CallSubjectDialog.ARG_CONTACT_URI,
+                            contactData.getLookupUri());
+                    thirdExtras.putString(CallSubjectDialog.ARG_NAME_OR_NUMBER,
+                            contactData.getDisplayName());
+                    thirdExtras.putBoolean(CallSubjectDialog.ARG_IS_BUSINESS, false);
+                    thirdExtras.putString(CallSubjectDialog.ARG_NUMBER,
+                            phone.getNumber());
+                    thirdExtras.putString(CallSubjectDialog.ARG_DISPLAY_NUMBER,
+                            phone.getFormattedPhoneNumber());
+                    thirdExtras.putString(CallSubjectDialog.ARG_NUMBER_LABEL,
+                            phoneLabel);
+                } else if (isVideoEnabled|| ExtensionManager.getInstance()
+                        .getContactsCommonPresenceExtension().isShowVideoIcon()) {
+                    // Check to ensure carrier presence indicates the number supports video calling.
+                    int carrierPresence = dataItem.getCarrierPresence();
+                    boolean isPresent = (carrierPresence & Phone.CARRIER_PRESENCE_VT_CAPABLE) != 0;
+
+                    if ((isPresenceEnabled && isPresent) || !isPresenceEnabled) {
+                        thirdIcon = res.getDrawable(R.drawable.ic_videocam);
+                        thirdAction = Entry.ACTION_INTENT;
+                        thirdIntent = CallUtil.getVideoCallIntent(phone.getNumber(),
+                                CALL_ORIGIN_QUICK_CONTACTS_ACTIVITY);
+                        thirdContentDescription =
+                                res.getString(R.string.description_video_call);
+                    }
+                }
+                ExtensionManager.getInstance().getContactsCommonPresenceExtension().
+                    setVideoIconAlpha(phone.getNumber(), thirdIcon);
+            }
+        } else if (dataItem instanceof EmailDataItem) {
+            final EmailDataItem email = (EmailDataItem) dataItem;
+            final String address = email.getData();
+            if (!TextUtils.isEmpty(address)) {
+                primaryContentDescription.append(res.getString(R.string.email_other)).append(" ");
+                final Uri mailUri = Uri.fromParts(ContactsUtils.SCHEME_MAILTO, address, null);
+                intent = new Intent(Intent.ACTION_SENDTO, mailUri);
+                header = email.getAddress();
+                entryContextMenuInfo = new EntryContextMenuInfo(header,
+                        res.getString(R.string.emailLabelsGroup), dataItem.getMimeType(),
+                        dataItem.getId(), dataItem.isSuperPrimary());
+                if (email.hasKindTypeColumn(kind)) {
+                    text = Email.getTypeLabel(res, email.getKindTypeColumn(kind),
+                            email.getLabel()).toString();
+                    primaryContentDescription.append(text).append(" ");
+                }
+                primaryContentDescription.append(header);
+                icon = res.getDrawable(R.drawable.ic_email_24dp);
+                iconResourceId = R.drawable.ic_email_24dp;
+            }
+        } else if (dataItem instanceof StructuredPostalDataItem) {
+            StructuredPostalDataItem postal = (StructuredPostalDataItem) dataItem;
+            final String postalAddress = postal.getFormattedAddress();
+            if (!TextUtils.isEmpty(postalAddress)) {
+                primaryContentDescription.append(res.getString(R.string.map_other)).append(" ");
+                intent = StructuredPostalUtils.getViewPostalAddressIntent(postalAddress);
+                header = postal.getFormattedAddress();
+                entryContextMenuInfo = new EntryContextMenuInfo(header,
+                        res.getString(R.string.postalLabelsGroup), dataItem.getMimeType(),
+                        dataItem.getId(), dataItem.isSuperPrimary());
+                if (postal.hasKindTypeColumn(kind)) {
+                    text = StructuredPostal.getTypeLabel(res,
+                            postal.getKindTypeColumn(kind), postal.getLabel()).toString();
+                    primaryContentDescription.append(text).append(" ");
+                }
+                primaryContentDescription.append(header);
+                alternateIntent =
+                        StructuredPostalUtils.getViewPostalAddressDirectionsIntent(postalAddress);
+                alternateIcon = res.getDrawable(R.drawable.ic_directions_24dp);
+                alternateContentDescription.append(res.getString(
+                        R.string.content_description_directions)).append(" ").append(header);
+                icon = res.getDrawable(R.drawable.ic_place_24dp);
+                iconResourceId = R.drawable.ic_place_24dp;
+            }
+        } else if (dataItem instanceof SipAddressDataItem) {
+            final SipAddressDataItem sip = (SipAddressDataItem) dataItem;
+            final String address = sip.getSipAddress();
+            if (!TextUtils.isEmpty(address)) {
+                QuickContactUtils.setSipAddress(address);
+                primaryContentDescription.append(res.getString(R.string.call_other)).append(
+                        " ");
+                if (PhoneCapabilityTester.isSipPhone(context)) {
+                    final Uri callUri = Uri.fromParts(PhoneAccount.SCHEME_SIP, address, null);
+                    intent = CallUtil.getCallIntent(callUri);
+                }
+                header = address;
+                entryContextMenuInfo = new EntryContextMenuInfo(header,
+                        res.getString(R.string.phoneLabelsGroup), dataItem.getMimeType(),
+                        dataItem.getId(), dataItem.isSuperPrimary());
+                if (sip.hasKindTypeColumn(kind)) {
+                    text = SipAddress.getTypeLabel(res,
+                            sip.getKindTypeColumn(kind), sip.getLabel()).toString();
+                    primaryContentDescription.append(text).append(" ");
+                }
+                primaryContentDescription.append(header);
+                icon = res.getDrawable(R.drawable.ic_dialer_sip_black_24dp);
+                iconResourceId = R.drawable.ic_dialer_sip_black_24dp;
+            }
+        } else if (dataItem instanceof StructuredNameDataItem) {
+            // If the name is already set and this is not the super primary value then leave the
+            // current value. This way we show the super primary value when we are able to.
+            if (dataItem.isSuperPrimary() || aboutCardName.value == null
+                    || aboutCardName.value.isEmpty()) {
+                final String givenName = ((StructuredNameDataItem) dataItem).getGivenName();
+                if (!TextUtils.isEmpty(givenName)) {
+                    aboutCardName.value = res.getString(R.string.about_card_title) +
+                            " " + givenName;
+                } else {
+                    aboutCardName.value = res.getString(R.string.about_card_title);
+                }
+            }
+        } else if (dataItem instanceof ImsCallDataItem) { // M: add IMS Call
+            if (ContactsSystemProperties.MTK_VOLTE_SUPPORT &&
+                    ContactsSystemProperties.MTK_IMS_SUPPORT) {
+                final ImsCallDataItem ims = (ImsCallDataItem) dataItem;
+                String imsUri = ims.getUrl();
+                if (!TextUtils.isEmpty(imsUri)) {
+                    String imsLabel = ims.getLabel();
+                    Log.d(TAG, "imsUri: " + imsUri + ", imsLabel: " + imsLabel);
+                    intent = CallUtil.getCallIntent(Uri.fromParts(PhoneAccount.SCHEME_TEL,
+                            imsUri, null), null, Constants.DIAL_NUMBER_INTENT_IMS);
+                    icon = res.getDrawable(R.drawable.ic_dialer_ims_black);
+                    text = res.getString(R.string.imsCallLabelsGroup);
+                    header = imsUri;
+                }
+            }
+        /// M: Group member ship.
+        } else if (dataItem instanceof GroupMembershipDataItem) {
+            final GroupMembershipDataItem groupDataItem = (GroupMembershipDataItem) dataItem;
+            String groupTitle = QuickContactUtils.getGroupTitle(contactData.getGroupMetaData(),
+                    groupDataItem.getGroupRowId());
+            if (!TextUtils.isEmpty(groupTitle)) {
+                header = res.getString(R.string.contact_detail_group_list_title);
+                subHeader = groupTitle;
+            }
+        } else {
+            // Custom DataItem
+            header = dataItem.buildDataStringForDisplay(context, kind);
+            text = kind.typeColumn;
+            intent = new Intent(Intent.ACTION_VIEW);
+            final Uri uri = ContentUris.withAppendedId(Data.CONTENT_URI, dataItem.getId());
+            intent.setDataAndType(uri, dataItem.getMimeType());
+
+            if (intent != null) {
+                final String mimetype = intent.getType();
+
+                // Build advanced entry for known 3p types. Otherwise default to ResolveCache icon.
+                switch (mimetype) {
+                    case MIMETYPE_GPLUS_PROFILE:
+                        // If a secondDataItem is available, use it to build an entry with
+                        // alternate actions
+                        if (secondDataItem != null) {
+                            icon = res.getDrawable(R.drawable.ic_google_plus_24dp);
+                            alternateIcon = res.getDrawable(R.drawable.ic_add_to_circles_black_24);
+                            final GPlusOrHangoutsDataItemModel itemModel =
+                                    new GPlusOrHangoutsDataItemModel(intent, alternateIntent,
+                                            dataItem, secondDataItem, alternateContentDescription,
+                                            header, text, context);
+
+                            populateGPlusOrHangoutsDataItemModel(itemModel);
+                            intent = itemModel.intent;
+                            alternateIntent = itemModel.alternateIntent;
+                            alternateContentDescription = itemModel.alternateContentDescription;
+                            header = itemModel.header;
+                            text = itemModel.text;
+                        } else {
+                            if (GPLUS_PROFILE_DATA_5_ADD_TO_CIRCLE.equals(
+                                    intent.getDataString())) {
+                                icon = res.getDrawable(R.drawable.ic_add_to_circles_black_24);
+                            } else {
+                                icon = res.getDrawable(R.drawable.ic_google_plus_24dp);
+                            }
+                        }
+                        break;
+                    case MIMETYPE_HANGOUTS:
+                        // If a secondDataItem is available, use it to build an entry with
+                        // alternate actions
+                        if (secondDataItem != null) {
+                            icon = res.getDrawable(R.drawable.ic_hangout_24dp);
+                            alternateIcon = res.getDrawable(R.drawable.ic_hangout_video_24dp);
+                            final GPlusOrHangoutsDataItemModel itemModel =
+                                    new GPlusOrHangoutsDataItemModel(intent, alternateIntent,
+                                            dataItem, secondDataItem, alternateContentDescription,
+                                            header, text, context);
+
+                            populateGPlusOrHangoutsDataItemModel(itemModel);
+                            intent = itemModel.intent;
+                            alternateIntent = itemModel.alternateIntent;
+                            alternateContentDescription = itemModel.alternateContentDescription;
+                            header = itemModel.header;
+                            text = itemModel.text;
+                        } else {
+                            if (HANGOUTS_DATA_5_VIDEO.equals(intent.getDataString())) {
+                                icon = res.getDrawable(R.drawable.ic_hangout_video_24dp);
+                            } else {
+                                icon = res.getDrawable(R.drawable.ic_hangout_24dp);
+                            }
+                        }
+                        break;
+                    default:
+                        entryContextMenuInfo = new EntryContextMenuInfo(header, mimetype,
+                                dataItem.getMimeType(), dataItem.getId(),
+                                dataItem.isSuperPrimary());
+                        icon = ResolveCache.getInstance(context).getIcon(
+                                dataItem.getMimeType(), intent);
+                        // Call mutate to create a new Drawable.ConstantState for color filtering
+                        if (icon != null) {
+                            icon.mutate();
+                        }
+                        shouldApplyColor = false;
+                }
+            }
+        }
+
+        if (intent != null) {
+            // Do not set the intent is there are no resolves
+            if (!PhoneCapabilityTester.isIntentRegistered(context, intent)) {
+                intent = null;
+            }
+        }
+
+        if (alternateIntent != null) {
+            // Do not set the alternate intent is there are no resolves
+            if (!PhoneCapabilityTester.isIntentRegistered(context, alternateIntent)) {
+                alternateIntent = null;
+            } else if (TextUtils.isEmpty(alternateContentDescription)) {
+                // Attempt to use package manager to find a suitable content description if needed
+                alternateContentDescription.append(getIntentResolveLabel(alternateIntent, context));
+            }
+        }
+
+        // If the Entry has no visual elements, return null
+        if (icon == null && TextUtils.isEmpty(header) && TextUtils.isEmpty(subHeader) &&
+                subHeaderIcon == null && TextUtils.isEmpty(text) && textIcon == null) {
+            Log.d(TAG, "[dataItemToEntry] has no visual elements");
+            return null;
+        }
+
+        // Ignore dataIds from the Me profile.
+        final int dataId = dataItem.getId() > Integer.MAX_VALUE ?
+                -1 : (int) dataItem.getId();
+        Log.d(TAG, "[dataItemToEntry] end ");
+        return new Entry(dataId, icon, header, subHeader, subHeaderIcon, text, textIcon,
+                phoneContentDescription == null
+                        ? new SpannableString(primaryContentDescription.toString())
+                        : phoneContentDescription,
+                intent, alternateIcon, alternateIntent,
+                smsContentDescription == null
+                        ? new SpannableString(alternateContentDescription.toString())
+                        : smsContentDescription,
+                shouldApplyColor, isEditable,
+                entryContextMenuInfo, thirdIcon, thirdIntent, thirdContentDescription, thirdAction,
+                thirdExtras, iconResourceId);
+
+        /* M: add sim icon & sim name @{
+        return new Entry(dataId, icon, header, subHeader, subHeaderIcon, text, textIcon, null, null,
+                new SpannableString(primaryContentDescription.toString()),
+                intent, alternateIcon, alternateIntent,
+                smsContentDescription == null
+                        ? new SpannableString(alternateContentDescription.toString())
+                        : smsContentDescription,
+                shouldApplyColor, isEditable,
+                entryContextMenuInfo, thirdIcon, thirdIntent, thirdContentDescription, thirdAction,
+                thirdExtras, iconResourceId);
+         @} */
+    }
+
+    private List<Entry> dataItemsToEntries(List<DataItem> dataItems,
+            MutableString aboutCardTitleOut) {
+        Log.d(TAG, "[dataItemsToEntries]");
+        // Hangouts and G+ use two data items to create one entry.
+        if (dataItems.get(0).getMimeType().equals(MIMETYPE_GPLUS_PROFILE) ||
+                dataItems.get(0).getMimeType().equals(MIMETYPE_HANGOUTS)) {
+            return gPlusOrHangoutsDataItemsToEntries(dataItems);
+        } else {
+            final List<Entry> entries = new ArrayList<>();
+            for (DataItem dataItem : dataItems) {
+                final Entry entry = dataItemToEntry(dataItem, /* secondDataItem = */ null,
+                        this, mContactData, aboutCardTitleOut);
+                if (entry != null) {
+                    entries.add(entry);
+                }
+            }
+            return entries;
+        }
+    }
+
+    /**
+     * G+ and Hangout entries are unique in that a single ExpandingEntryCardView.Entry consists
+     * of two data items. This method attempts to build each entry using the two data items if
+     * they are available. If there are more or less than two data items, a fall back is used
+     * and each data item gets its own entry.
+     */
+    private List<Entry> gPlusOrHangoutsDataItemsToEntries(List<DataItem> dataItems) {
+        Log.d(TAG, "[gPlusOrHangoutsDataItemsToEntries] start");
+        final List<Entry> entries = new ArrayList<>();
+        final Map<Long, List<DataItem>> buckets = new HashMap<>();
+        // Put the data items into buckets based on the raw contact id
+        for (DataItem dataItem : dataItems) {
+            List<DataItem> bucket = buckets.get(dataItem.getRawContactId());
+            if (bucket == null) {
+                bucket = new ArrayList<>();
+                buckets.put(dataItem.getRawContactId(), bucket);
+            }
+            bucket.add(dataItem);
+        }
+
+        // Use the buckets to build entries. If a bucket contains two data items, build the special
+        // entry, otherwise fall back to the normal entry.
+        for (List<DataItem> bucket : buckets.values()) {
+            if (bucket.size() == 2) {
+                // Use the pair to build an entry
+                final Entry entry = dataItemToEntry(bucket.get(0),
+                        /* secondDataItem = */ bucket.get(1), this, mContactData,
+                        /* aboutCardName = */ null);
+                if (entry != null) {
+                    entries.add(entry);
+                }
+            } else {
+                for (DataItem dataItem : bucket) {
+                    final Entry entry = dataItemToEntry(dataItem, /* secondDataItem = */ null,
+                            this, mContactData, /* aboutCardName = */ null);
+                    if (entry != null) {
+                        entries.add(entry);
+                    }
+                }
+            }
+        }
+        Log.d(TAG, "[gPlusOrHangoutsDataItemsToEntries] end");
+        return entries;
+    }
+
+    /**
+     * Used for statically passing around G+ or Hangouts data items and entry fields to
+     * populateGPlusOrHangoutsDataItemModel.
+     */
+    private static final class GPlusOrHangoutsDataItemModel {
+        public Intent intent;
+        public Intent alternateIntent;
+        public DataItem dataItem;
+        public DataItem secondDataItem;
+        public StringBuilder alternateContentDescription;
+        public String header;
+        public String text;
+        public Context context;
+
+        public GPlusOrHangoutsDataItemModel(Intent intent, Intent alternateIntent,
+                DataItem dataItem,
+                DataItem secondDataItem, StringBuilder alternateContentDescription, String header,
+                String text, Context context) {
+            this.intent = intent;
+            this.alternateIntent = alternateIntent;
+            this.dataItem = dataItem;
+            this.secondDataItem = secondDataItem;
+            this.alternateContentDescription = alternateContentDescription;
+            this.header = header;
+            this.text = text;
+            this.context = context;
+        }
+    }
+
+    private static void populateGPlusOrHangoutsDataItemModel(
+            GPlusOrHangoutsDataItemModel dataModel) {
+        final Intent secondIntent = new Intent(Intent.ACTION_VIEW);
+        secondIntent.setDataAndType(ContentUris.withAppendedId(Data.CONTENT_URI,
+                dataModel.secondDataItem.getId()), dataModel.secondDataItem.getMimeType());
+        // There is no guarantee the order the data items come in. Second
+        // data item does not necessarily mean it's the alternate.
+        // Hangouts video and Add to circles should be alternate. Swap if needed
+        if (HANGOUTS_DATA_5_VIDEO.equals(
+                dataModel.dataItem.getContentValues().getAsString(Data.DATA5)) ||
+                GPLUS_PROFILE_DATA_5_ADD_TO_CIRCLE.equals(
+                        dataModel.dataItem.getContentValues().getAsString(Data.DATA5))) {
+            dataModel.alternateIntent = dataModel.intent;
+            dataModel.alternateContentDescription = new StringBuilder(dataModel.header);
+
+            dataModel.intent = secondIntent;
+            dataModel.header = dataModel.secondDataItem.buildDataStringForDisplay(dataModel.context,
+                    dataModel.secondDataItem.getDataKind());
+            dataModel.text = dataModel.secondDataItem.getDataKind().typeColumn;
+        } else if (HANGOUTS_DATA_5_MESSAGE.equals(
+                dataModel.dataItem.getContentValues().getAsString(Data.DATA5)) ||
+                GPLUS_PROFILE_DATA_5_VIEW_PROFILE.equals(
+                        dataModel.dataItem.getContentValues().getAsString(Data.DATA5))) {
+            dataModel.alternateIntent = secondIntent;
+            dataModel.alternateContentDescription = new StringBuilder(
+                    dataModel.secondDataItem.buildDataStringForDisplay(dataModel.context,
+                            dataModel.secondDataItem.getDataKind()));
+        }
+    }
+
+    private static String getIntentResolveLabel(Intent intent, Context context) {
+        final List<ResolveInfo> matches = context.getPackageManager().queryIntentActivities(intent,
+                PackageManager.MATCH_DEFAULT_ONLY);
+
+        // Pick first match, otherwise best found
+        ResolveInfo bestResolve = null;
+        final int size = matches.size();
+        if (size == 1) {
+            bestResolve = matches.get(0);
+        } else if (size > 1) {
+            bestResolve = ResolveCache.getInstance(context).getBestResolve(intent, matches);
+        }
+
+        if (bestResolve == null) {
+            return null;
+        }
+
+        return String.valueOf(bestResolve.loadLabel(context.getPackageManager()));
+    }
+
+    /**
+     * Asynchronously extract the most vibrant color from the PhotoView. Once extracted,
+     * apply this tint to {@link MultiShrinkScroller}. This operation takes about 20-30ms
+     * on a Nexus 5.
+     */
+    private void extractAndApplyTintFromPhotoViewAsynchronously() {
+        if (mScroller == null) {
+            Log.d(TAG, "[extractAndApplyTintFromPhotoViewAsynchronously] mScroller=null");
+            return;
+        }
+        final Drawable imageViewDrawable = mPhotoView.getDrawable();
+        new AsyncTask<Void, Void, MaterialPalette>() {
+            @Override
+            protected MaterialPalette doInBackground(Void... params) {
+                Log.d(TAG, "[extractAndApplyTintFromPhotoViewAsynchronously] doInBackground start");
+                if (mContactData == null) {
+                    Log.w(TAG, "[doInBackground] mContactData is null...");
+                }
+
+                if (imageViewDrawable instanceof BitmapDrawable && mContactData != null
+                        && mContactData.getThumbnailPhotoBinaryData() != null
+                        && mContactData.getThumbnailPhotoBinaryData().length > 0) {
+                    // Perform the color analysis on the thumbnail instead of the full sized
+                    // image, so that our results will be as similar as possible to the Bugle
+                    // app.
+                    final Bitmap bitmap = BitmapFactory.decodeByteArray(
+                            mContactData.getThumbnailPhotoBinaryData(), 0,
+                            mContactData.getThumbnailPhotoBinaryData().length);
+                    try {
+                        final int primaryColor = colorFromBitmap(bitmap);
+                        if (primaryColor != 0) {
+                            return mMaterialColorMapUtils.calculatePrimaryAndSecondaryColor(
+                                    primaryColor);
+                        }
+                    } finally {
+                        bitmap.recycle();
+                    }
+                }
+                if (imageViewDrawable instanceof LetterTileDrawable) {
+                    final int primaryColor = ((LetterTileDrawable) imageViewDrawable).getColor();
+                    return mMaterialColorMapUtils.calculatePrimaryAndSecondaryColor(primaryColor);
+                }
+                Log.d(TAG, "[extractAndApplyTintFromPhotoViewAsynchronously] doInBackground end");
+                return MaterialColorMapUtils.getDefaultPrimaryAndSecondaryColors(getResources());
+            }
+
+            @Override
+            protected void onPostExecute(MaterialPalette palette) {
+                super.onPostExecute(palette);
+                Log.d(TAG, "extractAndApplyTintFromPhotoViewAsynchronously [onPostExecute]");
+                //M:OP01 RCS will get photo from rcs server, and refresh thumbnail Photo.@{
+                mHasComputedThemeColor = ExtensionManager.getInstance().getRcsExtension().
+                        needUpdateContactPhoto(imageViewDrawable instanceof LetterTileDrawable,
+                        mHasComputedThemeColor);
+                /** @} */
+                if (mHasComputedThemeColor) {
+                    // If we had previously computed a theme color from the contact photo,
+                    // then do not update the theme color. Changing the theme color several
+                    // seconds after QC has started, as a result of an updated/upgraded photo,
+                    // is a jarring experience. On the other hand, changing the theme color after
+                    // a rotation or onNewIntent() is perfectly fine.
+                    return;
+                }
+                // Check that the Photo has not changed. If it has changed, the new tint
+                // color needs to be extracted
+                if (imageViewDrawable == mPhotoView.getDrawable()) {
+                    Log.d(TAG, "[extractAndApplyTintFromPhotoViewAsynchronously] onPostExecute"
+                            + "to update color and photo in suggestion card");
+                    mHasComputedThemeColor = true;
+                    setThemeColor(palette);
+                    // update color and photo in suggestion card
+                    onAggregationSuggestionChange();
+                }
+            }
+        }.execute();
+        Log.d(TAG, "[extractAndApplyTintFromPhotoViewAsynchronously] execute()");
+    }
+
+    private void setThemeColor(MaterialPalette palette) {
+        // If the color is invalid, use the predefined default
+        mColorFilterColor = palette.mPrimaryColor;
+        mScroller.setHeaderTintColor(mColorFilterColor);
+        mStatusBarColor = palette.mSecondaryColor;
+        updateStatusBarColor();
+
+        mColorFilter =
+                new PorterDuffColorFilter(mColorFilterColor, PorterDuff.Mode.SRC_ATOP);
+        mContactCard.setColorAndFilter(mColorFilterColor, mColorFilter);
+        mRecentCard.setColorAndFilter(mColorFilterColor, mColorFilter);
+        mAboutCard.setColorAndFilter(mColorFilterColor, mColorFilter);
+        mSuggestionsCancelButton.setTextColor(mColorFilterColor);
+
+        /// M: [for RCS-e]
+        if (mJoynCard != null) {
+            mJoynCard.setColorAndFilter(mColorFilterColor, mColorFilter);
+        }
+    }
+
+    private void updateStatusBarColor() {
+        if (mScroller == null || !CompatUtils.isLollipopCompatible()) {
+            return;
+        }
+        final int desiredStatusBarColor;
+        // Only use a custom status bar color if QuickContacts touches the top of the viewport.
+        if (mScroller.getScrollNeededToBeFullScreen() <= 0) {
+            desiredStatusBarColor = mStatusBarColor;
+        } else {
+            desiredStatusBarColor = Color.TRANSPARENT;
+        }
+        // Animate to the new color.
+        final ObjectAnimator animation = ObjectAnimator.ofInt(getWindow(), "statusBarColor",
+                getWindow().getStatusBarColor(), desiredStatusBarColor);
+        animation.setDuration(ANIMATION_STATUS_BAR_COLOR_CHANGE_DURATION);
+        animation.setEvaluator(new ArgbEvaluator());
+        animation.start();
+    }
+
+    private int colorFromBitmap(Bitmap bitmap) {
+        // Author of Palette recommends using 24 colors when analyzing profile photos.
+        final int NUMBER_OF_PALETTE_COLORS = 24;
+        final Palette palette = Palette.generate(bitmap, NUMBER_OF_PALETTE_COLORS);
+        if (palette != null && palette.getVibrantSwatch() != null) {
+            return palette.getVibrantSwatch().getRgb();
+        }
+        return 0;
+    }
+
+    private List<Entry> contactInteractionsToEntries(List<ContactInteraction> interactions) {
+        final List<Entry> entries = new ArrayList<>();
+        for (ContactInteraction interaction : interactions) {
+            if (interaction == null) {
+                continue;
+            }
+            entries.add(new Entry(/* id = */ -1,
+                    interaction.getIcon(this),
+                    interaction.getViewHeader(this),
+                    interaction.getViewBody(this),
+                    interaction.getBodyIcon(this),
+                    interaction.getViewFooter(this),
+                    interaction.getFooterIcon(this),
+                    /* M: add sim icon @ { */
+                    interaction.getSimIcon(this),
+                    interaction.getSimName(this),
+                    /* @ } */
+                    interaction.getContentDescription(this),
+                    interaction.getIntent(),
+                    /* alternateIcon = */ null,
+                    /* alternateIntent = */ null,
+                    /* alternateContentDescription = */ null,
+                    /* shouldApplyColor = */ true,
+                    /* isEditable = */ false,
+                    /* EntryContextMenuInfo = */ null,
+                    /* thirdIcon = */ null,
+                    /* thirdIntent = */ null,
+                    /* thirdContentDescription = */ null,
+                    /* thirdAction = */ Entry.ACTION_NONE,
+                    /* thirdActionExtras = */ null,
+                    interaction.getIconResourceId()));
+        }
+        return entries;
+    }
+
+    private final LoaderCallbacks<Contact> mLoaderContactCallbacks =
+            new LoaderCallbacks<Contact>() {
+        @Override
+        public void onLoaderReset(Loader<Contact> loader) {
+            Log.d(TAG, "[onLoaderReset], mContactData been set null");
+            mContactData = null;
+        }
+
+        @Override
+        public void onLoadFinished(Loader<Contact> loader, Contact data) {
+            Trace.beginSection("onLoadFinished()");
+            try {
+
+                if (isFinishing()) {
+                    return;
+                }
+                if (data.isError()) {
+                    // This means either the contact is invalid or we had an
+                    // internal error such as an acore crash.
+                    Log.i(TAG, "Failed to load contact: " + ((ContactLoader)loader).getLookupUri());
+                    Toast.makeText(QuickContactActivity.this, R.string.invalidContactMessage,
+                            Toast.LENGTH_LONG).show();
+                    finish();
+                    return;
+                }
+                if (data.isNotFound()) {
+                    Log.i(TAG, "No contact found: " + ((ContactLoader)loader).getLookupUri());
+                    if (!ExtensionManager.getInstance().getContactsPickerExtension()
+                            .openAddProfileScreen(mLookupUri, QuickContactActivity.this)) {
+                        Toast.makeText(QuickContactActivity.this, R.string.invalidContactMessage,
+                                Toast.LENGTH_LONG).show();
+                    }
+                    finish();
+                    return;
+                }
+                Log.d(TAG, "onLoadFinished " + " | data.getContactId() : "
+                        + data.getContactId() + " | data.getUri() : " + data.getUri());
+
+                bindContactData(data);
+
+                ///M:[for rcs] update Rcs contact on the top left@{
+                ExtensionManager.getInstance().getRcsExtension()
+                        .getQuickContactRcsScroller()
+                        .updateRcsContact(mContactLoader.getLookupUri(), true);
+                Log.d(TAG, "onLoadFinished end");
+                ///@}
+            } finally {
+                Trace.endSection();
+            }
+        }
+
+        @Override
+        public Loader<Contact> onCreateLoader(int id, Bundle args) {
+            if (mLookupUri == null) {
+                Log.wtf(TAG, "Lookup uri wasn't initialized. Loader was started too early");
+            }
+            // Load all contact data. We need loadGroupMetaData=true to determine whether the
+            // contact is invisible. If it is, we need to display an "Add to Contacts" MenuItem.
+            return new ContactLoader(getApplicationContext(), mLookupUri,
+                    true /*loadGroupMetaData*/, false /*loadInvitableAccountTypes*/,
+                    true /*postViewNotification*/, true /*computeFormattedPhoneNumber*/);
+        }
+    };
+
+    @Override
+    public void onBackPressed() {
+        if (mScroller != null) {
+            if (!mIsExitAnimationInProgress) {
+                mScroller.scrollOffBottom();
+            }
+        } else {
+            super.onBackPressed();
+        }
+    }
+
+    @Override
+    public void finish() {
+        super.finish();
+
+        // override transitions to skip the standard window animations
+        overridePendingTransition(0, 0);
+    }
+
+    private final LoaderCallbacks<List<ContactInteraction>> mLoaderInteractionsCallbacks =
+            new LoaderCallbacks<List<ContactInteraction>>() {
+
+        @Override
+        public Loader<List<ContactInteraction>> onCreateLoader(int id, Bundle args) {
+            Loader<List<ContactInteraction>> loader = null;
+            switch (id) {
+                case LOADER_SMS_ID:
+                    loader = new SmsInteractionsLoader(
+                            QuickContactActivity.this,
+                            args.getStringArray(KEY_LOADER_EXTRA_PHONES),
+                            MAX_SMS_RETRIEVE);
+                    break;
+                case LOADER_CALENDAR_ID:
+                    final String[] emailsArray = args.getStringArray(KEY_LOADER_EXTRA_EMAILS);
+                    List<String> emailsList = null;
+                    if (emailsArray != null) {
+                        emailsList = Arrays.asList(args.getStringArray(KEY_LOADER_EXTRA_EMAILS));
+                    }
+                    loader = new CalendarInteractionsLoader(
+                            QuickContactActivity.this,
+                            emailsList,
+                            MAX_FUTURE_CALENDAR_RETRIEVE,
+                            MAX_PAST_CALENDAR_RETRIEVE,
+                            FUTURE_MILLISECOND_TO_SEARCH_LOCAL_CALENDAR,
+                            PAST_MILLISECOND_TO_SEARCH_LOCAL_CALENDAR);
+                    break;
+                case LOADER_CALL_LOG_ID:
+                    loader = new CallLogInteractionsLoader(
+                            QuickContactActivity.this,
+                            args.getStringArray(KEY_LOADER_EXTRA_PHONES),
+                            MAX_CALL_LOG_RETRIEVE);
+            }
+            return loader;
+        }
+
+        @Override
+        public void onLoadFinished(Loader<List<ContactInteraction>> loader,
+                List<ContactInteraction> data) {
+            mRecentLoaderResults.put(loader.getId(), data);
+
+            if (isAllRecentDataLoaded()) {
+                bindRecentData();
+            }
+        }
+
+        @Override
+        public void onLoaderReset(Loader<List<ContactInteraction>> loader) {
+            mRecentLoaderResults.remove(loader.getId());
+        }
+    };
+
+    private boolean isAllRecentDataLoaded() {
+        return mRecentLoaderResults.size() == mRecentLoaderIds.length;
+    }
+
+    private void bindRecentData() {
+        final List<ContactInteraction> allInteractions = new ArrayList<>();
+        final List<List<Entry>> interactionsWrapper = new ArrayList<>();
+
+        // Serialize mRecentLoaderResults into a single list. This should be done on the main
+        // thread to avoid races against mRecentLoaderResults edits.
+        for (List<ContactInteraction> loaderInteractions : mRecentLoaderResults.values()) {
+            allInteractions.addAll(loaderInteractions);
+        }
+
+        mRecentDataTask = new AsyncTask<Void, Void, Void>() {
+            @Override
+            protected Void doInBackground(Void... params) {
+                Trace.beginSection("sort recent loader results");
+
+                // Sort the interactions by most recent
+                Collections.sort(allInteractions, new Comparator<ContactInteraction>() {
+                    @Override
+                    public int compare(ContactInteraction a, ContactInteraction b) {
+                        if (a == null && b == null) {
+                            return 0;
+                        }
+                        if (a == null) {
+                            return 1;
+                        }
+                        if (b == null) {
+                            return -1;
+                        }
+                        if (a.getInteractionDate() > b.getInteractionDate()) {
+                            return -1;
+                        }
+                        if (a.getInteractionDate() == b.getInteractionDate()) {
+                            return 0;
+                        }
+                        return 1;
+                    }
+                });
+
+                Trace.endSection();
+                Trace.beginSection("contactInteractionsToEntries");
+
+                // Wrap each interaction in its own list so that an icon is displayed for each entry
+                for (Entry contactInteraction : contactInteractionsToEntries(allInteractions)) {
+                    List<Entry> entryListWrapper = new ArrayList<>(1);
+                    entryListWrapper.add(contactInteraction);
+                    interactionsWrapper.add(entryListWrapper);
+                }
+
+                Trace.endSection();
+                Log.d(TAG, "[bindRecentData] doInBackground()");
+                return null;
+            }
+
+            @Override
+            protected void onPostExecute(Void aVoid) {
+                super.onPostExecute(aVoid);
+                Trace.beginSection("initialize recents card");
+
+                if (allInteractions.size() > 0) {
+                    mRecentCard.initialize(interactionsWrapper,
+                    /* numInitialVisibleEntries = */ MIN_NUM_COLLAPSED_RECENT_ENTRIES_SHOWN,
+                    /* isExpanded = */ mRecentCard.isExpanded(), /* isAlwaysExpanded = */ false,
+                            mExpandingEntryCardViewListener, mScroller);
+                    mRecentCard.setVisibility(View.VISIBLE);
+                } else {
+                    /// M: Fix ALPS01763309
+                    mRecentCard.setVisibility(View.GONE);
+                }
+
+                Trace.endSection();
+
+                // About card is initialized along with the contact card, but since it appears after
+                // the recent card in the UI, we hold off until making it visible until the recent
+                // card is also ready to avoid stuttering.
+                if (mAboutCard.shouldShow()) {
+                    mAboutCard.setVisibility(View.VISIBLE);
+                } else {
+                    mAboutCard.setVisibility(View.GONE);
+                }
+                mRecentDataTask = null;
+                Log.d(TAG, "[bindRecentData] onPostExecute(). size()=" + allInteractions.size());
+            }
+        };
+        mRecentDataTask.execute();
+    }
+
+    @Override
+    protected void onStop() {
+        super.onStop();
+
+        if (mEntriesAndActionsTask != null) {
+            // Once the activity is stopped, we will no longer want to bind mEntriesAndActionsTask's
+            // results on the UI thread. In some circumstances Activities are killed without
+            // onStop() being called. This is not a problem, because in these circumstances
+            // the entire process will be killed.
+            mEntriesAndActionsTask.cancel(/* mayInterruptIfRunning = */ false);
+        }
+        if (mRecentDataTask != null) {
+            mRecentDataTask.cancel(/* mayInterruptIfRunning = */ false);
+        }
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        if (mAggregationSuggestionEngine != null) {
+            mAggregationSuggestionEngine.quit();
+        }
+        ///M: Video Entry @{
+        ExtensionManager.getInstance().getOp01Extension().resetVideoState();
+        ///@}
+    }
+
+    /**
+     * M: sdn contact isn't possible to edit.
+     * Returns true if it is possible to edit the current contact.
+     */
+    private boolean isContactEditable() {
+        return mContactData != null && !mContactData.isDirectoryEntry() &&
+            !mContactData.isSdnContacts();
+    }
+
+    /**
+     * Returns true if it is possible to share the current contact.
+     */
+    private boolean isContactShareable() {
+        return mContactData != null && !mContactData.isDirectoryEntry();
+    }
+
+    /// M: add isEditingUserProfile flag for user profile feature
+    private Intent getEditContactIntent() {
+        return EditorIntents.createCompactEditContactIntent(
+                mContactData.getLookupUri(),
+                mHasComputedThemeColor
+                        ? new MaterialPalette(mColorFilterColor, mStatusBarColor) : null,
+                mContactData.getPhotoId());
+    }
+
+    private void editContact() {
+        mHasIntentLaunched = true;
+        mContactLoader.cacheResult();
+        startActivityForResult(getEditContactIntent(), REQUEST_CODE_CONTACT_EDITOR_ACTIVITY);
+    }
+
+    private void deleteContact() {
+        final Uri contactUri = mContactData.getLookupUri();
+        ContactDeletionInteraction.start(this, contactUri, /* finishActivityWhenDone =*/ true);
+    }
+
+    private void toggleStar(MenuItem starredMenuItem) {
+        // Make sure there is a contact
+        if (mContactData != null) {
+            // Read the current starred value from the UI instead of using the last
+            // loaded state. This allows rapid tapping without writing the same
+            // value several times
+            final boolean isStarred = starredMenuItem.isChecked();
+
+            // To improve responsiveness, swap out the picture (and tag) in the UI already
+            ContactDisplayUtils.configureStarredMenuItem(starredMenuItem,
+                    mContactData.isDirectoryEntry(), mContactData.isUserProfile(),
+                    !isStarred);
+
+            // Now perform the real save
+            final Intent intent = ContactSaveService.createSetStarredIntent(
+                    QuickContactActivity.this, mContactData.getLookupUri(), !isStarred);
+            startService(intent);
+
+            final CharSequence accessibilityText = !isStarred
+                    ? getResources().getText(R.string.description_action_menu_add_star)
+                    : getResources().getText(R.string.description_action_menu_remove_star);
+            // Accessibility actions need to have an associated view. We can't access the MenuItem's
+            // underlying view, so put this accessibility action on the root view.
+            mScroller.announceForAccessibility(accessibilityText);
+        }
+    }
+    ///M:
+     /**
+     * Calls into the contacts provider to get a pre-authorized version of the given URI.
+     */
+    private Uri getPreAuthorizedUri(Uri uri) {
+        final Bundle uriBundle = new Bundle();
+        uriBundle.putParcelable(ContactsContract.Authorization.KEY_URI_TO_AUTHORIZE, uri);
+        final Bundle authResponse = getContentResolver().call(
+                ContactsContract.AUTHORITY_URI,
+                ContactsContract.Authorization.AUTHORIZATION_METHOD,
+                null,
+                uriBundle);
+        if (authResponse != null) {
+            return (Uri) authResponse.getParcelable(
+                    ContactsContract.Authorization.KEY_AUTHORIZED_URI);
+        } else {
+            return uri;
+        }
+    }
+
+    private void shareContact() {
+        Log.d(TAG, "[shareContact]");
+        final String lookupKey = mContactData.getLookupKey();
+        Uri shareUri = Uri.withAppendedPath(Contacts.CONTENT_VCARD_URI, lookupKey);
+        final Intent intent = new Intent(Intent.ACTION_SEND);
+        intent.setType(Contacts.CONTENT_VCARD_TYPE);
+        if (mContactData.isUserProfile()) {
+            // User is sharing the profile.  We don't want to force the receiver to have
+            // the highly-privileged READ_PROFILE permission, so we need to request a
+            // pre-authorized URI from the provider.
+            shareUri = getPreAuthorizedUri(shareUri);
+            /** M for ALPS01752410 @{*/
+            intent.putExtra("userProfile", "true");
+        } else {
+            intent.putExtra("contactId", String.valueOf(mContactData.getContactId()));
+            /** @} */
+        }
+        intent.putExtra(Intent.EXTRA_STREAM, shareUri);
+        /// M: Bug fix ALPS01749969, google default bug, need add the extra ARG_CALLING_ACTIVITY.
+        intent.putExtra(VCardCommonArguments.ARG_CALLING_ACTIVITY,
+                PeopleActivity.class.getName());
+
+        // Launch chooser to share contact via
+        final CharSequence chooseTitle = getText(R.string.share_via);
+        final Intent chooseIntent = Intent.createChooser(intent, chooseTitle);
+
+        try {
+            mHasIntentLaunched = true;
+            ImplicitIntentsUtil.startActivityOutsideApp(this, chooseIntent);
+        } catch (final ActivityNotFoundException ex) {
+            Toast.makeText(this, R.string.share_error, Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    /**
+     * Creates a launcher shortcut with the current contact.
+     */
+    private void createLauncherShortcutWithContact() {
+        final ShortcutIntentBuilder builder = new ShortcutIntentBuilder(this,
+                new OnShortcutIntentCreatedListener() {
+
+                    @Override
+                    public void onShortcutIntentCreated(Uri uri, Intent shortcutIntent) {
+                        // Broadcast the shortcutIntent to the launcher to create a
+                        // shortcut to this contact
+                        shortcutIntent.setAction(ACTION_INSTALL_SHORTCUT);
+                        QuickContactActivity.this.sendBroadcast(shortcutIntent);
+
+                        // Send a toast to give feedback to the user that a shortcut to this
+                        // contact was added to the launcher.
+                        final String displayName = shortcutIntent
+                                .getStringExtra(Intent.EXTRA_SHORTCUT_NAME);
+                        final String toastMessage = TextUtils.isEmpty(displayName)
+                                ? getString(R.string.createContactShortcutSuccessful_NoName)
+                                : getString(R.string.createContactShortcutSuccessful, displayName);
+                        Toast.makeText(QuickContactActivity.this, toastMessage,
+                                Toast.LENGTH_SHORT).show();
+                    }
+
+                });
+        builder.createContactShortcutIntent(mContactData.getLookupUri());
+    }
+
+    private boolean isShortcutCreatable() {
+        if (mContactData == null || mContactData.isUserProfile() ||
+                mContactData.isDirectoryEntry()) {
+            return false;
+        }
+        final Intent createShortcutIntent = new Intent();
+        createShortcutIntent.setAction(ACTION_INSTALL_SHORTCUT);
+        final List<ResolveInfo> receivers = getPackageManager()
+                .queryBroadcastReceivers(createShortcutIntent, 0);
+        return receivers != null && receivers.size() > 0;
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        final MenuInflater inflater = getMenuInflater();
+        inflater.inflate(R.menu.quickcontact, menu);
+        return true;
+    }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        if (mContactData != null) {
+            final MenuItem starredMenuItem = menu.findItem(R.id.menu_star);
+            ContactDisplayUtils.configureStarredMenuItem(starredMenuItem,
+                    mContactData.isDirectoryEntry(), mContactData.isUserProfile(),
+                    mContactData.getStarred());
+
+            /// M: Disable sim contact star menu.
+            if (mContactData.getIndicate() > 0) {
+                starredMenuItem.setVisible(false);
+            }
+
+            final MenuItem editMenuItem = menu.findItem(R.id.menu_edit);
+
+            // Configure edit MenuItem
+            /// M: hide edit nenu if it is a sdn contact.
+            Log.d(TAG, "[onPrepareOptionsMenu] is sdn contact: " + mContactData.isSdnContacts());
+            if (mContactData.isSdnContacts()) {
+                editMenuItem.setVisible(false);
+            } else {
+                editMenuItem.setVisible(true);
+                editMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
+                if (DirectoryContactUtil.isDirectoryContact(mContactData) ||
+                        InvisibleContactUtil.isInvisibleAndAddable(mContactData, this)) {
+                    editMenuItem.setIcon(R.drawable.ic_person_add_tinted_24dp);
+                    editMenuItem.setTitle(R.string.menu_add_contact);
+                } else if (isContactEditable()) {
+                    editMenuItem.setIcon(R.drawable.ic_create_24dp);
+                    editMenuItem.setTitle(R.string.menu_editContact);
+                } else {
+                    editMenuItem.setVisible(false);
+                }
+            }
+
+            final MenuItem deleteMenuItem = menu.findItem(R.id.menu_delete);
+            deleteMenuItem.setVisible(isContactEditable() && !mContactData.isUserProfile());
+
+            final MenuItem shareMenuItem = menu.findItem(R.id.menu_share);
+            shareMenuItem.setVisible(isContactShareable());
+
+            final MenuItem shortcutMenuItem = menu.findItem(R.id.menu_create_contact_shortcut);
+            /// M: hide the shortcut menu when it is sim contact.
+            if (mContactData != null && mContactData.getIndicate() >= 0) {
+                shortcutMenuItem.setVisible(false);
+                Log.d(TAG, "[[onPrepareOptionsMenu]] contact indicator: " +
+                        mContactData.getIndicate());
+            } else {
+                shortcutMenuItem.setVisible(isShortcutCreatable());
+            }
+            final MenuItem helpMenu = menu.findItem(R.id.menu_help);
+            helpMenu.setVisible(HelpUtils.isHelpAndFeedbackAvailable());
+            //M:OP01 RCS will add quick contact menu item @{
+            ExtensionManager.getInstance().getRcsExtension().
+                    addQuickContactMenuOptions(menu, mLookupUri, this);
+            /** @} */
+            Log.d(TAG, "[onPrepareOptionsMenu] return true");
+            return true;
+        }
+        Log.d(TAG, "[onPrepareOptionsMenu] return false");
+        return false;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        Log.d(TAG, "[onOptionsItemSelected] item = " + item.getTitle());
+        switch (item.getItemId()) {
+            case R.id.menu_star:
+                toggleStar(item);
+                return true;
+            case R.id.menu_edit:
+                if (DirectoryContactUtil.isDirectoryContact(mContactData)) {
+                    // This action is used to launch the contact selector, with the option of
+                    // creating a new contact. Creating a new contact is an INSERT, while selecting
+                    // an exisiting one is an edit. The fields in the edit screen will be
+                    // prepopulated with data.
+
+                    final Intent intent = new Intent(Intent.ACTION_INSERT_OR_EDIT);
+                    intent.setType(Contacts.CONTENT_ITEM_TYPE);
+
+                    ArrayList<ContentValues> values = mContactData.getContentValues();
+
+                    // Only pre-fill the name field if the provided display name is an nickname
+                    // or better (e.g. structured name, nickname)
+                    if (mContactData.getDisplayNameSource() >= DisplayNameSources.NICKNAME) {
+                        intent.putExtra(Intents.Insert.NAME, mContactData.getDisplayName());
+                    } else if (mContactData.getDisplayNameSource()
+                            == DisplayNameSources.ORGANIZATION) {
+                        // This is probably an organization. Instead of copying the organization
+                        // name into a name entry, copy it into the organization entry. This
+                        // way we will still consider the contact an organization.
+                        final ContentValues organization = new ContentValues();
+                        organization.put(Organization.COMPANY, mContactData.getDisplayName());
+                        organization.put(Data.MIMETYPE, Organization.CONTENT_ITEM_TYPE);
+                        values.add(organization);
+                    }
+
+                    // Last time used and times used are aggregated values from the usage stat
+                    // table. They need to be removed from data values so the SQL table can insert
+                    // properly
+                    for (ContentValues value : values) {
+                        value.remove(Data.LAST_TIME_USED);
+                        value.remove(Data.TIMES_USED);
+                    }
+                    intent.putExtra(Intents.Insert.DATA, values);
+
+                    // If the contact can only export to the same account, add it to the intent.
+                    // Otherwise the ContactEditorFragment will show a dialog for selecting an
+                    // account.
+                    if (mContactData.getDirectoryExportSupport() ==
+                            Directory.EXPORT_SUPPORT_SAME_ACCOUNT_ONLY) {
+                        intent.putExtra(Intents.Insert.EXTRA_ACCOUNT,
+                                new Account(mContactData.getDirectoryAccountName(),
+                                        mContactData.getDirectoryAccountType()));
+                        intent.putExtra(Intents.Insert.EXTRA_DATA_SET,
+                                mContactData.getRawContacts().get(0).getDataSet());
+                    }
+
+                    // Add this flag to disable the delete menu option on directory contact joins
+                    // with local contacts. The delete option is ambiguous when joining contacts.
+                    intent.putExtra(ContactEditorFragment.INTENT_EXTRA_DISABLE_DELETE_MENU_OPTION,
+                            true);
+
+                    QuickContactUtils.addSipExtra(intent);
+                    startActivityForResult(intent, REQUEST_CODE_CONTACT_SELECTION_ACTIVITY);
+                } else if (InvisibleContactUtil.isInvisibleAndAddable(mContactData, this)) {
+                    InvisibleContactUtil.addToDefaultGroup(mContactData, this);
+                } else if (isContactEditable()) {
+                    editContact();
+                }
+                return true;
+            case R.id.menu_delete:
+                if (isContactEditable()) {
+                deleteContact();
+                }
+                return true;
+            case R.id.menu_share:
+                if (isContactShareable()) {
+                    shareContact();
+                }
+                return true;
+            case R.id.menu_create_contact_shortcut:
+                if (isShortcutCreatable()) {
+                createLauncherShortcutWithContact();
+                }
+                return true;
+            case R.id.menu_help:
+                HelpUtils.launchHelpAndFeedbackForContactScreen(this);
+                return true;
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
+    /// M: ALPS02782438.not support to show email for sim,Ruim and Usim which not support email
+    /// field. @{
+    private boolean isSupportShowEmailData(Contact contactsData) {
+        Log.d(TAG, "[isSupportShowEmailData] data : " + contactsData);
+        if (contactsData == null) {
+            return false;
+        }
+        String accoutType = contactsData.getRawContacts().get(0).getAccountTypeString();
+        Log.d(TAG, "[isSupportShowEmailData] accoutType : " + accoutType);
+        if (AccountTypeUtils.ACCOUNT_TYPE_SIM.equals(accoutType) ||
+                AccountTypeUtils.ACCOUNT_TYPE_RUIM.equals(accoutType)) {
+            Log.i(TAG, "[isSupportShowEmailData] Ruim or sim not support email! ");
+            return false;
+        }
+        if (AccountTypeUtils.ACCOUNT_TYPE_USIM.equals(accoutType)) {
+            String accountName = contactsData.getRawContacts().get(0).getAccountName();
+            int subId = AccountTypeUtils.getSubIdBySimAccountName(getApplicationContext(),
+                    accountName);
+            int emailCount = SimCardUtils.getIccCardEmailCount(subId);
+            Log.d(TAG, "[isSupportShowEmailData] Usim type, accountName: " + accountName +
+                    ",subId: " + subId + ",emailCount: " + emailCount);
+            if (emailCount <= 0) {
+                Log.i(TAG, "[isSupportShowEmailData] Usim not support email field,remove it!!");
+                return false;
+            }
+        }
+        return true;
+    }
+    /// @}
+}

Property changes on: vendor/branch/5058I_ALRU/packages/apps/Contacts/src/com/android/contacts/quickcontact/QuickContactActivity.java
___________________________________________________________________
Added: svn:executable
## -0,0 +1 ##
+*
\ No newline at end of property
Index: vendor/branch/5058I_ALRU/packages/apps/Contacts/res/values/colors.xml
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Contacts/res/values/colors.xml	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/apps/Contacts/res/values/colors.xml	(revision 8170)
@@ -85,4 +85,7 @@
 
     <!-- Color of background of disabled link contacts button, 15% black. -->
     <color name="disabled_button_background">#26000000</color>
+	
+	<color name="call_detail_footer_text_color">#616161</color>
+	<color name="call_detail_footer_icon_tint">@color/call_detail_footer_text_color</color>
 </resources>
Index: vendor/branch/5058I_ALRU/packages/apps/Contacts/res/drawable/ic_call_detail_block.xml
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Contacts/res/drawable/ic_call_detail_block.xml	(revision 0)
+++ vendor/branch/5058I_ALRU/packages/apps/Contacts/res/drawable/ic_call_detail_block.xml	(revision 8170)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2015 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<bitmap xmlns:android="http://schemas.android.com/apk/res/android"
+    android:src="@drawable/ic_block_24dp"
+    android:tint="@color/call_detail_footer_icon_tint" />

Property changes on: vendor/branch/5058I_ALRU/packages/apps/Contacts/res/drawable/ic_call_detail_block.xml
___________________________________________________________________
Added: svn:executable
## -0,0 +1 ##
+*
\ No newline at end of property
Index: vendor/branch/5058I_ALRU/packages/apps/Contacts/res/menu/quickcontact.xml
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Contacts/res/menu/quickcontact.xml	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/apps/Contacts/res/menu/quickcontact.xml	(revision 8170)
@@ -41,4 +41,8 @@
     <item
         android:id="@+id/menu_help"
         android:title="@string/menu_help" />
+	
+	<item
+        android:id="@+id/menu_blocked_numbers"
+        android:title="@string/menu_blocked_numbers"/>
 </menu>
Index: vendor/branch/5058I_ALRU/packages/apps/Dialer/src-N/com/android/dialer/compat/BlockedNumbersSdkCompat.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Dialer/src-N/com/android/dialer/compat/BlockedNumbersSdkCompat.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/apps/Dialer/src-N/com/android/dialer/compat/BlockedNumbersSdkCompat.java	(revision 8170)
@@ -30,7 +30,9 @@
     public static final String COLUMN_ORIGINAL_NUMBER = BlockedNumbers.COLUMN_ORIGINAL_NUMBER;
 
     public static final String E164_NUMBER = BlockedNumbers.COLUMN_E164_NUMBER;
-
+	
+	public static final String BLOCK_TYPE = BlockedNumbers.COLUMN_BLOCK_TYPE;
+	
     public static boolean canCurrentUserBlockNumbers(Context context) {
         return BlockedNumberContract.canCurrentUserBlockNumbers(context);
     }
Index: vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/compat/FilteredNumberCompat.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/compat/FilteredNumberCompat.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/compat/FilteredNumberCompat.java	(revision 8170)
@@ -122,7 +122,11 @@
         return useNewFiltering() ? BlockedNumbersSdkCompat.E164_NUMBER
                 : FilteredNumberColumns.NORMALIZED_NUMBER;
     }
-
+	
+	public static String getBlockNumberTypeColumnName() {
+		return useNewFiltering() ? BlockedNumbersSdkCompat.BLOCK_TYPE : FilteredNumberColumns.BLOCK_TYPE;
+	}
+	
     /**
      * @return {@code true} if the current SDK version supports using new filtering, {@code false}
      * otherwise.
@@ -241,6 +245,7 @@
             @Nullable String e164Number, @Nullable String countryIso) {
         ContentValues contentValues = new ContentValues();
         contentValues.put(getOriginalNumberColumnName(), Preconditions.checkNotNull(number));
+		contentValues.put(getBlockNumberTypeColumnName(),"callmessage");
         /// M: new filter also suport e164 number,so pass e164 format number to provider
         // to avoid countryIso inconsistent problem. @{
         if (e164Number == null) {
Index: vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/database/FilteredNumberContract.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/database/FilteredNumberContract.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/database/FilteredNumberContract.java	(revision 8170)
@@ -111,6 +111,11 @@
          * See {@link FilteredNumberSources}
          */
         static final String SOURCE = "source";
+		/**
+         * block number type : call, message, callmessage;
+         * TYPE: TEXT
+         */
+		static final String BLOCK_TYPE = "block_type";
     }
 
     /**
Index: vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/filterednumber/BlockNumberDialogFragment.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/filterednumber/BlockNumberDialogFragment.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/filterednumber/BlockNumberDialogFragment.java	(revision 8170)
@@ -218,13 +218,14 @@
     @Override
     public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
-        if (!FilteredNumbersUtil.canBlockNumber(getActivity(), mNumber, mCountryIso)) {
+		Log.i(TAG, "onActivityCreated,mNumber:"+mNumber+",mCountryIso:"+mCountryIso);
+        /* if (!FilteredNumbersUtil.canBlockNumber(getActivity(), mNumber, mCountryIso)) {
             dismiss();
             Toast.makeText(getContext(),
                     ContactDisplayUtils.getTtsSpannedPhoneNumber(
                             getResources(), R.string.invalidNumber, mDisplayNumber),
                     Toast.LENGTH_SHORT).show();
-        }
+        } */
     }
 
     @Override
Index: vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/filterednumber/FilteredNumbersUtil.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/filterednumber/FilteredNumbersUtil.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/filterednumber/FilteredNumbersUtil.java	(revision 8170)
@@ -41,7 +41,7 @@
 import com.android.dialer.database.FilteredNumberContract.FilteredNumberColumns;
 import com.android.dialer.logging.InteractionEvent;
 import com.android.dialer.logging.Logger;
-
+import android.util.Log;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -352,6 +352,7 @@
 
     public static boolean canBlockNumber(Context context, String number, String countryIso) {
         final String normalizedNumber = PhoneNumberUtils.formatNumberToE164(number, countryIso);
+		Log.d("FilterNumberUtil","normalizedNumber="+normalizedNumber);
         return !TextUtils.isEmpty(normalizedNumber)
                 && !PhoneNumberUtils.isEmergencyNumber(normalizedNumber);
     }
Index: vendor/branch/5058I_ALRU/packages/services/Telecomm/src/com/android/server/telecom/callfiltering/BlockCheckerAdapter.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/services/Telecomm/src/com/android/server/telecom/callfiltering/BlockCheckerAdapter.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/services/Telecomm/src/com/android/server/telecom/callfiltering/BlockCheckerAdapter.java	(revision 8170)
@@ -17,13 +17,22 @@
 package com.android.server.telecom.callfiltering;
 
 import android.content.Context;
-
+import android.text.TextUtils;
 import com.android.internal.telephony.BlockChecker;
+import android.util.Log;
 
 public class BlockCheckerAdapter {
     public BlockCheckerAdapter() { }
 
     public boolean isBlocked(Context context, String number) {
-        return BlockChecker.isBlocked(context, number);
+		if (BlockChecker.isBlocked(context, number)) {
+			String type = BlockChecker.getBlockNumberType(context, number);
+			if (!TextUtils.isEmpty(type) && type.contains("call")) {
+				Log.d("BlockCheckerAdapter","type:" + type + "blcok the call!");
+				return true;
+			}
+			return false;
+		}		
+        return false;
     }
 }
Index: vendor/branch/5058I_ALRU/packages/services/Telecomm/src/com/android/server/telecom/settings/BlockNumberTaskFragment.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/services/Telecomm/src/com/android/server/telecom/settings/BlockNumberTaskFragment.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/services/Telecomm/src/com/android/server/telecom/settings/BlockNumberTaskFragment.java	(revision 8170)
@@ -54,6 +54,8 @@
                 ContentValues newValues = new ContentValues();
                 newValues.put(BlockedNumberContract.BlockedNumbers.COLUMN_ORIGINAL_NUMBER,
                         mNumber);
+				newValues.put(BlockedNumberContract.BlockedNumbers.COLUMN_BLOCK_TYPE,
+                        "callmessage");		
                 contentResolver.insert(BlockedNumberContract.BlockedNumbers.CONTENT_URI,
                         newValues);
                 return true;
Index: vendor/branch/5058I_ALRU/packages/providers/BlockedNumberProvider/src/com/android/providers/BlockedNumberBackupAgent.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/providers/BlockedNumberProvider/src/com/android/providers/BlockedNumberBackupAgent.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/providers/BlockedNumberProvider/src/com/android/providers/BlockedNumberBackupAgent.java	(revision 8170)
@@ -49,6 +49,7 @@
             BlockedNumberContract.BlockedNumbers.COLUMN_ID,
             BlockedNumberContract.BlockedNumbers.COLUMN_ORIGINAL_NUMBER,
             BlockedNumberContract.BlockedNumbers.COLUMN_E164_NUMBER,
+			BlockedNumberContract.BlockedNumbers.COLUMN_BLOCK_TYPE,
     };
     private static final String TAG = "BlockedNumberBackup";
     private static final int VERSION = 1;
@@ -134,6 +135,7 @@
         dataOutputStream.writeInt(VERSION);
         writeString(dataOutputStream, blockedNumber.originalNumber);
         writeString(dataOutputStream, blockedNumber.e164Number);
+		writeString(dataOutputStream, blockedNumber.e164Number);
         dataOutputStream.flush();
 
         output.writeEntityHeader(Integer.toString(blockedNumber.id), outputStream.size());
@@ -184,7 +186,7 @@
 
     private BackedUpBlockedNumber createBlockedNumberFromCursor(Cursor cursor) {
         return new BackedUpBlockedNumber(
-                cursor.getInt(0), cursor.getString(1), cursor.getString(2));
+                cursor.getInt(0), cursor.getString(1), cursor.getString(2), cursor.getString(3));
     }
 
     private void writeNewState(DataOutputStream dataOutputStream, BackupState state)
@@ -211,7 +213,7 @@
             DataInputStream dataInput = new DataInputStream(new ByteArrayInputStream(byteArray));
             dataInput.readInt(); // Ignore version.
             BackedUpBlockedNumber blockedNumber =
-                    new BackedUpBlockedNumber(id, readString(dataInput), readString(dataInput));
+                    new BackedUpBlockedNumber(id, readString(dataInput), readString(dataInput), readString(dataInput));
             logV("Restoring blocked number: " + blockedNumber);
             return blockedNumber;
         } catch (IOException e) {
@@ -226,6 +228,8 @@
                 blockedNumber.originalNumber);
         contentValues.put(BlockedNumberContract.BlockedNumbers.COLUMN_E164_NUMBER,
                 blockedNumber.e164Number);
+		contentValues.put(BlockedNumberContract.BlockedNumbers.COLUMN_BLOCK_TYPE,
+                blockedNumber.blockType);		
         try {
             getContentResolver().insert(
                     BlockedNumberContract.BlockedNumbers.CONTENT_URI, contentValues);
@@ -258,18 +262,20 @@
         final int id;
         final String originalNumber;
         final String e164Number;
+		final String blockType;
 
-        BackedUpBlockedNumber(int id, String originalNumber, String e164Number) {
+        BackedUpBlockedNumber(int id, String originalNumber, String e164Number, String blockType) {
             this.id = id;
             this.originalNumber = originalNumber;
             this.e164Number = e164Number;
+			this.blockType = blockType;
         }
 
         @Override
         public String toString() {
             if (isDebug()) {
-                return String.format("[%d, original number: %s, e164 number: %s]",
-                        id, originalNumber, e164Number);
+                return String.format("[%d, original number: %s, e164 number: %s, block type: %s]",
+                        id, originalNumber, e164Number, blockType);
             } else {
                 return String.format("[%d]", id);
             }
Index: vendor/branch/5058I_ALRU/packages/providers/BlockedNumberProvider/src/com/android/providers/BlockedNumberDatabaseHelper.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/providers/BlockedNumberProvider/src/com/android/providers/BlockedNumberDatabaseHelper.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/providers/BlockedNumberProvider/src/com/android/providers/BlockedNumberDatabaseHelper.java	(revision 8170)
@@ -59,16 +59,18 @@
 
         private void createTables(SQLiteDatabase db) {
             db.execSQL("CREATE TABLE " + Tables.BLOCKED_NUMBERS + " (" +
-                    BlockedNumbers.COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +
+                    BlockedNumbers.COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +					
                     BlockedNumbers.COLUMN_ORIGINAL_NUMBER + " TEXT NOT NULL UNIQUE," +
-                    BlockedNumbers.COLUMN_E164_NUMBER + " TEXT" +
+                    BlockedNumbers.COLUMN_E164_NUMBER + " TEXT," +
+					BlockedNumbers.COLUMN_BLOCK_TYPE + " TEXT " +
                     ")");
 
             db.execSQL("CREATE INDEX blocked_number_idx_original ON " + Tables.BLOCKED_NUMBERS +
                     " (" + BlockedNumbers.COLUMN_ORIGINAL_NUMBER + ");");
-            db.execSQL("CREATE INDEX blocked_number_idx_e164 ON " + Tables.BLOCKED_NUMBERS + " (" +
-                    BlockedNumbers.COLUMN_E164_NUMBER +
-                    ");");
+            db.execSQL("CREATE INDEX blocked_number_idx_e164 ON " + Tables.BLOCKED_NUMBERS + 
+					" (" + BlockedNumbers.COLUMN_E164_NUMBER +");");
+			db.execSQL("CREATE INDEX blocked_number_idx_block_type ON "+ Tables.BLOCKED_NUMBERS +
+					" (" + BlockedNumbers.COLUMN_BLOCK_TYPE + ");");					
         }
     }
 
Index: vendor/branch/5058I_ALRU/packages/providers/BlockedNumberProvider/src/com/android/providers/BlockedNumberProvider.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/providers/BlockedNumberProvider/src/com/android/providers/BlockedNumberProvider.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/packages/providers/BlockedNumberProvider/src/com/android/providers/BlockedNumberProvider.java	(revision 8170)
@@ -61,7 +61,7 @@
 public class BlockedNumberProvider extends ContentProvider {
     static final String TAG = "BlockedNumbers";
 
-    private static final boolean DEBUG = false; // DO NOT SUBMIT WITH TRUE.
+    private static final boolean DEBUG = true; // DO NOT SUBMIT WITH TRUE.
 
     private static final int BLOCKED_LIST = 1000;
     private static final int BLOCKED_ID = 1001;
@@ -87,6 +87,7 @@
             .add(BlockedNumberContract.BlockedNumbers.COLUMN_ID)
             .add(BlockedNumberContract.BlockedNumbers.COLUMN_ORIGINAL_NUMBER)
             .add(BlockedNumberContract.BlockedNumbers.COLUMN_E164_NUMBER)
+			.add(BlockedNumberContract.BlockedNumbers.COLUMN_BLOCK_TYPE)
             .build();
 
     private static final String ID_SELECTION =
@@ -97,6 +98,9 @@
 
     private static final String E164_NUMBER_SELECTION =
             BlockedNumberContract.BlockedNumbers.COLUMN_E164_NUMBER + "=?";
+			
+	private static final String BLOCK_TYPE_NUMBER_SELECTION =
+            BlockedNumberContract.BlockedNumbers.COLUMN_BLOCK_TYPE + "=?";		
 
     @VisibleForTesting
     protected BlockedNumberDatabaseHelper mDbHelper;
@@ -152,12 +156,15 @@
             throw new IllegalArgumentException("Missing a required column " +
                     BlockedNumberContract.BlockedNumbers.COLUMN_ORIGINAL_NUMBER);
         }
-
+		
+		final String blockType = cv.getAsString(
+                BlockedNumberContract.BlockedNumbers.COLUMN_BLOCK_TYPE);
+		
         // Fill in with autogenerated columns.
         final String e164Number = Utils.getE164Number(getContext(), phoneNumber,
                 cv.getAsString(BlockedNumberContract.BlockedNumbers.COLUMN_E164_NUMBER));
         cv.put(BlockedNumberContract.BlockedNumbers.COLUMN_E164_NUMBER, e164Number);
-
+		cv.put(BlockedNumberContract.BlockedNumbers.COLUMN_BLOCK_TYPE, blockType);
         if (DEBUG) {
             Log.d(TAG, String.format("inserted blocked number: %s", cv));
         }
@@ -342,6 +349,11 @@
                 res.putBoolean(
                         BlockedNumberContract.RES_NUMBER_IS_BLOCKED, shouldSystemBlockNumber(arg));
                 break;
+			case SystemContract.METHOD_GET_BLOCK_NUMBER_TYPE:
+			    enforceSystemReadPermissionAndPrimaryUser();
+				res.putString(
+					SystemContract.RES_BLOCK_TYPE, getBlockNumberType(arg));
+				break;
             default:
                 enforceReadPermissionAndPrimaryUser();
 
@@ -454,6 +466,36 @@
         return isBlocked(phoneNumber);
     }
 
+	private String getBlockNumberType(String phoneNumber) {
+		if (TextUtils.isEmpty(phoneNumber)) {
+            return null;
+        }
+		final String inE164 = Utils.getE164Number(getContext(), phoneNumber, null); // may be empty.
+		
+		final Cursor c = mDbHelper.getReadableDatabase().rawQuery(
+                "SELECT " +
+                BlockedNumberContract.BlockedNumbers.COLUMN_BLOCK_TYPE +
+                " FROM " + BlockedNumberDatabaseHelper.Tables.BLOCKED_NUMBERS +
+                " WHERE " + BlockedNumberContract.BlockedNumbers.COLUMN_ORIGINAL_NUMBER + "=?1" +
+                " OR (?2 != '' AND " +
+                        BlockedNumberContract.BlockedNumbers.COLUMN_E164_NUMBER + "=?2)",
+                new String[] {phoneNumber, inE164}
+                );
+		try {
+            while (c.moveToNext()) {
+                if (DEBUG) {
+                    final String blockType = c.getString(0);
+
+                    Log.d(TAG, String.format("match found: blockType=%s", blockType));
+					return blockType;
+                }               
+            }
+        } finally {
+            c.close();
+        }		
+		return null;
+	}
+	
     private void writeBlockSuppressionExpiryTimePref(long expiryTimeMillis) {
         SharedPreferences pref = getContext().getSharedPreferences(PREF_FILE, Context.MODE_PRIVATE);
         SharedPreferences.Editor editor = pref.edit();
Index: vendor/branch/5058I_ALRU/frameworks/opt/telephony/src/java/com/android/internal/telephony/BlockChecker.java
===================================================================
--- vendor/branch/5058I_ALRU/frameworks/opt/telephony/src/java/com/android/internal/telephony/BlockChecker.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/frameworks/opt/telephony/src/java/com/android/internal/telephony/BlockChecker.java	(revision 8170)
@@ -27,6 +27,7 @@
                 Rlog.d(TAG, phoneNumber + " is blocked.");
                 isBlocked = true;
             }
+			
         } catch (Exception e) {
             Rlog.e(TAG, "Exception checking for blocked number: " + e);
         }
@@ -37,4 +38,16 @@
         }
         return isBlocked;
     }
+	
+	public static String getBlockNumberType(Context context, String phoneNumber) {
+		String type = null;
+		try {
+			type = BlockedNumberContract.SystemContract.getBlockNumberType(context, phoneNumber);
+			Rlog.d(TAG, "blcok type" + type);
+		} catch (Exception e) {
+			Rlog.e(TAG, "Exception checking for get block type: " + e);
+		}
+		return type;		
+	}
+	
 }
Index: vendor/branch/5058I_ALRU/frameworks/opt/telephony/src/java/com/android/internal/telephony/InboundSmsHandler.java
===================================================================
--- vendor/branch/5058I_ALRU/frameworks/opt/telephony/src/java/com/android/internal/telephony/InboundSmsHandler.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/frameworks/opt/telephony/src/java/com/android/internal/telephony/InboundSmsHandler.java	(revision 8170)
@@ -1024,9 +1024,13 @@
         }
 
         if (BlockChecker.isBlocked(mContext, tracker.getAddress())) {
-            deleteFromRawTable(tracker.getDeleteWhere(), tracker.getDeleteWhereArgs(),
-                    DELETE_PERMANENTLY);
-            return false;
+			String type = BlockChecker.getBlockNumberType(mContext, tracker.getAddress());
+			if (!TextUtils.isEmpty(type) && type.contains("message")) {
+				log("BLCOK THE MESSAGE:"+type);
+				deleteFromRawTable(tracker.getDeleteWhere(), tracker.getDeleteWhereArgs(),
+				DELETE_PERMANENTLY);
+				return false;
+			}           
         }
 
         boolean filterInvoked = filterSms(
@@ -2048,10 +2052,13 @@
             if (BlockChecker.isBlocked(mContext, smsTracker.getAddress())) {
                 log("dispatchConcateSmsParts: block phone number, number = "
                         + smsTracker.getAddress());
-                mConcatenatedSmsFwkExt.deleteExistedSegments(record);
-                deleteFromRawTable(smsTracker.getDeleteWhere(), smsTracker.getDeleteWhereArgs(),
-                        DELETE_PERMANENTLY);
-                return false;
+				String type = BlockChecker.getBlockNumberType(mContext, smsTracker.getAddress());
+				if (!TextUtils.isEmpty(type) && type.contains("message")) {
+					mConcatenatedSmsFwkExt.deleteExistedSegments(record);
+					deleteFromRawTable(smsTracker.getDeleteWhere(), smsTracker.getDeleteWhereArgs(),
+							DELETE_PERMANENTLY);
+					return false;
+				}                
             }
             if (pdus != null && pdus.length > 0) {
                 int flag = mConcatenatedSmsFwkExt.getUploadFlag(record);
Index: vendor/branch/5058I_ALRU/frameworks/opt/telephony/src/java/com/android/internal/telephony/WapPushOverSms.java
===================================================================
--- vendor/branch/5058I_ALRU/frameworks/opt/telephony/src/java/com/android/internal/telephony/WapPushOverSms.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/frameworks/opt/telephony/src/java/com/android/internal/telephony/WapPushOverSms.java	(revision 8170)
@@ -41,6 +41,7 @@
 import android.os.ServiceManager;
 import android.os.UserHandle;
 import android.os.UserManager;
+import android.text.TextUtils;
 import android.provider.Telephony;
 import android.provider.Telephony.Sms.Intents;
 import android.telephony.Rlog;
@@ -274,8 +275,12 @@
                 final NotificationInd nInd = (NotificationInd) parsedPdu;
                 if (nInd.getFrom() != null
                         && BlockChecker.isBlocked(mContext, nInd.getFrom().getString())) {
-                    result.statusCode = Intents.RESULT_SMS_HANDLED;
-                    return result;
+					if (DBG) Rlog.d(TAG,"BLCOK THE MESSAGE");
+					String type = BlockChecker.getBlockNumberType(mContext, nInd.getFrom().getString());
+					if (!TextUtils.isEmpty(type) && type.contains("message")) {		
+						result.statusCode = Intents.RESULT_SMS_HANDLED;
+						return result;
+					}
                 }
             }
 
Index: vendor/branch/5058I_ALRU/frameworks/base/core/java/android/provider/BlockedNumberContract.java
===================================================================
--- vendor/branch/5058I_ALRU/frameworks/base/core/java/android/provider/BlockedNumberContract.java	(revision 8169)
+++ vendor/branch/5058I_ALRU/frameworks/base/core/java/android/provider/BlockedNumberContract.java	(revision 8170)
@@ -207,6 +207,11 @@
          * <p>TYPE: String</p>
          */
         public static final String COLUMN_E164_NUMBER = "e164_number";
+		
+		/**
+		* the type of the block number:call, message, callmessage;
+		*/
+		public static final String COLUMN_BLOCK_TYPE = "block_type";
     }
 
     /** @hide */
@@ -227,7 +232,7 @@
 
     /** @hide */
     public static final String RES_CAN_BLOCK_NUMBERS = "can_block";
-
+	
     /**
      * Returns whether a given number is in the blocked list.
      *
@@ -283,6 +288,7 @@
         return res != null && res.getBoolean(RES_CAN_BLOCK_NUMBERS, false);
     }
 
+	
     /**
      * <p>
      * The contract between the blockednumber provider and the system.
@@ -313,12 +319,16 @@
 
         public static final String METHOD_GET_BLOCK_SUPPRESSION_STATUS =
                 "get_block_suppression_status";
-
+		
         public static final String RES_IS_BLOCKING_SUPPRESSED = "blocking_suppressed";
 
         public static final String RES_BLOCKING_SUPPRESSED_UNTIL_TIMESTAMP =
                 "blocking_suppressed_until_timestamp";
-
+		
+		public static final String METHOD_GET_BLOCK_NUMBER_TYPE = "get_block_number_type";
+	
+		public static final String RES_BLOCK_TYPE = "block_type";
+		
         /**
          * Notifies the provider that emergency services were contacted by the user.
          * <p> This results in {@link #shouldSystemBlockNumber} returning {@code false} independent
@@ -351,7 +361,14 @@
                     AUTHORITY_URI, METHOD_SHOULD_SYSTEM_BLOCK_NUMBER, phoneNumber, null);
             return res != null && res.getBoolean(RES_NUMBER_IS_BLOCKED, false);
         }
-
+		
+		public static String getBlockNumberType(Context context, String phoneNumber) {
+			final Bundle res = context.getContentResolver().call(
+					AUTHORITY_URI, METHOD_GET_BLOCK_NUMBER_TYPE, phoneNumber, null);
+			String type = res.getString(RES_BLOCK_TYPE, null);		
+			return type;
+		}
+		
         /**
          * Returns the current status of block suppression.
          */
