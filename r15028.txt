Index: vendor/branch/5058Y_ALGB/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java
===================================================================
--- vendor/branch/5058Y_ALGB/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java	(revision 15027)
+++ vendor/branch/5058Y_ALGB/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java	(revision 15028)
@@ -56,6 +56,7 @@
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.provider.Settings.System;
 import android.database.ContentObserver;
+import android.database.Cursor;
 import android.net.Uri;
 import android.os.AsyncResult;
 import android.os.Bundle;
@@ -107,7 +108,7 @@
 
     // debug data
     private static final String LOG_TAG = "NetworkSettings";
-    private static final boolean DBG =
+    private static final boolean DBG = 
         SystemProperties.get("ro.build.type").equals("eng") ? true : false;
     public static final int REQUEST_CODE_EXIT_ECM = 17;
 
@@ -127,7 +128,11 @@
     private static final String BUTTON_CDMA_SYSTEM_SELECT_KEY = "cdma_system_select_key";
 
     static final int preferredNetworkMode = Phone.PREFERRED_NT_MODE;
-
+	
+	public static final String DEFAULT_SORT_ORDER = "_id ASC";
+	public static final String PREFERRED_APN_URI =
+        "content://telephony/carriers/preferapn";
+		
     //Information about logical "up" Activity
     private static final String UP_ACTIVITY_PACKAGE = "com.android.settings";
     private static final String UP_ACTIVITY_CLASS =
@@ -636,11 +641,14 @@
         // app to change this setting's backend, and re-launch this settings app
         // and the UI state would be inconsistent with actual state
 		String mNumeric = mTelephonyManager.getSimOperator();
-		log("mNumeric="+mNumeric+" def_roam_state:"+Settings.System.getInt(this.getContentResolver(),"def_roam_state_with_expection_apn",0));		
+		String operatorName = mTelephonyManager.getSimOperatorName();
+		log("mNumeric="+mNumeric+ "spn:"+ operatorName +" def_roam_state:"+Settings.System.getInt(this.getContentResolver(),"def_roam_state_with_expection_apn",0));		
 		if (Settings.System.getInt(this.getContentResolver(),"def_roam_state_with_expection_apn",0) == 0) {
 			mPhone.setDataRoamingEnabled(false);
 			log("===setDataRoamingEnabled(false)===");
-			if (!TextUtils.isEmpty(mNumeric) && ("23430".equals(mNumeric) || "23433".equals(mNumeric))) {			
+			String selectedApnSpnName = getSelectedApnSpnName();
+			if (!TextUtils.isEmpty(mNumeric) && (("23430".equals(mNumeric) && !TextUtils.isEmpty(selectedApnSpnName) && selectedApnSpnName.contains("EE")) 
+				|| "23433".equals(mNumeric))) {			
 				mPhone.setDataRoamingEnabled(true);
 				log("===mPhone.getDataRoamingEnabled()==="+mPhone.getDataRoamingEnabled());
 			}			
@@ -686,6 +694,36 @@
         super.onPause();
     }
 
+	private String getSelectedApnSpnName() {
+        String spn = null;
+
+        /// M: add sub id for prefer APN @{
+        /*
+        Cursor cursor = getContentResolver().query(PREFERAPN_URI, new String[] {"_id"},
+                null, null, Telephony.Carriers.DEFAULT_SORT_ORDER);
+                */
+		if (!hasActiveSubscriptions()) return null;		
+        int subId = mActiveSubInfos.get(0).getSubscriptionId();
+        Cursor cursor = getContentResolver().query(getPreferApnUri(subId), new String[] { "spn" },
+                null, null, DEFAULT_SORT_ORDER/* Telephony.Carriers.DEFAULT_SORT_ORDER */);
+        /// @}
+        if (cursor.getCount() > 0) {
+            cursor.moveToFirst();
+            spn = cursor.getString(0);
+        }
+        cursor.close();
+        Log.d(LOG_TAG,"getSelectedApnKey(), spn = " + spn);
+        return spn;
+    }
+	
+	private Uri getPreferApnUri(int subId) {
+        Uri preferredUri = Uri.withAppendedPath(Uri.parse(PREFERRED_APN_URI), "/subId/" + subId);
+        Log.d(LOG_TAG, "getPreferredApnUri: " + preferredUri);
+        /// M: for plug-in
+        //preferredUri = mApnExt.getPreferCarrierUri(preferredUri, subId);
+        return preferredUri;
+    }
+	
     private boolean hasActiveSubscriptions() {
         return mActiveSubInfos.size() > 0;
     }
