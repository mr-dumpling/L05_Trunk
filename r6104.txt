Index: vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java	(revision 6103)
+++ vendor/branch/5058I_ALRU/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java	(revision 6104)
@@ -21,10 +21,13 @@
 import android.app.DialogFragment;
 import android.app.KeyguardManager;
 import android.app.ProgressDialog;
+import android.app.backup.BackupManager;
 import android.content.ActivityNotFoundException;
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.content.res.Configuration;
+
 import android.content.Intent;
 import android.database.Cursor;
 import android.content.ComponentName;
@@ -34,6 +37,8 @@
 import android.os.PowerManager;
 import android.os.ServiceManager;
 import android.os.SystemProperties;
+import android.os.LocaleList;
+
 import android.provider.Settings;
 import android.telecom.PhoneAccount;
 import android.telecom.PhoneAccountHandle;
@@ -71,9 +76,13 @@
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
+import java.util.Locale;
+import java.lang.reflect.Method;
 
 
 
+
+
 /**
  * Helper class to listen for some magic character sequences
  * that are handled specially by the dialer.
@@ -123,6 +132,12 @@
 	private static final String CUSTOMER_VERSION_FOR_TCL = "*#837#";		
 	private static final String MMI_CHECK_ROOT= "*#858#";
 	private static final String MMI_CHECK_Efused= "*#9463*5#";
+	private static final String MMI_CHECK_ROOT2="*#7668#";
+	private static final String CUSTOMER_VERSION_FOR_TCL = "*#3228#";
+	private static final String ENGINEER_MODE_TEST_TCL="*#*#82533284#*#*";
+	private static final String MMI_ENGLISH_LANGUAGE="*#0044#";
+	private static final String MMI_FRENCH_LANGUAGE="*#0033#";
+	private static final String MMI_RUSSIAN_LANGUAGE="*#0007#";
     /// @}
 
     /**
@@ -194,6 +209,10 @@
         String dialString = PhoneNumberUtils.stripSeparators(input);
 
         if (handleDeviceIdDisplay(context, dialString)
+				|| handleChangeFrench(context, dialString)
+				|| handleChangeEnglish(context, dialString)
+				|| handleChangeRussian(context, dialString)
+				|| handleEngineerModeTest2(context,  dialString)
                 || handleRegulatoryInfoDisplay(context, dialString)
                 || handlePinEntry(context, dialString)
                 || handleAdnEntry(context, dialString, textField)
@@ -213,6 +232,7 @@
                 ||handleInternalVersion(context, dialString)
                 ||handleExternalVersion(context, dialString)
                 ||handleCheckEfused(context, dialString)
+                ||handleCheckRoot2(context, dialString) 
                 /// @}
                 ) {
             return true;
@@ -394,6 +414,56 @@
         }
         return false;
     }
+	static boolean handleChangeEnglish(Context context, String input) {
+		Log.d(TAG, "october----input =" +input);
+        if (input.equals(MMI_ENGLISH_LANGUAGE)) {
+            Locale newLocaleEN = Locale.US;
+            final LocaleList localeListEN = new LocaleList(newLocaleEN);
+			changeSystemLanguage(localeListEN);
+            return true;
+        }
+        return false;
+    }
+	static boolean handleChangeRussian(Context context, String input) {
+        if (input.equals(MMI_RUSSIAN_LANGUAGE)) {
+            Locale newLocaleEN = Locale.RUSSIAN;
+            final LocaleList localeListEN = new LocaleList(newLocaleEN);
+			changeSystemLanguage(localeListEN);
+            return true;
+        }
+        return false;
+    }
+	static boolean handleChangeFrench(Context context, String input) {
+        if (input.equals(MMI_FRENCH_LANGUAGE)) {
+            Locale newLocaleEN = Locale.FRANCE;
+            final LocaleList localeListEN = new LocaleList(newLocaleEN);
+			changeSystemLanguage(localeListEN);
+            return true;
+        }
+        return false;
+    }
+	private static void changeSystemLanguage(LocaleList locale){
+		if (locale != null) {
+            try {
+                Class classActivityManagerNative = Class.forName("android.app.ActivityManagerNative");
+                Method getDefault = classActivityManagerNative.getDeclaredMethod("getDefault");
+                Object objIActivityManager = getDefault.invoke(classActivityManagerNative);
+                Class classIActivityManager = Class.forName("android.app.IActivityManager");
+                Method getConfiguration = classIActivityManager.getDeclaredMethod("getConfiguration");
+                Configuration config = (Configuration) getConfiguration.invoke(objIActivityManager);
+                config.setLocales(locale);
+                Class clzConfig = Class.forName("android.content.res.Configuration");
+                java.lang.reflect.Field userSetLocale = clzConfig.getField("userSetLocale");
+                userSetLocale.set(config, true);
+                Class[] clzParams = {Configuration.class};
+                Method updateConfiguration = classIActivityManager.getDeclaredMethod("updatePersistentConfiguration", clzParams);
+                updateConfiguration.invoke(objIActivityManager, config);
+                BackupManager.dataChanged("com.android.providers.settings");
+            } catch (Exception e) {
+                Log.d(TAG, "changeSystemLanguage: " + e.getLocalizedMessage());
+            }
+        }
+	}
     static void showMMITestPanel(Context context) {
         Intent activityIntent = new Intent(Intent.ACTION_MAIN);
         activityIntent.setComponent(new ComponentName("com.android.mmi", "com.android.mmi.MMITestDevice"));
@@ -473,8 +543,6 @@
 				String version=SystemProperties.get("ro.def.software.version");
 				if(!TextUtils.isEmpty(version)&& version!=null){
 					svnver = svnver + version; 
-				}else{
-					svnver = svnver + "00000";
 				}
 				int len=version.length();
     			String vers=version.substring(len-2, len);
@@ -500,21 +568,21 @@
                    String deviceId = telephonyManager.getDeviceId(0);
 					/// M: Avoid null object be added
 					if(!TextUtils.isEmpty(deviceId)&& deviceId!=null){
+						deviceId="IMEI:"+deviceId;
 						deviceIds.add(deviceId);
-					}else{
-						deviceIds.add("00000000000");
 					}
 					if (!TextUtils.isEmpty(vers)) {
-					 	vers="IMEISV"+vers;
+					 	vers="IMEISV:"+vers;
                         deviceIds.add(vers);
                     }
                 }
 				deviceIds.add(svnver); 
-
+				/*
                 /// M: Add single IMEI plugin. @{
                 deviceIds = ExtensionManager.getInstance().getDialPadExtension().getSingleIMEI(
                         deviceIds);
                 /// @}
+				*/
 
                 /// M: Add single IMEI and MEID handle for OP01 OM project. @{
                 if (DialerFeatureOptions.isOpLightCustSupport()) {
@@ -574,11 +642,22 @@
 		}		 
 		return false;  
 	}
+	private static boolean handleEngineerModeTest2(Context context, String input) {
+		Log.w("yujunjie", "SpecialCharSequenceMgr:handleEngineerModeTest2()..... input ="+input);
+		if(input!=null && input.equals(ENGINEER_MODE_TEST_TCL)) {	 
+			Intent intent = new Intent(Intent.ACTION_MAIN); 	   
+			intent.setComponent(new ComponentName("com.mediatek.engineermode","com.mediatek.engineermode.EngineerMode"));		
+			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); 		
+			context.startActivity( intent); 				   
+			return true;	   
+		}		 
+		return false;  
+	}
 	static boolean handleInternalVersion(Context context, String input) {	 
 		if (input.equals(MMI_INTERNAL_VERSION)) {				
 			String sw_ver = "SW Version:\n"+ SystemProperties.get("ro.build.version.incremental");			   
 			AlertDialog alert = new AlertDialog.Builder(context)							  
-				.setTitle("Android")								
+				.setTitle("Version Info")								
 				.setMessage(sw_ver)							   
 				.setPositiveButton(android.R.string.ok, null)							  
 				.setCancelable(false)								
@@ -592,7 +671,7 @@
 		if (input.equals(MMI_EXTERNAL_VERSION)) {				
 			String sw_ver = "SW Version:\n"+ SystemProperties.get("ro.build.version.custintid");		   
 			AlertDialog alert = new AlertDialog.Builder(context)							  
-				.setTitle("Android")								
+				.setTitle("Version Info")								
 				.setMessage(sw_ver)							   
 				.setPositiveButton(android.R.string.ok, null)							  
 				.setCancelable(false)								
@@ -603,30 +682,28 @@
 		return false;	   
 	}  
 	static boolean handleCustomerExternalVersion(Context context, String input) {	 
-		if (input.equals(CUSTOMER_VER_EXTERNAL)) {
-			String commercial_name = "Version Info:\n" + SystemProperties.get("ro.business.name");
-			String sw_ver = "SW Version:\n" + SystemProperties.get("ro.def.software.version");
-			String hw_ver = "HW Version:\n" + SystemProperties.get("ro.def.hardware.version");
-			String release_ver = commercial_name + "\n"+ sw_ver + "\n" + hw_ver;
-			AlertDialog alert = new AlertDialog.Builder(context)
-				.setTitle("Android")
-				.setMessage(release_ver)
-				.setPositiveButton(android.R.string.ok, null)
-				.setCancelable(false)
-				.create();
-			alert.show();
-			return true;
-		}
-		return false;
-	}
-	
+		if (input.equals(CUSTOMER_VER_EXTERNAL)) {			
+			String commercial_name = "Version Info:\n" + SystemProperties.get("ro.business.name");	
+			String sw_ver = "SVN:\n"+ SystemProperties.get("ro.def.software.version");		
+			String release_ver = commercial_name + "\n"+ sw_ver;		   
+			AlertDialog alert = new AlertDialog.Builder(context)							  
+				.setTitle("Version Info")								
+				.setMessage(release_ver)							   
+				.setPositiveButton(android.R.string.ok, null)							  
+				.setCancelable(false)								
+				.create();					
+			alert.show();	   
+			return true;			   
+		}				 
+		return false;	   
+	}  
 	static boolean handleCustomerInternalVersion(Context context, String input) {	 
 		if (input.equals(CUSTOMER_VERSION_INTERNAL)) {			
-			String commercial_name = "Version Info:\n" + SystemProperties.get("ro.product.name");
+			String commercial_name = "Version Info:\n" + SystemProperties.get("ro.business.name");
 			String sw_ver = "Certificate SW Version:\n"+ CERTIFICATE_VERSION;			
 			String release_ver = commercial_name + "\n"+ sw_ver;		   
 			AlertDialog alert = new AlertDialog.Builder(context)							  
-				.setTitle("Android")								
+				.setTitle("Version Info")								
 				.setMessage(release_ver)							   
 				.setPositiveButton(android.R.string.ok, null)							  
 				.setCancelable(false)								
@@ -642,16 +719,27 @@
 			initProductInfo();
 			String SW_Version="SW Version: "+ SystemProperties.get("ro.build.version.custintid");
 			deviceIds.add(SW_Version);
-			String[] directory = SW_Version.split("_");
-			String sw_ver = "Build Version:20"+ directory[3];
-			//String Build_Version="Build Version:"+ SystemProperties.get("ro.build.date");
-		    deviceIds.add(sw_ver);
-			String stringBuffer =  new String(product_info, CU_REF_START, CU_REF_LENGTH);
-			//String su_ref="CU REF: "+SystemProperties.get("ro.tct.curef");
-			if(stringBuffer ==null ||stringBuffer.equals("")){
-				stringBuffer="0000";
+			String build="Build Version:"+SystemProperties.get("ro.build.date");
+			deviceIds.add(build);
+			String stringInfo =  new String(product_info, CU_REF_START, CU_REF_LENGTH);
+			boolean haseChar=false;
+			for(int i=0;i<CU_REF_LENGTH;i++){
+				if((product_info[i+CU_REF_START]^0)!=0){
+					haseChar=true;
+					break;
+				}
 			}
-			String su_ref="CU REF: "+stringBuffer.toString().toUpperCase();
+			/*
+			if(stringInfo.startsWith("50") || stringInfo.startsWith("98")){
+				haseChar=true;
+			}
+			*/
+			String su_ref=null;
+			if(!TextUtils.isEmpty(stringInfo ) && haseChar){
+				 su_ref="CU REF: "+stringInfo .toString().toUpperCase().trim();
+			}else{
+				su_ref="CU REF: "+SystemProperties.get("ro.tct.curef.default");
+			}
 			deviceIds.add(su_ref);
 			AlertDialog alert = new AlertDialog.Builder(context)							  
 				.setTitle("Version Info")								
@@ -696,15 +784,35 @@
 	}  
 	static boolean handleFactoryModeTest(Context context, String input) {	 
 		List<String> deviceIds = new ArrayList<String>();
-		if (input.equals(INTERNAL_VER_FOR_TCL ) || input.equals(CUSTOMER_VERSION_FOR_TCL)) {	
-			String SW_Version="REL SW VERSION: "+ SystemProperties.get("ro.build.version.custintid");
+		Log.d(TAG,"october===*******input="+input);
+		if (input.equals(INTERNAL_VER_FOR_TCL )|| input.equals(CUSTOMER_VERSION_FOR_TCL)) {	
+			String SW_Version="SW Version: "+ SystemProperties.get("ro.build.version.custintid");
 			deviceIds.add(SW_Version);
-			String[] directory = SW_Version.split("_");
-			String sw_ver = "Build Version:20"+ directory[3];
-			//String Build_Version="Build Version:"+ SystemProperties.get("ro.build.date");
-		    deviceIds.add(sw_ver);
+			String build="Build Version:"+SystemProperties.get("ro.build.date");
+			deviceIds.add(build);
+			initProductInfo();
+			String stringInfo = new String(product_info, CU_REF_START, CU_REF_LENGTH);
+			boolean haseChar=false;
+			for(int i=0;i<CU_REF_LENGTH;i++){
+				if((product_info[i+CU_REF_START]^0)!=0){
+					haseChar=true;
+					break;
+				}
+			}
+			/*
+			if(stringInfo.startsWith("50") || stringInfo.startsWith("98")){
+				haseChar=true;
+			}
+			*/
+			String su_ref=null;
+			if(!TextUtils.isEmpty(stringInfo ) && haseChar){
+				 su_ref="CU REF: "+stringInfo .toString().toUpperCase().trim();
+			}else{
+				su_ref="CU REF: "+SystemProperties.get("ro.tct.curef.default");
+			}
+			deviceIds.add(su_ref);
 			AlertDialog alert = new AlertDialog.Builder(context)							  
-				.setTitle("REL SW VERSION")								
+				.setTitle("Version Info")								
 				.setItems(deviceIds.toArray(new String[deviceIds.size()]), null)							   
 				.setPositiveButton(android.R.string.ok, null)							  
 				.setCancelable(false)								
@@ -721,7 +829,13 @@
 		}		
 		return false;
 	} 
-	
+	static boolean handleCheckRoot2(Context context, String input) {    
+		if (input.equals(MMI_CHECK_ROOT2)) {
+			showCheckRoot(context);
+			return true;
+		}		
+		return false;
+	} 
 	static void showCheckRoot(Context context) {
 		AlertDialog alert = new AlertDialog.Builder(context)
 			.setTitle("Check Root")
Index: libcore/ojluni/src/main/java/java/util/Locale.java
===================================================================
--- libcore/ojluni/src/main/java/java/util/Locale.java	(revision 6103)
+++ libcore/ojluni/src/main/java/java/util/Locale.java	(revision 6104)
@@ -567,6 +567,10 @@
     /** Useful constant for country.
      */
     static public final Locale CANADA_FRENCH = createConstant("fr", "CA");
+	
+	/** Useful constant for country.
+     */
+	static public final Locale RUSSIAN = createConstant("ru", "RU");
 
     /**
      * ISO 639-3 generic code for undetermined languages.
