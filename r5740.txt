Index: packages/apps/Settings/res/values-ru/strings.xml
===================================================================
--- packages/apps/Settings/res/values-ru/strings.xml	(revision 5739)
+++ packages/apps/Settings/res/values-ru/strings.xml	(revision 5740)
@@ -3055,8 +3055,8 @@
     <string name="write_settings_description" msgid="6868293938839954623">"Приложение сможет изменять системные настройки."</string>
     <string name="write_settings_on" msgid="8230580416068832239">"Да"</string>
     <string name="write_settings_off" msgid="5156104383386336233">"Нет"</string>
-    <string name="camera_gesture_title" msgid="1075838577642393011">"Включать камеру движением запястья"</string>
-    <string name="camera_gesture_desc" msgid="1831390075255870960">"Чтобы открыть приложение \"Камера\", дважды поверните запястье."</string>
+    <string name="camera_gesture_title" msgid="1075838577642393011">"Быстрый запуск камеры"</string>
+    <string name="camera_gesture_desc" msgid="1831390075255870960">"Открывать камеру двойным нажатием клавиши включения"</string>
     <string name="camera_double_tap_power_gesture_title" msgid="1651873760405034645">"Быстрый доступ к камере"</string>
     <string name="camera_double_tap_power_gesture_desc" msgid="7355664631775680376">"Открывать камеру двойным нажатием кнопки питания"</string>
     <string name="screen_zoom_title" msgid="5233515303733473927">"Масштаб изображения на экране"</string>
Index: packages/apps/Settings/res/values/strings.xml
===================================================================
--- packages/apps/Settings/res/values/strings.xml	(revision 5739)
+++ packages/apps/Settings/res/values/strings.xml	(revision 5740)
@@ -2184,6 +2184,9 @@
     <string name="lift_to_wake_title">Lift to wake</string>
     <!-- [CHAR LIMIT=30] Display settings screen, setting option name to change whether the ambient display feature is enabled. -->
     <string name="doze_title">Ambient display</string>
+	<!--add "Press Power key twice for Camera" to Settings>Display-->
+	<string name="twice_camera_title">Press Power key twice for Camera</string>
+	<string name="twice_camera_summary">Quickly open the camera without unlocking your screen</string>
     <!-- [CHAR LIMIT=NONE] Display settings screen, setting description for the ambient display feature. -->
     <string name="doze_summary">Wake screen when you receive notifications</string>
     <!-- [CHAR LIMIT=30] Sound & display settings screen, setting option name to change font size -->
@@ -6960,10 +6963,10 @@
     <string name="write_settings_off">No</string>
 
     <!-- Title of setting that controls gesture to open camera [CHAR LIMIT=40] -->
-    <string name="camera_gesture_title">Double twist for camera</string>
+    <string name="camera_gesture_title">Press Power key twice for Camera</string>
 
     <!-- Description of setting that controls gesture to open camera [CHAR LIMIT=NONE] -->
-    <string name="camera_gesture_desc">Open the camera app by twisting your wrist twice</string>
+    <string name="camera_gesture_desc">Quickly open the camera without unlocking your screen</string>
 
     <!-- Title of setting that controls gesture to open camera by double tapping the power button [CHAR LIMIT=40] -->
     <string name="camera_double_tap_power_gesture_title">Press power button twice for Camera</string>
Index: vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/android/settings/DisplaySettings.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/android/settings/DisplaySettings.java	(revision 0)
+++ vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/android/settings/DisplaySettings.java	(revision 5740)
@@ -0,0 +1,682 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings;
+
+import android.app.Activity;
+import android.app.ActivityManager;
+import android.app.UiModeManager;
+import android.app.WallpaperManager;
+import android.app.admin.DevicePolicyManager;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.ComponentName;
+import android.content.pm.PackageManager;
+import android.content.res.Configuration;
+import android.content.res.Resources;
+import android.hardware.Sensor;
+import android.hardware.SensorManager;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.provider.SearchIndexableResource;
+import android.provider.Settings;
+import android.support.v14.preference.SwitchPreference;
+import android.support.v7.preference.DropDownPreference;
+import android.support.v7.preference.ListPreference;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.Preference.OnPreferenceChangeListener;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.android.internal.app.NightDisplayController;
+import com.android.internal.logging.MetricsLogger;
+import com.android.internal.logging.MetricsProto.MetricsEvent;
+import com.android.internal.view.RotationPolicy;
+import com.android.settings.accessibility.ToggleFontSizePreferenceFragment;
+import com.android.settings.dashboard.SummaryLoader;
+import com.android.settings.search.BaseSearchIndexProvider;
+import com.android.settings.search.Indexable;
+import com.android.settingslib.RestrictedLockUtils;
+import com.android.settingslib.RestrictedPreference;
+
+import com.mediatek.settings.DisplaySettingsExt;
+import com.mediatek.settings.FeatureOption;
+import android.content.BroadcastReceiver;
+import android.content.IntentFilter;
+import android.content.Intent;
+import java.util.ArrayList;
+import java.util.List;
+import android.content.SharedPreferences;
+import android.provider.Settings;
+import com.mediatek.pq.PictureQuality;
+import static android.provider.Settings.Secure.CAMERA_GESTURE_DISABLED;
+import static android.provider.Settings.Secure.DOUBLE_TAP_TO_WAKE;
+import static android.provider.Settings.Secure.DOZE_ENABLED;
+import static android.provider.Settings.Secure.WAKE_GESTURE_ENABLED;
+import static android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE;
+import static android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC;
+import static android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL;
+import static android.provider.Settings.System.SCREEN_OFF_TIMEOUT;
+
+import static com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
+import com.android.settingslib.dream.DreamBackend;
+import com.android.settingslib.dream.DreamBackend.DreamInfo;
+
+public class DisplaySettings extends SettingsPreferenceFragment implements
+        Preference.OnPreferenceChangeListener, Indexable {
+    private static final String TAG = "DisplaySettings";
+	private final String NIGHT_MODE_SWITCH="night_mode_switch";
+	private static final String PREFERENCE_NAME = "com.android.settings";
+	private static final String SETTING_TIME = "automate_schedule";
+	private ContentResolver mContentResolver;
+	private SharedPreferences modePrenference ;
+    /** If there is no setting in the provider, use this. */
+    private static final int FALLBACK_SCREEN_TIMEOUT_VALUE = 30000;
+
+    private static final String KEY_SCREEN_TIMEOUT = "screen_timeout";
+    private static final String KEY_FONT_SIZE = "font_size";
+    private static final String KEY_CUSTOM_FONT_SIZE = "custom_font_size";
+    private static final String KEY_NOTIFICATION_LED = "notification_led";
+    private static final String KEY_SCREEN_SAVER = "screensaver";
+    private static final String KEY_LIFT_TO_WAKE = "lift_to_wake";
+    private static final String KEY_DOZE = "doze";
+    private static final String KEY_TAP_TO_WAKE = "tap_to_wake";
+    private static final String KEY_AUTO_BRIGHTNESS = "auto_brightness";
+    private static final String KEY_AUTO_ROTATE = "auto_rotate";
+    private static final String KEY_NIGHT_DISPLAY = "night_display";
+    private static final String KEY_NIGHT_MODE = "night_mode";
+    private static final String KEY_CAMERA_GESTURE = "camera_gesture";
+    private static final String KEY_WALLPAPER = "wallpaper";
+    private static final String KEY_VR_DISPLAY_PREF = "vr_display_pref";
+	private final String NIGHT_MODE_ACTION_ON="android.intent.action.NIGHT_MODE_ACTION_ON";
+	private final String NIGHT_MODE_ACTION_OFF="android.intent.action.NIGHT_MODE_ACTION_OFF";
+	private final String OPEN_ACTION = "com.android.settings.nightmode.open";
+	private final String CLOSE_ACTION ="com.android.settings.nightmode.close";
+
+	private IntentFilter mIntentFilter = new IntentFilter();
+    private MyBroadcastReceiver mBroadcastReceiver = new MyBroadcastReceiver();
+	
+    private Preference mFontSizePref;
+    private Preference mCustomFontSizePref;
+
+    private TimeoutListPreference mScreenTimeoutPreference;
+    private Preference mNightModePreference;
+    private Preference mScreenSaverPreference;
+    private Preference mNotificationLEDPreference;
+    private SwitchPreference mLiftToWakePreference;
+    private SwitchPreference mDozePreference;
+    private SwitchPreference mTapToWakePreference;
+    private SwitchPreference mAutoBrightnessPreference;
+    private SwitchPreference mCameraGesturePreference;
+
+    ///M: MTK feature
+    private DisplaySettingsExt mDisplaySettingsExt;
+
+    @Override
+    protected int getMetricsCategory() {
+        return MetricsEvent.DISPLAY;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        final Activity activity = getActivity();
+        final ContentResolver resolver = activity.getContentResolver();
+
+        addPreferencesFromResource(R.xml.display_settings);
+		mContentResolver = getContext().getContentResolver();
+        mScreenSaverPreference = findPreference(KEY_SCREEN_SAVER);
+        if (mScreenSaverPreference != null
+                && getResources().getBoolean(
+                        com.android.internal.R.bool.config_dreamsSupported) == false) {
+            getPreferenceScreen().removePreference(mScreenSaverPreference);
+        }
+		mNotificationLEDPreference = findPreference(KEY_NOTIFICATION_LED);
+        Log.d("whj", "onCreate: = "+(SystemProperties.getBoolean("ro.tcl.led", false) == true));
+        if (SystemProperties.getBoolean("ro.tcl.led", false) == false) {
+            getPreferenceScreen().removePreference(mNotificationLEDPreference);
+			}
+        mScreenTimeoutPreference = (TimeoutListPreference) findPreference(KEY_SCREEN_TIMEOUT);
+
+        mFontSizePref = findPreference(KEY_FONT_SIZE);
+        mCustomFontSizePref = findPreference(KEY_CUSTOM_FONT_SIZE);
+
+        if (isAutomaticBrightnessAvailable(getResources())) {
+            mAutoBrightnessPreference = (SwitchPreference) findPreference(KEY_AUTO_BRIGHTNESS);
+            mAutoBrightnessPreference.setOnPreferenceChangeListener(this);
+        } else {
+            removePreference(KEY_AUTO_BRIGHTNESS);
+        }
+
+        if (!NightDisplayController.isAvailable(activity)) {
+            removePreference(KEY_NIGHT_DISPLAY);
+        }
+
+        if (isLiftToWakeAvailable(activity)) {
+            mLiftToWakePreference = (SwitchPreference) findPreference(KEY_LIFT_TO_WAKE);
+            mLiftToWakePreference.setOnPreferenceChangeListener(this);
+        } else {
+            removePreference(KEY_LIFT_TO_WAKE);
+        }
+        
+        //ADD-S By Justin.Shen for switch screen mode from 16:9 to 18:9
+        if (!"1".equals(SystemProperties.get("ro.mtk_fullscreen_switch"))) {
+            removePreference("full_screen_mode");
+        }
+        //ADD-E By Justin.Shen for switch screen mode from 16:9 to 18:9
+
+        if (isDozeAvailable(activity)) {
+            mDozePreference = (SwitchPreference) findPreference(KEY_DOZE);
+            StringBuffer sb =new StringBuffer();
+            sb.append(getResources().getString(R.string.doze_summary));
+            sb.append(",");
+            sb.append(getResources().getString(R.string.lift_to_wake_title));
+            sb.append(".");
+            mDozePreference.setSummary(sb);
+            mDozePreference.setOnPreferenceChangeListener(this);
+        } else {
+            removePreference(KEY_DOZE);
+        }
+
+        if (isTapToWakeAvailable(getResources())) {
+            mTapToWakePreference = (SwitchPreference) findPreference(KEY_TAP_TO_WAKE);
+            mTapToWakePreference.setOnPreferenceChangeListener(this);
+        } else {
+            removePreference(KEY_TAP_TO_WAKE);
+        }
+
+        if (isCameraGestureAvailable(getResources())) {
+            mCameraGesturePreference = (SwitchPreference) findPreference(KEY_CAMERA_GESTURE);
+            mCameraGesturePreference.setOnPreferenceChangeListener(this);
+        } else {
+            removePreference(KEY_CAMERA_GESTURE);
+        }
+
+        ///M: MTK feature @{
+        mDisplaySettingsExt = new DisplaySettingsExt(getActivity());
+        mDisplaySettingsExt.onCreate(getPreferenceScreen());
+        /// @}
+
+        if (RotationPolicy.isRotationLockToggleVisible(activity)) {
+            DropDownPreference rotatePreference =
+                    (DropDownPreference) findPreference(KEY_AUTO_ROTATE);
+            int rotateLockedResourceId;
+            // The following block sets the string used when rotation is locked.
+            // If the device locks specifically to portrait or landscape (rather than current
+            // rotation), then we use a different string to include this information.
+            if (allowAllRotations(activity)) {
+                rotateLockedResourceId = R.string.display_auto_rotate_stay_in_current;
+            } else {
+                if (RotationPolicy.getRotationLockOrientation(activity)
+                        == Configuration.ORIENTATION_PORTRAIT) {
+                    rotateLockedResourceId =
+                            R.string.display_auto_rotate_stay_in_portrait;
+                } else {
+                    rotateLockedResourceId =
+                            R.string.display_auto_rotate_stay_in_landscape;
+                }
+            }
+            rotatePreference.setEntries(new CharSequence[] {
+                    activity.getString(R.string.display_auto_rotate_rotate),
+                    activity.getString(rotateLockedResourceId),
+            });
+            rotatePreference.setEntryValues(new CharSequence[] { "0", "1" });
+
+            /// M: ALPS01751214 Rotate function on statusbar cannot matched in display settings
+            mDisplaySettingsExt.setRotatePreference(rotatePreference);
+            rotatePreference.setValueIndex(RotationPolicy.isRotationLocked(activity) ?
+                    1 : 0);
+            rotatePreference.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue) {
+                    final boolean locked = Integer.parseInt((String) newValue) != 0;
+                    MetricsLogger.action(getActivity(), MetricsEvent.ACTION_ROTATION_LOCK,
+                            locked);
+                    RotationPolicy.setRotationLock(activity, locked);
+                    return true;
+                }
+            });
+        } else {
+            removePreference(KEY_AUTO_ROTATE);
+        }
+
+        if (isVrDisplayModeAvailable(activity)) {
+            DropDownPreference vrDisplayPref =
+                    (DropDownPreference) findPreference(KEY_VR_DISPLAY_PREF);
+            vrDisplayPref.setEntries(new CharSequence[] {
+                    activity.getString(R.string.display_vr_pref_low_persistence),
+                    activity.getString(R.string.display_vr_pref_off),
+            });
+            vrDisplayPref.setEntryValues(new CharSequence[] { "0", "1" });
+
+            final Context c = activity;
+            int currentUser = ActivityManager.getCurrentUser();
+            int current = Settings.Secure.getIntForUser(c.getContentResolver(),
+                            Settings.Secure.VR_DISPLAY_MODE,
+                            /*default*/Settings.Secure.VR_DISPLAY_MODE_LOW_PERSISTENCE,
+                            currentUser);
+            vrDisplayPref.setValueIndex(current);
+            vrDisplayPref.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue) {
+                    int i = Integer.parseInt((String) newValue);
+                    int u = ActivityManager.getCurrentUser();
+                    if (!Settings.Secure.putIntForUser(c.getContentResolver(),
+                            Settings.Secure.VR_DISPLAY_MODE,
+                            i, u)) {
+                        Log.e(TAG, "Could not change setting for " +
+                                Settings.Secure.VR_DISPLAY_MODE);
+                    }
+                    return true;
+                }
+            });
+        } else {
+            removePreference(KEY_VR_DISPLAY_PREF);
+        }
+
+        mNightModePreference = findPreference(KEY_NIGHT_MODE);
+        modePrenference= getContext().getSharedPreferences(PREFERENCE_NAME,  0);
+        /*if (mNightModePreference != null) {
+            final UiModeManager uiManager = (UiModeManager) getSystemService(
+                    Context.UI_MODE_SERVICE);
+            final int currentNightMode = uiManager.getNightMode();
+            mNightModePreference.setValue(String.valueOf(currentNightMode));
+            mNightModePreference.setOnPreferenceChangeListener(this);
+        }*/
+        IntentFilter filter = new IntentFilter(NIGHT_MODE_ACTION_ON);
+        filter.addAction(NIGHT_MODE_ACTION_OFF);
+		filter.addAction(OPEN_ACTION);
+		filter.addAction(CLOSE_ACTION);
+        activity.registerReceiver(myReceiver,filter);
+		
+		mIntentFilter.addAction("com.android.techainsh.automatic");
+    }
+
+	private class MyBroadcastReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            updateState();
+        }
+    }
+	
+    private static boolean allowAllRotations(Context context) {
+        return Resources.getSystem().getBoolean(
+                com.android.internal.R.bool.config_allowAllRotations);
+    }
+
+    private static boolean isLiftToWakeAvailable(Context context) {
+        SensorManager sensors = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);
+        return sensors != null && sensors.getDefaultSensor(Sensor.TYPE_WAKE_GESTURE) != null;
+    }
+
+    private static boolean isDozeAvailable(Context context) {
+        String name = Build.IS_DEBUGGABLE ? SystemProperties.get("debug.doze.component") : null;
+        if (TextUtils.isEmpty(name)) {
+            name = context.getResources().getString(
+                    com.android.internal.R.string.config_dozeComponent);
+        }
+        return !TextUtils.isEmpty(name);
+    }
+
+    private static boolean isTapToWakeAvailable(Resources res) {
+        return res.getBoolean(com.android.internal.R.bool.config_supportDoubleTapWake);
+    }
+
+    private static boolean isAutomaticBrightnessAvailable(Resources res) {
+        return res.getBoolean(com.android.internal.R.bool.config_automatic_brightness_available);
+    }
+
+    private static boolean isCameraGestureAvailable(Resources res) {
+        boolean configSet = res.getInteger(
+                com.android.internal.R.integer.config_cameraLaunchGestureSensorType) != -1;
+        return configSet &&
+                !SystemProperties.getBoolean("gesture.disable_camera_launch", false);
+    }
+
+    private static boolean isVrDisplayModeAvailable(Context context) {
+        PackageManager pm = context.getPackageManager();
+        return pm.hasSystemFeature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE);
+    }
+
+    private void updateTimeoutPreferenceDescription(long currentTimeout) {
+        TimeoutListPreference preference = mScreenTimeoutPreference;
+        String summary;
+        if (preference.isDisabledByAdmin()) {
+            summary = getString(R.string.disabled_by_policy_title);
+        } else if (currentTimeout <= 0) {
+            // Unsupported value
+            summary = getString(R.string.screen_timeout_never_summary);
+        } else {
+            final CharSequence[] entries = preference.getEntries();
+            final CharSequence[] values = preference.getEntryValues();
+            if (entries == null || entries.length == 0) {
+                summary = "";
+            } else {
+                int best = 0;
+                for (int i = 0; i < values.length; i++) {
+                    long timeout = Long.parseLong(values[i].toString());
+                    if (currentTimeout == timeout) {
+                        best = i;
+                    }
+                }
+                summary = getString(R.string.screen_timeout_summary, entries[best]);
+            }
+        }
+        preference.setSummary(summary);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        updateState();
+
+        final long currentTimeout = Settings.System.getLong(getActivity().getContentResolver(),
+                SCREEN_OFF_TIMEOUT, FALLBACK_SCREEN_TIMEOUT_VALUE);
+        mScreenTimeoutPreference.setValue(String.valueOf(currentTimeout));
+        mScreenTimeoutPreference.setOnPreferenceChangeListener(this);
+        final DevicePolicyManager dpm = (DevicePolicyManager) getActivity().getSystemService(
+                Context.DEVICE_POLICY_SERVICE);
+        if (dpm != null) {
+            final EnforcedAdmin admin = RestrictedLockUtils.checkIfMaximumTimeToLockIsSet(
+                    getActivity());
+            final long maxTimeout = dpm
+                    .getMaximumTimeToLockForUserAndProfiles(UserHandle.myUserId());
+            mScreenTimeoutPreference.removeUnusableTimeouts(maxTimeout, admin);
+        }
+        updateTimeoutPreferenceDescription(currentTimeout);
+
+        disablePreferenceIfManaged(KEY_WALLPAPER, UserManager.DISALLOW_SET_WALLPAPER);
+
+        /// M: MTK feature
+        mDisplaySettingsExt.onResume();
+		String nightModeSwitch= Settings.System.getString(mContentResolver,NIGHT_MODE_SWITCH);
+		boolean mode= Boolean.parseBoolean(nightModeSwitch);
+        if(PictureQuality.isBlueLightEnabled()){
+            mNightModePreference.setSummary(R.string.mode_on);
+        }else{
+            mNightModePreference.setSummary(R.string.mode_off);
+        }
+		getActivity().registerReceiver(mBroadcastReceiver, mIntentFilter);
+    }
+
+    /// M: add MTK extended @{
+    @Override
+    public void onPause() {
+        super.onPause();
+        mDisplaySettingsExt.onPause();
+		getActivity().unregisterReceiver(mBroadcastReceiver);
+    }
+    /// @}
+
+      private BroadcastReceiver myReceiver = new BroadcastReceiver(){  
+        @Override  
+        public void onReceive(Context context, Intent intent) {  
+            Log.d(TAG,"intent.getAction()="+intent.getAction());
+            if(intent.getAction().equals(NIGHT_MODE_ACTION_ON) || intent.getAction().equals(OPEN_ACTION)){
+                mNightModePreference.setSummary(R.string.mode_on);
+            }else if(intent.getAction().equals(NIGHT_MODE_ACTION_OFF) || intent.getAction().equals(CLOSE_ACTION)){
+                mNightModePreference.setSummary(R.string.mode_off);
+            }
+        }  
+    }; 
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        getActivity().unregisterReceiver(myReceiver);
+    }
+    private void updateState() {
+        updateFontSizeSummary();
+        updateScreenSaverSummary();
+
+        // Update auto brightness if it is available.
+        if (mAutoBrightnessPreference != null) {
+            int brightnessMode = Settings.System.getInt(getContentResolver(),
+                    SCREEN_BRIGHTNESS_MODE, SCREEN_BRIGHTNESS_MODE_MANUAL);
+            mAutoBrightnessPreference.setChecked(brightnessMode != SCREEN_BRIGHTNESS_MODE_MANUAL);
+        }
+
+        // Update lift-to-wake if it is available.
+        if (mLiftToWakePreference != null) {
+            int value = Settings.Secure.getInt(getContentResolver(), WAKE_GESTURE_ENABLED, 0);
+            mLiftToWakePreference.setChecked(value != 0);
+        }
+
+        // Update tap to wake if it is available.
+        if (mTapToWakePreference != null) {
+            int value = Settings.Secure.getInt(getContentResolver(), DOUBLE_TAP_TO_WAKE, 0);
+            mTapToWakePreference.setChecked(value != 0);
+        }
+
+        // Update doze if it is available.
+        if (mDozePreference != null) {
+            int value = Settings.Secure.getInt(getContentResolver(), DOZE_ENABLED, 1);
+            mDozePreference.setChecked(value != 0);
+            if (value!=0){
+                mDozePreference.getContext().startService(new Intent(getActivity(), WakeService.class));
+            }else{
+                mDozePreference.getContext().stopService(new Intent(getActivity(), WakeService.class));                
+            }
+        }
+
+        // Update camera gesture #1 if it is available.
+        if (mCameraGesturePreference != null) {
+            int value = Settings.Secure.getInt(getContentResolver(), CAMERA_GESTURE_DISABLED, 1);
+            mCameraGesturePreference.setChecked(value == 1);	
+        }
+    }
+
+    private void updateScreenSaverSummary() {
+        if (mScreenSaverPreference != null) {
+            if (DreamSettings.getSummaryTextWithDreamName(getActivity()) == null) {
+                DreamBackend backend = new DreamBackend(getActivity());
+                List<DreamBackend.DreamInfo> dreamInfos = backend.getDreamInfos();
+                backend.setActiveDream(dreamInfos.get(0).componentName);
+            }
+            mScreenSaverPreference.setSummary(
+                    DreamSettings.getSummaryTextWithDreamName(getActivity()));
+        }
+    }
+
+    private void updateFontSizeSummary() {
+        final Context context = mDisplaySettingsExt.isCustomPrefPresent()
+                ? mCustomFontSizePref.getContext() : mFontSizePref.getContext();
+        final float currentScale = Settings.System.getFloat(context.getContentResolver(),
+                Settings.System.FONT_SCALE, 1.0f);
+        final Resources res = context.getResources();
+        final String[] entries = mDisplaySettingsExt
+                .getFontEntries(res.getStringArray(R.array.entries_font_size));
+        final String[] strEntryValues = mDisplaySettingsExt
+                .getFontEntryValues(res.getStringArray(R.array.entryvalues_font_size));
+        final int index = ToggleFontSizePreferenceFragment.fontSizeValueToIndex(currentScale,
+                strEntryValues);
+        if (!mDisplaySettingsExt.isCustomPrefPresent()) {
+        mFontSizePref.setSummary(entries[index]);
+        } else {
+            mCustomFontSizePref.setSummary(entries[index]);
+        }
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object objValue) {
+        final String key = preference.getKey();
+        if (KEY_SCREEN_TIMEOUT.equals(key)) {
+            try {
+                int value = Integer.parseInt((String) objValue);
+                Settings.System.putInt(getContentResolver(), SCREEN_OFF_TIMEOUT, value);
+                updateTimeoutPreferenceDescription(value);
+            } catch (NumberFormatException e) {
+                Log.e(TAG, "could not persist screen timeout setting", e);
+            }
+        }
+        if (preference == mAutoBrightnessPreference) {
+            boolean auto = (Boolean) objValue;
+            Settings.System.putInt(getContentResolver(), SCREEN_BRIGHTNESS_MODE,
+                    auto ? SCREEN_BRIGHTNESS_MODE_AUTOMATIC : SCREEN_BRIGHTNESS_MODE_MANUAL);
+        }
+        if (preference == mLiftToWakePreference) {
+            boolean value = (Boolean) objValue;
+            Settings.Secure.putInt(getContentResolver(), WAKE_GESTURE_ENABLED, value ? 1 : 0);
+        }
+        if (preference == mDozePreference) {
+            boolean value = (Boolean) objValue;
+            Settings.Secure.putInt(getContentResolver(), DOZE_ENABLED, value ? 1 : 0);
+            if (value){
+                mDozePreference.getContext().startService(new Intent(getActivity(), WakeService.class));
+            }else{
+                mDozePreference.getContext().stopService(new Intent(getActivity(), WakeService.class));
+            }
+        }
+        if (preference == mTapToWakePreference) {
+            boolean value = (Boolean) objValue;
+            Settings.Secure.putInt(getContentResolver(), DOUBLE_TAP_TO_WAKE, value ? 1 : 0);
+        }
+        if (preference == mCameraGesturePreference) {
+            boolean value = (Boolean) objValue;
+            Settings.Secure.putInt(getContentResolver(), CAMERA_GESTURE_DISABLED,
+                    value ? 1 : 0 /* Backwards because setting is for disabling */);
+        }
+        if (preference == mNightModePreference) {
+            try {
+                final int value = Integer.parseInt((String) objValue);
+                final UiModeManager uiManager = (UiModeManager) getSystemService(
+                        Context.UI_MODE_SERVICE);
+                uiManager.setNightMode(value);
+            } catch (NumberFormatException e) {
+                Log.e(TAG, "could not persist night mode setting", e);
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public boolean onPreferenceTreeClick(Preference preference) {
+        if (preference == mDozePreference) {
+            MetricsLogger.action(getActivity(), MetricsEvent.ACTION_AMBIENT_DISPLAY);
+        }
+
+        /// M: Add for MTK custmization.
+        mDisplaySettingsExt.onPreferenceClick(preference);
+
+        return super.onPreferenceTreeClick(preference);
+    }
+
+    @Override
+    protected int getHelpResource() {
+        return R.string.help_uri_display;
+    }
+
+    private void disablePreferenceIfManaged(String key, String restriction) {
+        final RestrictedPreference pref = (RestrictedPreference) findPreference(key);
+        if (pref != null) {
+            pref.setDisabledByAdmin(null);
+            if (RestrictedLockUtils.hasBaseUserRestriction(getActivity(), restriction,
+                    UserHandle.myUserId())) {
+                pref.setEnabled(false);
+            } else {
+                pref.checkRestrictionAndSetDisabled(restriction);
+            }
+        }
+    }
+
+    private static class SummaryProvider implements SummaryLoader.SummaryProvider {
+        private final Context mContext;
+        private final SummaryLoader mLoader;
+
+        private SummaryProvider(Context context, SummaryLoader loader) {
+            mContext = context;
+            mLoader = loader;
+        }
+
+        @Override
+        public void setListening(boolean listening) {
+            if (listening) {
+                updateSummary();
+            }
+        }
+
+        private void updateSummary() {
+            boolean auto = Settings.System.getInt(mContext.getContentResolver(),
+                    SCREEN_BRIGHTNESS_MODE, SCREEN_BRIGHTNESS_MODE_AUTOMATIC)
+                    == SCREEN_BRIGHTNESS_MODE_AUTOMATIC;
+            mLoader.setSummary(this, mContext.getString(auto ? R.string.display_summary_on
+                    : R.string.display_summary_off));
+        }
+    }
+
+    public static final SummaryLoader.SummaryProviderFactory SUMMARY_PROVIDER_FACTORY
+            = new SummaryLoader.SummaryProviderFactory() {
+        @Override
+        public SummaryLoader.SummaryProvider createSummaryProvider(Activity activity,
+                                                                   SummaryLoader summaryLoader) {
+            return new SummaryProvider(activity, summaryLoader);
+        }
+    };
+
+    public static final Indexable.SearchIndexProvider SEARCH_INDEX_DATA_PROVIDER =
+            new BaseSearchIndexProvider() {
+                @Override
+                public List<SearchIndexableResource> getXmlResourcesToIndex(Context context,
+                        boolean enabled) {
+                    ArrayList<SearchIndexableResource> result =
+                            new ArrayList<SearchIndexableResource>();
+
+                    SearchIndexableResource sir = new SearchIndexableResource(context);
+                    sir.xmlResId = R.xml.display_settings;
+                    result.add(sir);
+
+                    return result;
+                }
+
+                @Override
+                public List<String> getNonIndexableKeys(Context context) {
+                    ArrayList<String> result = new ArrayList<String>();
+                    if (!context.getResources().getBoolean(
+                            com.android.internal.R.bool.config_dreamsSupported)
+                            /// M: exclude Daydream when device is low ram device
+                            || FeatureOption.MTK_GMO_RAM_OPTIMIZE) {
+                        result.add(KEY_SCREEN_SAVER);
+                    }
+                    if (!isAutomaticBrightnessAvailable(context.getResources())) {
+                        result.add(KEY_AUTO_BRIGHTNESS);
+                    }
+                    if (!NightDisplayController.isAvailable(context)) {
+                        result.add(KEY_NIGHT_DISPLAY);
+                    }
+                    if (!isLiftToWakeAvailable(context)) {
+                        result.add(KEY_LIFT_TO_WAKE);
+                    }
+                    if (!isDozeAvailable(context)) {
+                        result.add(KEY_DOZE);
+                    }
+                    if (!RotationPolicy.isRotationLockToggleVisible(context)) {
+                        result.add(KEY_AUTO_ROTATE);
+                    }
+                    if (!isTapToWakeAvailable(context.getResources())) {
+                        result.add(KEY_TAP_TO_WAKE);
+                    }
+                    if (!isCameraGestureAvailable(context.getResources())) {
+                        result.add(KEY_CAMERA_GESTURE);
+                    }
+                    if (!isVrDisplayModeAvailable(context)) {
+                        result.add(KEY_VR_DISPLAY_PREF);
+                    }
+                    return result;
+                }
+            };
+}
Index: vendor/branch/5058I_ALRU/frameworks/base/core/res/res/values/config.xml
===================================================================
--- vendor/branch/5058I_ALRU/frameworks/base/core/res/res/values/config.xml	(revision 5739)
+++ vendor/branch/5058I_ALRU/frameworks/base/core/res/res/values/config.xml	(revision 5740)
@@ -2487,7 +2487,7 @@
     <integer name="config_mdc_initial_max_retry">1</integer>
 
     <!-- The OEM specified sensor type for the gesture to launch the camera app. -->
-    <integer name="config_cameraLaunchGestureSensorType">-1</integer>
+    <integer name="config_cameraLaunchGestureSensorType">1</integer>
     <!-- The OEM specified sensor string type for the gesture to launch camera app, this value
          must match the value of config_cameraLaunchGestureSensorType in OEM's HAL -->
     <string translatable="false" name="config_cameraLaunchGestureSensorStringType"></string>
