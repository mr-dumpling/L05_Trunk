Index: vendor/branch/5058I_VVBG1/vendor/customer/custom.mk
===================================================================
--- vendor/branch/5058I_VVBG1/vendor/customer/custom.mk	(revision 12955)
+++ vendor/branch/5058I_VVBG1/vendor/customer/custom.mk	(revision 12956)
@@ -13,6 +13,7 @@
 					ElabelOverlay \
                     EnjoyNow \
                     FileManagerTcl \
+					TctGdpr_EU \
                     FileManagerOverlay \
                     Fota \
                     LittleBigCity2 \
Index: vendor/branch/5058I_VVBG1/vendor/customer/apps/TctGdpr_EU/Android.mk
===================================================================
--- vendor/branch/5058I_VVBG1/vendor/customer/apps/TctGdpr_EU/Android.mk	(revision 0)
+++ vendor/branch/5058I_VVBG1/vendor/customer/apps/TctGdpr_EU/Android.mk	(revision 12956)
@@ -0,0 +1,11 @@
+LOCAL_PATH:= $(call my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := TctGdpr_EU
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := TctGdpr_EU_v6.0.1.0101.0_signed_platformkey_alldpi.apk
+LOCAL_MODULE_CLASS := APPS
+LOCAL_MODULE_SUFFIX := $(COMMON_ANDROID_PACKAGE_SUFFIX)
+LOCAL_PRIVILEGED_MODULE := true
+LOCAL_CERTIFICATE := platform
+include $(BUILD_PREBUILT)
\ No newline at end of file
Index: vendor/branch/5058I_VVBG1/vendor/customer/apps/TctGdpr_EU/TctGdpr_EU_v6.0.1.0101.0_signed_platformkey_alldpi.apk
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/branch/5058I_VVBG1/vendor/customer/apps/TctGdpr_EU/TctGdpr_EU_v6.0.1.0101.0_signed_platformkey_alldpi.apk
===================================================================
--- vendor/branch/5058I_VVBG1/vendor/customer/apps/TctGdpr_EU/TctGdpr_EU_v6.0.1.0101.0_signed_platformkey_alldpi.apk	(revision 0)
+++ vendor/branch/5058I_VVBG1/vendor/customer/apps/TctGdpr_EU/TctGdpr_EU_v6.0.1.0101.0_signed_platformkey_alldpi.apk	(revision 12956)

Property changes on: vendor/branch/5058I_VVBG1/vendor/customer/apps/TctGdpr_EU/TctGdpr_EU_v6.0.1.0101.0_signed_platformkey_alldpi.apk
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/branch/5058I_VVBG1/vendor/customer/apps/EnjoyNow/Enjoy.Now-PRE-2.3.8.0.apk
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/branch/5058I_VVBG1/vendor/customer/apps/EnjoyNow/Enjoy.Now-PRE-2.3.8.0.apk
===================================================================
--- vendor/branch/5058I_VVBG1/vendor/customer/apps/EnjoyNow/Enjoy.Now-PRE-2.3.8.0.apk	(revision 0)
+++ vendor/branch/5058I_VVBG1/vendor/customer/apps/EnjoyNow/Enjoy.Now-PRE-2.3.8.0.apk	(revision 12956)

Property changes on: vendor/branch/5058I_VVBG1/vendor/customer/apps/EnjoyNow/Enjoy.Now-PRE-2.3.8.0.apk
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: vendor/branch/5058I_VVBG1/vendor/customer/apps/EnjoyNow/Android.mk
===================================================================
--- vendor/branch/5058I_VVBG1/vendor/customer/apps/EnjoyNow/Android.mk	(revision 0)
+++ vendor/branch/5058I_VVBG1/vendor/customer/apps/EnjoyNow/Android.mk	(revision 12956)
@@ -0,0 +1,12 @@
+LOCAL_PATH:= $(call my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := EnjoyNow
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := Enjoy.Now-PRE-2.3.8.0.apk
+LOCAL_MODULE_CLASS := APPS
+LOCAL_MODULE_SUFFIX := $(COMMON_ANDROID_PACKAGE_SUFFIX)
+LOCAL_PRIVILEGED_MODULE := true
+LOCAL_DEX_PREOPT := true
+LOCAL_CERTIFICATE := PRESIGNED
+include $(BUILD_PREBUILT)
\ No newline at end of file
Index: vendor/branch/5058I_VVBG1/packages/apps/Settings/src/com/android/settings/DeviceInfoSettings.java
===================================================================
--- vendor/branch/5058I_VVBG1/packages/apps/Settings/src/com/android/settings/DeviceInfoSettings.java	(revision 0)
+++ vendor/branch/5058I_VVBG1/packages/apps/Settings/src/com/android/settings/DeviceInfoSettings.java	(revision 12956)
@@ -0,0 +1,553 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.PersistableBundle;
+import android.os.SELinux;
+import android.os.SystemClock;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.provider.SearchIndexableResource;
+import android.provider.Settings;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceGroup;
+import android.telephony.CarrierConfigManager;
+import android.text.TextUtils;
+import android.util.Log;
+import android.widget.Toast;
+import android.content.ComponentName;
+
+import com.android.internal.logging.MetricsProto.MetricsEvent;
+import com.android.settings.dashboard.SummaryLoader;
+import com.android.settings.search.BaseSearchIndexProvider;
+import com.android.settings.search.Index;
+import com.android.settings.search.Indexable;
+import com.android.settingslib.DeviceInfoUtils;
+import com.android.settingslib.RestrictedLockUtils;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+
+import com.mediatek.settings.deviceinfo.DeviceInfoSettingsExts;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import static com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
+
+//lance add for Diagnostic @{
+import android.content.ActivityNotFoundException;
+import android.content.pm.PackageManager.NameNotFoundException;
+// @}
+
+public class DeviceInfoSettings extends SettingsPreferenceFragment implements Indexable {
+
+    private static final String LOG_TAG = "DeviceInfoSettings";
+
+    private static final String KEY_MANUAL = "manual";
+	private static final String KEY_PRIVACY_POLICY = "privacy_policy";
+    private static final String KEY_REGULATORY_INFO = "regulatory_info";
+    private static final String KEY_SYSTEM_UPDATE_SETTINGS = "system_update_settings";
+    private static final String PROPERTY_URL_SAFETYLEGAL = "ro.url.safetylegal";
+    private static final String PROPERTY_SELINUX_STATUS = "ro.build.selinux";
+    private static final String KEY_KERNEL_VERSION = "kernel_version";
+    private static final String KEY_BUILD_NUMBER = "build_number";
+    private static final String KEY_DEVICE_MODEL = "device_model";
+    private static final String KEY_SELINUX_STATUS = "selinux_status";
+    private static final String KEY_BASEBAND_VERSION = "baseband_version";
+    private static final String KEY_FIRMWARE_VERSION = "firmware_version";
+    private static final String KEY_SECURITY_PATCH = "security_patch";
+    private static final String KEY_UPDATE_SETTING = "additional_system_update_settings";
+    private static final String KEY_EQUIPMENT_ID = "fcc_equipment_id";
+    private static final String PROPERTY_EQUIPMENT_ID = "ro.ril.fccid";
+    private static final String KEY_DEVICE_FEEDBACK = "device_feedback";
+    private static final String KEY_SAFETY_LEGAL = "safetylegal";
+	private static final String KEY_INFORMED_CONSENT = "informed_consent";//lance add for Diagnostic
+
+    static final int TAPS_TO_BE_A_DEVELOPER = 7;
+
+    long[] mHits = new long[3];
+    int mDevHitCountdown;
+    Toast mDevHitToast;
+
+    private UserManager mUm;
+
+    private EnforcedAdmin mFunDisallowedAdmin;
+    private boolean mFunDisallowedBySystem;
+    private EnforcedAdmin mDebuggingFeaturesDisallowedAdmin;
+    private boolean mDebuggingFeaturesDisallowedBySystem;
+
+    private DeviceInfoSettingsExts mExts;
+
+    @Override
+    protected int getMetricsCategory() {
+        return MetricsEvent.DEVICEINFO;
+    }
+
+    @Override
+    protected int getHelpResource() {
+        return R.string.help_uri_about;
+    }
+
+    @Override
+    public void onCreate(Bundle icicle) {
+        super.onCreate(icicle);
+        mUm = UserManager.get(getActivity());
+
+        addPreferencesFromResource(R.xml.device_info_settings);
+
+        setStringSummary(KEY_FIRMWARE_VERSION, Build.VERSION.RELEASE);
+        findPreference(KEY_FIRMWARE_VERSION).setEnabled(true);
+
+        final String patch = DeviceInfoUtils.getSecurityPatch();
+        if (!TextUtils.isEmpty(patch)) {
+            setStringSummary(KEY_SECURITY_PATCH, patch);
+        } else {
+            getPreferenceScreen().removePreference(findPreference(KEY_SECURITY_PATCH));
+        }
+
+        setValueSummary(KEY_BASEBAND_VERSION, "gsm.version.baseband");
+        setStringSummary(KEY_DEVICE_MODEL, Build.MODEL + DeviceInfoUtils.getMsvSuffix());
+        setValueSummary(KEY_EQUIPMENT_ID, PROPERTY_EQUIPMENT_ID);
+        setStringSummary(KEY_DEVICE_MODEL, Build.MODEL);
+        setStringSummary(KEY_BUILD_NUMBER, Build.DISPLAY);
+        findPreference(KEY_BUILD_NUMBER).setEnabled(true);
+        findPreference(KEY_KERNEL_VERSION).setSummary(DeviceInfoUtils.getFormattedKernelVersion());
+
+        if (!SELinux.isSELinuxEnabled()) {
+            String status = getResources().getString(R.string.selinux_status_disabled);
+            setStringSummary(KEY_SELINUX_STATUS, status);
+        } else if (!SELinux.isSELinuxEnforced()) {
+            String status = getResources().getString(R.string.selinux_status_permissive);
+            setStringSummary(KEY_SELINUX_STATUS, status);
+        }
+
+        // Remove selinux information if property is not present
+        removePreferenceIfPropertyMissing(getPreferenceScreen(), KEY_SELINUX_STATUS,
+                PROPERTY_SELINUX_STATUS);
+
+        // Remove Safety information preference if PROPERTY_URL_SAFETYLEGAL is not set
+        removePreferenceIfPropertyMissing(getPreferenceScreen(), KEY_SAFETY_LEGAL,
+                PROPERTY_URL_SAFETYLEGAL);
+
+        // Remove Equipment id preference if FCC ID is not set by RIL
+        removePreferenceIfPropertyMissing(getPreferenceScreen(), KEY_EQUIPMENT_ID,
+                PROPERTY_EQUIPMENT_ID);
+
+        // Remove Baseband version if wifi-only device
+        if (Utils.isWifiOnly(getActivity())) {
+            getPreferenceScreen().removePreference(findPreference(KEY_BASEBAND_VERSION));
+        }
+
+        // Dont show feedback option if there is no reporter.
+        if (TextUtils.isEmpty(DeviceInfoUtils.getFeedbackReporterPackage(getActivity()))) {
+            getPreferenceScreen().removePreference(findPreference(KEY_DEVICE_FEEDBACK));
+        }
+
+        /*
+         * Settings is a generic app and should not contain any device-specific
+         * info.
+         */
+        final Activity act = getActivity();
+
+        // These are contained by the root preference screen
+        PreferenceGroup parentPreference = getPreferenceScreen();
+
+        /*if (mUm.isAdminUser()) {
+			Log.d(LOG_TAG, "KEY_SYSTEM_UPDATE_SETTINGS!");
+            Utils.updatePreferenceToSpecificActivityOrRemove(act, parentPreference,
+                    KEY_SYSTEM_UPDATE_SETTINGS,
+                    Utils.UPDATE_PREFERENCE_FLAG_SET_TITLE_TO_MATCHING_ACTIVITY);
+        } else {
+            // Remove for secondary users
+            removePreference(KEY_SYSTEM_UPDATE_SETTINGS);
+        }*/
+
+        // Read platform settings for additional system update setting
+        removePreferenceIfBoolFalse(KEY_UPDATE_SETTING,
+                R.bool.config_additional_system_update_setting_enable);
+
+        // Remove manual entry if none present.
+        removePreferenceIfBoolFalse(KEY_MANUAL, R.bool.config_show_manual);
+
+        // Remove regulatory labels if no activity present to handle intent.
+        removePreferenceIfActivityMissing(
+                KEY_REGULATORY_INFO, Settings.ACTION_SHOW_REGULATORY_INFO);
+
+        removePreferenceIfActivityMissing(
+                "safety_info", "android.settings.SHOW_SAFETY_AND_REGULATORY_INFO");
+
+        //lance add for diagnostic @{
+        if(!shouldShowInformedConsent()) {
+            getPreferenceScreen().removePreference(findPreference(KEY_INFORMED_CONSENT));
+        } else {
+            findPreference(KEY_INFORMED_CONSENT).setEnabled(true);
+        }
+        //@}
+
+        ///M:
+        mExts = new DeviceInfoSettingsExts(getActivity(), this);
+        mExts.initMTKCustomization(getPreferenceScreen());
+		
+		if(!checkPackageExist(getActivity(), "com.tct.gdpr")){
+            Preference pref = findPreference(KEY_PRIVACY_POLICY);
+            if (pref != null) {
+                getPreferenceScreen().removePreference(pref);
+            }
+        }
+    }
+	
+	private  boolean checkPackageExist(Context context, String pkg) {
+        final PackageManager packageManager = context.getPackageManager();
+        try {
+            ApplicationInfo applicationInfo = packageManager.getApplicationInfo(pkg, 0);
+            return true;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return false;
+        }
+    }
+	
+    //lance add for diagnostic @{
+    public boolean shouldShowInformedConsent() {
+        return hasDiagnosticApp() && (getResources().getBoolean(R.bool.def_settings_informed_consent_show));   
+    }
+
+    public boolean hasDiagnosticApp() {
+        try {
+            getPackageManager().getApplicationIcon("com.tct.diagnostics");
+            return true;
+        } catch (NameNotFoundException e) {
+            // TODO Auto-generated catch block
+            Log.w(LOG_TAG, "get com.tct.diagnostics failed!");
+            return false;
+        }
+    }
+	
+    private void updateInformedSummary(){
+        Preference pre = findPreference(KEY_INFORMED_CONSENT);
+        if(null != pre){
+            int isOn = Settings.Global.getInt(getContentResolver(), "def.diagnostic.on", 0);
+            pre.setSummary(isOn == 1 ? R.string.informed_consent_on
+                    : R.string.informed_consent_off);
+        }
+    }
+	//@}
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        mDevHitCountdown = getActivity().getSharedPreferences(DevelopmentSettings.PREF_FILE,
+                Context.MODE_PRIVATE).getBoolean(DevelopmentSettings.PREF_SHOW,
+                        android.os.Build.TYPE.equals("eng")) ? -1 : TAPS_TO_BE_A_DEVELOPER;
+        mDevHitToast = null;
+        mFunDisallowedAdmin = RestrictedLockUtils.checkIfRestrictionEnforced(
+                getActivity(), UserManager.DISALLOW_FUN, UserHandle.myUserId());
+        mFunDisallowedBySystem = RestrictedLockUtils.hasBaseUserRestriction(
+                getActivity(), UserManager.DISALLOW_FUN, UserHandle.myUserId());
+        mDebuggingFeaturesDisallowedAdmin = RestrictedLockUtils.checkIfRestrictionEnforced(
+                getActivity(), UserManager.DISALLOW_DEBUGGING_FEATURES, UserHandle.myUserId());
+        mDebuggingFeaturesDisallowedBySystem = RestrictedLockUtils.hasBaseUserRestriction(
+                getActivity(), UserManager.DISALLOW_DEBUGGING_FEATURES, UserHandle.myUserId());
+		updateInformedSummary();//lance add for Diagnostic
+    }
+
+    @Override
+    public boolean onPreferenceTreeClick(Preference preference) {
+        if (preference.getKey().equals(KEY_FIRMWARE_VERSION)) {
+            System.arraycopy(mHits, 1, mHits, 0, mHits.length-1);
+            mHits[mHits.length-1] = SystemClock.uptimeMillis();
+            if (mHits[0] >= (SystemClock.uptimeMillis()-500)) {
+                if (mUm.hasUserRestriction(UserManager.DISALLOW_FUN)) {
+                    if (mFunDisallowedAdmin != null && !mFunDisallowedBySystem) {
+                        RestrictedLockUtils.sendShowAdminSupportDetailsIntent(getActivity(),
+                                mFunDisallowedAdmin);
+                    }
+                    Log.d(LOG_TAG, "Sorry, no fun for you!");
+                    return false;
+                }
+
+                Intent intent = new Intent(Intent.ACTION_MAIN);
+                intent.setClassName("android",
+                        com.android.internal.app.PlatLogoActivity.class.getName());
+                try {
+                    startActivity(intent);
+                } catch (Exception e) {
+                    Log.e(LOG_TAG, "Unable to start activity " + intent.toString());
+                }
+            }
+        } else if (preference.getKey().equals(KEY_BUILD_NUMBER)) {
+            // Don't enable developer options for secondary users.
+            if (!mUm.isAdminUser()) return true;
+
+            // Don't enable developer options until device has been provisioned
+            if (!Utils.isDeviceProvisioned(getActivity())) {
+                return true;
+            }
+
+            if (mUm.hasUserRestriction(UserManager.DISALLOW_DEBUGGING_FEATURES)) {
+                if (mDebuggingFeaturesDisallowedAdmin != null &&
+                        !mDebuggingFeaturesDisallowedBySystem) {
+                    RestrictedLockUtils.sendShowAdminSupportDetailsIntent(getActivity(),
+                            mDebuggingFeaturesDisallowedAdmin);
+                }
+                return true;
+            }
+
+            if (mDevHitCountdown > 0) {
+                mDevHitCountdown--;
+                if (mDevHitCountdown == 0) {
+                    getActivity().getSharedPreferences(DevelopmentSettings.PREF_FILE,
+                            Context.MODE_PRIVATE).edit().putBoolean(
+                                    DevelopmentSettings.PREF_SHOW, true).apply();
+                    if (mDevHitToast != null) {
+                        mDevHitToast.cancel();
+                    }
+                    mDevHitToast = Toast.makeText(getActivity(), R.string.show_dev_on,
+                            Toast.LENGTH_LONG);
+                    mDevHitToast.show();
+                    // This is good time to index the Developer Options
+                    Index.getInstance(
+                            getActivity().getApplicationContext()).updateFromClassNameResource(
+                                    DevelopmentSettings.class.getName(), true, true);
+
+                } else if (mDevHitCountdown > 0
+                        && mDevHitCountdown < (TAPS_TO_BE_A_DEVELOPER-2)) {
+                    if (mDevHitToast != null) {
+                        mDevHitToast.cancel();
+                    }
+                    mDevHitToast = Toast.makeText(getActivity(), getResources().getQuantityString(
+                            R.plurals.show_dev_countdown, mDevHitCountdown, mDevHitCountdown),
+                            Toast.LENGTH_SHORT);
+                    mDevHitToast.show();
+                }
+            } else if (mDevHitCountdown < 0) {
+                if (mDevHitToast != null) {
+                    mDevHitToast.cancel();
+                }
+                mDevHitToast = Toast.makeText(getActivity(), R.string.show_dev_already,
+                        Toast.LENGTH_LONG);
+                mDevHitToast.show();
+            }
+        } else if (preference.getKey().equals(KEY_SECURITY_PATCH)) {
+            /*if (getPackageManager().queryIntentActivities(preference.getIntent(), 0).isEmpty()) {
+                // Don't send out the intent to stop crash
+                Log.w(LOG_TAG, "Stop click action on " + KEY_SECURITY_PATCH + ": "
+                        + "queryIntentActivities() returns empty" );
+                return true;
+            }*/
+        } else if (preference.getKey().equals(KEY_DEVICE_FEEDBACK)) {
+            sendFeedback();
+        } else if(preference.getKey().equals(KEY_SYSTEM_UPDATE_SETTINGS)) {
+            //[BUGFIX]-Mod-BEGIN by TCTNB.yubin.ying,10/11/2016,3069660,
+            /*CarrierConfigManager configManager =
+                    (CarrierConfigManager) getSystemService(Context.CARRIER_CONFIG_SERVICE);
+            PersistableBundle b = configManager.getConfig();
+            if (b.getBoolean(CarrierConfigManager.KEY_CI_ACTION_ON_SYS_UPDATE_BOOL)) {
+                ciActionOnSysUpdate(b);
+            }*/
+            Intent intent = new Intent(Intent.ACTION_MAIN);
+            intent.addCategory(Intent.CATEGORY_LAUNCHER);
+            ComponentName cn = new ComponentName("com.tcl.ota", "com.tcl.ota.SystemUpdatesActivity");
+            intent.setComponent(cn);
+            startActivity(intent);
+            return true;
+            //[BUGFIX]-Mod-END by TCTNB.yubin.ying
+            //lance add for Diagnostic @{
+        }	else if (preference.getKey().equals(KEY_INFORMED_CONSENT)){
+            Intent intent = new Intent("com.tct.diagnostic.INFORMEDCONSENT");
+            try{
+                startActivity(intent);
+            }catch(ActivityNotFoundException e){
+                Log.d(LOG_TAG, "lancelot happened error:this activity can not be found");
+            }
+        }
+		// @}
+        /// M:
+        mExts.onCustomizedPreferenceTreeClick(preference);
+        return super.onPreferenceTreeClick(preference);
+    }
+
+    /**
+     * Trigger client initiated action (send intent) on system update
+     */
+    private void ciActionOnSysUpdate(PersistableBundle b) {
+        String intentStr = b.getString(CarrierConfigManager.
+                KEY_CI_ACTION_ON_SYS_UPDATE_INTENT_STRING);
+        if (!TextUtils.isEmpty(intentStr)) {
+            String extra = b.getString(CarrierConfigManager.
+                    KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_STRING);
+            String extraVal = b.getString(CarrierConfigManager.
+                    KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_VAL_STRING);
+
+            Intent intent = new Intent(intentStr);
+            if (!TextUtils.isEmpty(extra)) {
+                intent.putExtra(extra, extraVal);
+            }
+            Log.d(LOG_TAG, "ciActionOnSysUpdate: broadcasting intent " + intentStr +
+                    " with extra " + extra + ", " + extraVal);
+            getActivity().getApplicationContext().sendBroadcast(intent);
+        }
+    }
+
+    private void removePreferenceIfPropertyMissing(PreferenceGroup preferenceGroup,
+            String preference, String property ) {
+        if (SystemProperties.get(property).equals("")) {
+            // Property is missing so remove preference from group
+            try {
+                preferenceGroup.removePreference(findPreference(preference));
+            } catch (RuntimeException e) {
+                Log.d(LOG_TAG, "Property '" + property + "' missing and no '"
+                        + preference + "' preference");
+            }
+        }
+    }
+
+    private void removePreferenceIfActivityMissing(String preferenceKey, String action) {
+        final Intent intent = new Intent(action);
+        if (getPackageManager().queryIntentActivities(intent, 0).isEmpty()) {
+            Preference pref = findPreference(preferenceKey);
+            if (pref != null) {
+                getPreferenceScreen().removePreference(pref);
+            }
+        }
+    }
+
+    private void removePreferenceIfBoolFalse(String preference, int resId) {
+        if (!getResources().getBoolean(resId)) {
+            Preference pref = findPreference(preference);
+            if (pref != null) {
+                getPreferenceScreen().removePreference(pref);
+            }
+        }
+    }
+
+    private void setStringSummary(String preference, String value) {
+        try {
+            findPreference(preference).setSummary(value);
+        } catch (RuntimeException e) {
+            findPreference(preference).setSummary(
+                getResources().getString(R.string.device_info_default));
+        }
+    }
+
+    private void setValueSummary(String preference, String property) {
+        try {
+            findPreference(preference).setSummary(
+                    SystemProperties.get(property,
+                            getResources().getString(R.string.device_info_default)));
+        } catch (RuntimeException e) {
+            // No recovery
+        }
+    }
+
+    private void sendFeedback() {
+        String reporterPackage = DeviceInfoUtils.getFeedbackReporterPackage(getActivity());
+        if (TextUtils.isEmpty(reporterPackage)) {
+            return;
+        }
+        Intent intent = new Intent(Intent.ACTION_BUG_REPORT);
+        intent.setPackage(reporterPackage);
+        startActivityForResult(intent, 0);
+    }
+
+    private static class SummaryProvider implements SummaryLoader.SummaryProvider {
+
+        private final Context mContext;
+        private final SummaryLoader mSummaryLoader;
+
+        public SummaryProvider(Context context, SummaryLoader summaryLoader) {
+            mContext = context;
+            mSummaryLoader = summaryLoader;
+        }
+
+        @Override
+        public void setListening(boolean listening) {
+            if (listening) {
+                mSummaryLoader.setSummary(this, mContext.getString(R.string.about_summary,
+                        Build.VERSION.RELEASE));
+            }
+        }
+    }
+
+    public static final SummaryLoader.SummaryProviderFactory SUMMARY_PROVIDER_FACTORY
+            = new SummaryLoader.SummaryProviderFactory() {
+        @Override
+        public SummaryLoader.SummaryProvider createSummaryProvider(Activity activity,
+                                                                   SummaryLoader summaryLoader) {
+            return new SummaryProvider(activity, summaryLoader);
+        }
+    };
+
+    /**
+     * For Search.
+     */
+    public static final SearchIndexProvider SEARCH_INDEX_DATA_PROVIDER =
+        new BaseSearchIndexProvider() {
+
+            @Override
+            public List<SearchIndexableResource> getXmlResourcesToIndex(
+                    Context context, boolean enabled) {
+                final SearchIndexableResource sir = new SearchIndexableResource(context);
+                sir.xmlResId = R.xml.device_info_settings;
+                return Arrays.asList(sir);
+            }
+
+            @Override
+            public List<String> getNonIndexableKeys(Context context) {
+                final List<String> keys = new ArrayList<String>();
+                if (isPropertyMissing(PROPERTY_SELINUX_STATUS)) {
+                    keys.add(KEY_SELINUX_STATUS);
+                }
+                if (isPropertyMissing(PROPERTY_URL_SAFETYLEGAL)) {
+                    keys.add(KEY_SAFETY_LEGAL);
+                }
+                if (isPropertyMissing(PROPERTY_EQUIPMENT_ID)) {
+                    keys.add(KEY_EQUIPMENT_ID);
+                }
+                // Remove Baseband version if wifi-only device
+                if (Utils.isWifiOnly(context)) {
+                    keys.add((KEY_BASEBAND_VERSION));
+                }
+                // Dont show feedback option if there is no reporter.
+                if (TextUtils.isEmpty(DeviceInfoUtils.getFeedbackReporterPackage(context))) {
+                    keys.add(KEY_DEVICE_FEEDBACK);
+                }
+                final UserManager um = UserManager.get(context);
+                // TODO: system update needs to be fixed for non-owner user b/22760654
+                if (!um.isAdminUser()) {
+                    keys.add(KEY_SYSTEM_UPDATE_SETTINGS);
+                }
+                if (!context.getResources().getBoolean(
+                        R.bool.config_additional_system_update_setting_enable)) {
+                    keys.add(KEY_UPDATE_SETTING);
+                }
+                return keys;
+            }
+
+            private boolean isPropertyMissing(String property) {
+                return SystemProperties.get(property).equals("");
+            }
+        };
+
+}
Index: vendor/branch/5058I_VVBG1/packages/apps/Settings/res/xml/device_info_settings.xml
===================================================================
--- vendor/branch/5058I_VVBG1/packages/apps/Settings/res/xml/device_info_settings.xml	(revision 0)
+++ vendor/branch/5058I_VVBG1/packages/apps/Settings/res/xml/device_info_settings.xml	(revision 12956)
@@ -0,0 +1,187 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2008 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:settings="http://schemas.android.com/apk/res-auto"
+        android:title="@string/about_settings">
+
+        <!-- System update settings - launches activity -->
+        <PreferenceScreen android:key="system_update_settings"
+                android:title="@string/system_update_settings_list_item_title"
+                android:summary="@string/system_update_settings_list_item_summary">
+            <intent android:action="android.settings.SYSTEM_UPDATE_SETTINGS" />
+        </PreferenceScreen>
+
+
+        <PreferenceScreen android:key="additional_system_update_settings"
+                          android:title="@string/additional_system_update_settings_list_item_title">
+            <intent android:action="android.intent.action.MAIN"
+                    android:targetPackage="@string/additional_system_update"
+                    android:targetClass="@string/additional_system_update_menu" />
+        </PreferenceScreen>
+
+	<!--///M: MTK_SYSTEM_UPDATE -->
+	<PreferenceScreen
+	     android:key="mtk_system_update">
+	</PreferenceScreen>
+
+	<!--///M: MTK_SYSTEM_UPDATE_SUPPORT -->
+	<PreferenceScreen
+	     android:key="mtk_software_update"
+	     android:title="@string/software_updates_more_title" 
+	     android:summary="@string/software_updates_more_summary" >
+	</PreferenceScreen>
+
+        <!-- lance add for Diagnostic -->
+        <Preference android:key="informed_consent"
+                android:enabled="false"
+                android:shouldDisableView="false"
+                android:title="@string/informed_consent"
+                android:summary="@string/informed_consent_off"/>
+
+        <!-- Device status - launches activity -->
+        <PreferenceScreen android:key="status_info"
+                android:title="@string/device_status"
+                android:summary="@string/device_status_summary"
+                android:fragment="com.android.settings.deviceinfo.Status">
+        </PreferenceScreen>
+
+        <!-- Manual -->
+        <PreferenceScreen
+                android:key="manual"
+                android:title="@string/manual">
+            <intent android:action="android.settings.SHOW_MANUAL" />
+        </PreferenceScreen>
+
+        <!-- Legal Information -->
+        <PreferenceScreen
+                android:key="container"
+                android:title="@string/legal_information"
+                android:fragment="com.android.settings.LegalSettings" />
+
+        <PreferenceScreen
+                android:key="regulatory_info"
+                android:title="@string/regulatory_labels">
+            <intent android:action="android.settings.SHOW_REGULATORY_INFO" />
+        </PreferenceScreen>
+
+        <PreferenceScreen
+                android:key="safety_info"
+                android:title="@string/safety_and_regulatory_info">
+                <intent android:action="android.settings.SHOW_SAFETY_AND_REGULATORY_INFO" />
+        </PreferenceScreen>
+
+        <!-- Feedback on the device -->
+        <PreferenceScreen android:key="device_feedback"
+                android:title="@string/device_feedback">
+        </PreferenceScreen>
+
+		<PreferenceScreen
+                android:key="privacy_policy"
+                android:title="@string/policy">
+            <intent android:action="com.tct.gdpr.PRIVACYPOLICY"/>
+        </PreferenceScreen>
+		
+        <!-- Device hardware model -->
+        <com.android.settings.DividerPreference
+                android:key="device_model"
+                android:enabled="false"
+                android:shouldDisableView="false"
+                android:selectable="false"
+                android:title="@string/model_info"
+                android:summary="@string/device_info_default"
+                settings:allowDividerAbove="true"
+                settings:allowDividerBelow="true"/>
+
+        <!-- Device firmware version -->
+        <Preference android:key="firmware_version"
+                android:enabled="false"
+                android:shouldDisableView="false"
+                android:title="@string/firmware_version"
+                android:summary="@string/device_info_default"/>
+
+        <!-- Security patch level -->
+        <PreferenceScreen android:key="security_patch"
+                android:title="@string/security_patch"
+                android:summary="@string/device_info_default">
+                <!--<intent android:action="android.intent.action.VIEW"
+                        android:data="https://source.android.com/security/bulletin/" />-->
+        </PreferenceScreen>
+
+        <!-- Device FCC equipment id -->
+        <com.android.settings.DividerPreference
+                android:key="fcc_equipment_id"
+                android:enabled="false"
+                android:shouldDisableView="false"
+                android:selectable="false"
+                android:title="@string/fcc_equipment_id"
+                android:summary="@string/device_info_default"
+                settings:allowDividerAbove="true"
+                settings:allowDividerBelow="true"/>
+
+        <!-- Device Baseband version -->
+        <com.android.settings.DividerPreference
+                android:key="baseband_version"
+                android:enabled="false"
+                android:shouldDisableView="false"
+                android:selectable="false"
+                android:title="@string/baseband_version"
+                android:summary="@string/device_info_default"
+                settings:allowDividerAbove="true"
+                settings:allowDividerBelow="true"/>
+
+        <!-- ///M: Device Baseband version2 -->
+        <Preference android:key="baseband_version_2"
+            style="?android:preferenceInformationStyle" 
+            android:title="@string/baseband_version"
+            android:summary="@string/device_info_default" />
+
+        <!-- Device Kernel version -->
+        <com.android.settings.DividerPreference
+                android:key="kernel_version"
+                android:enabled="false"
+                android:shouldDisableView="false"
+                android:selectable="false"
+                android:title="@string/kernel_version"
+                android:summary="@string/device_info_default"
+                settings:allowDividerAbove="true"
+                settings:allowDividerBelow="true"/>
+
+        <!-- Detailed build version -->
+        <Preference android:key="build_number"
+                android:enabled="false"
+                android:shouldDisableView="false"
+                android:title="@string/build_number"
+                android:summary="@string/device_info_default"/>
+
+        <!-- SELinux status information -->
+        <com.android.settings.DividerPreference
+                android:key="selinux_status"
+                android:enabled="false"
+                android:shouldDisableView="false"
+                android:selectable="false"
+                android:title="@string/selinux_status"
+                android:summary="@string/selinux_status_enforcing"
+                settings:allowDividerAbove="true"
+                settings:allowDividerBelow="true"/>
+
+        <!-- ///M: Custom build version -->
+        <Preference android:key="custom_build_version"
+                style="?android:preferenceInformationStyle"
+                android:title="@string/custom_build_version"
+                android:summary="@string/device_info_default" />
+
+</PreferenceScreen>
