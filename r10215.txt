Index: vendor/branch/5058Y_ALIE/packages/apps/Settings/src/com/android/settings/bluetooth/BluetoothSettings.java
===================================================================
--- vendor/branch/5058Y_ALIE/packages/apps/Settings/src/com/android/settings/bluetooth/BluetoothSettings.java	(revision 10214)
+++ vendor/branch/5058Y_ALIE/packages/apps/Settings/src/com/android/settings/bluetooth/BluetoothSettings.java	(revision 10215)
@@ -30,6 +30,7 @@
 import android.os.Handler;
 import android.os.Message;
 import android.provider.Settings;
+import android.support.v14.preference.SwitchPreference;
 import android.support.v7.preference.Preference;
 import android.support.v7.preference.PreferenceCategory;
 import android.support.v7.preference.PreferenceGroup;
@@ -56,6 +57,7 @@
 import com.android.settings.widget.SwitchBar;
 import com.android.settingslib.bluetooth.BluetoothCallback;
 import com.android.settingslib.bluetooth.BluetoothDeviceFilter;
+import com.android.settingslib.bluetooth.BluetoothDiscoverableTimeoutReceiver;
 import com.android.settingslib.bluetooth.CachedBluetoothDevice;
 import com.android.settingslib.bluetooth.LocalBluetoothManager;
 
@@ -90,6 +92,7 @@
     private BluetoothEnabler mBluetoothEnabler;
 
     private PreferenceGroup mPairedDevicesCategory;
+    private SwitchPreference mDiscoverableTimeoutSwitchPreference;
     private PreferenceGroup mAvailableDevicesCategory;
     private boolean mAvailableDevicesCategoryIsPresent;
 
@@ -102,7 +105,7 @@
 
     private boolean fromDrawer;
 
-
+    private int a = 120;
     // accessed from inner class (not private to avoid thunks)
     Preference mMyDevicePreference;
 
@@ -113,7 +116,29 @@
             startScanning();
         }
     };
-
+    private Handler handler = new Handler();
+    private Runnable runnable = new Runnable() {
+        @Override
+        public void run() {
+            if (mDiscoverableTimeoutSwitchPreference.isChecked()) {
+                Log.d("wanghongjian", "updateContent: 2");
+                if (a <= 0) {
+                    Log.d("wanghongjian", "updateContent: 3");
+                    mDiscoverableTimeoutSwitchPreference.setChecked(false);
+                    handler.removeCallbacks(runnable);
+                    return;
+                }
+                Log.d("wanghongjian", "updateContent: 4");
+                    Log.d("wanghongjian", "updateContent: 5");
+                    String textTimeout = formatTimeRemaining(a);
+                    a = a - 1;
+                    mDiscoverableTimeoutSwitchPreference.setSummaryOn(getPrefContext().getString(R.string.bluetooth_is_discoverable,
+                            textTimeout));
+                    handler.postDelayed(runnable,1000);
+                    Log.d("wanghongjian", "updateContent: 6" + a + "\n" + textTimeout);
+            }
+        }
+    };
     private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {
@@ -125,7 +150,7 @@
                 updateDeviceName(context);
             }
 
-            if (state == BluetoothAdapter.STATE_ON) {
+            if (state == BluetoothAdapter.STATE_ON && mDiscoverableTimeoutSwitchPreference.isChecked()) {
                 mInitiateDiscoverable = true;
             }
         }
@@ -156,8 +181,14 @@
     public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
         mInitialScanStarted = false;
-        mInitiateDiscoverable = true;
-
+        if (!mDiscoverableTimeoutSwitchPreference.isChecked()) {
+            mLocalAdapter.setScanMode(BluetoothAdapter.SCAN_MODE_CONNECTABLE);
+        }
+        if(savedInstanceState != null){
+            mDiscoverableTimeoutSwitchPreference.setChecked(savedInstanceState.getBoolean("state"));
+            a = savedInstanceState.getInt("number");
+            handler.postDelayed(runnable,1000);
+        }
         final SettingsActivity activity = (SettingsActivity) getActivity();
         mSwitchBar = activity.getSwitchBar();
 
@@ -166,6 +197,14 @@
     }
 
     @Override
+    public void onSaveInstanceState(Bundle outState) {
+        outState.putInt("number",a);
+        outState.putBoolean("state",mDiscoverableTimeoutSwitchPreference.isChecked());
+
+        super.onSaveInstanceState(outState);
+    }
+
+    @Override
     public void onDestroyView() {
         super.onDestroyView();
 
@@ -175,6 +214,12 @@
     @Override
     void addPreferencesForActivity() {
         addPreferencesFromResource(R.xml.bluetooth_settings);
+        mDiscoverableTimeoutSwitchPreference = new SwitchPreference(getPrefContext());
+        mDiscoverableTimeoutSwitchPreference.setKey("discoverable_timeout");
+        mDiscoverableTimeoutSwitchPreference.setTitle("alcatel SHINE LITE");
+        mDiscoverableTimeoutSwitchPreference.setChecked(false);
+        mDiscoverableTimeoutSwitchPreference.setOrder(0);
+        getPreferenceScreen().addPreference(mDiscoverableTimeoutSwitchPreference);
 
         mPairedDevicesCategory = new PreferenceCategory(getPrefContext());
         mPairedDevicesCategory.setKey(KEY_PAIRED_DEVICES);
@@ -207,9 +252,9 @@
         }
 
         super.onResume();
-
-        mInitiateDiscoverable = true;
-
+        if (!mDiscoverableTimeoutSwitchPreference.isChecked()) {
+            mLocalAdapter.setScanMode(BluetoothAdapter.SCAN_MODE_CONNECTABLE);
+        }
         if (isUiRestricted()) {
             setDeviceListGroup(getPreferenceScreen());
             if (!isUiRestrictedByOnlyAdmin()) {
@@ -353,10 +398,41 @@
                     break;
                 }
                 getPreferenceScreen().removeAll();
+                getPreferenceScreen().addPreference(mDiscoverableTimeoutSwitchPreference);
                 getPreferenceScreen().addPreference(mPairedDevicesCategory);
                 getPreferenceScreen().addPreference(mAvailableDevicesCategory);
                 getPreferenceScreen().addPreference(mMyDevicePreference);
+                mDiscoverableTimeoutSwitchPreference.setSummaryOff("Not visible to other Bluetooth devices");
+                mDiscoverableTimeoutSwitchPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                    @Override
+                    public boolean onPreferenceChange(Preference preference, Object newValue) {
+                        Log.d("wanghongjian", "onPreferenceChange: change2");
+                        final String key = preference.getKey();
+                        if (key.equals("discoverable_timeout")) {
+                            Log.d("wanghongjian", "onPreferenceChange: change3");
+                            if (mDiscoverableTimeoutSwitchPreference.isChecked() != (Boolean) newValue) {
+                                boolean value = (Boolean) (newValue);
+                                mDiscoverableTimeoutSwitchPreference.setChecked(value);
+                            }
+                            if (mDiscoverableTimeoutSwitchPreference.isChecked()) {
+                                Log.d("wanghongjian", "updateContent: 1");
+                                //BluetoothDiscoverableTimeoutReceiver.setDiscoverableAlarm(getPrefContext(), 120000);
+                                mLocalAdapter.setScanMode(BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE);
+                                a = 120 ;
+                                handler.postDelayed(runnable, 1000);
+                            } else {
+                                //BluetoothDiscoverableTimeoutReceiver.cancelDiscoverableAlarm(getPrefContext());
+                                //BluetoothDiscoverableTimeoutReceiver.setDiscoverableAlarm(getPrefContext(), 0);
 
+                                handler.removeCallbacks(runnable);
+                                mDiscoverableTimeoutSwitchPreference.setChecked(false);
+                                mLocalAdapter.setScanMode(BluetoothAdapter.SCAN_MODE_CONNECTABLE);
+                            }
+                        }
+                        return true;
+                    }
+                });
+
                 // Paired devices category
                 addDeviceCategory(mPairedDevicesCategory,
                         R.string.bluetooth_preference_paired_devices,
@@ -431,6 +507,20 @@
         }
     }
 
+
+
+    private static String formatTimeRemaining(int timeout) {
+        StringBuilder sb = new StringBuilder(6);    // "mmm:ss"
+        int min = timeout / 60;
+        sb.append(min).append(':');
+        int sec = timeout - (min * 60);
+        if (sec < 10) {
+            sb.append('0');
+        }
+        sb.append(sec);
+        return sb.toString();
+    }
+
     private void setOffMessage() {
         final TextView emptyView = getEmptyTextView();
         if (emptyView == null) {
@@ -477,7 +567,7 @@
         super.onBluetoothStateChanged(bluetoothState);
         // If BT is turned off/on staying in the same BT Settings screen
         // discoverability to be set again
-        if (BluetoothAdapter.STATE_ON == bluetoothState)
+        if ((BluetoothAdapter.STATE_ON == bluetoothState) && (mDiscoverableTimeoutSwitchPreference.isChecked()))
             mInitiateDiscoverable = true;
         updateContent(bluetoothState);
     }
