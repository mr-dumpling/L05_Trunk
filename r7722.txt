Index: vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/mediatek/settings/deviceinfo/DeviceInfoSettingsExts.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/mediatek/settings/deviceinfo/DeviceInfoSettingsExts.java	(revision 7721)
+++ vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/mediatek/settings/deviceinfo/DeviceInfoSettingsExts.java	(revision 7722)
@@ -1,276 +0,0 @@
-package com.mediatek.settings.deviceinfo;
-
-import android.app.Activity;
-import android.content.ComponentName;
-import android.content.Intent;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.content.res.Resources;
-import android.os.Build;
-import android.os.SystemProperties;
-import android.os.UserHandle;
-import android.support.v14.preference.PreferenceFragment;
-import android.support.v7.preference.PreferenceScreen;
-import android.support.v7.preference.Preference;
-import android.support.v7.preference.PreferenceGroup;
-import android.telephony.TelephonyManager;
-import android.util.Log;
-
-import com.android.settings.R;
-import com.mediatek.settings.cdma.CdmaUtils;
-import com.mediatek.settings.ext.IDeviceInfoSettingsExt;
-import com.mediatek.settings.FeatureOption;
-import com.mediatek.settings.UtilsExt;
-
-import java.util.List;
-import java.util.Locale;
-
-public class DeviceInfoSettingsExts {
-    private static final String TAG = "DeviceInfoSettings";
-
-    private static final String KEY_BUILD_NUMBER = "build_number";
-    private static final String KEY_DEVICE_MODEL = "device_model";
-    private static final String KEY_BASEBAND_VERSION = "baseband_version";
-    private static final String KEY_MTK_SYSTEM_UPDATE = "mtk_system_update";
-    private static final String KEY_MTK_SOFTWARE_UPDATE = "mtk_software_update";
-    private static final String KEY_BASEBAND_VERSION_2 = "baseband_version_2";
-    private static final String KEY_CUSTOM_BUILD_VERSION = "custom_build_version";
-    private static final String PROPERTY_CUSTOM_BUILD_VERSION = "ro.build.hardware.version";
-    private static final String KEY_CDMA_EPUSH = "cdma_epush";
-    private static final String KEY_SYSTEM_UPDATE_SETTINGS = "system_update_settings";
-
-    private IDeviceInfoSettingsExt mExt;
-    private Activity mActivity;
-    private PreferenceScreen mRootContainer;
-    private PreferenceFragment mPreferenceFragment;
-    private Resources mRes;
-
-    public DeviceInfoSettingsExts(Activity activity, PreferenceFragment fragment) {
-        mActivity = activity;
-        mPreferenceFragment = fragment;
-        mRootContainer = fragment.getPreferenceScreen();
-        mExt = UtilsExt.getDeviceInfoSettingsPlugin(activity);
-        mRes = mActivity.getResources();
-    }
-
-    public void initMTKCustomization(PreferenceGroup parentPreference) {
-        // /M: System and software update.
-        boolean isOwner = UserHandle.myUserId() == UserHandle.USER_OWNER;
-        boolean isSystemUpdateSupport = FeatureOption.MTK_SYSTEM_UPDATE_SUPPORT
-                || FeatureOption.MTK_MDM_FUMO || FeatureOption.MTK_FOTA_ENTRY;
-        boolean isSoftwareUpdateSupport = FeatureOption.MTK_MDM_SCOMO
-                || FeatureOption.MTK_SCOMO_ENTRY;
-        Log.d(TAG, "isOwner : " + isOwner + " isSystemUpdateSupport : "
-                + isSystemUpdateSupport + " isSoftwareUpdateSupport : "
-                + isSoftwareUpdateSupport);
-        if (!isOwner || !isSystemUpdateSupport) {
-            removePreference(findPreference(KEY_MTK_SYSTEM_UPDATE));
-        } else {
-            // M: if this entrance exists ,remove the google default OTA entrance
-             Preference pref = findPreference(KEY_SYSTEM_UPDATE_SETTINGS);
-             if (pref != null) {
-                removePreference(pref);
-                Log.d(TAG, "reomve the google default OTA entrance for system updates");
-             }
-            updateTitleToActivityLabel(KEY_MTK_SYSTEM_UPDATE);
-        }
-
-        if (!isOwner || !isSoftwareUpdateSupport) {
-            removePreference(findPreference(KEY_MTK_SOFTWARE_UPDATE));
-        }
-
-        // /M: Support Gemini feature and C+D two modem..
-        initBasebandVersion();
-
-        // /M: Customize for operator.
-        mExt.updateSummary(findPreference(KEY_DEVICE_MODEL), SystemProperties.get("ro.product.name"),
-                getString(R.string.device_info_default));
-        mExt.updateSummary(findPreference(KEY_BUILD_NUMBER), Build.DISPLAY,
-                getString(R.string.device_info_default));
-        mExt.addEpushPreference(mRootContainer);
-
-        // /M: Add custom build version.
-        setValueSummary(KEY_CUSTOM_BUILD_VERSION, PROPERTY_CUSTOM_BUILD_VERSION);
-        if (FeatureOption.MTK_A1_FEATURE) {
-            removePreference(findPreference(KEY_CUSTOM_BUILD_VERSION));
-        }
-    }
-
-    private void updateTitleToActivityLabel(String key) {
-       Preference preference = findPreference(key);
-       if (preference == null) {
-           return ;
-       }
-       Intent intent = new Intent(Intent.ACTION_MAIN, null);
-       if (FeatureOption.MTK_SYSTEM_UPDATE_SUPPORT) {
-           intent.setClassName("com.mediatek.systemupdate",
-                           "com.mediatek.systemupdate.MainEntry");
-       } else if (FeatureOption.MTK_FOTA_ENTRY) {
-           intent.setClassName("com.mediatek.dm",
-                            "com.mediatek.dm.fumo.DmEntry");
-       } else if (FeatureOption.MTK_MDM_FUMO) {
-           ///Just for operator, maybe will phaseout in furter.
-           intent.setClassName("com.mediatek.mediatekdm",
-                             "com.mediatek.mediatekdm.fumo.DmEntry");
-       }
-
-       if (intent != null) {
-            // Find the activity that is in the system image
-            PackageManager pm = mActivity.getPackageManager();
-            List<ResolveInfo> list = pm.queryIntentActivities(intent, 0);
-            int listSize = list.size();
-            for (int i = 0; i < listSize; i++) {
-                ResolveInfo resolveInfo = list.get(i);
-                if ((resolveInfo.activityInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM)
-                        != 0) {
-                    // Set the preference title to the activity's label
-                    CharSequence title = resolveInfo.loadLabel(pm);
-                    preference.setTitle(title);
-                    Log.d(TAG, "KEY_MTK_SYSTEM_UPDATE : " + title);
-                    break;
-                }
-            }
-        }
-    }
-
-    private void initBasebandVersion() {
-        String baseband = "gsm.version.baseband";
-        //setValueSummary(KEY_BASEBAND_VERSION, baseband);
-        setStringSummary(KEY_BASEBAND_VERSION, getBaseVersion());
-        // If C2K support but only one modem (C2K modem merged), do not show CDMA baseband version
-        if (FeatureOption.MTK_C2K_SUPPORT && !onlyOneModem()) {
-            String baseband2 = "cdma.version.baseband";
-            Log.d(TAG, "baseband2 = " + baseband2);
-            setValueSummary(KEY_BASEBAND_VERSION_2, baseband2);
-            updateBasebandTitle();
-        } else {
-            removePreference(findPreference(KEY_BASEBAND_VERSION_2));
-        }
-    }
-
-    private Preference findPreference(String key) {
-        return mPreferenceFragment.findPreference(key);
-    }
-
-    private void removePreference(Preference preference) {
-        mRootContainer.removePreference(preference);
-    }
-
-    private String getString(int id) {
-        return mRes.getString(id);
-    }
-
-    private void setValueSummary(String preference, String property) {
-        try {
-            findPreference(preference).setSummary(
-                    SystemProperties.get(property, getString(R.string.device_info_default)));
-        } catch (RuntimeException e) {
-            // No recovery
-        }
-    }
-
-    private void setStringSummary(String preference, String value) {
-        try {
-            findPreference(preference).setSummary(value);
-        } catch (RuntimeException e) {
-            findPreference(preference).setSummary(getString(R.string.device_info_default));
-        }
-    }
-
-    // Support DSDS feature and C+D two modem.
-    private void updateBasebandTitle() {
-        String basebandversion = getString(R.string.baseband_version);
-        String slot1;
-        String slot2;
-
-        if (FeatureOption.MTK_C2K_SUPPORT) {
-            Locale tr = Locale.getDefault(); // For Chinese there is no space
-            slot1 = "GSM " + basebandversion;
-            slot2 = "CDMA " + basebandversion;
-            if (tr.getCountry().equals(Locale.CHINA.getCountry())
-                    || tr.getCountry().equals(Locale.TAIWAN.getCountry())) {
-                slot1 = slot1.replace("GSM ", "GSM");
-                slot2 = slot2.replace("CDMA ", "CDMA"); // delete the space
-            }
-        } else {
-            slot1 = basebandversion
-                    + getString(R.string.status_imei_slot1).replace(
-                            getString(R.string.status_imei), " ");
-            slot2 = basebandversion
-                    + getString(R.string.status_imei_slot2).replace(
-                            getString(R.string.status_imei), " ");
-        }
-        if (findPreference(KEY_BASEBAND_VERSION) != null) {
-            findPreference(KEY_BASEBAND_VERSION).setTitle(slot1);
-            Log.d(TAG, "set Baseband, solt1 = " + slot1);
-        }
-        if (findPreference(KEY_BASEBAND_VERSION_2) != null) {
-            findPreference(KEY_BASEBAND_VERSION_2).setTitle(slot2);
-            Log.d(TAG, "set Baseband, solt2 = " + slot2);
-        }
-    }
-
-    public void onCustomizedPreferenceTreeClick(Preference preference) {
-        if (preference.getKey().equals(KEY_MTK_SYSTEM_UPDATE)) {
-            systemUpdateEntrance(preference);
-        } else if (preference.getKey().equals(KEY_MTK_SOFTWARE_UPDATE)) {
-            softwareUpdateEntrance(preference);
-        } else if (preference.getKey().equals(KEY_CDMA_EPUSH)) {
-            startActivity("com.ctc.epush", "com.ctc.epush.IndexActivity");
-        }
-    }
-
-    private void systemUpdateEntrance(Preference preference) {
-        if (FeatureOption.MTK_SYSTEM_UPDATE_SUPPORT) {
-            startActivity("com.mediatek.systemupdate",
-                    "com.mediatek.systemupdate.MainEntry");
-        } else if (FeatureOption.MTK_MDM_FUMO || FeatureOption.MTK_FOTA_ENTRY) {
-            sendBroadcast("com.mediatek.DMSWUPDATE");
-        }
-    }
-
-    private void softwareUpdateEntrance(Preference preference) {
-        if (FeatureOption.MTK_MDM_SCOMO) {
-            startActivity("com.mediatek.mediatekdm",
-                    "com.mediatek.mediatekdm.scomo.DmScomoActivity");
-        } else if (FeatureOption.MTK_SCOMO_ENTRY) {
-            startActivity("com.mediatek.dm",
-                    "com.mediatek.dm.scomo.DmScomoActivity");
-        }
-    }
-
-    private void startActivity(String className, String activityName) {
-        Intent intent = new Intent(Intent.ACTION_MAIN, null);
-        ComponentName cn = new ComponentName(className, activityName);
-        intent.setComponent(cn);
-        if (mActivity.getPackageManager().resolveActivity(intent, 0) != null) {
-            mActivity.startActivity(intent);
-        } else {
-            Log.e(TAG, "Unable to start activity " + intent.toString());
-        }
-    }
-
-    private void sendBroadcast(String actionName) {
-        Intent intent = new Intent();
-        intent.setAction(actionName);
-        mActivity.sendBroadcast(intent);
-    }
-
-    private boolean onlyOneModem() {
-        String value = SystemProperties.get("ro.mtk_ril_mode", "");
-        return value.contains("1rild");
-    }
-
-    private String getBaseVersion(){
-        String strVrsion =  SystemProperties.get("gsm.version.baseband", getString(R.string.device_info_default));
-        Log.d("mhw","strVrsion1: " + strVrsion);
-        int pos = strVrsion.lastIndexOf(',');
-        Log.d("mhw","pos: "+pos+"");
-        if (pos > 0) {
-            strVrsion = strVrsion.substring(0, pos);
-            Log.d("mhw","strVrsion2: " + strVrsion);
-        }
-        return strVrsion;
-    }
-}
Index: vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/android/settings/DeviceInfoSettings.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/android/settings/DeviceInfoSettings.java	(revision 7721)
+++ vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/android/settings/DeviceInfoSettings.java	(revision 7722)
@@ -1,532 +0,0 @@
-/*
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.settings;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Build;
-import android.os.Bundle;
-import android.os.PersistableBundle;
-import android.os.SELinux;
-import android.os.SystemClock;
-import android.os.SystemProperties;
-import android.os.UserHandle;
-import android.os.UserManager;
-import android.provider.SearchIndexableResource;
-import android.provider.Settings;
-import android.support.v7.preference.Preference;
-import android.support.v7.preference.PreferenceGroup;
-import android.telephony.CarrierConfigManager;
-import android.text.TextUtils;
-import android.util.Log;
-import android.widget.Toast;
-import android.content.ComponentName;
-
-import com.android.internal.logging.MetricsProto.MetricsEvent;
-import com.android.settings.dashboard.SummaryLoader;
-import com.android.settings.search.BaseSearchIndexProvider;
-import com.android.settings.search.Index;
-import com.android.settings.search.Indexable;
-import com.android.settingslib.DeviceInfoUtils;
-import com.android.settingslib.RestrictedLockUtils;
-
-import com.mediatek.settings.deviceinfo.DeviceInfoSettingsExts;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
-
-//lance add for Diagnostic @{
-import android.content.ActivityNotFoundException;
-import android.content.pm.PackageManager.NameNotFoundException;
-// @}
-
-public class DeviceInfoSettings extends SettingsPreferenceFragment implements Indexable {
-
-    private static final String LOG_TAG = "DeviceInfoSettings";
-
-    private static final String KEY_MANUAL = "manual";
-    private static final String KEY_REGULATORY_INFO = "regulatory_info";
-    private static final String KEY_SYSTEM_UPDATE_SETTINGS = "system_update_settings";
-    private static final String PROPERTY_URL_SAFETYLEGAL = "ro.url.safetylegal";
-    private static final String PROPERTY_SELINUX_STATUS = "ro.build.selinux";
-    private static final String KEY_KERNEL_VERSION = "kernel_version";
-    private static final String KEY_BUILD_NUMBER = "build_number";
-    private static final String KEY_DEVICE_MODEL = "device_model";
-    private static final String KEY_SELINUX_STATUS = "selinux_status";
-    private static final String KEY_BASEBAND_VERSION = "baseband_version";
-    private static final String KEY_FIRMWARE_VERSION = "firmware_version";
-    private static final String KEY_SECURITY_PATCH = "security_patch";
-    private static final String KEY_UPDATE_SETTING = "additional_system_update_settings";
-    private static final String KEY_EQUIPMENT_ID = "fcc_equipment_id";
-    private static final String PROPERTY_EQUIPMENT_ID = "ro.ril.fccid";
-    private static final String KEY_DEVICE_FEEDBACK = "device_feedback";
-    private static final String KEY_SAFETY_LEGAL = "safetylegal";
-	private static final String KEY_INFORMED_CONSENT = "informed_consent";//lance add for Diagnostic
-
-    static final int TAPS_TO_BE_A_DEVELOPER = 7;
-
-    long[] mHits = new long[3];
-    int mDevHitCountdown;
-    Toast mDevHitToast;
-
-    private UserManager mUm;
-
-    private EnforcedAdmin mFunDisallowedAdmin;
-    private boolean mFunDisallowedBySystem;
-    private EnforcedAdmin mDebuggingFeaturesDisallowedAdmin;
-    private boolean mDebuggingFeaturesDisallowedBySystem;
-
-    private DeviceInfoSettingsExts mExts;
-
-    @Override
-    protected int getMetricsCategory() {
-        return MetricsEvent.DEVICEINFO;
-    }
-
-    @Override
-    protected int getHelpResource() {
-        return R.string.help_uri_about;
-    }
-
-    @Override
-    public void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-        mUm = UserManager.get(getActivity());
-
-        addPreferencesFromResource(R.xml.device_info_settings);
-
-        setStringSummary(KEY_FIRMWARE_VERSION, Build.VERSION.RELEASE);
-        findPreference(KEY_FIRMWARE_VERSION).setEnabled(true);
-
-        final String patch = DeviceInfoUtils.getSecurityPatch();
-        if (!TextUtils.isEmpty(patch)) {
-            setStringSummary(KEY_SECURITY_PATCH, patch);
-        } else {
-            getPreferenceScreen().removePreference(findPreference(KEY_SECURITY_PATCH));
-        }
-
-        setValueSummary(KEY_BASEBAND_VERSION, "gsm.version.baseband");
-        setStringSummary(KEY_DEVICE_MODEL, Build.MODEL + DeviceInfoUtils.getMsvSuffix());
-        setValueSummary(KEY_EQUIPMENT_ID, PROPERTY_EQUIPMENT_ID);
-        setStringSummary(KEY_DEVICE_MODEL, SystemProperties.get("ro.product.name"));
-        setStringSummary(KEY_BUILD_NUMBER, Build.DISPLAY);
-        findPreference(KEY_BUILD_NUMBER).setEnabled(true);
-        findPreference(KEY_KERNEL_VERSION).setSummary(DeviceInfoUtils.getFormattedKernelVersion());
-
-        if (!SELinux.isSELinuxEnabled()) {
-            String status = getResources().getString(R.string.selinux_status_disabled);
-            setStringSummary(KEY_SELINUX_STATUS, status);
-        } else if (!SELinux.isSELinuxEnforced()) {
-            String status = getResources().getString(R.string.selinux_status_permissive);
-            setStringSummary(KEY_SELINUX_STATUS, status);
-        }
-
-        // Remove selinux information if property is not present
-        removePreferenceIfPropertyMissing(getPreferenceScreen(), KEY_SELINUX_STATUS,
-                PROPERTY_SELINUX_STATUS);
-
-        // Remove Safety information preference if PROPERTY_URL_SAFETYLEGAL is not set
-        removePreferenceIfPropertyMissing(getPreferenceScreen(), KEY_SAFETY_LEGAL,
-                PROPERTY_URL_SAFETYLEGAL);
-
-        // Remove Equipment id preference if FCC ID is not set by RIL
-        removePreferenceIfPropertyMissing(getPreferenceScreen(), KEY_EQUIPMENT_ID,
-                PROPERTY_EQUIPMENT_ID);
-
-        // Remove Baseband version if wifi-only device
-        if (Utils.isWifiOnly(getActivity())) {
-            getPreferenceScreen().removePreference(findPreference(KEY_BASEBAND_VERSION));
-        }
-
-        // Dont show feedback option if there is no reporter.
-        if (TextUtils.isEmpty(DeviceInfoUtils.getFeedbackReporterPackage(getActivity()))) {
-            getPreferenceScreen().removePreference(findPreference(KEY_DEVICE_FEEDBACK));
-        }
-
-        /*
-         * Settings is a generic app and should not contain any device-specific
-         * info.
-         */
-        final Activity act = getActivity();
-
-        // These are contained by the root preference screen
-        PreferenceGroup parentPreference = getPreferenceScreen();
-
-        /*if (mUm.isAdminUser()) {
-			Log.d(LOG_TAG, "KEY_SYSTEM_UPDATE_SETTINGS!");
-            Utils.updatePreferenceToSpecificActivityOrRemove(act, parentPreference,
-                    KEY_SYSTEM_UPDATE_SETTINGS,
-                    Utils.UPDATE_PREFERENCE_FLAG_SET_TITLE_TO_MATCHING_ACTIVITY);
-        } else {
-            // Remove for secondary users
-            removePreference(KEY_SYSTEM_UPDATE_SETTINGS);
-        }*/
-
-        // Read platform settings for additional system update setting
-        removePreferenceIfBoolFalse(KEY_UPDATE_SETTING,
-                R.bool.config_additional_system_update_setting_enable);
-
-        // Remove manual entry if none present.
-        removePreferenceIfBoolFalse(KEY_MANUAL, R.bool.config_show_manual);
-
-        // Remove regulatory labels if no activity present to handle intent.
-        removePreferenceIfActivityMissing(
-                KEY_REGULATORY_INFO, Settings.ACTION_SHOW_REGULATORY_INFO);
-
-        removePreferenceIfActivityMissing(
-                "safety_info", "android.settings.SHOW_SAFETY_AND_REGULATORY_INFO");
-
-        //lance add for diagnostic @{
-        if(!shouldShowInformedConsent()) {
-            getPreferenceScreen().removePreference(findPreference(KEY_INFORMED_CONSENT));
-        } else {
-            findPreference(KEY_INFORMED_CONSENT).setEnabled(true);
-        }
-        //@}
-
-        ///M:
-        mExts = new DeviceInfoSettingsExts(getActivity(), this);
-        mExts.initMTKCustomization(getPreferenceScreen());
-    }
-	
-    //lance add for diagnostic @{
-    public boolean shouldShowInformedConsent() {
-        return hasDiagnosticApp() && (getResources().getBoolean(R.bool.def_settings_informed_consent_show));   
-    }
-
-    public boolean hasDiagnosticApp() {
-        try {
-            getPackageManager().getApplicationIcon("com.tct.diagnostics");
-            return true;
-        } catch (NameNotFoundException e) {
-            // TODO Auto-generated catch block
-            Log.w(LOG_TAG, "get com.tct.diagnostics failed!");
-            return false;
-        }
-    }
-	
-    private void updateInformedSummary(){
-        Preference pre = findPreference(KEY_INFORMED_CONSENT);
-        if(null != pre){
-            int isOn = Settings.Global.getInt(getContentResolver(), "def.diagnostic.on", 0);
-            pre.setSummary(isOn == 1 ? R.string.informed_consent_on
-                    : R.string.informed_consent_off);
-        }
-    }
-	//@}
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        mDevHitCountdown = getActivity().getSharedPreferences(DevelopmentSettings.PREF_FILE,
-                Context.MODE_PRIVATE).getBoolean(DevelopmentSettings.PREF_SHOW,
-                        android.os.Build.TYPE.equals("eng")) ? -1 : TAPS_TO_BE_A_DEVELOPER;
-        mDevHitToast = null;
-        mFunDisallowedAdmin = RestrictedLockUtils.checkIfRestrictionEnforced(
-                getActivity(), UserManager.DISALLOW_FUN, UserHandle.myUserId());
-        mFunDisallowedBySystem = RestrictedLockUtils.hasBaseUserRestriction(
-                getActivity(), UserManager.DISALLOW_FUN, UserHandle.myUserId());
-        mDebuggingFeaturesDisallowedAdmin = RestrictedLockUtils.checkIfRestrictionEnforced(
-                getActivity(), UserManager.DISALLOW_DEBUGGING_FEATURES, UserHandle.myUserId());
-        mDebuggingFeaturesDisallowedBySystem = RestrictedLockUtils.hasBaseUserRestriction(
-                getActivity(), UserManager.DISALLOW_DEBUGGING_FEATURES, UserHandle.myUserId());
-		updateInformedSummary();//lance add for Diagnostic
-    }
-
-    @Override
-    public boolean onPreferenceTreeClick(Preference preference) {
-        if (preference.getKey().equals(KEY_FIRMWARE_VERSION)) {
-            System.arraycopy(mHits, 1, mHits, 0, mHits.length-1);
-            mHits[mHits.length-1] = SystemClock.uptimeMillis();
-            if (mHits[0] >= (SystemClock.uptimeMillis()-500)) {
-                if (mUm.hasUserRestriction(UserManager.DISALLOW_FUN)) {
-                    if (mFunDisallowedAdmin != null && !mFunDisallowedBySystem) {
-                        RestrictedLockUtils.sendShowAdminSupportDetailsIntent(getActivity(),
-                                mFunDisallowedAdmin);
-                    }
-                    Log.d(LOG_TAG, "Sorry, no fun for you!");
-                    return false;
-                }
-
-                Intent intent = new Intent(Intent.ACTION_MAIN);
-                intent.setClassName("android",
-                        com.android.internal.app.PlatLogoActivity.class.getName());
-                try {
-                    startActivity(intent);
-                } catch (Exception e) {
-                    Log.e(LOG_TAG, "Unable to start activity " + intent.toString());
-                }
-            }
-        } else if (preference.getKey().equals(KEY_BUILD_NUMBER)) {
-            // Don't enable developer options for secondary users.
-            if (!mUm.isAdminUser()) return true;
-
-            // Don't enable developer options until device has been provisioned
-            if (!Utils.isDeviceProvisioned(getActivity())) {
-                return true;
-            }
-
-            if (mUm.hasUserRestriction(UserManager.DISALLOW_DEBUGGING_FEATURES)) {
-                if (mDebuggingFeaturesDisallowedAdmin != null &&
-                        !mDebuggingFeaturesDisallowedBySystem) {
-                    RestrictedLockUtils.sendShowAdminSupportDetailsIntent(getActivity(),
-                            mDebuggingFeaturesDisallowedAdmin);
-                }
-                return true;
-            }
-
-            if (mDevHitCountdown > 0) {
-                mDevHitCountdown--;
-                if (mDevHitCountdown == 0) {
-                    getActivity().getSharedPreferences(DevelopmentSettings.PREF_FILE,
-                            Context.MODE_PRIVATE).edit().putBoolean(
-                                    DevelopmentSettings.PREF_SHOW, true).apply();
-                    if (mDevHitToast != null) {
-                        mDevHitToast.cancel();
-                    }
-                    mDevHitToast = Toast.makeText(getActivity(), R.string.show_dev_on,
-                            Toast.LENGTH_LONG);
-                    mDevHitToast.show();
-                    // This is good time to index the Developer Options
-                    Index.getInstance(
-                            getActivity().getApplicationContext()).updateFromClassNameResource(
-                                    DevelopmentSettings.class.getName(), true, true);
-
-                } else if (mDevHitCountdown > 0
-                        && mDevHitCountdown < (TAPS_TO_BE_A_DEVELOPER-2)) {
-                    if (mDevHitToast != null) {
-                        mDevHitToast.cancel();
-                    }
-                    mDevHitToast = Toast.makeText(getActivity(), getResources().getQuantityString(
-                            R.plurals.show_dev_countdown, mDevHitCountdown, mDevHitCountdown),
-                            Toast.LENGTH_SHORT);
-                    mDevHitToast.show();
-                }
-            } else if (mDevHitCountdown < 0) {
-                if (mDevHitToast != null) {
-                    mDevHitToast.cancel();
-                }
-                mDevHitToast = Toast.makeText(getActivity(), R.string.show_dev_already,
-                        Toast.LENGTH_LONG);
-                mDevHitToast.show();
-            }
-        } else if (preference.getKey().equals(KEY_SECURITY_PATCH)) {
-            /*if (getPackageManager().queryIntentActivities(preference.getIntent(), 0).isEmpty()) {
-                // Don't send out the intent to stop crash
-                Log.w(LOG_TAG, "Stop click action on " + KEY_SECURITY_PATCH + ": "
-                        + "queryIntentActivities() returns empty" );
-                return true;
-            }*/
-        } else if (preference.getKey().equals(KEY_DEVICE_FEEDBACK)) {
-            sendFeedback();
-        } else if(preference.getKey().equals(KEY_SYSTEM_UPDATE_SETTINGS)) {
-            //[BUGFIX]-Mod-BEGIN by TCTNB.yubin.ying,10/11/2016,3069660,
-            /*CarrierConfigManager configManager =
-                    (CarrierConfigManager) getSystemService(Context.CARRIER_CONFIG_SERVICE);
-            PersistableBundle b = configManager.getConfig();
-            if (b.getBoolean(CarrierConfigManager.KEY_CI_ACTION_ON_SYS_UPDATE_BOOL)) {
-                ciActionOnSysUpdate(b);
-            }*/
-            Intent intent = new Intent(Intent.ACTION_MAIN);
-            intent.addCategory(Intent.CATEGORY_LAUNCHER);
-            ComponentName cn = new ComponentName("com.tcl.ota", "com.tcl.ota.SystemUpdatesActivity");
-            intent.setComponent(cn);
-            startActivity(intent);
-            return true;
-            //[BUGFIX]-Mod-END by TCTNB.yubin.ying
-            //lance add for Diagnostic @{
-        }	else if (preference.getKey().equals(KEY_INFORMED_CONSENT)){
-            Intent intent = new Intent("com.tct.diagnostic.INFORMEDCONSENT");
-            try{
-                startActivity(intent);
-            }catch(ActivityNotFoundException e){
-                Log.d(LOG_TAG, "lancelot happened error:this activity can not be found");
-            }
-        }
-		// @}
-        /// M:
-        mExts.onCustomizedPreferenceTreeClick(preference);
-        return super.onPreferenceTreeClick(preference);
-    }
-
-    /**
-     * Trigger client initiated action (send intent) on system update
-     */
-    private void ciActionOnSysUpdate(PersistableBundle b) {
-        String intentStr = b.getString(CarrierConfigManager.
-                KEY_CI_ACTION_ON_SYS_UPDATE_INTENT_STRING);
-        if (!TextUtils.isEmpty(intentStr)) {
-            String extra = b.getString(CarrierConfigManager.
-                    KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_STRING);
-            String extraVal = b.getString(CarrierConfigManager.
-                    KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_VAL_STRING);
-
-            Intent intent = new Intent(intentStr);
-            if (!TextUtils.isEmpty(extra)) {
-                intent.putExtra(extra, extraVal);
-            }
-            Log.d(LOG_TAG, "ciActionOnSysUpdate: broadcasting intent " + intentStr +
-                    " with extra " + extra + ", " + extraVal);
-            getActivity().getApplicationContext().sendBroadcast(intent);
-        }
-    }
-
-    private void removePreferenceIfPropertyMissing(PreferenceGroup preferenceGroup,
-            String preference, String property ) {
-        if (SystemProperties.get(property).equals("")) {
-            // Property is missing so remove preference from group
-            try {
-                preferenceGroup.removePreference(findPreference(preference));
-            } catch (RuntimeException e) {
-                Log.d(LOG_TAG, "Property '" + property + "' missing and no '"
-                        + preference + "' preference");
-            }
-        }
-    }
-
-    private void removePreferenceIfActivityMissing(String preferenceKey, String action) {
-        final Intent intent = new Intent(action);
-        if (getPackageManager().queryIntentActivities(intent, 0).isEmpty()) {
-            Preference pref = findPreference(preferenceKey);
-            if (pref != null) {
-                getPreferenceScreen().removePreference(pref);
-            }
-        }
-    }
-
-    private void removePreferenceIfBoolFalse(String preference, int resId) {
-        if (!getResources().getBoolean(resId)) {
-            Preference pref = findPreference(preference);
-            if (pref != null) {
-                getPreferenceScreen().removePreference(pref);
-            }
-        }
-    }
-
-    private void setStringSummary(String preference, String value) {
-        try {
-            findPreference(preference).setSummary(value);
-        } catch (RuntimeException e) {
-            findPreference(preference).setSummary(
-                getResources().getString(R.string.device_info_default));
-        }
-    }
-
-    private void setValueSummary(String preference, String property) {
-        try {
-            findPreference(preference).setSummary(
-                    SystemProperties.get(property,
-                            getResources().getString(R.string.device_info_default)));
-        } catch (RuntimeException e) {
-            // No recovery
-        }
-    }
-
-    private void sendFeedback() {
-        String reporterPackage = DeviceInfoUtils.getFeedbackReporterPackage(getActivity());
-        if (TextUtils.isEmpty(reporterPackage)) {
-            return;
-        }
-        Intent intent = new Intent(Intent.ACTION_BUG_REPORT);
-        intent.setPackage(reporterPackage);
-        startActivityForResult(intent, 0);
-    }
-
-    private static class SummaryProvider implements SummaryLoader.SummaryProvider {
-
-        private final Context mContext;
-        private final SummaryLoader mSummaryLoader;
-
-        public SummaryProvider(Context context, SummaryLoader summaryLoader) {
-            mContext = context;
-            mSummaryLoader = summaryLoader;
-        }
-
-        @Override
-        public void setListening(boolean listening) {
-            if (listening) {
-                mSummaryLoader.setSummary(this, mContext.getString(R.string.about_summary,
-                        Build.VERSION.RELEASE));
-            }
-        }
-    }
-
-    public static final SummaryLoader.SummaryProviderFactory SUMMARY_PROVIDER_FACTORY
-            = new SummaryLoader.SummaryProviderFactory() {
-        @Override
-        public SummaryLoader.SummaryProvider createSummaryProvider(Activity activity,
-                                                                   SummaryLoader summaryLoader) {
-            return new SummaryProvider(activity, summaryLoader);
-        }
-    };
-
-    /**
-     * For Search.
-     */
-    public static final SearchIndexProvider SEARCH_INDEX_DATA_PROVIDER =
-        new BaseSearchIndexProvider() {
-
-            @Override
-            public List<SearchIndexableResource> getXmlResourcesToIndex(
-                    Context context, boolean enabled) {
-                final SearchIndexableResource sir = new SearchIndexableResource(context);
-                sir.xmlResId = R.xml.device_info_settings;
-                return Arrays.asList(sir);
-            }
-
-            @Override
-            public List<String> getNonIndexableKeys(Context context) {
-                final List<String> keys = new ArrayList<String>();
-                if (isPropertyMissing(PROPERTY_SELINUX_STATUS)) {
-                    keys.add(KEY_SELINUX_STATUS);
-                }
-                if (isPropertyMissing(PROPERTY_URL_SAFETYLEGAL)) {
-                    keys.add(KEY_SAFETY_LEGAL);
-                }
-                if (isPropertyMissing(PROPERTY_EQUIPMENT_ID)) {
-                    keys.add(KEY_EQUIPMENT_ID);
-                }
-                // Remove Baseband version if wifi-only device
-                if (Utils.isWifiOnly(context)) {
-                    keys.add((KEY_BASEBAND_VERSION));
-                }
-                // Dont show feedback option if there is no reporter.
-                if (TextUtils.isEmpty(DeviceInfoUtils.getFeedbackReporterPackage(context))) {
-                    keys.add(KEY_DEVICE_FEEDBACK);
-                }
-                final UserManager um = UserManager.get(context);
-                // TODO: system update needs to be fixed for non-owner user b/22760654
-                if (!um.isAdminUser()) {
-                    keys.add(KEY_SYSTEM_UPDATE_SETTINGS);
-                }
-                if (!context.getResources().getBoolean(
-                        R.bool.config_additional_system_update_setting_enable)) {
-                    keys.add(KEY_UPDATE_SETTING);
-                }
-                return keys;
-            }
-
-            private boolean isPropertyMissing(String property) {
-                return SystemProperties.get(property).equals("");
-            }
-        };
-
-}
Index: vendor/branch/5058I_ALRU/build/tools/buildinfo.sh
===================================================================
--- vendor/branch/5058I_ALRU/build/tools/buildinfo.sh	(revision 7721)
+++ vendor/branch/5058I_ALRU/build/tools/buildinfo.sh	(revision 7722)
@@ -30,7 +30,7 @@
 if [ -n "$AB_OTA_UPDATER" ] ; then
   echo "ro.build.ab_update=$AB_OTA_UPDATER"
 fi
-echo "ro.product.model=Alcatel_3X"
+echo "ro.product.model=5058I"
 echo "ro.product.brand=TCL"
 echo "ro.product.name=5058I"
 echo "ro.product.device=A3A_PLUS"
