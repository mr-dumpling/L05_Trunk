Index: frameworks/base/core/res/res/values/strings.xml
===================================================================
--- frameworks/base/core/res/res/values/strings.xml	(revision 4785)
+++ frameworks/base/core/res/res/values/strings.xml	(revision 4786)
@@ -4544,4 +4544,6 @@
   <!-- Text of button to allow user to abort countdown and immediately start retail demo mode [CHAR LIMIT=40] -->
   <string name="start_demo_mode_inactivity_timeout_right_button">ENTER</string>
   <!--End added by Xutao.Wu for TASK5709544 on 2017/11/28-->
+  <string name="def_stk_name_for_telcel">SIM Telcel</string>
+  <string name="gsm_stk_title_unicode">stk unicode</string>
 </resources>
Index: frameworks/base/core/res/res/values/public.xml
===================================================================
--- frameworks/base/core/res/res/values/public.xml	(revision 4785)
+++ frameworks/base/core/res/res/values/public.xml	(revision 4786)
@@ -1960,6 +1960,7 @@
   <public type="style" name="DeviceDefault.Light.SegmentedButton" id="0x010301d4" />
 
   <public type="integer" name="status_bar_notification_info_maxnum" id="0x010e0003" />
+  <public type="integer" name="def_customized_stk_app_name" id="0x010e0004" />
 
   <public type="string" name="status_bar_notification_info_overflow" id="0x01040017" />
 
@@ -2663,6 +2664,8 @@
     <public type="string" name="low_storage_warning_message_50m" id="0x0104001f" />
     <public type="string" name="free_memory_ignore_btn" id="0x01040020" />
     <public type="string" name="free_memory_free_up_space_btn" id="0x01040021" />
+    <public type="string" name="def_stk_name_for_telcel" id="0x01040022" />
+    <public type="string" name="gsm_stk_title_unicode" id="0x01040023" />
 
   <!-- ===============================================================
        Resources added in version N of the platform
Index: frameworks/base/core/res/res/values/config.xml
===================================================================
--- frameworks/base/core/res/res/values/config.xml	(revision 4785)
+++ frameworks/base/core/res/res/values/config.xml	(revision 4786)
@@ -2672,4 +2672,5 @@
     <string-array translatable="false" name="config_nonBlockableNotificationPackages" />
 	
 	<bool name="def_cb_channel_50_behaviour_brazil">true</bool>
+	<integer name="def_customized_stk_app_name">2</integer>
 </resources>
Index: frameworks/base/api/test-current.txt
===================================================================
--- frameworks/base/api/test-current.txt	(revision 4785)
+++ frameworks/base/api/test-current.txt	(revision 4786)
@@ -1795,6 +1795,7 @@
     field public static final int config_longAnimTime = 17694722; // 0x10e0002
     field public static final int config_mediumAnimTime = 17694721; // 0x10e0001
     field public static final int config_shortAnimTime = 17694720; // 0x10e0000
+    field public static final int def_customized_stk_app_name = 17694724; // 0x10e0004
     field public static final int status_bar_notification_info_maxnum = 17694723; // 0x10e0003
   }
 
@@ -1873,6 +1874,7 @@
     field public static final int copy = 17039361; // 0x1040001
     field public static final int copyUrl = 17039362; // 0x1040002
     field public static final int cut = 17039363; // 0x1040003
+    field public static final int def_stk_name_for_telcel = 17039394; // 0x1040022
     field public static final int defaultMsisdnAlphaTag = 17039365; // 0x1040005
     field public static final int defaultVoiceMailAlphaTag = 17039364; // 0x1040004
     field public static final int dialog_alert_title = 17039380; // 0x1040014
@@ -1880,6 +1882,7 @@
     field public static final int fingerprint_icon_content_description = 17039384; // 0x1040018
     field public static final int free_memory_free_up_space_btn = 17039393; // 0x1040021
     field public static final int free_memory_ignore_btn = 17039392; // 0x1040020
+    field public static final int gsm_stk_title_unicode = 17039395; // 0x1040023
     field public static final int httpErrorBadUrl = 17039367; // 0x1040007
     field public static final int httpErrorUnsupportedScheme = 17039368; // 0x1040008
     field public static final int low_storage_view_title_100m = 17039387; // 0x104001b
Index: frameworks/base/api/current.txt
===================================================================
--- frameworks/base/api/current.txt	(revision 4785)
+++ frameworks/base/api/current.txt	(revision 4786)
@@ -1795,6 +1795,7 @@
     field public static final int config_longAnimTime = 17694722; // 0x10e0002
     field public static final int config_mediumAnimTime = 17694721; // 0x10e0001
     field public static final int config_shortAnimTime = 17694720; // 0x10e0000
+    field public static final int def_customized_stk_app_name = 17694724; // 0x10e0004
     field public static final int status_bar_notification_info_maxnum = 17694723; // 0x10e0003
   }
 
@@ -1873,6 +1874,7 @@
     field public static final int copy = 17039361; // 0x1040001
     field public static final int copyUrl = 17039362; // 0x1040002
     field public static final int cut = 17039363; // 0x1040003
+    field public static final int def_stk_name_for_telcel = 17039394; // 0x1040022
     field public static final int defaultMsisdnAlphaTag = 17039365; // 0x1040005
     field public static final int defaultVoiceMailAlphaTag = 17039364; // 0x1040004
     field public static final int dialog_alert_title = 17039380; // 0x1040014
@@ -1880,6 +1882,7 @@
     field public static final int fingerprint_icon_content_description = 17039384; // 0x1040018
     field public static final int free_memory_free_up_space_btn = 17039393; // 0x1040021
     field public static final int free_memory_ignore_btn = 17039392; // 0x1040020
+    field public static final int gsm_stk_title_unicode = 17039395; // 0x1040023
     field public static final int httpErrorBadUrl = 17039367; // 0x1040007
     field public static final int httpErrorUnsupportedScheme = 17039368; // 0x1040008
     field public static final int low_storage_view_title_100m = 17039387; // 0x104001b
Index: frameworks/base/api/system-current.txt
===================================================================
--- frameworks/base/api/system-current.txt	(revision 4785)
+++ frameworks/base/api/system-current.txt	(revision 4786)
@@ -1907,6 +1907,7 @@
     field public static final int config_longAnimTime = 17694722; // 0x10e0002
     field public static final int config_mediumAnimTime = 17694721; // 0x10e0001
     field public static final int config_shortAnimTime = 17694720; // 0x10e0000
+    field public static final int def_customized_stk_app_name = 17694724; // 0x10e0004
     field public static final int status_bar_notification_info_maxnum = 17694723; // 0x10e0003
   }
 
@@ -1987,6 +1988,7 @@
     field public static final int copy = 17039361; // 0x1040001
     field public static final int copyUrl = 17039362; // 0x1040002
     field public static final int cut = 17039363; // 0x1040003
+    field public static final int def_stk_name_for_telcel = 17039394; // 0x1040022
     field public static final int defaultMsisdnAlphaTag = 17039365; // 0x1040005
     field public static final int defaultVoiceMailAlphaTag = 17039364; // 0x1040004
     field public static final int dialog_alert_title = 17039380; // 0x1040014
@@ -1994,6 +1996,7 @@
     field public static final int fingerprint_icon_content_description = 17039384; // 0x1040018
     field public static final int free_memory_free_up_space_btn = 17039393; // 0x1040021
     field public static final int free_memory_ignore_btn = 17039392; // 0x1040020
+    field public static final int gsm_stk_title_unicode = 17039395; // 0x1040023
     field public static final int httpErrorBadUrl = 17039367; // 0x1040007
     field public static final int httpErrorUnsupportedScheme = 17039368; // 0x1040008
     field public static final int low_storage_view_title_100m = 17039387; // 0x104001b
Index: vendor/branch/5058A_Telcel/vendor/mediatek/proprietary/packages/apps/Stk/AndroidManifest.xml
===================================================================
--- vendor/branch/5058A_Telcel/vendor/mediatek/proprietary/packages/apps/Stk/AndroidManifest.xml	(revision 4785)
+++ vendor/branch/5058A_Telcel/vendor/mediatek/proprietary/packages/apps/Stk/AndroidManifest.xml	(revision 4786)
@@ -131,7 +131,13 @@
                 <action android:name="android.intent.action.USER_INITIALIZE" />
             </intent-filter>
         </receiver>
-
+        <!--BEGIN-chenhu-->
+        <receiver android:name=".ProactiveSetTitleReceiver">
+            <intent-filter>
+                <action android:name="proactive_set_stkselection_app_title" />
+            </intent-filter>
+        </receiver>
+        <!--END-chenhu-->
         <service android:name="StkAppService"
                 android:directBootAware="true"/>
 
Index: vendor/branch/5058A_Telcel/device/ausshine/aus6739_66_n1/system.prop
===================================================================
--- vendor/branch/5058A_Telcel/device/ausshine/aus6739_66_n1/system.prop	(revision 4785)
+++ vendor/branch/5058A_Telcel/device/ausshine/aus6739_66_n1/system.prop	(revision 4786)
@@ -90,6 +90,7 @@
 ro.mtk_gemini_support = 1
 persist.sys.timezone = America/Mexico_City
 persist.radio.fd.r8.legacy.off = 1
+ro.telcel.enabled = true
 
 ro.com.google.clientidbase = android-americamovil-mx-revc
 ro.com.google.clientidbase.ms = android-americamovil-mx-revc
Index: vendor/branch/5058A_Telcel/frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMFileHandler.java
===================================================================
--- vendor/branch/5058A_Telcel/frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMFileHandler.java	(revision 0)
+++ vendor/branch/5058A_Telcel/frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMFileHandler.java	(revision 4786)
@@ -0,0 +1,106 @@
+/*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.telephony.uicc;
+
+import android.telephony.Rlog;
+
+import com.android.internal.telephony.CommandsInterface;
+
+/**
+ * {@hide}
+ */
+public final class SIMFileHandler extends IccFileHandler implements IccConstants {
+    static final String LOG_TAG = "SIMFileHandler";
+
+    //***** Instance Variables
+
+    //***** Constructor
+
+    public SIMFileHandler(UiccCardApplication app, String aid, CommandsInterface ci) {
+        super(app, aid, ci);
+    }
+
+    //***** Overridden from IccFileHandler
+
+    @Override
+    protected String getEFPath(int efid) {
+        // TODO(): DF_GSM can be 7F20 or 7F21 to handle backward compatibility.
+        // Implement this after discussion with OEMs.
+        switch(efid) {
+        case EF_SMS:
+        // MTK-START
+        case EF_SMSP:   // [ALPS01206315] Support EF_SMSP
+        // MTK-END
+            return MF_SIM + DF_TELECOM;
+
+        case EF_EXT6:
+        case EF_MWIS:
+        case EF_MBI:
+        case EF_SPN:
+        case EF_AD:
+        case EF_MBDN:
+        case EF_PNN:
+        case EF_SPDI:
+        case EF_SST:
+        case EF_CFIS:
+        case EF_GID1:
+        case EF_GID2:
+            return MF_SIM + DF_GSM;
+
+        case EF_MAILBOX_CPHS:
+        case EF_VOICE_MAIL_INDICATOR_CPHS:
+        case EF_CFF_CPHS:
+        case EF_SPN_CPHS:
+        case EF_SPN_SHORT_CPHS:
+        case EF_INFO_CPHS:
+        case EF_CSP_CPHS:
+        case EF_SUME: //add by chenhu
+            return MF_SIM + DF_GSM;
+        // MTK-START
+        case EF_ECC:
+        case EF_OPL:
+        // MTK-END
+            return MF_SIM + DF_GSM;
+        // MTK-START
+        case EF_RAT: // ALPS00302702 RAT balancing (ADF(USIM)/7F66/5F30/EF_RAT)
+            return DF_ADF + "7F66" + "5F30";
+        case EF_CSIM_IMSIM:
+            return MF_SIM + DF_CDMA;
+        // MTK-END
+        }
+        String path = getCommonIccEFPath(efid);
+        if (path == null) {
+            Rlog.e(LOG_TAG, "Error: EF Path being returned in null");
+        }
+        return path;
+    }
+
+    @Override
+    protected void logd(String msg) {
+        Rlog.d(LOG_TAG, msg);
+    }
+
+    @Override
+    protected void loge(String msg) {
+        Rlog.e(LOG_TAG, msg);
+    }
+}
Index: vendor/branch/5058A_Telcel/frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMRecords.java
===================================================================
--- vendor/branch/5058A_Telcel/frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMRecords.java	(revision 0)
+++ vendor/branch/5058A_Telcel/frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMRecords.java	(revision 4786)
@@ -0,0 +1,4255 @@
+/*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.telephony.uicc;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.AsyncResult;
+import android.os.Message;
+// MTK-START
+import android.os.SystemProperties;
+import android.telephony.TelephonyManager;
+// MTK-END
+import android.telephony.CarrierConfigManager;
+import android.telephony.PhoneNumberUtils;
+import android.telephony.SmsMessage;
+import android.telephony.SubscriptionInfo;
+import android.text.TextUtils;
+import android.telephony.Rlog;
+import android.content.res.Resources;
+
+import com.android.internal.telephony.CommandsInterface;
+import com.android.internal.telephony.MccTable;
+// MTK-START
+import com.android.internal.telephony.PhoneConstants;
+import com.android.internal.telephony.ServiceStateTracker;
+// MTK-END
+import com.android.internal.telephony.SmsConstants;
+import com.android.internal.telephony.SubscriptionController;
+import com.android.internal.telephony.gsm.SimTlv;
+import com.android.internal.telephony.uicc.IccCardApplicationStatus.AppState;
+import com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType;
+
+// MTK-START
+import static com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_DEFAULT_NAME;
+import com.android.internal.telephony.IccCardConstants;
+import com.android.internal.telephony.TelephonyIntents;
+import com.android.internal.telephony.TelephonyProperties;
+import com.android.internal.telephony.Phone;
+import com.android.internal.telephony.PhoneFactory;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.telephony.SubscriptionManager;
+import com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType;
+import android.app.ActivityManagerNative;
+import android.os.UserHandle;
+import static android.Manifest.permission.READ_PHONE_STATE;
+// MTK-END
+import java.io.FileDescriptor;
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.Arrays;
+// MTK-START
+import android.content.BroadcastReceiver;
+import com.mediatek.common.telephony.ITelephonyExt;
+import com.mediatek.common.MPlugin;
+import android.app.AlertDialog;
+import android.os.PowerManager;
+import android.view.WindowManager;
+import android.content.DialogInterface;
+
+// MTK-END
+
+/**
+ * {@hide}
+ */
+public class SIMRecords extends IccRecords {
+    protected static final String LOG_TAG = "SIMRecords";
+
+    private static final boolean CRASH_RIL = false;
+
+    // ***** Instance Variables
+
+    VoiceMailConstants mVmConfig;
+
+
+    SpnOverride mSpnOverride;
+
+    // ***** Cached SIM State; cleared on channel close
+
+    private int mCallForwardingStatus;
+
+
+    /**
+     * States only used by getSpnFsm FSM
+     */
+    private GetSpnFsmState mSpnState;
+
+    /** CPHS service information (See CPHS 4.2 B.3.1.1)
+     *  It will be set in onSimReady if reading GET_CPHS_INFO successfully
+     *  mCphsInfo[0] is CPHS Phase
+     *  mCphsInfo[1] and mCphsInfo[2] is CPHS Service Table
+     */
+    private byte[] mCphsInfo = null;
+    boolean mCspPlmnEnabled = true;
+
+    byte[] mEfMWIS = null;
+    byte[] mEfCPHS_MWI =null;
+    byte[] mEfCff = null;
+    byte[] mEfCfis = null;
+
+    byte[] mEfLi = null;
+    byte[] mEfPl = null;
+
+    int mSpnDisplayCondition;
+    // Numeric network codes listed in TS 51.011 EF[SPDI]
+    ArrayList<String> mSpdiNetworks = null;
+
+    String mPnnHomeName = null;
+
+    UsimServiceTable mUsimServiceTable;
+
+    @Override
+    public String toString() {
+        return "SimRecords: " + super.toString()
+                + " mVmConfig" + mVmConfig
+                + " mSpnOverride=" + "mSpnOverride"
+                + " callForwardingEnabled=" + mCallForwardingStatus
+                + " spnState=" + mSpnState
+                + " mCphsInfo=" + mCphsInfo
+                + " mCspPlmnEnabled=" + mCspPlmnEnabled
+                + " efMWIS=" + mEfMWIS
+                + " efCPHS_MWI=" + mEfCPHS_MWI
+                + " mEfCff=" + mEfCff
+                + " mEfCfis=" + mEfCfis
+                + " getOperatorNumeric=" + getOperatorNumeric();
+    }
+
+    // ***** Constants
+
+    // From TS 51.011 EF[SPDI] section
+    static final int TAG_SPDI = 0xA3;
+    static final int TAG_SPDI_PLMN_LIST = 0x80;
+
+    // Full Name IEI from TS 24.008
+    static final int TAG_FULL_NETWORK_NAME = 0x43;
+
+    // Short Name IEI from TS 24.008
+    static final int TAG_SHORT_NETWORK_NAME = 0x45;
+
+    // active CFF from CPHS 4.2 B.4.5
+    static final int CFF_UNCONDITIONAL_ACTIVE = 0x0a;
+    static final int CFF_UNCONDITIONAL_DEACTIVE = 0x05;
+    static final int CFF_LINE1_MASK = 0x0f;
+    static final int CFF_LINE1_RESET = 0xf0;
+
+    // CPHS Service Table (See CPHS 4.2 B.3.1)
+    private static final int CPHS_SST_MBN_MASK = 0x30;
+    private static final int CPHS_SST_MBN_ENABLED = 0x30;
+
+    // EF_CFIS related constants
+    // Spec reference TS 51.011 section 10.3.46.
+    private static final int CFIS_BCD_NUMBER_LENGTH_OFFSET = 2;
+    private static final int CFIS_TON_NPI_OFFSET = 3;
+    private static final int CFIS_ADN_CAPABILITY_ID_OFFSET = 14;
+    private static final int CFIS_ADN_EXTENSION_ID_OFFSET = 15;
+
+    // ***** Event Constants
+    private static final int EVENT_GET_IMSI_DONE = 3;
+    private static final int EVENT_GET_ICCID_DONE = 4;
+    private static final int EVENT_GET_MBI_DONE = 5;
+    private static final int EVENT_GET_MBDN_DONE = 6;
+    private static final int EVENT_GET_MWIS_DONE = 7;
+    private static final int EVENT_GET_VOICE_MAIL_INDICATOR_CPHS_DONE = 8;
+    protected static final int EVENT_GET_AD_DONE = 9; // Admin data on SIM
+    protected static final int EVENT_GET_MSISDN_DONE = 10;
+    private static final int EVENT_GET_CPHS_MAILBOX_DONE = 11;
+    private static final int EVENT_GET_SPN_DONE = 12;
+    private static final int EVENT_GET_SPDI_DONE = 13;
+    private static final int EVENT_UPDATE_DONE = 14;
+    private static final int EVENT_GET_PNN_DONE = 15;
+    protected static final int EVENT_GET_SST_DONE = 17;
+    private static final int EVENT_GET_ALL_SMS_DONE = 18;
+    private static final int EVENT_MARK_SMS_READ_DONE = 19;
+    private static final int EVENT_SET_MBDN_DONE = 20;
+    private static final int EVENT_SMS_ON_SIM = 21;
+    private static final int EVENT_GET_SMS_DONE = 22;
+    private static final int EVENT_GET_CFF_DONE = 24;
+    private static final int EVENT_SET_CPHS_MAILBOX_DONE = 25;
+    private static final int EVENT_GET_INFO_CPHS_DONE = 26;
+    // private static final int EVENT_SET_MSISDN_DONE = 30; Defined in IccRecords as 30
+    private static final int EVENT_SIM_REFRESH = 31;
+    private static final int EVENT_GET_CFIS_DONE = 32;
+    private static final int EVENT_GET_CSP_CPHS_DONE = 33;
+    private static final int EVENT_GET_GID1_DONE = 34;
+    private static final int EVENT_APP_LOCKED = 35;
+    private static final int EVENT_GET_GID2_DONE = 36;
+    private static final int EVENT_CARRIER_CONFIG_CHANGED = 37;
+
+    // MTK-START
+    private static final int EVENT_RADIO_AVAILABLE = 41;
+    private static final int EVENT_GET_LI_DONE = 42;
+    private static final int EVENT_GET_ELP_DONE = 43;
+    private static final int EVENT_DUAL_IMSI_READY = 44;
+
+    private static final int EVENT_QUERY_MENU_TITLE_DONE = 53;
+
+    private static final int EVENT_GET_SIM_ECC_DONE = 102;
+    private static final int EVENT_GET_USIM_ECC_DONE = 103;
+    private static final int EVENT_GET_ALL_OPL_DONE = 104;
+    private static final int EVENT_GET_CPHSONS_DONE = 105;
+    private static final int EVENT_GET_SHORT_CPHSONS_DONE = 106;
+    private static final int EVENT_QUERY_ICCID_DONE = 107;
+    private static final int EVENT_DELAYED_SEND_PHB_CHANGE = 200;
+    private static final int EVENT_RADIO_STATE_CHANGED = 201;
+    private static final int EVENT_EF_CSP_PLMN_MODE_BIT_CHANGED = 203; // ALPS00302698 ENS
+    private static final int EVENT_GET_RAT_DONE = 204; // ALPS00302702 RAT balancing
+    private static final int EVENT_QUERY_ICCID_DONE_FOR_HOT_SWAP = 205;
+    private static final int EVENT_GET_NEW_MSISDN_DONE = 206;
+    private static final int EVENT_GET_PSISMSC_DONE = 207; // USim authentication
+    private static final int EVENT_GET_SMSP_DONE = 208; // USim authentication
+    private static final int EVENT_GET_GBABP_DONE = 209;
+    private static final int EVENT_GET_GBANL_DONE = 210;
+    private static final int EVENT_CFU_IND = 211;
+    private static final int EVENT_IMSI_REFRESH_QUERY = 212;
+    private static final int EVENT_IMSI_REFRESH_QUERY_DONE = 213;
+    private static final int EVENT_GET_EF_ICCID_DONE = 300;
+
+    /* Remote SIM ME lock */
+    private static final int EVENT_MELOCK_CHANGED = 400;
+    // MTK-END
+
+    // Lookup table for carriers known to produce SIMs which incorrectly indicate MNC length.
+
+    private static final String[] MCCMNC_CODES_HAVING_3DIGITS_MNC = {
+        "302370", "302720", "310260",
+        "405025", "405026", "405027", "405028", "405029", "405030", "405031", "405032",
+        "405033", "405034", "405035", "405036", "405037", "405038", "405039", "405040",
+        "405041", "405042", "405043", "405044", "405045", "405046", "405047", "405750",
+        "405751", "405752", "405753", "405754", "405755", "405756", "405799", "405800",
+        "405801", "405802", "405803", "405804", "405805", "405806", "405807", "405808",
+        "405809", "405810", "405811", "405812", "405813", "405814", "405815", "405816",
+        "405817", "405818", "405819", "405820", "405821", "405822", "405823", "405824",
+        "405825", "405826", "405827", "405828", "405829", "405830", "405831", "405832",
+        "405833", "405834", "405835", "405836", "405837", "405838", "405839", "405840",
+        "405841", "405842", "405843", "405844", "405845", "405846", "405847", "405848",
+        "405849", "405850", "405851", "405852", "405853", "405875", "405876", "405877",
+        "405878", "405879", "405880", "405881", "405882", "405883", "405884", "405885",
+        "405886", "405908", "405909", "405910", "405911", "405912", "405913", "405914",
+        "405915", "405916", "405917", "405918", "405919", "405920", "405921", "405922",
+        "405923", "405924", "405925", "405926", "405927", "405928", "405929", "405930",
+        "405931", "405932", "502142", "502143", "502145", "502146", "502147", "502148"
+    };
+    // MTK-START
+    private static final String KEY_SIM_ID = "SIM_ID";
+
+    private boolean isValidMBI = false;
+
+    // ALPS00302702 RAT balancing
+    private boolean mEfRatLoaded = false;
+    private byte[] mEfRat = null;
+
+    private static final String[] LANGUAGE_CODE_FOR_LP = {
+        "de", "en", "it", "fr", "es", "nl", "sv", "da", "pt", "fi",
+        "no", "el", "tr", "hu", "pl", "",
+        "cs", "he", "ar", "ru", "is", "", "", "", "", "",
+        "", "", "", "", "", ""
+    };
+
+    int mSlotId;
+
+    private ITelephonyExt mTelephonyExt;
+    private BroadcastReceiver mSimReceiver;
+    private BroadcastReceiver mSubReceiver;
+    private RadioTechnologyChangedReceiver mRTC;
+    String cphsOnsl;
+    String cphsOnss;
+    private int iccIdQueryState = -1; // -1: init, 0: query error, 1: query successful
+    private boolean hasQueryIccId;
+
+    private int efLanguageToLoad = 0;
+    private boolean mIsPhbEfResetDone = false;
+
+    private String mSimImsi = null;
+    private byte[] mEfSST = null;
+    private byte[] mEfELP = null;
+    private byte[] mEfPsismsc = null;
+    private byte[] mEfSmsp = null;
+
+    static final String[] SIMRECORD_PROPERTY_RIL_PHB_READY  = {
+        "gsm.sim.ril.phbready",
+        "gsm.sim.ril.phbready.2",
+        "gsm.sim.ril.phbready.3",
+        "gsm.sim.ril.phbready.4"
+    };
+
+    static final String[] SIMRECORD_PROPERTY_RIL_PUK1  = {
+        "gsm.sim.retry.puk1",
+        "gsm.sim.retry.puk1.2",
+        "gsm.sim.retry.puk1.3",
+        "gsm.sim.retry.puk1.4",
+    };
+
+    private String[] SIM_RECORDS_PROPERTY_ECC_LIST = {
+        "ril.ecclist",
+        "ril.ecclist1",
+        "ril.ecclist2",
+        "ril.ecclist3",
+    };
+
+    private boolean mPhbReady = false;
+    private boolean mPhbWaitSub = false;
+    private boolean mSIMInfoReady = false;
+
+    public static class OperatorName {
+        public String sFullName;
+        public String sShortName;
+    }
+
+    /*Operator list recode
+    * include numeric mcc mnc code
+    * and a range of LAC, the operator name index in PNN
+    */
+    public static class OplRecord {
+        public String sPlmn;
+        public int nMinLAC;
+        public int nMaxLAC;
+        public int nPnnIndex;
+    }
+
+    //Operator name listed in TS 51.011 EF[PNN] for plmn in operator list(EF[OPL])
+    private ArrayList<OperatorName> mPnnNetworkNames = null;
+    //Operator list in TS 51.011 EF[OPL]
+    private ArrayList<OplRecord> mOperatorList = null;
+
+    private String mSpNameInEfSpn = null; // MVNO-API
+
+    private String mMenuTitleFromEf = null;
+
+    //3g dongle
+    private boolean isDispose = false;
+    private static final int[] simServiceNumber = {
+        1, 17, 51, 52, 54, 55, 56, 0, 12, 3, 7, 0, 0
+    };
+
+    private static final int[] usimServiceNumber = {
+        0, 19, 45, 46, 48, 49, 51, 71, 12, 2, 0, 42, 0
+    };
+
+    private UiccCard mUiccCard;
+    private UiccController mUiccController;
+    private String mGbabp;
+    private ArrayList<byte[]> mEfGbanlList;
+    private String[] mGbanl;
+
+    private Phone mPhone;
+
+    String mEfEcc = "";
+    // MTK-END
+
+    // ***** Constructor
+
+    public SIMRecords(UiccCardApplication app, Context c, CommandsInterface ci) {
+        super(app, c, ci);
+
+        // MTK-START
+        mSlotId = app.getSlotId();
+        mUiccController = UiccController.getInstance();
+        mUiccCard = mUiccController.getUiccCard(mSlotId);
+        log("mUiccCard Instance = " + mUiccCard);
+
+        mPhone = PhoneFactory.getPhone(app.getPhoneId());
+
+        //mAdnCache = new AdnRecordCache(mFh);
+        mAdnCache = new AdnRecordCache(mFh, ci, app);
+        ///M: Move UPBM code to here for phone restart event to contacts app.begin
+        Intent intent = new Intent();
+        intent.setAction("android.intent.action.ACTION_PHONE_RESTART");
+        intent.putExtra("SimId", mSlotId);
+        mContext.sendBroadcast(intent);
+        // MTK-END
+
+        mVmConfig = new VoiceMailConstants();
+        // MTK-START
+        //mSpnOverride = new SpnOverride();
+        mSpnOverride = SpnOverride.getInstance();
+        // MTK-END
+
+        mRecordsRequested = false;  // No load request is made till SIM ready
+
+        // recordsToLoad is set to 0 because no requests are made yet
+        mRecordsToLoad = 0;
+
+        // MTK-START
+        cphsOnsl = null;
+        cphsOnss = null;
+        hasQueryIccId = false;
+        // MTK-END
+        mCi.setOnSmsOnSim(this, EVENT_SMS_ON_SIM, null);
+        mCi.registerForIccRefresh(this, EVENT_SIM_REFRESH, null);
+        // MTK-START
+        mCi.registerForPhbReady(this, EVENT_PHB_READY, null);
+        /* register for CFU info flag notification */
+        mCi.registerForCallForwardingInfo(this, EVENT_CFU_IND, null);
+        mCi.registerForRadioStateChanged(this, EVENT_RADIO_STATE_CHANGED, null);
+        mCi.registerForAvailable(this, EVENT_RADIO_AVAILABLE, null);
+        mCi.registerForEfCspPlmnModeBitChanged(this, EVENT_EF_CSP_PLMN_MODE_BIT_CHANGED, null);
+        mCi.registerForMelockChanged(this, EVENT_MELOCK_CHANGED, null);
+
+        mCi.registerForImsiRefreshDone(this, EVENT_IMSI_REFRESH_QUERY, null);
+        // MTK-END
+
+        // Start off by setting empty state
+        resetRecords();
+        mParentApp.registerForReady(this, EVENT_APP_READY, null);
+        mParentApp.registerForLocked(this, EVENT_APP_LOCKED, null);
+
+        // MTK-START
+        mSimReceiver = new SIMBroadCastReceiver();
+        IntentFilter filter = new IntentFilter();
+        filter.addAction("com.mediatek.dm.LAWMO_WIPE");
+        filter.addAction("action_pin_dismiss");
+        filter.addAction("action_melock_dismiss");
+        filter.addAction("android.intent.action.ACTION_SHUTDOWN_IPO");
+        filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
+        mContext.registerReceiver(mSimReceiver, filter);
+
+        mSubReceiver = new SubBroadCastReceiver();
+        IntentFilter subFilter = new IntentFilter();
+        subFilter.addAction(TelephonyIntents.ACTION_SUBINFO_RECORD_UPDATED);
+        mContext.registerReceiver(mSubReceiver, subFilter);
+        /** M: Bug Fix for ALPS02189616 */
+        // register new receiver for RADIO_TECHNOLOGY_CHANGED
+        mRTC = new RadioTechnologyChangedReceiver();
+        IntentFilter rtcFilter = new IntentFilter();
+        // M: PHB Revise
+        rtcFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
+        mContext.registerReceiver(mRTC, rtcFilter);
+
+        // ALPS01099419, mAdnCache is needed before onUpdateIccAvailability.
+        if (DBG) log("SIMRecords updateIccRecords");
+        if (mPhone.getIccPhoneBookInterfaceManager() != null) {
+            mPhone.getIccPhoneBookInterfaceManager().updateIccRecords(this);
+        }
+
+        //ALPS00566446: Check if phb is ready or not, if phb was already ready,
+        //we won't wait for phb ready.
+        if (isPhbReady()) {
+            if (DBG) log("Phonebook is ready.");
+            mPhbReady = true;
+            broadcastPhbStateChangedIntent(mPhbReady);
+        }
+        try {
+            mTelephonyExt = MPlugin.createInstance(ITelephonyExt.class.getName(), mContext);
+        } catch (Exception e) {
+            loge("Fail to create plug-in");
+            e.printStackTrace();
+        }
+        // MTK-END
+
+        if (DBG) log("SIMRecords X ctor this=" + this);
+
+        IntentFilter intentfilter = new IntentFilter();
+        intentfilter.addAction(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED);
+        c.registerReceiver(mReceiver, intentfilter);
+    }
+
+    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (intent.getAction().equals(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED)) {
+                sendMessage(obtainMessage(EVENT_CARRIER_CONFIG_CHANGED));
+            }
+        }
+    };
+
+    @Override
+    public void dispose() {
+        if (DBG) log("Disposing SIMRecords this=" + this);
+        //Unregister for all events
+        // MTK-START
+        //3g dongle
+        isDispose = true;
+        // MTK-END
+        mCi.unregisterForIccRefresh(this);
+        mCi.unSetOnSmsOnSim(this);
+        // MTK-START
+
+        mCi.unregisterForCallForwardingInfo(this);
+        mCi.unregisterForPhbReady(this);
+        mCi.unregisterForRadioStateChanged(this);
+        mCi.unregisterForEfCspPlmnModeBitChanged(this);
+        mCi.unregisterForMelockChanged(this);
+        // MTK-END
+        mParentApp.unregisterForReady(this);
+        mParentApp.unregisterForLocked(this);
+        // MTK-START
+        mContext.unregisterReceiver(mSimReceiver);
+        mContext.unregisterReceiver(mSubReceiver);
+        mContext.unregisterReceiver(mReceiver);
+        // M: PHB Revise
+        mContext.unregisterReceiver(mRTC);
+        mPhbWaitSub = false;
+        // MTK-END
+        resetRecords();
+        // MTK-START
+        mAdnCache.reset();
+        setPhbReady(false);
+        mIccId = null;
+        mImsi = null;
+        // MTK-END
+
+        // MTK-START
+        log("dispose(), clean CFU icon");
+        mCallForwardingStatus = CALL_FORWARDING_STATUS_DISABLED;
+        mPhone.clearCallForwardingIndicatorFromSharedPref();
+        mRecordsEventsRegistrants.notifyResult(EVENT_CFI);
+        // MTK-END
+        super.dispose();
+    }
+
+    @Override
+    protected void finalize() {
+        if(DBG) log("finalized");
+    }
+
+    protected void resetRecords() {
+        mImsi = null;
+        mMsisdn = null;
+        mVoiceMailNum = null;
+        mMncLength = UNINITIALIZED;
+        log("setting0 mMncLength" + mMncLength);
+        mIccId = null;
+        mFullIccId = null;
+        // -1 means no EF_SPN found; treat accordingly.
+        mSpnDisplayCondition = -1;
+        mEfMWIS = null;
+        mEfCPHS_MWI = null;
+        mSpdiNetworks = null;
+        mPnnHomeName = null;
+        mGid1 = null;
+        mGid2 = null;
+
+        mAdnCache.reset();
+
+        log("SIMRecords: onRadioOffOrNotAvailable set 'gsm.sim.operator.numeric' to operator=null");
+        log("update icc_operator_numeric=" + null);
+        mTelephonyManager.setSimOperatorNumericForPhone(mParentApp.getPhoneId(), "");
+        mTelephonyManager.setSimOperatorNameForPhone(mParentApp.getPhoneId(), "");
+        mTelephonyManager.setSimCountryIsoForPhone(mParentApp.getPhoneId(), "");
+        // MTK-START
+        setSystemProperty(PROPERTY_ICC_OPERATOR_DEFAULT_NAME, null);
+        // MTK-END
+
+        // recordsRequested is set to false indicating that the SIM
+        // read requests made so far are not valid. This is set to
+        // true only when fresh set of read requests are made.
+        mRecordsRequested = false;
+    }
+
+
+    //***** Public Methods
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String getIMSI() {
+        return mImsi;
+    }
+
+    @Override
+    public String getMsisdnNumber() {
+        return mMsisdn;
+    }
+
+    @Override
+    public String getGid1() {
+        return mGid1;
+    }
+
+    @Override
+    public String getGid2() {
+        return mGid2;
+    }
+
+    @Override
+    public UsimServiceTable getUsimServiceTable() {
+        return mUsimServiceTable;
+    }
+
+    private int getExtFromEf(int ef) {
+        int ext;
+        switch (ef) {
+            case EF_MSISDN:
+                /* For USIM apps use EXT5. (TS 31.102 Section 4.2.37) */
+                if (mParentApp.getType() == AppType.APPTYPE_USIM) {
+                    ext = EF_EXT5;
+                } else {
+                    ext = EF_EXT1;
+                }
+                break;
+            default:
+                ext = EF_EXT1;
+        }
+        return ext;
+    }
+
+    /**
+     * Set subscriber number to SIM record
+     *
+     * The subscriber number is stored in EF_MSISDN (TS 51.011)
+     *
+     * When the operation is complete, onComplete will be sent to its handler
+     *
+     * @param alphaTag alpha-tagging of the dailing nubmer (up to 10 characters)
+     * @param number dailing nubmer (up to 20 digits)
+     *        if the number starts with '+', then set to international TOA
+     * @param onComplete
+     *        onComplete.obj will be an AsyncResult
+     *        ((AsyncResult)onComplete.obj).exception == null on success
+     *        ((AsyncResult)onComplete.obj).exception != null on fail
+     */
+    @Override
+    public void setMsisdnNumber(String alphaTag, String number,
+            Message onComplete) {
+
+        // If the SIM card is locked by PIN, we will set EF_MSISDN fail.
+        // In that case, msisdn and msisdnTag should not be update.
+        mNewMsisdn = number;
+        mNewMsisdnTag = alphaTag;
+
+        if(DBG) log("Set MSISDN: " + mNewMsisdnTag + " " + /*mNewMsisdn*/
+                Rlog.pii(LOG_TAG, mNewMsisdn));
+
+        AdnRecord adn = new AdnRecord(mNewMsisdnTag, mNewMsisdn);
+
+        new AdnRecordLoader(mFh).updateEF(adn, EF_MSISDN, getExtFromEf(EF_MSISDN), 1, null,
+                obtainMessage(EVENT_SET_MSISDN_DONE, onComplete));
+    }
+
+    @Override
+    public String getMsisdnAlphaTag() {
+        return mMsisdnTag;
+    }
+
+    @Override
+    public String getVoiceMailNumber() {
+        // MTK-START
+        log("getVoiceMailNumber " + mVoiceMailNum);
+        // MTK-END
+        return mVoiceMailNum;
+    }
+
+    /**
+     * Set voice mail number to SIM record
+     *
+     * The voice mail number can be stored either in EF_MBDN (TS 51.011) or
+     * EF_MAILBOX_CPHS (CPHS 4.2)
+     *
+     * If EF_MBDN is available, store the voice mail number to EF_MBDN
+     *
+     * If EF_MAILBOX_CPHS is enabled, store the voice mail number to EF_CHPS
+     *
+     * So the voice mail number will be stored in both EFs if both are available
+     *
+     * Return error only if both EF_MBDN and EF_MAILBOX_CPHS fail.
+     *
+     * When the operation is complete, onComplete will be sent to its handler
+     *
+     * @param alphaTag alpha-tagging of the dailing nubmer (upto 10 characters)
+     * @param voiceNumber dailing nubmer (upto 20 digits)
+     *        if the number is start with '+', then set to international TOA
+     * @param onComplete
+     *        onComplete.obj will be an AsyncResult
+     *        ((AsyncResult)onComplete.obj).exception == null on success
+     *        ((AsyncResult)onComplete.obj).exception != null on fail
+     */
+    @Override
+    public void setVoiceMailNumber(String alphaTag, String voiceNumber,
+            Message onComplete) {
+        // MTK-START
+        log("setVoiceMailNumber, mIsVoiceMailFixed " + mIsVoiceMailFixed +
+            ", mMailboxIndex " + mMailboxIndex + ", mMailboxIndex " + mMailboxIndex);
+        // MTK-END
+        if (mIsVoiceMailFixed) {
+            AsyncResult.forMessage((onComplete)).exception =
+                    new IccVmFixedException("Voicemail number is fixed by operator");
+            onComplete.sendToTarget();
+            return;
+        }
+
+        mNewVoiceMailNum = voiceNumber;
+        mNewVoiceMailTag = alphaTag;
+
+        AdnRecord adn = new AdnRecord(mNewVoiceMailTag, mNewVoiceMailNum);
+
+        if (mMailboxIndex != 0 && mMailboxIndex != 0xff) {
+
+            new AdnRecordLoader(mFh).updateEF(adn, EF_MBDN, EF_EXT6,
+                    mMailboxIndex, null,
+                    obtainMessage(EVENT_SET_MBDN_DONE, onComplete));
+
+        } else if (isCphsMailboxEnabled()) {
+            // MTK-START
+            log("setVoiceMailNumber,load EF_MAILBOX_CPHS");
+            // MTK-END
+            new AdnRecordLoader(mFh).updateEF(adn, EF_MAILBOX_CPHS,
+                    EF_EXT1, 1, null,
+                    obtainMessage(EVENT_SET_CPHS_MAILBOX_DONE, onComplete));
+
+        } else {
+            // MTK-START
+            log("setVoiceMailNumber,Update SIM voice mailbox error");
+            // MTK-END
+            AsyncResult.forMessage((onComplete)).exception =
+                    new IccVmNotSupportedException("Update SIM voice mailbox error");
+            onComplete.sendToTarget();
+        }
+    }
+
+    @Override
+    public String getVoiceMailAlphaTag()
+    {
+        return mVoiceMailTag;
+    }
+
+    /**
+     * Sets the SIM voice message waiting indicator records
+     * @param line GSM Subscriber Profile Number, one-based. Only '1' is supported
+     * @param countWaiting The number of messages waiting, if known. Use
+     *                     -1 to indicate that an unknown number of
+     *                      messages are waiting
+     */
+    @Override
+    public void
+    setVoiceMessageWaiting(int line, int countWaiting) {
+        if (line != 1) {
+            // only profile 1 is supported
+            return;
+        }
+
+        try {
+            if (mEfMWIS != null) {
+                // TS 51.011 10.3.45
+
+                // lsb of byte 0 is 'voicemail' status
+                mEfMWIS[0] = (byte)((mEfMWIS[0] & 0xfe)
+                                    | (countWaiting == 0 ? 0 : 1));
+
+                // byte 1 is the number of voice messages waiting
+                if (countWaiting < 0) {
+                    // The spec does not define what this should be
+                    // if we don't know the count
+                    mEfMWIS[1] = 0;
+                } else {
+                    mEfMWIS[1] = (byte) countWaiting;
+                }
+
+                mFh.updateEFLinearFixed(
+                    EF_MWIS, 1, mEfMWIS, null,
+                    obtainMessage (EVENT_UPDATE_DONE, EF_MWIS, 0));
+            }
+
+            // MTK-START
+            if (mParentApp.getType() == AppType.APPTYPE_USIM) {
+                log("[setVoiceMessageWaiting] It is USIM card, skip write CPHS file");
+            } else {
+            // MTK-END
+                if (mEfCPHS_MWI != null) {
+                        // Refer CPHS4_2.WW6 B4.2.3
+                    mEfCPHS_MWI[0] = (byte)((mEfCPHS_MWI[0] & 0xf0)
+                                | (countWaiting == 0 ? 0x5 : 0xa));
+                    mFh.updateEFTransparent(
+                        EF_VOICE_MAIL_INDICATOR_CPHS, mEfCPHS_MWI,
+                        obtainMessage (EVENT_UPDATE_DONE, EF_VOICE_MAIL_INDICATOR_CPHS));
+            // MTK-START
+                }
+            // MTK-END
+            }
+        } catch (ArrayIndexOutOfBoundsException ex) {
+            logw("Error saving voice mail state to SIM. Probably malformed SIM record", ex);
+        }
+    }
+
+    // MTK-START
+    /* Provide a API to GsmCdmaPhone to check EfCfis. However, we don't use AOSP method to
+     * distinguish EF_CFIS. Because MD does't check the MSP, we need to align MD's way.
+     */
+    public boolean checkEfCfis() {
+        boolean isValid = (mEfCfis != null) && (mEfCfis.length == 16);
+        log("mEfCfis is null? = " + (mEfCfis == null));
+        return isValid;
+    }
+    // MTK-END
+
+    // Validate data is !null and the MSP (Multiple Subscriber Profile)
+    // byte is between 1 and 4. See ETSI TS 131 102 v11.3.0 section 4.2.64.
+    private boolean validEfCfis(byte[] data) {
+        return ((data != null) && (data[0] >= 1) && (data[0] <= 4));
+    }
+
+    public int getVoiceMessageCount() {
+        boolean voiceMailWaiting = false;
+        int countVoiceMessages = 0;
+        if (mEfMWIS != null) {
+            // Use this data if the EF[MWIS] exists and
+            // has been loaded
+            // Refer TS 51.011 Section 10.3.45 for the content description
+            voiceMailWaiting = ((mEfMWIS[0] & 0x01) != 0);
+            countVoiceMessages = mEfMWIS[1] & 0xff;
+
+            if (voiceMailWaiting && countVoiceMessages == 0) {
+                // Unknown count = -1
+                countVoiceMessages = -1;
+            }
+            if(DBG) log(" VoiceMessageCount from SIM MWIS = " + countVoiceMessages);
+        } else if (mEfCPHS_MWI != null) {
+            // use voice mail count from CPHS
+            int indicator = (int) (mEfCPHS_MWI[0] & 0xf);
+
+            // Refer CPHS4_2.WW6 B4.2.3
+            if (indicator == 0xA) {
+                // Unknown count = -1
+                countVoiceMessages = -1;
+            } else if (indicator == 0x5) {
+                countVoiceMessages = 0;
+            }
+            if(DBG) log(" VoiceMessageCount from SIM CPHS = " + countVoiceMessages);
+        }
+        return countVoiceMessages;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public int getVoiceCallForwardingFlag() {
+        return mCallForwardingStatus;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void setVoiceCallForwardingFlag(int line, boolean enable, String dialNumber) {
+        Rlog.d(LOG_TAG, "setVoiceCallForwardingFlag: " + enable);
+
+        if (line != 1) return; // only line 1 is supported
+
+        mCallForwardingStatus = enable ? CALL_FORWARDING_STATUS_ENABLED :
+                CALL_FORWARDING_STATUS_DISABLED;
+
+        Rlog.d(LOG_TAG, " mRecordsEventsRegistrants: size=" + mRecordsEventsRegistrants.size());
+        mRecordsEventsRegistrants.notifyResult(EVENT_CFI);
+
+        try {
+            // if (validEfCfis(mEfCfis)) {
+            // MTK-START
+            if (checkEfCfis()) {
+            // MTK-END
+                // lsb is of byte f1 is voice status
+                if (enable) {
+                    mEfCfis[1] |= 1;
+                } else {
+                    mEfCfis[1] &= 0xfe;
+                }
+
+                log("setVoiceCallForwardingFlag: enable=" + enable
+                        + " mEfCfis=" + IccUtils.bytesToHexString(mEfCfis));
+
+                // Update dialNumber if not empty and CFU is enabled.
+                // Spec reference for EF_CFIS contents, TS 51.011 section 10.3.46.
+                if (enable && !TextUtils.isEmpty(dialNumber)) {
+                    logv("EF_CFIS: updating cf number, " + Rlog.pii(LOG_TAG, dialNumber));
+
+                    // MTK-START
+                    // Fix ALPS03414399
+                    // If the dial number contains prefix like "tel:", "sip:" or "sips:",
+                    // it have to be truncated before passed to numberToCalledPartyBCD().
+                    String tmpDialNumber = convertNumberIfContainsPrefix(dialNumber);
+                    byte[] bcdNumber = PhoneNumberUtils.numberToCalledPartyBCD(tmpDialNumber);
+                    // MTK-END
+
+                    System.arraycopy(bcdNumber, 0, mEfCfis, CFIS_TON_NPI_OFFSET, bcdNumber.length);
+
+                    mEfCfis[CFIS_BCD_NUMBER_LENGTH_OFFSET] = (byte) (bcdNumber.length);
+                    mEfCfis[CFIS_ADN_CAPABILITY_ID_OFFSET] = (byte) 0xFF;
+                    mEfCfis[CFIS_ADN_EXTENSION_ID_OFFSET] = (byte) 0xFF;
+                }
+
+                // MTK-START
+                if (mFh != null) {
+                    mFh.updateEFLinearFixed(
+                            EF_CFIS, 1, mEfCfis, null,
+                            obtainMessage (EVENT_UPDATE_DONE, EF_CFIS));
+                } else {
+                    log("setVoiceCallForwardingFlag: mFh is null, skip update EF_CFIS");
+                }
+                // MTK-END
+            } else {
+                log("setVoiceCallForwardingFlag: ignoring enable=" + enable
+                        + " invalid mEfCfis=" + IccUtils.bytesToHexString(mEfCfis));
+            }
+
+            if (mEfCff != null) {
+                if (enable) {
+                    mEfCff[0] = (byte) ((mEfCff[0] & CFF_LINE1_RESET)
+                            | CFF_UNCONDITIONAL_ACTIVE);
+                } else {
+                    mEfCff[0] = (byte) ((mEfCff[0] & CFF_LINE1_RESET)
+                            | CFF_UNCONDITIONAL_DEACTIVE);
+                }
+
+                // MTK-START
+                if (mFh != null) {
+                    mFh.updateEFTransparent(
+                            EF_CFF_CPHS, mEfCff,
+                            obtainMessage (EVENT_UPDATE_DONE, EF_CFF_CPHS));
+                } else {
+                    log("setVoiceCallForwardingFlag: mFh is null, skip update EF_CFF_CPHS");
+                }
+                // MTK-END
+            }
+        } catch (ArrayIndexOutOfBoundsException ex) {
+            logw("Error saving call forwarding flag to SIM. "
+                            + "Probably malformed SIM record", ex);
+
+        }
+    }
+
+    /**
+     * Called by STK Service when REFRESH is received.
+     * @param fileChanged indicates whether any files changed
+     * @param fileList if non-null, a list of EF files that changed
+     */
+    @Override
+    public void onRefresh(boolean fileChanged, int[] fileList) {
+        if (fileChanged) {
+            // A future optimization would be to inspect fileList and
+            // only reload those files that we care about.  For now,
+            // just re-fetch all SIM records that we cache.
+            fetchSimRecords();
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String getOperatorNumeric() {
+        if (mImsi == null) {
+            // MTK-START
+            if (getRecordsLoaded()) {
+                log("getOperatorNumeric: IMSI == null when record loaded.");
+            }
+            // MTK-END
+            //log("getOperatorNumeric: IMSI == null");
+            return null;
+        }
+        if (mMncLength == UNINITIALIZED || mMncLength == UNKNOWN) {
+            log("getSIMOperatorNumeric: bad mncLength");
+            return null;
+        }
+
+        // Length = length of MCC + length of MNC
+        // length of mcc = 3 (TS 23.003 Section 2.2)
+        return mImsi.substring(0, 3 + mMncLength);
+    }
+
+    // MTK-START
+    @Override
+    public String getSIMCPHSOns() {
+        if (cphsOnsl != null) {
+            return cphsOnsl;
+        } else {
+            return cphsOnss;
+        }
+    }
+    // MTK-END
+
+    // ***** Overridden from Handler
+    @Override
+    public void handleMessage(Message msg) {
+        AsyncResult ar;
+        AdnRecord adn;
+
+        byte data[];
+
+        boolean isRecordLoadResponse = false;
+
+        if (mDestroyed.get()) {
+            loge("Received message " + msg + "[" + msg.what + "] " +
+                    " while being destroyed. Ignoring.");
+            return;
+        }
+
+        try { switch (msg.what) {
+            case EVENT_APP_READY:
+                onReady();
+                // MTK-START
+                fetchEccList();
+                // MTK-END
+                break;
+
+            case EVENT_APP_LOCKED:
+                onLocked();
+                // MTK-START
+                fetchEccList();
+                // MTK-END
+                break;
+
+            /* IO events */
+            case EVENT_GET_IMSI_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+
+                if (ar.exception != null) {
+                    loge("Exception querying IMSI, Exception:" + ar.exception);
+                    break;
+                }
+
+                mImsi = (String) ar.result;
+
+                // IMSI (MCC+MNC+MSIN) is at least 6 digits, but not more
+                // than 15 (and usually 15).
+                if (mImsi != null && (mImsi.length() < 6 || mImsi.length() > 15)) {
+                    loge("invalid IMSI " + mImsi);
+                    mImsi = null;
+                }
+
+                log("IMSI: mMncLength=" + mMncLength);
+                log("IMSI: " + mImsi.substring(0, 6) + Rlog.pii(LOG_TAG, mImsi.substring(6)));
+
+                // MTK-START
+                //if (((mMncLength == UNKNOWN) || (mMncLength == 2)) &&
+                if (((mMncLength == UNINITIALIZED) ||
+                        (mMncLength == UNKNOWN) || (mMncLength == 2)) &&
+                // MTK-END
+                        ((mImsi != null) && (mImsi.length() >= 6))) {
+                    String mccmncCode = mImsi.substring(0, 6);
+                    for (String mccmnc : MCCMNC_CODES_HAVING_3DIGITS_MNC) {
+                        if (mccmnc.equals(mccmncCode)) {
+                            mMncLength = 3;
+                            log("IMSI: setting1 mMncLength=" + mMncLength);
+                            break;
+                        }
+                    }
+                }
+
+                // MTK-START
+                //if (mMncLength == UNKNOWN) {
+                if (mMncLength == UNKNOWN || mMncLength == UNINITIALIZED) {
+                // MTK-END
+                    // the SIM has told us all it knows, but it didn't know the mnc length.
+                    // guess using the mcc
+                    try {
+                        int mcc = Integer.parseInt(mImsi.substring(0,3));
+                        mMncLength = MccTable.smallestDigitsMccForMnc(mcc);
+                        log("setting2 mMncLength=" + mMncLength);
+                    } catch (NumberFormatException e) {
+                        mMncLength = UNKNOWN;
+                        loge("Corrupt IMSI! setting3 mMncLength=" + mMncLength);
+                    }
+                }
+
+                if (mMncLength != UNKNOWN && mMncLength != UNINITIALIZED) {
+                    log("update mccmnc=" + mImsi.substring(0, 3 + mMncLength));
+                    // finally have both the imsi and the mncLength and can parse the imsi properly
+                    // MTK-START
+                    //MccTable.updateMccMncConfiguration(mContext,
+                            //mImsi.substring(0, 3 + mMncLength), false);
+                    updateConfiguration(mImsi.substring(0, 3 + mMncLength));
+                    // MTK-END
+                }
+                mImsiReadyRegistrants.notifyRegistrants();
+            break;
+
+            case EVENT_GET_MBI_DONE:
+                boolean isValidMbdn;
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+                data = (byte[]) ar.result;
+
+                isValidMbdn = false;
+                if (ar.exception == null) {
+                    // Refer TS 51.011 Section 10.3.44 for content details
+                    log("EF_MBI: " + IccUtils.bytesToHexString(data));
+
+                    // Voice mail record number stored first
+                    mMailboxIndex = data[0] & 0xff;
+
+                    // check if dailing numbe id valid
+                    if (mMailboxIndex != 0 && mMailboxIndex != 0xff) {
+                        log("Got valid mailbox number for MBDN");
+                        isValidMbdn = true;
+                        // MTK-START
+                        this.isValidMBI = true; // ALPS00301018
+                        // MTK-END
+                    }
+                }
+
+                // one more record to load
+                mRecordsToLoad += 1;
+
+                if (isValidMbdn) {
+                    // Note: MBDN was not included in NUM_OF_SIM_RECORDS_LOADED
+                    // MTK-START
+                    log("EVENT_GET_MBI_DONE, to load EF_MBDN");
+                    // MTK-END
+                    new AdnRecordLoader(mFh).loadFromEF(EF_MBDN, EF_EXT6,
+                            mMailboxIndex, obtainMessage(EVENT_GET_MBDN_DONE));
+                // MTK-START
+                } else if (isCphsMailboxEnabled()) {
+                // MTK-END
+                    // If this EF not present, try mailbox as in CPHS standard
+                    // CPHS (CPHS4_2.WW6) is a european standard.
+                    // MTK-START
+                    log("EVENT_GET_MBI_DONE, to load EF_MAILBOX_CPHS");
+                    // MTK-END
+                    new AdnRecordLoader(mFh).loadFromEF(EF_MAILBOX_CPHS,
+                            EF_EXT1, 1,
+                            obtainMessage(EVENT_GET_CPHS_MAILBOX_DONE));
+                // MTK-START
+                } else {
+                    log("EVENT_GET_MBI_DONE, do nothing");
+                    mRecordsToLoad -= 1;
+                // MTK-END
+                }
+
+                break;
+            case EVENT_GET_CPHS_MAILBOX_DONE:
+            case EVENT_GET_MBDN_DONE:
+                //Resetting the voice mail number and voice mail tag to null
+                //as these should be updated from the data read from EF_MBDN.
+                //If they are not reset, incase of invalid data/exception these
+                //variables are retaining their previous values and are
+                //causing invalid voice mailbox info display to user.
+                mVoiceMailNum = null;
+                mVoiceMailTag = null;
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+
+                if (ar.exception != null) {
+
+                    loge("Invalid or missing EF"
+                        + ((msg.what == EVENT_GET_CPHS_MAILBOX_DONE) ? "[MAILBOX]" : "[MBDN]"));
+
+                    // Bug #645770 fall back to CPHS
+                    // FIXME should use SST to decide
+
+                    if (msg.what == EVENT_GET_MBDN_DONE) {
+                        //load CPHS on fail...
+                        // FIXME right now, only load line1's CPHS voice mail entry
+
+                        mRecordsToLoad += 1;
+                        new AdnRecordLoader(mFh).loadFromEF(
+                                EF_MAILBOX_CPHS, EF_EXT1, 1,
+                                obtainMessage(EVENT_GET_CPHS_MAILBOX_DONE));
+                    }
+                    break;
+                }
+
+                adn = (AdnRecord)ar.result;
+
+                log("VM: " + adn +
+                        ((msg.what == EVENT_GET_CPHS_MAILBOX_DONE) ? " EF[MAILBOX]" : " EF[MBDN]"));
+
+                if (adn.isEmpty() && msg.what == EVENT_GET_MBDN_DONE) {
+                    // Bug #645770 fall back to CPHS
+                    // FIXME should use SST to decide
+                    // FIXME right now, only load line1's CPHS voice mail entry
+                    mRecordsToLoad += 1;
+                    new AdnRecordLoader(mFh).loadFromEF(
+                            EF_MAILBOX_CPHS, EF_EXT1, 1,
+                            obtainMessage(EVENT_GET_CPHS_MAILBOX_DONE));
+
+                    break;
+                }
+
+                mVoiceMailNum = adn.getNumber();
+                mVoiceMailTag = adn.getAlphaTag();
+            break;
+
+            case EVENT_GET_MSISDN_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+
+                if (ar.exception != null) {
+                    loge("Invalid or missing EF[MSISDN]");
+                    break;
+                }
+
+                adn = (AdnRecord)ar.result;
+
+                mMsisdn = adn.getNumber();
+                mMsisdnTag = adn.getAlphaTag();
+
+                // MTK-START
+                mRecordsEventsRegistrants.notifyResult(EVENT_MSISDN);
+                // MTK-END
+                log("MSISDN: " + /*mMsisdn*/ Rlog.pii(LOG_TAG, mMsisdn));
+            break;
+
+            case EVENT_SET_MSISDN_DONE:
+                isRecordLoadResponse = false;
+                ar = (AsyncResult)msg.obj;
+
+                if (ar.exception == null) {
+                    mMsisdn = mNewMsisdn;
+                    mMsisdnTag = mNewMsisdnTag;
+                    // MTK-START
+                    mRecordsEventsRegistrants.notifyResult(EVENT_MSISDN);
+                    // MTK-END
+                    log("Success to update EF[MSISDN]");
+                }
+
+                if (ar.userObj != null) {
+                    AsyncResult.forMessage(((Message) ar.userObj)).exception
+                            = ar.exception;
+                    ((Message) ar.userObj).sendToTarget();
+                }
+                break;
+
+            case EVENT_GET_MWIS_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+                data = (byte[])ar.result;
+
+                if(DBG) log("EF_MWIS : " + IccUtils.bytesToHexString(data));
+
+                if (ar.exception != null) {
+                    if(DBG) loge("EVENT_GET_MWIS_DONE exception = "
+                            + ar.exception);
+                    break;
+                }
+
+                if ((data[0] & 0xff) == 0xff) {
+                    if(DBG) log("SIMRecords: Uninitialized record MWIS");
+                    break;
+                }
+
+                mEfMWIS = data;
+                break;
+
+            case EVENT_GET_VOICE_MAIL_INDICATOR_CPHS_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+                data = (byte[])ar.result;
+
+                if(DBG) log("EF_CPHS_MWI: " + IccUtils.bytesToHexString(data));
+
+                if (ar.exception != null) {
+                    if(DBG) loge("EVENT_GET_VOICE_MAIL_INDICATOR_CPHS_DONE exception = "
+                            + ar.exception);
+                    break;
+                }
+
+                mEfCPHS_MWI = data;
+                break;
+
+            case EVENT_GET_ICCID_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+                data = (byte[])ar.result;
+
+                if (ar.exception != null) {
+                    break;
+                }
+
+                mIccId = IccUtils.bcdToString(data, 0, data.length);
+                mFullIccId = IccUtils.bchToString(data, 0, data.length);
+
+                log("iccid: " + SubscriptionInfo.givePrintableIccid(mFullIccId));
+
+            break;
+
+
+            case EVENT_GET_AD_DONE:
+                try {
+                    isRecordLoadResponse = true;
+
+                    ar = (AsyncResult)msg.obj;
+                    data = (byte[])ar.result;
+
+                    if (ar.exception != null) {
+                        break;
+                    }
+
+                    log("EF_AD: " + IccUtils.bytesToHexString(data));
+
+                    if (data.length < 3) {
+                        log("Corrupt AD data on SIM");
+                        break;
+                    }
+
+                    // MTK-START
+                    if ((data[0] & 1) == 1 && (data[2] & 1) == 1) {
+                        //TS31.102: EF_AD. If the bit1 of byte 1 is 1
+                        //,then bit 1 of byte 3 is for ciphering.
+                        log("SIMRecords: Cipher is enable");
+                    }
+                    // MTK-END
+
+                    if (data.length == 3) {
+                        log("MNC length not present in EF_AD");
+                        break;
+                    }
+
+                    mMncLength = data[3] & 0xf;
+                    log("setting4 mMncLength=" + mMncLength);
+
+                    if (mMncLength == 0xf) {
+                        mMncLength = UNKNOWN;
+                        log("setting5 mMncLength=" + mMncLength);
+                    } else if (mMncLength != 2 && mMncLength != 3) {
+                        mMncLength = UNINITIALIZED;
+                        log("setting5 mMncLength=" + mMncLength);
+                    }
+                } finally {
+                    if (((mMncLength == UNINITIALIZED) || (mMncLength == UNKNOWN) ||
+                            (mMncLength == 2)) && ((mImsi != null) && (mImsi.length() >= 6))) {
+                        String mccmncCode = mImsi.substring(0, 6);
+                        log("mccmncCode=" + mccmncCode);
+                        for (String mccmnc : MCCMNC_CODES_HAVING_3DIGITS_MNC) {
+                            if (mccmnc.equals(mccmncCode)) {
+                                mMncLength = 3;
+                                log("setting6 mMncLength=" + mMncLength);
+                                break;
+                            }
+                        }
+                    }
+
+                    if (mMncLength == UNKNOWN || mMncLength == UNINITIALIZED) {
+                        if (mImsi != null) {
+                            try {
+                                int mcc = Integer.parseInt(mImsi.substring(0,3));
+
+                                mMncLength = MccTable.smallestDigitsMccForMnc(mcc);
+                                log("setting7 mMncLength=" + mMncLength);
+                            } catch (NumberFormatException e) {
+                                mMncLength = UNKNOWN;
+                                loge("Corrupt IMSI! setting8 mMncLength=" + mMncLength);
+                            }
+                        } else {
+                            // Indicate we got this info, but it didn't contain the length.
+                            mMncLength = UNKNOWN;
+                            log("MNC length not present in EF_AD setting9 mMncLength=" + mMncLength);
+                        }
+                    }
+                    if (mImsi != null && mMncLength != UNKNOWN) {
+                        // finally have both imsi and the length of the mnc and can parse
+                        // the imsi properly
+                        log("update mccmnc=" + mImsi.substring(0, 3 + mMncLength));
+                        // MTK-START
+                        //MccTable.updateMccMncConfiguration(mContext,
+                                //mImsi.substring(0, 3 + mMncLength), false);
+                        updateConfiguration(mImsi.substring(0, 3 + mMncLength));
+                        // MTK-END
+                    }
+                }
+            break;
+
+            case EVENT_GET_SPN_DONE:
+                // MTK-START
+                if (DBG) log("EF_SPN loaded and try to extract: ");
+                // MTK-END
+                isRecordLoadResponse = true;
+                ar = (AsyncResult) msg.obj;
+                // MTK-START
+                //getSpnFsm(false, ar);
+                if (ar != null && ar.exception == null) {
+                    if (DBG) log("getSpnFsm, Got data from EF_SPN");
+                    data = (byte[]) ar.result;
+                    mSpnDisplayCondition = 0xff & data[0];
+
+                    // [ALPS00121176], 255 means invalid SPN file
+                    if (mSpnDisplayCondition == 255) {
+                        mSpnDisplayCondition = -1;
+                    }
+
+                    setServiceProviderName(
+                            IccUtils.adnStringFieldToString(data, 1, data.length - 1));
+                    mSpNameInEfSpn = getServiceProviderName(); // MVNO-API
+                    if (mSpNameInEfSpn != null && mSpNameInEfSpn.equals("")) {
+                        if (DBG) log("set spNameInEfSpn to null because parsing result is empty");
+                        mSpNameInEfSpn = null;
+                    }
+
+                    if (DBG) log("Load EF_SPN: " + getServiceProviderName()
+                            + " spnDisplayCondition: " + mSpnDisplayCondition);
+                    mTelephonyManager.setSimOperatorNameForPhone(mParentApp.getPhoneId(),
+                            getServiceProviderName());
+                } else {
+                    if (DBG) loge(": read spn fail!");
+                    // See TS 51.011 10.3.11.  Basically, default to
+                    // show PLMN always, and SPN also if roaming.
+                    mSpnDisplayCondition = -1;
+                }
+                // MTK-END
+            break;
+
+            case EVENT_GET_CFF_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult) msg.obj;
+                data = (byte[]) ar.result;
+
+                if (ar.exception != null) {
+                    mEfCff = null;
+                } else {
+                    log("EF_CFF_CPHS: " + IccUtils.bytesToHexString(data));
+                    mEfCff = data;
+                }
+
+                break;
+
+            case EVENT_GET_SPDI_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+                data = (byte[])ar.result;
+
+                if (ar.exception != null) {
+                    break;
+                }
+
+                parseEfSpdi(data);
+            break;
+
+            case EVENT_UPDATE_DONE:
+                ar = (AsyncResult)msg.obj;
+                if (ar.exception != null) {
+                    logw("update failed. ", ar.exception);
+                }
+            break;
+
+            case EVENT_GET_PNN_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+                // MTK-START
+                //data = (byte[])ar.result;
+                // MTK-END
+
+                if (ar.exception != null) {
+                    break;
+                }
+
+                // MTK-START
+                parseEFpnn((ArrayList) ar.result);
+               /*
+                SimTlv tlv = new SimTlv(data, 0, data.length);
+
+                for ( ; tlv.isValidObject() ; tlv.nextObject()) {
+                    if (tlv.getTag() == TAG_FULL_NETWORK_NAME) {
+                        mPnnHomeName
+                            = IccUtils.networkNameToString(
+                                tlv.getData(), 0, tlv.getData().length);
+                        break;
+                    }
+                }
+                */
+                // MTK-END
+            break;
+
+            case EVENT_GET_ALL_SMS_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+                if (ar.exception != null)
+                    break;
+
+                handleSmses((ArrayList<byte []>) ar.result);
+                break;
+
+            case EVENT_MARK_SMS_READ_DONE:
+                Rlog.i("ENF", "marked read: sms " + msg.arg1);
+                break;
+
+
+            case EVENT_SMS_ON_SIM:
+                isRecordLoadResponse = false;
+
+                ar = (AsyncResult)msg.obj;
+
+                int[] index = (int[])ar.result;
+
+                if (ar.exception != null || index.length != 1) {
+                    loge("Error on SMS_ON_SIM with exp "
+                            + ar.exception + " length " + index.length);
+                } else {
+                    log("READ EF_SMS RECORD index=" + index[0]);
+                    mFh.loadEFLinearFixed(EF_SMS,index[0],
+                            obtainMessage(EVENT_GET_SMS_DONE));
+                }
+                break;
+
+            case EVENT_GET_SMS_DONE:
+                isRecordLoadResponse = false;
+                ar = (AsyncResult)msg.obj;
+                if (ar.exception == null) {
+                    handleSms((byte[])ar.result);
+                } else {
+                    loge("Error on GET_SMS with exp " + ar.exception);
+                }
+                break;
+            case EVENT_GET_SST_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+                data = (byte[])ar.result;
+
+                if (ar.exception != null) {
+                    break;
+                }
+
+                mUsimServiceTable = new UsimServiceTable(data);
+                if (DBG) log("SST: " + mUsimServiceTable);
+                // MTK-START
+                mEfSST = data;
+
+                if ((mParentApp != null) &&
+                        (mParentApp.getState() == AppState.APPSTATE_READY)) {
+                    mParentApp.queryFdn();
+                }
+
+                fetchMbiRecords();
+                fetchMwisRecords();
+                fetchPnnAndOpl();
+                fetchSpn();
+                fetchSmsp();
+                fetchGbaRecords();
+                // MTK-END
+                break;
+
+            case EVENT_GET_INFO_CPHS_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+
+                if (ar.exception != null) {
+                    break;
+                }
+
+                mCphsInfo = (byte[])ar.result;
+
+                if (DBG) log("iCPHS: " + IccUtils.bytesToHexString(mCphsInfo));
+                // MTK-START
+                // ALPS00301018
+                if (this.isValidMBI == false && isCphsMailboxEnabled()) {
+                    mRecordsToLoad += 1;
+                    new AdnRecordLoader(mFh).loadFromEF(EF_MAILBOX_CPHS,
+                                EF_EXT1, 1,
+                                obtainMessage(EVENT_GET_CPHS_MAILBOX_DONE));
+                }
+                // MTK-END
+            break;
+
+            case EVENT_SET_MBDN_DONE:
+                isRecordLoadResponse = false;
+                ar = (AsyncResult)msg.obj;
+
+                if (DBG) log("EVENT_SET_MBDN_DONE ex:" + ar.exception);
+                if (ar.exception == null) {
+                    mVoiceMailNum = mNewVoiceMailNum;
+                    mVoiceMailTag = mNewVoiceMailTag;
+                }
+
+                if (isCphsMailboxEnabled()) {
+                    adn = new AdnRecord(mVoiceMailTag, mVoiceMailNum);
+                    Message onCphsCompleted = (Message) ar.userObj;
+
+                    /* write to cphs mailbox whenever it is available but
+                    * we only need notify caller once if both updating are
+                    * successful.
+                    *
+                    * so if set_mbdn successful, notify caller here and set
+                    * onCphsCompleted to null
+                    */
+                    if (ar.exception == null && ar.userObj != null) {
+                        AsyncResult.forMessage(((Message) ar.userObj)).exception
+                                = null;
+                        ((Message) ar.userObj).sendToTarget();
+
+                        if (DBG) log("Callback with MBDN successful.");
+
+                        onCphsCompleted = null;
+                    }
+
+                    new AdnRecordLoader(mFh).
+                            updateEF(adn, EF_MAILBOX_CPHS, EF_EXT1, 1, null,
+                            obtainMessage(EVENT_SET_CPHS_MAILBOX_DONE,
+                                    onCphsCompleted));
+                } else {
+                    if (ar.userObj != null) {
+                        Resources resource = Resources.getSystem();
+                        if (ar.exception != null && resource.getBoolean(com.android.internal.
+                                    R.bool.editable_voicemailnumber)) {
+                            // GsmCdmaPhone will store vm number on device
+                            // when IccVmNotSupportedException occurred
+                            AsyncResult.forMessage(((Message) ar.userObj)).exception
+                                = new IccVmNotSupportedException(
+                                        "Update SIM voice mailbox error");
+                        } else {
+                            AsyncResult.forMessage(((Message) ar.userObj)).exception
+                                = ar.exception;
+                        }
+                        ((Message) ar.userObj).sendToTarget();
+                    }
+                }
+                break;
+            case EVENT_SET_CPHS_MAILBOX_DONE:
+                isRecordLoadResponse = false;
+                ar = (AsyncResult)msg.obj;
+                if(ar.exception == null) {
+                    mVoiceMailNum = mNewVoiceMailNum;
+                    mVoiceMailTag = mNewVoiceMailTag;
+                } else {
+                    if (DBG) loge("Set CPHS MailBox with exception: "
+                            + ar.exception);
+                }
+                if (ar.userObj != null) {
+                    if (DBG) log("Callback with CPHS MB successful.");
+                    AsyncResult.forMessage(((Message) ar.userObj)).exception
+                            = ar.exception;
+                    ((Message) ar.userObj).sendToTarget();
+                }
+                break;
+            case EVENT_SIM_REFRESH:
+                isRecordLoadResponse = false;
+                ar = (AsyncResult)msg.obj;
+                if (DBG) log("Sim REFRESH with exception: " + ar.exception);
+                if (ar.exception == null) {
+                    handleSimRefresh((IccRefreshResponse)ar.result);
+                }
+                break;
+            case EVENT_GET_CFIS_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+                data = (byte[])ar.result;
+
+                if (ar.exception != null) {
+                    mEfCfis = null;
+                } else {
+                    log("EF_CFIS: " + IccUtils.bytesToHexString(data));
+                    mEfCfis = data;
+                }
+
+                break;
+
+            // MTK-START
+            case EVENT_GET_SIM_ECC_DONE:
+                if (DBG) log("handleMessage (EVENT_GET_SIM_ECC_DONE)");
+
+                ar = (AsyncResult) msg.obj;
+                if (ar.exception != null) {
+                    if (DBG) loge("Get SIM ecc with exception: " + ar.exception);
+                    break;
+                }
+
+                mEfEcc = "";
+
+                data = (byte[]) ar.result;
+                for (int i = 0 ; i + 2 < data.length ; i += 3) {
+                    String eccNum;
+                    eccNum = IccUtils.bcdToString(data, i, 3);
+                    if (eccNum != null && !eccNum.equals("") && !mEfEcc.equals("")) {
+                        mEfEcc = mEfEcc + ";";
+                    }
+                    // Add service category
+                    mEfEcc += eccNum + ",0" ;
+                }
+                mEfEcc += ";112,0;911,0";
+
+                if (DBG) log("SIM mEfEcc is " + mEfEcc);
+                SystemProperties.set(SIM_RECORDS_PROPERTY_ECC_LIST[mSlotId], mEfEcc);
+            break;
+
+            case EVENT_GET_USIM_ECC_DONE:
+                if (DBG) log("handleMessage (EVENT_GET_USIM_ECC_DONE)");
+
+                ar = (AsyncResult) msg.obj;
+                if (ar.exception != null) {
+                    if (DBG) loge("Get USIM ecc with exception: " + ar.exception);
+                    break;
+                }
+
+                ArrayList eccRecords = (ArrayList) ar.result;
+                int count = eccRecords.size();
+
+                mEfEcc = "";
+
+                for (int i = 0; i < count; i++) {
+                    data = (byte[]) eccRecords.get(i);
+                    if (DBG) {
+                        log("USIM EF_ECC record " + i + ": "+ IccUtils.bytesToHexString(data));
+                    }
+                    String eccNum;
+                    eccNum = IccUtils.bcdToString(data, 0, 3);
+                    if (eccNum != null && !eccNum.equals("")) {
+                        if (!mEfEcc.equals("")) {
+                            mEfEcc = mEfEcc + ";";
+                        }
+                        mEfEcc = mEfEcc + eccNum ;
+
+                        //Add service category
+                        int category = (data[data.length - 1] & 0x000000FF);
+                        mEfEcc += "," + String.valueOf(category);
+                    }
+                }
+                mEfEcc += ";112,0;911,0";
+
+                if (DBG) log("USIM mEfEcc is " + mEfEcc);
+                SystemProperties.set(SIM_RECORDS_PROPERTY_ECC_LIST[mSlotId], mEfEcc);
+            break;
+
+            case EVENT_GET_CSP_CPHS_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+
+                if (ar.exception != null) {
+                    loge("Exception in fetching EF_CSP data " + ar.exception);
+                    break;
+                }
+
+                data = (byte[])ar.result;
+
+                log("EF_CSP: " + IccUtils.bytesToHexString(data));
+                handleEfCspData(data);
+                break;
+
+            case EVENT_GET_GID1_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+                data =(byte[])ar.result;
+
+                if (ar.exception != null) {
+                    loge("Exception in get GID1 " + ar.exception);
+                    mGid1 = null;
+                    break;
+                }
+                mGid1 = IccUtils.bytesToHexString(data);
+                log("GID1: " + mGid1);
+
+                break;
+
+            case EVENT_GET_GID2_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult)msg.obj;
+                data =(byte[])ar.result;
+
+                if (ar.exception != null) {
+                    loge("Exception in get GID2 " + ar.exception);
+                    mGid2 = null;
+                    break;
+                }
+                mGid2 = IccUtils.bytesToHexString(data);
+                log("GID2: " + mGid2);
+
+                break;
+
+            case EVENT_CARRIER_CONFIG_CHANGED:
+                handleCarrierNameOverride();
+                break;
+
+            // MTK-START
+            case EVENT_GET_ALL_OPL_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult) msg.obj;
+                if (ar.exception != null) {
+                    break;
+                }
+                parseEFopl((ArrayList) ar.result);
+                break;
+
+            case EVENT_GET_CPHSONS_DONE:
+                if (DBG) log("handleMessage (EVENT_GET_CPHSONS_DONE)");
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult) msg.obj;
+                if (ar != null && ar.exception == null) {
+                    data = (byte[]) ar.result;
+                    cphsOnsl = IccUtils.adnStringFieldToString(
+                            data, 0, data.length);
+                    if (DBG) log("Load EF_SPN_CPHS: " + cphsOnsl);
+                }
+                break;
+
+            case EVENT_GET_SHORT_CPHSONS_DONE:
+                if (DBG) log("handleMessage (EVENT_GET_SHORT_CPHSONS_DONE)");
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult) msg.obj;
+                if (ar != null && ar.exception == null) {
+                    data = (byte[]) ar.result;
+                    cphsOnss = IccUtils.adnStringFieldToString(
+                            data, 0, data.length);
+
+                    if (DBG) log("Load EF_SPN_SHORT_CPHS: " + cphsOnss);
+                }
+                break;
+            case EVENT_MELOCK_CHANGED:
+                if (DBG) log("handleMessage (EVENT_MELOCK_CHANGED)");
+                ar = (AsyncResult) msg.obj;
+
+                if (ar != null && ar.exception == null && ar.result != null) {
+                    int[] simMelockEvent = (int []) ar.result;
+
+                    if (DBG) log("sim melock event = " + simMelockEvent[0]);
+
+                    RebootClickListener listener = new RebootClickListener();
+
+                    if (simMelockEvent[0] == 0) {
+                        AlertDialog alertDialog = new AlertDialog.Builder(mContext)
+                            .setTitle("Unlock Phone")
+                            .setMessage(
+                                "Please restart the phone now since unlock setting has changed.")
+                            .setPositiveButton("OK", listener)
+                            .create();
+
+                        alertDialog.setCancelable(false);
+                        alertDialog.setCanceledOnTouchOutside(false);
+
+                        alertDialog.getWindow().setType(
+                                WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);
+                        alertDialog.show();
+                    }
+                }
+                break;
+
+            case EVENT_EF_CSP_PLMN_MODE_BIT_CHANGED:
+                ar = (AsyncResult) msg.obj;
+                if (ar != null && ar.exception == null)  {
+                    processEfCspPlmnModeBitUrc(((int[]) ar.result)[0]);
+                }
+                break;
+
+            // ALPS00302702 RAT balancing
+            case EVENT_GET_RAT_DONE:
+                if (DBG) log("handleMessage (EVENT_GET_RAT_DONE)");
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult) msg.obj;
+                mEfRatLoaded = true;
+                if (ar != null && ar.exception == null) {
+                    mEfRat = ((byte[]) ar.result);
+                    log("load EF_RAT complete: " + mEfRat[0]);
+                    boradcastEfRatContentNotify(EF_RAT_FOR_OTHER_CASE);
+                } else {
+                    log("load EF_RAT fail");
+                    mEfRat = null;
+                    if (mParentApp.getType() == AppType.APPTYPE_USIM) {
+                        boradcastEfRatContentNotify(EF_RAT_NOT_EXIST_IN_USIM);
+                    } else {
+                        boradcastEfRatContentNotify(EF_RAT_FOR_OTHER_CASE);
+                    }
+                }
+                break;
+
+            /*
+              Detail description:
+              This feature provides a interface to get menu title string from EF_SUME
+            */
+            case EVENT_QUERY_MENU_TITLE_DONE:
+                log("[sume receive response message");
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult) msg.obj;
+                if (ar != null && ar.exception == null) {
+                    data = (byte[]) ar.result;
+                    if (data != null && data.length >= 2) {
+                        int tag = data[0] & 0xff;
+                        int len = data[1] & 0xff;
+                        log("[sume tag = " + tag + ", len = " + len);
+                        mMenuTitleFromEf = IccUtils.adnStringFieldToString(data, 2, len);
+                        log("[sume menu title is " + mMenuTitleFromEf);
+                        /*-begin-chenhu*/
+                        int def = mContext.getResources().getInteger(com.android.internal.R.integer.def_customized_stk_app_name);
+                        if (def == 2) {
+                            SystemProperties.set("gsm.stk.perso.app_title", mMenuTitleFromEf);
+                        }
+                        /*-end-chenhu*/
+                    }
+                } else {
+                    if (ar.exception != null) {
+                        loge("[sume exception in AsyncResult: " +
+                                ar.exception.getClass().getName());
+                    } else {
+                        log("[sume null AsyncResult");
+                    }
+                    mMenuTitleFromEf = null;
+                }
+
+                break;
+            case EVENT_RADIO_AVAILABLE:
+                // TODO: Wait for isSetLanguageBySIM ready
+                if (mTelephonyExt.isSetLanguageBySIM()) {
+                    fetchLanguageIndicator();
+                }
+                mMsisdn = "";
+                //setNumberToSimInfo();
+                mRecordsEventsRegistrants.notifyResult(EVENT_MSISDN);
+                break;
+            case EVENT_GET_LI_DONE:
+                ar = (AsyncResult) msg.obj;
+                data = (byte[]) ar.result;
+
+                if (ar.exception == null) {
+                   log("EF_LI: " +
+                   IccUtils.bytesToHexString(data));
+                   mEfLi = data;
+                }
+                onLanguageFileLoaded();
+                break;
+            case EVENT_GET_ELP_DONE:
+                ar = (AsyncResult) msg.obj;
+                data = (byte[]) ar.result;
+
+                if (ar.exception == null) {
+                    log("EF_ELP: " +
+                       IccUtils.bytesToHexString(data));
+                    mEfELP = data;
+                }
+                onLanguageFileLoaded();
+                break;
+
+            case EVENT_GET_PSISMSC_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult) msg.obj;
+                data = (byte[]) ar.result;
+
+                if (ar.exception != null) {
+                    break;
+                }
+
+                log("EF_PSISMSC: " + IccUtils.bytesToHexString(data));
+
+                if (data != null) {
+                    mEfPsismsc = data;
+                }
+                break;
+
+            case EVENT_GET_SMSP_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult) msg.obj;
+                data = (byte[]) ar.result;
+
+                if (ar.exception != null) {
+                    break;
+                }
+
+                log("EF_SMSP: " + IccUtils.bytesToHexString(data));
+
+                if (data != null) {
+                    mEfSmsp = data;
+                }
+                break;
+
+            case EVENT_GET_GBABP_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult) msg.obj;
+
+                if (ar.exception == null) {
+                   data = ((byte[]) ar.result);
+                   mGbabp = IccUtils.bytesToHexString(data);
+
+                   if (DBG) log("EF_GBABP=" + mGbabp);
+                } else {
+                    loge("Error on GET_GBABP with exp " + ar.exception);
+                }
+                break;
+
+            case EVENT_GET_GBANL_DONE:
+                isRecordLoadResponse = true;
+
+                ar = (AsyncResult) msg.obj;
+
+                if (ar.exception == null) {
+                    mEfGbanlList = ((ArrayList<byte[]>) ar.result);
+                    if (DBG) log("GET_GBANL record count: " + mEfGbanlList.size());
+                } else {
+                    loge("Error on GET_GBANL with exp " + ar.exception);
+                }
+                break;
+            // MTK-START
+            case EVENT_CFU_IND:
+                ar = (AsyncResult) msg.obj;
+                /* Line1 is enabled or disabled while reveiving this EVENT */
+                if (ar != null && ar.exception == null && ar.result != null) {
+                   int[] cfuResult = (int[]) ar.result;
+                   log("handle EVENT_CFU_IND, setVoiceCallForwardingFlag:" + cfuResult[0]);
+                }
+                break;
+            // MTK-END
+            case EVENT_IMSI_REFRESH_QUERY:
+                log("handleMessage (EVENT_IMSI_REFRESH_QUERY) mImsi= " + mImsi);
+                mCi.getIMSIForApp(mParentApp.getAid(),
+                    obtainMessage(EVENT_IMSI_REFRESH_QUERY_DONE));
+                break;
+            case EVENT_IMSI_REFRESH_QUERY_DONE:
+                log("handleMessage (EVENT_IMSI_REFRESH_QUERY_DONE)");
+                ar = (AsyncResult) msg.obj;
+                if (ar.exception != null) {
+                    loge("Exception querying IMSI, Exception:" + ar.exception);
+                    break;
+                }
+
+                mImsi = (String) ar.result;
+                // IMSI (MCC+MNC+MSIN) is at least 6 digits, but not more
+                // than 15 (and usually 15).
+                if (mImsi != null && (mImsi.length() < 6 || mImsi.length() > 15)) {
+                    loge("invalid IMSI " + mImsi);
+                    mImsi = null;
+                }
+                log("IMSI: mMncLength=" + mMncLength);
+                log("IMSI: " + mImsi.substring(0, 6) + "xxxxxxx");
+
+                if (((mMncLength == UNINITIALIZED) ||
+                        (mMncLength == UNKNOWN) || (mMncLength == 2)) &&
+                        ((mImsi != null) && (mImsi.length() >= 6))) {
+                    String mccmncRefresh = mImsi.substring(0, 6);
+                    for (String mccmncR: MCCMNC_CODES_HAVING_3DIGITS_MNC) {
+                        if (mccmncR.equals(mccmncRefresh)) {
+                            mMncLength = 3;
+                            log("IMSI: setting1 mMncLength=" + mMncLength);
+                            break;
+                        }
+                    }
+                }
+                if (mMncLength == UNKNOWN || mMncLength == UNINITIALIZED) {
+                    // the SIM has told us all it knows, but it didn't know the mnc length.
+                    // guess using the mcc
+                    try {
+                        int mccR = Integer.parseInt(mImsi.substring(0, 3));
+                        mMncLength = MccTable.smallestDigitsMccForMnc(mccR);
+                        log("setting2 mMncLength=" + mMncLength);
+                    } catch (NumberFormatException e) {
+                        mMncLength = UNKNOWN;
+                        loge("Corrupt IMSI! setting3 mMncLength=" + mMncLength);
+                    }
+                }
+
+                if (mMncLength != UNKNOWN && mMncLength != UNINITIALIZED) {
+                    log("update mccmnc=" + mImsi.substring(0, 3 + mMncLength));
+                    // finally have both the imsi and the mncLength and can parse the imsi properly
+                    //MccTable.updateMccMncConfiguration(mContext,
+                            //mImsi.substring(0, 3 + mMncLength), false);
+                    updateConfiguration(mImsi.substring(0, 3 + mMncLength));
+                }
+                if (!mImsi.equals(mSimImsi)) {
+                    mSimImsi = mImsi;
+                    mImsiReadyRegistrants.notifyRegistrants();
+                    log("SimRecords: mImsiReadyRegistrants.notifyRegistrants");
+                }
+
+                if (mRecordsToLoad == 0 && mRecordsRequested == true) {
+                    onAllRecordsLoaded();
+                }
+                break;
+            // MTK-START
+            /** M: Bug Fix for ALPS02189616 */
+            // handle new event
+            case EVENT_DELAYED_SEND_PHB_CHANGE:
+                mPhbReady = isPhbReady();
+                log("[EVENT_DELAYED_SEND_PHB_CHANGE] isReady : " + mPhbReady);
+                broadcastPhbStateChangedIntent(mPhbReady);
+                break;
+            // MTK-END
+
+            default:
+                super.handleMessage(msg);   // IccRecords handles generic record load responses
+
+        }}catch (RuntimeException exc) {
+            // I don't want these exceptions to be fatal
+            logw("Exception parsing SIM record", exc);
+        } finally {
+            // Count up record load responses even if they are fails
+            if (isRecordLoadResponse) {
+                onRecordLoaded();
+            }
+        }
+    }
+
+    private class EfPlLoaded implements IccRecordLoaded {
+        public String getEfName() {
+            return "EF_PL";
+        }
+
+        public void onRecordLoaded(AsyncResult ar) {
+            mEfPl = (byte[]) ar.result;
+            if (DBG) log("EF_PL=" + IccUtils.bytesToHexString(mEfPl));
+        }
+    }
+
+    private class EfUsimLiLoaded implements IccRecordLoaded {
+        public String getEfName() {
+            return "EF_LI";
+        }
+
+        public void onRecordLoaded(AsyncResult ar) {
+            mEfLi = (byte[]) ar.result;
+            if (DBG) log("EF_LI=" + IccUtils.bytesToHexString(mEfLi));
+        }
+    }
+
+    private void handleFileUpdate(int efid) {
+        switch(efid) {
+            case EF_MBDN:
+                mRecordsToLoad++;
+                new AdnRecordLoader(mFh).loadFromEF(EF_MBDN, EF_EXT6,
+                        mMailboxIndex, obtainMessage(EVENT_GET_MBDN_DONE));
+                break;
+            case EF_MAILBOX_CPHS:
+                mRecordsToLoad++;
+                new AdnRecordLoader(mFh).loadFromEF(EF_MAILBOX_CPHS, EF_EXT1,
+                        1, obtainMessage(EVENT_GET_CPHS_MAILBOX_DONE));
+                break;
+            case EF_CSP_CPHS:
+                mRecordsToLoad++;
+                log("[CSP] SIM Refresh for EF_CSP_CPHS");
+                mFh.loadEFTransparent(EF_CSP_CPHS,
+                        obtainMessage(EVENT_GET_CSP_CPHS_DONE));
+                break;
+            case EF_FDN:
+                if (DBG) log("SIM Refresh called for EF_FDN");
+                mParentApp.queryFdn();
+            // MTK-START
+                //break;
+            case EF_ADN:
+            case EF_SDN:
+            case EF_PBR:
+                // ALPS00523253: If the file update is related to PHB efid, set phb ready to false
+                if (false == mIsPhbEfResetDone) {
+                    mIsPhbEfResetDone = true;
+                    mAdnCache.reset();
+                    log("handleFileUpdate ADN like");
+                    setPhbReady(false);
+                }
+                break;
+            // MTK-END
+            case EF_MSISDN:
+                mRecordsToLoad++;
+                log("SIM Refresh called for EF_MSISDN");
+                new AdnRecordLoader(mFh).loadFromEF(EF_MSISDN, getExtFromEf(EF_MSISDN), 1,
+                        obtainMessage(EVENT_GET_MSISDN_DONE));
+                break;
+            case EF_CFIS:
+                mRecordsToLoad++;
+                log("SIM Refresh called for EF_CFIS");
+                mFh.loadEFLinearFixed(EF_CFIS,
+                        1, obtainMessage(EVENT_GET_CFIS_DONE));
+                break;
+            case EF_CFF_CPHS:
+                mRecordsToLoad++;
+                log("SIM Refresh called for EF_CFF_CPHS");
+                mFh.loadEFTransparent(EF_CFF_CPHS,
+                        obtainMessage(EVENT_GET_CFF_DONE));
+                break;
+            default:
+                // MTK-START
+                log("handleFileUpdate default");
+                // For now, fetch all records if this is not a
+                // voicemail number.
+                // TODO: Handle other cases, instead of fetching all.
+                //mAdnCache.reset();
+                if (mAdnCache.isUsimPhbEfAndNeedReset(efid) == true) {
+                    if (false == mIsPhbEfResetDone) {
+                        mIsPhbEfResetDone = true;
+                        mAdnCache.reset();
+                        setPhbReady(false);
+                    }
+                }
+                // MTK-END
+                fetchSimRecords();
+                break;
+        }
+    }
+
+    private void handleSimRefresh(IccRefreshResponse refreshResponse){
+        if (refreshResponse == null) {
+            if (DBG) log("handleSimRefresh received without input");
+            return;
+        }
+
+        // MTK-START
+        //if (refreshResponse.aid != null &&
+        if (refreshResponse.aid != null && !TextUtils.isEmpty(refreshResponse.aid) &&
+        // MTK-START
+                !refreshResponse.aid.equals(mParentApp.getAid())) {
+            // This is for different app. Ignore.
+            // MTK-START
+            if (DBG) {
+                log("handleSimRefresh, refreshResponse.aid = " + refreshResponse.aid
+                        + ", mParentApp.getAid() = " + mParentApp.getAid());
+            }
+            // MTK-END
+            return;
+        }
+
+        switch (refreshResponse.refreshResult) {
+            case IccRefreshResponse.REFRESH_RESULT_FILE_UPDATE:
+                // MTK-START
+                if (DBG) log("handleSimRefresh with SIM_REFRESH_FILE_UPDATED");
+
+                handleFileUpdate(refreshResponse.efId);
+
+                mIsPhbEfResetDone = false;
+                // MTK-END
+                break;
+            case IccRefreshResponse.REFRESH_RESULT_INIT:
+                if (DBG) log("handleSimRefresh with SIM_REFRESH_INIT");
+                // need to reload all files (that we care about)
+                // MTK-START
+                setPhbReady(false);
+                // MTK-END
+                onIccRefreshInit();
+                break;
+            case IccRefreshResponse.REFRESH_RESULT_RESET:
+                // Refresh reset is handled by the UiccCard object.
+                if (DBG) log("handleSimRefresh with SIM_REFRESH_RESET");
+                // MTK-START
+                //if (requirePowerOffOnSimRefreshReset()) {
+                    //mCi.setRadioPower(false, null);
+                    /* Note: no need to call setRadioPower(true).  Assuming the desired
+                    * radio power state is still ON (as tracked by ServiceStateTracker),
+                    * ServiceStateTracker will call setRadioPower when it receives the
+                    * RADIO_STATE_CHANGED notification for the power off.  And if the
+                    * desired power state has changed in the interim, we don't want to
+                    * override it with an unconditional power on.
+                    */
+                    TelephonyManager.MultiSimVariants mSimVar =
+                            TelephonyManager.getDefault().getMultiSimConfiguration();
+                    log("mSimVar : " + mSimVar);
+                    if (SystemProperties.get("ro.sim_refresh_reset_by_modem").equals("1") != true) {
+                        log("sim_refresh_reset_by_modem false");
+                        mCi.resetRadio(null);
+                    } else {
+                        log("Sim reset by modem!");
+                    }
+                //}
+                //mAdnCache.reset();
+                setPhbReady(false);
+                onIccRefreshInit();
+                // MTK-END
+                break;
+            case IccRefreshResponse.REFRESH_INIT_FULL_FILE_UPDATED:
+                //ALPS00848917: Add refresh type
+                if (DBG) {
+                    log("handleSimRefresh with REFRESH_INIT_FULL_FILE_UPDATED");
+                }
+                setPhbReady(false);
+                onIccRefreshInit();
+                break;
+            case IccRefreshResponse.REFRESH_INIT_FILE_UPDATED:
+                if (DBG) {
+                    log("handleSimRefresh with REFRESH_INIT_FILE_UPDATED, EFID = "
+                            +  refreshResponse.efId);
+                }
+                handleFileUpdate(refreshResponse.efId);
+
+                mIsPhbEfResetDone = false;
+                if (mParentApp.getState() == AppState.APPSTATE_READY) {
+                    // This will cause files to be reread
+                    sendMessage(obtainMessage(EVENT_APP_READY));
+                }
+                break;
+            case IccRefreshResponse.REFRESH_SESSION_RESET:
+                if (DBG) {
+                    log("handleSimRefresh with REFRESH_SESSION_RESET");
+                }
+                // need to reload all files (that we care about)
+                onIccRefreshInit();
+                break;
+            default:
+                // unknown refresh operation
+                if (DBG) log("handleSimRefresh with unknown operation");
+                break;
+        }
+        // MTK-START
+        // notify stk app to clear the idle text
+        if (refreshResponse.refreshResult == IccRefreshResponse.REFRESH_RESULT_INIT ||
+                refreshResponse.refreshResult == IccRefreshResponse.REFRESH_RESULT_RESET ||
+                refreshResponse.refreshResult ==
+                IccRefreshResponse.REFRESH_INIT_FULL_FILE_UPDATED ||
+                refreshResponse.refreshResult == IccRefreshResponse.REFRESH_INIT_FILE_UPDATED ||
+                refreshResponse.refreshResult == IccRefreshResponse.REFRESH_RESULT_APP_INIT) {
+            // impl
+            log("notify stk app to remove the idle text");
+            Intent intent;
+            intent = new Intent(TelephonyIntents.ACTION_REMOVE_IDLE_TEXT);
+            intent.putExtra(KEY_SIM_ID, mSlotId);
+            mContext.sendBroadcast(intent);
+        }
+        // MTK-END
+    }
+
+    /**
+     * Dispatch 3GPP format message to registrant ({@code GsmCdmaPhone}) to pass to the 3GPP SMS
+     * dispatcher for delivery.
+     */
+    private int dispatchGsmMessage(SmsMessage message) {
+        mNewSmsRegistrants.notifyResult(message);
+        return 0;
+    }
+
+    private void handleSms(byte[] ba) {
+        if (ba[0] != 0)
+            Rlog.d("ENF", "status : " + ba[0]);
+
+        // 3GPP TS 51.011 v5.0.0 (20011-12)  10.5.3
+        // 3 == "received by MS from network; message to be read"
+        if (ba[0] == 3) {
+            int n = ba.length;
+
+            // Note: Data may include trailing FF's.  That's OK; message
+            // should still parse correctly.
+            byte[] pdu = new byte[n - 1];
+            System.arraycopy(ba, 1, pdu, 0, n - 1);
+            SmsMessage message = SmsMessage.createFromPdu(pdu, SmsConstants.FORMAT_3GPP);
+
+            dispatchGsmMessage(message);
+        }
+    }
+
+
+    private void handleSmses(ArrayList<byte[]> messages) {
+        int count = messages.size();
+
+        for (int i = 0; i < count; i++) {
+            byte[] ba = messages.get(i);
+
+            if (ba[0] != 0)
+                Rlog.i("ENF", "status " + i + ": " + ba[0]);
+
+            // 3GPP TS 51.011 v5.0.0 (20011-12)  10.5.3
+            // 3 == "received by MS from network; message to be read"
+
+            if (ba[0] == 3) {
+                int n = ba.length;
+
+                // Note: Data may include trailing FF's.  That's OK; message
+                // should still parse correctly.
+                byte[] pdu = new byte[n - 1];
+                System.arraycopy(ba, 1, pdu, 0, n - 1);
+                SmsMessage message = SmsMessage.createFromPdu(pdu, SmsConstants.FORMAT_3GPP);
+
+                dispatchGsmMessage(message);
+
+                // 3GPP TS 51.011 v5.0.0 (20011-12)  10.5.3
+                // 1 == "received by MS from network; message read"
+
+                ba[0] = 1;
+
+                if (false) { // FIXME: writing seems to crash RdoServD
+                    mFh.updateEFLinearFixed(EF_SMS,
+                            i, ba, null, obtainMessage(EVENT_MARK_SMS_READ_DONE, i));
+                }
+            }
+        }
+    }
+
+    // MTK-START
+    private String findBestLanguage(byte[] languages) {
+        String bestMatch = null;
+        String[] locales = mContext.getAssets().getLocales();
+
+        if ((languages == null) || (locales == null)) return null;
+
+        // Each 2-bytes consists of one language
+        for (int i = 0; (i + 1) < languages.length; i += 2) {
+            try {
+                String lang = new String(languages, i, 2, "ISO-8859-1");
+                if (DBG) log ("languages from sim = " + lang);
+                for (int j = 0; j < locales.length; j++) {
+                    if (locales[j] != null && locales[j].length() >= 2 &&
+                            locales[j].substring(0, 2).equalsIgnoreCase(lang)) {
+                        return lang;
+                    }
+                }
+                if (bestMatch != null) break;
+            } catch(java.io.UnsupportedEncodingException e) {
+                log ("Failed to parse USIM language records" + e);
+            }
+        }
+        // no match found. return null
+        return null;
+    }
+
+    // MTK-END
+
+    @Override
+    protected void onRecordLoaded() {
+        // One record loaded successfully or failed, In either case
+        // we need to update the recordsToLoad count
+        mRecordsToLoad -= 1;
+        if (DBG) log("onRecordLoaded " + mRecordsToLoad + " requested: " + mRecordsRequested);
+
+        if (mRecordsToLoad == 0 && mRecordsRequested == true) {
+            onAllRecordsLoaded();
+        } else if (mRecordsToLoad < 0) {
+            loge("recordsToLoad <0, programmer error suspected");
+            mRecordsToLoad = 0;
+        }
+    }
+
+    private void setVoiceCallForwardingFlagFromSimRecords() {
+        // if (validEfCfis(mEfCfis)) {
+        // MTK-START
+        if (checkEfCfis()) {
+        // MTK-END
+            // Refer TS 51.011 Section 10.3.46 for the content description
+            mCallForwardingStatus = (mEfCfis[1] & 0x01);
+            // MTK-START
+            mPhone.setVoiceCallForwardingFlag(1,
+                    mCallForwardingStatus == CALL_FORWARDING_STATUS_ENABLED, null);
+            // MTK-END
+            log("EF_CFIS: callForwardingEnabled=" + mCallForwardingStatus);
+        } else if (mEfCff != null) {
+            mCallForwardingStatus =
+                    ((mEfCff[0] & CFF_LINE1_MASK) == CFF_UNCONDITIONAL_ACTIVE) ?
+                            CALL_FORWARDING_STATUS_ENABLED : CALL_FORWARDING_STATUS_DISABLED;
+            log("EF_CFF: callForwardingEnabled=" + mCallForwardingStatus);
+        } else {
+            mCallForwardingStatus = CALL_FORWARDING_STATUS_UNKNOWN;
+            log("EF_CFIS and EF_CFF not valid. callForwardingEnabled=" + mCallForwardingStatus);
+        }
+    }
+
+    @Override
+    protected void onAllRecordsLoaded() {
+        if (DBG) log("record load complete");
+
+        Resources resource = Resources.getSystem();
+        if (resource.getBoolean(com.android.internal.R.bool.config_use_sim_language_file)) {
+            setSimLanguage(mEfLi, mEfPl);
+        } else {
+            if (DBG) log ("Not using EF LI/EF PL");
+        }
+
+        setVoiceCallForwardingFlagFromSimRecords();
+
+        if (mParentApp.getState() == AppState.APPSTATE_PIN ||
+               mParentApp.getState() == AppState.APPSTATE_PUK ||
+               // MTK-START
+               mParentApp.getState() == AppState.APPSTATE_SUBSCRIPTION_PERSO) {
+               // MTK-END
+            // reset recordsRequested, since sim is not loaded really
+            mRecordsRequested = false;
+            // lock state, only update language
+            return ;
+        }
+
+        // Some fields require more than one SIM record to set
+
+        String operator = getOperatorNumeric();
+        if (!TextUtils.isEmpty(operator)) {
+            log("onAllRecordsLoaded set 'gsm.sim.operator.numeric' to operator='" +
+                    operator + "'");
+            log("update icc_operator_numeric=" + operator);
+            mTelephonyManager.setSimOperatorNumericForPhone(
+                    mParentApp.getPhoneId(), operator);
+            final SubscriptionController subController = SubscriptionController.getInstance();
+            subController.setMccMnc(operator, subController.getDefaultSubId());
+        } else {
+            log("onAllRecordsLoaded empty 'gsm.sim.operator.numeric' skipping");
+        }
+        /*-begin-chenhu*/
+        if(operator != null ){
+            log("SIMRecords: update stk name. operator = " + operator);
+            final int def = mContext.getResources().getInteger(com.android.internal.R.integer.def_customized_stk_app_name);
+            if(def == 3 || def ==2){
+                Intent intent = new Intent("proactive_set_stkselection_app_title");
+                intent.putExtra("simId", mParentApp.getSlotId());
+                mContext.sendBroadcast(intent);
+            }
+        }
+        /*-end-chenhu*/
+        if (!TextUtils.isEmpty(mImsi)) {
+            log("onAllRecordsLoaded set mcc imsi" + (VDBG ? ("=" + mImsi) : ""));
+            // MTK-START
+            //mTelephonyManager.setSimCountryIsoForPhone(
+            //        mParentApp.getPhoneId(), MccTable.countryCodeForMcc(
+            //        Integer.parseInt(mImsi.substring(0,3))));
+            String countryCode;
+            try {
+                countryCode =
+                    MccTable.countryCodeForMcc(Integer.parseInt(mImsi.substring(0, 3)));
+            } catch (NumberFormatException e) {
+                countryCode = null;
+                loge("SIMRecords: Corrupt IMSI!");
+            }
+            mTelephonyManager.setSimCountryIsoForPhone(mParentApp.getPhoneId(), countryCode);
+            // MTK-END
+        } else {
+            log("onAllRecordsLoaded empty imsi skipping setting mcc");
+        }
+
+        setVoiceMailByCountry(operator);
+
+        // MTK-START
+        setSpnFromConfig(getOperatorNumeric());
+        // MTK-END
+
+        mRecordsLoadedRegistrants.notifyRegistrants(
+            new AsyncResult(null, null, null));
+
+        // MTK-START
+        log("imsi = " + mImsi + " operator = " + operator);
+
+        if (operator != null) {
+            String newName = null;
+            if (operator.equals("46002") || operator.equals("46007")) {
+                operator = "46000";
+            }
+            newName = SpnOverride.getInstance().lookupOperatorName(
+                    SubscriptionManager.getSubIdUsingPhoneId(mParentApp.getPhoneId()),
+                    operator, true, mContext);
+
+            setSystemProperty(PROPERTY_ICC_OPERATOR_DEFAULT_NAME, newName);
+
+        }
+        // MTK-END
+    }
+
+    //***** Private methods
+
+    private void handleCarrierNameOverride() {
+        CarrierConfigManager configLoader = (CarrierConfigManager)
+                mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE);
+        if (configLoader != null && configLoader.getConfig().getBoolean(
+                CarrierConfigManager.KEY_CARRIER_NAME_OVERRIDE_BOOL)) {
+            String carrierName = configLoader.getConfig().getString(
+                    CarrierConfigManager.KEY_CARRIER_NAME_STRING);
+            setServiceProviderName(carrierName);
+            mTelephonyManager.setSimOperatorNameForPhone(mParentApp.getPhoneId(),
+                    carrierName);
+        } else {
+            // MTK-START
+            if (getRecordsLoaded()) {
+            // MTK-END
+                setSpnFromConfig(getOperatorNumeric());
+            // MTK-START
+            }
+            // MTK-END
+        }
+    }
+
+    private void setSpnFromConfig(String carrier) {
+        // MTK-START
+        // If EF_SPN has value, use it directly to avoid wrong spn-conf.xml to
+        // override the EF_SPN value.
+        //if (mSpnOverride.containsCarrier(carrier)) {
+        //    setServiceProviderName(mSpnOverride.getSpn(carrier));
+        //    mTelephonyManager.setSimOperatorNameForPhone(
+        //            mParentApp.getPhoneId(), getServiceProviderName());
+        //}
+        if (TextUtils.isEmpty(getServiceProviderName()) && mSpnOverride.containsCarrier(carrier)) {
+            mTelephonyManager.setSimOperatorNameForPhone(
+                    mParentApp.getPhoneId(), mSpnOverride.getSpn(carrier));
+        }
+    }
+
+
+    private void setVoiceMailByCountry (String spn) {
+        if (mVmConfig.containsCarrier(spn)) {
+            // MTK-START
+            log("setVoiceMailByCountry");
+            // MTK-END
+            mIsVoiceMailFixed = true;
+            mVoiceMailNum = mVmConfig.getVoiceMailNumber(spn);
+            mVoiceMailTag = mVmConfig.getVoiceMailTag(spn);
+        }
+    }
+
+    @Override
+    public void onReady() {
+        fetchSimRecords();
+    }
+
+    private void onLocked() {
+        if (DBG) log("only fetch EF_LI and EF_PL in lock state");
+        loadEfLiAndEfPl();
+    }
+
+    private void loadEfLiAndEfPl() {
+        if (mParentApp.getType() == AppType.APPTYPE_USIM) {
+            mRecordsRequested = true;
+            mFh.loadEFTransparent(EF_LI,
+                    obtainMessage(EVENT_GET_ICC_RECORD_DONE, new EfUsimLiLoaded()));
+            mRecordsToLoad++;
+
+            mFh.loadEFTransparent(EF_PL,
+                    obtainMessage(EVENT_GET_ICC_RECORD_DONE, new EfPlLoaded()));
+            mRecordsToLoad++;
+        }
+    }
+
+    private void loadCallForwardingRecords() {
+        mRecordsRequested = true;
+        mFh.loadEFLinearFixed(EF_CFIS, 1, obtainMessage(EVENT_GET_CFIS_DONE));
+        mRecordsToLoad++;
+        mFh.loadEFTransparent(EF_CFF_CPHS, obtainMessage(EVENT_GET_CFF_DONE));
+        mRecordsToLoad++;
+    }
+
+    protected void fetchSimRecords() {
+        mRecordsRequested = true;
+
+        if (DBG) log("fetchSimRecords " + mRecordsToLoad);
+
+        mCi.getIMSIForApp(mParentApp.getAid(), obtainMessage(EVENT_GET_IMSI_DONE));
+        mRecordsToLoad++;
+
+        mFh.loadEFTransparent(EF_ICCID, obtainMessage(EVENT_GET_ICCID_DONE));
+        mRecordsToLoad++;
+
+        // FIXME should examine EF[MSISDN]'s capability configuration
+        // to determine which is the voice/data/fax line
+        new AdnRecordLoader(mFh).loadFromEF(EF_MSISDN, getExtFromEf(EF_MSISDN), 1,
+                    obtainMessage(EVENT_GET_MSISDN_DONE));
+        mRecordsToLoad++;
+
+        // Record number is subscriber profile
+        // MTK-START
+        // We should check the SST table before read EF_MBI.
+        //mFh.loadEFLinearFixed(EF_MBI, 1, obtainMessage(EVENT_GET_MBI_DONE));
+        //mRecordsToLoad++;
+        // MTK-END
+
+        mFh.loadEFTransparent(EF_AD, obtainMessage(EVENT_GET_AD_DONE));
+        mRecordsToLoad++;
+
+        // Record number is subscriber profile
+        // MTK-START
+        // [ALPS01888298] should check service before access MWIS EF
+        //mFh.loadEFLinearFixed(EF_MWIS, 1, obtainMessage(EVENT_GET_MWIS_DONE));
+        //mRecordsToLoad++;
+        // MTK-END
+
+        // Also load CPHS-style voice mail indicator, which stores
+        // the same info as EF[MWIS]. If both exist, both are updated
+        // but the EF[MWIS] data is preferred
+        // Please note this must be loaded after EF[MWIS]
+        mFh.loadEFTransparent(
+                EF_VOICE_MAIL_INDICATOR_CPHS,
+                obtainMessage(EVENT_GET_VOICE_MAIL_INDICATOR_CPHS_DONE));
+        mRecordsToLoad++;
+
+        // Same goes for Call Forward Status indicator: fetch both
+        // EF[CFIS] and CPHS-EF, with EF[CFIS] preferred.
+        loadCallForwardingRecords();
+
+        // MTK-START
+        //getSpnFsm(true, null);
+        // MTK-END
+
+        mFh.loadEFTransparent(EF_SPDI, obtainMessage(EVENT_GET_SPDI_DONE));
+        mRecordsToLoad++;
+
+        // MTK-START
+        //mFh.loadEFLinearFixed(EF_PNN, 1, obtainMessage(EVENT_GET_PNN_DONE));
+        //recordsToLoad++;
+        // MTK-END
+
+        mFh.loadEFTransparent(EF_SST, obtainMessage(EVENT_GET_SST_DONE));
+        mRecordsToLoad++;
+
+        mFh.loadEFTransparent(EF_INFO_CPHS, obtainMessage(EVENT_GET_INFO_CPHS_DONE));
+        mRecordsToLoad++;
+
+        mFh.loadEFTransparent(EF_CSP_CPHS,obtainMessage(EVENT_GET_CSP_CPHS_DONE));
+        mRecordsToLoad++;
+
+        mFh.loadEFTransparent(EF_GID1, obtainMessage(EVENT_GET_GID1_DONE));
+        mRecordsToLoad++;
+
+        mFh.loadEFTransparent(EF_GID2, obtainMessage(EVENT_GET_GID2_DONE));
+        mRecordsToLoad++;
+
+        loadEfLiAndEfPl();
+
+        // MTK-START
+        // TODO: Wait for isSetLanguageBySIM ready
+        /*
+                Detail description:
+                This feature provides a interface to get menu title string from EF_SUME
+                */
+        if (mTelephonyExt != null) {
+            if (mTelephonyExt.isSetLanguageBySIM()) {
+                mFh.loadEFTransparent(EF_SUME, obtainMessage(EVENT_QUERY_MENU_TITLE_DONE));
+                mRecordsToLoad++;
+            }
+        } else {
+           loge("fetchSimRecords(): mTelephonyExt is null!!!");
+        }
+
+        fetchCPHSOns();
+        // MTK-END
+
+
+        // XXX should seek instead of examining them all
+        if (false) { // XXX
+            mFh.loadEFLinearFixedAll(EF_SMS, obtainMessage(EVENT_GET_ALL_SMS_DONE));
+            mRecordsToLoad++;
+        }
+
+        if (CRASH_RIL) {
+            String sms = "0107912160130310f20404d0110041007030208054832b0120"
+                         + "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
+                         + "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
+                         + "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
+                         + "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
+                         + "ffffffffffffffffffffffffffffff";
+            byte[] ba = IccUtils.hexStringToBytes(sms);
+
+            mFh.updateEFLinearFixed(EF_SMS, 1, ba, null,
+                            obtainMessage(EVENT_MARK_SMS_READ_DONE, 1));
+        }
+        if (DBG) log("fetchSimRecords " + mRecordsToLoad + " requested: " + mRecordsRequested);
+        // MTK-START
+        fetchRatBalancing();
+        // MTK-END
+    }
+
+    /**
+     * Returns the SpnDisplayRule based on settings on the SIM and the
+     * specified plmn (currently-registered PLMN).  See TS 22.101 Annex A
+     * and TS 51.011 10.3.11 for details.
+     *
+     * If the SPN is not found on the SIM or is empty, the rule is
+     * always PLMN_ONLY.
+     */
+    @Override
+    public int getDisplayRule(String plmn) {
+        int rule;
+        // MTK-START
+        boolean bSpnActive = false;
+        String spn = getServiceProviderName();
+
+        if (mEfSST != null && mParentApp != null) {
+            if (mParentApp.getType() == AppType.APPTYPE_USIM) {
+                if (mEfSST.length >= 3 && (mEfSST[2] & 0x04) == 4) {
+                    bSpnActive = true;
+                    log("getDisplayRule USIM mEfSST is " +
+                     IccUtils.bytesToHexString(mEfSST) + " set bSpnActive to true");
+                }
+            } else if ((mEfSST.length >= 5) && (mEfSST[4] & 0x02) == 2) {
+                bSpnActive = true;
+                log("getDisplayRule SIM mEfSST is " +
+                    IccUtils.bytesToHexString(mEfSST) + " set bSpnActive to true");
+            }
+        }
+
+        log("getDisplayRule mParentApp is " +
+            ((mParentApp != null) ? mParentApp : "null"));
+        // MTK-END
+        if (mParentApp != null && mParentApp.getUiccCard() != null &&
+            mParentApp.getUiccCard().getOperatorBrandOverride() != null) {
+        // If the operator has been overridden, treat it as the SPN file on the SIM did not exist.
+            // MTK-START
+            log("getDisplayRule, getOperatorBrandOverride is not null");
+            // MTK-END
+            rule = SPN_RULE_SHOW_PLMN;
+            // MTK-START
+        //} else if (TextUtils.isEmpty(getServiceProviderName()) || mSpnDisplayCondition == -1) {
+        } else if (!bSpnActive || TextUtils.isEmpty(spn) ||
+                spn.equals("") || mSpnDisplayCondition == -1) {
+            // MTK-END
+            // No EF_SPN content was found on the SIM, or not yet loaded.  Just show ONS.
+            // MTK-START
+            log("getDisplayRule, no EF_SPN");
+            // MTK-END
+            rule = SPN_RULE_SHOW_PLMN;
+        } else if (isOnMatchingPlmn(plmn)) {
+            rule = SPN_RULE_SHOW_SPN;
+            if ((mSpnDisplayCondition & 0x01) == 0x01) {
+                // ONS required when registered to HPLMN or PLMN in EF_SPDI
+                rule |= SPN_RULE_SHOW_PLMN;
+            }
+        } else {
+            rule = SPN_RULE_SHOW_PLMN;
+            if ((mSpnDisplayCondition & 0x02) == 0x00) {
+                // SPN required if not registered to HPLMN or PLMN in EF_SPDI
+                rule |= SPN_RULE_SHOW_SPN;
+            }
+        }
+        return rule;
+    }
+
+    /**
+     * Checks if plmn is HPLMN or on the spdiNetworks list.
+     */
+    private boolean isOnMatchingPlmn(String plmn) {
+        if (plmn == null) return false;
+
+        // MTK-START
+        //if (plmn.equals(getOperatorNumeric())) {
+        if (isHPlmn(plmn)) {
+        // MTK-END
+            return true;
+        }
+
+        if (mSpdiNetworks != null) {
+            for (String spdiNet : mSpdiNetworks) {
+                if (plmn.equals(spdiNet)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    /**
+     * States of Get SPN Finite State Machine which only used by getSpnFsm()
+     */
+    private enum GetSpnFsmState {
+        IDLE,               // No initialized
+        INIT,               // Start FSM
+        READ_SPN_3GPP,      // Load EF_SPN firstly
+        READ_SPN_CPHS,      // Load EF_SPN_CPHS secondly
+        READ_SPN_SHORT_CPHS // Load EF_SPN_SHORT_CPHS last
+    }
+
+    /**
+     * Finite State Machine to load Service Provider Name , which can be stored
+     * in either EF_SPN (3GPP), EF_SPN_CPHS, or EF_SPN_SHORT_CPHS (CPHS4.2)
+     *
+     * After starting, FSM will search SPN EFs in order and stop after finding
+     * the first valid SPN
+     *
+     * If the FSM gets restart while waiting for one of
+     * SPN EFs results (i.e. a SIM refresh occurs after issuing
+     * read EF_CPHS_SPN), it will re-initialize only after
+     * receiving and discarding the unfinished SPN EF result.
+     *
+     * @param start set true only for initialize loading
+     * @param ar the AsyncResult from loadEFTransparent
+     *        ar.exception holds exception in error
+     *        ar.result is byte[] for data in success
+     */
+    private void getSpnFsm(boolean start, AsyncResult ar) {
+        byte[] data;
+
+        if (start) {
+            // Check previous state to see if there is outstanding
+            // SPN read
+            if(mSpnState == GetSpnFsmState.READ_SPN_3GPP ||
+               mSpnState == GetSpnFsmState.READ_SPN_CPHS ||
+               mSpnState == GetSpnFsmState.READ_SPN_SHORT_CPHS ||
+               mSpnState == GetSpnFsmState.INIT) {
+                // Set INIT then return so the INIT code
+                // will run when the outstanding read done.
+                mSpnState = GetSpnFsmState.INIT;
+                return;
+            } else {
+                mSpnState = GetSpnFsmState.INIT;
+            }
+        }
+
+        switch(mSpnState){
+            case INIT:
+                // MTK-START
+                //setServiceProviderName(null);
+                // MTK-END
+
+                mFh.loadEFTransparent(EF_SPN,
+                        obtainMessage(EVENT_GET_SPN_DONE));
+                mRecordsToLoad++;
+
+                mSpnState = GetSpnFsmState.READ_SPN_3GPP;
+                break;
+            case READ_SPN_3GPP:
+                if (ar != null && ar.exception == null) {
+                    data = (byte[]) ar.result;
+                    mSpnDisplayCondition = 0xff & data[0];
+
+                    setServiceProviderName(IccUtils.adnStringFieldToString(
+                            data, 1, data.length - 1));
+                    // for card double-check and brand override
+                    // we have to do this:
+                    final String spn = getServiceProviderName();
+
+                    if (spn == null || spn.length() == 0) {
+                        mSpnState = GetSpnFsmState.READ_SPN_CPHS;
+                    } else {
+                        if (DBG) log("Load EF_SPN: " + spn
+                                + " spnDisplayCondition: " + mSpnDisplayCondition);
+                        mTelephonyManager.setSimOperatorNameForPhone(
+                                mParentApp.getPhoneId(), spn);
+
+                        mSpnState = GetSpnFsmState.IDLE;
+                    }
+                } else {
+                    mSpnState = GetSpnFsmState.READ_SPN_CPHS;
+                }
+
+                if (mSpnState == GetSpnFsmState.READ_SPN_CPHS) {
+                    mFh.loadEFTransparent( EF_SPN_CPHS,
+                            obtainMessage(EVENT_GET_SPN_DONE));
+                    mRecordsToLoad++;
+
+                    // See TS 51.011 10.3.11.  Basically, default to
+                    // show PLMN always, and SPN also if roaming.
+                    mSpnDisplayCondition = -1;
+                }
+                break;
+            case READ_SPN_CPHS:
+                if (ar != null && ar.exception == null) {
+                    data = (byte[]) ar.result;
+
+                    setServiceProviderName(IccUtils.adnStringFieldToString(
+                            data, 0, data.length));
+                    // for card double-check and brand override
+                    // we have to do this:
+                    final String spn = getServiceProviderName();
+
+                    if (spn == null || spn.length() == 0) {
+                        mSpnState = GetSpnFsmState.READ_SPN_SHORT_CPHS;
+                    } else {
+                        // Display CPHS Operator Name only when not roaming
+                        mSpnDisplayCondition = 2;
+
+                        if (DBG) log("Load EF_SPN_CPHS: " + spn);
+                        mTelephonyManager.setSimOperatorNameForPhone(
+                                mParentApp.getPhoneId(), spn);
+
+                        mSpnState = GetSpnFsmState.IDLE;
+                    }
+                } else {
+                    mSpnState = GetSpnFsmState.READ_SPN_SHORT_CPHS;
+                }
+
+                if (mSpnState == GetSpnFsmState.READ_SPN_SHORT_CPHS) {
+                    mFh.loadEFTransparent(
+                            EF_SPN_SHORT_CPHS, obtainMessage(EVENT_GET_SPN_DONE));
+                    mRecordsToLoad++;
+                }
+                break;
+            case READ_SPN_SHORT_CPHS:
+                if (ar != null && ar.exception == null) {
+                    data = (byte[]) ar.result;
+
+                    setServiceProviderName(IccUtils.adnStringFieldToString(
+                            data, 0, data.length));
+                    // for card double-check and brand override
+                    // we have to do this:
+                    final String spn = getServiceProviderName();
+
+                    if (spn == null || spn.length() == 0) {
+                        if (DBG) log("No SPN loaded in either CHPS or 3GPP");
+                    } else {
+                        // Display CPHS Operator Name only when not roaming
+                        mSpnDisplayCondition = 2;
+
+                        if (DBG) log("Load EF_SPN_SHORT_CPHS: " + spn);
+                        mTelephonyManager.setSimOperatorNameForPhone(
+                                mParentApp.getPhoneId(), spn);
+                    }
+                } else {
+                    setServiceProviderName(null);
+                    if (DBG) log("No SPN loaded in either CHPS or 3GPP");
+                }
+
+                mSpnState = GetSpnFsmState.IDLE;
+                break;
+            default:
+                mSpnState = GetSpnFsmState.IDLE;
+        }
+    }
+
+    /**
+     * Parse TS 51.011 EF[SPDI] record
+     * This record contains the list of numeric network IDs that
+     * are treated specially when determining SPN display
+     */
+    private void
+    parseEfSpdi(byte[] data) {
+        SimTlv tlv = new SimTlv(data, 0, data.length);
+
+        byte[] plmnEntries = null;
+
+        for ( ; tlv.isValidObject() ; tlv.nextObject()) {
+            // Skip SPDI tag, if existant
+            if (tlv.getTag() == TAG_SPDI) {
+              tlv = new SimTlv(tlv.getData(), 0, tlv.getData().length);
+            }
+            // There should only be one TAG_SPDI_PLMN_LIST
+            if (tlv.getTag() == TAG_SPDI_PLMN_LIST) {
+                plmnEntries = tlv.getData();
+                break;
+            }
+        }
+
+        if (plmnEntries == null) {
+            return;
+        }
+
+        mSpdiNetworks = new ArrayList<String>(plmnEntries.length / 3);
+
+        for (int i = 0 ; i + 2 < plmnEntries.length ; i += 3) {
+            String plmnCode;
+            // MTK-START
+            //plmnCode = IccUtils.bcdToString(plmnEntries, i, 3);
+            plmnCode = IccUtils.parsePlmnToString(plmnEntries, i, 3);
+            // MTK-END
+
+            // Valid operator codes are 5 or 6 digits
+            if (plmnCode.length() >= 5) {
+                log("EF_SPDI network: " + plmnCode);
+                mSpdiNetworks.add(plmnCode);
+            }
+        }
+    }
+
+    /**
+     * check to see if Mailbox Number is allocated and activated in CPHS SST
+     */
+    private boolean isCphsMailboxEnabled() {
+        if (mCphsInfo == null)  return false;
+        return ((mCphsInfo[1] & CPHS_SST_MBN_MASK) == CPHS_SST_MBN_ENABLED );
+    }
+
+    @Override
+    protected void log(String s) {
+        // MTK-START
+        //Rlog.d(LOG_TAG, "[SIMRecords] " + s);
+        Rlog.d(LOG_TAG, "[SIMRecords] " + s + " (slot " + mSlotId + ")");
+        // MTK-END
+    }
+
+    @Override
+    protected void loge(String s) {
+        // MTK-START
+        //Rlog.e(LOG_TAG, "[SIMRecords] " + s);
+        Rlog.e(LOG_TAG, "[SIMRecords] " + s + " (slot " + mSlotId + ")");
+        // MTK-END
+    }
+
+    protected void logw(String s, Throwable tr) {
+        // MTK-START
+        //Rlog.w(LOG_TAG, "[SIMRecords] " + s, tr);
+        Rlog.w(LOG_TAG, "[SIMRecords] " + s + " (slot " + mSlotId + ")", tr);
+        // MTK-END
+    }
+
+    protected void logv(String s) {
+        // MTK-START
+        //Rlog.v(LOG_TAG, "[SIMRecords] " + s);
+        Rlog.v(LOG_TAG, "[SIMRecords] " + s + " (slot " + mSlotId + ")");
+        // MTK-END
+    }
+
+    /**
+     * Return true if "Restriction of menu options for manual PLMN selection"
+     * bit is set or EF_CSP data is unavailable, return false otherwise.
+     */
+    @Override
+    public boolean isCspPlmnEnabled() {
+        return mCspPlmnEnabled;
+    }
+
+    /**
+     * Parse EF_CSP data and check if
+     * "Restriction of menu options for manual PLMN selection" is
+     * Enabled/Disabled
+     *
+     * @param data EF_CSP hex data.
+     */
+    private void handleEfCspData(byte[] data) {
+        // As per spec CPHS4_2.WW6, CPHS B.4.7.1, EF_CSP contains CPHS defined
+        // 18 bytes (i.e 9 service groups info) and additional data specific to
+        // operator. The valueAddedServicesGroup is not part of standard
+        // services. This is operator specific and can be programmed any where.
+        // Normally this is programmed as 10th service after the standard
+        // services.
+        int usedCspGroups = data.length / 2;
+        // This is the "Service Group Number" of "Value Added Services Group".
+        byte valueAddedServicesGroup = (byte)0xC0;
+
+        mCspPlmnEnabled = true;
+        for (int i = 0; i < usedCspGroups; i++) {
+             if (data[2 * i] == valueAddedServicesGroup) {
+                 log("[CSP] found ValueAddedServicesGroup, value " + data[(2 * i) + 1]);
+                 if ((data[(2 * i) + 1] & 0x80) == 0x80) {
+                     // Bit 8 is for
+                     // "Restriction of menu options for manual PLMN selection".
+                     // Operator Selection menu should be enabled.
+                     mCspPlmnEnabled = true;
+                 } else {
+                     mCspPlmnEnabled = false;
+                     // Operator Selection menu should be disabled.
+                     // Operator Selection Mode should be set to Automatic.
+                     log("[CSP] Set Automatic Network Selection");
+                     mNetworkSelectionModeAutomaticRegistrants.notifyRegistrants();
+                 }
+                 return;
+             }
+        }
+
+        log("[CSP] Value Added Service Group (0xC0), not found!");
+    }
+
+    @Override
+    public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
+        pw.println("SIMRecords: " + this);
+        pw.println(" extends:");
+        super.dump(fd, pw, args);
+        pw.println(" mVmConfig=" + mVmConfig);
+        pw.println(" mSpnOverride=" + mSpnOverride);
+        pw.println(" mCallForwardingStatus=" + mCallForwardingStatus);
+        pw.println(" mSpnState=" + mSpnState);
+        pw.println(" mCphsInfo=" + mCphsInfo);
+        pw.println(" mCspPlmnEnabled=" + mCspPlmnEnabled);
+        pw.println(" mEfMWIS[]=" + Arrays.toString(mEfMWIS));
+        pw.println(" mEfCPHS_MWI[]=" + Arrays.toString(mEfCPHS_MWI));
+        pw.println(" mEfCff[]=" + Arrays.toString(mEfCff));
+        pw.println(" mEfCfis[]=" + Arrays.toString(mEfCfis));
+        pw.println(" mSpnDisplayCondition=" + mSpnDisplayCondition);
+        pw.println(" mSpdiNetworks[]=" + mSpdiNetworks);
+        pw.println(" mPnnHomeName=" + mPnnHomeName);
+        pw.println(" mUsimServiceTable=" + mUsimServiceTable);
+        pw.println(" mGid1=" + mGid1);
+        pw.println(" mGid2=" + mGid2);
+        pw.flush();
+    }
+
+    // MTK-START
+    // MVNO-API START
+    public String getSpNameInEfSpn() {
+        if (DBG) log("getSpNameInEfSpn(): " + mSpNameInEfSpn);
+        return mSpNameInEfSpn;
+    }
+
+    public String isOperatorMvnoForImsi() {
+        SpnOverride spnOverride = SpnOverride.getInstance();
+        String imsiPattern = spnOverride.isOperatorMvnoForImsi(getOperatorNumeric(),
+                getIMSI());
+        String mccmnc = getOperatorNumeric();
+        if (DBG) {
+            log("isOperatorMvnoForImsi(), imsiPattern: " + imsiPattern
+                + ", mccmnc: " + mccmnc);
+        }
+        if (imsiPattern == null || mccmnc == null) {
+            return null;
+        }
+        String result = imsiPattern.substring(mccmnc.length(), imsiPattern.length());
+        if (DBG) {
+            log("isOperatorMvnoForImsi(): " + result);
+        }
+        return result;
+    }
+
+
+    public String getFirstFullNameInEfPnn() {
+        if (mPnnNetworkNames == null || mPnnNetworkNames.size() == 0) {
+            if (DBG) log("getFirstFullNameInEfPnn(): empty");
+            return null;
+        }
+
+        OperatorName opName = mPnnNetworkNames.get(0);
+        if (DBG) log("getFirstFullNameInEfPnn(): first fullname: " + opName.sFullName);
+        if (opName.sFullName != null)
+            return new String(opName.sFullName);
+        return null;
+    }
+
+    public String isOperatorMvnoForEfPnn() {
+        String MCCMNC = getOperatorNumeric();
+        String PNN = getFirstFullNameInEfPnn();
+        if (DBG) log("isOperatorMvnoForEfPnn(): mccmnc = " + MCCMNC + ", pnn = " + PNN);
+        if (SpnOverride.getInstance().getSpnByEfPnn(MCCMNC, PNN) != null)
+            return PNN;
+        return null;
+    }
+
+    public String getMvnoMatchType() {
+        String IMSI = getIMSI();
+        String SPN = getSpNameInEfSpn();
+        String PNN = getFirstFullNameInEfPnn();
+        String GID1 = getGid1();
+        String MCCMNC = getOperatorNumeric();
+        if (DBG) {
+            log("getMvnoMatchType(): imsi = " + IMSI + ", mccmnc = " + MCCMNC + ", spn = " + SPN);
+        }
+
+        if (SpnOverride.getInstance().getSpnByEfSpn(MCCMNC, SPN) != null)
+            return PhoneConstants.MVNO_TYPE_SPN;
+
+        if (SpnOverride.getInstance().getSpnByImsi(MCCMNC, IMSI) != null)
+            return PhoneConstants.MVNO_TYPE_IMSI;
+
+        if (SpnOverride.getInstance().getSpnByEfPnn(MCCMNC, PNN) != null)
+            return PhoneConstants.MVNO_TYPE_PNN;
+
+        if (SpnOverride.getInstance().getSpnByEfGid1(MCCMNC, GID1) != null)
+            return PhoneConstants.MVNO_TYPE_GID;
+
+        return PhoneConstants.MVNO_TYPE_NONE;
+    }
+    // MVNO-API END
+
+    private class SIMBroadCastReceiver extends BroadcastReceiver {
+        public void onReceive(Context content, Intent intent) {
+            String action = intent.getAction();
+            if (action.equals("com.mediatek.dm.LAWMO_WIPE")) {
+               wipeAllSIMContacts();
+            } else {
+                if (action.equals("android.intent.action.ACTION_SHUTDOWN_IPO")) {
+                   processShutdownIPO();
+                   // ALPS00293301
+                   //SystemProperties.set(PROPERTY_ICC_OPERATOR_DEFAULT_NAME, null);
+                   //if(FeatureOption.MTK_GEMINI_SUPPORT)
+                   //    SystemProperties.set(PROPERTY_ICC_OPERATOR_DEFAULT_NAME_2, null);
+
+                   //ALPS01213113
+                   SystemProperties.set(SIM_RECORDS_PROPERTY_ECC_LIST[mSlotId], null);
+
+                   // ALPS00302698 ENS
+                   log("wipeAllSIMContacts ACTION_SHUTDOWN_IPO: reset mCspPlmnEnabled");
+                   mCspPlmnEnabled = true;
+
+                   // TODO: Wait for isSetLanguageBySIM ready
+                   // ALPS00302702 RAT balancing
+                   if (mTelephonyExt.isSetLanguageBySIM()) {
+                       mEfRatLoaded = false;
+                       mEfRat = null;
+                   }
+
+                   mAdnCache.reset();
+                   log("wipeAllSIMContacts ACTION_SHUTDOWN_IPO");
+                } else if (action.equals(TelephonyIntents.ACTION_SIM_STATE_CHANGED)) {
+                    String reasonExtra = intent.getStringExtra(
+                            IccCardConstants.INTENT_KEY_LOCKED_REASON);
+                    int slot = intent.getIntExtra(PhoneConstants.SLOT_KEY, PhoneConstants.SIM_ID_1);
+                    String simState = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE);
+                    log("SIM_STATE_CHANGED: slot = " + slot + ",reason = " + reasonExtra +
+                            ",simState = " + simState);
+                    if (IccCardConstants.INTENT_VALUE_LOCKED_ON_PUK.equals(reasonExtra)) {
+                        if (slot == mSlotId) {
+                            String strPuk1Count = null;
+                            strPuk1Count = SystemProperties.get(
+                                    SIMRECORD_PROPERTY_RIL_PUK1[mSlotId], "0");
+                            log("SIM_STATE_CHANGED: strPuk1Count = " + strPuk1Count);
+                            //if (strPuk1Count.equals("0")){
+                            //    setPhbReady(false);
+                            //}
+
+                            mMsisdn = "";
+                            //setNumberToSimInfo();
+                            mRecordsEventsRegistrants.notifyResult(EVENT_MSISDN);
+                        }
+                    }
+                    if (slot == mSlotId) {
+                        String strPhbReady = null;
+                        strPhbReady = SystemProperties.get(
+                                SIMRECORD_PROPERTY_RIL_PHB_READY[mSlotId], "false");
+                        //Update phb ready by sim state.
+                        log("sim state: " + simState + ", mPhbReady: " + mPhbReady +
+                                ",strPhbReady: " + strPhbReady.equals("true"));
+                        if (IccCardConstants.INTENT_VALUE_ICC_READY.equals(simState)) {
+                            if (false == mPhbReady && strPhbReady.equals("true")) {
+                                mPhbReady = true;
+                                broadcastPhbStateChangedIntent(mPhbReady);
+
+                            } else if (true == mPhbWaitSub && strPhbReady.equals("true")) {
+                                log("mPhbWaitSub is " + mPhbWaitSub + ", broadcast if need");
+                                mPhbWaitSub = false;
+                                broadcastPhbStateChangedIntent(mPhbReady);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    private class SubBroadCastReceiver extends BroadcastReceiver {
+        public void onReceive(Context content, Intent intent) {
+            String action = intent.getAction();
+            if ((mPhbWaitSub == true) &&
+                    (action.equals(TelephonyIntents.ACTION_SUBINFO_RECORD_UPDATED))) {
+                log("SubBroadCastReceiver receive ACTION_SUBINFO_RECORD_UPDATED");
+                mPhbWaitSub = false;
+                broadcastPhbStateChangedIntent(mPhbReady);
+            }
+        }
+    }
+
+    private void wipeAllSIMContacts() {
+        if (DBG) log("wipeAllSIMContacts");
+        mAdnCache.reset();
+        if (DBG) log("wipeAllSIMContacts after reset");
+    }
+
+    private void processShutdownIPO() {
+        // reset icc id variable when ipo shutdown
+        // ipo shutdown will make radio turn off,
+        // only needs to reset the variable which will not be reset in onRadioOffOrNotAvailable()
+        hasQueryIccId = false;
+        iccIdQueryState = -1;
+        mIccId = null;
+        mImsi = null;
+        mSpNameInEfSpn = null;
+
+    }
+
+    private void fetchEccList() {
+        // [Backward compatible]
+        // If "ril.ef.ecc.support" is "1", means modem will send URC to notify
+        // EF_ECC's value and phone number utility module will take over the
+        // system properties.
+
+        int eccFromModemUrc = SystemProperties.getInt("ril.ef.ecc.support", 0);
+
+        if (DBG) log("fetchEccList(), eccFromModemUrc:" + eccFromModemUrc);
+
+        if (eccFromModemUrc == 0) {
+            mEfEcc = "";
+
+            if (mParentApp.getType() == AppType.APPTYPE_USIM) {
+                mFh.loadEFLinearFixedAll(EF_ECC, obtainMessage(EVENT_GET_USIM_ECC_DONE));
+            } else {
+                mFh.loadEFTransparent(EF_ECC, obtainMessage(EVENT_GET_SIM_ECC_DONE));
+            }
+        }
+    }
+
+    //ALPS00784072: We don't need to update configure if mnc & mnc not changed.
+    private void updateConfiguration(String numeric) {
+        if (!TextUtils.isEmpty(numeric) && !mOldMccMnc.equals(numeric)) {
+            mOldMccMnc = numeric;
+            MccTable.updateMccMncConfiguration(mContext, mOldMccMnc, false);
+        } else {
+            log("Do not update configuration if mcc mnc no change.");
+        }
+    }
+
+    /**
+    *parse pnn list
+    */
+    private void parseEFpnn(ArrayList messages) {
+        int count = messages.size();
+        if (DBG) log("parseEFpnn(): pnn has " + count + " records");
+
+        mPnnNetworkNames = new ArrayList<OperatorName>(count);
+        for (int i = 0; i < count; i++) {
+            byte[] data = (byte[]) messages.get(i);
+            if (DBG) {
+                log("parseEFpnn(): pnn record " + i + " content is " +
+                        IccUtils.bytesToHexString(data));
+            }
+
+            SimTlv tlv = new SimTlv(data, 0, data.length);
+            OperatorName opName = new OperatorName();
+            for (; tlv.isValidObject(); tlv.nextObject()) {
+                if (tlv.getTag() == TAG_FULL_NETWORK_NAME) {
+                    opName.sFullName = IccUtils.networkNameToString(
+                                tlv.getData(), 0, tlv.getData().length);
+                    if (DBG) log("parseEFpnn(): pnn sFullName is "  + opName.sFullName);
+                } else if (tlv.getTag() == TAG_SHORT_NETWORK_NAME) {
+                    opName.sShortName = IccUtils.networkNameToString(
+                                tlv.getData(), 0, tlv.getData().length);
+                    if (DBG) log("parseEFpnn(): pnn sShortName is "  + opName.sShortName);
+                }
+            }
+
+            mPnnNetworkNames.add(opName);
+        }
+    }
+
+    // ALPS00267605 : PNN/OPL revision
+    private void fetchPnnAndOpl() {
+        if (DBG) log("fetchPnnAndOpl()");
+        //boolean bPnnOplActive = false;
+        boolean bPnnActive = false;
+        boolean bOplActive = false;
+
+        if (mEfSST != null) {
+            if (mParentApp.getType() == AppType.APPTYPE_USIM) {
+                if (mEfSST.length >= 6) {
+                    bPnnActive = ((mEfSST[5] & 0x10) == 0x10);
+                    if (bPnnActive) {
+                        bOplActive = ((mEfSST[5] & 0x20) == 0x20);
+                    }
+                }
+            } else if (mEfSST.length >= 13) {
+                bPnnActive = ((mEfSST[12] & 0x30) == 0x30);
+                if (bPnnActive) {
+                    bOplActive = ((mEfSST[12] & 0xC0) == 0xC0);
+                }
+            }
+        }
+        if (DBG) log("bPnnActive = " + bPnnActive + ", bOplActive = " + bOplActive);
+
+        if (bPnnActive) {
+            mFh.loadEFLinearFixedAll(EF_PNN, obtainMessage(EVENT_GET_PNN_DONE));
+            mRecordsToLoad++;
+            if (bOplActive) {
+                mFh.loadEFLinearFixedAll(EF_OPL, obtainMessage(EVENT_GET_ALL_OPL_DONE));
+                mRecordsToLoad++;
+            }
+        }
+    }
+
+    private void fetchSpn() {
+        if (DBG) log("fetchSpn()");
+        boolean bSpnActive = false;
+
+        IccConstants.IccServiceStatus iccSerStatus = getSIMServiceStatus(
+                IccConstants.IccService.SPN);
+        if (iccSerStatus == IccConstants.IccServiceStatus.ACTIVATED) {
+            setServiceProviderName(null);
+            mFh.loadEFTransparent(EF_SPN,
+                    obtainMessage(EVENT_GET_SPN_DONE));
+            mRecordsToLoad++;
+        } else {
+            if (DBG) log("[SIMRecords] SPN service is not activated  ");
+        }
+    }
+
+    public IccConstants.IccServiceStatus getSIMServiceStatus(
+            IccConstants.IccService enService) {
+        int nServiceNum = enService.getIndex();
+        IccConstants.IccServiceStatus simServiceStatus = IccConstants.IccServiceStatus.UNKNOWN;
+        if (DBG) {
+            log("getSIMServiceStatus enService is " + enService +
+                    " Service Index is " + nServiceNum);
+        }
+
+        if (nServiceNum >= 0 &&
+                nServiceNum < IccConstants.IccService.UNSUPPORTED_SERVICE.getIndex() &&
+                mEfSST != null) {
+            if (mParentApp.getType() == AppType.APPTYPE_USIM) {
+                int nUSTIndex = usimServiceNumber[nServiceNum];
+                if (nUSTIndex <= 0) {
+                    simServiceStatus = IccConstants.IccServiceStatus.NOT_EXIST_IN_USIM;
+                } else {
+                    int nbyte = nUSTIndex / 8;
+                    int nbit = nUSTIndex % 8 ;
+                    if (nbit == 0) {
+                        nbit = 7;
+                        nbyte--;
+                    } else {
+                        nbit--;
+                    }
+                    if (DBG) log("getSIMServiceStatus USIM nbyte: " + nbyte + " nbit: " + nbit);
+
+                    if (mEfSST.length > nbyte && ((mEfSST[nbyte] & (0x1 << nbit)) > 0)) {
+                        simServiceStatus = IccConstants.IccServiceStatus.ACTIVATED;
+                    } else {
+                        simServiceStatus = IccConstants.IccServiceStatus.INACTIVATED;
+                    }
+                }
+            } else {
+                int nSSTIndex = simServiceNumber[nServiceNum];
+                if (nSSTIndex <= 0) {
+                    simServiceStatus = IccConstants.IccServiceStatus.NOT_EXIST_IN_SIM;
+                } else {
+                    int nbyte = nSSTIndex / 4;
+                    int nbit = nSSTIndex % 4;
+                    if (nbit == 0) {
+                        nbit = 3;
+                        nbyte--;
+                    } else {
+                        nbit--;
+                    }
+
+                    int nMask = (0x2 << (nbit * 2));
+                    log("getSIMServiceStatus SIM nbyte: " + nbyte +
+                            " nbit: " + nbit + " nMask: " + nMask);
+                    if (mEfSST.length > nbyte && ((mEfSST[nbyte] & nMask) == nMask)) {
+                        simServiceStatus = IccConstants.IccServiceStatus.ACTIVATED;
+                    } else {
+                        simServiceStatus = IccConstants.IccServiceStatus.INACTIVATED;
+                    }
+                }
+            }
+        }
+
+        log("getSIMServiceStatus simServiceStatus: " + simServiceStatus);
+        return simServiceStatus;
+    }
+
+    private void fetchSmsp() {
+        if (DBG) log("fetchSmsp()");
+
+        //For USim authentication.
+        if (mUsimServiceTable != null && mParentApp.getType() != AppType.APPTYPE_SIM) {
+            if (mUsimServiceTable.isAvailable(UsimServiceTable.UsimService.SM_SERVICE_PARAMS)) {
+                if (DBG) log("SMSP support.");
+                mFh.loadEFLinearFixed(EF_SMSP, 1, obtainMessage(EVENT_GET_SMSP_DONE));
+                mRecordsToLoad++;
+
+                if (mUsimServiceTable.isAvailable(UsimServiceTable.UsimService.SM_OVER_IP)) {
+                    if (DBG) log("PSISMSP support.");
+                    mFh.loadEFLinearFixed(EF_PSISMSC, 1, obtainMessage(EVENT_GET_PSISMSC_DONE));
+                    mRecordsToLoad++;
+                }
+
+            }
+        }
+    }
+
+    private void fetchGbaRecords() {
+        if (DBG) log("fetchGbaRecords");
+
+        if (mUsimServiceTable != null && mParentApp.getType() != AppType.APPTYPE_SIM) {
+            if (mUsimServiceTable.isAvailable(UsimServiceTable.UsimService.GBA)) {
+                if (DBG) log("GBA support.");
+                mFh.loadEFTransparent(EF_ISIM_GBABP, obtainMessage(EVENT_GET_GBABP_DONE));
+                mRecordsToLoad++;
+
+                mFh.loadEFLinearFixedAll(EF_ISIM_GBANL, obtainMessage(EVENT_GET_GBANL_DONE));
+                mRecordsToLoad++;
+            }
+        }
+    }
+
+    private void fetchMbiRecords() {
+        if (DBG) log("fetchMbiRecords");
+
+        if (mUsimServiceTable != null && mParentApp.getType() != AppType.APPTYPE_SIM) {
+            if (mUsimServiceTable.isAvailable(UsimServiceTable.UsimService.MBDN)) {
+                if (DBG) log("MBI/MBDN support.");
+                mFh.loadEFLinearFixed(EF_MBI, 1, obtainMessage(EVENT_GET_MBI_DONE));
+                mRecordsToLoad++;
+            }
+        }
+    }
+
+    private void fetchMwisRecords() {
+        if (DBG) log("fetchMwisRecords");
+
+        if (mUsimServiceTable != null && mParentApp.getType() != AppType.APPTYPE_SIM) {
+            if (mUsimServiceTable.isAvailable(UsimServiceTable.UsimService.MWI_STATUS)) {
+                if (DBG) log("MWIS support.");
+                mFh.loadEFLinearFixed(EF_MWIS, 1, obtainMessage(EVENT_GET_MWIS_DONE));
+                mRecordsToLoad++;
+            }
+        }
+    }
+
+    /**
+    *parse opl list
+    */
+    private void parseEFopl(ArrayList messages) {
+        int count = messages.size();
+        if (DBG) log("parseEFopl(): opl has " + count + " records");
+
+        mOperatorList = new ArrayList<OplRecord>(count);
+        for (int i = 0; i < count; i++) {
+            byte[] data = (byte[]) messages.get(i);
+
+            OplRecord oplRec = new OplRecord();
+
+            oplRec.sPlmn = IccUtils.parsePlmnToStringForEfOpl(data, 0, 3); // ALPS00316057
+
+            byte[] minLac = new byte[2];
+            minLac[0] = data[3];
+            minLac[1] = data[4];
+            oplRec.nMinLAC = Integer.parseInt(IccUtils.bytesToHexString(minLac), 16);
+
+            byte[] maxLAC = new byte[2];
+            maxLAC[0] = data[5];
+            maxLAC[1] = data[6];
+            oplRec.nMaxLAC = Integer.parseInt(IccUtils.bytesToHexString(maxLAC), 16);
+
+            byte[] pnnRecordIndex = new byte[1];
+            pnnRecordIndex[0] = data[7];
+            oplRec.nPnnIndex = Integer.parseInt(IccUtils.bytesToHexString(pnnRecordIndex), 16);
+            if (DBG) {
+                log("parseEFopl(): record=" + i + " content=" + IccUtils.bytesToHexString(data) +
+                        " sPlmn=" + oplRec.sPlmn + " nMinLAC=" + oplRec.nMinLAC +
+                        " nMaxLAC=" + oplRec.nMaxLAC + " nPnnIndex=" + oplRec.nPnnIndex);
+            }
+
+            mOperatorList.add(oplRec);
+        }
+    }
+
+    private void boradcastEfRatContentNotify(int item) {
+        Intent intent = new Intent(TelephonyIntents.ACTION_EF_RAT_CONTENT_NOTIFY);
+        intent.putExtra(TelephonyIntents.EXTRA_EF_RAT_STATUS, item);
+        intent.putExtra(PhoneConstants.SLOT_KEY, mSlotId);
+        log("broadCast intent ACTION_EF_RAT_CONTENT_NOTIFY: item: " + item + ", simId: " + mSlotId);
+        ActivityManagerNative.broadcastStickyIntent(intent, READ_PHONE_STATE, UserHandle.USER_ALL);
+    }
+
+    // ALPS00302698 ENS
+    private void processEfCspPlmnModeBitUrc(int bit) {
+        log("processEfCspPlmnModeBitUrc: bit = " + bit);
+        if (bit == 0) {
+            mCspPlmnEnabled = false;
+        } else {
+            mCspPlmnEnabled = true;
+        }
+
+        Intent intent = new Intent(TelephonyIntents.ACTION_EF_CSP_CONTENT_NOTIFY);
+        intent.putExtra(TelephonyIntents.EXTRA_PLMN_MODE_BIT, bit);
+        intent.putExtra(PhoneConstants.SLOT_KEY, mSlotId);
+        log("broadCast intent ACTION_EF_CSP_CONTENT_NOTIFY, EXTRA_PLMN_MODE_BIT: " +  bit);
+        ActivityManagerNative.broadcastStickyIntent(intent, READ_PHONE_STATE, UserHandle.USER_ALL);
+
+    }
+
+    private void fetchLanguageIndicator() {
+        log("fetchLanguageIndicator ");
+        String l = SystemProperties.get("persist.sys.language");
+        String c = SystemProperties.get("persist.sys.country");
+        String oldSimLang = SystemProperties.get("persist.sys.simlanguage");
+        if ((null == l || 0 == l.length()) && (null == c || 0 == c.length())
+                         && (null == oldSimLang || 0 == oldSimLang.length())) {
+            if (mEfLi == null) {
+                mFh.loadEFTransparent(EF_LI,
+                       obtainMessage(EVENT_GET_LI_DONE));
+                efLanguageToLoad++;
+            }
+            mFh.loadEFTransparent(EF_ELP,
+                   obtainMessage(EVENT_GET_ELP_DONE));
+            efLanguageToLoad++;
+        }
+    }
+
+    private void onLanguageFileLoaded() {
+        efLanguageToLoad--;
+        log("onLanguageFileLoaded efLanguageToLoad is " + efLanguageToLoad);
+        if (efLanguageToLoad == 0) {
+            log("onLanguageFileLoaded all language file loaded");
+            if (mEfLi != null || mEfELP != null) {
+                setLanguageFromSIM();
+            } else {
+                log("onLanguageFileLoaded all language file are not exist!");
+            }
+        }
+    }
+
+    private void setLanguageFromSIM() {
+        log("setLanguageFromSIM ");
+        boolean bMatched = false;
+
+        if (mParentApp.getType() == AppType.APPTYPE_USIM) {
+            bMatched = getMatchedLocaleByLI(mEfLi);
+        } else {
+            bMatched = getMatchedLocaleByLP(mEfLi);
+        }
+        if (!bMatched && mEfELP != null) {
+            bMatched = getMatchedLocaleByLI(mEfELP);
+        }
+        log("setLanguageFromSIM End");
+    }
+
+    private boolean getMatchedLocaleByLI(byte[] data) {
+        boolean ret = false;
+        if (data == null) {
+            return ret;
+        }
+        int lenOfLI = data.length;
+        String lang = null;
+        for (int i = 0; i + 2 <= lenOfLI; i += 2) {
+            lang = IccUtils.parseLanguageIndicator(data, i, 2);
+            log("USIM language in language indicator: i is " + i + " language is " + lang);
+            if (lang == null || lang.equals("")) {
+                log("USIM language in language indicator: i is " + i + " language is empty");
+                break;
+            }
+            lang = lang.toLowerCase();
+            ret = matchLangToLocale(lang);
+
+            if (ret) {
+                break;
+            }
+        }
+        return ret;
+    }
+
+    private boolean getMatchedLocaleByLP(byte[] data) {
+        boolean ret = false;
+        if (data == null) {
+            return ret;
+        }
+        int lenOfLP = data.length;
+        String lang = null;
+        for (int i = 0; i < lenOfLP; i++) {
+            int index = (int) mEfLi[0] & 0xff;
+            if (0x00 <= index && index <= 0x0f) {
+                lang = LANGUAGE_CODE_FOR_LP[index];
+            } else if (0x20 <= index && index <= 0x2f) {
+                lang = LANGUAGE_CODE_FOR_LP[index - 0x10];
+            }
+
+            log("SIM language in language preference: i is " + i + " language is " + lang);
+            if (lang == null || lang.equals("")) {
+                log("SIM language in language preference: i is " + i + " language is empty");
+                break;
+            }
+
+            ret = matchLangToLocale(lang);
+
+            if (ret) {
+                break;
+            }
+        }
+        return ret;
+    }
+
+    private boolean matchLangToLocale(String lang) {
+        boolean ret = false;
+        String[] locals = mContext.getAssets().getLocales();
+        int localsSize = locals.length;
+        for (int i = 0 ; i < localsSize; i++) {
+            String s = locals[i];
+            int len = s.length();
+            if (len == 5) {
+                String language = s.substring(0, 2);
+                log("Supported languages: the i" + i + " th is " + language);
+                if (lang.equals(language)) {
+                    ret = true;
+                    //MccTable.setSystemLocale(mContext, lang, s.substring(3, 5));
+                    log("Matched! lang: " + lang + ", country is " + s.substring(3, 5));
+                    break;
+                }
+            }
+        }
+        return ret;
+    }
+
+    /*
+      Detail description:
+      This feature provides a interface to get menu title string from EF_SUME
+    */
+    public String getMenuTitleFromEf() {
+        return mMenuTitleFromEf;
+    }
+
+    private void fetchCPHSOns() {
+        if (DBG) log("fetchCPHSOns()");
+        cphsOnsl = null;
+        cphsOnss = null;
+        mFh.loadEFTransparent(EF_SPN_CPHS,
+               obtainMessage(EVENT_GET_CPHSONS_DONE));
+        mRecordsToLoad++;
+        mFh.loadEFTransparent(
+               EF_SPN_SHORT_CPHS, obtainMessage(EVENT_GET_SHORT_CPHSONS_DONE));
+        mRecordsToLoad++;
+    }
+
+    // ALPS00302702 RAT balancing START
+    private void fetchRatBalancing() {
+        // TODO: wait for isSetLanguageBySIM ready
+        if (mTelephonyExt.isSetLanguageBySIM())
+            return;
+        log("support MTK_RAT_BALANCING");
+
+        if (mParentApp.getType() == AppType.APPTYPE_USIM) {
+            log("start loading EF_RAT");
+            mFh.loadEFTransparent(EF_RAT, obtainMessage(EVENT_GET_RAT_DONE));
+            mRecordsToLoad++;
+        }
+        else if (mParentApp.getType() == AppType.APPTYPE_SIM) {
+            // broadcast & set no file
+            log("loading EF_RAT fail, because of SIM");
+            mEfRatLoaded = false;
+            mEfRat = null;
+            boradcastEfRatContentNotify(EF_RAT_FOR_OTHER_CASE);
+        }
+        else {
+            log("loading EF_RAT fail, because of +EUSIM");
+        }
+    }
+
+    public int getEfRatBalancing() {
+        log("getEfRatBalancing: iccCardType = " + mParentApp.getType()
+                + ", mEfRatLoaded = " + mEfRatLoaded + ", mEfRat is null = " + (mEfRat == null));
+
+        if ((mParentApp.getType() == AppType.APPTYPE_USIM) && mEfRatLoaded && mEfRat == null) {
+            return EF_RAT_NOT_EXIST_IN_USIM;
+        }
+        return EF_RAT_FOR_OTHER_CASE;
+    }
+    // ALPS00302702 RAT balancing END
+
+    public boolean isHPlmn(String plmn) {
+        ServiceStateTracker sst = null;
+
+        sst = mPhone.getServiceStateTracker();
+
+        if (sst != null) {
+            return sst.isHPlmn(plmn);
+        } else {
+            if (DBG) log("can't get sst");
+            return false;
+        }
+    }
+
+    // ALPS00359372 for at&t testcase, mnc 2 should match 3 digits
+    private boolean isMatchingPlmnForEfOpl(String simPlmn, String bcchPlmn) {
+        if (simPlmn == null || simPlmn.equals("") || bcchPlmn == null || bcchPlmn.equals(""))
+            return false;
+
+        if (DBG) log("isMatchingPlmnForEfOpl(): simPlmn = " + simPlmn + ", bcchPlmn = " + bcchPlmn);
+
+        /*  3GPP TS 23.122 Annex A (normative): HPLMN Matching Criteria
+            For PCS1900 for North America, regulations mandate that a 3-digit MNC shall be used;
+            however during a transition period, a 2 digit MNC may be broadcast by the Network and,
+            in this case, the 3rd digit of the SIM is stored as 0 (this is the 0 suffix rule). */
+        int simPlmnLen = simPlmn.length();
+        int bcchPlmnLen = bcchPlmn.length();
+        if (simPlmnLen < 5 || bcchPlmnLen < 5)
+            return false;
+
+        int i = 0;
+        for (i = 0; i < 5; i++) {
+            if (simPlmn.charAt(i) == 'd')
+                continue;
+            if (simPlmn.charAt(i) != bcchPlmn.charAt(i))
+                return false;
+        }
+
+        if (simPlmnLen == 6 && bcchPlmnLen == 6) {
+            if (simPlmn.charAt(5) == 'd' || simPlmn.charAt(5) == bcchPlmn.charAt(5)) {
+                return true;
+            } else {
+                return false;
+            }
+        } else if (bcchPlmnLen == 6 && bcchPlmn.charAt(5) != '0' && bcchPlmn.charAt(5) != 'd') {
+            return false;
+        } else if (simPlmnLen == 6 && simPlmn.charAt(5) != '0' && simPlmn.charAt(5) != 'd') {
+            return false;
+        }
+
+        return true;
+    }
+
+    private boolean isPlmnEqualsSimNumeric(String plmn) {
+        String mccmnc = getOperatorNumeric();
+        if (plmn == null) return false;
+
+        if (mccmnc == null || mccmnc.equals("")) {
+            log("isPlmnEqualsSimNumeric: getOperatorNumeric error: " + mccmnc);
+            return false;
+        }
+
+        if (plmn.equals(mccmnc)) {
+            return true;
+        } else {
+            if (plmn.length() == 5 && mccmnc.length() == 6
+                && plmn.equals(mccmnc.substring(0, 5))) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+
+    // ALPS00267605 : PNN/OPL revision
+    public String getEonsIfExist(String plmn, int nLac, boolean bLongNameRequired) {
+        if (DBG) {
+            log("EONS getEonsIfExist: plmn is " + plmn + " nLac is " +
+                    nLac + " bLongNameRequired: " + bLongNameRequired);
+        }
+        if (plmn == null || mPnnNetworkNames == null || mPnnNetworkNames.size() == 0) {
+            return null;
+        }
+
+        int nPnnIndex = -1;
+        boolean isHPLMN = isPlmnEqualsSimNumeric(plmn);
+
+        if (mOperatorList == null) {
+            // case for EF_PNN only
+            if (isHPLMN) {
+                if (DBG) log("getEonsIfExist: Plmn is HPLMN, return PNN's first record");
+                nPnnIndex = 1;
+            } else {
+                if (DBG) log("getEonsIfExist: Plmn is not HPLMN and no mOperatorList, return null");
+                return null;
+            }
+        } else {
+            //search EF_OPL using plmn & nLac
+            for (int i = 0; i < mOperatorList.size(); i++) {
+                OplRecord oplRec = mOperatorList.get(i);
+
+                // ALPS00316057
+                //if((plmn.equals(oplRec.sPlmn) ||(!oplRec.sPlmn.equals("") &&
+                //      plmn.startsWith(oplRec.sPlmn))) &&
+                if (isMatchingPlmnForEfOpl(oplRec.sPlmn, plmn) &&
+                        ((oplRec.nMinLAC == 0 && oplRec.nMaxLAC == 0xfffe) ||
+                        (oplRec.nMinLAC <= nLac && oplRec.nMaxLAC >= nLac))) {
+                    if (DBG) log("getEonsIfExist: find it in EF_OPL");
+                    if (oplRec.nPnnIndex == 0) {
+                        if (DBG) log("getEonsIfExist: oplRec.nPnnIndex is 0, from other sources");
+                        return null;
+                    }
+                    nPnnIndex = oplRec.nPnnIndex;
+                    break;
+                }
+            }
+        }
+
+        //ALPS00312727, 11603, add check (mOperatorList.size() == 1
+        if (nPnnIndex == -1 && isHPLMN && (mOperatorList.size() == 1)) {
+            if (DBG) {
+                log("getEonsIfExist: not find it in EF_OPL, but Plmn is HPLMN," +
+                        " return PNN's first record");
+            }
+            nPnnIndex = 1;
+        }
+        else if (nPnnIndex > 1 && nPnnIndex > mPnnNetworkNames.size() && isHPLMN) {
+            if (DBG) {
+                log("getEonsIfExist: find it in EF_OPL, but index in EF_OPL > EF_PNN list" +
+                        " length & Plmn is HPLMN, return PNN's first record");
+            }
+            nPnnIndex = 1;
+        }
+        else if (nPnnIndex > 1 && nPnnIndex > mPnnNetworkNames.size() && !isHPLMN) {
+            if (DBG) {
+                log("getEonsIfExist: find it in EF_OPL, but index in EF_OPL > EF_PNN list" +
+                        " length & Plmn is not HPLMN, return PNN's first record");
+            }
+            nPnnIndex = -1;
+        }
+
+        String sEons = null;
+        if (nPnnIndex >= 1) {
+            OperatorName opName = mPnnNetworkNames.get(nPnnIndex - 1);
+            if (bLongNameRequired) {
+                if (opName.sFullName != null) {
+                    sEons = new String(opName.sFullName);
+                } else if (opName.sShortName != null) {
+                    sEons = new String(opName.sShortName);
+                }
+            } else if (!bLongNameRequired) {
+                if (opName.sShortName != null) {
+                    sEons = new String(opName.sShortName);
+                } else if (opName.sFullName != null) {
+                    sEons = new String(opName.sFullName);
+                }
+            }
+        }
+        if (DBG) log("getEonsIfExist: sEons is " + sEons);
+
+        return sEons;
+
+        /*int nPnnIndex = -1;
+        //check if the plmn is Hplmn, return the first record of pnn
+        if (isHPlmn(plmn)) {
+            nPnnIndex = 1;
+            if (DBG) log("EONS getEonsIfExist Plmn is hplmn");
+        } else {
+            //search the plmn from opl and if the LAC in the range of opl
+            for (int i = 0; i < mOperatorList.size(); i++) {
+                OplRecord oplRec = mOperatorList.get(i);
+                //check if the plmn equals with the plmn in the operator list
+                //or starts with the plmn in the operator list(which include wild char 'D')
+                if((plmn.equals(oplRec.sPlmn) ||(!oplRec.sPlmn.equals("") &&
+                        plmn.startsWith(oplRec.sPlmn))) &&
+                        ((oplRec.nMinLAC == 0 && oplRec.nMaxLAC == 0xfffe) ||
+                        (oplRec.nMinLAC <= nLac && oplRec.nMaxLAC >= nLac))) {
+                    nPnnIndex = oplRec.nPnnIndex;
+                    break;
+                }
+                if (DBG) log("EONS getEonsIfExist record number is " + i + " sPlmn: " +
+                        oplRec.sPlmn + " nMinLAC: " + oplRec.nMinLAC + " nMaxLAC: " +
+                        oplRec.nMaxLAC + " PnnIndex " + oplRec.nPnnIndex);
+            }
+            if (nPnnIndex == 0) {
+                // not HPLMN and the index is 0 indicates that the
+                // name is to be taken from other sources
+                return null;
+            }
+        }
+        if (DBG) log("EONS getEonsIfExist Index of pnn is  " + nPnnIndex);
+
+        String sEons = null;
+        if (nPnnIndex >= 1) {
+            OperatorName opName = mPnnNetworkNames.get(nPnnIndex - 1);
+            if (bLongNameRequired) {
+                if (opName.sFullName != null) {
+                    sEons = new String(opName.sFullName);
+                } else if (opName.sShortName != null) {
+                    sEons = new String(opName.sShortName);
+                }
+            } else if (!bLongNameRequired ) {
+                if (opName.sShortName != null) {
+                    sEons = new String(opName.sShortName);
+                } else if (opName.sFullName != null) {
+                    sEons = new String(opName.sFullName);
+                }
+            }
+        }
+        if (DBG) log("EONS getEonsIfExist sEons is " + sEons);
+        return sEons;*/
+    }
+
+
+    /**
+     * Returns the GBA bootstrapping parameters (GBABP) that was loaded from the USIM.
+     * @return GBA bootstrapping parameters or null if not present or not loaded
+     */
+    public String getEfGbabp() {
+        log("GBABP = " + mGbabp);
+        return mGbabp;
+    }
+
+    /**
+     * Set the GBA bootstrapping parameters (GBABP) value into the USIM.
+     * @param gbabp a GBA bootstrapping parameters value in String type
+     * @param onComplete
+     *        onComplete.obj will be an AsyncResult
+     *        ((AsyncResult)onComplete.obj).exception == null on success
+     *        ((AsyncResult)onComplete.obj).exception != null on fail
+     */
+    public void setEfGbabp(String gbabp, Message onComplete) {
+        byte[] data = IccUtils.hexStringToBytes(gbabp);
+
+        log("setEfGbabp data = " + data);
+        mFh.updateEFTransparent(EF_GBABP, data, onComplete);
+    }
+
+    /**
+     * Returns the Public Service Identity of the SM-SC (PSISMSC) that was loaded from the USIM.
+     * @return PSISMSC or null if not present or not loaded
+     */
+    public byte[] getEfPsismsc() {
+        log("PSISMSC = " + mEfPsismsc);
+        return mEfPsismsc;
+    }
+
+    /**
+     * Returns the Short message parameter (SMSP) that was loaded from the USIM.
+     * @return PSISMSC or null if not present or not loaded
+     */
+    public byte[] getEfSmsp() {
+        log("mEfSmsp = " + mEfPsismsc);
+        return mEfSmsp;
+    }
+
+    /**
+     * Returns the MCC+MNC length that was loaded from the USIM.
+     * @return MCC+MNC length or 0 if not present or not loaded
+     */
+    public int getMncLength() {
+        log("mncLength = " + mMncLength);
+        return mMncLength;
+    }
+
+    private class RebootClickListener
+            implements DialogInterface.OnClickListener {
+
+        @Override
+        public void onClick(DialogInterface dialog, int which) {
+            log("Unlock Phone onClick");
+            PowerManager pm = (PowerManager) mContext
+                    .getSystemService(Context.POWER_SERVICE);
+            pm.reboot("Unlock state changed");
+        }
+    }
+    public void broadcastPhbStateChangedIntent(boolean isReady) {
+        // M: for avoid repeate intent from GSMPhone and CDMAPhone
+        if (mPhone.getPhoneType() != PhoneConstants.PHONE_TYPE_GSM) {
+            log("broadcastPhbStateChangedIntent, Not active Phone.");
+            return;
+        }
+
+        log("broadcastPhbStateChangedIntent, mPhbReady " + mPhbReady);
+        if (isReady == true) {
+            int phoneId = mParentApp.getPhoneId();
+            mSubId = SubscriptionManager.getSubIdUsingPhoneId(phoneId);
+
+            String strAllSimState = SystemProperties.get(TelephonyProperties.PROPERTY_SIM_STATE);
+            String strCurSimState = "";
+
+            if ((strAllSimState != null) && (strAllSimState.length() > 0)) {
+                String values[] = strAllSimState.split(",");
+                if ((phoneId >= 0) && (phoneId < values.length) && (values[phoneId] != null)) {
+                    strCurSimState = values[phoneId];
+                }
+            }
+
+            if (mSubId <= 0 || strCurSimState.equals("NOT_READY")) {
+                log("broadcastPhbStateChangedIntent, mSubId " + mSubId
+                    + ", sim state " + strAllSimState);
+                mPhbWaitSub = true;
+                return;
+            }
+        } else {
+            if (mSubId <= 0) {
+                log("broadcastPhbStateChangedIntent, isReady == false and mSubId <= 0");
+                return;
+            }
+        }
+
+        Intent intent = new Intent(TelephonyIntents.ACTION_PHB_STATE_CHANGED);
+        intent.putExtra("ready", isReady);
+        intent.putExtra(PhoneConstants.SUBSCRIPTION_KEY, mSubId);
+        if (DBG) log("Broadcasting intent ACTION_PHB_STATE_CHANGED " + isReady
+                    + " sub id " + mSubId + " phoneId " + mParentApp.getPhoneId());
+        mContext.sendBroadcastAsUser(intent, UserHandle.ALL);
+
+        if (isReady == false) {
+            mSubId = -1;
+        }
+    }
+
+    public boolean isPhbReady() {
+        if (DBG) log("isPhbReady(): cached mPhbReady = " + (mPhbReady ? "true" : "false"));
+        String strPhbReady = "false";
+        String strAllSimState = "";
+        String strCurSimState = "";
+        boolean isSimLocked = false;
+        int phoneId = mParentApp.getPhoneId();
+
+        strPhbReady = SystemProperties.get(
+                SIMRECORD_PROPERTY_RIL_PHB_READY[mParentApp.getSlotId()], "false");
+        strAllSimState = SystemProperties.get(TelephonyProperties.PROPERTY_SIM_STATE);
+
+        if ((strAllSimState != null) && (strAllSimState.length() > 0)) {
+            String values[] = strAllSimState.split(",");
+            if ((phoneId >= 0) && (phoneId < values.length) && (values[phoneId] != null)) {
+                strCurSimState = values[phoneId];
+            }
+        }
+
+        isSimLocked = (strCurSimState.equals("NETWORK_LOCKED") ||
+                       strCurSimState.equals("PIN_REQUIRED"));
+                        //In PUK_REQUIRED state, phb can be accessed.
+
+        if (DBG) log("isPhbReady(): mPhbReady = " + (mPhbReady ? "true" : "false") +
+                     ", strCurSimState = " + strCurSimState);
+        return (strPhbReady.equals("true") && !isSimLocked);
+    }
+
+    public void setPhbReady(boolean isReady) {
+        if (DBG) log("setPhbReady(): isReady = " + (isReady ? "true" : "false"));
+        if (mPhbReady != isReady) {
+            String strPhbReady = isReady ? "true" : "false";
+            mPhbReady = isReady;
+            SystemProperties.set(
+                    SIMRECORD_PROPERTY_RIL_PHB_READY[mParentApp.getSlotId()], strPhbReady);
+            broadcastPhbStateChangedIntent(mPhbReady);
+        }
+    }
+    // add for alps01947090
+    public boolean isRadioAvailable() {
+        if (mCi != null) {
+          return mCi.getRadioState().isAvailable();
+        }
+        return false;
+    }
+
+    /** M: Bug Fix for ALPS02189616. */
+    // add new code for svlte romaing case.
+
+    /**
+     * Inner private class for revice broad cast ACTION_RADIO_TECHNOLOGY_CHANGED.
+     */
+    private class RadioTechnologyChangedReceiver extends BroadcastReceiver {
+        public void onReceive(Context content, Intent intent) {
+            String action = intent.getAction();
+             if (action.equals(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED)) {
+                 // listener radio technology changed. If it not own object phone
+                 // broadcast false.
+                 // if it own object, send delay message to broadcast PHB_CHANGE
+                 // event. APP will receive PHB_CHANGE broadcast and init phonebook.
+                 int phoneid = intent.getIntExtra(PhoneConstants.PHONE_KEY, -1);
+                 log("[ACTION_RADIO_TECHNOLOGY_CHANGED] phoneid : " + phoneid);
+                 if (null != mParentApp && mParentApp.getPhoneId() == phoneid) {
+                     String cdmaPhoneName = "CDMA";
+                     int delayedTime = 500;
+                     String activePhoneName = intent.getStringExtra(PhoneConstants.PHONE_NAME_KEY);
+                     int subid = intent.getIntExtra(PhoneConstants.SUBSCRIPTION_KEY, -1);
+                     log("[ACTION_RADIO_TECHNOLOGY_CHANGED] activePhoneName : " + activePhoneName
+                             + " | subid : " + subid);
+                     if (!cdmaPhoneName.equals(activePhoneName)) {
+                         sendMessageDelayed(obtainMessage(EVENT_DELAYED_SEND_PHB_CHANGE),
+                                 delayedTime);
+                         mAdnCache.reset();
+                     }
+                 }
+             }
+        }
+    }
+    // PHB Refactoring ++++
+    @Override
+    protected int getChildPhoneId() {
+        int phoneId = mParentApp.getPhoneId();
+        log("[getChildPhoneId] phoneId = " + phoneId);
+        return phoneId;
+    }
+
+    @Override
+    protected void updatePHBStatus(int status, boolean isSimLocked) {
+        log("[updatePHBStatus] status : " + status + " | isSimLocked : " + isSimLocked
+                + " | mPhbReady : " + mPhbReady);
+
+        // M: PHB Revise
+        if (status == GSM_PHB_READY) {
+            if (false == isSimLocked) {
+                if (mPhbReady == false) {
+                    mPhbReady = true;
+                    broadcastPhbStateChangedIntent(mPhbReady);
+                }
+            } else {
+                log("phb ready but sim is not ready.");
+            }
+        } else if (status == GSM_PHB_NOT_READY) {
+            if (mPhbReady == true) {
+                mAdnCache.reset();
+                mPhbReady = false;
+                broadcastPhbStateChangedIntent(mPhbReady);
+            }
+        }
+    }
+    // PHB Refactoring ----
+    // MTK-END
+
+    // MTK-START
+    private String convertNumberIfContainsPrefix(String dialNumber) {
+        String r = dialNumber;
+        if (dialNumber != null &&
+            (dialNumber.startsWith("tel:") ||
+             dialNumber.startsWith("sip:") ||
+             dialNumber.startsWith("sips:"))) {
+            r = dialNumber.substring(dialNumber.indexOf(":") + 1);
+            Rlog.d(LOG_TAG, "convertNumberIfContainsPrefix: dialNumber = " + dialNumber);
+        }
+        return r;
+    }
+    // MTK-END
+}
Index: vendor/branch/5058A_Telcel/frameworks/opt/telephony/src/java/com/android/internal/telephony/cat/CommandParamsFactory.java
===================================================================
--- vendor/branch/5058A_Telcel/frameworks/opt/telephony/src/java/com/android/internal/telephony/cat/CommandParamsFactory.java	(revision 0)
+++ vendor/branch/5058A_Telcel/frameworks/opt/telephony/src/java/com/android/internal/telephony/cat/CommandParamsFactory.java	(revision 4786)
@@ -0,0 +1,1598 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.telephony.cat;
+
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.os.Handler;
+import android.os.Message;
+import android.os.SystemProperties;
+
+import com.android.internal.telephony.GsmAlphabet;
+import com.android.internal.telephony.uicc.IccFileHandler;
+
+import java.util.Iterator;
+import java.util.List;
+import static com.android.internal.telephony.cat.CatCmdMessage.
+                   SetupEventListConstants.USER_ACTIVITY_EVENT;
+import static com.android.internal.telephony.cat.CatCmdMessage.
+                   SetupEventListConstants.IDLE_SCREEN_AVAILABLE_EVENT;
+import static com.android.internal.telephony.cat.CatCmdMessage.
+                   SetupEventListConstants.LANGUAGE_SELECTION_EVENT;
+import static com.android.internal.telephony.cat.CatCmdMessage.
+                   SetupEventListConstants.BROWSER_TERMINATION_EVENT;
+import static com.android.internal.telephony.cat.CatCmdMessage.
+                   SetupEventListConstants.BROWSING_STATUS_EVENT;
+/// M: BIP {
+import static com.android.internal.telephony.cat.CatCmdMessage.
+                   SetupEventListConstants.DATA_AVAILABLE_EVENT;
+import static com.android.internal.telephony.cat.CatCmdMessage.
+                   SetupEventListConstants.CHANNEL_STATUS_EVENT;
+/// M: BIP }
+/**
+ * Factory class, used for decoding raw byte arrays, received from baseband,
+ * into a CommandParams object.
+ *
+ */
+class CommandParamsFactory extends Handler {
+    private static CommandParamsFactory sInstance = null;
+    private IconLoader mIconLoader;
+    private CommandParams mCmdParams = null;
+    private int mIconLoadState = LOAD_NO_ICON;
+    private RilMessageDecoder mCaller = null;
+    private boolean mloadIcon = false;
+
+    private Context mContext;
+    // used to mark the index of tlv object in a tlv list
+    int tlvIndex = -1;
+
+    // constants
+    static final int MSG_ID_LOAD_ICON_DONE = 1;
+
+    // loading icons state parameters.
+    static final int LOAD_NO_ICON           = 0;
+    static final int LOAD_SINGLE_ICON       = 1;
+    static final int LOAD_MULTI_ICONS       = 2;
+
+    // Command Qualifier values for refresh command
+    static final int REFRESH_NAA_INIT_AND_FULL_FILE_CHANGE  = 0x00;
+    static final int REFRESH_NAA_INIT_AND_FILE_CHANGE       = 0x02;
+    static final int REFRESH_NAA_INIT                       = 0x03;
+    static final int REFRESH_UICC_RESET                     = 0x04;
+
+    // Command Qualifier values for PLI command
+    static final int DTTZ_SETTING                           = 0x03;
+    static final int LANGUAGE_SETTING                       = 0x04;
+    static final int BATTERY_STATE                          = 0x0A;
+
+    // As per TS 102.223 Annex C, Structure of CAT communications,
+    // the APDU length can be max 255 bytes. This leaves only 239 bytes for user
+    // input string. CMD details TLV + Device IDs TLV + Result TLV + Other
+    // details of TextString TLV not including user input take 16 bytes.
+    //
+    // If UCS2 encoding is used, maximum 118 UCS2 chars can be encoded in 238 bytes.
+    // Each UCS2 char takes 2 bytes. Byte Order Mask(BOM), 0xFEFF takes 2 bytes.
+    //
+    // If GSM 7 bit default(use 8 bits to represent a 7 bit char) format is used,
+    // maximum 239 chars can be encoded in 239 bytes since each char takes 1 byte.
+    //
+    // No issues for GSM 7 bit packed format encoding.
+
+    private static final int MAX_GSM7_DEFAULT_CHARS = 239;
+    private static final int MAX_UCS2_CHARS = 118;
+
+    static synchronized CommandParamsFactory getInstance(RilMessageDecoder caller,
+            IccFileHandler fh) {
+        if (sInstance != null) {
+            return sInstance;
+        }
+        if (fh != null) {
+            return new CommandParamsFactory(caller, fh);
+        }
+        return null;
+    }
+
+    static synchronized CommandParamsFactory getInstance(RilMessageDecoder caller,
+            IccFileHandler fh, Context context) {
+        if (sInstance != null) {
+            return sInstance;
+        }
+
+        if (fh != null && context != null) {
+            return new CommandParamsFactory(caller, fh, context);
+        }
+
+        return null;
+    }
+
+    private CommandParamsFactory(RilMessageDecoder caller, IccFileHandler fh, Context context) {
+        mCaller = caller;
+        mIconLoader = IconLoader.getInstance(this, fh, mCaller.getSlotId());
+        mContext = context;
+    }
+
+    private CommandParamsFactory(RilMessageDecoder caller, IccFileHandler fh) {
+        mCaller = caller;
+        mIconLoader = IconLoader.getInstance(this, fh, mCaller.getSlotId());
+    }
+
+    private CommandDetails processCommandDetails(List<ComprehensionTlv> ctlvs)
+        throws ResultException {
+
+        CommandDetails cmdDet = null;
+
+        if (ctlvs != null) {
+            // Search for the Command Details object.
+            ComprehensionTlv ctlvCmdDet = searchForTag(
+                    ComprehensionTlvTag.COMMAND_DETAILS, ctlvs);
+            if (ctlvCmdDet != null) {
+                try {
+                    cmdDet = ValueParser.retrieveCommandDetails(ctlvCmdDet);
+                } catch (ResultException e) {
+                    CatLog.d(this, "Failed to procees command details");
+                    throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);
+                }
+            }
+        }
+        return cmdDet;
+    }
+
+    void make(BerTlv berTlv) {
+        if (berTlv == null) {
+            return;
+        }
+        // reset global state parameters.
+        mCmdParams = null;
+        mIconLoadState = LOAD_NO_ICON;
+        // only proactive command messages are processed.
+        if (berTlv.getTag() != BerTlv.BER_PROACTIVE_COMMAND_TAG) {
+            CatLog.e(this, "CPF-make: Ununderstood proactive command tag");
+            sendCmdParams(ResultCode.CMD_TYPE_NOT_UNDERSTOOD);
+            return;
+        }
+        boolean cmdPending = false;
+        List<ComprehensionTlv> ctlvs = berTlv.getComprehensionTlvs();
+        // process command dtails from the tlv list.
+        CommandDetails cmdDet = null;
+        try {
+            cmdDet = processCommandDetails(ctlvs);
+        } catch (ResultException e) {
+            CatLog.e(this, "CPF-make: Except to procees command details : " + e.result());
+            sendCmdParams(e.result());
+            return;
+        }
+        if (cmdDet == null) {
+            CatLog.e(this, "CPF-make: No CommandDetails object");
+            sendCmdParams(ResultCode.CMD_TYPE_NOT_UNDERSTOOD);
+            return;
+        }
+
+        // extract command type enumeration from the raw value stored inside
+        // the Command Details object.
+        AppInterface.CommandType cmdType = AppInterface.CommandType
+                .fromInt(cmdDet.typeOfCommand);
+        if (cmdType == null) {
+            CatLog.d(this, "CPF-make: Command type can't be found");
+             // This PROACTIVE COMMAND is presently not handled. Hence set
+            // result code as BEYOND_TERMINAL_CAPABILITY in TR.
+            mCmdParams = new CommandParams(cmdDet);
+            sendCmdParams(ResultCode.BEYOND_TERMINAL_CAPABILITY);
+            return;
+        }
+
+        // proactive command length is incorrect.
+        if (!berTlv.isLengthValid()) {
+            mCmdParams = new CommandParams(cmdDet);
+            sendCmdParams(ResultCode.CMD_DATA_NOT_UNDERSTOOD);
+            return;
+        }
+
+        try {
+            switch (cmdType) {
+            case SET_UP_MENU:
+                cmdPending = processSelectItem(cmdDet, ctlvs);
+                break;
+            case SELECT_ITEM:
+                cmdPending = processSelectItem(cmdDet, ctlvs);
+                break;
+            case DISPLAY_TEXT:
+                cmdPending = processDisplayText(cmdDet, ctlvs);
+                break;
+             case SET_UP_IDLE_MODE_TEXT:
+                 cmdPending = processSetUpIdleModeText(cmdDet, ctlvs);
+                 break;
+             case GET_INKEY:
+                cmdPending = processGetInkey(cmdDet, ctlvs);
+                break;
+             case GET_INPUT:
+                 cmdPending = processGetInput(cmdDet, ctlvs);
+                 break;
+             case SEND_DTMF:
+             case SEND_SMS:
+             case SEND_SS:
+             case SEND_USSD:
+                 cmdPending = processEventNotify(cmdDet, ctlvs);
+                 break;
+             case GET_CHANNEL_STATUS:
+             case SET_UP_CALL:
+                 cmdPending = processSetupCall(cmdDet, ctlvs);
+                 break;
+             case REFRESH:
+                processRefresh(cmdDet, ctlvs);
+                cmdPending = false;
+                break;
+             case LAUNCH_BROWSER:
+                 cmdPending = processLaunchBrowser(cmdDet, ctlvs);
+                 break;
+             case PLAY_TONE:
+                cmdPending = processPlayTone(cmdDet, ctlvs);
+                break;
+             case SET_UP_EVENT_LIST:
+                 cmdPending = processSetUpEventList(cmdDet, ctlvs);
+                 break;
+             case PROVIDE_LOCAL_INFORMATION:
+                cmdPending = processProvideLocalInfo(cmdDet, ctlvs);
+                break;
+             case OPEN_CHANNEL:
+             case CLOSE_CHANNEL:
+             case RECEIVE_DATA:
+             case SEND_DATA:
+                 cmdPending = processBIPClient(cmdDet, ctlvs);
+                 break;
+            case ACTIVATE:
+                cmdPending = processActivate(cmdDet, ctlvs);
+                break;
+            default:
+                // unsupported proactive commands
+                mCmdParams = new CommandParams(cmdDet);
+                CatLog.d(this, "CPF-make: default case");
+                sendCmdParams(ResultCode.BEYOND_TERMINAL_CAPABILITY);
+                return;
+            }
+        } catch (ResultException e) {
+            CatLog.d(this, "make: caught ResultException e=" + e);
+            mCmdParams = new CommandParams(cmdDet);
+            sendCmdParams(e.result());
+            return;
+        }
+        if (!cmdPending) {
+            sendCmdParams(ResultCode.OK);
+        }
+    }
+
+    @Override
+    public void handleMessage(Message msg) {
+        switch (msg.what) {
+        case MSG_ID_LOAD_ICON_DONE:
+            sendCmdParams(setIcons(msg.obj));
+            break;
+        }
+    }
+
+    private ResultCode setIcons(Object data) {
+        Bitmap[] icons = null;
+        int iconIndex = 0;
+
+        if (data == null) {
+            CatLog.d(this, "Optional Icon data is NULL");
+            mCmdParams.mLoadIconFailed = true;
+            mloadIcon = false;
+            /** In case of icon load fail consider the
+            ** received proactive command as valid (sending RESULT OK) as
+            ** The result code, 'PRFRMD_ICON_NOT_DISPLAYED' will be added in the
+            ** terminal response by CatService/StkAppService if needed based on
+            ** the value of mLoadIconFailed.
+            */
+            return ResultCode.OK;
+        }
+        switch(mIconLoadState) {
+        case LOAD_SINGLE_ICON:
+            mCmdParams.setIcon((Bitmap) data);
+            break;
+        case LOAD_MULTI_ICONS:
+            icons = (Bitmap[]) data;
+            // set each item icon.
+            for (Bitmap icon : icons) {
+                mCmdParams.setIcon(icon);
+                if (icon == null && mloadIcon) {
+                    CatLog.d(this, "Optional Icon data is NULL while loading multi icons");
+                    mCmdParams.mLoadIconFailed = true;
+                }
+            }
+            break;
+        }
+        return ResultCode.OK;
+    }
+
+    private void sendCmdParams(ResultCode resCode) {
+        if (mCaller != null) {
+            mCaller.sendMsgParamsDecoded(resCode, mCmdParams);
+        }
+    }
+
+    /**
+     * Search for a COMPREHENSION-TLV object with the given tag from a list
+     *
+     * @param tag A tag to search for
+     * @param ctlvs List of ComprehensionTlv objects used to search in
+     *
+     * @return A ComprehensionTlv object that has the tag value of {@code tag}.
+     *         If no object is found with the tag, null is returned.
+     */
+    private ComprehensionTlv searchForTag(ComprehensionTlvTag tag,
+            List<ComprehensionTlv> ctlvs) {
+        Iterator<ComprehensionTlv> iter = ctlvs.iterator();
+        return searchForNextTag(tag, iter);
+    }
+
+    /**
+     * Search for the next COMPREHENSION-TLV object with the given tag from a
+     * list iterated by {@code iter}. {@code iter} points to the object next to
+     * the found object when this method returns. Used for searching the same
+     * list for similar tags, usually item id.
+     *
+     * @param tag A tag to search for
+     * @param iter Iterator for ComprehensionTlv objects used for search
+     *
+     * @return A ComprehensionTlv object that has the tag value of {@code tag}.
+     *         If no object is found with the tag, null is returned.
+     */
+    private ComprehensionTlv searchForNextTag(ComprehensionTlvTag tag,
+            Iterator<ComprehensionTlv> iter) {
+        int tagValue = tag.value();
+        while (iter.hasNext()) {
+            ComprehensionTlv ctlv = iter.next();
+            if (ctlv.getTag() == tagValue) {
+                return ctlv;
+            }
+        }
+        return null;
+    }
+
+    private void resetTlvIndex() {
+        tlvIndex = -1;
+    }
+
+    /**
+     * Search for the next COMPREHENSION-TLV object with the given tag from a
+     * list iterated by {@code iter}. {@code iter} points to the object next to
+     * the found object when this method returns. Used for searching the same
+     * list for similar tags, usually item id. At the same time, this method
+     * will update a index to mark the position of the tlv object in the
+     * comprehension- tlv.
+     *
+     * @param tag A tag to search for
+     * @param iter Iterator for ComprehensionTlv objects used for search
+     * @return A ComprehensionTlv object that has the tag value of {@code tag}.
+     *         If no object is found with the tag, null is returned.
+     */
+    private ComprehensionTlv searchForNextTagAndIndex(ComprehensionTlvTag tag,
+            Iterator<ComprehensionTlv> iter) {
+        if (tag == null || iter == null) {
+            CatLog.d(this, "CPF-searchForNextTagAndIndex: Invalid params");
+            return null;
+        }
+
+        int tagValue = tag.value();
+
+        while (iter.hasNext()) {
+            ++tlvIndex;
+            ComprehensionTlv ctlv = iter.next();
+            if (ctlv.getTag() == tagValue) {
+                return ctlv;
+            }
+        }
+
+        // tlvIndex = -1;
+        return null;
+    }
+
+    /**
+     * Search for a COMPREHENSION-TLV object with the given tag from a list and
+     * provide the index of searched tlv object.
+     *
+     * @param tag A tag to search for
+     * @param ctlvs List of ComprehensionTlv objects used to search in
+     * @return A ComprehensionTlv object that has the tag value of {@code tag}.
+     *         If no object is found with the tag, null is returned.
+     */
+    private ComprehensionTlv searchForTagAndIndex(ComprehensionTlvTag tag,
+            List<ComprehensionTlv> ctlvs) {
+        // tlvIndex = -1;
+        resetTlvIndex();
+        Iterator<ComprehensionTlv> iter = ctlvs.iterator();
+        return searchForNextTagAndIndex(tag, iter);
+    }
+
+    /**
+     * Processes DISPLAY_TEXT proactive command from the SIM card.
+     *
+     * @param cmdDet Command Details container object.
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object and Device Identities object within the proactive command
+     * @return true if the command is processing is pending and additional
+     *         asynchronous processing is required.
+     * @throws ResultException
+     */
+    private boolean processDisplayText(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs)
+            throws ResultException {
+
+        CatLog.d(this, "process DisplayText");
+
+        TextMessage textMsg = new TextMessage();
+        IconId iconId = null;
+
+        ComprehensionTlv ctlv = searchForTag(ComprehensionTlvTag.TEXT_STRING,
+                ctlvs);
+        if (ctlv != null) {
+            textMsg.text = ValueParser.retrieveTextString(ctlv);
+        }
+        // If the tlv object doesn't exist or the it is a null object reply
+        // with command not understood.
+        if (textMsg.text == null) {
+            throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);
+        }
+
+        ctlv = searchForTag(ComprehensionTlvTag.IMMEDIATE_RESPONSE, ctlvs);
+        if (ctlv != null) {
+            textMsg.responseNeeded = false;
+        }
+        // parse icon identifier
+        ctlv = searchForTag(ComprehensionTlvTag.ICON_ID, ctlvs);
+        if (ctlv != null) {
+            try {
+                iconId = ValueParser.retrieveIconId(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveIconId ResultException: " + e.result());
+            }
+            try {
+                textMsg.iconSelfExplanatory = iconId.selfExplanatory;
+            } catch (NullPointerException ne) {
+                CatLog.e(this, "iconId is null.");
+            }
+        }
+        // parse tone duration
+        ctlv = searchForTag(ComprehensionTlvTag.DURATION, ctlvs);
+        if (ctlv != null) {
+            try {
+                textMsg.duration = ValueParser.retrieveDuration(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveDuration ResultException: " + e.result());
+            }
+        }
+
+        // Parse command qualifier parameters.
+        textMsg.isHighPriority = (cmdDet.commandQualifier & 0x01) != 0;
+        textMsg.userClear = (cmdDet.commandQualifier & 0x80) != 0;
+
+        mCmdParams = new DisplayTextParams(cmdDet, textMsg);
+
+        if (iconId != null) {
+            mloadIcon = true;
+            mIconLoadState = LOAD_SINGLE_ICON;
+            mIconLoader.loadIcon(iconId.recordNumber, this
+                    .obtainMessage(MSG_ID_LOAD_ICON_DONE));
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Processes SET_UP_IDLE_MODE_TEXT proactive command from the SIM card.
+     *
+     * @param cmdDet Command Details container object.
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object and Device Identities object within the proactive command
+     * @return true if the command is processing is pending and additional
+     *         asynchronous processing is required.
+     * @throws ResultException
+     */
+    private boolean processSetUpIdleModeText(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) throws ResultException {
+
+        CatLog.d(this, "process SetUpIdleModeText");
+
+        TextMessage textMsg = new TextMessage();
+        IconId iconId = null;
+
+        ComprehensionTlv ctlv = searchForTag(ComprehensionTlvTag.TEXT_STRING,
+                ctlvs);
+        if (ctlv != null) {
+            textMsg.text = ValueParser.retrieveTextString(ctlv);
+        }
+
+        ctlv = searchForTag(ComprehensionTlvTag.ICON_ID, ctlvs);
+        if (ctlv != null) {
+            iconId = ValueParser.retrieveIconId(ctlv);
+            textMsg.iconSelfExplanatory = iconId.selfExplanatory;
+        }
+
+        /*
+         * If the tlv object doesn't contain text and the icon is not self
+         * explanatory then reply with command not understood.
+         */
+
+        if (textMsg.text == null && iconId != null && !textMsg.iconSelfExplanatory) {
+            throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);
+        }
+        mCmdParams = new DisplayTextParams(cmdDet, textMsg);
+
+        if (iconId != null) {
+            mloadIcon = true;
+            mIconLoadState = LOAD_SINGLE_ICON;
+            mIconLoader.loadIcon(iconId.recordNumber, this
+                    .obtainMessage(MSG_ID_LOAD_ICON_DONE));
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Processes GET_INKEY proactive command from the SIM card.
+     *
+     * @param cmdDet Command Details container object.
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object and Device Identities object within the proactive command
+     * @return true if the command is processing is pending and additional
+     *         asynchronous processing is required.
+     * @throws ResultException
+     */
+    private boolean processGetInkey(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) throws ResultException {
+
+        CatLog.d(this, "process GetInkey");
+
+        Input input = new Input();
+        IconId iconId = null;
+
+        ComprehensionTlv ctlv = searchForTag(ComprehensionTlvTag.TEXT_STRING,
+                ctlvs);
+        if (ctlv != null) {
+            input.text = ValueParser.retrieveTextString(ctlv);
+        } else {
+            throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);
+        }
+        // parse icon identifier
+        ctlv = searchForTag(ComprehensionTlvTag.ICON_ID, ctlvs);
+        if (ctlv != null) {
+            try {
+                iconId = ValueParser.retrieveIconId(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveIconId ResultException: " + e.result());
+            }
+
+            try {
+                input.iconSelfExplanatory = iconId.selfExplanatory;
+            } catch (NullPointerException ne) {
+                CatLog.e(this, "iconId is null.");
+            }
+        }
+
+        // parse duration
+        ctlv = searchForTag(ComprehensionTlvTag.DURATION, ctlvs);
+        if (ctlv != null) {
+            try {
+                input.duration = ValueParser.retrieveDuration(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveDuration ResultException: " + e.result());
+            }
+        }
+
+        input.minLen = 1;
+        input.maxLen = 1;
+
+        input.digitOnly = (cmdDet.commandQualifier & 0x01) == 0;
+        input.ucs2 = (cmdDet.commandQualifier & 0x02) != 0;
+        input.yesNo = (cmdDet.commandQualifier & 0x04) != 0;
+        input.helpAvailable = (cmdDet.commandQualifier & 0x80) != 0;
+        input.echo = true;
+
+        mCmdParams = new GetInputParams(cmdDet, input);
+
+        if (iconId != null) {
+            mloadIcon = true;
+            mIconLoadState = LOAD_SINGLE_ICON;
+            mIconLoader.loadIcon(iconId.recordNumber, this
+                    .obtainMessage(MSG_ID_LOAD_ICON_DONE));
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Processes GET_INPUT proactive command from the SIM card.
+     *
+     * @param cmdDet Command Details container object.
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object and Device Identities object within the proactive command
+     * @return true if the command is processing is pending and additional
+     *         asynchronous processing is required.
+     * @throws ResultException
+     */
+    private boolean processGetInput(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) throws ResultException {
+
+        CatLog.d(this, "process GetInput");
+
+        Input input = new Input();
+        IconId iconId = null;
+
+        ComprehensionTlv ctlv = searchForTag(ComprehensionTlvTag.TEXT_STRING,
+                ctlvs);
+        if (ctlv != null) {
+            input.text = ValueParser.retrieveTextString(ctlv);
+        } else {
+            throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);
+        }
+
+        ctlv = searchForTag(ComprehensionTlvTag.RESPONSE_LENGTH, ctlvs);
+        if (ctlv != null) {
+            try {
+                byte[] rawValue = ctlv.getRawValue();
+                int valueIndex = ctlv.getValueIndex();
+                // The maximum input lenght is 239, because the
+                // maximum length of proactive command is 255
+                input.minLen = rawValue[valueIndex] & 0xff;
+                if (input.minLen > 239) {
+                    input.minLen = 239;
+                }
+
+                input.maxLen = rawValue[valueIndex + 1] & 0xff;
+                if (input.maxLen > 239) {
+                    input.maxLen = 239;
+                }
+            } catch (IndexOutOfBoundsException e) {
+                throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);
+            }
+        } else {
+            throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);
+        }
+
+        ctlv = searchForTag(ComprehensionTlvTag.DEFAULT_TEXT, ctlvs);
+        if (ctlv != null) {
+            try {
+                input.defaultText = ValueParser.retrieveTextString(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveTextString ResultException: " + e.result());
+            }
+        }
+        // parse icon identifier
+        ctlv = searchForTag(ComprehensionTlvTag.ICON_ID, ctlvs);
+        if (ctlv != null) {
+            try {
+                iconId = ValueParser.retrieveIconId(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveIconId ResultException: " + e.result());
+            }
+
+            try {
+                input.iconSelfExplanatory = iconId.selfExplanatory;
+            } catch (NullPointerException ne) {
+                CatLog.e(this, "iconId is null.");
+            }
+        }
+
+        input.digitOnly = (cmdDet.commandQualifier & 0x01) == 0;
+        input.ucs2 = (cmdDet.commandQualifier & 0x02) != 0;
+        input.echo = (cmdDet.commandQualifier & 0x04) == 0;
+        input.packed = (cmdDet.commandQualifier & 0x08) != 0;
+        input.helpAvailable = (cmdDet.commandQualifier & 0x80) != 0;
+
+        // Truncate the maxLen if it exceeds the max number of chars that can
+        // be encoded. Limit depends on DCS in Command Qualifier.
+        if (input.ucs2 && input.maxLen > MAX_UCS2_CHARS) {
+            CatLog.d(this, "UCS2: received maxLen = " + input.maxLen +
+                  ", truncating to " + MAX_UCS2_CHARS);
+            input.maxLen = MAX_UCS2_CHARS;
+        } else if (!input.packed && input.maxLen > MAX_GSM7_DEFAULT_CHARS) {
+            CatLog.d(this, "GSM 7Bit Default: received maxLen = " + input.maxLen +
+                  ", truncating to " + MAX_GSM7_DEFAULT_CHARS);
+            input.maxLen = MAX_GSM7_DEFAULT_CHARS;
+        }
+
+        mCmdParams = new GetInputParams(cmdDet, input);
+
+        if (iconId != null) {
+            mloadIcon = true;
+            mIconLoadState = LOAD_SINGLE_ICON;
+            mIconLoader.loadIcon(iconId.recordNumber, this
+                    .obtainMessage(MSG_ID_LOAD_ICON_DONE));
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Processes REFRESH proactive command from the SIM card.
+     *
+     * @param cmdDet Command Details container object.
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object and Device Identities object within the proactive command
+     */
+    private boolean processRefresh(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) {
+
+        CatLog.d(this, "process Refresh");
+        TextMessage textMsg = new TextMessage();
+
+        // REFRESH proactive command is rerouted by the baseband and handled by
+        // the telephony layer. IDLE TEXT should be removed for a REFRESH command
+        // with "initialization" or "reset"
+        switch (cmdDet.commandQualifier) {
+        case REFRESH_NAA_INIT_AND_FULL_FILE_CHANGE:
+        case REFRESH_NAA_INIT_AND_FILE_CHANGE:
+        case REFRESH_NAA_INIT:
+        case REFRESH_UICC_RESET:
+            textMsg.text = null;
+            mCmdParams = new DisplayTextParams(cmdDet, textMsg);
+            break;
+        }
+        return false;
+    }
+
+    /**
+     * Processes SELECT_ITEM proactive command from the SIM card.
+     *
+     * @param cmdDet Command Details container object.
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object and Device Identities object within the proactive command
+     * @return true if the command is processing is pending and additional
+     *         asynchronous processing is required.
+     * @throws ResultException
+     */
+    private boolean processSelectItem(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) throws ResultException {
+
+        CatLog.d(this, "process SelectItem");
+
+        Menu menu = new Menu();
+        IconId titleIconId = null;
+        ItemsIconId itemsIconId = null;
+        Iterator<ComprehensionTlv> iter = ctlvs.iterator();
+
+        AppInterface.CommandType cmdType = AppInterface.CommandType
+                .fromInt(cmdDet.typeOfCommand);
+
+        ComprehensionTlv ctlv = searchForTag(ComprehensionTlvTag.ALPHA_ID,
+                ctlvs);
+        if (ctlv != null) {
+            try {
+                menu.title = ValueParser.retrieveAlphaId(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveAlphaId ResultException: " + e.result());
+            }
+            CatLog.d(this, "add AlphaId: " + menu.title);
+            /*begin-chenhu*/
+            int def = mContext.getResources().getInteger(com.android.internal.R.integer.def_customized_stk_app_name);
+            if(def == 2) {
+                if (cmdDet.typeOfCommand == AppInterface.CommandType.SET_UP_MENU.value()) {
+                    if (menu.title != null && menu.title.length() <= SystemProperties.PROP_VALUE_MAX) {
+                        SystemProperties.set("gsm.stk.perso.app_title", menu.title);
+                    }
+                }
+            }
+            /*end-chenhu*/
+        } else if (cmdType == AppInterface.CommandType.SET_UP_MENU) {
+            // According to spec ETSI TS 102 223 section 6.10.3, the
+            // Alpha ID is mandatory (and also part of minimum set of
+            // elements required) for SET_UP_MENU. If it is not received
+            // by ME, then ME should respond with "error: missing minimum
+            // information" and not "command performed successfully".
+            throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);
+        }
+
+        while (true) {
+            ctlv = searchForNextTag(ComprehensionTlvTag.ITEM, iter);
+            if (ctlv != null) {
+                Item item = ValueParser.retrieveItem(ctlv);
+                //CatLog.d(this, "add menu item: " + ((item == null) ? "" : item.toString()));
+                menu.items.add(item);
+            } else {
+                break;
+            }
+        }
+
+        // We must have at least one menu item.
+        if (menu.items.size() == 0) {
+            CatLog.d(this, "no menu item");
+            throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);
+        }
+
+        ctlv = searchForTag(ComprehensionTlvTag.NEXT_ACTION_INDICATOR, ctlvs);
+        if (ctlv != null) {
+            try {
+            menu.nextActionIndicator = ValueParser.retrieveNextActionIndicator(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveNextActionIndicator ResultException: " + e.result());
+            }
+            try {
+            if (menu.nextActionIndicator.length != menu.items.size()) {
+                CatLog.d(this, "nextActionIndicator.length != number of menu items");
+                menu.nextActionIndicator = null;
+            }
+            } catch (NullPointerException ne) {
+                CatLog.e(this, "nextActionIndicator is null.");
+            }
+        }
+
+        ctlv = searchForTag(ComprehensionTlvTag.ITEM_ID, ctlvs);
+        if (ctlv != null) {
+            // CAT items are listed 1...n while list start at 0, need to
+            // subtract one.
+            try {
+                menu.defaultItem = ValueParser.retrieveItemId(ctlv) - 1;
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveItemId ResultException: " + e.result());
+            }
+            CatLog.d(this, "default item: " + menu.defaultItem);
+        }
+
+        ctlv = searchForTag(ComprehensionTlvTag.ICON_ID, ctlvs);
+        if (ctlv != null) {
+            mIconLoadState = LOAD_SINGLE_ICON;
+            try {
+                titleIconId = ValueParser.retrieveIconId(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveIconId ResultException: " + e.result());
+            }
+            try {
+                menu.titleIconSelfExplanatory = titleIconId.selfExplanatory;
+            } catch (NullPointerException ne) {
+                CatLog.e(this, "titleIconId is null.");
+            }
+        }
+
+        ctlv = searchForTag(ComprehensionTlvTag.ITEM_ICON_ID_LIST, ctlvs);
+        if (ctlv != null) {
+            mIconLoadState = LOAD_MULTI_ICONS;
+            try {
+                itemsIconId = ValueParser.retrieveItemsIconId(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveItemsIconId ResultException: " + e.result());
+            }
+            try {
+                menu.itemsIconSelfExplanatory = itemsIconId.selfExplanatory;
+            } catch (NullPointerException ne) {
+                CatLog.e(this, "itemsIconId is null.");
+            }
+        }
+
+        boolean presentTypeSpecified = (cmdDet.commandQualifier & 0x01) != 0;
+        if (presentTypeSpecified) {
+            if ((cmdDet.commandQualifier & 0x02) == 0) {
+                menu.presentationType = PresentationType.DATA_VALUES;
+            } else {
+                menu.presentationType = PresentationType.NAVIGATION_OPTIONS;
+            }
+        }
+        menu.softKeyPreferred = (cmdDet.commandQualifier & 0x04) != 0;
+        menu.helpAvailable = (cmdDet.commandQualifier & 0x80) != 0;
+
+        mCmdParams = new SelectItemParams(cmdDet, menu, titleIconId != null);
+
+        // Load icons data if needed.
+        switch(mIconLoadState) {
+        case LOAD_NO_ICON:
+            return false;
+        case LOAD_SINGLE_ICON:
+            if (titleIconId != null && titleIconId.recordNumber > 0) {
+                mloadIcon = true;
+                mIconLoader.loadIcon(titleIconId.recordNumber, this
+                        .obtainMessage(MSG_ID_LOAD_ICON_DONE));
+                break;
+            } else {
+                return false;
+            }
+        case LOAD_MULTI_ICONS:
+            if (itemsIconId != null) {
+                int[] recordNumbers = itemsIconId.recordNumbers;
+                if (titleIconId != null) {
+                    // Create a new array for all the icons (title and items).
+                    recordNumbers = new int[itemsIconId.recordNumbers.length + 1];
+                    recordNumbers[0] = titleIconId.recordNumber;
+                    System.arraycopy(itemsIconId.recordNumbers, 0, recordNumbers,
+                            1, itemsIconId.recordNumbers.length);
+                }
+                mloadIcon = true;
+                mIconLoader.loadIcons(recordNumbers, this
+                        .obtainMessage(MSG_ID_LOAD_ICON_DONE));
+                break;
+            } else {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    /**
+     * Processes EVENT_NOTIFY message from baseband.
+     *
+     * @param cmdDet Command Details container object.
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object and Device Identities object within the proactive command
+     * @return true if the command is processing is pending and additional
+     *         asynchronous processing is required.
+     */
+    private boolean processEventNotify(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) throws ResultException {
+
+        CatLog.d(this, "process EventNotify");
+
+        TextMessage textMsg = new TextMessage();
+        IconId iconId = null;
+
+        ComprehensionTlv ctlv = searchForTag(ComprehensionTlvTag.ALPHA_ID,
+                ctlvs);
+        if (ctlv != null) {
+            textMsg.text = ValueParser.retrieveAlphaId(ctlv);
+        } else {
+            // throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);
+            textMsg.text = null;
+        }
+
+        ctlv = searchForTag(ComprehensionTlvTag.ICON_ID, ctlvs);
+        if (ctlv != null) {
+            iconId = ValueParser.retrieveIconId(ctlv);
+            textMsg.iconSelfExplanatory = iconId.selfExplanatory;
+        }
+
+        textMsg.responseNeeded = false;
+        mCmdParams = new DisplayTextParams(cmdDet, textMsg);
+
+        if (iconId != null) {
+            mloadIcon = true;
+            mIconLoadState = LOAD_SINGLE_ICON;
+            mIconLoader.loadIcon(iconId.recordNumber, this
+                    .obtainMessage(MSG_ID_LOAD_ICON_DONE));
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Processes SET_UP_EVENT_LIST proactive command from the SIM card.
+     *
+     * @param cmdDet Command Details object retrieved.
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object and Device Identities object within the proactive command
+     * @return false. This function always returns false meaning that the command
+     *         processing is  not pending and additional asynchronous processing
+     *         is not required.
+     */
+/* L-MR1
+    private boolean processSetUpEventList(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) {
+
+        CatLog.d(this, "process SetUpEventList");
+        ComprehensionTlv ctlv = searchForTag(ComprehensionTlvTag.EVENT_LIST, ctlvs);
+        if (ctlv != null) {
+            try {
+                byte[] rawValue = ctlv.getRawValue();
+                int valueIndex = ctlv.getValueIndex();
+                int valueLen = ctlv.getLength();
+                int[] eventList = new int[valueLen];
+                int eventValue = -1;
+                int i = 0;
+                while (valueLen > 0) {
+                    eventValue = rawValue[valueIndex] & 0xff;
+                    valueIndex++;
+                    valueLen--;
+
+                    switch (eventValue) {
+                        case USER_ACTIVITY_EVENT:
+                        case IDLE_SCREEN_AVAILABLE_EVENT:
+                        case LANGUAGE_SELECTION_EVENT:
+                        case BROWSER_TERMINATION_EVENT:
+                        case BROWSING_STATUS_EVENT:
+                        /// M: BIP {
+                        case DATA_AVAILABLE_EVENT:
+                        case CHANNEL_STATUS_EVENT:
+                        /// M: BIP }
+                            eventList[i] = eventValue;
+                            i++;
+                            break;
+                        default:
+                            break;
+                    }
+
+                }
+                mCmdParams = new SetEventListParams(cmdDet, eventList);
+            } catch (IndexOutOfBoundsException e) {
+                CatLog.e(this, " IndexOutofBoundException in processSetUpEventList");
+            }
+        }
+        return false;
+    }
+*/
+    /**
+     *            object and Device Identities object within the proactive
+     *            command.
+     * @return true if the command is processing is pending and additional
+     *         asynchronous processing is required.
+     */
+    private boolean processSetUpEventList(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) throws ResultException {
+        //
+        // ComprehensionTlv ctlv = searchForTag(ComprehensionTlvTag.EVENT_LIST,
+        // ctlvs);
+        // if (ctlv != null) {
+        // try {
+        // byte[] rawValue = ctlv.getRawValue();
+        // int valueIndex = ctlv.getValueIndex();
+        // int valueLen = ctlv.getLength();
+        //
+        // } catch (IndexOutOfBoundsException e) {}
+        // }
+        // return true;
+
+        CatLog.d(this, "process SetUpEventList");
+
+        byte[] eventList;
+
+        ComprehensionTlv ctlv = searchForTag(ComprehensionTlvTag.EVENT_LIST, ctlvs);
+        if (ctlv != null) {
+            try {
+                byte[] rawValue = ctlv.getRawValue();
+                int valueIndex = ctlv.getValueIndex();
+                int valueLen = ctlv.getLength();
+
+                eventList = new byte[valueLen];
+                for (int index = 0; index < valueLen; ) {
+                    eventList[index] = rawValue[valueIndex];
+                    CatLog.v(this, "CPF-processSetUpEventList: eventList[" + index + "] = "
+                            + eventList[index]);
+                    if (rawValue[valueIndex]
+                            == CatService.EVENT_LIST_ELEMENT_IDLE_SCREEN_AVAILABLE) {
+                        CatLog.v(this, "CPF-processSetUpEventList: sent intent with idle = true");
+                        Intent intent = new Intent(CatService.IDLE_SCREEN_INTENT_NAME);
+                        intent.putExtra(CatService.IDLE_SCREEN_ENABLE_KEY, true);
+                        mContext.sendBroadcast(intent);
+                        // IWindowManager wm =
+                        // IWindowManager.Stub.asInterface(ServiceManager.getService("window"));
+                        /*
+                         * try { wm.setEventDownloadNeeded(true); } catch
+                         * (RemoteException e) { CatLog.d(this,
+                         * "Exception when set EventDownloadNeeded flag in WindowManager"
+                         * ); } catch (NullPointerException e2) { StkLog.d(this,
+                         * "wm is null"); }
+                         */
+                    } else if (rawValue[valueIndex]
+                            == CatService.EVENT_LIST_ELEMENT_USER_ACTIVITY) {
+                        CatLog.v(this, "CPF-processSetUpEventList: sent intent for user activity");
+                        Intent intent = new Intent(CatService.USER_ACTIVITY_INTENT_NAME);
+                        intent.putExtra(CatService.USER_ACTIVITY_ENABLE_KEY, true);
+                        mContext.sendBroadcast(intent);
+                    }
+                    index++;
+                    valueIndex++;
+                }
+                mCmdParams = new SetupEventListParams(cmdDet, eventList);
+            } catch (IndexOutOfBoundsException e) {
+                throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);
+            }
+        }
+
+        return false;
+    }
+
+    /**
+     * Processes LAUNCH_BROWSER proactive command from the SIM card.
+     *
+     * @param cmdDet Command Details container object.
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object and Device Identities object within the proactive command
+     * @return true if the command is processing is pending and additional
+     *         asynchronous processing is required.
+     * @throws ResultException
+     */
+    private boolean processLaunchBrowser(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) throws ResultException {
+
+        CatLog.d(this, "process LaunchBrowser");
+
+        TextMessage confirmMsg = new TextMessage();
+        IconId iconId = null;
+        String url = null;
+
+        ComprehensionTlv ctlv = searchForTag(ComprehensionTlvTag.URL, ctlvs);
+        if (ctlv != null) {
+            try {
+                byte[] rawValue = ctlv.getRawValue();
+                int valueIndex = ctlv.getValueIndex();
+                int valueLen = ctlv.getLength();
+                if (valueLen > 0) {
+                    url = GsmAlphabet.gsm8BitUnpackedToString(rawValue,
+                            valueIndex, valueLen);
+                } else {
+                    url = null;
+                }
+            } catch (IndexOutOfBoundsException e) {
+                throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);
+            }
+        }
+
+        // parse alpha identifier.
+        ctlv = searchForTag(ComprehensionTlvTag.ALPHA_ID, ctlvs);
+        if (ctlv != null) {
+            confirmMsg.text = ValueParser.retrieveAlphaId(ctlv);
+        }
+        // parse icon identifier
+        ctlv = searchForTag(ComprehensionTlvTag.ICON_ID, ctlvs);
+        if (ctlv != null) {
+            iconId = ValueParser.retrieveIconId(ctlv);
+            confirmMsg.iconSelfExplanatory = iconId.selfExplanatory;
+        }
+
+        // parse command qualifier value.
+        LaunchBrowserMode mode;
+        switch (cmdDet.commandQualifier) {
+        case 0x00:
+        default:
+            mode = LaunchBrowserMode.LAUNCH_IF_NOT_ALREADY_LAUNCHED;
+            break;
+        case 0x02:
+            mode = LaunchBrowserMode.USE_EXISTING_BROWSER;
+            break;
+        case 0x03:
+            mode = LaunchBrowserMode.LAUNCH_NEW_BROWSER;
+            break;
+        }
+
+        mCmdParams = new LaunchBrowserParams(cmdDet, confirmMsg, url, mode);
+
+        if (iconId != null) {
+            mIconLoadState = LOAD_SINGLE_ICON;
+            mIconLoader.loadIcon(iconId.recordNumber, this
+                    .obtainMessage(MSG_ID_LOAD_ICON_DONE));
+            return true;
+        }
+        return false;
+    }
+
+     /**
+     * Processes PLAY_TONE proactive command from the SIM card.
+     *
+     * @param cmdDet Command Details container object.
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object and Device Identities object within the proactive command
+     * @return true if the command is processing is pending and additional
+     *         asynchronous processing is required.t
+     * @throws ResultException
+     */
+    private boolean processPlayTone(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) throws ResultException {
+
+        CatLog.d(this, "process PlayTone");
+
+        Tone tone = null;
+        TextMessage textMsg = new TextMessage();
+        Duration duration = null;
+        IconId iconId = null;
+
+        ComprehensionTlv ctlv = searchForTag(ComprehensionTlvTag.TONE, ctlvs);
+        if (ctlv != null) {
+            // Nothing to do for null objects.
+            if (ctlv.getLength() > 0) {
+                try {
+                    byte[] rawValue = ctlv.getRawValue();
+                    int valueIndex = ctlv.getValueIndex();
+                    int toneVal = rawValue[valueIndex];
+                    tone = Tone.fromInt(toneVal);
+                } catch (IndexOutOfBoundsException e) {
+                    throw new ResultException(
+                            ResultCode.CMD_DATA_NOT_UNDERSTOOD);
+                }
+            }
+        }
+        // parse alpha identifier
+        ctlv = searchForTag(ComprehensionTlvTag.ALPHA_ID, ctlvs);
+        if (ctlv != null) {
+            try {
+            textMsg.text = ValueParser.retrieveAlphaId(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveAlphaId ResultException: " + e.result());
+            }
+        }
+        // parse tone duration
+        ctlv = searchForTag(ComprehensionTlvTag.DURATION, ctlvs);
+        if (ctlv != null) {
+            try {
+            duration = ValueParser.retrieveDuration(ctlv);
+            } catch (ResultException e) {
+                CatLog.e(this, "retrieveDuration ResultException: " + e.result());
+            }
+        }
+        // parse icon identifier
+        ctlv = searchForTag(ComprehensionTlvTag.ICON_ID, ctlvs);
+        if (ctlv != null) {
+            iconId = ValueParser.retrieveIconId(ctlv);
+            textMsg.iconSelfExplanatory = iconId.selfExplanatory;
+        }
+
+        boolean vibrate = (cmdDet.commandQualifier & 0x01) != 0x00;
+
+        textMsg.responseNeeded = false;
+        mCmdParams = new PlayToneParams(cmdDet, textMsg, tone, duration, vibrate);
+
+        if (iconId != null) {
+            mIconLoadState = LOAD_SINGLE_ICON;
+            mIconLoader.loadIcon(iconId.recordNumber, this
+                    .obtainMessage(MSG_ID_LOAD_ICON_DONE));
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Processes SETUP_CALL proactive command from the SIM card.
+     *
+     * @param cmdDet Command Details object retrieved from the proactive command
+     *        object
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object and Device Identities object within the proactive command
+     * @return true if the command is processing is pending and additional
+     *         asynchronous processing is required.
+     */
+    private boolean processSetupCall(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) throws ResultException {
+        CatLog.d(this, "process SetupCall");
+
+        Iterator<ComprehensionTlv> iter = ctlvs.iterator();
+        ComprehensionTlv ctlv = null;
+        // User confirmation phase message.
+        TextMessage confirmMsg = new TextMessage();
+        // Call set up phase message.
+        TextMessage callMsg = new TextMessage();
+        IconId confirmIconId = null;
+        IconId callIconId = null;
+
+        // The structure of SET UP CALL
+        // alpha id -> address -> icon id -> alpha id -> icon id
+        // We use the index of alpha id to judge the type of alpha id:
+        // confirm or call
+        final int addrIndex = getAddrIndex(ctlvs);
+        if (-1 == addrIndex) {
+            CatLog.d(this, "fail to get ADDRESS data object");
+            return false;
+        }
+
+        final int alpha1Index = getConfirmationAlphaIdIndex(ctlvs, addrIndex);
+        final int alpha2Index = getCallingAlphaIdIndex(ctlvs, addrIndex);
+
+        ctlv = getConfirmationAlphaId(ctlvs, addrIndex);
+        if (ctlv != null) {
+            confirmMsg.text = ValueParser.retrieveAlphaId(ctlv);
+        }
+
+        ctlv = getConfirmationIconId(ctlvs, alpha1Index, alpha2Index);
+        if (ctlv != null) {
+            confirmIconId = ValueParser.retrieveIconId(ctlv);
+            confirmMsg.iconSelfExplanatory = confirmIconId.selfExplanatory;
+        }
+
+        ctlv = getCallingAlphaId(ctlvs, addrIndex);
+        if (ctlv != null) {
+            callMsg.text = ValueParser.retrieveAlphaId(ctlv);
+        }
+
+        ctlv = getCallingIconId(ctlvs, alpha2Index);
+        if (ctlv != null) {
+            callIconId = ValueParser.retrieveIconId(ctlv);
+            callMsg.iconSelfExplanatory = callIconId.selfExplanatory;
+        }
+
+        mCmdParams = new CallSetupParams(cmdDet, confirmMsg, callMsg);
+
+        if (confirmIconId != null || callIconId != null) {
+            mIconLoadState = LOAD_MULTI_ICONS;
+            int[] recordNumbers = new int[2];
+            recordNumbers[0] = confirmIconId != null
+                    ? confirmIconId.recordNumber : -1;
+            recordNumbers[1] = callIconId != null ? callIconId.recordNumber
+                    : -1;
+
+            mIconLoader.loadIcons(recordNumbers, this
+                    .obtainMessage(MSG_ID_LOAD_ICON_DONE));
+            return true;
+        }
+        return false;
+    }
+
+    private boolean processProvideLocalInfo(CommandDetails cmdDet, List<ComprehensionTlv> ctlvs)
+            throws ResultException {
+        CatLog.d(this, "process ProvideLocalInfo");
+        switch (cmdDet.commandQualifier) {
+            case DTTZ_SETTING:
+                CatLog.d(this, "PLI [DTTZ_SETTING]");
+                mCmdParams = new CommandParams(cmdDet);
+                break;
+            case LANGUAGE_SETTING:
+                CatLog.d(this, "PLI [LANGUAGE_SETTING]");
+                mCmdParams = new CommandParams(cmdDet);
+                break;
+            default:
+                CatLog.d(this, "PLI[" + cmdDet.commandQualifier + "] Command Not Supported");
+                mCmdParams = new CommandParams(cmdDet);
+                throw new ResultException(ResultCode.BEYOND_TERMINAL_CAPABILITY);
+        }
+        return false;
+    }
+
+    /**
+     * Processes Activate proactive command from the SIM card.
+     *
+     * @param cmdDet Command Details container object.
+     * @param ctlvs List of ComprehensionTlv objects following Command Details
+     *        object
+     * @return true if the command is processing is pending and additional
+     *         asynchronous processing is required.
+     * @throws ResultException
+     */
+    private boolean processActivate(CommandDetails cmdDet,
+            List<ComprehensionTlv> ctlvs) throws ResultException {
+
+        CatLog.d(this, "process Activate");
+
+        ComprehensionTlv ctlv = null;
+        int target = 0;
+
+        ctlv = searchForTag(ComprehensionTlvTag.ACTIVATE_DESCRIPTOR, ctlvs);
+        if (ctlv != null) {
+            try {
+                target = ValueParser.retrieveTarget(ctlv);
+            } catch (ResultException e) {
+                throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);
+            }
+            CatLog.d(this, "target: " + target);
+        }
+
+        mCmdParams = new ActivateParams(cmdDet, target);
+        return false;
+    }
+
+    /**
+     * Get the index of ADDRESS data object.
+     *
+     * @param list List of ComprehensionTlv
+     * @return the index of ADDRESS data object.
+     */
+    private int getAddrIndex(final List<ComprehensionTlv> list) {
+        int addrIndex = 0;
+
+        ComprehensionTlv temp = null;
+        Iterator<ComprehensionTlv> iter = list.iterator();
+        while (iter.hasNext()) {
+            temp = iter.next();
+            if (temp.getTag() == ComprehensionTlvTag.ADDRESS.value()) {
+                return addrIndex;
+            }
+            ++addrIndex;
+        } // end while
+
+        return -1;
+    }
+
+    /**
+     * Get the index of ALPHA_ID data object in confirmation phase data object.
+     *
+     * @param list List of ComprehensionTlv
+     * @param addrIndex The index of ADDRESS data object
+     * @return the index of ALPHA_ID data object.
+     */
+    private int getConfirmationAlphaIdIndex(final List<ComprehensionTlv> list,
+            final int addrIndex) {
+        int alphaIndex = 0;
+
+        ComprehensionTlv temp = null;
+        Iterator<ComprehensionTlv> iter = list.iterator();
+        while (iter.hasNext()) {
+            temp = iter.next();
+            if (temp.getTag() == ComprehensionTlvTag.ALPHA_ID.value()
+                    && alphaIndex < addrIndex) {
+                return alphaIndex;
+            }
+            ++alphaIndex;
+        } // end while
+
+        return -1;
+    }
+
+    /**
+     * Get the index of ALPHA_ID data object in call phase data object.
+     *
+     * @param list List of ComprehensionTlv
+     * @param addrIndex The index of ADDRESS data object
+     * @return the index of ALPHA_ID data object.
+     */
+    private int getCallingAlphaIdIndex(final List<ComprehensionTlv> list,
+            final int addrIndex) {
+        int alphaIndex = 0;
+
+        ComprehensionTlv temp = null;
+        Iterator<ComprehensionTlv> iter = list.iterator();
+        while (iter.hasNext()) {
+            temp = iter.next();
+            if (temp.getTag() == ComprehensionTlvTag.ALPHA_ID.value()
+                    && alphaIndex > addrIndex) {
+                return alphaIndex;
+            }
+            ++alphaIndex;
+        } // end while
+
+        return -1;
+    }
+
+    /**
+     * Get the ALPHA_ID data object in confirmation phase data object.
+     *
+     * @param list List of ComprehensionTlv
+     * @param addrIndex The index of ADDRESS data object
+     * @return ALPHA_ID data object.
+     */
+    private ComprehensionTlv getConfirmationAlphaId(final List<ComprehensionTlv> list,
+            final int addrIndex) {
+        int alphaIndex = 0;
+
+        ComprehensionTlv temp = null;
+        Iterator<ComprehensionTlv> iter = list.iterator();
+        while (iter.hasNext()) {
+            temp = iter.next();
+            if (temp.getTag() == ComprehensionTlvTag.ALPHA_ID.value()
+                    && alphaIndex < addrIndex) {
+                return temp;
+            }
+            ++alphaIndex;
+        } // end while
+
+        return null;
+    }
+
+    /**
+     * Get the ALPHA_ID data object in call phase data object.
+     *
+     * @param list List of ComprehensionTlv
+     * @param addrIndex The index of ADDRESS data object
+     * @return ALPHA_ID data object.
+     */
+    private ComprehensionTlv getCallingAlphaId(final List<ComprehensionTlv> list,
+            final int addrIndex) {
+        int alphaIndex = 0;
+
+        ComprehensionTlv temp = null;
+        Iterator<ComprehensionTlv> iter = list.iterator();
+        while (iter.hasNext()) {
+            temp = iter.next();
+            if (temp.getTag() == ComprehensionTlvTag.ALPHA_ID.value()
+                    && alphaIndex > addrIndex) {
+                return temp;
+            }
+            ++alphaIndex;
+        } // end while
+
+        return null;
+    }
+
+    /**
+     * Get the ICON_ID data object in confirmation phase data object.
+     *
+     * @param list List of ComprehensionTlv
+     * @param alpha1Index The index of ALPHA_ID data object of confirmation
+     *            phase
+     * @param alpha2Index The index of ALPHA_ID data object of call phase
+     * @return ICON_ID data object.
+     */
+    private ComprehensionTlv getConfirmationIconId(final List<ComprehensionTlv> list,
+            final int alpha1Index,
+            final int alpha2Index) {
+        if (-1 == alpha1Index) {
+            return null;
+        }
+
+        int iconIndex = 0;
+
+        ComprehensionTlv temp = null;
+        Iterator<ComprehensionTlv> iter = list.iterator();
+        while (iter.hasNext()) {
+            temp = iter.next();
+            if (temp.getTag() == ComprehensionTlvTag.ICON_ID.value()
+                    && (-1 == alpha2Index || iconIndex < alpha2Index)) {
+                return temp;
+            }
+            ++iconIndex;
+        } // end while
+
+        return null;
+    }
+
+    /**
+     * Get the ICON_ID data object in call phase data object.
+     *
+     * @param list List of ComprehensionTlv
+     * @param alpha2Index The index of ALPHA_ID data object of call phase
+     * @return ICON_ID data object.
+     */
+    private ComprehensionTlv getCallingIconId(final List<ComprehensionTlv> list,
+            final int alpha2Index) {
+        if (-1 == alpha2Index) {
+            return null;
+        }
+
+        int iconIndex = 0;
+
+        ComprehensionTlv temp = null;
+        Iterator<ComprehensionTlv> iter = list.iterator();
+        while (iter.hasNext()) {
+            temp = iter.next();
+            if (temp.getTag() == ComprehensionTlvTag.ICON_ID.value()
+                    && iconIndex > alpha2Index) {
+                return temp;
+            }
+            ++iconIndex;
+        } // end while
+
+        return null;
+    }
+
+    private boolean processBIPClient(CommandDetails cmdDet,
+                                     List<ComprehensionTlv> ctlvs) throws ResultException {
+        AppInterface.CommandType commandType =
+                                    AppInterface.CommandType.fromInt(cmdDet.typeOfCommand);
+        if (commandType != null) {
+            CatLog.d(this, "process "+ commandType.name());
+        }
+
+        TextMessage textMsg = new TextMessage();
+        IconId iconId = null;
+        ComprehensionTlv ctlv = null;
+        boolean has_alpha_id = false;
+
+        // parse alpha identifier
+        ctlv = searchForTag(ComprehensionTlvTag.ALPHA_ID, ctlvs);
+        if (ctlv != null) {
+            textMsg.text = ValueParser.retrieveAlphaId(ctlv);
+            CatLog.d(this, "alpha TLV text=" + textMsg.text);
+            has_alpha_id = true;
+        }
+
+        // parse icon identifier
+        ctlv = searchForTag(ComprehensionTlvTag.ICON_ID, ctlvs);
+        if (ctlv != null) {
+            iconId = ValueParser.retrieveIconId(ctlv);
+            textMsg.iconSelfExplanatory = iconId.selfExplanatory;
+        }
+
+        textMsg.responseNeeded = false;
+        mCmdParams = new BIPClientParams(cmdDet, textMsg, has_alpha_id);
+
+        if (iconId != null) {
+            mIconLoadState = LOAD_SINGLE_ICON;
+            mIconLoader.loadIcon(iconId.recordNumber, obtainMessage(MSG_ID_LOAD_ICON_DONE));
+            return true;
+        }
+        return false;
+    }
+
+    public void dispose() {
+        mIconLoader.dispose();
+        mIconLoader = null;
+        mCmdParams = null;
+        mCaller = null;
+        sInstance = null;
+    }
+}
Index: vendor/branch/5058A_Telcel/frameworks/base/core/java/android/app/ApplicationPackageManager.java
===================================================================
--- vendor/branch/5058A_Telcel/frameworks/base/core/java/android/app/ApplicationPackageManager.java	(revision 0)
+++ vendor/branch/5058A_Telcel/frameworks/base/core/java/android/app/ApplicationPackageManager.java	(revision 4786)
@@ -0,0 +1,2585 @@
+/*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.app;
+
+import android.annotation.DrawableRes;
+import android.annotation.NonNull;
+import android.annotation.Nullable;
+import android.annotation.StringRes;
+import android.annotation.XmlRes;
+import android.app.admin.DevicePolicyManager;
+import android.content.ComponentName;
+import android.content.ContentResolver;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.IntentSender;
+import android.content.pm.ActivityInfo;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.ComponentInfo;
+import android.content.pm.EphemeralApplicationInfo;
+import android.content.pm.FeatureInfo;
+import android.content.pm.IOnPermissionsChangeListener;
+import android.content.pm.IPackageDataObserver;
+import android.content.pm.IPackageDeleteObserver;
+import android.content.pm.IPackageInstallObserver;
+import android.content.pm.IPackageManager;
+import android.content.pm.IPackageMoveObserver;
+import android.content.pm.IPackageStatsObserver;
+import android.content.pm.InstrumentationInfo;
+import android.content.pm.IntentFilterVerificationInfo;
+import android.content.pm.KeySet;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageInstaller;
+import android.content.pm.PackageItemInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ParceledListSlice;
+import android.content.pm.PermissionGroupInfo;
+import android.content.pm.PermissionInfo;
+import android.content.pm.ProviderInfo;
+import android.content.pm.ResolveInfo;
+import android.content.pm.ServiceInfo;
+import android.content.pm.UserInfo;
+import android.content.pm.VerifierDeviceIdentity;
+import android.content.res.Resources;
+import android.content.res.XmlResourceParser;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Rect;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.os.Process;
+import android.os.RemoteException;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.os.storage.StorageManager;
+import android.os.storage.VolumeInfo;
+import android.provider.Settings;
+import android.util.ArrayMap;
+import android.util.Log;
+import android.view.Display;
+
+import dalvik.system.VMRuntime;
+
+import com.android.internal.annotations.GuardedBy;
+import com.android.internal.os.SomeArgs;
+import com.android.internal.util.Preconditions;
+import com.android.internal.util.UserIcons;
+import libcore.util.EmptyArray;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import com.android.internal.telephony.TelephonyProperties;
+import android.telephony.SubscriptionManager;
+
+/** @hide */
+public class ApplicationPackageManager extends PackageManager {
+    private static final String TAG = "ApplicationPackageManager";
+    private final static boolean DEBUG_ICONS = false;
+
+    private static final int DEFAULT_EPHEMERAL_COOKIE_MAX_SIZE_BYTES = 16384; // 16KB
+
+    // Default flags to use with PackageManager when no flags are given.
+    private final static int sDefaultFlags = PackageManager.GET_SHARED_LIBRARY_FILES;
+
+    private final Object mLock = new Object();
+
+    @GuardedBy("mLock")
+    private UserManager mUserManager;
+    @GuardedBy("mLock")
+    private PackageInstaller mInstaller;
+
+    @GuardedBy("mDelegates")
+    private final ArrayList<MoveCallbackDelegate> mDelegates = new ArrayList<>();
+
+    @GuardedBy("mLock")
+    private String mPermissionsControllerPackageName;
+
+    UserManager getUserManager() {
+        synchronized (mLock) {
+            if (mUserManager == null) {
+                mUserManager = UserManager.get(mContext);
+            }
+            return mUserManager;
+        }
+    }
+
+    @Override
+    public PackageInfo getPackageInfo(String packageName, int flags)
+            throws NameNotFoundException {
+        return getPackageInfoAsUser(packageName, flags, mContext.getUserId());
+    }
+
+    @Override
+    public PackageInfo getPackageInfoAsUser(String packageName, int flags, int userId)
+            throws NameNotFoundException {
+        try {
+            PackageInfo pi = mPM.getPackageInfo(packageName, flags, userId);
+            if (pi != null) {
+                return pi;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(packageName);
+    }
+
+    @Override
+    public String[] currentToCanonicalPackageNames(String[] names) {
+        try {
+            return mPM.currentToCanonicalPackageNames(names);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public String[] canonicalToCurrentPackageNames(String[] names) {
+        try {
+            return mPM.canonicalToCurrentPackageNames(names);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public Intent getLaunchIntentForPackage(String packageName) {
+        // First see if the package has an INFO activity; the existence of
+        // such an activity is implied to be the desired front-door for the
+        // overall package (such as if it has multiple launcher entries).
+        Intent intentToResolve = new Intent(Intent.ACTION_MAIN);
+        intentToResolve.addCategory(Intent.CATEGORY_INFO);
+        intentToResolve.setPackage(packageName);
+        List<ResolveInfo> ris = queryIntentActivities(intentToResolve, 0);
+
+        // Otherwise, try to find a main launcher activity.
+        if (ris == null || ris.size() <= 0) {
+            // reuse the intent instance
+            intentToResolve.removeCategory(Intent.CATEGORY_INFO);
+            intentToResolve.addCategory(Intent.CATEGORY_LAUNCHER);
+            intentToResolve.setPackage(packageName);
+            ris = queryIntentActivities(intentToResolve, 0);
+        }
+        if (ris == null || ris.size() <= 0) {
+            return null;
+        }
+        Intent intent = new Intent(intentToResolve);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        intent.setClassName(ris.get(0).activityInfo.packageName,
+                ris.get(0).activityInfo.name);
+        return intent;
+    }
+
+    @Override
+    public Intent getLeanbackLaunchIntentForPackage(String packageName) {
+        // Try to find a main leanback_launcher activity.
+        Intent intentToResolve = new Intent(Intent.ACTION_MAIN);
+        intentToResolve.addCategory(Intent.CATEGORY_LEANBACK_LAUNCHER);
+        intentToResolve.setPackage(packageName);
+        List<ResolveInfo> ris = queryIntentActivities(intentToResolve, 0);
+
+        if (ris == null || ris.size() <= 0) {
+            return null;
+        }
+        Intent intent = new Intent(intentToResolve);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        intent.setClassName(ris.get(0).activityInfo.packageName,
+                ris.get(0).activityInfo.name);
+        return intent;
+    }
+
+    @Override
+    public int[] getPackageGids(String packageName) throws NameNotFoundException {
+        return getPackageGids(packageName, 0);
+    }
+
+    @Override
+    public int[] getPackageGids(String packageName, int flags)
+            throws NameNotFoundException {
+        try {
+            int[] gids = mPM.getPackageGids(packageName, flags, mContext.getUserId());
+            if (gids != null) {
+                return gids;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(packageName);
+    }
+
+    @Override
+    public int getPackageUid(String packageName, int flags) throws NameNotFoundException {
+        return getPackageUidAsUser(packageName, flags, mContext.getUserId());
+    }
+
+    @Override
+    public int getPackageUidAsUser(String packageName, int userId) throws NameNotFoundException {
+        return getPackageUidAsUser(packageName, 0, userId);
+    }
+
+    @Override
+    public int getPackageUidAsUser(String packageName, int flags, int userId)
+            throws NameNotFoundException {
+        try {
+            int uid = mPM.getPackageUid(packageName, flags, userId);
+            if (uid >= 0) {
+                return uid;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(packageName);
+    }
+
+    @Override
+    public PermissionInfo getPermissionInfo(String name, int flags)
+            throws NameNotFoundException {
+        try {
+            PermissionInfo pi = mPM.getPermissionInfo(name, flags);
+            if (pi != null) {
+                return pi;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(name);
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<PermissionInfo> queryPermissionsByGroup(String group, int flags)
+            throws NameNotFoundException {
+        try {
+            ParceledListSlice<PermissionInfo> parceledList =
+                    mPM.queryPermissionsByGroup(group, flags);
+            if (parceledList != null) {
+                List<PermissionInfo> pi = parceledList.getList();
+                if (pi != null) {
+                    return pi;
+                }
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(group);
+    }
+
+    @Override
+    public PermissionGroupInfo getPermissionGroupInfo(String name,
+            int flags) throws NameNotFoundException {
+        try {
+            PermissionGroupInfo pgi = mPM.getPermissionGroupInfo(name, flags);
+            if (pgi != null) {
+                return pgi;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(name);
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<PermissionGroupInfo> getAllPermissionGroups(int flags) {
+        try {
+            ParceledListSlice<PermissionGroupInfo> parceledList =
+                    mPM.getAllPermissionGroups(flags);
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public ApplicationInfo getApplicationInfo(String packageName, int flags)
+            throws NameNotFoundException {
+        return getApplicationInfoAsUser(packageName, flags, mContext.getUserId());
+    }
+
+    @Override
+    public ApplicationInfo getApplicationInfoAsUser(String packageName, int flags, int userId)
+            throws NameNotFoundException {
+        try {
+            ApplicationInfo ai = mPM.getApplicationInfo(packageName, flags, userId);
+            if (ai != null) {
+                // This is a temporary hack. Callers must use
+                // createPackageContext(packageName).getApplicationInfo() to
+                // get the right paths.
+                return maybeAdjustApplicationInfo(ai);
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(packageName);
+    }
+
+    private static ApplicationInfo maybeAdjustApplicationInfo(ApplicationInfo info) {
+        // If we're dealing with a multi-arch application that has both
+        // 32 and 64 bit shared libraries, we might need to choose the secondary
+        // depending on what the current runtime's instruction set is.
+        if (info.primaryCpuAbi != null && info.secondaryCpuAbi != null) {
+            final String runtimeIsa = VMRuntime.getRuntime().vmInstructionSet();
+
+            // Get the instruction set that the libraries of secondary Abi is supported.
+            // In presence of a native bridge this might be different than the one secondary Abi used.
+            String secondaryIsa = VMRuntime.getInstructionSet(info.secondaryCpuAbi);
+            final String secondaryDexCodeIsa = SystemProperties.get("ro.dalvik.vm.isa." + secondaryIsa);
+            secondaryIsa = secondaryDexCodeIsa.isEmpty() ? secondaryIsa : secondaryDexCodeIsa;
+
+            // If the runtimeIsa is the same as the primary isa, then we do nothing.
+            // Everything will be set up correctly because info.nativeLibraryDir will
+            // correspond to the right ISA.
+            if (runtimeIsa.equals(secondaryIsa)) {
+                ApplicationInfo modified = new ApplicationInfo(info);
+                modified.nativeLibraryDir = info.secondaryNativeLibraryDir;
+                return modified;
+            }
+        }
+        return info;
+    }
+
+    @Override
+    public ActivityInfo getActivityInfo(ComponentName className, int flags)
+            throws NameNotFoundException {
+        try {
+            ActivityInfo ai = mPM.getActivityInfo(className, flags, mContext.getUserId());
+            if (ai != null) {
+                return ai;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(className.toString());
+    }
+
+    @Override
+    public ActivityInfo getReceiverInfo(ComponentName className, int flags)
+            throws NameNotFoundException {
+        try {
+            ActivityInfo ai = mPM.getReceiverInfo(className, flags, mContext.getUserId());
+            if (ai != null) {
+                return ai;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(className.toString());
+    }
+
+    @Override
+    public ServiceInfo getServiceInfo(ComponentName className, int flags)
+            throws NameNotFoundException {
+        try {
+            ServiceInfo si = mPM.getServiceInfo(className, flags, mContext.getUserId());
+            if (si != null) {
+                return si;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(className.toString());
+    }
+
+    @Override
+    public ProviderInfo getProviderInfo(ComponentName className, int flags)
+            throws NameNotFoundException {
+        try {
+            ProviderInfo pi = mPM.getProviderInfo(className, flags, mContext.getUserId());
+            if (pi != null) {
+                return pi;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(className.toString());
+    }
+
+    @Override
+    public String[] getSystemSharedLibraryNames() {
+        try {
+            return mPM.getSystemSharedLibraryNames();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /** @hide */
+    @Override
+    public @NonNull String getServicesSystemSharedLibraryPackageName() {
+        try {
+            return mPM.getServicesSystemSharedLibraryPackageName();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /**
+     * @hide
+     */
+    public @NonNull String getSharedSystemSharedLibraryPackageName() {
+        try {
+            return mPM.getSharedSystemSharedLibraryPackageName();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public FeatureInfo[] getSystemAvailableFeatures() {
+        try {
+            ParceledListSlice<FeatureInfo> parceledList =
+                    mPM.getSystemAvailableFeatures();
+            if (parceledList == null) {
+                return new FeatureInfo[0];
+            }
+            final List<FeatureInfo> list = parceledList.getList();
+            final FeatureInfo[] res = new FeatureInfo[list.size()];
+            for (int i = 0; i < res.length; i++) {
+                res[i] = list.get(i);
+            }
+            return res;
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public boolean hasSystemFeature(String name) {
+        return hasSystemFeature(name, 0);
+    }
+
+    @Override
+    public boolean hasSystemFeature(String name, int version) {
+        try {
+            return mPM.hasSystemFeature(name, version);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int checkPermission(String permName, String pkgName) {
+        try {
+            return mPM.checkPermission(permName, pkgName, mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public boolean isPermissionRevokedByPolicy(String permName, String pkgName) {
+        try {
+            return mPM.isPermissionRevokedByPolicy(permName, pkgName, mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /**
+     * @hide
+     */
+    @Override
+    public String getPermissionControllerPackageName() {
+        synchronized (mLock) {
+            if (mPermissionsControllerPackageName == null) {
+                try {
+                    mPermissionsControllerPackageName = mPM.getPermissionControllerPackageName();
+                } catch (RemoteException e) {
+                    throw e.rethrowFromSystemServer();
+                }
+            }
+            return mPermissionsControllerPackageName;
+        }
+    }
+
+    @Override
+    public boolean addPermission(PermissionInfo info) {
+        try {
+            return mPM.addPermission(info);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public boolean addPermissionAsync(PermissionInfo info) {
+        try {
+            return mPM.addPermissionAsync(info);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void removePermission(String name) {
+        try {
+            mPM.removePermission(name);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void grantRuntimePermission(String packageName, String permissionName,
+            UserHandle user) {
+        try {
+            mPM.grantRuntimePermission(packageName, permissionName, user.getIdentifier());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void revokeRuntimePermission(String packageName, String permissionName,
+            UserHandle user) {
+        try {
+            mPM.revokeRuntimePermission(packageName, permissionName, user.getIdentifier());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int getPermissionFlags(String permissionName, String packageName, UserHandle user) {
+        try {
+            return mPM.getPermissionFlags(permissionName, packageName, user.getIdentifier());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void updatePermissionFlags(String permissionName, String packageName,
+            int flagMask, int flagValues, UserHandle user) {
+        try {
+            mPM.updatePermissionFlags(permissionName, packageName, flagMask,
+                    flagValues, user.getIdentifier());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public boolean shouldShowRequestPermissionRationale(String permission) {
+        try {
+            return mPM.shouldShowRequestPermissionRationale(permission,
+                    mContext.getPackageName(), mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int checkSignatures(String pkg1, String pkg2) {
+        try {
+            return mPM.checkSignatures(pkg1, pkg2);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int checkSignatures(int uid1, int uid2) {
+        try {
+            return mPM.checkUidSignatures(uid1, uid2);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public String[] getPackagesForUid(int uid) {
+        try {
+            return mPM.getPackagesForUid(uid);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public String getNameForUid(int uid) {
+        try {
+            return mPM.getNameForUid(uid);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int getUidForSharedUser(String sharedUserName)
+            throws NameNotFoundException {
+        try {
+            int uid = mPM.getUidForSharedUser(sharedUserName);
+            if(uid != -1) {
+                return uid;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+        throw new NameNotFoundException("No shared userid for user:"+sharedUserName);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public List<PackageInfo> getInstalledPackages(int flags) {
+        return getInstalledPackagesAsUser(flags, mContext.getUserId());
+    }
+
+    /** @hide */
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<PackageInfo> getInstalledPackagesAsUser(int flags, int userId) {
+        try {
+            ParceledListSlice<PackageInfo> parceledList =
+                    mPM.getInstalledPackages(flags, userId);
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public List<PackageInfo> getPackagesHoldingPermissions(
+            String[] permissions, int flags) {
+        final int userId = mContext.getUserId();
+        try {
+            ParceledListSlice<PackageInfo> parceledList =
+                    mPM.getPackagesHoldingPermissions(permissions, flags, userId);
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public List<ApplicationInfo> getInstalledApplications(int flags) {
+        final int userId = mContext.getUserId();
+        try {
+            ParceledListSlice<ApplicationInfo> parceledList =
+                    mPM.getInstalledApplications(flags, userId);
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /** @hide */
+    @SuppressWarnings("unchecked")
+    @Override
+    public List<EphemeralApplicationInfo> getEphemeralApplications() {
+        try {
+            ParceledListSlice<EphemeralApplicationInfo> slice =
+                    mPM.getEphemeralApplications(mContext.getUserId());
+            if (slice != null) {
+                return slice.getList();
+            }
+            return Collections.emptyList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /** @hide */
+    @Override
+    public Drawable getEphemeralApplicationIcon(String packageName) {
+        try {
+            Bitmap bitmap = mPM.getEphemeralApplicationIcon(
+                    packageName, mContext.getUserId());
+            if (bitmap != null) {
+                return new BitmapDrawable(null, bitmap);
+            }
+            return null;
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public boolean isEphemeralApplication() {
+        try {
+            return mPM.isEphemeralApplication(
+                    mContext.getPackageName(), mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int getEphemeralCookieMaxSizeBytes() {
+        return Settings.Global.getInt(mContext.getContentResolver(),
+                Settings.Global.EPHEMERAL_COOKIE_MAX_SIZE_BYTES,
+                DEFAULT_EPHEMERAL_COOKIE_MAX_SIZE_BYTES);
+    }
+
+    @Override
+    public @NonNull byte[] getEphemeralCookie() {
+        try {
+            final byte[] cookie = mPM.getEphemeralApplicationCookie(
+                    mContext.getPackageName(), mContext.getUserId());
+            if (cookie != null) {
+                return cookie;
+            } else {
+                return EmptyArray.BYTE;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public boolean setEphemeralCookie(@NonNull  byte[] cookie) {
+        try {
+            return mPM.setEphemeralApplicationCookie(
+                    mContext.getPackageName(), cookie, mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public ResolveInfo resolveActivity(Intent intent, int flags) {
+        return resolveActivityAsUser(intent, flags, mContext.getUserId());
+    }
+
+    @Override
+    public ResolveInfo resolveActivityAsUser(Intent intent, int flags, int userId) {
+        try {
+            return mPM.resolveIntent(
+                intent,
+                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
+                flags,
+                userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public List<ResolveInfo> queryIntentActivities(Intent intent,
+                                                   int flags) {
+        return queryIntentActivitiesAsUser(intent, flags, mContext.getUserId());
+    }
+
+    /** @hide Same as above but for a specific user */
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<ResolveInfo> queryIntentActivitiesAsUser(Intent intent,
+            int flags, int userId) {
+        try {
+            ParceledListSlice<ResolveInfo> parceledList =
+                    mPM.queryIntentActivities(intent,
+                            intent.resolveTypeIfNeeded(mContext.getContentResolver()),
+                            flags, userId);
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<ResolveInfo> queryIntentActivityOptions(
+        ComponentName caller, Intent[] specifics, Intent intent,
+        int flags) {
+        final ContentResolver resolver = mContext.getContentResolver();
+
+        String[] specificTypes = null;
+        if (specifics != null) {
+            final int N = specifics.length;
+            for (int i=0; i<N; i++) {
+                Intent sp = specifics[i];
+                if (sp != null) {
+                    String t = sp.resolveTypeIfNeeded(resolver);
+                    if (t != null) {
+                        if (specificTypes == null) {
+                            specificTypes = new String[N];
+                        }
+                        specificTypes[i] = t;
+                    }
+                }
+            }
+        }
+
+        try {
+            ParceledListSlice<ResolveInfo> parceledList =
+                    mPM.queryIntentActivityOptions(caller, specifics, specificTypes, intent,
+                    intent.resolveTypeIfNeeded(resolver), flags, mContext.getUserId());
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /**
+     * @hide
+     */
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<ResolveInfo> queryBroadcastReceiversAsUser(Intent intent, int flags, int userId) {
+        try {
+            ParceledListSlice<ResolveInfo> parceledList =
+                    mPM.queryIntentReceivers(intent,
+                            intent.resolveTypeIfNeeded(mContext.getContentResolver()),
+                            flags,  userId);
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public List<ResolveInfo> queryBroadcastReceivers(Intent intent, int flags) {
+        return queryBroadcastReceiversAsUser(intent, flags, mContext.getUserId());
+    }
+
+    @Override
+    public ResolveInfo resolveService(Intent intent, int flags) {
+        try {
+            return mPM.resolveService(
+                intent,
+                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
+                flags,
+                mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<ResolveInfo> queryIntentServicesAsUser(Intent intent, int flags, int userId) {
+        try {
+            ParceledListSlice<ResolveInfo> parceledList =
+                    mPM.queryIntentServices(intent,
+                    intent.resolveTypeIfNeeded(mContext.getContentResolver()),
+                    flags, userId);
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public List<ResolveInfo> queryIntentServices(Intent intent, int flags) {
+        return queryIntentServicesAsUser(intent, flags, mContext.getUserId());
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<ResolveInfo> queryIntentContentProvidersAsUser(
+            Intent intent, int flags, int userId) {
+        try {
+            ParceledListSlice<ResolveInfo> parceledList =
+                    mPM.queryIntentContentProviders(intent,
+                            intent.resolveTypeIfNeeded(mContext.getContentResolver()),
+                            flags, userId);
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public List<ResolveInfo> queryIntentContentProviders(Intent intent, int flags) {
+        return queryIntentContentProvidersAsUser(intent, flags, mContext.getUserId());
+    }
+
+    @Override
+    public ProviderInfo resolveContentProvider(String name, int flags) {
+        return resolveContentProviderAsUser(name, flags, mContext.getUserId());
+    }
+
+    /** @hide **/
+    @Override
+    public ProviderInfo resolveContentProviderAsUser(String name, int flags, int userId) {
+        try {
+            return mPM.resolveContentProvider(name, flags, userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<ProviderInfo> queryContentProviders(String processName,
+            int uid, int flags) {
+        try {
+            ParceledListSlice<ProviderInfo> slice =
+                    mPM.queryContentProviders(processName, uid, flags);
+            return slice != null ? slice.getList() : Collections.<ProviderInfo>emptyList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public InstrumentationInfo getInstrumentationInfo(
+        ComponentName className, int flags)
+            throws NameNotFoundException {
+        try {
+            InstrumentationInfo ii = mPM.getInstrumentationInfo(
+                className, flags);
+            if (ii != null) {
+                return ii;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        throw new NameNotFoundException(className.toString());
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<InstrumentationInfo> queryInstrumentation(
+        String targetPackage, int flags) {
+        try {
+            ParceledListSlice<InstrumentationInfo> parceledList =
+                    mPM.queryInstrumentation(targetPackage, flags);
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Nullable
+    @Override
+    public Drawable getDrawable(String packageName, @DrawableRes int resId,
+            @Nullable ApplicationInfo appInfo) {
+        final ResourceName name = new ResourceName(packageName, resId);
+        final Drawable cachedIcon = getCachedIcon(name);
+        if (cachedIcon != null) {
+            return cachedIcon;
+        }
+
+        if (appInfo == null) {
+            try {
+                appInfo = getApplicationInfo(packageName, sDefaultFlags);
+            } catch (NameNotFoundException e) {
+                return null;
+            }
+        }
+
+        if (resId != 0) {
+            try {
+                final Resources r = getResourcesForApplication(appInfo);
+                final Drawable dr = r.getDrawable(resId, null);
+                if (dr != null) {
+                    putCachedIcon(name, dr);
+                }
+
+                if (false) {
+                    RuntimeException e = new RuntimeException("here");
+                    e.fillInStackTrace();
+                    Log.w(TAG, "Getting drawable 0x" + Integer.toHexString(resId)
+                                    + " from package " + packageName
+                                    + ": app scale=" + r.getCompatibilityInfo().applicationScale
+                                    + ", caller scale=" + mContext.getResources()
+                                    .getCompatibilityInfo().applicationScale,
+                            e);
+                }
+                if (DEBUG_ICONS) {
+                    Log.v(TAG, "Getting drawable 0x"
+                            + Integer.toHexString(resId) + " from " + r
+                            + ": " + dr);
+                }
+                return dr;
+            } catch (NameNotFoundException e) {
+                Log.w("PackageManager", "Failure retrieving resources for "
+                        + appInfo.packageName);
+            } catch (Resources.NotFoundException e) {
+                Log.w("PackageManager", "Failure retrieving resources for "
+                        + appInfo.packageName + ": " + e.getMessage());
+            } catch (Exception e) {
+                // If an exception was thrown, fall through to return
+                // default icon.
+                Log.w("PackageManager", "Failure retrieving icon 0x"
+                        + Integer.toHexString(resId) + " in package "
+                        + packageName, e);
+            }
+        }
+
+        return null;
+    }
+
+    @Override public Drawable getActivityIcon(ComponentName activityName)
+            throws NameNotFoundException {
+        return getActivityInfo(activityName, sDefaultFlags).loadIcon(this);
+    }
+
+    @Override public Drawable getActivityIcon(Intent intent)
+            throws NameNotFoundException {
+        if (intent.getComponent() != null) {
+            return getActivityIcon(intent.getComponent());
+        }
+
+        ResolveInfo info = resolveActivity(
+            intent, PackageManager.MATCH_DEFAULT_ONLY);
+        if (info != null) {
+            return info.activityInfo.loadIcon(this);
+        }
+
+        throw new NameNotFoundException(intent.toUri(0));
+    }
+
+    @Override public Drawable getDefaultActivityIcon() {
+        return Resources.getSystem().getDrawable(
+            com.android.internal.R.drawable.sym_def_app_icon);
+    }
+
+    @Override public Drawable getApplicationIcon(ApplicationInfo info) {
+        return info.loadIcon(this);
+    }
+
+    @Override public Drawable getApplicationIcon(String packageName)
+            throws NameNotFoundException {
+        return getApplicationIcon(getApplicationInfo(packageName, sDefaultFlags));
+    }
+
+    @Override
+    public Drawable getActivityBanner(ComponentName activityName)
+            throws NameNotFoundException {
+        return getActivityInfo(activityName, sDefaultFlags).loadBanner(this);
+    }
+
+    @Override
+    public Drawable getActivityBanner(Intent intent)
+            throws NameNotFoundException {
+        if (intent.getComponent() != null) {
+            return getActivityBanner(intent.getComponent());
+        }
+
+        ResolveInfo info = resolveActivity(
+                intent, PackageManager.MATCH_DEFAULT_ONLY);
+        if (info != null) {
+            return info.activityInfo.loadBanner(this);
+        }
+
+        throw new NameNotFoundException(intent.toUri(0));
+    }
+
+    @Override
+    public Drawable getApplicationBanner(ApplicationInfo info) {
+        return info.loadBanner(this);
+    }
+
+    @Override
+    public Drawable getApplicationBanner(String packageName)
+            throws NameNotFoundException {
+        return getApplicationBanner(getApplicationInfo(packageName, sDefaultFlags));
+    }
+
+    @Override
+    public Drawable getActivityLogo(ComponentName activityName)
+            throws NameNotFoundException {
+        return getActivityInfo(activityName, sDefaultFlags).loadLogo(this);
+    }
+
+    @Override
+    public Drawable getActivityLogo(Intent intent)
+            throws NameNotFoundException {
+        if (intent.getComponent() != null) {
+            return getActivityLogo(intent.getComponent());
+        }
+
+        ResolveInfo info = resolveActivity(
+            intent, PackageManager.MATCH_DEFAULT_ONLY);
+        if (info != null) {
+            return info.activityInfo.loadLogo(this);
+        }
+
+        throw new NameNotFoundException(intent.toUri(0));
+    }
+
+    @Override
+    public Drawable getApplicationLogo(ApplicationInfo info) {
+        return info.loadLogo(this);
+    }
+
+    @Override
+    public Drawable getApplicationLogo(String packageName)
+            throws NameNotFoundException {
+        return getApplicationLogo(getApplicationInfo(packageName, sDefaultFlags));
+    }
+
+    @Override
+    public Drawable getManagedUserBadgedDrawable(Drawable drawable, Rect badgeLocation,
+            int badgeDensity) {
+        Drawable badgeDrawable = getDrawableForDensity(
+            com.android.internal.R.drawable.ic_corp_badge, badgeDensity);
+        return getBadgedDrawable(drawable, badgeDrawable, badgeLocation, true);
+    }
+
+    @Override
+    public Drawable getUserBadgedIcon(Drawable icon, UserHandle user) {
+        final int badgeResId = getBadgeResIdForUser(user.getIdentifier());
+        if (badgeResId == 0) {
+            return icon;
+        }
+        Drawable badgeIcon = getDrawable("system", badgeResId, null);
+        return getBadgedDrawable(icon, badgeIcon, null, true);
+    }
+
+    @Override
+    public Drawable getUserBadgedDrawableForDensity(Drawable drawable, UserHandle user,
+            Rect badgeLocation, int badgeDensity) {
+        Drawable badgeDrawable = getUserBadgeForDensity(user, badgeDensity);
+        if (badgeDrawable == null) {
+            return drawable;
+        }
+        return getBadgedDrawable(drawable, badgeDrawable, badgeLocation, true);
+    }
+
+    @Override
+    public Drawable getUserBadgeForDensity(UserHandle user, int density) {
+        return getManagedProfileIconForDensity(user, com.android.internal.R.drawable.ic_corp_badge,
+                density);
+    }
+
+    @Override
+    public Drawable getUserBadgeForDensityNoBackground(UserHandle user, int density) {
+        return getManagedProfileIconForDensity(user,
+                com.android.internal.R.drawable.ic_corp_badge_no_background, density);
+    }
+
+    private Drawable getDrawableForDensity(int drawableId, int density) {
+        if (density <= 0) {
+            density = mContext.getResources().getDisplayMetrics().densityDpi;
+        }
+        return Resources.getSystem().getDrawableForDensity(drawableId, density);
+    }
+
+    private Drawable getManagedProfileIconForDensity(UserHandle user, int drawableId, int density) {
+        if (isManagedProfile(user.getIdentifier())) {
+            return getDrawableForDensity(drawableId, density);
+        }
+        return null;
+    }
+
+    @Override
+    public CharSequence getUserBadgedLabel(CharSequence label, UserHandle user) {
+        if (isManagedProfile(user.getIdentifier())) {
+            return Resources.getSystem().getString(
+                    com.android.internal.R.string.managed_profile_label_badge, label);
+        }
+        return label;
+    }
+
+    @Override
+    public Resources getResourcesForActivity(ComponentName activityName)
+            throws NameNotFoundException {
+        return getResourcesForApplication(
+            getActivityInfo(activityName, sDefaultFlags).applicationInfo);
+    }
+
+    @Override
+    public Resources getResourcesForApplication(@NonNull ApplicationInfo app)
+            throws NameNotFoundException {
+        if (app.packageName.equals("system")) {
+            return mContext.mMainThread.getSystemContext().getResources();
+        }
+        final boolean sameUid = (app.uid == Process.myUid());
+        final Resources r = mContext.mMainThread.getTopLevelResources(
+                    sameUid ? app.sourceDir : app.publicSourceDir,
+                    sameUid ? app.splitSourceDirs : app.splitPublicSourceDirs,
+                    app.resourceDirs, app.sharedLibraryFiles, Display.DEFAULT_DISPLAY,
+                    mContext.mPackageInfo);
+        if (r != null) {
+            return r;
+        }
+        throw new NameNotFoundException("Unable to open " + app.publicSourceDir);
+
+    }
+
+    @Override
+    public Resources getResourcesForApplication(String appPackageName)
+            throws NameNotFoundException {
+        return getResourcesForApplication(
+            getApplicationInfo(appPackageName, sDefaultFlags));
+    }
+
+    /** @hide */
+    @Override
+    public Resources getResourcesForApplicationAsUser(String appPackageName, int userId)
+            throws NameNotFoundException {
+        if (userId < 0) {
+            throw new IllegalArgumentException(
+                    "Call does not support special user #" + userId);
+        }
+        if ("system".equals(appPackageName)) {
+            return mContext.mMainThread.getSystemContext().getResources();
+        }
+        try {
+            ApplicationInfo ai = mPM.getApplicationInfo(appPackageName, sDefaultFlags, userId);
+            if (ai != null) {
+                return getResourcesForApplication(ai);
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+        throw new NameNotFoundException("Package " + appPackageName + " doesn't exist");
+    }
+
+    volatile int mCachedSafeMode = -1;
+
+    @Override
+    public boolean isSafeMode() {
+        try {
+            if (mCachedSafeMode < 0) {
+                mCachedSafeMode = mPM.isSafeMode() ? 1 : 0;
+            }
+            return mCachedSafeMode != 0;
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void addOnPermissionsChangeListener(OnPermissionsChangedListener listener) {
+        synchronized (mPermissionListeners) {
+            if (mPermissionListeners.get(listener) != null) {
+                return;
+            }
+            OnPermissionsChangeListenerDelegate delegate =
+                    new OnPermissionsChangeListenerDelegate(listener, Looper.getMainLooper());
+            try {
+                mPM.addOnPermissionsChangeListener(delegate);
+                mPermissionListeners.put(listener, delegate);
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+        }
+    }
+
+    @Override
+    public void removeOnPermissionsChangeListener(OnPermissionsChangedListener listener) {
+        synchronized (mPermissionListeners) {
+            IOnPermissionsChangeListener delegate = mPermissionListeners.get(listener);
+            if (delegate != null) {
+                try {
+                    mPM.removeOnPermissionsChangeListener(delegate);
+                    mPermissionListeners.remove(listener);
+                } catch (RemoteException e) {
+                    throw e.rethrowFromSystemServer();
+                }
+            }
+        }
+    }
+
+    static void configurationChanged() {
+        synchronized (sSync) {
+            sIconCache.clear();
+            sStringCache.clear();
+        }
+    }
+
+    ApplicationPackageManager(ContextImpl context,
+                              IPackageManager pm) {
+        mContext = context;
+        mPM = pm;
+    }
+
+    @Nullable
+    private Drawable getCachedIcon(@NonNull ResourceName name) {
+        synchronized (sSync) {
+            final WeakReference<Drawable.ConstantState> wr = sIconCache.get(name);
+            if (DEBUG_ICONS) Log.v(TAG, "Get cached weak drawable ref for "
+                                   + name + ": " + wr);
+            if (wr != null) {   // we have the activity
+                final Drawable.ConstantState state = wr.get();
+                if (state != null) {
+                    if (DEBUG_ICONS) {
+                        Log.v(TAG, "Get cached drawable state for " + name + ": " + state);
+                    }
+                    // Note: It's okay here to not use the newDrawable(Resources) variant
+                    //       of the API. The ConstantState comes from a drawable that was
+                    //       originally created by passing the proper app Resources instance
+                    //       which means the state should already contain the proper
+                    //       resources specific information (like density.) See
+                    //       BitmapDrawable.BitmapState for instance.
+                    return state.newDrawable();
+                }
+                // our entry has been purged
+                sIconCache.remove(name);
+            }
+        }
+        return null;
+    }
+
+    private void putCachedIcon(@NonNull ResourceName name, @NonNull Drawable dr) {
+        synchronized (sSync) {
+            sIconCache.put(name, new WeakReference<>(dr.getConstantState()));
+            if (DEBUG_ICONS) Log.v(TAG, "Added cached drawable state for " + name + ": " + dr);
+        }
+    }
+
+    static void handlePackageBroadcast(int cmd, String[] pkgList, boolean hasPkgInfo) {
+        boolean immediateGc = false;
+        if (cmd == IApplicationThread.EXTERNAL_STORAGE_UNAVAILABLE) {
+            immediateGc = true;
+        }
+        if (pkgList != null && (pkgList.length > 0)) {
+            boolean needCleanup = false;
+            for (String ssp : pkgList) {
+                synchronized (sSync) {
+                    for (int i=sIconCache.size()-1; i>=0; i--) {
+                        ResourceName nm = sIconCache.keyAt(i);
+                        if (nm.packageName.equals(ssp)) {
+                            //Log.i(TAG, "Removing cached drawable for " + nm);
+                            sIconCache.removeAt(i);
+                            needCleanup = true;
+                        }
+                    }
+                    for (int i=sStringCache.size()-1; i>=0; i--) {
+                        ResourceName nm = sStringCache.keyAt(i);
+                        if (nm.packageName.equals(ssp)) {
+                            //Log.i(TAG, "Removing cached string for " + nm);
+                            sStringCache.removeAt(i);
+                            needCleanup = true;
+                        }
+                    }
+                }
+            }
+            if (needCleanup || hasPkgInfo) {
+                if (immediateGc) {
+                    // Schedule an immediate gc.
+                    Runtime.getRuntime().gc();
+                } else {
+                    ActivityThread.currentActivityThread().scheduleGcIdler();
+                }
+            }
+        }
+    }
+
+    private static final class ResourceName {
+        final String packageName;
+        final int iconId;
+
+        ResourceName(String _packageName, int _iconId) {
+            packageName = _packageName;
+            iconId = _iconId;
+        }
+
+        ResourceName(ApplicationInfo aInfo, int _iconId) {
+            this(aInfo.packageName, _iconId);
+        }
+
+        ResourceName(ComponentInfo cInfo, int _iconId) {
+            this(cInfo.applicationInfo.packageName, _iconId);
+        }
+
+        ResourceName(ResolveInfo rInfo, int _iconId) {
+            this(rInfo.activityInfo.applicationInfo.packageName, _iconId);
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+
+            ResourceName that = (ResourceName) o;
+
+            if (iconId != that.iconId) return false;
+            return !(packageName != null ?
+                     !packageName.equals(that.packageName) : that.packageName != null);
+
+        }
+
+        @Override
+        public int hashCode() {
+            int result;
+            result = packageName.hashCode();
+            result = 31 * result + iconId;
+            return result;
+        }
+
+        @Override
+        public String toString() {
+            return "{ResourceName " + packageName + " / " + iconId + "}";
+        }
+    }
+
+    private CharSequence getCachedString(ResourceName name) {
+        synchronized (sSync) {
+            WeakReference<CharSequence> wr = sStringCache.get(name);
+            if (wr != null) {   // we have the activity
+                CharSequence cs = wr.get();
+                if (cs != null) {
+                    return cs;
+                }
+                // our entry has been purged
+                sStringCache.remove(name);
+            }
+        }
+        return null;
+    }
+
+    private void putCachedString(ResourceName name, CharSequence cs) {
+        synchronized (sSync) {
+            sStringCache.put(name, new WeakReference<CharSequence>(cs));
+        }
+    }
+
+    @Override
+    public CharSequence getText(String packageName, @StringRes int resid,
+                                ApplicationInfo appInfo) {
+        /*begin-20151020-yangning.hong-add-for-T730276,T730254,T730263,T730245,T742200*/
+        if ("com.android.stk".equals(packageName)) {
+            int def = mContext.getResources().getInteger(com.android.internal.R.integer.def_customized_stk_app_name);
+            Log.d("PackageManager", "def_customized_stk_app_name is " + def);
+
+            /*-begin-20151020-yangning.hong-add-for-T742207-ssv-to-custom-stk-name*/
+            boolean mSsvEnabled = SystemProperties.getBoolean("ro.telcel.enabled", false);
+            if(mSsvEnabled){
+                if (def == 1 || def == 2) {
+                    //If def = 2, so read SATK name from EF_SUME and Set up menu alpha ID firstly.
+                    String title = SystemProperties.get("gsm.stk.perso.app_title");
+                    if (title == null || title.length() <= 0) {
+                        title = mContext.getResources().getString(com.android.internal.R.string.def_stk_name_for_telcel);
+                    }
+                    Log.d(TAG, "ssv version run in customize STK shortcut name = " + title);
+                    if ((title != null) && (title.length() > 0)) {
+                        return title;
+                    }
+                }
+            /*-end-20151020-yangning.hong-add-for-T742207-ssv-to-custom-stk-name*/
+            }else{
+                if (def == 1 || def == 2) {//T730276,T730254,T730263
+                    String title = SystemProperties.get("gsm.stk.perso.app_title");
+                    Log.d(TAG, "run in customize STK shortcut name by reading sim card SUME." + title);
+                    if ((title != null) && (title.length() > 0)) {
+                        return title;
+                    }
+                } else if (def == 3) {//T730245
+                    String[] ideaOperatorNumerics = {"334020", "46001"};
+                    String[] plmns = SystemProperties.get("gsm.sim.operator.numeric", "").split(",");
+                    if(plmns != null && plmns.length > 0){
+                        String operatorNumeric = "";
+                        String operatorNumeric2 = "";
+                        if(plmns.length > 1){
+                            operatorNumeric = plmns[0];
+                            operatorNumeric2 = plmns[1];
+                        }else{
+                            operatorNumeric = plmns[0];
+                        }
+                        Log.d(TAG,"ideaOperatorNumberic:" + operatorNumeric);
+                        Log.d(TAG,"ideaOperatorNumberic2:" + operatorNumeric2);
+                        for (String ideaOperatorNumeric : ideaOperatorNumerics) {
+                            if (operatorNumeric.equals(ideaOperatorNumeric)
+                                    || operatorNumeric2.equals(ideaOperatorNumeric)){
+                                Log.d(TAG, "IDEA_PLMN");
+                                return "SIM Telcel";
+                            }
+                        }
+                    }
+                }else if (def == 4){//T742200
+                    String stkUnicodeTitle = mContext.getResources().getString(com.android.internal.R.string.gsm_stk_title_unicode);
+                    Log.d(TAG,"############Test for TIM card");
+                    if (stkUnicodeTitle != null && stkUnicodeTitle.length() > 0)
+                        return stkUnicodeTitle;
+                }
+            }
+        }
+        /*end-20151020-yangning.hong-add-for-T730276,T730254,T730263,T730245,T742200*/
+
+        ResourceName name = new ResourceName(packageName, resid);
+        if (false) Log.d("PackageManager", "Query text for package: " + packageName
+                        + "resid: " + resid);
+        CharSequence text = getCachedString(name);
+        if (text != null) {
+			if(isSupportedRenameStk()){
+                if(SubscriptionManager.getDefaultSubId() == 0 && PACKAGE_NAME_STK.equals(packageName)){
+                    if(SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA) !=""
+                        && SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA).length() > 1){
+                        String mStkAppName = SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA);
+                        text = (CharSequence)mStkAppName;
+                    }
+                }
+                if(SubscriptionManager.getDefaultSubId() == 1 && PACKAGE_NAME_STK1.equals(packageName)){
+                    if(SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA_2) !=""
+                        && SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA_2).length() > 1){
+                        String mStk1AppName = SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA_2);
+                        text = (CharSequence)mStk1AppName;
+                    }
+                }
+            }
+            return text;
+        }
+        if (appInfo == null) {
+            try {
+                appInfo = getApplicationInfo(packageName, sDefaultFlags);
+            } catch (NameNotFoundException e) {
+                if (false) Log.w("PackageManager", "Cannot find application info for package " + packageName
+                    + "return null text");
+                return null;
+            }
+        }
+        try {
+            Resources r = getResourcesForApplication(appInfo);
+            text = r.getText(resid);
+			if(isSupportedRenameStk()){
+                if(SubscriptionManager.getDefaultSubId() == 0 && PACKAGE_NAME_STK.equals(packageName)){
+                    if(SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA) !=""
+                        && SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA).length() >1){
+                        String mStkAppName = SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA);
+                        text = mStkAppName;
+                    }
+                }
+                if(SubscriptionManager.getDefaultSubId() == 1 && PACKAGE_NAME_STK1.equals(packageName)){
+                    if(SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA_2) !=""
+                        && SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA_2).length() >1){
+                        String mStk1AppName = SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ALPHA_2);
+                        text = mStk1AppName;
+                    }
+                }
+            }
+            putCachedString(name, text);
+            if (false) Log.d("PackageManager", "return text:  " + text + "for package: " + packageName);
+            return text;
+        } catch (NameNotFoundException e) {
+            Log.w("PackageManager", "Failure retrieving resources for "
+                  + appInfo.packageName);
+        } catch (RuntimeException e) {
+            // If an exception was thrown, fall through to return
+            // default icon.
+            Log.w("PackageManager", "Failure retrieving text 0x"
+                  + Integer.toHexString(resid) + " in package "
+                  + packageName, e);
+        }
+        if (false) Log.w("PackageManager", "return null text for package: " + packageName);
+        return null;
+    }
+	
+    private static final String PACKAGE_NAME_STK = "com.android.stk";
+    private static final String PACKAGE_NAME_STK1 = "com.android.stk";
+	
+	private boolean isSupportedRenameStk(){
+        return true;
+    }
+
+    @Override
+    public XmlResourceParser getXml(String packageName, @XmlRes int resid,
+                                    ApplicationInfo appInfo) {
+        if (appInfo == null) {
+            try {
+                appInfo = getApplicationInfo(packageName, sDefaultFlags);
+            } catch (NameNotFoundException e) {
+                return null;
+            }
+        }
+        try {
+            Resources r = getResourcesForApplication(appInfo);
+            return r.getXml(resid);
+        } catch (RuntimeException e) {
+            // If an exception was thrown, fall through to return
+            // default icon.
+            Log.w("PackageManager", "Failure retrieving xml 0x"
+                  + Integer.toHexString(resid) + " in package "
+                  + packageName, e);
+        } catch (NameNotFoundException e) {
+            Log.w("PackageManager", "Failure retrieving resources for "
+                  + appInfo.packageName);
+        }
+        return null;
+    }
+
+    @Override
+    public CharSequence getApplicationLabel(ApplicationInfo info) {
+        return info.loadLabel(this);
+    }
+
+    @Override
+    public void installPackage(Uri packageURI, IPackageInstallObserver observer, int flags,
+                               String installerPackageName) {
+        installCommon(packageURI, new LegacyPackageInstallObserver(observer), flags,
+                installerPackageName, mContext.getUserId());
+    }
+
+    @Override
+    public void installPackage(Uri packageURI, PackageInstallObserver observer,
+            int flags, String installerPackageName) {
+        installCommon(packageURI, observer, flags, installerPackageName, mContext.getUserId());
+    }
+
+    private void installCommon(Uri packageURI,
+            PackageInstallObserver observer, int flags, String installerPackageName,
+            int userId) {
+        if (!"file".equals(packageURI.getScheme())) {
+            throw new UnsupportedOperationException("Only file:// URIs are supported");
+        }
+
+        final String originPath = packageURI.getPath();
+        try {
+            mPM.installPackageAsUser(originPath, observer.getBinder(), flags, installerPackageName,
+                    userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int installExistingPackage(String packageName) throws NameNotFoundException {
+        return installExistingPackageAsUser(packageName, mContext.getUserId());
+    }
+
+    @Override
+    public int installExistingPackageAsUser(String packageName, int userId)
+            throws NameNotFoundException {
+        try {
+            int res = mPM.installExistingPackageAsUser(packageName, userId);
+            if (res == INSTALL_FAILED_INVALID_URI) {
+                throw new NameNotFoundException("Package " + packageName + " doesn't exist");
+            }
+            return res;
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void verifyPendingInstall(int id, int response) {
+        try {
+            mPM.verifyPendingInstall(id, response);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void extendVerificationTimeout(int id, int verificationCodeAtTimeout,
+            long millisecondsToDelay) {
+        try {
+            mPM.extendVerificationTimeout(id, verificationCodeAtTimeout, millisecondsToDelay);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void verifyIntentFilter(int id, int verificationCode, List<String> failedDomains) {
+        try {
+            mPM.verifyIntentFilter(id, verificationCode, failedDomains);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int getIntentVerificationStatusAsUser(String packageName, int userId) {
+        try {
+            return mPM.getIntentVerificationStatus(packageName, userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public boolean updateIntentVerificationStatusAsUser(String packageName, int status, int userId) {
+        try {
+            return mPM.updateIntentVerificationStatus(packageName, status, userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<IntentFilterVerificationInfo> getIntentFilterVerifications(String packageName) {
+        try {
+            ParceledListSlice<IntentFilterVerificationInfo> parceledList =
+                    mPM.getIntentFilterVerifications(packageName);
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public List<IntentFilter> getAllIntentFilters(String packageName) {
+        try {
+            ParceledListSlice<IntentFilter> parceledList =
+                    mPM.getAllIntentFilters(packageName);
+            if (parceledList == null) {
+                return Collections.emptyList();
+            }
+            return parceledList.getList();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public String getDefaultBrowserPackageNameAsUser(int userId) {
+        try {
+            return mPM.getDefaultBrowserPackageName(userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public boolean setDefaultBrowserPackageNameAsUser(String packageName, int userId) {
+        try {
+            return mPM.setDefaultBrowserPackageName(packageName, userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void setInstallerPackageName(String targetPackage,
+            String installerPackageName) {
+        try {
+            mPM.setInstallerPackageName(targetPackage, installerPackageName);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public String getInstallerPackageName(String packageName) {
+        try {
+            return mPM.getInstallerPackageName(packageName);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int getMoveStatus(int moveId) {
+        try {
+            return mPM.getMoveStatus(moveId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void registerMoveCallback(MoveCallback callback, Handler handler) {
+        synchronized (mDelegates) {
+            final MoveCallbackDelegate delegate = new MoveCallbackDelegate(callback,
+                    handler.getLooper());
+            try {
+                mPM.registerMoveCallback(delegate);
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+            mDelegates.add(delegate);
+        }
+    }
+
+    @Override
+    public void unregisterMoveCallback(MoveCallback callback) {
+        synchronized (mDelegates) {
+            for (Iterator<MoveCallbackDelegate> i = mDelegates.iterator(); i.hasNext();) {
+                final MoveCallbackDelegate delegate = i.next();
+                if (delegate.mCallback == callback) {
+                    try {
+                        mPM.unregisterMoveCallback(delegate);
+                    } catch (RemoteException e) {
+                        throw e.rethrowFromSystemServer();
+                    }
+                    i.remove();
+                }
+            }
+        }
+    }
+
+    @Override
+    public int movePackage(String packageName, VolumeInfo vol) {
+        try {
+            final String volumeUuid;
+            if (VolumeInfo.ID_PRIVATE_INTERNAL.equals(vol.id)) {
+                volumeUuid = StorageManager.UUID_PRIVATE_INTERNAL;
+            } else if (vol.isPrimaryPhysical()) {
+                volumeUuid = StorageManager.UUID_PRIMARY_PHYSICAL;
+            } else {
+                volumeUuid = Preconditions.checkNotNull(vol.fsUuid);
+            }
+
+            return mPM.movePackage(packageName, volumeUuid);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public @Nullable VolumeInfo getPackageCurrentVolume(ApplicationInfo app) {
+        final StorageManager storage = mContext.getSystemService(StorageManager.class);
+        if (app.isInternal()) {
+            return storage.findVolumeById(VolumeInfo.ID_PRIVATE_INTERNAL);
+        } else if (app.isExternalAsec()) {
+            return storage.getPrimaryPhysicalVolume();
+        } else {
+            return storage.findVolumeByUuid(app.volumeUuid);
+        }
+    }
+
+    @Override
+    public @NonNull List<VolumeInfo> getPackageCandidateVolumes(ApplicationInfo app) {
+        final StorageManager storage = mContext.getSystemService(StorageManager.class);
+        final VolumeInfo currentVol = getPackageCurrentVolume(app);
+        final List<VolumeInfo> vols = storage.getVolumes();
+        final List<VolumeInfo> candidates = new ArrayList<>();
+        for (VolumeInfo vol : vols) {
+            if (Objects.equals(vol, currentVol) || isPackageCandidateVolume(mContext, app, vol)) {
+                candidates.add(vol);
+            }
+        }
+        return candidates;
+    }
+
+    private boolean isPackageCandidateVolume(
+            ContextImpl context, ApplicationInfo app, VolumeInfo vol) {
+        final boolean forceAllowOnExternal = Settings.Global.getInt(
+                context.getContentResolver(), Settings.Global.FORCE_ALLOW_ON_EXTERNAL, 0) != 0;
+        // Private internal is always an option
+        if (VolumeInfo.ID_PRIVATE_INTERNAL.equals(vol.getId())) {
+            return true;
+        }
+
+        // System apps and apps demanding internal storage can't be moved
+        // anywhere else
+        /// M: add checking isVendorApp for not adding into candidate
+        if (app.isSystemApp() || app.isVendorApp()) {
+            return false;
+        }
+        if (!forceAllowOnExternal
+                && (app.installLocation == PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY
+                        || app.installLocation == PackageInfo.INSTALL_LOCATION_UNSPECIFIED)) {
+            return false;
+        }
+
+        // Gotta be able to write there
+        if (!vol.isMountedWritable()) {
+            return false;
+        }
+
+        // Moving into an ASEC on public primary is only option internal
+        if (vol.isPrimaryPhysical()) {
+            return app.isInternal();
+        }
+
+        // Some apps can't be moved. (e.g. device admins)
+        try {
+            if (mPM.isPackageDeviceAdminOnAnyUser(app.packageName)) {
+                return false;
+            }
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+
+        // Otherwise we can move to any private volume
+        return (vol.getType() == VolumeInfo.TYPE_PRIVATE);
+    }
+
+    @Override
+    public int movePrimaryStorage(VolumeInfo vol) {
+        try {
+            final String volumeUuid;
+            if (VolumeInfo.ID_PRIVATE_INTERNAL.equals(vol.id)) {
+                volumeUuid = StorageManager.UUID_PRIVATE_INTERNAL;
+            } else if (vol.isPrimaryPhysical()) {
+                volumeUuid = StorageManager.UUID_PRIMARY_PHYSICAL;
+            } else {
+                volumeUuid = Preconditions.checkNotNull(vol.fsUuid);
+            }
+
+            return mPM.movePrimaryStorage(volumeUuid);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public @Nullable VolumeInfo getPrimaryStorageCurrentVolume() {
+        final StorageManager storage = mContext.getSystemService(StorageManager.class);
+        final String volumeUuid = storage.getPrimaryStorageUuid();
+        return storage.findVolumeByQualifiedUuid(volumeUuid);
+    }
+
+    @Override
+    public @NonNull List<VolumeInfo> getPrimaryStorageCandidateVolumes() {
+        final StorageManager storage = mContext.getSystemService(StorageManager.class);
+        final VolumeInfo currentVol = getPrimaryStorageCurrentVolume();
+        final List<VolumeInfo> vols = storage.getVolumes();
+        final List<VolumeInfo> candidates = new ArrayList<>();
+        if (Objects.equals(StorageManager.UUID_PRIMARY_PHYSICAL,
+                storage.getPrimaryStorageUuid()) && currentVol != null) {
+            // TODO: support moving primary physical to emulated volume
+            candidates.add(currentVol);
+        } else {
+            for (VolumeInfo vol : vols) {
+                if (Objects.equals(vol, currentVol) || isPrimaryStorageCandidateVolume(vol)) {
+                    candidates.add(vol);
+                }
+            }
+        }
+        return candidates;
+    }
+
+    private static boolean isPrimaryStorageCandidateVolume(VolumeInfo vol) {
+        // Private internal is always an option
+        if (VolumeInfo.ID_PRIVATE_INTERNAL.equals(vol.getId())) {
+            return true;
+        }
+
+        // Gotta be able to write there
+        if (!vol.isMountedWritable()) {
+            return false;
+        }
+
+        // We can move to any private volume
+        return (vol.getType() == VolumeInfo.TYPE_PRIVATE);
+    }
+
+    @Override
+    public void deletePackage(String packageName, IPackageDeleteObserver observer, int flags) {
+        deletePackageAsUser(packageName, observer, flags, mContext.getUserId());
+    }
+
+    @Override
+    public void deletePackageAsUser(String packageName, IPackageDeleteObserver observer, int flags,
+            int userId) {
+        try {
+            mPM.deletePackageAsUser(packageName, observer, userId, flags);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void clearApplicationUserData(String packageName,
+                                         IPackageDataObserver observer) {
+        try {
+            mPM.clearApplicationUserData(packageName, observer, mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+    @Override
+    public void deleteApplicationCacheFiles(String packageName,
+                                            IPackageDataObserver observer) {
+        try {
+            mPM.deleteApplicationCacheFiles(packageName, observer);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void deleteApplicationCacheFilesAsUser(String packageName, int userId,
+            IPackageDataObserver observer) {
+        try {
+            mPM.deleteApplicationCacheFilesAsUser(packageName, userId, observer);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void freeStorageAndNotify(String volumeUuid, long idealStorageSize,
+            IPackageDataObserver observer) {
+        try {
+            mPM.freeStorageAndNotify(volumeUuid, idealStorageSize, observer);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void freeStorage(String volumeUuid, long freeStorageSize, IntentSender pi) {
+        try {
+            mPM.freeStorage(volumeUuid, freeStorageSize, pi);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public String[] setPackagesSuspendedAsUser(String[] packageNames, boolean suspended,
+            int userId) {
+        try {
+            return mPM.setPackagesSuspendedAsUser(packageNames, suspended, userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public boolean isPackageSuspendedForUser(String packageName, int userId) {
+        try {
+            return mPM.isPackageSuspendedForUser(packageName, userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void getPackageSizeInfoAsUser(String packageName, int userHandle,
+            IPackageStatsObserver observer) {
+        try {
+            mPM.getPackageSizeInfo(packageName, userHandle, observer);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void addPackageToPreferred(String packageName) {
+        Log.w(TAG, "addPackageToPreferred() is a no-op");
+    }
+
+    @Override
+    public void removePackageFromPreferred(String packageName) {
+        Log.w(TAG, "removePackageFromPreferred() is a no-op");
+    }
+
+    @Override
+    public List<PackageInfo> getPreferredPackages(int flags) {
+        Log.w(TAG, "getPreferredPackages() is a no-op");
+        return Collections.emptyList();
+    }
+
+    @Override
+    public void addPreferredActivity(IntentFilter filter,
+                                     int match, ComponentName[] set, ComponentName activity) {
+        try {
+            mPM.addPreferredActivity(filter, match, set, activity, mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void addPreferredActivityAsUser(IntentFilter filter, int match,
+            ComponentName[] set, ComponentName activity, int userId) {
+        try {
+            mPM.addPreferredActivity(filter, match, set, activity, userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void replacePreferredActivity(IntentFilter filter,
+                                         int match, ComponentName[] set, ComponentName activity) {
+        try {
+            mPM.replacePreferredActivity(filter, match, set, activity, mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void replacePreferredActivityAsUser(IntentFilter filter,
+                                         int match, ComponentName[] set, ComponentName activity,
+                                         int userId) {
+        try {
+            mPM.replacePreferredActivity(filter, match, set, activity, userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void clearPackagePreferredActivities(String packageName) {
+        try {
+            mPM.clearPackagePreferredActivities(packageName);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int getPreferredActivities(List<IntentFilter> outFilters,
+                                      List<ComponentName> outActivities, String packageName) {
+        try {
+            return mPM.getPreferredActivities(outFilters, outActivities, packageName);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public ComponentName getHomeActivities(List<ResolveInfo> outActivities) {
+        try {
+            return mPM.getHomeActivities(outActivities);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void setComponentEnabledSetting(ComponentName componentName,
+                                           int newState, int flags) {
+        try {
+            mPM.setComponentEnabledSetting(componentName, newState, flags, mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int getComponentEnabledSetting(ComponentName componentName) {
+        try {
+            return mPM.getComponentEnabledSetting(componentName, mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void setApplicationEnabledSetting(String packageName,
+                                             int newState, int flags) {
+        try {
+            mPM.setApplicationEnabledSetting(packageName, newState, flags,
+                    mContext.getUserId(), mContext.getOpPackageName());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public int getApplicationEnabledSetting(String packageName) {
+        try {
+            return mPM.getApplicationEnabledSetting(packageName, mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public void flushPackageRestrictionsAsUser(int userId) {
+        try {
+            mPM.flushPackageRestrictionsAsUser(userId);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /**
+     * M: Add api for check apk signature
+     *
+     * @hide
+     */
+    @Override
+    public int checkAPKSignatures(String pkg) {
+        try {
+            return mPM.checkAPKSignatures(pkg);
+        } catch (RemoteException e) {
+            return PackageInfo.KEY_ERROR;
+              // Should never happen!
+        }
+    }
+
+    @Override
+    public boolean setApplicationHiddenSettingAsUser(String packageName, boolean hidden,
+            UserHandle user) {
+        try {
+            return mPM.setApplicationHiddenSettingAsUser(packageName, hidden,
+                    user.getIdentifier());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public boolean getApplicationHiddenSettingAsUser(String packageName, UserHandle user) {
+        try {
+            return mPM.getApplicationHiddenSettingAsUser(packageName, user.getIdentifier());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /** @hide */
+    @Override
+    public KeySet getKeySetByAlias(String packageName, String alias) {
+        Preconditions.checkNotNull(packageName);
+        Preconditions.checkNotNull(alias);
+        try {
+            return mPM.getKeySetByAlias(packageName, alias);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /** @hide */
+    @Override
+    public KeySet getSigningKeySet(String packageName) {
+        Preconditions.checkNotNull(packageName);
+        try {
+            return mPM.getSigningKeySet(packageName);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /** @hide */
+    @Override
+    public boolean isSignedBy(String packageName, KeySet ks) {
+        Preconditions.checkNotNull(packageName);
+        Preconditions.checkNotNull(ks);
+        try {
+            return mPM.isPackageSignedByKeySet(packageName, ks);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /** @hide */
+    @Override
+    public boolean isSignedByExactly(String packageName, KeySet ks) {
+        Preconditions.checkNotNull(packageName);
+        Preconditions.checkNotNull(ks);
+        try {
+            return mPM.isPackageSignedByKeySetExactly(packageName, ks);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /**
+     * @hide
+     */
+    @Override
+    public VerifierDeviceIdentity getVerifierDeviceIdentity() {
+        try {
+            return mPM.getVerifierDeviceIdentity();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /**
+     * @hide
+     */
+    @Override
+    public boolean isUpgrade() {
+        try {
+            return mPM.isUpgrade();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    @Override
+    public PackageInstaller getPackageInstaller() {
+        synchronized (mLock) {
+            if (mInstaller == null) {
+                try {
+                    mInstaller = new PackageInstaller(mContext, this, mPM.getPackageInstaller(),
+                            mContext.getPackageName(), mContext.getUserId());
+                } catch (RemoteException e) {
+                    throw e.rethrowFromSystemServer();
+                }
+            }
+            return mInstaller;
+        }
+    }
+
+    @Override
+    public boolean isPackageAvailable(String packageName) {
+        try {
+            return mPM.isPackageAvailable(packageName, mContext.getUserId());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /**
+     * @hide
+     */
+    @Override
+    public void addCrossProfileIntentFilter(IntentFilter filter, int sourceUserId, int targetUserId,
+            int flags) {
+        try {
+            mPM.addCrossProfileIntentFilter(filter, mContext.getOpPackageName(),
+                    sourceUserId, targetUserId, flags);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /**
+     * @hide
+     */
+    @Override
+    public void clearCrossProfileIntentFilters(int sourceUserId) {
+        try {
+            mPM.clearCrossProfileIntentFilters(sourceUserId, mContext.getOpPackageName());
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    /**
+     * @hide
+     */
+    public Drawable loadItemIcon(PackageItemInfo itemInfo, ApplicationInfo appInfo) {
+        Drawable dr = loadUnbadgedItemIcon(itemInfo, appInfo);
+        if (itemInfo.showUserIcon != UserHandle.USER_NULL) {
+            return dr;
+        }
+        return getUserBadgedIcon(dr, new UserHandle(mContext.getUserId()));
+    }
+
+    /**
+     * @hide
+     */
+    public Drawable loadUnbadgedItemIcon(PackageItemInfo itemInfo, ApplicationInfo appInfo) {
+        if (itemInfo.showUserIcon != UserHandle.USER_NULL) {
+            Bitmap bitmap = getUserManager().getUserIcon(itemInfo.showUserIcon);
+            if (bitmap == null) {
+                return UserIcons.getDefaultUserIcon(itemInfo.showUserIcon, /* light= */ false);
+            }
+            return new BitmapDrawable(bitmap);
+        }
+        Drawable dr = null;
+        if (itemInfo.packageName != null) {
+            dr = getDrawable(itemInfo.packageName, itemInfo.icon, appInfo);
+        }
+        if (dr == null) {
+            dr = itemInfo.loadDefaultIcon(this);
+        }
+        return dr;
+    }
+
+    private Drawable getBadgedDrawable(Drawable drawable, Drawable badgeDrawable,
+            Rect badgeLocation, boolean tryBadgeInPlace) {
+        final int badgedWidth = drawable.getIntrinsicWidth();
+        final int badgedHeight = drawable.getIntrinsicHeight();
+        final boolean canBadgeInPlace = tryBadgeInPlace
+                && (drawable instanceof BitmapDrawable)
+                && ((BitmapDrawable) drawable).getBitmap().isMutable();
+
+        final Bitmap bitmap;
+        if (canBadgeInPlace) {
+            bitmap = ((BitmapDrawable) drawable).getBitmap();
+        } else {
+            bitmap = Bitmap.createBitmap(badgedWidth, badgedHeight, Bitmap.Config.ARGB_8888);
+        }
+        Canvas canvas = new Canvas(bitmap);
+
+        if (!canBadgeInPlace) {
+            drawable.setBounds(0, 0, badgedWidth, badgedHeight);
+            drawable.draw(canvas);
+        }
+
+        if (badgeLocation != null) {
+            if (badgeLocation.left < 0 || badgeLocation.top < 0
+                    || badgeLocation.width() > badgedWidth || badgeLocation.height() > badgedHeight) {
+                throw new IllegalArgumentException("Badge location " + badgeLocation
+                        + " not in badged drawable bounds "
+                        + new Rect(0, 0, badgedWidth, badgedHeight));
+            }
+            badgeDrawable.setBounds(0, 0, badgeLocation.width(), badgeLocation.height());
+
+            canvas.save();
+            canvas.translate(badgeLocation.left, badgeLocation.top);
+            badgeDrawable.draw(canvas);
+            canvas.restore();
+        } else {
+            badgeDrawable.setBounds(0, 0, badgedWidth, badgedHeight);
+            badgeDrawable.draw(canvas);
+        }
+
+        if (!canBadgeInPlace) {
+            BitmapDrawable mergedDrawable = new BitmapDrawable(mContext.getResources(), bitmap);
+
+            if (drawable instanceof BitmapDrawable) {
+                BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
+                mergedDrawable.setTargetDensity(bitmapDrawable.getBitmap().getDensity());
+            }
+
+            return mergedDrawable;
+        }
+
+        return drawable;
+    }
+
+    private int getBadgeResIdForUser(int userId) {
+        // Return the framework-provided badge.
+        if (isManagedProfile(userId)) {
+            return com.android.internal.R.drawable.ic_corp_icon_badge;
+        }
+        return 0;
+    }
+
+    private boolean isManagedProfile(int userId) {
+        return getUserManager().isManagedProfile(userId);
+    }
+
+    /** {@hide} */
+    private static class MoveCallbackDelegate extends IPackageMoveObserver.Stub implements
+            Handler.Callback {
+        private static final int MSG_CREATED = 1;
+        private static final int MSG_STATUS_CHANGED = 2;
+
+        final MoveCallback mCallback;
+        final Handler mHandler;
+
+        public MoveCallbackDelegate(MoveCallback callback, Looper looper) {
+            mCallback = callback;
+            mHandler = new Handler(looper, this);
+        }
+
+        @Override
+        public boolean handleMessage(Message msg) {
+            switch (msg.what) {
+                case MSG_CREATED: {
+                    final SomeArgs args = (SomeArgs) msg.obj;
+                    mCallback.onCreated(args.argi1, (Bundle) args.arg2);
+                    args.recycle();
+                    return true;
+                }
+                case MSG_STATUS_CHANGED: {
+                    final SomeArgs args = (SomeArgs) msg.obj;
+                    mCallback.onStatusChanged(args.argi1, args.argi2, (long) args.arg3);
+                    args.recycle();
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        @Override
+        public void onCreated(int moveId, Bundle extras) {
+            final SomeArgs args = SomeArgs.obtain();
+            args.argi1 = moveId;
+            args.arg2 = extras;
+            mHandler.obtainMessage(MSG_CREATED, args).sendToTarget();
+        }
+
+        @Override
+        public void onStatusChanged(int moveId, int status, long estMillis) {
+            final SomeArgs args = SomeArgs.obtain();
+            args.argi1 = moveId;
+            args.argi2 = status;
+            args.arg3 = estMillis;
+            mHandler.obtainMessage(MSG_STATUS_CHANGED, args).sendToTarget();
+        }
+    }
+
+    private final ContextImpl mContext;
+    private final IPackageManager mPM;
+
+    private static final Object sSync = new Object();
+    private static ArrayMap<ResourceName, WeakReference<Drawable.ConstantState>> sIconCache
+            = new ArrayMap<ResourceName, WeakReference<Drawable.ConstantState>>();
+    private static ArrayMap<ResourceName, WeakReference<CharSequence>> sStringCache
+            = new ArrayMap<ResourceName, WeakReference<CharSequence>>();
+
+    private final Map<OnPermissionsChangedListener, IOnPermissionsChangeListener>
+            mPermissionListeners = new ArrayMap<>();
+
+    public class OnPermissionsChangeListenerDelegate extends IOnPermissionsChangeListener.Stub
+            implements Handler.Callback{
+        private static final int MSG_PERMISSIONS_CHANGED = 1;
+
+        private final OnPermissionsChangedListener mListener;
+        private final Handler mHandler;
+
+
+        public OnPermissionsChangeListenerDelegate(OnPermissionsChangedListener listener,
+                Looper looper) {
+            mListener = listener;
+            mHandler = new Handler(looper, this);
+        }
+
+        @Override
+        public void onPermissionsChanged(int uid) {
+            mHandler.obtainMessage(MSG_PERMISSIONS_CHANGED, uid, 0).sendToTarget();
+        }
+
+        @Override
+        public boolean handleMessage(Message msg) {
+            switch (msg.what) {
+                case MSG_PERMISSIONS_CHANGED: {
+                    final int uid = msg.arg1;
+                    mListener.onPermissionsChanged(uid);
+                    return true;
+                }
+            }
+            return false;
+        }
+    }
+}
Index: vendor/branch/5058A_Telcel/frameworks/base/core/res/res/values/strings.xml
===================================================================
--- vendor/branch/5058A_Telcel/frameworks/base/core/res/res/values/strings.xml	(revision 4785)
+++ vendor/branch/5058A_Telcel/frameworks/base/core/res/res/values/strings.xml	(revision 4786)
@@ -1,4547 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-/* //device/apps/common/assets/res/any/strings.xml
-**
-** Copyright 2006, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
--->
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <!-- Suffix added to a number to signify size in bytes. -->
-    <string name="byteShort">B</string>
-    <!-- Suffix added to a number to signify size in kilobytes. -->
-    <string name="kilobyteShort">KB</string>
-    <!-- Suffix added to a number to signify size in megabytes. -->
-    <string name="megabyteShort">MB</string>
-    <!-- Suffix added to a number to signify size in gigabytes. -->
-    <string name="gigabyteShort">GB</string>
-    <!-- Suffix added to a number to signify size in terabytes. -->
-    <string name="terabyteShort">TB</string>
-    <!-- Suffix added to a number to signify size in petabytes. -->
-    <string name="petabyteShort">PB</string>
-    <!-- Format string used to add a suffix like "KB" or "MB" to a number
-         to display a size in kilobytes, megabytes, or other size units.
-         Some languages (like French) will want to add a space between
-         the placeholders. -->
-    <string name="fileSizeSuffix"><xliff:g id="number" example="123">%1$s</xliff:g> <xliff:g id="unit" example="KB">%2$s</xliff:g></string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration in days -->
-    <string name="durationDays"><xliff:g id="days">%1$d</xliff:g> days</string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration of one day with hours -->
-    <string name="durationDayHours"><xliff:g id="days">%1$d</xliff:g> day
-            <xliff:g id="hours">%2$d</xliff:g> hrs</string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration of one day with one hours -->
-    <string name="durationDayHour"><xliff:g id="days">%1$d</xliff:g> day
-            <xliff:g id="hours">%2$d</xliff:g> hr</string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration in hours -->
-    <string name="durationHours"><xliff:g id="hours">%1$d</xliff:g> hrs</string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration of one hour with minutes -->
-    <string name="durationHourMinutes"><xliff:g id="hours">%1$d</xliff:g> hr
-            <xliff:g id="minutes">%2$d</xliff:g> mins</string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration of one hour with one minute -->
-    <string name="durationHourMinute"><xliff:g id="hours">%1$d</xliff:g> hr
-            <xliff:g id="minutes">%2$d</xliff:g> min</string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration in minutes -->
-    <string name="durationMinutes"><xliff:g id="minutes">%1$d</xliff:g> mins</string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration of one minute -->
-    <string name="durationMinute"><xliff:g id="minutes">%1$d</xliff:g> min</string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration of one minute with seconds -->
-    <string name="durationMinuteSeconds"><xliff:g id="minutes">%1$d</xliff:g> min
-            <xliff:g id="seconds">%2$d</xliff:g> secs</string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration of one minute with one second -->
-    <string name="durationMinuteSecond"><xliff:g id="minutes">%1$d</xliff:g> min
-            <xliff:g id="seconds">%2$d</xliff:g> sec</string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration in seconds -->
-    <string name="durationSeconds"><xliff:g id="seconds">%1$d</xliff:g> secs</string>
-
-    <!-- [CHAR_LIMIT=10] Suffix added to signify duration of one second -->
-    <string name="durationSecond"><xliff:g id="seconds">%1$d</xliff:g> sec</string>
-
-    <!-- Used in Contacts for a field that has no label and in Note Pad
-         for a note with no name. -->
-    <string name="untitled">&lt;Untitled&gt;</string>
-
-    <!-- How to display the lack of a phone number -->
-    <string name="emptyPhoneNumber">(No phone number)</string>
-
-    <!-- How to display the lack of a name -->
-    <string name="unknownName">Unknown</string>
-
-    <!-- What the UI should display for "voice mail" unless overridden by the SIM-->
-    <string name="defaultVoiceMailAlphaTag">Voicemail</string>
-
-    <!-- What the UI should display for "Msisdn" unless overridden by the SIM-->
-    <string name="defaultMsisdnAlphaTag">MSISDN1</string>
-
-    <!-- For GsmMmiCode.java --> <skip />
-    <!-- Displayed when the user dialed an MMI code whose function
-         could not be performed. This will be displayed in a toast. -->
-    <string name="mmiError">Connection problem or invalid MMI code.</string>
-    <!-- Displayed when the user dialed an MMI code whose function
-         could not be performed because FDN is enabled. This will be displayed in a toast. -->
-    <string name="mmiFdnError">Operation is restricted to fixed dialing numbers only.</string>
-
-    <!-- Displayed when a phone feature such as call barring was activated. -->
-    <string name="serviceEnabled">Service was enabled.</string>
-    <!-- Displayed in front of the list of a set of service classes
-         (voice, data, fax, etc.) that were enabled. -->
-    <string name="serviceEnabledFor">Service was enabled for:</string>
-    <!-- Displayed when a phone feature such as call forwarding was deactivated. -->
-    <string name="serviceDisabled">Service has been disabled.</string>
-    <!-- Displayed when a phone property such as a SIM password was registered. -->
-    <string name="serviceRegistered">Registration was successful.</string>
-    <!-- Displayed when a phone property such as a SIM password was erased. -->
-    <string name="serviceErased">Erasure was successful.</string>
-    <!-- Displayed when a SIM password was entered incorrectly. -->
-    <string name="passwordIncorrect">Incorrect password.</string>
-    <!-- Displayed when a phone feature triggered by an MMI code is complete. -->
-    <string name="mmiComplete">MMI complete.</string>
-    <!-- Displayed when a SIM PIN password is entered incorrectly. -->
-    <string name="badPin">The old PIN you typed isn\'t correct.</string>
-    <!-- Displayed when a SIM PUK password is entered incorrectly. -->
-    <string name="badPuk">The PUK you typed isn\'t correct.</string>
-    <!-- Displayed when SIM PIN passwords are entered inconsistently. -->
-    <string name="mismatchPin">The PINs you typed don\'t match.</string>
-    <!-- Displayed when a SIM PIN password is too long or too short. -->
-    <string name="invalidPin">Type a PIN that is 4 to 8 numbers.</string>
-    <!-- Displayed when a SIM PUK password is too short. -->
-    <string name="invalidPuk">Type a PUK that is 8 numbers or longer.</string>
-    <!-- Displayed to prompt the user to type the PUK password to unlock
-         the SIM card. -->
-    <string name="needPuk">Your SIM card is PUK-locked. Type the PUK code to unlock it.</string>
-    <string name="needPuk2">Type PUK2 to unblock SIM card.</string>
-    <!-- Displayed when user attempts to change SIM PIN1 without enabling PIN1. -->
-    <string name="enablePin">Unsuccessful, enable SIM/RUIM Lock.</string>
-    <!-- Displayed when a SIM PIN/PUK is entered incorrectly. -->
-    <plurals name="pinpuk_attempts">
-        <item quantity="one">You have <xliff:g id="number">%d</xliff:g> remaining attempt before SIM is locked.</item>
-        <item quantity="other">You have <xliff:g id="number">%d</xliff:g> remaining attempts before SIM is locked.</item>
-    </plurals>
-    <!-- Title for the dialog used to display the user's IMEI number [CHAR LIMIT=10] -->
-    <string name="imei">IMEI</string>
-
-    <!-- Title for the dialog used to display the user's MEID number on CDMA network
-         [CHAR LIMIT=10] -->
-    <string name="meid">MEID</string>
-
-    <!-- Displayed as the title for a success/failure report enabling/disabling caller ID. -->
-    <string name="ClipMmi">Incoming Caller ID</string>
-    <!-- Displayed as the title for a success/failure report enabling/disabling caller ID. -->
-    <string name="ClirMmi">Outgoing Caller ID</string>
-    <!-- Displayed as the title for a success/failure report enabling/disabling connected line ID. -->
-    <string name="ColpMmi">Connected Line ID</string>
-    <!-- Displayed as the title for a success/failure report enabling/disabling connected line ID restriction. -->
-    <string name="ColrMmi">Connected Line ID Restriction</string>
-    <!-- Displayed as the title for a success/failure report enabling/disabling call forwarding. -->
-    <string name="CfMmi">Call forwarding</string>
-    <!-- Displayed as the title for a success/failure report enabling/disabling call waiting. -->
-    <string name="CwMmi">Call waiting</string>
-    <!-- Displayed as the title for a success/failure report enabling/disabling call barring. -->
-    <string name="BaMmi">Call barring</string>
-    <!-- Displayed as the title for a success/failure report changing the SIM password. -->
-    <string name="PwdMmi">Password change</string>
-    <!-- Displayed as the title for a success/failure report changing the SIM PIN. -->
-    <string name="PinMmi">PIN change</string>
-    <string name="CnipMmi">Calling number present</string>
-    <string name="CnirMmi">Calling number restricted</string>
-    <string name="ThreeWCMmi">Three way calling</string>
-    <string name="RuacMmi">Rejection of undesired annoying calls</string>
-    <string name="CndMmi">Calling number delivery</string>
-    <string name="DndMmi">Do not disturb</string>
-
-    <!-- Displayed to confirm to the user that caller ID will be restricted on the next call as usual. -->
-    <string name="CLIRDefaultOnNextCallOn">Caller ID defaults to restricted. Next call: Restricted</string>
-    <!-- Displayed to confirm to the user that caller ID will be not restricted on the next call even though it usually is. -->
-    <string name="CLIRDefaultOnNextCallOff">Caller ID defaults to restricted. Next call: Not restricted</string>
-    <!-- Displayed to confirm to the user that caller ID will not be restricted on the next call but usually is. -->
-    <string name="CLIRDefaultOffNextCallOn">Caller ID defaults to not restricted. Next call: Restricted</string>
-    <!-- Displayed to confirm to the user that caller ID will not be restricted on the next call or in general. -->
-    <string name="CLIRDefaultOffNextCallOff">Caller ID defaults to not restricted. Next call: Not restricted</string>
-
-
-    <!-- Displayed to tell the user that caller ID is not provisioned for their SIM. -->
-    <string name="serviceNotProvisioned">Service not provisioned.</string>
-    <!-- Displayed to tell the user that they cannot change the caller ID setting. -->
-    <string name="CLIRPermanent">You can\'t change the caller ID setting.</string>
-
-    <!-- Displayed to tell the user that data service is blocked by access control. -->
-    <string name="RestrictedOnData">Data service is blocked.</string>
-    <!-- Displayed to tell the user that emergency service is blocked by access control. -->
-    <string name="RestrictedOnEmergency">Emergency service is blocked.</string>
-    <!-- Displayed to tell the user that normal service is blocked by access control. -->
-    <string name="RestrictedOnNormal">Voice service is blocked.</string>
-    <!-- Displayed to tell the user that all emergency and normal voice services are blocked by access control. -->
-    <string name="RestrictedOnAllVoice">All voice services are blocked.</string>
-    <!-- Displayed to tell the user that sms service is blocked by access control. -->
-    <string name="RestrictedOnSms">SMS service is blocked.</string>
-    <!-- Displayed to tell the user that voice/data service is blocked by access control. -->
-    <string name="RestrictedOnVoiceData">Voice/data services are blocked.</string>
-    <!-- Displayed to tell the user that voice and sms service are blocked by access control. -->
-    <string name="RestrictedOnVoiceSms">Voice/SMS services are blocked.</string>
-    <!-- Displayed to tell the user that all service is blocked by access control. -->
-    <string name="RestrictedOnAll">All voice/data/SMS services are blocked.</string>
-
-    <!-- Displayed to tell the user that peer changed TTY mode -->
-    <string name="peerTtyModeFull">Peer requested TTY Mode FULL</string>
-    <string name="peerTtyModeHco">Peer requested TTY Mode HCO</string>
-    <string name="peerTtyModeVco">Peer requested TTY Mode VCO</string>
-    <string name="peerTtyModeOff">Peer requested TTY Mode OFF</string>
-
-    <!-- Mappings between TS 27.007 +CFCC/+CLCK "service classes" and human-readable strings--> <skip />
-    <!-- Example: Service was enabled for: Voice, Data -->
-    <string name="serviceClassVoice">Voice</string>
-    <!-- Example: Service was enabled for: Voice, Data -->
-    <string name="serviceClassData">Data</string>
-    <!-- Example: Service was enabled for: Voice, FAX -->
-    <string name="serviceClassFAX">FAX</string>
-    <!-- Example: Service was enabled for: Voice, SMS -->
-    <string name="serviceClassSMS">SMS</string>
-    <!-- Meaning: asynchronous data.  Example: Service was enabled for: Voice, Async -->
-    <string name="serviceClassDataAsync">Async</string>
-    <!-- Meaning: synchronous data.  Example: Service was enabled for: Voice, Async -->
-    <string name="serviceClassDataSync">Sync</string>
-    <!-- Meaning: packet data.  Example: Service was enabled for: Voice, Packet -->
-    <string name="serviceClassPacket">Packet</string>
-    <!-- Meaning: unknown.  Example: Service was enabled for: Voice, PAD -->
-    <string name="serviceClassPAD">PAD</string>
-
-    <!-- CDMA Roaming Indicator Strings (non ERI)--> <skip />
-    <!-- Default roaming indicator text -->
-    <string name="roamingText0">Roaming Indicator On</string>
-    <string name="roamingText1">Roaming Indicator Off</string>
-    <string name="roamingText2">Roaming Indicator Flashing</string>
-    <string name="roamingText3">Out of Neighborhood</string>
-    <string name="roamingText4">Out of Building</string>
-    <string name="roamingText5">Roaming - Preferred System</string>
-    <string name="roamingText6">Roaming - Available System</string>
-    <string name="roamingText7">Roaming - Alliance Partner</string>
-    <string name="roamingText8">Roaming - Premium Partner</string>
-    <string name="roamingText9">Roaming - Full Service Functionality</string>
-    <string name="roamingText10">Roaming - Partial Service Functionality</string>
-    <string name="roamingText11">Roaming Banner On</string>
-    <string name="roamingText12">Roaming Banner Off</string>
-    <string name="roamingTextSearching">Searching for Service</string>
-
-    <!-- Displayed when WFC registration fails -->
-    <string name="wfcRegErrorTitle">Wi-Fi Calling</string>
-    <!-- WFC Operator Error Codes -->
-    <string-array name="wfcOperatorErrorCodes" translatable="false">
-        <item>100</item>     <!-- CODE_WFC_DEFAULT -->
-        <item>2006</item>    <!-- CODE_WFC_RNS_ALLOWED_RADIO_DENY -->
-        <item>2007</item>    <!-- CODE_WFC_RNS_ALLOWED_RADIO_NONE -->
-        <item>1201</item>    <!-- CODE_WFC_DNS_RECV_NAPTR_QUERY_RSP_ERROR -->
-        <item>1202</item>    <!-- CODE_WFC_DNS_RECV_RSP_SRV_QUERY_ERROR -->
-        <item>1203</item>    <!-- CODE_WFC_DNS_RECV_RSP_QUERY_ERROR -->
-        <item>1041</item>    <!-- CODE_WFC_DNS_RESOLVE_FQDN_ERROR -->
-        <item>1301</item>    <!-- CODE_WFC_INCORRECT_SIM_CARD_ERROR -->
-        <item>1401</item>    <!-- CODE_WFC_LOCAL_OR_NULL_PTR_ERROR -->
-        <item>1081</item>    <!-- CODE_WFC_EPDG_CON_OR_LOCAL_OR_NULL_PTR_ERROR -->
-        <item>1082</item>    <!-- CODE_WFC_EPDG_IPSEC_SETUP_ERROR -->
-        <item>1405</item>    <!-- CODE_WFC_TLS_CONN_ERROR -->
-        <item>1406</item>    <!-- CODE_WFC_INTERNAL_SERVER_ERROR -->
-        <item>1501</item>    <!-- CODE_WFC_SERVER_CERT_VALIDATION_ERROR -->
-        <item>1101</item>    <!-- CODE_WFC_SERVER_IPSEC_CERT_VALIDATION_ERROR -->
-        <item>1111</item>    <!-- CODE_WFC_SERVER_IPSEC_CERT_INVALID_ERROR -->
-        <item>1504</item>    <!-- CODE_WFC_SERVER_CERT_INVALID_ERROR -->
-        <item>1601</item>    <!-- CODE_WFC_403_UNKNOWN_USER -->
-        <item>1602</item>    <!-- CODE_WFC_403_ROAMING_NOT_ALLOWED -->
-        <item>1603</item>    <!-- CODE_WFC_403_MISMATCH_IDENTITIES -->
-        <item>1604</item>    <!-- CODE_WFC_403_AUTH_SCHEME_UNSUPPORTED -->
-        <item>1605</item>    <!-- CODE_WFC_403_HANDSET_BLACKLISTED -->
-        <item>1701</item>    <!-- CODE_WFC_911_MISSING -->
-        <item>1407</item>    <!-- CODE_WFC_ANY_OTHER_CONN_ERROR -->
-        <item>999</item>     <!-- CODE_UNSPECIFIED -->
-    </string-array>
-
-    <!-- WFC Operator Error Messages showed as alerts -->
-    <string-array name="wfcOperatorErrorAlertMessages">
-        <item>Wi-Fi calling off</item>       <!-- CODE_WFC_DEFAULT -->
-        <item>No cellular network available. Connect to an available Wi-Fi Network to make calls.</item>    <!-- CODE_WFC_RNS_ALLOWED_RADIO_DENY -->
-        <item>String to be decided</item>    <!-- CODE_WFC_RNS_ALLOWED_RADIO_NONE -->
-        <item>Error02: DNS Error</item>      <!-- CODE_WFC_DNS_RECV_NAPTR_QUERY_RSP_ERROR -->
-        <item>Error03: DNS Error</item>      <!-- CODE_WFC_DNS_RECV_RSP_SRV_QUERY_ERROR -->
-        <item>Error04: DNS Error</item>      <!-- CODE_WFC_DNS_RECV_RSP_QUERY_ERROR -->
-        <item>Error041: DNS Error</item>     <!-- CODE_WFC_DNS_RESOLVE_FQDN_ERROR -->
-        <item>Error05: Invalid SIM card</item>   <!-- CODE_WFC_INCORRECT_SIM_CARD_ERROR -->
-        <item>Error07: Unable to Connect</item>  <!-- CODE_WFC_LOCAL_OR_NULL_PTR_ERROR -->
-        <item>Error081: Unable to connect</item> <!-- CODE_WFC_EPDG_CON_OR_LOCAL_OR_NULL_PTR_ERROR -->
-        <item>Error082: Unable to Connect</item> <!-- CODE_WFC_EPDG_IPSEC_SETUP_ERROR -->
-        <item>Error08: Unable to Connect</item>  <!-- CODE_WFC_TLS_CONN_ERROR -->
-        <item>REG91: Unable to Connect</item>    <!-- CODE_WFC_INTERNAL_SERVER_ERROR -->
-        <item>Error010: Invalid Certificate</item>    <!-- CODE_WFC_SERVER_CERT_VALIDATION_ERROR -->
-        <item>Error101: Invalid Certificate</item>    <!-- CODE_WFC_SERVER_IPSEC_CERT_VALIDATION_ERROR -->
-        <item>Error111: Invalid Certificate</item>    <!-- CODE_WFC_SERVER_IPSEC_CERT_INVALID_ERROR -->
-        <item>Error011: Invalid Certificate</item>    <!-- CODE_WFC_SERVER_CERT_INVALID_ERROR -->
-        <item>Error403: Unknown user</item>    <!-- CODE_WFC_403_UNKNOWN_USER -->
-        <item>Error403: Roaming not allowed</item>    <!-- CODE_WFC_403_ROAMING_NOT_ALLOWED -->
-        <item>Error403: Mismatch identities</item>    <!-- CODE_WFC_403_MISMATCH_IDENTITIES -->
-        <item>Error403: authentication scheme unsupported</item>    <!-- CODE_WFC_403_AUTH_SCHEME_UNSUPPORTED -->
-        <item>Error403: handset is blacklisted</item>    <!-- CODE_WFC_403_HANDSET_BLACKLISTED -->
-        <item>REG09: Missing 911 Address</item>    <!-- CODE_WFC_911_MISSING -->
-        <item>REG99: Unable to Connect</item>      <!-- CODE_WFC_ANY_OTHER_CONN_ERROR -->
-        <item>REG99: Unable to Connect</item>      <!-- CODE_UNSPECIFIED -->
-    </string-array>
-
-    <!-- WFC Operator Error Messages showed as notifications -->
-    <string-array name="wfcOperatorErrorNotificationMessages">
-        <item>Wi-Fi calling off</item>       <!-- CODE_WFC_DEFAULT -->
-        <item>No cellular network available. Connect to an available Wi-Fi Network to make calls.</item>    <!-- CODE_WFC_RNS_ALLOWED_RADIO_DENY -->
-        <item>String to be decided</item>    <!-- CODE_WFC_RNS_ALLOWED_RADIO_NONE -->
-        <item>Error02: DNS Error</item>      <!-- CODE_WFC_DNS_RECV_NAPTR_QUERY_RSP_ERROR -->
-        <item>Error03: DNS Error</item>      <!-- CODE_WFC_DNS_RECV_RSP_SRV_QUERY_ERROR -->
-        <item>Error04: DNS Error</item>      <!-- CODE_WFC_DNS_RECV_RSP_QUERY_ERROR -->
-        <item>Error041: DNS Error</item>     <!-- CODE_WFC_DNS_RESOLVE_FQDN_ERROR -->
-        <item>Error05: Invalid SIM card</item>   <!-- CODE_WFC_INCORRECT_SIM_CARD_ERROR -->
-        <item>Error07: Unable to Connect</item>  <!-- CODE_WFC_LOCAL_OR_NULL_PTR_ERROR -->
-        <item>Error081: Unable to connect</item> <!-- CODE_WFC_EPDG_CON_OR_LOCAL_OR_NULL_PTR_ERROR -->
-        <item>Error082: Unable to Connect</item> <!-- CODE_WFC_EPDG_IPSEC_SETUP_ERROR -->
-        <item>Error08: Unable to Connect</item>  <!-- CODE_WFC_TLS_CONN_ERROR -->
-        <item>REG91: Unable to Connect</item>    <!-- CODE_WFC_INTERNAL_SERVER_ERROR -->
-        <item>Error010: Invalid Certificate</item>    <!-- CODE_WFC_SERVER_CERT_VALIDATION_ERROR -->
-        <item>Error101: Invalid Certificate</item>    <!-- CODE_WFC_SERVER_IPSEC_CERT_VALIDATION_ERROR -->
-        <item>Error111: Invalid Certificate</item>    <!-- CODE_WFC_SERVER_IPSEC_CERT_INVALID_ERROR -->
-        <item>Error011: Invalid Certificate</item>    <!-- CODE_WFC_SERVER_CERT_INVALID_ERROR -->
-        <item>Error403: Unknown user</item>    <!-- CODE_WFC_403_UNKNOWN_USER -->
-        <item>Error403: Roaming not allowed</item>    <!-- CODE_WFC_403_ROAMING_NOT_ALLOWED -->
-        <item>Error403: Mismatch identities</item>    <!-- CODE_WFC_403_MISMATCH_IDENTITIES -->
-        <item>Error403: authentication scheme unsupported</item>    <!-- CODE_WFC_403_AUTH_SCHEME_UNSUPPORTED -->
-        <item>Error403: handset is blacklisted</item>    <!-- CODE_WFC_403_HANDSET_BLACKLISTED -->
-        <item>REG09: Missing 911 Address</item>    <!-- CODE_WFC_911_MISSING -->
-        <item>REG99: Unable to Connect</item>      <!-- CODE_WFC_ANY_OTHER_CONN_ERROR -->
-        <item>REG99: Unable to Connect</item>      <!-- CODE_UNSPECIFIED -->
-    </string-array>
-
-
-    <!-- Template for showing cellular network operator name while WFC is active -->
-    <string-array name="wfcSpnFormats">
-        <item>%s</item>
-        <item>%s Wi-Fi Calling</item>
-    </string-array>
-    <!-- WFC, summary for Disabled -->
-    <string name="wifi_calling_off_summary">Off</string>
-    <!-- WFC, summary for Wi-Fi Preferred -->
-    <string name="wfc_mode_wifi_preferred_summary">Wi-Fi preferred</string>
-    <!-- WFC, summary for Cellular Preferred -->
-    <string name="wfc_mode_cellular_preferred_summary">Cellular preferred</string>
-    <!-- WFC, summary for Wi-Fi Only -->
-    <string name="wfc_mode_wifi_only_summary">Wi-Fi only</string>
-
-    <!--
-        {0} is one of "bearerServiceCode*"
-        {1} is dialing number
-        {2} is time in seconds
-
-        cfTemplateRegistered and cfTemplateRegisteredTime mean that a phone number
-        has been set but forwarding is not on.
-    --> <skip />
-    <!-- Displayed when the call forwarding query was not able to be forwarded. -->
-    <string name="cfTemplateNotForwarded"><xliff:g id="bearer_service_code">{0}</xliff:g>: Not forwarded</string>
-    <!-- Displayed when the call forwarding query was forwarded. -->
-    <string name="cfTemplateForwarded"><xliff:g id="bearer_service_code">{0}</xliff:g>: <xliff:g id="dialing_number">{1}</xliff:g></string>
-    <!-- Displayed when the call forwarding query will be forwarded after some time. -->
-    <string name="cfTemplateForwardedTime"><xliff:g id="bearer_service_code">{0}</xliff:g>: <xliff:g id="dialing_number">{1}</xliff:g> after <xliff:g id="time_delay">{2}</xliff:g> seconds</string>
-    <!-- Displayed when the call forwarding query was set but forwarding is not enabled. -->
-    <string name="cfTemplateRegistered"><xliff:g id="bearer_service_code">{0}</xliff:g>: Not forwarded</string>
-    <!-- Displayed when the call forwarding query was set but forwarding is not enabled. -->
-    <string name="cfTemplateRegisteredTime"><xliff:g id="bearer_service_code">{0}</xliff:g>: Not forwarded</string>
-
-    <!-- android.net.http Error strings --> <skip />
-    <!-- Displayed when a feature code (non-phone number) is dialed and completes successfully. -->
-    <string name="fcComplete">Feature code complete.</string>
-    <!-- Displayed when a feature code (non-phone number) is dialed and completes unsuccessfully. -->
-    <string name="fcError">Connection problem or invalid feature code.</string>
-    <!-- android.net.http Error strings --> <skip />
-    <!-- Displayed when a web request was successful. -->
-    <string name="httpErrorOk">OK</string>
-    <!-- Displayed when a web request failed with a generic network error. -->
-    <string name="httpError">There was a network error.</string>
-    <!-- Displayed when a web request failed because the URL could not be found. -->
-    <string name="httpErrorLookup">Couldn\'t find the URL.</string>
-    <!-- Displayed when a web request failed because the site's authentication scheme is not supported by us. -->
-    <string name="httpErrorUnsupportedAuthScheme">The site authentication scheme isn\'t supported.</string>
-    <!-- Displayed when a web request failed because the authentication failed. -->
-    <string name="httpErrorAuth">Couldn\'t authenticate.</string>
-    <!-- Displayed when a web request failed because the authentication with the proxy failed. -->
-    <string name="httpErrorProxyAuth">Authentication via the proxy server was unsuccessful.</string>
-    <!-- Displayed when a web request failed because there was a connection error. -->
-    <string name="httpErrorConnect">Couldn\'t connect to the server.</string>
-    <!-- Displayed when a web request failed because there was an input or output error. -->
-    <string name="httpErrorIO">Couldn\'t communicate with the server. Try again later.</string>
-    <!-- Displayed when a web request failed because the request timed out -->
-    <string name="httpErrorTimeout">The connection to the server timed out.</string>
-    <!-- Displayed when a web request failed because the site tried to redirect us one too many times -->
-    <string name="httpErrorRedirectLoop">The page contains too many server redirects.</string>
-    <!-- Displayed when a web request failed because the protocol of the server is not supported. -->
-    <string name="httpErrorUnsupportedScheme">The protocol isn\'t supported.</string>
-    <!-- Displayed when a web request failed because the a secure connection couldn't be made to the server.-->
-    <string name="httpErrorFailedSslHandshake">Couldn\'t establish a secure connection.</string>
-    <!-- Displayed when a web request failed because the URL isn't in a valid form. -->
-    <string name="httpErrorBadUrl">Couldn\'t open the page because the URL is invalid.</string>
-    <!-- Displayed when a request failed because we failed to open the file. -->
-    <string name="httpErrorFile">Couldn\'t access the file.</string>
-    <!-- Displayed when a request failed because the file wasn't found. -->
-    <string name="httpErrorFileNotFound">Couldn\'t find the requested file.</string>
-    <!-- Displayed when a request failed because there are too many requests right now. -->
-    <string name="httpErrorTooManyRequests">Too many requests are being processed. Try again later.</string>
-
-    <!-- Account notifications --> <skip />
-    <!-- A notification is shown when the AccountManager is unable to
-    supply an auth token without prompting the user to re-enter the
-    password.  This is the text that will scroll through the
-    notification bar (will be seen by the user as he uses another application). -->
-    <string name="notification_title">Signin error for <xliff:g id="account" example="foo@gmail.com">%1$s</xliff:g></string>
-
-    <!-- Sync notifications --> <skip />
-    <!-- A notification is shown when there is a sync error.  This is the text that will scroll through the notification bar (will be seen by the user as he uses another application). -->
-    <string name="contentServiceSync">Sync</string>
-    <!-- A notification is shown when there is a sync error.  This is the title of the notification.  It will be seen in the pull-down notification tray. -->
-    <string name="contentServiceSyncNotificationTitle">Sync</string>
-    <!-- A notification is shown when there is a sync error.  This is the message of the notification.  It describes the error, in this case is there were too many deletes. The argument is the type of content, for example Gmail or Calendar. It will be seen in the pull-down notification tray. -->
-    <string name="contentServiceTooManyDeletesNotificationDesc">Too many <xliff:g id="content_type">%s</xliff:g> deletes.</string>
-
-    <!-- If MMS discovers there isn't much space left on the device, it will show a toast with this message. -->
-    <string name="low_memory" product="tablet">Tablet storage is full. Delete some files to free space.</string>
-    <!-- If MMS discovers there isn't much space left on the device, it will show a toast with this message. -->
-    <string name="low_memory" product="watch">Watch storage is full. Delete some files to free space.</string>
-    <!-- If MMS discovers there isn't much space left on the device, it will show a toast with this message. -->
-    <string name="low_memory" product="tv">TV storage is full. Delete some files to free space.</string>
-    <!-- If MMS discovers there isn't much space left on the device, it will show a toast with this message. -->
-    <string name="low_memory" product="default">Phone storage is full. Delete some files to free space.</string>
-
-    <!-- SSL CA cert notification --> <skip />
-    <!-- Shows up when there is a user SSL CA Cert installed on the
-         device.  Indicates to the user that SSL traffic can be intercepted.  [CHAR LIMIT=NONE] -->
-    <plurals name="ssl_ca_cert_warning">
-        <item quantity="one">Certificate authority installed</item>
-        <item quantity="other">Certificate authorities installed</item>
-    </plurals>
-    <!-- Content text for a notification. The Title of the notification is "ssl_ca_cert_warning".
-         This says that an unknown party is doing the monitoring. [CHAR LIMIT=100]-->
-    <string name="ssl_ca_cert_noti_by_unknown">By an unknown third party</string>
-    <!-- Content text for a notification. The Title of the notification is "ssl_ca_cert_warning".
-         This indicates that an unspecified administrator is doing the monitoring. [CHAR LIMIT=100]-->
-    <string name="ssl_ca_cert_noti_by_administrator">By your work profile administrator</string>
-    <!-- Content text for a notification. The Title of the notification is "ssl_ca_cert_warning".
-         This indicates who is doing the monitoring. [CHAR LIMIT=100]-->
-    <string name="ssl_ca_cert_noti_managed">By <xliff:g id="managing_domain">%s</xliff:g></string>
-
-    <!-- Work profile deleted notification--> <skip />
-    <!-- Shows up in the notification's title when the system deletes the work profile. [CHAR LIMIT=NONE] -->
-    <string name="work_profile_deleted">Work profile deleted</string>
-    <!-- Content text for a notification. The Title of the notification is "work_profile_deleted",
-         i.e. "Work profile deleted". This says that the profile is deleted by the system as a result of
-         the current profile owner gone missing. [CHAR LIMIT=100]-->
-    <string name="work_profile_deleted_description">Work profile deleted due to missing admin app.</string>
-    <!-- Content text for an expanded notification. The Title of the notification is "work_profile_deleted",
-         i.e. "Work profile deleted". This further explains that the profile is deleted by the system
-         as a result of the current profile admin gone missing. [CHAR LIMIT=NONE]-->
-    <string name="work_profile_deleted_details">The work profile admin app is either missing or corrupted.
-         As a result, your work profile and related data have been deleted. Contact your administrator for assistance.</string>
-    <!-- Content text for a notification. The Title of the notification is "work_profile_deleted",
-        This indicates that a work profile has been deleted. [CHAR LIMIT=NONE]-->
-    <string name="work_profile_deleted_description_dpm_wipe">Your work profile is no longer available on this device.</string>
-
-    <!-- Factory reset warning dialog strings--> <skip />
-    <!-- Shows up in the dialog's title to warn about an impeding factory reset. [CHAR LIMIT=NONE] -->
-    <string name="factory_reset_warning">Your device will be erased</string>
-    <!-- Text message in the factory reset warning dialog. This says that the the device admin app
-         is missing or corrupted. As a result the device will be erased. [CHAR LIMIT=NONE]-->
-    <string name="factory_reset_message">The admin app is missing components or corrupted, and can\'t be used.
-         Your device will now be erased. Contact your administrator for assistance.</string>
-
-    <!-- Display name for any time a piece of data refers to the owner of the phone. For example, this could be used in place of the phone's phone number. -->
-    <string name="me">Me</string>
-
-    <!-- Power Dialog --> <skip />
-    <!-- Title for the Phone Options dialog to lock the screen, turn off the phone etc. -->
-    <string name="power_dialog" product="tablet">Tablet options</string>
-    <!-- Title for the Phone Options dialog to lock the screen, turn off the phone etc. -->
-    <string name="power_dialog" product="tv">TV options</string>
-    <!-- Title for the Phone Options dialog to lock the screen, turn off the phone etc. -->
-    <string name="power_dialog" product="default">Phone options</string>
-    <!-- Button to turn on silent mode, within the Phone Options dialog -->
-    <string name="silent_mode">Silent mode</string>
-    <!-- Button to turn on the radio, within the Phone Options dialog -->
-    <string name="turn_on_radio">Turn on wireless</string>
-    <!-- Button to turn off the radio, within the Phone Options dialog -->
-    <string name="turn_off_radio">Turn off wireless</string>
-    <!-- Button to lock the screen, within the Phone Options dialog -->
-    <string name="screen_lock">Screen lock</string>
-    <!-- Button to turn off the phone, within the Phone Options dialog -->
-    <string name="power_off">Power off</string>
-    <!-- Spoken description for ringer silent option. [CHAR LIMIT=NONE] -->
-    <string name="silent_mode_silent">Ringer off</string>
-    <!-- Spoken description for ringer vibrate option. [CHAR LIMIT=NONE] -->
-    <string name="silent_mode_vibrate">Ringer vibrate</string>
-    <!-- Spoken description for ringer normal option. [CHAR LIMIT=NONE] -->
-    <string name="silent_mode_ring">Ringer on</string>
-
-    <!-- Reboot to Recovery Progress Dialog. This is shown before it reboots to recovery. -->
-    <string name="reboot_to_update_title">Android system update</string>
-    <string name="reboot_to_update_prepare">Preparing to update\u2026</string>
-    <string name="reboot_to_update_package">Processing the update package\u2026</string>
-    <string name="reboot_to_update_reboot">Restarting\u2026</string>
-
-    <!-- Reboot to Recovery for factory reset. -->
-    <string name="reboot_to_reset_title">Factory data reset</string>
-    <string name="reboot_to_reset_message">Restarting\u2026</string>
-
-    <!-- Shutdown Progress Dialog. This is shown if the user chooses to power off the phone. -->
-    <string name="shutdown_progress">Shutting down\u2026</string>
-
-    <!-- Shutdown Confirmation Dialog.  When the user chooses to power off the phone, there will
-         be a confirmation dialog.  This is the message. -->
-    <string name="shutdown_confirm" product="tablet">Your tablet will shut down.</string>
-    <!-- Shutdown Confirmation Dialog.  When the user chooses to power off the TV, there will
-         be a confirmation dialog.  This is the message. -->
-    <string name="shutdown_confirm" product="tv">Your TV will shut down.</string>
-    <!-- Shutdown Confirmation Dialog.  When the user chooses to power off the watch, there will
-         be a confirmation dialog.  This is the message. -->
-    <string name="shutdown_confirm" product="watch">Your watch will shut down.</string>
-    <!-- Shutdown Confirmation Dialog.  When the user chooses to power off the phone, there will
-         be a confirmation dialog.  This is the message. -->
-    <string name="shutdown_confirm" product="default">Your phone will shut down.</string>
-
-    <!-- Shutdown Confirmation Dialog.  When the user chooses to power off the phone, it asks
-         the user if they'd like to shut down.  This is the message.  This is used instead of
-         shutdown_confirm when the system is configured to use long press to go directly to the
-         power off dialog instead of the global actions menu. -->
-    <string name="shutdown_confirm_question">Do you want to shut down?</string>
-
-    <!-- Title of dialog to confirm rebooting into safe mode. [CHAR LIMIT=50] -->
-    <string name="reboot_safemode_title">Reboot to safe mode</string>
-
-    <!-- Shutdown Confirmation Dialog.  Message in the confirmation dialog
-         when the user asks to reboot into safe mode. [CHAR LIMIT=NONE] -->
-    <string name="reboot_safemode_confirm">Do you want to reboot into safe mode?
-         This will disable all third party applications you have installed.
-         They will be restored when you reboot again.</string>
-
-    <!-- Recent Tasks dialog: title
-     TODO: this should move to SystemUI.apk, but the code for the old
-            recent dialog is still in the framework
-     -->
-    <string name="recent_tasks_title">Recent</string>
-    <!-- Recent Tasks dialog: message when there are no recent applications
-     TODO: this should move to SystemUI.apk, but the code for the old
-            recent dialog is still in the framework
-     -->
-    <string name="no_recent_tasks">No recent apps.</string>
-
-    <!-- Title of the Global Actions Dialog -->
-    <string name="global_actions" product="tablet">Tablet options</string>
-    <!-- Title of the Global Actions Dialog -->
-    <string name="global_actions" product="tv">TV options</string>
-    <!-- Title of the Global Actions Dialog -->
-    <string name="global_actions" product="default">Phone options</string>
-
-    <!-- label for item that locks the phone in the phone options dialog -->
-    <string name="global_action_lock">Screen lock</string>
-
-    <!-- label for item that turns off power in phone options dialog -->
-    <string name="global_action_power_off">Power off</string>
-
-    <!-- label for item that restarts phone in phone options dialog -->
-    <!-- TODO: promote to separate string-->
-    <string name="global_action_restart" translatable="false">@string/sim_restart_button</string>
-
-    <!-- label for item that starts emergency call -->
-    <string name="global_action_emergency">Emergency</string>
-
-    <!-- label for item that generates a bug report in the phone options dialog -->
-    <string name="global_action_bug_report">Bug report</string>
-
-    <!-- Take bug report menu title [CHAR LIMIT=NONE] -->
-    <string name="bugreport_title">Take bug report</string>
-    <!-- Message in bugreport dialog describing what it does [CHAR LIMIT=NONE] -->
-    <!-- TODO: remove if not used anymore -->
-    <string name="bugreport_message">This will collect information about your
-        current device state, to send as an e-mail message.  It will take a little
-        time from starting the bug report until it is ready to be sent; please be
-        patient.</string>
-    <!-- Title in the bugreport dialog for the interactive workflow. Should fit in one line. [CHAR LIMIT=30] -->
-    <string name="bugreport_option_interactive_title">Interactive report</string>
-    <!-- Summary in the bugreport dialog for the interactive workflow. [CHAR LIMIT=NONE] -->
-    <string name="bugreport_option_interactive_summary">Use this under most circumstances.
-        It allows you to track progress of the report, enter more details about the problem, and take screenshots.
-        It might omit some less-used sections that take a long time to report.</string>
-    <!-- Title in the bugreport dialog for the full workflow. Should fit in one line. [CHAR LIMIT=30] -->
-    <string name="bugreport_option_full_title">Full report</string>
-    <!-- Summary in the bugreport dialog for the full workflow. [CHAR LIMIT=NONE] -->
-    <string name="bugreport_option_full_summary">Use this option for minimal system interference when
-        your device is unresponsive or too slow, or when you need all report sections.
-        Does not allow you to enter more details or take additional screenshots.</string>
-    <!--  Toast message informing user in how many seconds a bugreport screenshot will be taken -->
-    <plurals name="bugreport_countdown">
-        <item quantity="one">Taking screenshot for bug report in <xliff:g id="number">%d</xliff:g> second.</item>
-        <item quantity="other">Taking screenshot for bug report in <xliff:g id="number">%d</xliff:g> seconds.</item>
-    </plurals>
-
-    <!-- Format for build summary info [CHAR LIMIT=NONE] -->
-    <string name="bugreport_status" translatable="false">%s (%s)</string>
-
-    <!-- label for item that enables silent mode in phone options dialog -->
-    <string name="global_action_toggle_silent_mode">Silent mode</string>
-
-    <!-- status message in phone options dialog for when silent mode is enabled -->
-    <string name="global_action_silent_mode_on_status">Sound is OFF</string>
-
-    <!-- status message in phone options dialog for when silent mode is disabled -->
-    <string name="global_action_silent_mode_off_status">Sound is ON</string>
-
-    <!-- label for item that toggles airplane mode -->
-    <string name="global_actions_toggle_airplane_mode">Airplane mode</string>
-
-    <!-- status message in phone options dialog for when airplane mode is on -->
-    <string name="global_actions_airplane_mode_on_status">Airplane mode is ON</string>
-
-    <!-- status message in phone options dialog for when airplane mode is off -->
-    <string name="global_actions_airplane_mode_off_status">Airplane mode is OFF</string>
-
-    <!-- label for item that launches settings in phone options dialog [CHAR LIMIT=15]-->
-    <string name="global_action_settings">Settings</string>
-
-    <!-- label for item that launches assist in phone options dialog [CHAR LIMIT=15]-->
-    <string name="global_action_assist">Assist</string>
-
-    <!-- label for item that launches voice assist in phone options dialog [CHAR LIMIT=15]-->
-    <string name="global_action_voice_assist">Voice Assist</string>
-
-    <!-- label for item that locks the phone and enforces that it can't be unlocked without entering a credential. [CHAR LIMIT=15] -->
-    <string name="global_action_lockdown">Lock now</string>
-
-    <!-- Text to use when the number in a notification info is too large
-         (greater than status_bar_notification_info_maxnum, defined in
-         values/config.xml) and must be truncated. May need to be localized
-         for most appropriate textual indicator of "more than X".
-         [CHAR LIMIT=4] -->
-    <string name="status_bar_notification_info_overflow">999+</string>
-
-    <!-- The divider symbol between different parts of the notification header. not translatable [CHAR LIMIT=1] -->
-    <string name="notification_header_divider_symbol" translatable="false">•</string>
-
-    <!-- Text shown in place of notification contents when the notification is hidden on a secure lockscreen -->
-    <string name="notification_hidden_text">Contents hidden</string>
-
-    <!-- Text shown in place of notification contents when the notification is hidden by policy on a secure lockscreen -->
-    <string name="notification_hidden_by_policy_text">Contents hidden by policy</string>
-
-    <!-- Displayed to the user to tell them that they have started up the phone in "safe mode" -->
-    <string name="safeMode">Safe mode</string>
-
-    <!-- Label for the Android system components when they are shown to the user. -->
-    <string name="android_system_label">Android System</string>
-
-    <!-- Label for the user owner in the intent forwarding app. -->
-    <string name="user_owner_label">Switch to Personal</string>
-
-    <!-- Label for a corporate profile in the intent forwarding app. -->
-    <string name="managed_profile_label">Switch to Work</string>
-
-    <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgrouplab_contacts">Contacts</string>
-    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgroupdesc_contacts">access your contacts</string>
-
-    <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgrouplab_location">Location</string>
-    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgroupdesc_location">access this device\'s location</string>
-
-    <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgrouplab_calendar">Calendar</string>
-    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgroupdesc_calendar">access your calendar</string>
-
-    <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgrouplab_sms">SMS</string>
-    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgroupdesc_sms">send and view SMS messages</string>
-
-    <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgrouplab_storage">Storage</string>
-    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgroupdesc_storage">access photos, media, and files on your device</string>
-
-    <!-- Title of a category of application permissioncds, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgrouplab_microphone">Microphone</string>
-    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgroupdesc_microphone">record audio</string>
-
-    <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgrouplab_camera">Camera</string>
-    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgroupdesc_camera">take pictures and record video</string>
-
-    <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgrouplab_phone">Phone</string>
-    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgroupdesc_phone">make and manage phone calls</string>
-
-    <!-- Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgrouplab_sensors">Body Sensors</string>
-    <!-- Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permgroupdesc_sensors">access sensor data about your vital signs</string>
-
-    <!-- Title for the capability of an accessibility service to retrieve window content. -->
-    <string name="capability_title_canRetrieveWindowContent">Retrieve window content</string>
-    <!-- Description for the capability of an accessibility service to retrieve window content. -->
-    <string name="capability_desc_canRetrieveWindowContent">Inspect the content of a window you\'re
-        interacting with.</string>
-
-    <!-- Title for the capability of an accessibility service to request touch exploration. -->
-    <string name="capability_title_canRequestTouchExploration">Turn on Explore by Touch</string>
-    <!-- Description for the capability of an accessibility service to request touch exploration. -->
-    <string name="capability_desc_canRequestTouchExploration">Tapped items will be spoken aloud
-        and the screen can be explored using gestures.</string>
-
-    <!-- Title for the capability of an accessibility service to request enhanced web accessibility. -->
-    <string name="capability_title_canRequestEnhancedWebAccessibility">Turn on enhanced web
-        accessibility</string>
-    <!-- Description for the capability of an accessibility service to request enhanced web accessibility. -->
-    <string name="capability_desc_canRequestEnhancedWebAccessibility">Scripts may be installed to
-        make app content more accessible.</string>
-
-    <!-- Title for the capability of an accessibility service to request to filter key events. -->
-    <string name="capability_title_canRequestFilterKeyEvents">Observe text you type</string>
-    <!-- Description for the capability of an accessibility service to request to filter key events. -->
-    <string name="capability_desc_canRequestFilterKeyEvents">Includes personal data such as credit
-        card numbers and passwords.</string>
-
-    <!-- Title for the capability of an accessibility service to control display magnification. -->
-    <string name="capability_title_canControlMagnification">Control display magnification</string>
-    <!-- Description for the capability of an accessibility service to control display magnification. -->
-    <string name="capability_desc_canControlMagnification">Control the display\'s zoom level and
-        positioning.</string>
-
-    <!-- Title for the capability of an accessibility service to perform gestures. -->
-    <string name="capability_title_canPerformGestures">Perform gestures</string>
-    <!-- Description for the capability of an accessibility service to perform gestures. -->
-    <string name="capability_desc_canPerformGestures">Can tap, swipe, pinch, and perform other
-        gestures.</string>
-
-    <!--  Permissions -->
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_statusBar">disable or modify status bar</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_statusBar">Allows the app to disable the status bar or add and remove system icons.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_statusBarService">be the status bar</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_statusBarService">Allows the app to be the status bar.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_expandStatusBar">expand/collapse status bar</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_expandStatusBar">Allows the app to expand or collapse the status bar.</string>
-
-    <!-- Title of an application permission, listed so the user can install application shortcuts
-    in their Launcher -->
-    <string name="permlab_install_shortcut">install shortcuts</string>
-    <!-- Description of an application permission, listed so the user can install application shortcuts
-    in their Launcher -->
-    <string name="permdesc_install_shortcut">Allows an application to add
-        Homescreen shortcuts without user intervention.</string>
-
-    <!-- Title of an application permission, listed so the user can uninstall application shortcuts
-    in their Launcher -->
-    <string name="permlab_uninstall_shortcut">uninstall shortcuts</string>
-    <!-- Description of an application permission, listed so the user can install application shortcuts
-    in their Launcher -->
-    <string name="permdesc_uninstall_shortcut">Allows the application to remove
-        Homescreen shortcuts without user intervention.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_processOutgoingCalls">reroute outgoing calls</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_processOutgoingCalls">Allows the app to see the
-        number being dialed during an outgoing call with the option to redirect
-        the call to a different number or abort the call altogether.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_receiveSms">receive text messages (SMS)</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_receiveSms">Allows the app to receive and process SMS
-      messages. This means the app could monitor or delete messages sent to your
-      device without showing them to you.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_receiveMms">receive text messages (MMS)</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_receiveMms">Allows the app to receive and process MMS
-      messages. This means the app could monitor or delete messages sent to your
-      device without showing them to you.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_readCellBroadcasts">read cell broadcast messages</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readCellBroadcasts">Allows the app to read
-        cell broadcast messages received by your device. Cell broadcast alerts
-        are delivered in some locations to warn you of emergency situations.
-        Malicious apps may interfere with the performance or operation of your
-        device when an emergency cell broadcast is received.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_subscribedFeedsRead">read subscribed feeds</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_subscribedFeedsRead">Allows the app to get details about the currently synced feeds.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_sendSms">send and view SMS messages</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_sendSms">Allows the app to send SMS messages.
-     This may result in unexpected charges. Malicious apps may cost you money by
-     sending messages without your confirmation.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_readSms">read your text messages (SMS or MMS)</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readSms" product="tablet">Allows the app to read SMS
-      messages stored on your tablet or SIM card. This allows the app to read all
-      SMS messages, regardless of content or confidentiality.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readSms" product="tv">Allows the app to read SMS
-      messages stored on your TV or SIM card. This allows the app to read all
-      SMS messages, regardless of content or confidentiality.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readSms" product="default">Allows the app to read SMS
-      messages stored on your phone or SIM card. This allows the app to read all
-      SMS messages, regardless of content or confidentiality.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_receiveWapPush">receive text messages (WAP)</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_receiveWapPush">Allows the app to receive and process
-     WAP messages.  This permission includes the ability to monitor or delete
-     messages sent to you without showing them to you.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_getTasks">retrieve running apps</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_getTasks">Allows the app to retrieve information
-       about currently and recently running tasks.  This may allow the app to
-       discover information about which applications are used on the device.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_manageProfileAndDeviceOwners">manage profile and device owners</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to set the profile/device owners.
-     [CHAR LIMIT=NONE] -->
-    <string name="permdesc_manageProfileAndDeviceOwners">Allows apps to set the profile owners and the device owner.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_reorderTasks">reorder running apps</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_reorderTasks">Allows the app to move tasks to the
-      foreground and background.  The app may do this without your input.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_enableCarMode">enable car mode</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_enableCarMode">Allows the app to
-        enable the car mode.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_killBackgroundProcesses">close other apps</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_killBackgroundProcesses">Allows the app to end
-      background processes of other apps.  This may cause other apps to stop
-      running.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_systemAlertWindow">draw over other apps</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_systemAlertWindow">Allows the app to draw on top of other
-        applications or parts of the user interface.  They may interfere with your
-        use of the interface in any application, or change what you think you are
-        seeing in other applications.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_persistentActivity">make app always run</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_persistentActivity" product="tablet">Allows the app to make parts of itself persistent in memory.  This can limit memory available to other apps slowing down the tablet.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_persistentActivity" product="tv">Allows the app to make parts of itself persistent in memory.  This can limit memory available to other apps slowing down the TV.</string>
-    <string name="permdesc_persistentActivity" product="default">Allows the app to make parts of itself persistent in memory.  This can limit memory available to other apps slowing down the phone.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_getPackageSize">measure app storage space</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_getPackageSize">Allows the app to retrieve its code, data, and cache sizes</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_writeSettings">modify system settings</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_writeSettings">Allows the app to modify the
-        system\'s settings data. Malicious apps may corrupt your system\'s
-        configuration.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_receiveBootCompleted">run at startup</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_receiveBootCompleted" product="tablet">Allows the app to
-        have itself started as soon as the system has finished booting.
-        This can make it take longer to start the tablet and allow the
-        app to slow down the overall tablet by always running.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_receiveBootCompleted" product="tv">Allows the app to
-        have itself started as soon as the system has finished booting.
-        This can make it take longer to start the TV and allow the
-        app to slow down the overall tablet by always running.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_receiveBootCompleted" product="default">Allows the app to
-        have itself started as soon as the system has finished booting.
-        This can make it take longer to start the phone and allow the
-        app to slow down the overall phone by always running.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_broadcastSticky">send sticky broadcast</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_broadcastSticky" product="tablet">Allows the app to
-    send sticky broadcasts, which remain after the broadcast ends. Excessive use
-    may make the tablet slow or unstable by causing it to use too much memory.
-    </string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_broadcastSticky" product="tv">Allows the app to
-    send sticky broadcasts, which remain after the broadcast ends. Excessive use
-    may make the TV slow or unstable by causing it to use too much memory.
-    </string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_broadcastSticky" product="default">Allows the app to
-    send sticky broadcasts, which remain after the broadcast ends. Excessive
-    use may make the phone slow or unstable by causing it to use too
-    much memory.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_readContacts">read your contacts</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readContacts" product="tablet">Allows the app to read
-      data about your contacts stored on your tablet, including the frequency
-      with which you\'ve called, emailed, or communicated in other ways with
-      specific individuals. This permission allows apps to save your contact
-      data, and malicious apps may share contact data without your
-      knowledge.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readContacts" product="tv">Allows the app to read
-      data about your contacts stored on your TV, including the frequency
-      with which you\'ve called, emailed, or communicated in other ways with
-      specific individuals. This permission allows apps to save your contact
-      data, and malicious apps may share contact data without your
-      knowledge.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readContacts" product="default">Allows the app to
-      read data about your contacts stored on your phone, including the
-      frequency with which you\'ve called, emailed, or communicated in other ways
-      with specific individuals. This permission allows apps to save your
-      contact data, and malicious apps may share contact data without your
-      knowledge.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_writeContacts">modify your contacts</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_writeContacts" product="tablet">Allows the app to
-      modify the data about your contacts stored on your tablet, including the
-      frequency with which you\'ve called, emailed, or communicated in other ways
-      with specific contacts. This permission allows apps to delete contact
-      data.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_writeContacts" product="tv">Allows the app to
-      modify the data about your contacts stored on your TV, including the
-      frequency with which you\'ve called, emailed, or communicated in other ways
-      with specific contacts. This permission allows apps to delete contact
-      data.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_writeContacts" product="default">Allows the app to
-    modify the data about your contacts stored on your phone, including the
-    frequency with which you\'ve called, emailed, or communicated in other ways
-    with specific contacts. This permission allows apps to delete contact
-    data.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_readCallLog">read call log</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readCallLog" product="tablet">Allows the app to read
-     your tablet\'s call log, including data about incoming and outgoing calls.
-     This permission allows apps to save your call log data, and malicious apps
-     may share call log data without your knowledge.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readCallLog" product="tv">Allows the app to read
-     your TV\'s call log, including data about incoming and outgoing calls.
-     This permission allows apps to save your call log data, and malicious apps
-     may share call log data without your knowledge.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readCallLog" product="default">Allows the app to read
-      your phone\'s call log, including data about incoming and outgoing calls.
-      This permission allows apps to save your call log data, and malicious apps
-      may share call log data without your knowledge.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_writeCallLog">write call log</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_writeCallLog" product="tablet">Allows the app to modify your tablet\'s call log, including data about incoming and outgoing calls.
-        Malicious apps may use this to erase or modify your call log.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_writeCallLog" product="tv">Allows the app to modify your TV\'s call log, including data about incoming and outgoing calls.
-        Malicious apps may use this to erase or modify your call log.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_writeCallLog" product="default">Allows the app to modify your phone\'s call log, including data about incoming and outgoing calls.
-        Malicious apps may use this to erase or modify your call log.</string>
-
-    <!-- Title of the body sensors permission, listed so the user can decide whether to allow the application to access body sensor data. [CHAR LIMIT=30] -->
-    <string name="permlab_bodySensors">access body sensors (like heart rate monitors)
-    </string>
-    <!-- Description of the body sensors permission, listed so the user can decide whether to allow the application to access data from body sensors. [CHAR LIMIT=NONE] -->
-    <string name="permdesc_bodySensors" product="default">Allows the app to access data from sensors
-    that monitor your physical condition, such as your heart rate.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_readCalendar">read calendar events plus confidential information</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readCalendar" product="tablet">Allows the app to read
-       all calendar events stored on your tablet, including those of friends or
-       co-workers. This may allow the app to share or save your calendar data,
-       regardless of confidentiality or sensitivity.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readCalendar" product="tv">Allows the app to read
-       all calendar events stored on your TV, including those of friends or
-       co-workers. This may allow the app to share or save your calendar data,
-       regardless of confidentiality or sensitivity.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readCalendar" product="default">Allows the app to
-       read all calendar events stored on your phone, including those of friends
-       or co-workers. This may allow the app to share or save your calendar data,
-       regardless of confidentiality or sensitivity.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_writeCalendar">add or modify calendar events and send email to guests without owners\' knowledge</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_writeCalendar" product="tablet">Allows the app to
-        add, remove, change events that you can modify on your tablet, including
-        those of friends or co-workers. This may allow the app to send messages
-        that appear to come from calendar owners, or modify events without the
-        owners\' knowledge.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_writeCalendar" product="tv">Allows the app to
-        add, remove, change events that you can modify on your TV, including
-        those of friends or co-workers. This may allow the app to send messages
-        that appear to come from calendar owners, or modify events without the
-        owners\' knowledge.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_writeCalendar" product="default">Allows the app to
-        add, remove, change events that you can modify on your phone, including
-        those of friends or co-workers. This may allow the app to send messages
-        that appear to come from calendar owners, or modify events without the
-        owners\' knowledge.</string>
-
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_accessLocationExtraCommands">access extra location provider commands</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_accessLocationExtraCommands">Allows the app to access
-        extra location provider commands.  This may allow the app to interfere
-        with the operation of the GPS or other location sources.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_accessFineLocation">access precise location (GPS and
-      network-based)</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_accessFineLocation">Allows the app to get your
-      precise location using the Global Positioning System (GPS) or network
-      location sources such as cell towers and Wi-Fi. These location services
-      must be turned on and available to your device for the app to use them.
-      Apps may use this to determine where you are, and may consume additional
-      battery power.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_accessCoarseLocation">access approximate location
-      (network-based)</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_accessCoarseLocation">Allows the app to get your
-      approximate location. This location is derived by location services using
-      network location sources such as cell towers and Wi-Fi. These location
-      services must be turned on and available to your device for the app to
-      use them. Apps may use this to determine approximately where you
-      are.</string>
-
- <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_modifyAudioSettings">change your audio settings</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_modifyAudioSettings">Allows the app to modify global audio settings such as volume and which speaker is used for output.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_recordAudio">record audio</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_recordAudio">Allows the app to record audio with the
-      microphone.  This permission allows the app to record audio at any time
-      without your confirmation.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_sim_communication">send commands to the SIM</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_sim_communication">Allows the app to send commands to the SIM. This is very dangerous.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_camera">take pictures and videos</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_camera">Allows the app to take pictures and videos
-      with the camera.  This permission allows the app to use the camera at any
-      time without your confirmation.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_vibrate">control vibration</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_vibrate">Allows the app to control the vibrator.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_callPhone">directly call phone numbers</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_callPhone">Allows the app to call phone numbers
-      without your intervention. This may result in unexpected charges or calls.
-      Note that this doesn\'t allow the app to call emergency numbers.
-      Malicious apps may cost you money by making calls without your
-      confirmation.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_accessImsCallService">access IMS call service</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_accessImsCallService">Allows the app to use the IMS service to make calls without your intervention.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_readPhoneState">read phone status and identity</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readPhoneState">Allows the app to access the phone
-      features of the device.  This permission allows the app to determine the
-      phone number and device IDs, whether a call is active, and the remote number
-      connected by a call.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_wakeLock" product="tablet">prevent tablet from sleeping</string>
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_wakeLock" product="tv">prevent TV from sleeping</string>
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_wakeLock" product="default">prevent phone from sleeping</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_wakeLock" product="tablet">Allows the app to prevent the tablet from going to sleep.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_wakeLock" product="tv">Allows the app to prevent the TV from going to sleep.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_wakeLock" product="default">Allows the app to prevent the phone from going to sleep.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_transmitIr">transmit infrared</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_transmitIr" product="tablet">Allows the app to use the tablet\'s infrared transmitter.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_transmitIr" product="tv">Allows the app to use the TV\'s infrared transmitter.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_transmitIr" product="default">Allows the app to use the phone\'s infrared transmitter.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_setWallpaper">set wallpaper</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_setWallpaper">Allows the app to set the system wallpaper.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_setWallpaperHints">adjust your wallpaper size</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_setWallpaperHints">Allows the app to set the system wallpaper size hints.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_setTimeZone">set time zone</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_setTimeZone" product="tablet">Allows the app to change the tablet\'s time zone.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_setTimeZone" product="tv">Allows the app to change the TV\'s time zone.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_setTimeZone" product="default">Allows the app to change the phone\'s time zone.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_getAccounts">find accounts on the device</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_getAccounts" product="tablet">Allows the app to get
-      the list of accounts known by the tablet.  This may include any accounts
-      created by applications you have installed.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_getAccounts" product="tv">Allows the app to get
-      the list of accounts known by the TV.  This may include any accounts
-      created by applications you have installed.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_getAccounts" product="default">Allows the app to get
-      the list of accounts known by the phone.  This may include any accounts
-      created by applications you have installed.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_accessNetworkState">view network connections</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_accessNetworkState">Allows the app to view
-      information about network connections such as which networks exist and are
-      connected.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_createNetworkSockets">have full network access</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_createNetworkSockets">Allows the app to create
-     network sockets and use custom network protocols. The browser and other
-     applications provide means to send data to the internet, so this
-     permission is not required to send data to the internet.</string>
-
- <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_changeNetworkState">change network connectivity</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_changeNetworkState">Allows the app to change the state of network connectivity.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_changeTetherState">change tethered connectivity</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the applicaiton to do this. -->
-    <string name="permdesc_changeTetherState">Allows the app to change the state of tethered network connectivity.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_accessWifiState">view Wi-Fi connections</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_accessWifiState">Allows the app to view information
-      about Wi-Fi networking, such as whether Wi-Fi is enabled and name of
-      connected Wi-Fi devices.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_changeWifiState">connect and disconnect from Wi-Fi</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_changeWifiState">Allows the app to connect to and
-      disconnect from Wi-Fi access points and to make changes to device
-      configuration for Wi-Fi networks.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_changeWifiMulticastState">allow Wi-Fi Multicast reception</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_changeWifiMulticastState" product="tablet">Allows the app to receive
-      packets sent to all devices on a Wi-Fi network using multicast addresses,
-      not just your tablet.  It uses more power than the non-multicast mode.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_changeWifiMulticastState" product="tv">Allows the app to receive
-      packets sent to all devices on a Wi-Fi network using multicast addresses,
-      not just your TV.  It uses more power than the non-multicast mode.</string>
-    <string name="permdesc_changeWifiMulticastState" product="default">Allows the app to receive
-      packets sent to all devices on a Wi-Fi network using multicast addresses,
-      not just your phone.  It uses more power than the non-multicast mode.</string>
-
- <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_bluetoothAdmin">access Bluetooth settings</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bluetoothAdmin" product="tablet">Allows the app to
-      configure the local Bluetooth tablet, and to discover and pair with remote
-      devices.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bluetoothAdmin" product="tv">Allows the app to
-      configure the local Bluetooth TV, and to discover and pair with remote
-      devices.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bluetoothAdmin" product="default">Allows the app to configure
-      the local Bluetooth phone, and to discover and pair with remote devices.</string>
-
-    <string name="permlab_accessWimaxState">connect and disconnect from WiMAX</string>
-    <string name="permdesc_accessWimaxState">Allows the app to determine whether
-     WiMAX is enabled and information about any WiMAX networks that are
-     connected. </string>
-
-    <string name="permlab_changeWimaxState">change WiMAX state</string>
-    <string name="permdesc_changeWimaxState" product="tablet">Allows the app to
-      connect the tablet to and disconnect the tablet from WiMAX networks.</string>
-    <string name="permdesc_changeWimaxState" product="tv">Allows the app to
-      connect the TV to and disconnect the TV from WiMAX networks.</string>
-    <string name="permdesc_changeWimaxState" product="default">Allows the app to
-      connect the phone to and disconnect the phone from WiMAX networks.</string>
-
- <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_bluetooth">pair with Bluetooth devices</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bluetooth" product="tablet">Allows the app to view the
-      configuration of Bluetooth on the tablet, and to make and accept
-      connections with paired devices.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bluetooth" product="tv">Allows the app to view the
-      configuration of Bluetooth on the TV, and to make and accept
-      connections with paired devices.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bluetooth" product="default">Allows the app to view the
-      configuration of the Bluetooth on the phone, and to make and accept
-      connections with paired devices.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_nfc">control Near Field Communication</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_nfc">Allows the app to communicate
-      with Near Field Communication (NFC) tags, cards, and readers.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_disableKeyguard">disable your screen lock</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_disableKeyguard">Allows the app to disable the
-      keylock and any associated password security.  For example, the phone
-      disables the keylock when receiving an incoming phone call, then
-      re-enables the keylock when the call is finished.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_manageFingerprint">manage fingerprint hardware</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_manageFingerprint">Allows the app to invoke methods to add and delete fingerprint templates for use.</string>
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_useFingerprint">use fingerprint hardware</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_useFingerprint">Allows the app to use fingerprint hardware for authentication</string>
-
-    <!-- Message shown during fingerprint acquisision when the fingerprint cannot be recognized -->
-    <string name="fingerprint_acquired_partial">Partial fingerprint detected. Please try again.</string>
-    <!-- Message shown during fingerprint acquisision when the fingerprint cannot be recognized -->
-    <string name="fingerprint_acquired_insufficient">Couldn\'t process fingerprint. Please try again.</string>
-    <!-- Message shown during fingerprint acquisision when the fingerprint sensor needs cleaning -->
-    <string name="fingerprint_acquired_imager_dirty">Fingerprint sensor is dirty. Please clean and try again.</string>
-    <!-- Message shown during fingerprint acquisision when the user removes their finger from the sensor too quickly -->
-    <string name="fingerprint_acquired_too_fast">Finger moved too fast. Please try again.</string>
-    <!-- Message shown during fingerprint acquisision when the user moves their finger too slowly -->
-    <string name="fingerprint_acquired_too_slow">Finger moved too slow. Please try again.</string>
-    <!-- Array containing custom messages shown during fingerprint acquisision from vendor.  Vendor is expected to add and translate these strings -->
-    <string-array name="fingerprint_acquired_vendor">
-    </string-array>
-
-    <!-- Error message shown when the fingerprint hardware can't be accessed -->
-    <string name="fingerprint_error_hw_not_available">Fingerprint hardware not available.</string>
-    <!-- Error message shown when the fingerprint hardware has run out of room for storing fingerprints -->
-    <string name="fingerprint_error_no_space">Fingerprint can\'t be stored. Please remove an existing fingerprint.</string>
-    <!-- Error message shown when the fingerprint hardware timer has expired and the user needs to restart the operation. -->
-    <string name="fingerprint_error_timeout">Fingerprint time out reached. Try again.</string>
-    <!-- Generic error message shown when the fingerprint operation (e.g. enrollment or authentication) is canceled. Generally not shown to the user-->
-    <string name="fingerprint_error_canceled">Fingerprint operation canceled.</string>
-    <!-- Generic error message shown when the fingerprint operation fails because too many attempts have been made. -->
-    <string name="fingerprint_error_lockout">Too many attempts. Try again later.</string>
-    <!-- Generic error message shown when the fingerprint hardware can't recognize the fingerprint -->
-    <string name="fingerprint_error_unable_to_process">Try again.</string>
-
-    <!-- Template to be used to name enrolled fingerprints by default. -->
-    <string name="fingerprint_name_template">Finger <xliff:g id="fingerId" example="1">%d</xliff:g></string>
-
-    <!-- Array containing custom error messages from vendor.  Vendor is expected to add and translate these strings -->
-    <string-array name="fingerprint_error_vendor">
-    </string-array>
-
-    <!-- Content description which should be used for the fingerprint icon. -->
-    <string name="fingerprint_icon_content_description">Fingerprint icon</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_readSyncSettings">read sync settings</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readSyncSettings">Allows the app to read the sync settings for an account. For example, this can determine whether the People app is synced with an account.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_writeSyncSettings">toggle sync on and off</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_writeSyncSettings">Allows an app to modify the sync settings for an account.  For example, this can be used to enable sync of the People app with an account.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_readSyncStats">read sync statistics</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readSyncStats">Allows an app to read the sync stats for an account, including the history of sync events and how much data is synced. </string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=30] -->
-    <string name="permlab_sdcardRead" product="nosdcard">read the contents of your USB storage</string>
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_sdcardRead" product="default">read the contents of your SD card</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=30] -->
-    <string name="permdesc_sdcardRead" product="nosdcard">Allows the app to read the contents of your USB storage.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_sdcardRead" product="default">Allows the app to read the contents of your SD card.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=30] -->
-    <string name="permlab_sdcardWrite" product="nosdcard">modify or delete the contents of your USB storage</string>
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_sdcardWrite" product="default">modify or delete the contents of your SD card</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=30] -->
-    <string name="permdesc_sdcardWrite" product="nosdcard">Allows the app to write to the USB storage.</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_sdcardWrite" product="default">Allows the app to write to the SD card.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_use_sip">make/receive SIP calls</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_use_sip">Allows the app to make and receive SIP calls.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_register_sim_subscription">register new telecom SIM connections</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_register_sim_subscription">Allows the app to register new telecom SIM connections.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_register_call_provider">register new telecom connections</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_register_call_provider">Allows the app to register new telecom connections.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_connection_manager">manage telecom connections</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_connection_manager">Allows the app to manage telecom connections.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_bind_incall_service">interact with in-call screen</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bind_incall_service">Allows the app to control when and how the user sees the in-call screen.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_bind_connection_service">interact with telephony services</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bind_connection_service">Allows the app to interact with telephony services to make/receive calls.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_control_incall_experience">provide an in-call user experience</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_control_incall_experience">Allows the app to provide an in-call user experience.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_readNetworkUsageHistory">read historical network usage</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_readNetworkUsageHistory">Allows the app to read historical network usage for specific networks and apps.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_manageNetworkPolicy">manage network policy</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_manageNetworkPolicy">Allows the app to manage network policies and define app-specific rules.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_modifyNetworkAccounting">modify network usage accounting</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_modifyNetworkAccounting">Allows the app to modify how network usage is accounted against apps. Not for use by normal apps.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_accessNotifications">access notifications</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_accessNotifications">Allows the app to retrieve, examine, and clear notifications, including those posted by other apps.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_bindNotificationListenerService">bind to a notification listener service</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bindNotificationListenerService">Allows the holder to bind to the top-level interface of a notification listener service. Should never be needed for normal apps.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_bindConditionProviderService">bind to a condition provider service</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bindConditionProviderService">Allows the holder to bind to the top-level interface of a condition provider service. Should never be needed for normal apps.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_bindDreamService">bind to a dream service</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bindDreamService">Allows the holder to bind to the top-level interface of a dream service. Should never be needed for normal apps.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_invokeCarrierSetup">invoke the carrier-provided configuration app</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_invokeCarrierSetup">Allows the holder to invoke the carrier-provided configuration app. Should never be needed for normal apps.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_accessNetworkConditions">listen for observations on network conditions</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_accessNetworkConditions">Allows an application to listen for observations on network conditions. Should never be needed for normal apps.</string>
-
-    <string name="permlab_setInputCalibration">change input device calibration</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_setInputCalibration">Allows the app to modify the calibration parameters of the touch screen. Should never be needed for normal apps.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_accessDrmCertificates">access DRM certificates</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_accessDrmCertificates">Allows an application to provision and use DRM certficates. Should never be needed for normal apps.</string>
-
-    <string name="permlab_handoverStatus">receive Android Beam transfer status</string>
-    <string name="permdesc_handoverStatus">Allows this application to receive information about current Android Beam transfers</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_removeDrmCertificates">remove DRM certificates</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_removeDrmCertificates">Allows an application to remove DRM certficates. Should never be needed for normal apps.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_bindCarrierMessagingService">bind to a carrier messaging service</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bindCarrierMessagingService">Allows the holder to bind to the top-level interface of a carrier messaging service. Should never be needed for normal apps.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permlab_bindCarrierServices">bind to carrier services</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_bindCarrierServices">Allows the holder to bind to carrier services. Should never be needed for normal apps.</string>
-
-    <!-- Title of an application permission, for applications that wish to access notification policy. -->
-    <string name="permlab_access_notification_policy">access Do Not Disturb</string>
-    <!-- Description of an application permission, listed so the user can choose whether they want to allow the application to do this. -->
-    <string name="permdesc_access_notification_policy">Allows the app to read and write Do Not Disturb configuration.</string>
-
-    <!-- Policy administration -->
-
-    <!-- Title of policy access to limiting the user's password choices -->
-    <string name="policylab_limitPassword">Set password rules</string>
-    <!-- Description of policy access to limiting the user's password choices -->
-    <string name="policydesc_limitPassword">Control the length and the characters allowed in screen lock passwords and PINs.</string>
-    <!-- Title of policy access to watch user login attempts -->
-    <string name="policylab_watchLogin">Monitor screen-unlock attempts</string>
-    <!-- Description of policy access to watch user login attempts -->
-    <string name="policydesc_watchLogin" product="tablet">Monitor the number of incorrect passwords
-    typed when unlocking the screen, and lock the tablet or erase all the tablet\'s
-    data if too many incorrect passwords are typed.</string>
-    <!-- Description of policy access to watch user login attempts -->
-    <string name="policydesc_watchLogin" product="TV">Monitor the number of incorrect passwords
-    typed when unlocking the screen, and lock the TV or erase all the TV\'s
-    data if too many incorrect passwords are typed.</string>
-    <!-- Description of policy access to watch user login attempts -->
-    <string name="policydesc_watchLogin" product="default">Monitor the number of incorrect passwords
-    typed. when unlocking the screen, and lock the phone or erase all the phone\'s
-    data if too many incorrect passwords are typed.</string>
-    <string name="policydesc_watchLogin_secondaryUser" product="tablet">Monitor the number of incorrect passwords
-    typed when unlocking the screen, and lock the tablet or erase all this user\'s data
-    if too many incorrect passwords are typed.</string>
-    <string name="policydesc_watchLogin_secondaryUser" product="TV">Monitor the number of incorrect passwords
-    typed when unlocking the screen, and lock the TV or erase all this user\'s data
-    if too many incorrect passwords are typed.</string>
-    <string name="policydesc_watchLogin_secondaryUser" product="default">Monitor the number of incorrect passwords
-    typed when unlocking the screen, and lock the phone or erase all this user\'s data
-    if too many incorrect passwords are typed.</string>
-    <!-- Title of policy access to reset user's password -->
-    <string name="policylab_resetPassword">Change the screen lock</string>
-    <!-- Description of policy access to reset user's password -->
-    <string name="policydesc_resetPassword">Change the screen lock.</string>
-    <!-- Title of policy access to force lock the device -->
-    <string name="policylab_forceLock">Lock the screen</string>
-    <!-- Description of policy access to limiting the user's password choices -->
-    <string name="policydesc_forceLock">Control how and when the screen locks.</string>
-    <!-- Title of policy access to wipe primary user's data -->
-    <string name="policylab_wipeData">Erase all data</string>
-    <!-- Description of policy access to wipe the user's data -->
-    <string name="policydesc_wipeData" product="tablet">Erase the tablet\'s data without warning by performing a factory data reset.</string>
-    <!-- Description of policy access to wipe the user's data -->
-    <string name="policydesc_wipeData" product="tv">Erase the TV\'s data without warning by performing a factory data reset.</string>
-    <!-- Description of policy access to wipe the user's data -->
-    <string name="policydesc_wipeData" product="default">Erase the phone\'s data without warning by performing a factory data reset.</string>
-    <!-- Title of policy access to wipe secondary user's data -->
-    <string name="policylab_wipeData_secondaryUser">Erase user data</string>
-    <!-- Description of policy access to wipe the user's data -->
-    <string name="policydesc_wipeData_secondaryUser" product="tablet">Erase this user\'s data on this tablet without warning.</string>
-    <!-- Description of policy access to wipe the user's data -->
-    <string name="policydesc_wipeData_secondaryUser" product="tv">Erase this user\'s data on this TV without warning.</string>
-    <!-- Description of policy access to wipe the user's data -->
-    <string name="policydesc_wipeData_secondaryUser" product="default">Erase this user\'s data on this phone without warning.</string>
-    <!-- Title of policy access to set global proxy -->
-    <string name="policylab_setGlobalProxy">Set the device global proxy</string>
-    <!-- Description of policy access to set global proxy -->
-    <string name="policydesc_setGlobalProxy">Set the device global proxy
-    to be used while policy is enabled. Only the device owner can set the global proxy.</string>
-    <!-- Title of policy access to enforce password expiration [CHAR LIMIT=50]-->
-    <string name="policylab_expirePassword">Set screen lock password expiration</string>
-    <!-- Description of policy access to enforce password expiration [CHAR LIMIT=110]-->
-    <string name="policydesc_expirePassword">Change how frequently the screen lock password, PIN, or pattern must be changed.</string>
-    <!-- Title of policy access to require encrypted storage [CHAR LIMIT=30]-->
-    <string name="policylab_encryptedStorage">Set storage encryption</string>
-    <!-- Description of policy access to require encrypted storage [CHAR LIMIT=110]-->
-    <string name="policydesc_encryptedStorage">Require that stored app data be encrypted.</string>
-    <!-- Title of policy access to disable all device cameras [CHAR LIMIT=30]-->
-    <string name="policylab_disableCamera">Disable cameras</string>
-    <!-- Description of policy access to disable all device cameras [CHAR LIMIT=110]-->
-    <string name="policydesc_disableCamera">Prevent use of all device cameras.</string>
-    <!-- Title of policy access to disable keyguard features [CHAR LIMIT=30]-->
-    <string name="policylab_disableKeyguardFeatures">Disable some screen lock features</string>
-    <!-- Description of policy access to disable keyguard features. [CHAR LIMIT=110]-->
-    <string name="policydesc_disableKeyguardFeatures">Prevent use of some screen lock features.</string>
-
-    <!-- The order of these is important, don't reorder without changing Contacts.java --> <skip />
-    <!-- Phone number types from android.provider.Contacts. This could be used when adding a new phone number for a contact, for example. -->
-    <string-array name="phoneTypes">
-        <item>Home</item>
-        <item>Mobile</item>
-        <item>Work</item>
-        <item>Work Fax</item>
-        <item>Home Fax</item>
-        <item>Pager</item>
-        <item>Other</item>
-        <item>Custom</item>
-    </string-array>
-
-    <!-- The order of these is important, don't reorder without changing Contacts.java --> <skip />
-    <!-- Email address types from android.provider.Contacts. This could be used when adding a new e-mail address for a contact, for example. -->
-    <string-array name="emailAddressTypes">
-        <item>Home</item>
-        <item>Work</item>
-        <item>Other</item>
-        <item>Custom</item>
-    </string-array>
-
-    <!-- The order of these is important, don't reorder without changing Contacts.java --> <skip />
-    <!-- Postal address types from android.provider.Contacts. This could be used when adding a new address for a contact, for example. -->
-    <string-array name="postalAddressTypes">
-        <item>Home</item>
-        <item>Work</item>
-        <item>Other</item>
-        <item>Custom</item>
-    </string-array>
-
-    <!-- The order of these is important, don't reorder without changing Contacts.java --> <skip />
-    <!-- Instant Messenger ID types from android.provider.Contacts. This could be used when adding a new IM for a contact, for example. -->
-    <string-array name="imAddressTypes">
-        <item>Home</item>
-        <item>Work</item>
-        <item>Other</item>
-        <item>Custom</item>
-    </string-array>
-
-    <!-- The order of these is important, don't reorder without changing Contacts.java --> <skip />
-    <!-- Organization types from android.provider.Contacts. This could be used when adding a new organization for a contact, for example. -->
-    <string-array name="organizationTypes">
-        <item>Work</item>
-        <item>Other</item>
-        <item>Custom</item>
-    </string-array>
-
-    <!-- The order of these is important, don't reorder without changing Contacts.java --> <skip />
-    <!-- Instant Message protocols/providers from android.provider.Contacts -->
-    <string-array name="imProtocols">
-        <item>AIM</item>
-        <item>Windows Live</item>
-        <item>Yahoo</item>
-        <item>Skype</item>
-        <item>QQ</item>
-        <item>Google Talk</item>
-        <item>ICQ</item>
-        <item>Jabber</item>
-    </string-array>
-
-    <!-- Custom phone number type -->
-    <string name="phoneTypeCustom">Custom</string>
-    <!-- Home phone number type -->
-    <string name="phoneTypeHome">Home</string>
-    <!-- Mobile phone number type -->
-    <string name="phoneTypeMobile">Mobile</string>
-    <!-- Work phone number type -->
-    <string name="phoneTypeWork">Work</string>
-    <!-- Work fax phone number type -->
-    <string name="phoneTypeFaxWork">Work Fax</string>
-    <!-- Home fax phone number type -->
-    <string name="phoneTypeFaxHome">Home Fax</string>
-    <!-- Pager phone number type -->
-    <string name="phoneTypePager">Pager</string>
-    <!-- Other phone number type -->
-    <string name="phoneTypeOther">Other</string>
-    <!-- Callback phone number type -->
-    <string name="phoneTypeCallback">Callback</string>
-    <!-- Car phone number type -->
-    <string name="phoneTypeCar">Car</string>
-    <!-- Company main phone number type -->
-    <string name="phoneTypeCompanyMain">Company Main</string>
-    <!-- ISDN phone number type -->
-    <string name="phoneTypeIsdn">ISDN</string>
-    <!-- Main phone number type -->
-    <string name="phoneTypeMain">Main</string>
-    <!-- Other fax phone number type -->
-    <string name="phoneTypeOtherFax">Other Fax</string>
-    <!-- Radio phone number type -->
-    <string name="phoneTypeRadio">Radio</string>
-    <!-- Telex phone number type -->
-    <string name="phoneTypeTelex">Telex</string>
-    <!-- TTY TDD phone number type -->
-    <string name="phoneTypeTtyTdd">TTY TDD</string>
-    <!-- Work mobile phone number type -->
-    <string name="phoneTypeWorkMobile">Work Mobile</string>
-    <!-- Work pager phone number type -->
-    <string name="phoneTypeWorkPager">Work Pager</string>
-    <!-- Assistant phone number type -->
-    <string name="phoneTypeAssistant">Assistant</string>
-    <!-- MMS phone number type -->
-    <string name="phoneTypeMms">MMS</string>
-
-    <!-- Label for custom events  [CHAR LIMIT=20] -->
-    <string name="eventTypeCustom">Custom</string>
-    <!-- Label for a birthday event  [CHAR LIMIT=20] -->
-    <string name="eventTypeBirthday">Birthday</string>
-    <!-- Label for an anniversary event  [CHAR LIMIT=20] -->
-    <string name="eventTypeAnniversary">Anniversary</string>
-    <!-- Label for other events  [CHAR LIMIT=20] -->
-    <string name="eventTypeOther">Other</string>
-
-    <!-- Custom email type -->
-    <string name="emailTypeCustom">Custom</string>
-    <!-- Home email type -->
-    <string name="emailTypeHome">Home</string>
-    <!-- Work email type -->
-    <string name="emailTypeWork">Work</string>
-    <!-- Other email type -->
-    <string name="emailTypeOther">Other</string>
-    <!-- Mobile email type -->
-    <string name="emailTypeMobile">Mobile</string>
-
-    <!-- Custom postal address type -->
-    <string name="postalTypeCustom">Custom</string>
-    <!-- Home postal address type -->
-    <string name="postalTypeHome">Home</string>
-    <!-- Work postal address type -->
-    <string name="postalTypeWork">Work</string>
-    <!-- Other postal address type -->
-    <string name="postalTypeOther">Other</string>
-
-    <!-- Custom IM address type -->
-    <string name="imTypeCustom">Custom</string>
-    <!-- Home IM address type -->
-    <string name="imTypeHome">Home</string>
-    <!-- Work IM address type -->
-    <string name="imTypeWork">Work</string>
-    <!-- Other IM address type -->
-    <string name="imTypeOther">Other</string>
-
-    <!-- Custom IM protocol type -->
-    <string name="imProtocolCustom">Custom</string>
-    <!-- AIM IM protocol type -->
-    <string name="imProtocolAim">AIM</string>
-    <!-- MSN IM protocol type -->
-    <string name="imProtocolMsn">Windows Live</string>
-    <!-- Yahoo IM protocol type -->
-    <string name="imProtocolYahoo">Yahoo</string>
-    <!-- Skype IM protocol type -->
-    <string name="imProtocolSkype">Skype</string>
-    <!-- QQ IM protocol type -->
-    <string name="imProtocolQq">QQ</string>
-    <!-- Google Talk IM protocol type -->
-    <string name="imProtocolGoogleTalk">Hangouts</string>
-    <!-- ICQ IM protocol type -->
-    <string name="imProtocolIcq">ICQ</string>
-    <!-- Jabber IM protocol type -->
-    <string name="imProtocolJabber">Jabber</string>
-    <!-- NetMeeting IM protocol type -->
-    <string name="imProtocolNetMeeting">NetMeeting</string>
-
-    <!-- Work organization type -->
-    <string name="orgTypeWork">Work</string>
-    <!-- Other organization type -->
-    <string name="orgTypeOther">Other</string>
-    <!-- Custom organization type -->
-    <string name="orgTypeCustom">Custom</string>
-
-    <!-- Custom relationship custom [CHAR LIMIT=20] -->
-    <string name="relationTypeCustom">Custom</string>
-    <!-- Assistant relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeAssistant">Assistant</string>
-    <!-- Brother relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeBrother">Brother</string>
-    <!-- Child relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeChild">Child</string>
-    <!-- Domestic Partner relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeDomesticPartner">Domestic Partner</string>
-    <!-- Father relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeFather">Father</string>
-    <!-- Friend relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeFriend">Friend</string>
-    <!-- Manager relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeManager">Manager</string>
-    <!-- Mother relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeMother">Mother</string>
-    <!-- Parent relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeParent">Parent</string>
-    <!-- Partner relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypePartner">Partner</string>
-    <!-- Referred by relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeReferredBy">Referred by</string>
-    <!-- Relative relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeRelative">Relative</string>
-    <!-- Sister relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeSister">Sister</string>
-    <!-- Spouse relationship type [CHAR LIMIT=20] -->
-    <string name="relationTypeSpouse">Spouse</string>
-
-    <!-- Custom SIP address type. Same context as Custom phone type.  -->
-    <string name="sipAddressTypeCustom">Custom</string>
-    <!-- Home SIP address type. Same context as Home phone type. -->
-    <string name="sipAddressTypeHome">Home</string>
-    <!-- Work SIP address type. Same context as Work phone type. -->
-    <string name="sipAddressTypeWork">Work</string>
-    <!-- Other SIP address type. Same context as Other phone type. -->
-    <string name="sipAddressTypeOther">Other</string>
-
-    <!-- Error message that is displayed when the user clicks on a quick contacts badge, but
-         there is no contacts application installed that can display the quick contact -->
-    <string name="quick_contacts_not_available">No application found to view this contact.</string>
-
-    <!-- Instructions telling the user to enter their SIM PIN to unlock the keyguard.
-         Displayed in one line in a large font.  -->
-    <string name="keyguard_password_enter_pin_code">Type PIN code</string>
-
-    <!-- Instructions telling the user to enter their SIM PUK to unlock the keyguard.
-         Displayed in one line in a large font.  -->
-    <string name="keyguard_password_enter_puk_code">Type PUK and new PIN code</string>
-
-    <!-- Prompt to enter SIM PUK in Edit Text Box in unlock screen -->
-    <string name="keyguard_password_enter_puk_prompt">PUK code</string>
-    <!-- Prompt to enter New SIM PIN in Edit Text Box in unlock screen -->
-    <string name="keyguard_password_enter_pin_prompt">New PIN code</string>
-
-    <!-- Displayed as hint in passwordEntry EditText on PasswordUnlockScreen [CHAR LIMIT=30]-->
-    <string name="keyguard_password_entry_touch_hint"><font size="17">Tap to type password</font></string>
-
-    <!-- Instructions telling the user to enter their text password to unlock the keyguard.
-         Displayed in one line in a large font.  -->
-    <string name="keyguard_password_enter_password_code">Type password to unlock</string>
-
-    <!-- Instructions telling the user to enter their PIN password to unlock the keyguard.
-         Displayed in one line in a large font.  -->
-    <string name="keyguard_password_enter_pin_password_code">Type PIN to unlock</string>
-
-    <!-- Instructions telling the user that they entered the wrong pin while trying
-         to unlock the keyguard.  Displayed in one line in a large font.  -->
-    <string name="keyguard_password_wrong_pin_code">Incorrect PIN code.</string>
-
-    <!-- Instructions telling the user how to unlock the phone. -->
-    <string name="keyguard_label_text">To unlock, press Menu then 0.</string>
-
-    <!-- This can be used in any application wanting to disable the text "Emergency number" -->
-    <string name="emergency_call_dialog_number_for_display">Emergency number</string>
-
-    <!--
-       *** touch based lock / unlock ***
-                                          --> <skip />
-
-    <!-- On the keyguard screen, it shows the carrier the phone is connected to.  This is displayed if the phone is not connected to a carrier.-->
-    <string name="lockscreen_carrier_default">No service</string>
-
-    <!-- Shown in the lock screen to tell the user that the screen is locked. -->
-    <string name="lockscreen_screen_locked">Screen locked.</string>
-
-    <!-- when pattern lock is enabled, tell them about the emergency dial -->
-    <string name="lockscreen_instructions_when_pattern_enabled">Press Menu to unlock or place emergency call.</string>
-
-    <!-- On the keyguard screen, when pattern lock is disabled, only tell them to press menu to unlock.  This is shown in small font at the bottom. -->
-    <string name="lockscreen_instructions_when_pattern_disabled">Press Menu to unlock.</string>
-
-    <!-- On the unlock pattern screen, shown at the top of the unlock screen to tell the user what to do. Below this text is the place for theu ser to draw the pattern. -->
-    <string name="lockscreen_pattern_instructions">Draw pattern to unlock</string>
-    <!-- Button at the bottom of the unlock screen to make an emergency call or access other emergency assistance functions. -->
-    <string name="lockscreen_emergency_call">Emergency</string>
-    <!-- Button at the bottom of the unlock screen that lets the user return to a call -->
-    <string name="lockscreen_return_to_call">Return to call</string>
-    <!-- Shown to confirm that the user entered their lock pattern correctly. -->
-    <string name="lockscreen_pattern_correct">Correct!</string>
-    <!-- On the unlock pattern screen, shown when the user enters the wrong lock pattern and must try again. -->
-    <string name="lockscreen_pattern_wrong">Try again</string>
-    <!-- On the unlock password screen, shown when the user enters the wrong lock password and must try again. -->
-    <string name="lockscreen_password_wrong">Try again</string>
-
-    <!-- On the keyguard screen, this string explains that some features or data may not be available until the device is unlocked. [CHAR LIMIT=48] -->
-    <string name="lockscreen_storage_locked">Unlock for all features and data</string>
-
-    <!-- Shown when face unlock failed multiple times so we're just using the backup -->
-    <string name="faceunlock_multiple_failures">Maximum Face Unlock attempts exceeded</string>
-
-    <!-- Shown in the lock screen when there is no SIM card. -->
-    <string name="lockscreen_missing_sim_message_short">No SIM card</string>
-    <!-- Shown in the lock screen when there is no SIM card. -->
-    <string name="lockscreen_missing_sim_message" product="tablet">No SIM card in tablet.</string>
-    <!-- Shown in the lock screen when there is no SIM card. -->
-    <string name="lockscreen_missing_sim_message" product="tv">No SIM card in TV.</string>
-    <!-- Shown in the lock screen when there is no SIM card. -->
-    <string name="lockscreen_missing_sim_message" product="default">No SIM card in phone.</string>
-    <!-- Shown in the lock screen to ask the user to insert a SIM card. -->
-    <string name="lockscreen_missing_sim_instructions">Insert a SIM card.</string>
-    <!-- Shown in the lock screen to ask the user to insert a SIM card when sim is missing or not readable. -->
-    <string name="lockscreen_missing_sim_instructions_long">The SIM card is missing or not readable. Insert a SIM card.</string>
-    <!-- Shown in the lock screen when SIM card is permanently disabled. -->
-    <string name="lockscreen_permanent_disabled_sim_message_short">Unusable SIM card.</string>
-    <!-- Shown in the lock screen to inform the user to SIM card is permanently disabled. -->
-    <string name="lockscreen_permanent_disabled_sim_instructions">Your SIM card has been permanently disabled.\n
-    Contact your wireless service provider for another SIM card.</string>
-
-    <!-- Shown on transport control of lockscreen. Pressing button goes to previous track. -->
-    <string name="lockscreen_transport_prev_description">Previous track</string>
-    <!-- Shown on transport control of lockscreen. Pressing button goes to next track. -->
-    <string name="lockscreen_transport_next_description">Next track</string>
-    <!-- Shown on transport control of lockscreen. Pressing button pauses playback -->
-    <string name="lockscreen_transport_pause_description">Pause</string>
-    <!-- Shown on transport control of lockscreen. Pressing button pauses playback -->
-    <string name="lockscreen_transport_play_description">Play</string>
-    <!-- Shown on transport control of lockscreen. Pressing button pauses playback -->
-    <string name="lockscreen_transport_stop_description">Stop</string>
-    <!-- Shown on transport control screens. Pressing button rewinds playback [CHAR LIMIT=NONE]-->
-    <string name="lockscreen_transport_rew_description">Rewind</string>
-    <!-- Shown on transport control screens. Pressing button fast forwards playback [CHAR LIMIT=NONE]-->
-    <string name="lockscreen_transport_ffw_description">Fast forward</string>
-
-    <!-- Shown in the lock screen when there is emergency calls only mode. -->
-    <string name="emergency_calls_only" msgid="2485604591272668370">Emergency calls only</string>
-
-    <!-- When the user inserts a sim card from an unsupported network, it becomes network
-         locked -->
-    <string name="lockscreen_network_locked_message">Network locked</string>
-
-
-    <!-- When the user enters a wrong sim pin too many times, it becomes
-         PUK locked (Pin Unlock Kode) -->
-    <string name="lockscreen_sim_puk_locked_message">SIM card is PUK-locked.</string>
-    <!-- Shown in the lock screen when the SIM has become PUK locked and the user must call customer care to unlock it. -->
-    <string name="lockscreen_sim_puk_locked_instructions">See the User Guide or contact Customer Care.</string>
-
-    <!-- Shown in the lock screen to tell the user that their SIM is locked and they must unlock it. -->
-    <string name="lockscreen_sim_locked_message">SIM card is locked.</string>
-
-    <!-- For the unlock screen, When the user enters a sim unlock code, it takes a little while to check
-         whether it is valid, and to unlock the sim if it is valid.  we display a
-         progress dialog in the meantime.  this is the emssage. -->
-    <string name="lockscreen_sim_unlock_progress_dialog_message">Unlocking SIM card\u2026</string>
-
-    <!-- For the unlock screen, Information message shown in dialog when user has too many failed attempts at
-         drawing the unlock pattern -->
-    <string name="lockscreen_too_many_failed_attempts_dialog_message">
-        You have incorrectly drawn your unlock pattern <xliff:g id="number">%1$d</xliff:g> times.
-        \n\nTry again in <xliff:g id="number">%2$d</xliff:g> seconds.
-    </string>
-
-    <!-- For the unlock screen, Information message shown in dialog when user has too many failed attempts at
-         entering the password -->
-    <string name="lockscreen_too_many_failed_password_attempts_dialog_message">
-        You have incorrectly typed your password <xliff:g id="number">%1$d</xliff:g> times.
-        \n\nTry again in <xliff:g id="number">%2$d</xliff:g> seconds.
-    </string>
-
-    <!-- For the unlock screen, Information message shown in dialog when user has too many failed attempts at
-         entering the PIN -->
-    <string name="lockscreen_too_many_failed_pin_attempts_dialog_message">
-        You have incorrectly typed your PIN <xliff:g id="number">%1$d</xliff:g> times.
-        \n\nTry again in <xliff:g id="number">%2$d</xliff:g> seconds.
-    </string>
-
-    <!-- For the unlock screen, informational message shown in dialog when user is almost at the limit
-         where they will be locked out and may have to enter an alternate username/password to unlock the phone -->
-    <string name="lockscreen_failed_attempts_almost_glogin" product="tablet">
-        You have incorrectly drawn your unlock pattern <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       you will be asked to unlock your tablet using your Google signin.\n\n
-       Try again in <xliff:g id="number">%3$d</xliff:g> seconds.
-    </string>
-
-    <!-- For the unlock screen, informational message shown in dialog when user is almost at the limit
-         where they will be locked out and may have to enter an alternate username/password to unlock the phone -->
-    <string name="lockscreen_failed_attempts_almost_glogin" product="tv">
-        You have incorrectly drawn your unlock pattern <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       you will be asked to unlock your TV using your Google signin.\n\n
-       Try again in <xliff:g id="number">%3$d</xliff:g> seconds.
-    </string>
-
-    <!-- For the unlock screen, informational message shown in dialog when user is almost at the limit
-         where they will be locked out and may have to enter an alternate username/password to unlock the phone -->
-    <string name="lockscreen_failed_attempts_almost_glogin" product="default">
-        You have incorrectly drawn your unlock pattern <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       you will be asked to unlock your phone using your Google signin.\n\n
-       Try again in <xliff:g id="number">%3$d</xliff:g> seconds.
-    </string>
-
-    <!-- For the unlock screen, informational message shown in dialog when user is almost at the limit
-         where the device will be wiped. -->
-    <string name="lockscreen_failed_attempts_almost_at_wipe" product="tablet">
-       You have incorrectly attempted to unlock the tablet <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       the tablet will be reset to factory default and all user data will be lost.
-    </string>
-
-    <!-- For the unlock screen, informational message shown in dialog when user is almost at the limit
-         where the device will be wiped. -->
-    <string name="lockscreen_failed_attempts_almost_at_wipe" product="tv">
-       You have incorrectly attempted to unlock the TV <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       the TV will be reset to factory default and all user data will be lost.
-    </string>
-
-    <!-- For the unlock screen, informational message shown in dialog when user is almost at the limit
-         where the device will be wiped. -->
-    <string name="lockscreen_failed_attempts_almost_at_wipe" product="default">
-       You have incorrectly attempted to unlock the phone <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       the phone will be reset to factory default and all user data will be lost.
-    </string>
-
-    <!-- For the unlock screen, informational message shown in dialog when user has exceeded the
-        maximum attempts and the device will now be wiped -->
-    <string name="lockscreen_failed_attempts_now_wiping" product="tablet">
-       You have incorrectly attempted to unlock the tablet <xliff:g id="number">%d</xliff:g> times.
-       The tablet will now be reset to factory default.
-    </string>
-
-    <!-- For the unlock screen, informational message shown in dialog when user has exceeded the
-        maximum attempts and the device will now be wiped -->
-    <string name="lockscreen_failed_attempts_now_wiping" product="tv">
-       You have incorrectly attempted to unlock the TV <xliff:g id="number">%d</xliff:g> times.
-       The TV will now be reset to factory default.
-    </string>
-
-    <!-- For the unlock screen, informational message shown in dialog when user has exceeded the
-        maximum attempts and the device will now be wiped -->
-    <string name="lockscreen_failed_attempts_now_wiping" product="default">
-       You have incorrectly attempted to unlock the phone <xliff:g id="number">%d</xliff:g> times.
-       The phone will now be reset to factory default.
-    </string>
-
-    <!-- On the unlock screen, countdown message shown while user is waiting to try again after too many
-         failed attempts -->
-    <string name="lockscreen_too_many_failed_attempts_countdown">Try again in <xliff:g id="number">%d</xliff:g> seconds.</string>
-
-    <!-- On the unlock screen, message shown on button that appears once it's apparent the user may have forgotten
-         their lock gesture -->
-    <string name="lockscreen_forgot_pattern_button_text">Forgot pattern?</string>
-
-    <!-- Title of the unlock screen that uses your Google login and password when the user hit
-         the 'forgot pattern' button.-->
-    <string name="lockscreen_glogin_forgot_pattern">Account unlock</string>
-    <!-- Title of the unlock screen that uses your Google login and password when the user attempted
-         too many patterns and we are forcing them to use their account instead. -->
-    <string name="lockscreen_glogin_too_many_attempts">Too many pattern attempts</string>
-    <!-- In the unlock screen, message telling the user that they need to use their Google login and password to unlock the phone -->
-    <string name="lockscreen_glogin_instructions">To unlock, sign in with your Google account.</string>
-    <!-- Hint caption for the username field when unlocking the phone using login and password -->
-    <string name="lockscreen_glogin_username_hint">Username (email)</string>
-    <!-- Hint caption for the password field when unlocking the phone using login and password -->
-    <string name="lockscreen_glogin_password_hint">Password</string>
-    <!-- Button to try to unlock the phone using username and password -->
-    <string name="lockscreen_glogin_submit_button">Sign in</string>
-    <!-- Displayed to the user when unlocking the phone with a username and password fails. -->
-    <string name="lockscreen_glogin_invalid_input">Invalid username or password.</string>
-    <!-- Hint displayed on account unlock screen to advise the user on how to recover the account. -->
-    <string name="lockscreen_glogin_account_recovery_hint">Forgot your username or password\?\nVisit <b>google.com/accounts/recovery</b>.</string>
-
-    <!-- Displayed in a progress dialog while a username and password are being checked. -->
-    <string name="lockscreen_glogin_checking_password">Checking\u2026</string>
-    <!-- Displayed on lock screen's left tab - unlock -->
-    <string name="lockscreen_unlock_label">Unlock</string>
-    <!-- Displayed on lock screen's right tab - turn sound on -->
-    <string name="lockscreen_sound_on_label">Sound on</string>
-    <!-- Displayed on lock screen's right tab - turn sound off -->
-    <string name="lockscreen_sound_off_label">Sound off</string>
-
-    <!-- Accessibility description sent when user starts drawing a lock pattern. [CHAR LIMIT=NONE] -->
-    <string name="lockscreen_access_pattern_start">Pattern started</string>
-    <!-- Accessibility description sent when the pattern times out and is cleared. [CHAR LIMIT=NONE] -->
-    <string name="lockscreen_access_pattern_cleared">Pattern cleared</string>
-    <!-- Accessibility description sent when user adds a dot to the pattern. [CHAR LIMIT=NONE]  -->
-    <string name="lockscreen_access_pattern_cell_added">Cell added</string>
-    <!-- Accessibility description sent when user adds a dot to the pattern. Announces the 
-    actual cell when headphones are connected [CHAR LIMIT=NONE]  -->
-    <string name="lockscreen_access_pattern_cell_added_verbose">
-            Cell <xliff:g id="cell_index" example="3">%1$s</xliff:g> added</string>
-    <!-- Accessibility description sent when user completes drawing a pattern. [CHAR LIMIT=NONE] -->
-    <string name="lockscreen_access_pattern_detected">Pattern completed</string>
-    <!-- Accessibility description of the unlock pattern area. [CHAR_LIMIT=none] -->
-    <string name="lockscreen_access_pattern_area" msgid="">Pattern area.</string>
-
-    <!-- Accessibility description sent when user changes the current lock screen widget. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_widget_changed">%1$s. Widget %2$d of %3$d.</string>
-    <!-- Accessibility description of the add widget button. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_add_widget">Add widget.</string>
-    <!-- Accessibility description of the empty sidget slot (place holder for a new widget). [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_widget_empty_slot">Empty</string>
-    <!-- Accessibility description of the event of expanding an unlock area. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_unlock_area_expanded">Unlock area expanded.</string>
-    <!-- Accessibility description of the event of collapsing an unlock area. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_unlock_area_collapsed">Unlock area collapsed.</string>
-    <!-- Accessibility description of a lock screen widget. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_widget"><xliff:g id="widget_index">%1$s</xliff:g> widget.</string>
-    <!-- Accessibility description of the lock screen user selector widget. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_user_selector">User selector</string>
-    <!-- Accessibility description of the lock screen status widget. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_status">Status</string>
-    <!-- Accessibility description of the camera widget. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_camera">Camera</string>
-    <!-- Accessibility description of the lock media control widget. [CHAR_LIMIT=none] -->
-    <string name="keygaurd_accessibility_media_controls">Media controls</string>
-    <!-- Accessibility description of widget reordering start. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_widget_reorder_start">Widget reordering started.</string>
-    <!-- Accessibility description of widget reordering end. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_widget_reorder_end">Widget reordering ended.</string>
-    <!-- Accessibility description of the a widget deletion event. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_widget_deleted">Widget <xliff:g id="widget_index">%1$s</xliff:g> deleted.</string>
-    <!-- Accessibility description of the button to expand the lock area. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_expand_lock_area">Expand unlock area.</string>
-    <!-- Accessibility description of the slide unlock. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_slide_unlock">Slide unlock.</string>
-    <!-- Accessibility description of the pattern unlock. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_pattern_unlock">Pattern unlock.</string>
-    <!-- Accessibility description of the face unlock. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_face_unlock">Face unlock.</string>
-    <!-- Accessibility description of the pin lock. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_pin_unlock">Pin unlock.</string>
-    <!-- Accessibility description of the password lock. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_password_unlock">Password unlock.</string>
-    <!-- Accessibility description of the unlock pattern area. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_pattern_area">Pattern area.</string>
-    <!-- Accessibility description of the unlock slide area. [CHAR_LIMIT=none] -->
-    <string name="keyguard_accessibility_slide_area">Slide area.</string>
-
-    <!-- Password keyboard strings. Used by LockScreen and Settings --><skip />
-    <!-- Label for "switch to symbols" key.  Must be short to fit on key! -->
-    <string name="password_keyboard_label_symbol_key">\?123</string>
-    <!-- Label for "switch to alphabetic" key.  Must be short to fit on key! -->
-    <string name="password_keyboard_label_alpha_key">ABC</string>
-    <!-- Label for ALT modifier key.  Must be short to fit on key! -->
-    <string name="password_keyboard_label_alt_key">ALT</string>
-
-    <!-- Label for granularity to traverse the content on an AccessibilityNodeInfo by character. Only spoken to the user. [CHAR LIMIT=NONE] -->
-    <string name="granularity_label_character">character</string>
-    <!-- Label for granularity to traverse the content on an AccessibilityNodeInfo by word. Only spoken to the user. [CHAR LIMIT=NONE] -->
-    <string name="granularity_label_word">word</string>
-    <!-- Label for granularity to traverse the content on an AccessibilityNodeInfo by link. Only spoken to the user. [CHAR LIMIT=NONE] -->
-    <string name="granularity_label_link">link</string>
-    <!-- Label for granularity to traverse the content on an AccessibilityNodeInfo by line. Only spoken to the user. [CHAR LIMIT=NONE] -->
-    <string name="granularity_label_line">line</string>
-
-    <!-- Title of the alert when something went wrong in the factory test. -->
-    <string name="factorytest_failed">Factory test failed</string>
-    <!-- Error message displayed when a non-system application tries to start a factory test. -->
-    <string name="factorytest_not_system">The FACTORY_TEST action
-        is only supported for packages installed in /system/app.</string>
-    <!-- Error message displayed when the factory test could not be started. -->
-    <string name="factorytest_no_action">No package was found that provides the
-        FACTORY_TEST action.</string>
-    <!-- Button to restart the device after the factory test. -->
-    <string name="factorytest_reboot">Reboot</string>
-
-    <!-- Do not translate.  WebView User Agent string -->
-    <string name="web_user_agent" translatable="false">Mozilla/5.0 (Linux; U; <xliff:g id="x">Android %s</xliff:g>)
-        AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 <xliff:g id="mobile">%s</xliff:g>Safari/537.36</string>
-    <!-- Do not translate.  WebView User Agent targeted content -->
-    <string name="web_user_agent_target_content" translatable="false">"Mobile "</string>
-
-    <!-- Title for a JavaScript dialog. "The page at <url of current page> says:" -->
-    <string name="js_dialog_title">The page at \"<xliff:g id="title">%s</xliff:g>\" says:</string>
-    <!-- Default title for a javascript dialog -->
-    <string name="js_dialog_title_default">JavaScript</string>
-    <!-- Title for the unload javascript dialog -->
-    <string name="js_dialog_before_unload_title">Confirm Navigation</string>
-    <!-- Text for the positive button on the unload javascript dialog -->
-    <string name="js_dialog_before_unload_positive_button">Leave this Page</string>
-    <!-- Text for the negative button on the unload javascript dialog -->
-    <string name="js_dialog_before_unload_negative_button">Stay on this Page</string>
-    <!-- Message in a javascript dialog asking if the user wishes to leave the current page -->
-    <string name="js_dialog_before_unload"><xliff:g id="message">%s</xliff:g>\n\nAre you sure you want to navigate away from this page?</string>
-
-    <!-- Title of the WebView save password dialog.  If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. -->
-    <string name="save_password_label">Confirm</string>
-
-    <!-- Toast for double-tap -->
-    <string name="double_tap_toast">Tip: Double-tap to zoom in and out.</string>
-
-    <!-- Text to show in the auto complete drop down list on a text view when the WebView can auto fill the entire form, and the user has configured an AutoFill profile [CHAR-LIMIT=8] -->
-    <string name="autofill_this_form">Autofill</string>
-    <!-- Text to show in the auto complete drop down list on a text view when the WebView can auto fill the entire form but the user has not configured an AutoFill profile [CHAR-LIMIT=19] -->
-    <string name="setup_autofill">Set up Autofill</string>
-
-    <!-- String used to separate FirstName and LastName when writing out a local name
-         e.g. John<separator>Smith [CHAR-LIMIT=NONE]-->
-    <string name="autofill_address_name_separator">\u0020</string>
-    <!-- Format string for displaying a name. $1 is First Name, $2 is autofill_address_name_separator, $3 is Last Name.
-         e.g. (John)( )(Smith) -->
-    <string name="autofill_address_summary_name_format">$1$2$3</string>
-
-    <!-- String used to separate Name and Address Line 1
-         e.g. John Smith<separator>123 Main Street [CHAR-LIMIT=NONE]-->
-    <string name="autofill_address_summary_separator">,\u0020</string>
-    <!-- Format string for displaying a name and address summary. $1 is the Full Name, $2 is autofill_address_summary_separator, $3 is the Address
-         e.g. (John Smith)(, )(123 Main Street) -->
-    <string name="autofill_address_summary_format">$1$2$3</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_attention_ignored_re">attention|attn</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_region_ignored_re">province|region|other<!-- es -->|provincia<!-- pt-BR, pt-PT -->|bairro|suburb</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_company_re">company|business|organization|organisation|department<!-- de-DE -->|firma|firmenname<!-- es -->|empresa<!-- fr-FR -->|societe|société<!-- it-IT -->|ragione.?sociale<!-- ja-JP -->|会社<!-- ru -->|название.?компании<!-- zh-CN -->|单位|公司</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_address_line_1_re">address.?line|address1|addr1|street<!-- de-DE -->|strasse|straße|hausnummer|housenumber<!-- en-GB -->|house.?name<!-- es -->|direccion|dirección<!-- fr-FR -->|adresse<!-- it-IT -->|indirizzo<!-- ja-JP -->|住所1<!-- pt-BR, pt-PT -->|morada|endereço<!-- ru -->|Адрес<!-- zh-CN -->|地址</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_address_line_1_label_re">address<!-- fr-FR -->|adresse<!-- it-IT -->|indirizzo<!-- ja-JP -->|住所<!-- zh-CN -->|地址</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_address_line_2_re">address.?line2|address2|addr2|street|suite|unit<!-- de-DE -->|adresszusatz|ergänzende.?angaben<!-- es -->|direccion2|colonia|adicional<!-- fr-FR -->|addresssuppl|complementnom|appartement<!-- it-IT -->|indirizzo2<!-- ja-JP -->|住所2</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_address_line_3_re">address.?line3|address3|addr3|street|line3<!-- es -->|municipio<!-- fr-FR -->|batiment|residence<!-- it-IT -->|indirizzo3</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_country_re">country|location<!-- ja-JP -->|国<!-- zh-CN -->|国家</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_zip_code_re">zip|postal|post code|pcode|^1z$<!-- de-DE -->|postleitzahl<!-- es -->|cp<!-- fr-FR -->|cdp<!-- it-IT -->|cap<!-- ja-JP -->|郵便番号<!-- pt-BR, pt-PT -->|codigo|codpos|cep<!-- ru -->|Почтовый.?Индекс<!--zh-CN -->|邮政编码|邮编<!-- zh-TW -->|郵遞區號</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_zip_4_re">zip|^-$|post2<!-- pt-BR, pt-PT -->|codpos2</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_city_re">city|town<!-- de-DE -->|ort|stadt<!-- en-AU -->|suburb<!-- es -->|ciudad|provincia|localidad|poblacion<!-- fr-FR -->|ville|commune<!-- it-IT -->|localita<!-- ja-JP -->|市区町村<!-- pt-BR, pt-PT -->|cidade<!-- ru -->|Город<!-- zh-CN -->|市<!-- zh-TW -->|分區</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_state_re">state|county|region|province<!-- de-DE -->|land<!-- en-UK -->|county|principality<!-- ja-JP -->|都道府県<!-- pt-BR, pt-PT -->|estado|provincia<!-- ru -->|область<!-- zh-CN -->|省<!-- zh-TW -->|地區</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_address_type_same_as_re">same as</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_address_type_use_my_re">use my</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_billing_designator_re">bill</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_shipping_designator_re">ship</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_email_re">e.?mail<!-- ja-JP -->|メールアドレス<!-- ru -->|Электронной.?Почты<!-- zh-CN -->|邮件|邮箱<!-- zh-TW -->|電郵地址</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_username_re">user.?name|user.?id<!-- de-DE -->|vollständiger.?name<!-- zh-CN -->|用户名</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_name_re">^name|full.?name|your.?name|customer.?name|firstandlastname<!-- es -->|nombre.*y.*apellidos<!-- fr-FR -->|^nom<!-- ja-JP -->|お名前|氏名<!-- pt-BR, pt-PT -->|^nome<!-- zh-CN -->|姓名</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_name_specific_re">^name<!-- fr-FR -->|^nom<!-- pt-BR, pt-PT -->|^nome</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-
-    <string name="autofill_first_name_re">irst.*name|initials|fname|first$<!-- de-DE -->|vorname<!-- es -->|nombre<!-- fr-FR -->|forename|prénom|prenom<!-- ja-JP -->|名<!-- pt-BR, pt-PT -->|nome<!-- ru -->|Имя</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_middle_initial_re">middle.*initial|m\\.i\\.|mi$</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_middle_name_re">middle.*name|mname|middle$<!-- es -->|apellido.?materno|lastlastname</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_last_name_re">last.*name|lname|surname|last$<!-- de-DE -->|nachname<!-- es -->|apellidos<!-- fr-FR -->|famille|^nom<!-- it-IT -->|cognome<!-- ja-JP -->|姓<!-- pt-BR, pt-PT -->|morada|apelidos|surename|sobrenome<!-- ru -->|Фамилия</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_phone_re">phone<!-- de-DE -->|telefonnummer<!-- es -->|telefono|teléfono<!-- fr-FR -->|telfixe<!-- ja-JP -->|電話<!-- pt-BR, pt-PT -->|telefone|telemovel<!-- ru -->|телефон<!-- zh-CN -->|电话</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_area_code_re">area.*code|acode|area</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_phone_prefix_re">prefix<!-- fr-FR -->|preselection<!-- pt-BR, pt-PT -->|ddd</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_phone_suffix_re">suffix</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_phone_extension_re">ext<!-- pt-BR, pt-PT -->|ramal</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_name_on_card_re">card.?holder|name.?on.?card|ccname|owner<!-- de-DE -->|karteninhaber<!-- es -->|nombre.*tarjeta<!-- fr-FR -->|nom.*carte<!-- it-IT -->|nome.*cart<!-- ja-JP -->|名前<!-- ru -->|Имя.*карты<!-- zh-CN -->|信用卡开户名|开户名|持卡人姓名<!-- zh-TW -->|持卡人姓名</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_name_on_card_contextual_re">name</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_card_cvc_re">verification|card identification|cvn|security code|cvv code|cvc</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_card_number_re">number|card.?#|card.?no|ccnum<!-- de-DE -->|nummer<!-- es -->|credito|numero|número<!-- fr-FR -->|numéro<!-- ja-JP -->|カード番号<!-- ru -->|Номер.*карты<!-- zh-CN -->|信用卡号|信用卡号码<!-- zh-TW -->|信用卡卡號</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_expiration_month_re">expir|exp.*month|exp.*date|ccmonth<!-- de-DE -->|gueltig|gültig|monat<!-- es -->|fecha<!-- fr-FR -->|date.*exp<!-- it-IT -->|scadenza<!-- ja-JP -->|有効期限<!-- pt-BR, pt-PT -->|validade<!-- ru -->|Срок действия карты<!-- zh-CN -->|月</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_expiration_date_re">exp|^/|year<!-- de-DE -->|ablaufdatum|gueltig|gültig|yahr<!-- es -->|fecha<!-- it-IT -->|scadenza<!-- ja-JP -->|有効期限<!-- pt-BR, pt-PT -->|validade<!-- ru -->|Срок действия карты<!-- zh-CN -->|年|有效期</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_card_ignored_re">^card</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_fax_re">fax<!-- fr-FR -->|télécopie|telecopie<!-- ja-JP -->|ファックス<!-- ru -->|факс<!-- zh-CN -->|传真<!-- zh-TW -->|傳真</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_country_code_re">country.*code|ccode|_cc</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_area_code_notext_re">^\\($</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_phone_prefix_separator_re">^-$|^\\)$</string>
-
-    <!-- Do not translate. Regex used by AutoFill. -->
-    <string name="autofill_phone_suffix_separator_re">^-$</string>
-
-    <!-- Label in a web form for "Province" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_province">Province</string>
-
-    <!-- Label in a web form for "Postal code" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_postal_code">Postal code</string>
-
-    <!-- Label in a web form for "State" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_state">State</string>
-
-    <!-- Label in a web form for "ZIP code" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_zip_code">ZIP code</string>
-
-    <!-- Label in a web form for "County" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_county">County</string>
-
-    <!-- Label in a web form for "Island" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_island">Island</string>
-
-    <!-- Label in a web form for "District" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_district">District</string>
-
-    <!-- Label in a web form for "Department" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_department">Department</string>
-
-    <!-- Label in a web form for "Prefecture" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_prefecture">Prefecture</string>
-
-    <!-- Label in a web form for "Parish" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_parish">Parish</string>
-
-    <!-- Label in a web form for "Area" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_area">Area</string>
-
-    <!-- Label in a web form for "Emirate" [CHAR-LIMIT=NONE]  -->
-    <string name="autofill_emirate">Emirate</string>
-
-
-    <!-- Title of an application permission, listed so the user can choose whether
-        they want to allow the application to do this. -->
-    <string name="permlab_readHistoryBookmarks">read your Web bookmarks and history</string>
-    <!-- Description of an application permission, listed so the user can choose whether
-        they want to allow the application to do this. -->
-    <string name="permdesc_readHistoryBookmarks">Allows the app to read the
-     history of all URLs that the Browser has visited, and all of the Browser\'s
-     bookmarks. Note: this permission may not be enforced by third-party
-     browsers or other  applications with web browsing capabilities.</string>
-    <!-- Title of an application permission, listed so the user can choose whether
-        they want to allow the application to do this. -->
-
-    <string name="permlab_writeHistoryBookmarks">write web bookmarks and history</string>
-    <!-- Description of an application permission, listed so the user can choose whether
-        they want to allow the application to do this. -->
-    <string name="permdesc_writeHistoryBookmarks" product="tablet">Allows the
-        app to modify the Browser\'s history or bookmarks stored on your tablet.
-        This may allow the app to erase or modify Browser data.  Note: this
-        permission may note be enforced by third-party browsers or other
-        applications with web browsing capabilities.</string>
-    <!-- Description of an application permission, listed so the user can choose whether
-        they want to allow the application to do this. -->
-    <string name="permdesc_writeHistoryBookmarks" product="tv">Allows the
-        app to modify the Browser\'s history or bookmarks stored on your TV.
-        This may allow the app to erase or modify Browser data.  Note: this
-        permission may note be enforced by third-party browsers or other
-        applications with web browsing capabilities.</string>
-    <!-- Description of an application permission, listed so the user can choose whether
-        they want to allow the application to do this. -->
-    <string name="permdesc_writeHistoryBookmarks" product="default">Allows the
-        app to modify the Browser\'s history or bookmarks stored on your phone.
-        This may allow the app to erase or modify Browser data.  Note:
-        this permission may note be enforced by third-party browsers or other
-        applications with web browsing capabilities.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether
-    they want to allow the application to do this. -->
-    <string name="permlab_setAlarm">set an alarm</string>
-    <!-- Description of an application permission, listed so the user can choose whether
-        they want to allow the application to do this. -->
-    <string name="permdesc_setAlarm">Allows the app to set an alarm in
-        an installed alarm clock app. Some alarm clock apps may
-        not implement this feature.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether
-        they want to allow the application to do this. [CHAR LIMIT=NONE] -->
-    <string name="permlab_addVoicemail">add voicemail</string>
-    <!-- Description of an application permission, listed so the user can choose whether
-        they want to allow the application to do this. [CHAR LIMIT=NONE] -->
-    <string name="permdesc_addVoicemail">Allows the app to add messages
-      to your voicemail inbox.</string>
-
-    <!-- Title of an application permission, listed so the user can choose whether
-        they want to allow the application to do this. -->
-    <string name="permlab_writeGeolocationPermissions">modify Browser geolocation permissions</string>
-    <!-- Description of an application permission, listed so the user can choose whether
-        they want to allow the application to do this. -->
-    <string name="permdesc_writeGeolocationPermissions">Allows the app to modify the
-        Browser\'s geolocation permissions. Malicious apps
-        may use this to allow sending location information to arbitrary web sites.</string>
-
-    <!-- If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Text in the save password dialog, asking if the browser should remember a password. -->
-    <string name="save_password_message">Do you want the browser to remember this password?</string>
-    <!-- If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Button in the save password dialog, saying not to remember this password. -->
-    <string name="save_password_notnow">Not now</string>
-    <!-- If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Button in the save password dialog, saying to remember this password. -->
-    <string name="save_password_remember">Remember</string>
-    <!-- Button in the save password dialog, saying never to remember this password. This should be short. Should be "Never for this site". But it is too long, use "Never" instead -->
-    <string name="save_password_never">Never</string>
-
-    <!-- Displayed to the user when they do not have permission to open a particular web page. -->
-    <string name="open_permission_deny">You don\'t have permission to open this page.</string>
-
-    <!-- Displayed to the user to confirm that they have copied text from a web page to the clipboard. -->
-    <string name="text_copied">Text copied to clipboard.</string>
-
-    <!-- Menu item displayed at the end of a menu to allow users to see another page worth of menu items. This is shown on any app's menu as long as the app has too many items in the menu.-->
-    <string name="more_item_label">More</string>
-    <!-- Prepended to the shortcut for a menu item to indicate that the user should hold the MENU button together with the shortcut to invoke the item. For example, if the shortcut to open a new tab in browser is MENU and B together, then this would be prepended to the letter "B" -->
-    <string name="prepend_shortcut_label">Menu+</string>
-    <!-- Displayed in place of the regular shortcut letter when a menu item has Menu+space for the shortcut. -->
-    <string name="menu_space_shortcut_label">space</string>
-    <!-- Displayed in place of the regular shortcut letter when a menu item has Menu+enter for the shortcut. -->
-    <string name="menu_enter_shortcut_label">enter</string>
-    <!-- Displayed in place of the regular shortcut letter when a menu item has Menu+delete for the shortcut. -->
-    <string name="menu_delete_shortcut_label">delete</string>
-
-    <!-- Strings used for search bar --><skip />
-
-    <!-- This is the default button label in the system-wide search UI.
-         It is also used by the home screen's search "widget". It should be short -->
-    <string name="search_go">Search</string>
-    <!-- Default hint text for the system-wide search UI's text field. [CHAR LIMIT=30] -->
-    <string name="search_hint">Search…</string>
-    <!-- SearchView accessibility description for search button [CHAR LIMIT=NONE] -->
-    <string name="searchview_description_search">Search</string>
-    <!-- SearchView accessibility description for search text field [CHAR LIMIT=NONE] -->
-    <string name="searchview_description_query">Search query</string>
-    <!-- SearchView accessibility description for clear button [CHAR LIMIT=NONE] -->
-    <string name="searchview_description_clear">Clear query</string>
-    <!-- SearchView accessibility description for submit button [CHAR LIMIT=NONE] -->
-    <string name="searchview_description_submit">Submit query</string>
-    <!-- SearchView accessibility description for voice button [CHAR LIMIT=NONE] -->
-    <string name="searchview_description_voice">Voice search</string>
-
-    <!-- Title for a warning message about the interaction model changes after allowing an accessibility
-         service to put the device into explore by touch mode, displayed as a dialog message when
-         the user selects to enables the service. (default). [CHAR LIMIT=45] -->
-    <string name="enable_explore_by_touch_warning_title">Enable Explore by Touch?</string>
-    <!-- Summary for a warning message about the interaction model changes after allowing an accessibility
-         service to put the device into explore by touch mode, displayed as a dialog message when
-         the user selects to enables the service. (tablet). [CHAR LIMIT=NONE] -->
-    <string name="enable_explore_by_touch_warning_message" product="tablet">
-        <xliff:g id="accessibility_service_name">%1$s</xliff:g> wants to enable Explore by Touch.
-        When Explore by Touch is turned on, you can hear or see descriptions of what\'s under
-        your finger or perform gestures to interact with the tablet.</string>
-    <!-- Summary for a warning message about the interaction model changes after allowing an accessibility
-         service to put the device into explore by touch mode, displayed as a dialog message when
-         the user selects to enables the service. (default). [CHAR LIMIT=NONE] -->
-    <string name="enable_explore_by_touch_warning_message" product="default">
-        <xliff:g id="accessibility_service_name">%1$s</xliff:g> wants to enable Explore by Touch.
-       When Explore by Touch is turned on, you can hear or see descriptions of what\'s under
-       your finger or perform gestures to interact with the phone.</string>
-
-    <!-- String used to display the date. This is the string to say something happened 1 month ago. -->
-    <string name="oneMonthDurationPast">1 month ago</string>
-    <!-- String used to display the date. This is the string to say something happened more than 1 month ago. -->
-    <string name="beforeOneMonthDurationPast">Before 1 month ago</string>
-
-    <!-- This is used to express that something occurred within the last X days (e.g., Last 7 days). -->
-    <plurals name="last_num_days">
-        <item quantity="one">Last <xliff:g id="count">%d</xliff:g> day</item>
-        <item quantity="other">Last <xliff:g id="count">%d</xliff:g> days</item>
-    </plurals>
-
-    <!-- This is used to express that something has occurred within the last month -->
-    <string name="last_month">Last month</string>
-
-    <!-- This is used to express that something happened longer ago than the previous options -->
-    <string name="older">Older</string>
-
-    <!-- String used to display the date. Preposition for date display ("on May 29") -->
-    <string name="preposition_for_date">on <xliff:g id="date" example="May 29">%s</xliff:g></string>
-    <!-- String used to display the date. Preposition for time display ("at 2:33am") -->
-    <string name="preposition_for_time">at <xliff:g id="time" example="2:33 am">%s</xliff:g></string>
-    <!-- String used to display the date. Preposition for year display ("in 2008") -->
-    <string name="preposition_for_year">in <xliff:g id="year" example="2003">%s</xliff:g></string>
-
-    <!-- Appened to express the value is this unit of time: singular day -->
-    <string name="day">day</string>
-    <!-- Appened to express the value is this unit of time: plural days -->
-    <string name="days">days</string>
-    <!-- Appened to express the value is this unit of time: singular hour -->
-    <string name="hour">hour</string>
-    <!-- Appened to express the value is this unit of time: plural hours -->
-    <string name="hours">hours</string>
-    <!-- Appened to express the value is this unit of time: singular minute -->
-    <string name="minute">min</string>
-    <!-- Appened to express the value is this unit of time: plural minutes -->
-    <string name="minutes">mins</string>
-    <!-- Appened to express the value is this unit of time. -->
-    <string name="second">sec</string>
-    <!-- Appened to express the value is this unit of time. -->
-    <string name="seconds">secs</string>
-    <!-- Appened to express the value is this unit of time. -->
-    <string name="week">week</string>
-    <!-- Appened to express the value is this unit of time. -->
-    <string name="weeks">weeks</string>
-    <!-- Appened to express the value is this unit of time. -->
-    <string name="year">year</string>
-    <!-- Appened to express the value is this unit of time. -->
-    <string name="years">years</string>
-
-    <!-- Phrase describing a time duration using seconds [CHAR LIMIT=16] -->
-    <plurals name="duration_seconds">
-        <item quantity="one">1 second</item>
-        <item quantity="other"><xliff:g id="count">%d</xliff:g> seconds</item>
-    </plurals>
-    <!-- Phrase describing a time duration using minutes [CHAR LIMIT=16] -->
-    <plurals name="duration_minutes">
-        <item quantity="one">1 minute</item>
-        <item quantity="other"><xliff:g id="count">%d</xliff:g> minutes</item>
-    </plurals>
-    <!-- Phrase describing a time duration using hours [CHAR LIMIT=16] -->
-    <plurals name="duration_hours">
-        <item quantity="one">1 hour</item>
-        <item quantity="other"><xliff:g id="count">%d</xliff:g> hours</item>
-    </plurals>
-
-    <!-- A string denoting the current point in time that should be as short as possible. Abbreviations are preferred to full strings as this might be shown repetitively. It is used in the header of notifications. [CHAR LIMIT=8]-->
-    <string name="now_string_shortest">now</string>
-
-    <!-- Phrase describing a time duration using minutes that is as short as possible, preferrably one character. If the language needs a space in between the integer and the unit, please also integrate it in the string, but preferably it should not have a space in between.[CHAR LIMIT=6] -->
-    <plurals name="duration_minutes_shortest">
-        <item quantity="one"><xliff:g example="1" id="count">%d</xliff:g>m</item>
-        <item quantity="other"><xliff:g example="2" id="count">%d</xliff:g>m</item>
-    </plurals>
-
-    <!-- Phrase describing a time duration using hours that is as short as possible, preferrably one character. If the language needs a space in between the integer and the unit, please also integrate it in the string, but preferably it should not have a space in between.[CHAR LIMIT=6] -->
-    <plurals name="duration_hours_shortest">
-        <item quantity="one"><xliff:g example="1" id="count">%d</xliff:g>h</item>
-        <item quantity="other"><xliff:g example="2" id="count">%d</xliff:g>h</item>
-    </plurals>
-
-    <!-- Phrase describing a time duration using days that is as short as possible, preferrably one character. If the language needs a space in between the integer and the unit, please also integrate it in the string, but preferably it should not have a space in between.[CHAR LIMIT=6] -->
-    <plurals name="duration_days_shortest">
-        <item quantity="one"><xliff:g example="1" id="count">%d</xliff:g>d</item>
-        <item quantity="other"><xliff:g example="2" id="count">%d</xliff:g>d</item>
-    </plurals>
-
-    <!-- Phrase describing a time duration using years that is as short as possible, preferrably one character. If the language needs a space in between the integer and the unit, please also integrate it in the string, but preferably it should not have a space in between.[CHAR LIMIT=6] -->
-    <plurals name="duration_years_shortest">
-        <item quantity="one"><xliff:g example="1" id="count">%d</xliff:g>y</item>
-        <item quantity="other"><xliff:g example="2" id="count">%d</xliff:g>y</item>
-    </plurals>
-
-    <!-- Phrase describing a time duration using minutes that is as short as possible, preferrably one character. This version should be a future point in time. If the language needs a space in between the integer and the unit, please also integrate it in the string, but preferably it should not have a space in between.[CHAR LIMIT=14] -->
-    <plurals name="duration_minutes_shortest_future">
-        <item quantity="one">in <xliff:g example="1" id="count">%d</xliff:g>m</item>
-        <item quantity="other">in <xliff:g example="2" id="count">%d</xliff:g>m</item>
-    </plurals>
-
-    <!-- Phrase describing a time duration using hours that is as short as possible, preferrably one character. This version should be a future point in time. If the language needs a space in between the integer and the unit, please also integrate it in the string, but preferably it should not have a space in between.[CHAR LIMIT=14] -->
-    <plurals name="duration_hours_shortest_future">
-        <item quantity="one">in <xliff:g example="1" id="count">%d</xliff:g>h</item>
-        <item quantity="other">in <xliff:g example="2" id="count">%d</xliff:g>h</item>
-    </plurals>
-
-    <!-- Phrase describing a time duration using days that is as short as possible, preferrably one character. This version should be a future point in time. If the language needs a space in between the integer and the unit, please also integrate it in the string, but preferably it should not have a space in between.[CHAR LIMIT=14] -->
-    <plurals name="duration_days_shortest_future">
-        <item quantity="one">in <xliff:g example="1" id="count">%d</xliff:g>d</item>
-        <item quantity="other">in <xliff:g example="2" id="count">%d</xliff:g>d</item>
-    </plurals>
-
-    <!-- Phrase describing a time duration using years that is as short as possible, preferrably one character. This version should be a future point in time. If the language needs a space in between the integer and the unit, please also integrate it in the string, but preferably it should not have a space in between.[CHAR LIMIT=14] -->
-    <plurals name="duration_years_shortest_future">
-        <item quantity="one">in <xliff:g example="1" id="count">%d</xliff:g>y</item>
-        <item quantity="other">in <xliff:g example="2" id="count">%d</xliff:g>y</item>
-    </plurals>
-
-    <!-- Phrase describing a relative time using minutes in the past that is not shown on the screen but used for accessibility. [CHAR LIMIT=NONE] -->
-    <plurals name="duration_minutes_relative">
-        <item quantity="one"><xliff:g example="1" id="count">%d</xliff:g> minute ago</item>
-        <item quantity="other"><xliff:g example="2" id="count">%d</xliff:g> minutes ago</item>
-    </plurals>
-
-    <!-- Phrase describing a relative time using hours in the past that is not shown on the screen but used for accessibility. [CHAR LIMIT=NONE] -->
-    <plurals name="duration_hours_relative">
-        <item quantity="one"><xliff:g example="1" id="count">%d</xliff:g> hour ago</item>
-        <item quantity="other"><xliff:g example="2" id="count">%d</xliff:g> hours ago</item>
-    </plurals>
-
-    <!-- Phrase describing a relative time using days in the past that is not shown on the screen but used for accessibility. [CHAR LIMIT=NONE] -->
-    <plurals name="duration_days_relative">
-        <item quantity="one"><xliff:g example="1" id="count">%d</xliff:g> day ago</item>
-        <item quantity="other"><xliff:g example="2" id="count">%d</xliff:g> days ago</item>
-    </plurals>
-
-    <!-- Phrase describing a relative time using years in the past that is not shown on the screen but used for accessibility. [CHAR LIMIT=NONE] -->
-    <plurals name="duration_years_relative">
-        <item quantity="one"><xliff:g example="1" id="count">%d</xliff:g> year ago</item>
-        <item quantity="other"><xliff:g example="2" id="count">%d</xliff:g> years ago</item>
-    </plurals>
-
-    <!-- Phrase describing a relative time using minutes that is not shown on the screen but used for accessibility. This version should be a future point in time. [CHAR LIMIT=NONE] -->
-    <plurals name="duration_minutes_relative_future">
-        <item quantity="one">in <xliff:g example="1" id="count">%d</xliff:g> minute</item>
-        <item quantity="other">in <xliff:g example="2" id="count">%d</xliff:g> minutes</item>
-    </plurals>
-
-    <!-- Phrase describing a relative time using hours that is not shown on the screen but used for accessibility. This version should be a future point in time. [CHAR LIMIT=NONE] -->
-    <plurals name="duration_hours_relative_future">
-        <item quantity="one">in <xliff:g example="1" id="count">%d</xliff:g> hour</item>
-        <item quantity="other">in <xliff:g example="2" id="count">%d</xliff:g> hours</item>
-    </plurals>
-
-    <!-- Phrase describing a relative time using days that is not shown on the screen but used for accessibility. This version should be a future point in time. [CHAR LIMIT=NONE] -->
-    <plurals name="duration_days_relative_future">
-        <item quantity="one">in <xliff:g example="1" id="count">%d</xliff:g> day</item>
-        <item quantity="other">in <xliff:g example="2" id="count">%d</xliff:g> days</item>
-    </plurals>
-
-    <!-- Phrase describing a relative time using years that is not shown on the screen but used for accessibility. This version should be a future point in time. [CHAR LIMIT=NONE] -->
-    <plurals name="duration_years_relative_future">
-        <item quantity="one">in <xliff:g example="1" id="count">%d</xliff:g> year</item>
-        <item quantity="other">in <xliff:g example="2" id="count">%d</xliff:g> years</item>
-    </plurals>
-
-    <!-- Title for error alert when a video cannot be played.  it can be used by any app. -->
-    <string name="VideoView_error_title">Video problem</string>
-    <!-- Text for error alert when a video container is not valid for progressive download/playback. -->
-    <string name="VideoView_error_text_invalid_progressive_playback">This video isn\'t valid for streaming to this device.</string>
-    <!-- Text for error alert when a video cannot be played. it can be used by any app. -->
-    <string name="VideoView_error_text_unknown">Can\'t play this video.</string>
-    <!-- Button to close error alert when a video cannot be played -->
-    <string name="VideoView_error_button">OK</string>
-
-
-
-
-    <!-- Format indicating a relative expression and time.
-         Example: "4 hours ago, 11:00 am" -->
-    <string name="relative_time">"<xliff:g id="date" example="4 hours ago">%1$s</xliff:g>, <xliff:g id="time" example="11:00 am">%2$s</xliff:g>"</string>
-
-
-    <!-- Quoted name for 12pm, lowercase -->
-    <string name="noon">"noon"</string>
-    <!-- Quoted name for 12pm, uppercase first letter -->
-    <string name="Noon">"Noon"</string>
-    <!-- Quoted name for 12am, lowercase -->
-    <string name="midnight">"midnight"</string>
-    <!-- Quoted name for 12am, uppercase first letter -->
-    <string name="Midnight">"Midnight"</string>
-
-
-
-
-
-
-
-
-
-
-
-    <!-- Format string for durations like "01:23" (1 minute, 23 seconds) -->
-    <string name="elapsed_time_short_format_mm_ss"><xliff:g id="minutes" example="1">%1$02d</xliff:g>:<xliff:g id="seconds" example="23">%2$02d</xliff:g></string>
-
-    <!-- Format string for times like "1:43:33" (1 hour, 43 minutes, 33 seconds) -->
-    <string name="elapsed_time_short_format_h_mm_ss"><xliff:g id="hours" example="1">%1$d</xliff:g>:<xliff:g id="minutes" example="43">%2$02d</xliff:g>:<xliff:g id="seconds" example="33">%3$02d</xliff:g></string>
-
-    <!-- Item on EditText context menu. This action is used to select all text in the edit field. -->
-    <string name="selectAll">Select all</string>
-
-    <!-- Item on EditText context menu.  This action is used to cut selected the text into the clipboard.  -->
-    <string name="cut">Cut</string>
-
-    <!-- Item on EditText context menu. This action is used to cut selected the text into the clipboard. -->
-    <string name="copy">Copy</string>
-
-    <!-- Item on EditText context menu. This action is used to paste from the clipboard into the eidt field -->
-    <string name="paste">Paste</string>
-
-    <!-- Item on EditText context menu. This action is used to paste from the clipboard into the eidt field without formatting -->
-    <string name="paste_as_plain_text">Paste as plain text</string>
-
-    <!-- Item on EditText context menu. This action is used to replace the current word by other suggested words, suggested by the IME or the spell checker -->
-    <string name="replace">Replace\u2026</string>
-
-    <!-- Item on EditText pop-up window. This action is used to delete the text that the user recently added. [CHAR LIMIT=15] -->
-    <string name="delete">Delete</string>
-
-    <!-- Item on EditText context menu. This action is used to copy a URL from the edit field into the clipboard. -->
-    <string name="copyUrl">Copy URL</string>
-
-    <!-- Item on EditText context menu. Added only when the context menu is not empty, it enable selection context mode. [CHAR LIMIT=20] -->
-    <string name="selectTextMode">Select text</string>
-
-    <!-- Item on EditText context menu. This action is used to undo a text edit operation. -->
-    <string name="undo">Undo</string>
-
-    <!-- Item on EditText context menu. This action is used to redo a text edit operation. -->
-    <string name="redo">Redo</string>
-
-    <!-- Text selection contextual mode title, displayed in the CAB. [CHAR LIMIT=20] -->
-    <string name="textSelectionCABTitle">Text selection</string>
-
-    <!-- Option to add the current misspelled word to the user dictionary. [CHAR LIMIT=25] -->
-    <string name="addToDictionary">Add to dictionary</string>
-
-    <!-- Option to delete the highlighted part of the text from the suggestion popup. [CHAR LIMIT=25] -->
-    <string name="deleteText">Delete</string>
-
-    <!-- EditText context menu -->
-    <string name="inputMethod">Input method</string>
-
-    <!-- Title for EditText context menu [CHAR LIMIT=20] -->
-    <string name="editTextMenuTitle">Text actions</string>
-
-    <!-- If the device is getting low on internal storage, a notification is shown to the user.  This is the title of that notification. -->
-    <string name="low_internal_storage_view_title">Storage space running out</string>
-    <!-- If the device is getting low on internal storage, a notification is shown to the user.  This is the message of that notification. -->
-    <string name="low_internal_storage_view_text">Some system functions may not work</string>
-    <!-- If the device does not have storage for the main system classes, a notification is shown to the user.  This is the message of that notification. -->
-    <string name="low_internal_storage_view_text_no_boot">Not enough storage for the system. Make sure you have 250MB of free space and restart.</string>
-
-    <!-- [CHAR LIMIT=NONE] Stub notification title for an app running a service that has provided
-         a bad bad notification for itself. -->
-    <string name="app_running_notification_title"><xliff:g id="app_name">%1$s</xliff:g>
-        is running</string>
-    <!-- [CHAR LIMIT=NONE] Stub notification text for an app running a service that has provided
-         a bad bad notification for itself. -->
-    <string name="app_running_notification_text">Tap for more information
-        or to stop the app.</string>
-
-    <!-- Preference framework strings. -->
-    <string name="ok">OK</string>
-    <!-- Preference framework strings. -->
-    <string name="cancel">Cancel</string>
-    <!-- Preference framework strings. -->
-    <string name="yes">POWER OFF</string>
-    <!-- Preference framework strings. -->
-    <string name="no">Cancel</string>
-    <!-- This is the generic "attention" string to be used in attention dialogs.  Typically
-         combined with setIconAttribute(android.R.attr.alertDialogIcon)
-         (or setIcon(android.R.drawable.ic_dialog_alert) on legacy versions of the platform) -->
-    <string name="dialog_alert_title">Attention</string>
-
-    <!-- Text shown by list fragment when waiting for data to display. -->
-    <string name="loading">Loading\u2026</string>
-
-    <!-- Default text for a button that can be toggled on and off. -->
-    <string name="capital_on">ON</string>
-    <!-- Default text for a button that can be toggled on and off. -->
-    <string name="capital_off">OFF</string>
-
-    <!-- Title of intent resolver dialog when selecting an application to run. -->
-    <string name="whichApplication">Complete action using</string>
-    <!-- Title of intent resolver dialog when selecting an application to run
-         and a previously used application is known. -->
-    <string name="whichApplicationNamed">Complete action using %1$s</string>
-    <!-- Generic label for a link to a intent resolver. -->
-    <string name="whichApplicationLabel">Complete action</string>
-    <!-- Title of intent resolver dialog when selecting a viewer application to run. -->
-    <string name="whichViewApplication">Open with</string>
-    <!-- Title of intent resolver dialog when selecting a viewer application to run
-         and a previously used application is known. -->
-    <string name="whichViewApplicationNamed">Open with %1$s</string>
-    <!-- Label for a link to a intent resolver dialog to view something -->
-    <string name="whichViewApplicationLabel">Open</string>
-    <!-- Title of intent resolver dialog when selecting an editor application to run. -->
-    <string name="whichEditApplication">Edit with</string>
-    <!-- Title of intent resolver dialog when selecting an editor application to run
-         and a previously used application is known. -->
-    <string name="whichEditApplicationNamed">Edit with %1$s</string>
-    <!-- Label for a link to a intent resolver dialog when selecting an editor application -->
-    <string name="whichEditApplicationLabel">Edit</string>
-    <!-- Title of intent resolver dialog when selecting a sharing application to run. -->
-    <string name="whichSendApplication">Share with</string>
-    <!-- Title of intent resolver dialog when selecting a sharing application to run
-         and a previously used application is known. -->
-    <string name="whichSendApplicationNamed">Share with %1$s</string>
-    <!-- Label for a link to a intent resolver dialog to sharing something -->
-    <string name="whichSendApplicationLabel">Share</string>
-    <!-- Title of intent resolver dialog when selecting an application to run to
-         send content to a specific recipient. Often used for email. -->
-    <string name="whichSendToApplication">Send using</string>
-    <!-- Title of intent resolver dialog when selecting an application to run to
-         send content to a specific recipient and a previously used application is known.
-         Often used for email. -->
-    <string name="whichSendToApplicationNamed">Send using %1$s</string>
-    <!-- Label for a link to a intent resolver dialog to send content to a specific recipient. -->
-    <string name="whichSendToApplicationLabel">Send</string>
-    <!-- Title of intent resolver dialog when selecting a HOME application to run. -->
-    <string name="whichHomeApplication">Select a Home app</string>
-    <!-- Title of intent resolver dialog when selecting a HOME application to run
-         and a previously used application is known. -->
-    <string name="whichHomeApplicationNamed">Use %1$s as Home</string>
-    <!-- Label for a link to a intent resolver dialog when selecting a HOME -->
-    <string name="whichHomeApplicationLabel">Capture image</string>
-    <!-- Option to always use the selected application resolution in the future. See the "Complete action using" dialog title-->
-    <!-- Title of intent resolver dialog when capturing an image. -->
-    <string name="whichImageCaptureApplication">Capture image with</string>
-    <!-- Title of intent resolver dialog when capturing an image
-         and a previously used application is known. -->
-    <string name="whichImageCaptureApplicationNamed">Capture image with %1$s</string>
-    <!-- Label for a link to a intent resolver dialog when capturing an image -->
-    <string name="whichImageCaptureApplicationLabel">Capture image</string>
-    <!-- Option to always use the selected application resolution in the future. See the "Complete action using" dialog title-->
-    <string name="alwaysUse">Use by default for this action.</string>
-    <!-- Title of the list of alternate options to complete an action shown when the
-         last used option is being displayed separately. -->
-    <string name="use_a_different_app">Use a different app</string>
-    <!-- Text displayed when the user selects the check box for setting default application.  See the "Use by default for this action" check box. -->
-    <string name="clearDefaultHintMsg">Clear default in System settings &gt; Apps &gt; Downloaded.</string>
-    <!-- Default title for the activity chooser, when one is not given. Android allows multiple activities to perform an action.  for example, there may be many ringtone pickers installed.  A dialog is shown to the user allowing him to pick which activity should be used.  This is the title. -->
-    <string name="chooseActivity">Choose an action</string>
-    <!-- title for the USB activity chooser. -->
-    <string name="chooseUsbActivity">Choose an app for the USB device</string>
-    <!-- Text to display when there are no activities found to display in the
-         activity chooser. See the "Select an action" title. -->
-    <string name="noApplications">No apps can perform this action.</string>
-    <!-- Text of the alert that is displayed when an application has crashed. -->
-    <string name="aerr_application"><xliff:g id="application">%1$s</xliff:g> has stopped</string>
-    <!-- Text of the alert that is displayed when a process has crashed. -->
-    <string name="aerr_process"><xliff:g id="process">%1$s</xliff:g> has
-        stopped</string>
-    <!-- Text of the alert that is displayed when an application has crashed repeatedly. -->
-    <string name="aerr_application_repeated"><xliff:g id="application">%1$s</xliff:g> keeps stopping</string>
-    <!-- Text of the alert that is displayed when a process has crashed repeatedly. -->
-    <string name="aerr_process_repeated"><xliff:g id="process">%1$s</xliff:g> keeps stopping</string>
-    <!-- Button that restarts a crashed application -->
-    <string name="aerr_restart">Open app again</string>
-    <!-- Button that sends feedback about a crashed application -->
-    <string name="aerr_report">Send feedback</string>
-    <!-- Button that closes a crashed application -->
-    <string name="aerr_close">Close</string>
-    <!-- Button that mutes further crashes of the crashed application. Note that this only appears on engineering builds. -->
-    <string name="aerr_mute">Mute until device restarts</string>
-    <!-- Button that waits a bit more for an unresponsive app -->
-    <string name="aerr_wait">Wait</string>
-    <!-- Button that closes an unresponsive application -->
-    <string name="aerr_close_app">Close app</string>
-
-    <!-- Title of the alert when an application is not responding. -->
-    <string name="anr_title"></string>
-    <!-- Text of the alert that is displayed when an application is not responding. -->
-    <string name="anr_activity_application"><xliff:g id="application">%2$s</xliff:g> isn\'t responding</string>
-    <!-- Text of the alert that is displayed when an application is not responding. -->
-    <string name="anr_activity_process"><xliff:g id="activity">%1$s</xliff:g> isn\'t responding</string>
-    <!-- Text of the alert that is displayed when an application is not responding. -->
-    <string name="anr_application_process"><xliff:g id="application">%1$s</xliff:g> isn\'t responding</string>
-    <!-- Text of the alert that is displayed when an application is not responding. -->
-    <string name="anr_process">Process <xliff:g id="process">%1$s</xliff:g> isn\'t responding</string>
-    <!-- Button allowing the user to close an application that is not responding. This will kill the application. -->
-    <string name="force_close">OK</string>
-    <!-- Button allowing the user to send a bug report for application which has encountered an error. -->
-    <string name="report">Report</string>
-    <!-- Button allowing the user to choose to wait for an application that is not responding to become responsive again. -->
-    <string name="wait">Wait</string>
-    <!-- Text of the alert that is displayed when a web page is not responding. [CHAR-LIMIT=NONE] -->
-    <string name="webpage_unresponsive">The page has become unresponsive.\n\nDo you want to close it?</string>
-    <!-- [CHAR LIMIT=25] Title of the alert when application launches on top of another. -->
-    <string name="launch_warning_title">App redirected</string>
-    <!-- [CHAR LIMIT=50] Title of the alert when application launches on top of another. -->
-    <string name="launch_warning_replace"><xliff:g id="app_name">%1$s</xliff:g> is now running.</string>
-    <!-- [CHAR LIMIT=50] Title of the alert when application launches on top of another. -->
-    <string name="launch_warning_original"><xliff:g id="app_name">%1$s</xliff:g> was originally launched.</string>
-    <!-- [CHAR LIMIT=50] Compat mode dialog: compat mode switch label. -->
-    <string name="screen_compat_mode_scale">Scale</string>
-    <!-- [CHAR LIMIT=50] Compat mode dialog: compat mode switch label. -->
-    <string name="screen_compat_mode_show">Always show</string>
-    <!-- [CHAR LIMIT=200] Compat mode dialog: hint to re-enable compat mode dialog. -->
-    <string name="screen_compat_mode_hint">Re-enable this in System settings &gt; Apps &gt; Downloaded.</string>
-
-    <!-- [CHAR LIMIT=200] Unsupported display size dialog: message. Refers to "Display size" setting. -->
-    <string name="unsupported_display_size_message"><xliff:g id="app_name">%1$s</xliff:g> does not support the current Display size setting and may behave unexpectedly.</string>
-    <!-- [CHAR LIMIT=50] Unsupported display size dialog: check box label. -->
-    <string name="unsupported_display_size_show">Always show</string>
-
-    <!-- Text of the alert that is displayed when an application has violated StrictMode. -->
-    <string name="smv_application">The app <xliff:g id="application">%1$s</xliff:g>
-        (process <xliff:g id="process">%2$s</xliff:g>) has violated its self-enforced StrictMode policy.</string>
-    <!-- Text of the alert that is displayed when an application has violated StrictMode. -->
-    <string name="smv_process">The process <xliff:g id="process">%1$s</xliff:g> has
-      has violated its self-enforced StrictMode policy.</string>
-
-    <!-- [CHAR LIMIT=40] Title of dialog that is shown when performing a system upgrade. -->
-    <string name="android_upgrading_title">Android is upgrading\u2026</string>
-
-    <!-- [CHAR LIMIT=40] Title of dialog that is shown when system is starting. -->
-    <string name="android_start_title">Android is starting\u2026</string>
-
-    <!-- [CHAR LIMIT=NONE] Message shown in upgrading dialog when doing an fstrim. -->
-    <string name="android_upgrading_fstrim">Optimizing storage.</string>
-
-    <!-- [CHAR LIMIT=40] Title of notification that is shown when finishing a system upgrade. -->
-    <string name="android_upgrading_notification_title">Finishing Android update\u2026</string>
-    <!-- [CHAR LIMIT=200] Body of notification that is shown when performing a system upgrade. -->
-    <string name="android_upgrading_notification_body">Some apps may not work properly until the upgrade finishes</string>
-
-    <!-- [CHAR LIMIT=40] Toast that is shown when an app is still upgrading. -->
-    <string name="app_upgrading_toast"><xliff:g id="application">%1$s</xliff:g> is upgrading\u2026</string>
-
-    <!-- [CHAR LIMIT=NONE] Message shown in upgrading dialog for each .apk that is optimized. -->
-    <string name="android_upgrading_apk">Optimizing app
-        <xliff:g id="number" example="123">%1$d</xliff:g> of
-        <xliff:g id="number" example="123">%2$d</xliff:g>.</string>
-
-    <!-- [CHAR LIMIT=NONE] Message shown in upgrading dialog for each .apk pre boot broadcast -->
-    <string name="android_preparing_apk">Preparing <xliff:g id="appname">%1$s</xliff:g>.</string>
-
-    <!-- [CHAR LIMIT=NONE] Message to show in upgrading dialog when reached the point of starting apps. -->
-    <string name="android_upgrading_starting_apps">Starting apps.</string>
-
-    <!-- [CHAR LIMIT=NONE] Message to show in upgrading dialog when the bulk of the upgrade work is done. -->
-    <string name="android_upgrading_complete">Finishing boot.</string>
-
-    <!-- Notification text to tell the user that a heavy-weight application is running. -->
-    <string name="heavy_weight_notification"><xliff:g id="app">%1$s</xliff:g> running</string>
-
-    <!-- Notification details to tell the user that a heavy-weight application is running. -->
-    <string name="heavy_weight_notification_detail">Tap to switch to app</string>
-
-    <!-- Title of dialog prompting whether user wants to switch between heavy-weight apps. -->
-    <string name="heavy_weight_switcher_title">Switch apps?</string>
-
-    <!-- Descriptive text for switching to a new heavy-weight application. -->
-    <string name="heavy_weight_switcher_text">Another app is already running
-    that must be stopped before you can start a new one.</string>
-
-    <string name="old_app_action">Return to <xliff:g id="old_app">%1$s</xliff:g></string>
-    <string name="old_app_description">Don\'t start the new app.</string>
-
-    <string name="new_app_action">Start <xliff:g id="old_app">%1$s</xliff:g></string>
-    <string name="new_app_description">Stop the old app without saving.</string>
-
-    <!-- Notification text to tell the user that a process has exceeded its memory limit. -->
-    <string name="dump_heap_notification"><xliff:g id="proc">%1$s</xliff:g> exceeded memory
-        limit</string>
-
-    <!-- Notification details to tell the user that a process has exceeded its memory limit. -->
-    <string name="dump_heap_notification_detail">Heap dump has been collected;
-        tap to share</string>
-
-    <!-- Title of dialog prompting the user to share a heap dump. -->
-    <string name="dump_heap_title">Share heap dump?</string>
-
-    <!-- Text of dialog prompting the user to share a heap dump. -->
-    <string name="dump_heap_text">The process <xliff:g id="proc">%1$s</xliff:g> has exceeded
-        its process memory limit of <xliff:g id="size">%2$s</xliff:g>.  A heap dump is available
-        for you to share with its developer.  Be careful: this heap dump can contain any
-        of your personal information that the application has access to.</string>
-
-    <!-- Displayed in the title of the chooser for things to do with text that
-         is to be sent to another application. For example, I can send
-         text through SMS or IM.  A dialog with those choices would be shown,
-         and this would be the title. -->
-    <string name="sendText">Choose an action for text</string>
-
-    <!-- Title of the dialog where the user is adjusting the phone ringer volume -->
-    <string name="volume_ringtone">Ringer volume</string>
-    <!-- Title of the dialog where the user is adjusting the music volume -->
-    <string name="volume_music">Media volume</string>
-    <!-- Hint shown in the volume toast to inform the user that the media audio is playing through Bluetooth. -->
-    <string name="volume_music_hint_playing_through_bluetooth">Playing through Bluetooth</string>
-    <!-- Hint shown in the volume toast to inform the user that the current ringtone is the silent ringtone. -->
-    <string name="volume_music_hint_silent_ringtone_selected">Silent ringtone set</string>
-    <!-- Title of the dialog where the user is adjusting the phone call volume -->
-    <string name="volume_call">In-call volume</string>
-    <!-- Title of the dialog where the user is adjusting the phone call volume when connected on bluetooth-->
-    <string name="volume_bluetooth_call">Bluetooth in-call volume</string>
-    <!-- Title of the dialog where the user is adjusting the audio volume for alarms -->
-    <string name="volume_alarm">Alarm volume</string>
-    <!-- Title of the dialog where the user is adjusting the audio volume for notifications -->
-    <string name="volume_notification">Notification volume</string>
-    <!-- Title of the dialog where the user is adjusting the general audio volume -->
-    <string name="volume_unknown">Volume</string>
-
-    <!-- Content description for bluetooth volume icon [CHAR LIMIT=100] -->
-    <string name="volume_icon_description_bluetooth">Bluetooth volume</string>
-    <!-- Content description for ringer volume icon [CHAR LIMIT=100] -->
-    <string name="volume_icon_description_ringer">Ringtone volume</string>
-    <!-- Content description for in-call volume icon [CHAR LIMIT=100] -->
-    <string name="volume_icon_description_incall">Call volume</string>
-    <!-- Content description for media volume icon [CHAR LIMIT=100] -->
-    <string name="volume_icon_description_media">Media volume</string>
-    <!-- Content description for notification volume icon [CHAR LIMIT=100] -->
-    <string name="volume_icon_description_notification">Notification volume</string>
-
-    <!-- Ringtone picker strings --> <skip />
-    <!-- Choice in the ringtone picker.  If chosen, the default ringtone will be used. -->
-    <string name="ringtone_default">Default ringtone</string>
-    <!-- Choice in the ringtone picker.  If chosen, the default ringtone will be used. This fills in the actual ringtone's title into the message. -->
-    <string name="ringtone_default_with_actual">Default ringtone (<xliff:g id="actual_ringtone">%1$s</xliff:g>)</string>
-    <!-- Choice in the ringtone picker.  If chosen, there will be silence instead of a ringtone played. -->
-    <string name="ringtone_silent">None</string>
-    <!-- The title of the ringtone picker dialog. -->
-    <string name="ringtone_picker_title">Ringtones</string>
-    <!-- If there is ever a ringtone set for some setting, but that ringtone can no longer be resolved, t his is shown instead.  For example, if the ringtone was on a SD card and it had been removed, this woudl be shown for ringtones on that SD card. -->
-    <string name="ringtone_unknown">Unknown ringtone</string>
-
-    <!-- A notification is shown when there are open wireless networks nearby.  This is the notification's title. -->
-    <plurals name="wifi_available">
-        <item quantity="one">Wi-Fi network available</item>
-        <item quantity="other">Wi-Fi networks available</item>
-    </plurals>
-    <!-- A notification is shown when there are open wireless networks nearby.  This is the notification's message. -->
-    <plurals name="wifi_available_detailed">
-        <item quantity="one">Open Wi-Fi network available</item>
-        <item quantity="other">Open Wi-Fi networks available</item>
-    </plurals>
-
-    <!-- A notification is shown when a wifi captive portal network is detected.  This is the notification's title. -->
-    <string name="wifi_available_sign_in">Sign in to Wi-Fi network</string>
-
-    <!-- A notification is shown when a captive portal network is detected.  This is the notification's title. -->
-    <string name="network_available_sign_in">Sign in to network</string>
-
-    <!-- A notification is shown when a captive portal network is detected.  This is the notification's message. -->
-    <string name="network_available_sign_in_detailed"><xliff:g id="network_ssid">%1$s</xliff:g></string>
-
-    <!-- A notification is shown when the user connects to a Wi-Fi network and the system detects that that network has no Internet access. This is the notification's title. -->
-    <string name="wifi_no_internet">Wi-Fi has no Internet access</string>
-
-    <!-- A notification is shown when the user connects to a Wi-Fi network and the system detects that that network has no Internet access. This is the notification's message. -->
-    <string name="wifi_no_internet_detailed">Tap for options</string>
-
-    <!-- A notification might be shown if the device switches to another network type (e.g., cellular data) because it detects that the network it was using (e.g., Wi-Fi) has lost Internet connectivity. This is the notification's title. %1$s is the network type that the device switched to, e.g., cellular data. It is one of the strings in the network_switch_type_name array. -->
-    <string name="network_switch_metered">Switched to <xliff:g id="network_type">%1$s</xliff:g></string>
-
-    <!-- A notification might be shown if the device switches to another network type (e.g., cellular data) because it detects that the network it was using (e.g., Wi-Fi) has lost Internet connectivity. This is the notification's message. %1$s is the network that the device switched to, e.g., cellular data. %2$s is the network type the device switched from, e.g., Wi-Fi. Both are strings in the network_switch_type_name array. -->
-    <string name="network_switch_metered_detail">Device uses <xliff:g id="new_network">%1$s</xliff:g> when <xliff:g id="previous_network">%2$s</xliff:g> has no Internet access. Charges may apply.</string>
-
-    <!-- A toast might be shown if the device switches to another network type (e.g., cellular data) because it detects that the network it was using (e.g., Wi-Fi) has lost Internet connectivity. This is the text of the toast. %1$s is the network that the device switched from, e.g., Wi-Fi. %2$s is the network type the device switched from, e.g., cellular data. Both are strings in the network_switch_type_name array. -->
-    <string name="network_switch_metered_toast">Switched from <xliff:g id="previous_network">%1$s</xliff:g> to <xliff:g id="new_network">%2$s</xliff:g></string>
-
-    <!-- Network type names used in the network_switch_metered and network_switch_metered_detail strings. These must be kept in the sync with the values NetworkCapabilities.TRANSPORT_xxx values, and in the same order. -->
-    <string-array name="network_switch_type_name">
-        <item>cellular data</item>
-        <item>Wi-Fi</item>
-        <item>Bluetooth</item>
-        <item>Ethernet</item>
-        <item>VPN</item>
-    </string-array>
-
-    <!-- Network type name displayed if one of the types is not found in network_switch_type_name. -->
-    <string name="network_switch_type_name_unknown">an unknown network type</string>
-
-     <!-- A notification is shown when a user's selected SSID is later disabled due to connectivity problems.  This is the notification's title / ticker. -->
-     <string name="wifi_watchdog_network_disabled">Couldn\'t connect to Wi-Fi</string>
-     <!-- A notification is shown when a user's selected SSID is later disabled due to connectivity problems.  The complete alert msg is: <hotspot name> + this string, i.e. "Linksys has a poor internet connection" -->
-    <string name="wifi_watchdog_network_disabled_detailed">\u0020has a poor Internet connection.</string>
-
-    <!-- Do not translate. Default access point SSID used for tethering -->
-    <string name="wifi_tether_configure_ssid_default" translatable="false">Alcatel 3X</string>
-
-    <!-- A notification is shown the first time a connection is attempted on an app owned AP -->
-    <!-- title for this message -->
-    <string name="wifi_connect_alert_title">Allow connection?</string>
-    <!-- message explaining who is connecting to what -->
-    <string name="wifi_connect_alert_message">Application %1$s would like to connect to Wifi Network %2$s</string>
-    <!-- default application in case name can not be found -->
-    <string name="wifi_connect_default_application">An application</string>
-
-    <string name="wifi_p2p_dialog_title">Wi-Fi Direct</string>
-    <string name="wifi_p2p_turnon_message">Start Wi-Fi Direct. This will turn off Wi-Fi client/hotspot.</string>
-    <string name="wifi_p2p_failed_message">Couldn\'t start Wi-Fi Direct.</string>
-    <string name="wifi_p2p_enabled_notification_title">Wi-Fi Direct is on</string>
-    <string name="wifi_p2p_enabled_notification_message">Tap for settings</string>
-
-    <string name="accept">Accept</string>
-    <string name="decline">Decline</string>
-    <string name="wifi_p2p_invitation_sent_title">Invitation sent</string>
-    <string name="wifi_p2p_invitation_to_connect_title">Invitation to connect</string>
-
-    <string name="wifi_p2p_from_message">From: </string>
-    <string name="wifi_p2p_to_message">To: </string>
-    <string name="wifi_p2p_enter_pin_message">Type the required PIN: </string>
-    <string name="wifi_p2p_show_pin_message">PIN: </string>
-
-    <string name="wifi_p2p_frequency_conflict_message" product="tablet">The tablet will temporarily disconnect from Wi-Fi while it\'s connected to <xliff:g id="device_name">%1$s</xliff:g></string>
-    <string name="wifi_p2p_frequency_conflict_message" product="tv">The TV will temporarily disconnect from Wi-Fi while it\'s connected to <xliff:g id="device_name">%1$s</xliff:g></string>
-    <string name="wifi_p2p_frequency_conflict_message" product="default">The phone will temporarily disconnect from Wi-Fi while it\'s connected to <xliff:g id="device_name">%1$s</xliff:g></string>
-
-    <!-- Name of the dialog that lets the user choose an accented character to insert -->
-    <string name="select_character">Insert character</string>
-
-    <!-- SMS per-application rate control Dialog --> <skip />
-    <!-- SMS_DIALOG: An SMS dialog is shown if an application tries to send too many SMSes.  This is the title of that dialog. -->
-    <string name="sms_control_title">Sending SMS messages</string>
-    <!-- See SMS_DIALOG.  This is the message shown in that dialog. [CHAR LIMIT=NONE] -->
-    <string name="sms_control_message">&lt;b><xliff:g id="app_name">%1$s</xliff:g>&lt;/b> is sending a large number of SMS messages. Do you want to allow this app to continue sending messages?</string>
-    <!-- See SMS_DIALOG.  This is a button choice to allow sending the SMSes. [CHAR LIMIT=30] -->
-    <string name="sms_control_yes">Allow</string>
-    <!-- See SMS_DIALOG.  This is a button choice to disallow sending the SMSes. [CHAR LIMIT=30] -->
-    <string name="sms_control_no">Deny</string>
-
-    <!-- SMS short code verification dialog. --> <skip />
-    <!-- The message text for the SMS short code confirmation dialog. [CHAR LIMIT=NONE] -->
-    <string name="sms_short_code_confirm_message">&lt;b><xliff:g id="app_name">%1$s</xliff:g>&lt;/b> would like to send a message to &lt;b><xliff:g id="dest_address">%2$s</xliff:g>&lt;/b>.</string>
-    <!-- Message details for the SMS short code confirmation dialog (possible premium short code). [CHAR LIMIT=NONE] -->
-    <string name="sms_short_code_details">This <b>may cause charges</b> on your mobile account.</string>
-    <!-- Message details for the SMS short code confirmation dialog (premium short code). [CHAR LIMIT=NONE] -->
-    <string name="sms_premium_short_code_details"><b>This will cause charges on your mobile account.</b></string>
-    <!-- Text of the approval button for the SMS short code confirmation dialog. [CHAR LIMIT=30] -->
-    <string name="sms_short_code_confirm_allow">Send</string>
-    <!-- Text of the cancel button for the SMS short code confirmation dialog. [CHAR LIMIT=30] -->
-    <string name="sms_short_code_confirm_deny">Cancel</string>
-    <!-- Text of the checkbox for the SMS short code confirmation dialog to remember the user's choice. [CHAR LIMIT=40] -->
-    <string name="sms_short_code_remember_choice">Remember my choice</string>
-    <!-- Text shown when remember checkbox is checked to inform the user how they may undo the setting. [CHAR LIMIT=40] -->
-    <string name="sms_short_code_remember_undo_instruction">You can change this later in Settings\u00A0>\u00A0Apps"</string>
-
-    <!-- Text of the approval button for the SMS short code confirmation dialog when checkbox is checked. [CHAR LIMIT=30] -->
-    <string name="sms_short_code_confirm_always_allow">Always Allow</string>
-    <!-- Text of the cancel button for the SMS short code confirmation dialog when checkbox is checked. [CHAR LIMIT=30] -->
-    <string name="sms_short_code_confirm_never_allow">Never Allow</string>
-
-    <!-- SIM swap and device reboot Dialog --> <skip />
-    <!-- See SIM_REMOVED_DIALOG.  This is the title of that dialog. -->
-    <string name="sim_removed_title">SIM card removed</string>
-    <!-- See SIM_REMOVED_DIALOG.  This is the message of that dialog. -->
-    <string name="sim_removed_message">The cellular network will be unavailable until you restart with a valid SIM card inserted.</string>
-    <!-- See SIM_REMOVED_DIALOG.  This is the button of that dialog. -->
-    <string name="sim_done_button">Done</string>
-    <!-- See SIM_ADDED_DIALOG.  This is the title of that dialog. -->
-    <string name="sim_added_title">SIM card added</string>
-    <!-- See SIM_ADDED_DIALOG.  This is the message of that dialog. -->
-    <string name="sim_added_message">Restart your device to access the cellular network.</string>
-    <!-- See SIM_ADDED_DIALOG.  This is the button of that dialog. -->
-    <string name="sim_restart_button">Restart</string>
-    <!-- See Carrier_App_Dialog. This is the message of that dialog. -->
-    <string name="carrier_app_dialog_message">To get your new SIM working properly, you\'ll need to install and open an app from your carrier.</string>
-    <!-- See Carrier_App_Dialog. This is the button of that dialog. -->
-    <string name="carrier_app_dialog_button">GET THE APP</string>
-    <string name="carrier_app_dialog_not_now">NOT NOW</string>
-    <!-- See carrier_app_notification. This is the headline. -->
-    <string name="carrier_app_notification_title">New SIM inserted</string>
-    <string name="carrier_app_notification_text">Tap to set it up</string>
-
-    <!-- Date/Time picker dialogs strings -->
-
-    <!-- The title of the time picker dialog. [CHAR LIMIT=NONE] -->
-    <string name="time_picker_dialog_title">Set time</string>
-    <!-- The title of the date picker dialog. [CHAR LIMIT=NONE] -->
-    <string name="date_picker_dialog_title">Set date</string>
-    <!-- Name of the button in the date/time picker to accept the date/time change -->
-    <string name="date_time_set">Set</string>
-    <!-- Name of the button in the date/time picker to accept the date/time change -->
-    <string name="date_time_done">Done</string>
-
-    <!-- Security Permissions strings-->
-    <!-- Text that is placed at the front of a permission name that is being added to an app [CHAR LIMIT=NONE] -->
-    <string name="perms_new_perm_prefix"><font size="12" fgcolor="#ff33b5e5">NEW: </font></string>
-    <!-- Text that is placed at the front of a permission name that is being added to an app [CHAR LIMIT=NONE] -->
-    <string name="perms_description_app">Provided by <xliff:g id="app_name">%1$s</xliff:g>.</string>
-    <!-- Shown for an application when it doesn't require any permission grants. -->
-    <string name="no_permissions">No permissions required</string>
-    <!-- [CHAR LIMIT=NONE] Additional text in permission description for perms that can cost money. -->
-    <string name="perm_costs_money">this may cost you money</string>
-    <!-- Dialog ok button-->
-    <string name="dlg_ok">OK</string>
-
-    <!-- USB_PREFERENCES: Notification for when the user connected to the charger only.  This is the title -->
-    <string name="usb_charging_notification_title">USB charging this device</string>
-    <!-- USB_PREFERENCES: Notification for when the user connects the phone to supply power to attached device.  This is the title -->
-    <string name="usb_supplying_notification_title">USB supplying power to attached device</string>
-    <!-- USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in MTP mode.  This is the title -->
-    <string name="usb_mtp_notification_title">USB for file transfer</string>
-    <!-- USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in PTP mode.  This is the title -->
-    <string name="usb_ptp_notification_title">USB for photo transfer</string>
-    <!-- USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in MIDI mode.  This is the title -->
-    <string name="usb_midi_notification_title">USB for MIDI</string>
-    <!-- USB_PREFERENCES: Notification for when a USB accessory is attached.  This is the title -->
-    <string name="usb_accessory_notification_title">Connected to a USB accessory</string>
-    <!-- See USB_PREFERENCES. This is the message. -->
-    <string name="usb_notification_message">Tap for more options.</string>
-
-    <!-- Title of notification shown when ADB is actively connected to the phone. -->
-    <string name="adb_active_notification_title">USB debugging connected</string>
-    <!-- Message of notification shown when ADB is actively connected to the phone. -->
-    <string name="adb_active_notification_message">Tap to disable USB debugging.</string>
-
-    <!-- Title of notification shown to indicate that bug report is being collected. -->
-    <string name="taking_remote_bugreport_notification_title">Taking bug report\u2026</string>
-    <!-- Title of notification shown to ask for user consent for sharing a bugreport that was requested remotely by the IT administrator. -->
-    <string name="share_remote_bugreport_notification_title">Share bug report?</string>
-    <!-- Title of notification shown to indicate that bug report is still being collected after sharing was accepted. -->
-    <string name="sharing_remote_bugreport_notification_title">Sharing bug report\u2026</string>
-    <!-- Message of a notification shown to ask for user consent for sharing a bugreport that was requested remotely by the IT administrator. -->
-    <string name="share_remote_bugreport_notification_message_finished">Your IT admin requested a bug report to help troubleshoot this device. Apps and data may be shared.</string>
-    <!-- Acceptance label of notification shown to ask for user consent for sharing the remote bugreport. -->
-    <string name="share_remote_bugreport_action">SHARE</string>
-    <!-- Decline label of notification shown to ask for user consent for sharing the remote bugreport. -->
-    <string name="decline_remote_bugreport_action">DECLINE</string>
-
-    <!-- Used to replace %s in urls retreived from the signin server with locales.  For Some        -->
-    <!-- devices we don't support all the locales we ship to and need to replace the '%s' with a    -->
-    <!-- locale string based on mcc values.  By default (0-length string) we don't replace the %s   -->
-    <!-- at all and later replace it with a locale string based on the users chosen locale          -->
-    <!-- DO NOT TRANSLATE -->
-    <string name="locale_replacement">""</string>
-
-    <!-- Title of the pop-up dialog in which the user switches keyboard, also known as input method. -->
-    <string name="select_input_method">Change keyboard</string>
-    <!-- Summary text of a toggle switch to enable/disable use of the IME while a physical
-         keyboard is connected -->
-    <string name="show_ime">Keep it on screen while physical keyboard is active</string>
-    <!-- Title of the physical keyboard category in the input method selector [CHAR LIMIT=30] -->
-    <string name="hardware">Show virtual keyboard</string>
-
-    <!-- Title of the notification to prompt the user to configure physical keyboard settings. -->
-    <string name="select_keyboard_layout_notification_title">Configure physical keyboard</string>
-    <!-- Message of the notification to prompt the user to configure physical keyboard settings
-         where the user can associate language with physical keyboard layout. -->
-    <string name="select_keyboard_layout_notification_message">Tap to select language and layout</string>
-
-    <string name="fast_scroll_alphabet">\u0020ABCDEFGHIJKLMNOPQRSTUVWXYZ</string>
-    <string name="fast_scroll_numeric_alphabet">\u00200123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ</string>
-
-    <!-- External media notification strings -->
-    <skip />
-
-    <!-- Notification title when external media is being checked [CHAR LIMIT=30] -->
-    <string name="ext_media_checking_notification_title">Preparing <xliff:g id="name" example="SD card">%s</xliff:g></string>
-    <!-- Notification body when external media is being checked [CHAR LIMIT=NONE] -->
-    <string name="ext_media_checking_notification_message">Checking for errors</string>
-
-    <!-- Notification body when new external media is detected [CHAR LIMIT=NONE] -->
-    <string name="ext_media_new_notification_message">New <xliff:g id="name" example="SD card">%s</xliff:g> detected</string>
-    <!-- Notification body when external media is ready for use [CHAR LIMIT=NONE] -->
-    <string name="ext_media_ready_notification_message">For transferring photos and media</string>
-
-    <!-- Notification title when external media is unmountable (corrupt) [CHAR LIMIT=30] -->
-    <string name="ext_media_unmountable_notification_title">Corrupted <xliff:g id="name" example="SD card">%s</xliff:g></string>
-    <!-- Notification body when external media is unmountable (corrupt) [CHAR LIMIT=NONE] -->
-    <string name="ext_media_unmountable_notification_message"><xliff:g id="name" example="SD card">%s</xliff:g> is corrupt. Tap to fix.</string>
-
-    <!-- Notification title when external media is unsupported [CHAR LIMIT=30] -->
-    <string name="ext_media_unsupported_notification_title">Unsupported <xliff:g id="name" example="SD card">%s</xliff:g></string>
-    <!-- Notification body when external media is unsupported [CHAR LIMIT=NONE] -->
-    <string name="ext_media_unsupported_notification_message">This device doesn\u2019t support this <xliff:g id="name" example="SD card">%s</xliff:g>. Tap to set up in a supported format.</string>
-
-    <!-- Notification title when external media is unsafely removed [CHAR LIMIT=30] -->
-    <string name="ext_media_badremoval_notification_title"><xliff:g id="name" example="SD card">%s</xliff:g> unexpectedly removed</string>
-    <!-- Notification body when external media is unsafely removed [CHAR LIMIT=NONE] -->
-    <string name="ext_media_badremoval_notification_message">Unmount <xliff:g id="name" example="SD card">%s</xliff:g> before removing to avoid data loss</string>
-
-    <!-- Notification title when external media is missing [CHAR LIMIT=30] -->
-    <string name="ext_media_nomedia_notification_title">Removed <xliff:g id="name" example="SD card">%s</xliff:g></string>
-    <!-- Notification body when external media is missing [CHAR LIMIT=NONE] -->
-    <string name="ext_media_nomedia_notification_message"><xliff:g id="name" example="SD card">%s</xliff:g> removed; insert a new one</string>
-
-    <!-- Notification title when external media is unmounting [CHAR LIMIT=30] -->
-    <string name="ext_media_unmounting_notification_title">Still ejecting <xliff:g id="name" example="SD card">%s</xliff:g>\u2026</string>
-    <!-- Notification body when external media is unmounting [CHAR LIMIT=NONE] -->
-    <string name="ext_media_unmounting_notification_message">Don\'t remove</string>
-
-    <!-- Notification action to setup external media [CHAR LIMIT=20] -->
-    <string name="ext_media_init_action">Set up</string>
-    <!-- Notification action to unmount external media [CHAR LIMIT=20] -->
-    <string name="ext_media_unmount_action">Eject</string>
-    <!-- Notification action to browse external media [CHAR LIMIT=20] -->
-    <string name="ext_media_browse_action">Explore</string>
-
-    <!-- Notification title when external media is missing [CHAR LIMIT=30] -->
-    <string name="ext_media_missing_title"><xliff:g id="name" example="SD card">%s</xliff:g> missing</string>
-    <!-- Notification body when external media is missing [CHAR LIMIT=30] -->
-    <string name="ext_media_missing_message">Reinsert this device</string>
-
-    <!-- Notification title when moving an application to external storage [CHAR LIMIT=30] -->
-    <string name="ext_media_move_specific_title">Moving <xliff:g id="name" example="Calculator">%s</xliff:g></string>
-    <!-- Notification title when moving data to external storage [CHAR LIMIT=32] -->
-    <string name="ext_media_move_title">Moving data</string>
-
-    <!-- Notification title when moving data to external storage [CHAR LIMIT=32] -->
-    <string name="ext_media_move_success_title">Move complete</string>
-    <!-- Notification title when moving data to external storage [CHAR LIMIT=64] -->
-    <string name="ext_media_move_success_message">Data moved to <xliff:g id="name" example="SD card">%s</xliff:g></string>
-
-    <!-- Notification title when moving data to external storage failed [CHAR LIMIT=32] -->
-    <string name="ext_media_move_failure_title">Couldn\'t move data</string>
-    <!-- Notification title when moving data to external storage failed [CHAR LIMIT=64] -->
-    <string name="ext_media_move_failure_message">Data left at original location</string>
-
-    <!-- Short summary of storage media status when removed [CHAR LIMIT=32] -->
-    <string name="ext_media_status_removed">Removed</string>
-    <!-- Short summary of storage media status when unmounted [CHAR LIMIT=32] -->
-    <string name="ext_media_status_unmounted">Ejected</string>
-    <!-- Short summary of storage media status when checking [CHAR LIMIT=32] -->
-    <string name="ext_media_status_checking">Checking\u2026</string>
-    <!-- Short summary of storage media status when mounted [CHAR LIMIT=32] -->
-    <string name="ext_media_status_mounted">Ready</string>
-    <!-- Short summary of storage media status when mounted read-only [CHAR LIMIT=32] -->
-    <string name="ext_media_status_mounted_ro">Read-only</string>
-    <!-- Short summary of storage media status when removed unsafely [CHAR LIMIT=32] -->
-    <string name="ext_media_status_bad_removal">Removed unsafely</string>
-    <!-- Short summary of storage media status when unmountable [CHAR LIMIT=32] -->
-    <string name="ext_media_status_unmountable">Corrupted</string>
-    <!-- Short summary of storage media status when unsupported [CHAR LIMIT=32] -->
-    <string name="ext_media_status_unsupported">Unsupported</string>
-    <!-- Short summary of storage media status when ejecting [CHAR LIMIT=32] -->
-    <string name="ext_media_status_ejecting">Ejecting\u2026</string>
-    <!-- Short summary of storage media status when formatting [CHAR LIMIT=32] -->
-    <string name="ext_media_status_formatting">Formatting\u2026</string>
-    <!-- Short summary of storage media status when missing [CHAR LIMIT=32] -->
-    <string name="ext_media_status_missing">Not inserted</string>
-
-    <!-- Shown in LauncherActivity when the requested target Intent didn't return any matching Activities, leaving the list empty. -->
-    <string name="activity_list_empty">No matching activities found.</string>
-
-    <!-- Title of an application permission that lets an application route media output. -->
-    <string name="permlab_route_media_output">route media output</string>
-    <!-- Description of an application permission that lets an application route media output. -->
-    <string name="permdesc_route_media_output">Allows an application to route media output to other external devices.</string>
-
-    <!-- Title of an application permission that lets it read install sessions. -->
-    <string name="permlab_readInstallSessions">read install sessions</string>
-    <!-- Description of an application permission that lets it read install sessions. -->
-    <string name="permdesc_readInstallSessions">Allows an application to read install sessions. This allows it to see details about active package installations.</string>
-
-    <!-- Title of an application permission that lets it read install sessions. -->
-    <string name="permlab_requestInstallPackages">request install packages</string>
-    <!-- Description of an application permission that lets it read install sessions. -->
-    <string name="permdesc_requestInstallPackages">Allows an application to request installation of packages.</string>
-
-    <!-- Shown in the tutorial for tap twice for zoom control. -->
-    <string name="tutorial_double_tap_to_zoom_message_short">Tap twice for zoom control</string>
-
-
-    <!-- Shown in gadget hosts (e.g. the home screen) when there was an error inflating
-    the gadget. -->
-    <string name="gadget_host_error_inflating">Couldn\'t add widget.</string>
-
-    <!-- Long label for a button on a full-screen input method for the "Go" action. -->
-    <string name="ime_action_go">Go</string>
-
-    <!-- Long label for a button on a full-screen input method for the "Search" action. -->
-    <string name="ime_action_search">Search</string>
-
-    <!-- Long label for a button on a full-screen input method for the "Send" action. -->
-    <string name="ime_action_send">Send</string>
-
-    <!-- Long label for a button on a full-screen input method for the "Next" action. -->
-    <string name="ime_action_next">Next</string>
-
-    <!-- Long label for a button on a full-screen input method for the "Done" action. -->
-    <string name="ime_action_done">Done</string>
-
-    <!-- [CHAR LIMIT=6] Long label for a button on a full-screen input method for the "Previous" action. -->
-    <string name="ime_action_previous">Prev</string>
-
-    <!-- Long label for a button on a full-screen input method for an unknown action. -->
-    <string name="ime_action_default">Execute</string>
-
-    <!-- Strings for search suggestions. These are going here because they are referenced by both
-         ContactsProvider and GoogleContactsProvider -->
-    <skip />
-
-
-    <!-- This string appears (on two lines) when you type a number into contacts search, to let you dial the phone number you typed.  The first line will be in bigger type than the second. -->
-    <string name="dial_number_using">Dial number\nusing <xliff:g id="number" example="555">%s</xliff:g></string>
-
-    <!-- This string appears (on two lines) when you type a number into contacts search, to let you create a contact whose phone number is the number you typed.  The first line will be in bigger type than the second. -->
-    <string name="create_contact_using">Create contact\nusing <xliff:g id="number" example="555">%s</xliff:g></string>
-
-    <!-- This string array should be overridden by the manufacture to present a list of carrier-id,locale. The wifi regulatory domain is extracted from the locale information. This is used at startup to set system defaults by checking the system property ro.carrier for the carrier-id and searching through this array -->
-    <!-- An Array of [[Carrier-ID]                     -->
-    <!--              [default-locale]]                -->
-    <string-array translatable="false" name="carrier_properties">
-    </string-array>
-
-    <string name="grant_credentials_permission_message_header">The following one or more apps request permission to access your account, now and in the future.</string>
-    <string name="grant_credentials_permission_message_footer">Do you want to allow this request?</string>
-    <string name="grant_permissions_header_text">Access request</string>
-    <string name="allow">Allow</string>
-    <string name="deny">Deny</string>
-    <string name="permission_request_notification_title">Permission requested</string>
-    <string name="permission_request_notification_with_subtitle">Permission requested\nfor account <xliff:g id="account" example="foo@gmail.com">%s</xliff:g>.</string>
-
-    <!-- Message to show when an intent automatically switches users into the personal profile. -->
-    <string name="forward_intent_to_owner">You\'re using this app outside of your work profile</string>
-    <!-- Message to show when an intent automatically switches users into a work profile. -->
-    <string name="forward_intent_to_work">You\'re using this app in your work profile</string>
-
-    <!-- Label to show for a service that is running because it is an input method. -->
-    <string name="input_method_binding_label">Input method</string>
-    <!-- Label to show for a service that is running because it is a sync adapter. -->
-    <string name="sync_binding_label">Sync</string>
-    <!-- Label to show for a service that is running because it is an accessibility module. -->
-    <string name="accessibility_binding_label">Accessibility</string>
-    <!-- Label to show for a service that is running because it is a wallpaper. -->
-    <string name="wallpaper_binding_label">Wallpaper</string>
-    <!-- Dialog title for user to select a different wallpaper from service list -->
-    <string name="chooser_wallpaper">Change wallpaper</string>
-    <!-- Label to show for a service that is running because it is observing
-         the user's notifications. -->
-    <string name="notification_listener_binding_label">Notification listener</string>
-    <!-- Label to show for a service that is running because the system is in VR mode. -->
-    <string name="vr_listener_binding_label">VR listener</string>
-    <!-- Label to show for a service that is running because it is providing conditions. -->
-    <string name="condition_provider_service_binding_label">Condition provider</string>
-    <!-- Label to show for a service that is running because it is observing and modifying the
-         importance of the user's notifications. -->
-    <string name="notification_ranker_binding_label">Notification ranker service</string>
-
-    <!-- Do Not Translate: Alternate eri.xml -->
-    <string name="alternate_eri_file">/data/eri.xml</string>
-
-    <!-- The title of the notification when VPN is active. -->
-    <string name="vpn_title">VPN activated</string>
-    <!-- The title of the notification when VPN is active with an application name. -->
-    <string name="vpn_title_long">VPN is activated by <xliff:g id="app" example="FooVPN client">%s</xliff:g></string>
-    <!-- The text of the notification when VPN is active. -->
-    <string name="vpn_text">Tap to manage the network.</string>
-    <!-- The text of the notification when VPN is active with a session name. -->
-    <string name="vpn_text_long">Connected to <xliff:g id="session" example="office">%s</xliff:g>. Tap to manage the network.</string>
-
-    <!-- Notification title when connecting to lockdown VPN. -->
-    <string name="vpn_lockdown_connecting">Always-on VPN connecting\u2026</string>
-    <!-- Notification title when connected to lockdown VPN. -->
-    <string name="vpn_lockdown_connected">Always-on VPN connected</string>
-    <!-- Notification title when not connected to lockdown VPN. -->
-    <string name="vpn_lockdown_disconnected">Always-on VPN disconnected</string>
-    <!-- Notification title when error connecting to lockdown VPN. -->
-    <string name="vpn_lockdown_error">Always-on VPN error</string>
-    <!-- Notification body that indicates user can touch to configure lockdown VPN connection. -->
-    <string name="vpn_lockdown_config">Tap to set up</string>
-
-    <!-- Localized strings for WebView -->
-    <!-- Label for button in a WebView that will open a chooser to choose a file to upload -->
-    <string name="upload_file">Choose file</string>
-    <!-- Label for the file upload control when no file has been chosen yet -->
-    <string name="no_file_chosen">No file chosen</string>
-    <!-- Label for <input type="reset"> button in html -->
-    <string name="reset">Reset</string>
-    <!-- Label for <input type="submit"> button in html -->
-    <string name="submit">Submit</string>
-
-    <!-- Strings for car mode notification -->
-    <!-- Shown when car mode is enabled -->
-    <string name="car_mode_disable_notification_title">Car mode enabled</string>
-    <string name="car_mode_disable_notification_message">Tap to exit car mode.</string>
-
-    <!-- Strings for tethered notification -->
-    <!-- Shown when the device is tethered -->
-    <string name="tethered_notification_title">Tethering or hotspot active</string>
-    <string name="tethered_notification_message">Tap to set up.</string>
-
-    <!--  Strings for possible PreferenceActivity Back/Next buttons -->
-    <string name="back_button_label">Back</string>
-    <string name="next_button_label">Next</string>
-
-    <!-- Optional button to Skip a PreferenceActivity [CHAR LIMIT=20] -->
-    <string name="skip_button_label">Skip</string>
-
-    <!-- Displayed on the Find dialog when there are no matches [CHAR LIMIT=NONE]-->
-    <string name="no_matches">No matches</string>
-
-    <!-- Find dialog hint text.  Also used in the menu item to open find on page [CHAR LIMIT=NONE] -->
-    <string name="find_on_page">Find on page</string>
-
-    <!-- Displayed on the Find dialog to display the index of the highlighted
-         match and total number of matches found in the current page. [CHAR LIMIT=NONE] -->
-    <plurals name="matches_found">
-        <!-- Case of one match -->
-        <item quantity="one">1 match</item>
-        <!-- Case of multiple total matches -->
-        <item quantity="other"><xliff:g id="index" example="2">%d</xliff:g> of <xliff:g id="total" example="137">%d</xliff:g></item>
-    </plurals>
-
-    <!-- Label for the "Done" button on the far left of action mode toolbars. -->
-    <string name="action_mode_done">Done</string>
-
-    <!-- Strings for MasterClearReceiver. -->
-    <!-- Text for progress dialog while erasing USB storage volume [CHAR LIMIT=NONE] -->
-    <string name="progress_erasing" product="nosdcard">Erasing USB storage\u2026</string>
-    <!-- Text for progress dialog while erasing SD card [CHAR LIMIT=NONE] -->
-    <string name="progress_erasing" product="default">Erasing SD card\u2026</string>
-
-    <!-- Text for WebView's text selection Action Mode -->
-    <!-- ActionBar action to share the current selection [CHAR LIMIT=10] -->
-    <string name="share">Share</string>
-    <!-- ActionBar action to use the current selection to open the Find on page functionality [CHAR LIMIT=10]-->
-    <string name="find">Find</string>
-    <!-- ActionBar action to use the current selection to perform a web search [CHAR-LIMIT=16] -->
-    <string name="websearch">Web Search</string>
-    <!-- ActionBar action to find the next match in the page [CHAR LIMIT=24] -->
-    <string name="find_next">Find next</string>
-    <!-- ActionBar action to find the previous match in the page [CHAR LIMIT=24] -->
-    <string name="find_previous">Find previous</string>
-
-    <!-- Network positioning notification ticker. The name of the user (e.g. John Doe) who sent
-         the request is shown as a dynamic string. -->
-    <string name="gpsNotifTicker">Location request from <xliff:g id="name">%s</xliff:g></string>
-    <!-- Network positioning notification and verification title to inform the user about
-         an incoming location request. -->
-    <string name="gpsNotifTitle">Location request</string>
-    <!-- Network positioning notification message. The name of the user (e.g. John Doe) and
-         service (SUPL-service) who sent the request is shown as dynamic strings.
-         Translation should not be longer than master text. -->
-    <string name="gpsNotifMessage">Requested by <xliff:g id="name">%1$s</xliff:g> (<xliff:g id="service" example="SUPL-service">%2$s</xliff:g>)</string>
-    <!-- Network positioning verification Yes. Button to push to share location information. -->
-    <string name="gpsVerifYes">Yes</string>
-    <!-- Network positioning verification No. Button to push to deny sharing of location
-         information. -->
-    <string name="gpsVerifNo">No</string>
-
-    <!-- Error message when the sync tried to delete too many things -->
-    <string name="sync_too_many_deletes">Delete limit exceeded</string>
-    <!-- Dialog message for when there are too many deletes that would take place and we want user confirmation -->
-    <string name="sync_too_many_deletes_desc">There are <xliff:g id="number_of_deleted_items">%1$d</xliff:g> deleted items for <xliff:g id="type_of_sync">%2$s</xliff:g>, account <xliff:g id="account_name">%3$s</xliff:g>. What do you want to do?</string>
-    <!-- Dialog action for when there are too many deletes that would take place and we want user confirmation, and the user wants to delete the items -->
-    <string name="sync_really_delete">Delete the items</string>
-    <!-- Dialog action for when there are too many deletes that would take place and we want user confirmation, and the user wants to undo the deletions -->
-    <string name="sync_undo_deletes">Undo the deletes</string>
-    <!-- Dialog action for when there are too many deletes that would take place and we want user confirmation, and the user wants to do nothing for now -->
-    <string name="sync_do_nothing">Do nothing for now</string>
-
-    <!-- Choose Account Activity label -->
-    <string name="choose_account_label">Choose an account</string>
-
-    <string name="add_account_label">"Add an account"</string>
-
-    <!-- List item to add an account [CHAR LIMIT=20] -->
-    <string name="add_account_button_label">Add account</string>
-
-    <!-- NumberPicker - accessibility support -->
-    <!-- Description of the button to increase the NumberPicker value. [CHAR LIMIT=NONE] -->
-    <string name="number_picker_increment_button">Increase</string>
-    <!-- Description of the button to decrease the NumberPicker value. [CHAR LIMIT=NONE] -->
-    <string name="number_picker_decrement_button">Decrease</string>
-    <!-- Description of the tap and hold action to get into scroll mode in NumberPicker. [CHAR LIMIT=NONE] -->
-    <string name="number_picker_increment_scroll_mode"><xliff:g id="value" example="3">%s</xliff:g> touch &amp; hold.</string>
-    <!-- Description of the scrolling action in NumberPicker. [CHAR LIMIT=NONE] -->
-    <string name="number_picker_increment_scroll_action">Slide up to increase and down to decrease.</string>
-
-    <!-- TimePicker - accessibility support -->
-    <!-- Description of the button to increase the TimePicker's minute value. [CHAR LIMIT=NONE] -->
-    <string name="time_picker_increment_minute_button">Increase minute</string>
-    <!-- Description of the button to decrease the TimePicker's minute value. [CHAR LIMIT=NONE] -->
-    <string name="time_picker_decrement_minute_button">Decrease minute</string>
-    <!-- Description of the button to increase the TimePicker's hour value. [CHAR LIMIT=NONE] -->
-    <string name="time_picker_increment_hour_button">Increase hour</string>
-    <!-- Description of the button to decrease the TimePicker's hour value. [CHAR LIMIT=NONE] -->
-    <string name="time_picker_decrement_hour_button">Decrease hour</string>
-    <!-- Description of the button to increase the TimePicker's set PM value. [CHAR LIMIT=NONE] -->
-    <string name="time_picker_increment_set_pm_button">Set PM</string>
-    <!-- Description of the button to decrease the TimePicker's set AM value. [CHAR LIMIT=NONE] -->
-    <string name="time_picker_decrement_set_am_button">Set AM</string>
-
-    <!-- DatePicker - accessibility support -->
-    <!-- Description of the button to increase the DatePicker's month value. [CHAR LIMIT=NONE] -->
-    <string name="date_picker_increment_month_button">Increase month</string>
-    <!-- Description of the button to decrease the DatePicker's month value. [CHAR LIMIT=NONE] -->
-    <string name="date_picker_decrement_month_button">Decrease month</string>
-    <!-- Description of the button to increase the DatePicker's day value. [CHAR LIMIT=NONE] -->
-    <string name="date_picker_increment_day_button">Increase day</string>
-    <!-- Description of the button to decrease the DatePicker's day value. [CHAR LIMIT=NONE] -->
-    <string name="date_picker_decrement_day_button">Decrease day</string>
-    <!-- Description of the button to increase the DatePicker's year value. [CHAR LIMIT=NONE] -->
-    <string name="date_picker_increment_year_button">Increase year</string>
-    <!-- Description of the button to decrease the DatePicker's year value. [CHAR LIMIT=NONE] -->
-    <string name="date_picker_decrement_year_button">Decrease year</string>
-    <!-- Description of the button to move to the previous month. [CHAR LIMIT=NONE] -->
-    <string name="date_picker_prev_month_button">Previous month</string>
-    <!-- Description of the button to move to the next month. [CHAR LIMIT=NONE] -->
-    <string name="date_picker_next_month_button">Next month</string>
-
-    <!-- KeyboardView - accessibility support -->
-    <!-- Description of the Alt button in a KeyboardView. [CHAR LIMIT=NONE] -->
-    <string name="keyboardview_keycode_alt">Alt</string>
-    <!-- Description of the Cancel button in a KeyboardView. [CHAR LIMIT=NONE] -->
-    <string name="keyboardview_keycode_cancel">Cancel</string>
-    <!-- Description of the Delete button in a KeyboardView. [CHAR LIMIT=NONE] -->
-    <string name="keyboardview_keycode_delete">Delete</string>
-    <!-- Description of the Done button in a KeyboardView. [CHAR LIMIT=NONE] -->
-    <string name="keyboardview_keycode_done">Done</string>
-    <!-- Description of the Mode change button in a KeyboardView. [CHAR LIMIT=NONE] -->
-    <string name="keyboardview_keycode_mode_change">Mode change</string>
-    <!-- Description of the Shift button in a KeyboardView. [CHAR LIMIT=NONE] -->
-    <string name="keyboardview_keycode_shift">Shift</string>
-    <!-- Description of the Enter button in a KeyboardView. [CHAR LIMIT=NONE] -->
-    <string name="keyboardview_keycode_enter">Enter</string>
-
-    <!-- ActivityChooserView - accessibility support -->
-    <!-- Description of the shwoing of a popup window with activities to choose from. [CHAR LIMIT=NONE] -->
-    <string name="activitychooserview_choose_application">Choose an app</string>
-
-    <!-- Error message if the share target app cannto be launched. [CHAR LIMIT=NONE] -->
-    <string name="activitychooserview_choose_application_error">Couldn\'t launch <xliff:g id="application_name" example="Acme">%s</xliff:g></string>
-
-    <!-- ShareActionProvider - accessibility support -->
-    <!-- Description of the choose target button in a ShareActionProvider (share UI). [CHAR LIMIT=NONE] -->
-    <string name="shareactionprovider_share_with">Share with</string>
-    <!-- Description of a share target (both in the list of such or the default share button) in a ShareActionProvider (share UI). [CHAR LIMIT=NONE] -->
-    <string name="shareactionprovider_share_with_application">Share with <xliff:g id="application_name" example="Bluetooth">%s</xliff:g></string>
-
-    <!-- Slide lock screen -->
-
-    <!-- Description of the sliding handle in the Slide unlock screen. [CHAR LIMIT=NONE] -->
-    <string name="content_description_sliding_handle">"Sliding handle. Touch &amp; hold."</string>
-
-    <!-- Description of the unlock handle in the Slide unlock screen for tablets. [CHAR LIMIT=NONE] -->
-    <string name="description_target_unlock_tablet">Swipe to unlock.</string>
-
-    <!-- Announce that a headset is required to hear keyboard keys while typing a password. [CHAR LIMIT=NONE] -->
-    <string name="keyboard_headset_required_to_hear_password">Plug in a headset to hear password keys spoken.</string>
-    <!-- The value of a keyboard key announced when accessibility is enabled and no headsed is used. [CHAR LIMIT=NONE] -->
-    <string name="keyboard_password_character_no_headset">Dot.</string>
-
-    <!-- Content description for the action bar "home" affordance. [CHAR LIMIT=NONE] -->
-    <string name="action_bar_home_description">Navigate home</string>
-    <!-- Content description for the action bar "up" affordance. [CHAR LIMIT=NONE] -->
-    <string name="action_bar_up_description">Navigate up</string>
-    <!-- Content description for the action menu overflow button. [CHAR LIMIT=NONE] -->
-    <string name="action_menu_overflow_description">More options</string>
-    <!-- Formatting string for describing the action bar's title/home/up affordance.
-         This is a single tappable "button" that includes the app icon, the Up indicator
-         (usually a "<" chevron) and the window title text.
-         %1$s is the title. %2$s is the description of what tapping/clicking the whole
-         thing is going to do. -->
-    <string name="action_bar_home_description_format">%1$s, %2$s</string>
-    <!-- Just like action_bar_home_description_format, but this one will be used
-         if the window is also providing subtitle text.
-         %1$s is the title. %2$s is the subtitle. %3$s is the description of what
-         tapping/clicking the whole thing is going to do. -->
-    <string name="action_bar_home_subtitle_description_format">%1$s, %2$s, %3$s</string>
-
-    <!-- Storage description for internal shared storage. [CHAR LIMIT=NONE] -->
-    <string name="storage_internal">Internal shared storage</string>
-
-    <!-- Storage description for a generic SD card. [CHAR LIMIT=NONE] -->
-    <string name="storage_sd_card">SD card</string>
-    <!-- Storage description for a SD card from a specific manufacturer. [CHAR LIMIT=NONE] -->
-    <string name="storage_sd_card_label"><xliff:g id="manufacturer" example="SanDisk">%s</xliff:g> SD card</string>
-
-    <!-- Storage description for a generic USB drive. [CHAR LIMIT=NONE] -->
-    <string name="storage_usb_drive">USB drive</string>
-    <!-- Storage description for a USB drive from a specific manufacturer. [CHAR LIMIT=NONE] -->
-    <string name="storage_usb_drive_label"><xliff:g id="manufacturer" example="Seagate">%s</xliff:g> USB drive</string>
-
-    <!-- Storage description for USB storage. [CHAR LIMIT=NONE] -->
-    <string name="storage_usb">USB storage</string>
-
-    <!-- Button text for the edit menu in input method extract mode. [CHAR LIMIT=16] -->
-    <string name="extract_edit_menu_button">Edit</string>
-
-    <!-- Notification title when data usage has exceeded warning threshold. [CHAR LIMIT=50] -->
-    <string name="data_usage_warning_title">Data usage alert</string>
-    <!-- Notification body when data usage has exceeded warning threshold. [CHAR LIMIT=32] -->
-    <string name="data_usage_warning_body">Tap to view usage and settings.</string>
-
-    <!-- Notification title when 2G-3G data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32] -->
-    <string name="data_usage_3g_limit_title">2G-3G data limit reached</string>
-    <!-- Notification title when 4G data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32] -->
-    <string name="data_usage_4g_limit_title">4G data limit reached</string>
-    <!-- Notification title when mobile data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32] -->
-    <string name="data_usage_mobile_limit_title">Cellular data limit reached</string>
-    <!-- Notification title when Wi-Fi data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32] -->
-    <string name="data_usage_wifi_limit_title">Wi-Fi data limit reached</string>
-    <!-- Notification body when data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32] -->
-    <string name="data_usage_limit_body">Data paused for rest of cycle</string>
-
-    <!-- Notification title when 2G-3G data usage has exceeded limit threshold. [CHAR LIMIT=32] -->
-    <string name="data_usage_3g_limit_snoozed_title">2G-3G data limit exceeded</string>
-    <!-- Notification title when 4G data usage has exceeded limit threshold. [CHAR LIMIT=32] -->
-    <string name="data_usage_4g_limit_snoozed_title">4G data limit exceeded</string>
-    <!-- Notification title when mobile data usage has exceeded limit threshold. [CHAR LIMIT=32] -->
-    <string name="data_usage_mobile_limit_snoozed_title">Cellular data limit exceeded</string>
-    <!-- Notification title when Wi-Fi data usage has exceeded limit threshold. [CHAR LIMIT=32] -->
-    <string name="data_usage_wifi_limit_snoozed_title">Wi-Fi data limit exceeded</string>
-    <!-- Notification body when data usage has exceeded limit threshold. [CHAR LIMIT=32] -->
-    <string name="data_usage_limit_snoozed_body"><xliff:g id="size" example="3.8GB">%s</xliff:g> over specified limit.</string>
-
-    <!-- Notification title when background data usage is limited. [CHAR LIMIT=32] -->
-    <string name="data_usage_restricted_title">Background data restricted</string>
-    <!-- Notification body when background data usage is limited. [CHAR LIMIT=32] -->
-    <string name="data_usage_restricted_body">Tap to remove restriction.</string>
-
-    <!-- SSL Certificate dialogs -->
-    <!-- Title for an SSL Certificate dialog -->
-    <string name="ssl_certificate">Security certificate</string>
-    <!-- Message on an SSL Certificate dialog -->
-    <string name="ssl_certificate_is_valid">This certificate is valid.</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="issued_to">Issued to:</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="common_name">Common name:</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="org_name">Organization:</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="org_unit">Organizational unit:</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="issued_by">Issued by:</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="validity_period">Validity:</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="issued_on">Issued on:</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="expires_on">Expires on:</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="serial_number">Serial number:</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="fingerprints">Fingerprints:</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="sha256_fingerprint">SHA-256 fingerprint:</string>
-    <!-- Label for an information field on an SSL Certificate Dialog -->
-    <string name="sha1_fingerprint">SHA-1 fingerprint:</string>
-
-    <!-- Title for a button to expand the list of activities in ActivityChooserView [CHAR LIMIT=25] -->
-    <string name="activity_chooser_view_see_all">See all</string>
-    <!-- Title default for a dialog showing possible activities in ActivityChooserView [CHAR LIMIT=25] -->
-    <string name="activity_chooser_view_dialog_title_default">Choose activity</string>
-
-    <!-- Title for a dialog showing possible activities for sharing in ShareActionProvider [CHAR LIMIT=25] -->
-    <string name="share_action_provider_share_with">Share with</string>
-
-    <!-- STK sending DTMF, SMS, USSD, SS -->
-    <string name="sending">Sending\u2026</string>
-
-    <!-- STK launch Browser -->
-    <string name="launchBrowserDefault">Launch Browser?</string>
-
-    <!-- STK setup Call -->
-    <string name="SetupCallDefault">Accept call?</string>
-
-    <!-- Title for a button to choose the currently selected activity
-         as the default in the activity resolver. [CHAR LIMIT=25] -->
-    <string name="activity_resolver_use_always">Always</string>
-
-    <!-- Title for a button to choose the currently selected activity
-         from the activity resolver to use just this once. [CHAR LIMIT=25] -->
-    <string name="activity_resolver_use_once">Just once</string>
-
-    <!-- Text for the toast that is shown when the user clicks on a launcher that
-         doesn't support the work profile. [CHAR LIMIT=100] -->
-    <string name="activity_resolver_work_profiles_support">%1$s doesn\'t support work profile</string>
-
-    <!-- Name of the default audio route for tablets when nothing
-         is connected to a headphone or other wired audio output jack. [CHAR LIMIT=50] -->
-    <string name="default_audio_route_name" product="tablet">Tablet</string>
-
-    <!-- Name of the default audio route for tablets when nothing
-         is connected to a headphone or other wired audio output jack. [CHAR LIMIT=50] -->
-    <string name="default_audio_route_name" product="tv">TV</string>
-
-    <!-- Name of the default audio route when nothing is connected to
-         a headphone or other wired audio output jack. [CHAR LIMIT=50] -->
-    <string name="default_audio_route_name" product="default">Phone</string>
-
-    <!-- Name of the default audio route when wired headphones are
-         connected. [CHAR LIMIT=50] -->
-    <string name="default_audio_route_name_headphones">Headphones</string>
-
-    <!-- Name of the default audio route when an audio dock is connected. [CHAR LIMIT=50] -->
-    <string name="default_audio_route_name_dock_speakers">Dock speakers</string>
-
-    <!-- Name of the default media route when HDMI is connected. [CHAR LIMIT=50] -->
-    <string name="default_media_route_name_hdmi">HDMI</string>
-
-    <!-- Name of the default audio route category. [CHAR LIMIT=50] -->
-    <string name="default_audio_route_category_name">System</string>
-
-    <!-- Description of the bluetooth a2dp audio route. [CHAR LIMIT=50] -->
-    <string name="bluetooth_a2dp_audio_route_name">Bluetooth audio</string>
-
-    <!-- Description of a wireless display route. [CHAR LIMIT=50] -->
-    <string name="wireless_display_route_description">Wireless display</string>
-
-    <!-- Content description of a MediaRouteButton for accessibility support.
-        Cast is the standard android verb for sending content to a remote device. [CHAR LIMIT=50] -->
-    <string name="media_route_button_content_description">Cast</string>
-
-    <!-- Title of the media route chooser dialog. [CHAR LIMIT=40] -->
-    <string name="media_route_chooser_title">Connect to device</string>
-
-    <!-- Title of the media route chooser dialog for selecting remote display routes. [CHAR LIMIT=40] -->
-    <string name="media_route_chooser_title_for_remote_display">Cast screen to device</string>
-
-    <!-- Placeholder text to show when no devices have been found. [CHAR LIMIT=50] -->
-    <string name="media_route_chooser_searching">Searching for devices\u2026</string>
-
-    <!-- Button to access extended settings.  [CHAR LIMIT=30] -->
-    <string name="media_route_chooser_extended_settings">Settings</string>
-
-    <!-- Button to disconnect from a media route.  [CHAR LIMIT=30] -->
-    <string name="media_route_controller_disconnect">Disconnect</string>
-
-    <!-- Status message for remote routes attempting to scan/determine availability -->
-    <string name="media_route_status_scanning">Scanning...</string>
-
-    <!-- Status message for a remote route attempting to connect -->
-    <string name="media_route_status_connecting">Connecting...</string>
-
-    <!-- Status message for a remote route that is confirmed to be available for connection -->
-    <string name="media_route_status_available">Available</string>
-
-    <!-- Status message for remote routes that are not available for connection right now -->
-    <string name="media_route_status_not_available">Not available</string>
-
-    <!-- Status message for a remote route that is in use (and thus unavailabe) right now -->
-    <string name="media_route_status_in_use">In use</string>
-
-    <!-- Display manager service -->
-
-    <!-- Name of the built-in display.  [CHAR LIMIT=50] -->
-    <string name="display_manager_built_in_display_name">Built-in Screen</string>
-
-    <!-- Name of the HDMI display.  [CHAR LIMIT=50] -->
-    <string name="display_manager_hdmi_display_name">HDMI Screen</string>
-
-    <!-- Name of the N'th overlay display for testing.  [CHAR LIMIT=50] -->
-    <string name="display_manager_overlay_display_name">Overlay #<xliff:g id="id">%1$d</xliff:g></string>
-
-    <!-- Title text to show within the overlay.  [CHAR LIMIT=50] -->
-    <string name="display_manager_overlay_display_title"><xliff:g id="name">%1$s</xliff:g>: <xliff:g id="width">%2$d</xliff:g>x<xliff:g id="height">%3$d</xliff:g>, <xliff:g id="dpi">%4$d</xliff:g> dpi</string>
-
-    <!-- Title text to append when the display is secure.  [CHAR LIMIT=30] -->
-    <string name="display_manager_overlay_display_secure_suffix">, secure</string>
-
-    <!-- Keyguard strings -->
-    <!-- Message shown in pattern unlock after some number of unsuccessful attempts -->
-    <string name="kg_forgot_pattern_button_text">Forgot Pattern</string>
-    <!-- Message shown when user enters wrong pattern -->
-    <string name="kg_wrong_pattern">Wrong Pattern</string>
-    <!-- Message shown when user enters wrong password -->
-    <string name="kg_wrong_password">Wrong Password</string>
-    <!-- Message shown when user enters wrong PIN -->
-    <string name="kg_wrong_pin">Wrong PIN</string>
-    <!-- Countdown message shown after too many failed unlock attempts -->
-    <string name="kg_too_many_failed_attempts_countdown">Try again in <xliff:g id="number">%1$d</xliff:g> seconds.</string>
-    <!-- Instructions for using the pattern unlock screen -->
-    <string name="kg_pattern_instructions">Draw your pattern</string>
-    <!-- Instructions for using the SIM PIN unlock screen -->
-    <string name="kg_sim_pin_instructions">Enter SIM PIN</string>
-    <!-- Instructions for using the PIN unlock screen -->
-    <string name="kg_pin_instructions">Enter PIN</string>
-    <!-- Instructions for using the password unlock screen -->
-    <string name="kg_password_instructions">Enter Password</string>
-    <!-- Hint shown in the PUK screen that asks the user to enter the PUK code given to them by their provider -->
-    <string name="kg_puk_enter_puk_hint">SIM is now disabled. Enter PUK code to continue. Contact carrier for details.</string>
-    <!-- Hint shown in the PUK unlock screen PIN TextView -->
-    <string name="kg_puk_enter_pin_hint">Enter desired PIN code</string>
-    <!-- Message shown when the user needs to confirm the PIN they just entered in the PUK screen -->
-    <string name="kg_enter_confirm_pin_hint">Confirm desired PIN code</string>
-    <!-- Message shown in dialog while the device is unlocking the SIM card -->
-    <string name="kg_sim_unlock_progress_dialog_message">Unlocking SIM card\u2026</string>
-    <!-- Message shown when the user enters the wrong PIN code -->
-    <string name="kg_password_wrong_pin_code">Incorrect PIN code.</string>
-    <!-- Message shown when the user enters an invalid SIM pin password in PUK screen -->
-    <string name="kg_invalid_sim_pin_hint">Type a PIN that is 4 to 8 numbers.</string>
-    <!-- Message shown when the user enters an invalid PUK code in the PUK screen -->
-    <string name="kg_invalid_sim_puk_hint">PUK code should be 8 numbers.</string>
-    <!-- Message shown when the user enters an invalid PUK code -->
-    <string name="kg_invalid_puk">Re-enter the correct PUK code. Repeated attempts will permanently disable the SIM.</string>
-      <!-- String shown in PUK screen when PIN codes don't match -->
-    <string name="kg_invalid_confirm_pin_hint" product="default">PIN codes does not match</string>
-    <!-- Message shown when the user exceeds the maximum number of pattern attempts -->
-    <string name="kg_login_too_many_attempts">Too many pattern attempts</string>
-    <!-- Instructions show in account unlock screen allowing user to enter their email password -->
-    <string name="kg_login_instructions">To unlock, sign in with your Google account.</string>
-    <!-- Hint shown in TextView in account unlock screen of keyguard -->
-    <string name="kg_login_username_hint">Username (email)</string>
-    <!-- Hint shown in TextView in account unlock screen of keyguard -->
-    <string name="kg_login_password_hint">Password</string>
-    <!-- Label shown on sign in button on account unlock screen of keyguard -->
-    <string name="kg_login_submit_button">Sign in</string>
-    <!-- Message shown when the user enters an invalid username/password combination in account unlock screen of keyguard -->
-    <string name="kg_login_invalid_input">Invalid username or password.</string>
-    <!-- Hint text shown when user has too many failed password attempts in account unlock screen of keyguard -->
-    <string name="kg_login_account_recovery_hint">Forgot your username or password\?\nVisit <b>google.com/accounts/recovery</b>.</string>
-    <!-- Message shown while device checks username/password in account unlock screen of keyguard -->
-    <string name="kg_login_checking_password">Checking account\u2026</string>
-    <!-- Message shown in dialog when max number of attempts are reached for PIN screen of keyguard -->
-    <string name="kg_too_many_failed_pin_attempts_dialog_message">
-        You have incorrectly typed your PIN <xliff:g id="number">%1$d</xliff:g> times.
-        \n\nTry again in <xliff:g id="number">%2$d</xliff:g> seconds.
-    </string>
-    <!-- Message shown in dialog when max number of attempts are reached for password screen of keyguard -->
-    <string name="kg_too_many_failed_password_attempts_dialog_message">
-        You have incorrectly typed your password <xliff:g id="number">%1$d</xliff:g> times.
-        \n\nTry again in <xliff:g id="number">%2$d</xliff:g> seconds.
-    </string>
-    <string name="kg_too_many_failed_pattern_attempts_dialog_message">
-        You have incorrectly drawn your unlock pattern <xliff:g id="number">%1$d</xliff:g> times.
-        \n\nTry again in <xliff:g id="number">%2$d</xliff:g> seconds.
-    </string>
-    <!-- Message shown when user is almost at the limit of password attempts where the device will be wiped. -->
-    <string name="kg_failed_attempts_almost_at_wipe" product="tablet">
-       You have incorrectly attempted to unlock the tablet <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       the tablet will be reset to factory default and all user data will be lost.
-    </string>
-    <!-- Message shown when user is almost at the limit of password attempts where the device will be wiped. -->
-    <string name="kg_failed_attempts_almost_at_wipe" product="tv">
-       You have incorrectly attempted to unlock the TV <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       the TV will be reset to factory default and all user data will be lost.
-    </string>
-    <!-- Message shown when user is almost at the limit of password attempts where the device will be wiped. -->
-    <string name="kg_failed_attempts_almost_at_wipe" product="default">
-       You have incorrectly attempted to unlock the phone <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       the phone will be reset to factory default and all user data will be lost.
-    </string>
-    <!-- Message shown in dialog when user has exceeded the maximum attempts and the device will now be wiped -->
-    <string name="kg_failed_attempts_now_wiping" product="tablet">
-       You have incorrectly attempted to unlock the tablet <xliff:g id="number">%d</xliff:g> times.
-       The tablet will now be reset to factory default.
-    </string>
-    <!-- Message shown in dialog when user has exceeded the maximum attempts and the device will now be wiped -->
-    <string name="kg_failed_attempts_now_wiping" product="tv">
-       You have incorrectly attempted to unlock the TV <xliff:g id="number">%d</xliff:g> times.
-       The TV will now be reset to factory default.
-    </string>
-    <!-- Message shown in dialog when user has exceeded the maximum attempts and the device will now be wiped -->
-    <string name="kg_failed_attempts_now_wiping" product="default">
-       You have incorrectly attempted to unlock the phone <xliff:g id="number">%d</xliff:g> times.
-       The phone will now be reset to factory default.
-    </string>
-    <!-- Message shown in dialog when user is almost at the limit where they will be
-    locked out and may have to enter an alternate username/password to unlock the phone -->
-    <string name="kg_failed_attempts_almost_at_login" product="tablet">
-       You have incorrectly drawn your unlock pattern <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       you will be asked to unlock your tablet using an email account.\n\n
-       Try again in <xliff:g id="number">%3$d</xliff:g> seconds.
-    </string>
-    <!-- Message shown in dialog when user is almost at the limit where they will be
-    locked out and may have to enter an alternate username/password to unlock the phone -->
-    <string name="kg_failed_attempts_almost_at_login" product="tv">
-       You have incorrectly drawn your unlock pattern <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       you will be asked to unlock your TV using an email account.\n\n
-       Try again in <xliff:g id="number">%3$d</xliff:g> seconds.
-    </string>
-    <!-- Message shown in dialog when user is almost at the limit where they will be
-    locked out and may have to enter an alternate username/password to unlock the phone -->
-    <string name="kg_failed_attempts_almost_at_login" product="default">
-       You have incorrectly drawn your unlock pattern <xliff:g id="number">%1$d</xliff:g> times.
-       After <xliff:g id="number">%2$d</xliff:g> more unsuccessful attempts,
-       you will be asked to unlock your phone using an email account.\n\n
-       Try again in <xliff:g id="number">%3$d</xliff:g> seconds.
-    </string>
-    <!-- Sequence of characters used to separate message strings in keyguard. Typically just em-dash
-         with spaces on either side. [CHAR LIMIT=3] -->
-    <string name="kg_text_message_separator" product="default">" \u2014 "</string>
-    <!-- The delete-widget drop target button text -->
-    <string name="kg_reordering_delete_drop_target_text">Remove</string>
-
-    <!-- Message shown in dialog when user is attempting to set the music volume above the
-    recommended maximum level for headphones -->
-    <string name="safe_media_volume_warning" product="default">
-       "Raise volume above recommended level?\n\nListening at high volume for long periods may damage your hearing."
-    </string>
-
-    <!-- Text spoken when the user is performing a gesture that will enable accessibility. [CHAR LIMIT=none] -->
-    <string name="continue_to_enable_accessibility">Keep holding down two fingers to enable accessibility.</string>
-    <!-- Text spoken when the user enabled accessibility. [CHAR LIMIT=none] -->
-    <string name="accessibility_enabled">Accessibility enabled.</string>
-    <!-- Text spoken when the user stops preforming a gesture that would enable accessibility. [CHAR LIMIT=none] -->
-    <string name="enable_accessibility_canceled">Accessibility canceled.</string>
-    <!-- Text spoken when the current user is switched if accessibility is enabled. [CHAR LIMIT=none] -->
-    <string name="user_switched">Current user <xliff:g id="name" example="Bob">%1$s</xliff:g>.</string>
-    <!-- Message shown when switching to a user [CHAR LIMIT=none] -->
-    <string name="user_switching_message">Switching to <xliff:g id="name" example="Bob">%1$s</xliff:g>\u2026</string>
-    <!-- Message when logging out a user on a split user system -->
-    <string name="user_logging_out_message">Logging out <xliff:g id="name" example="Bob">%1$s</xliff:g>\u2026</string>
-    <!-- Default name of the owner user [CHAR LIMIT=20] -->
-    <string name="owner_name" msgid="3879126011135546571">Owner</string>
-    <!-- Error message title [CHAR LIMIT=35] -->
-    <string name="error_message_title">Error</string>
-    <!-- Message informing user that the change was disallowed by an administrator. [CHAR LIMIT=none] -->
-    <string name="error_message_change_not_allowed">This change isn\'t allowed by your administrator</string>
-    <!-- Message informing user that the requested activity could not be found [CHAR LIMIT=none] -->
-    <string name="app_not_found">No application found to handle this action</string>
-    <string name="revoke">Revoke</string>
-
-    <!-- Printing -->
-
-    <!-- ISO (European standard) A0 media (paper) size: 33.11" × 46.81" -->
-    <string name="mediasize_iso_a0">ISO A0</string>
-    <!-- ISO (European standard) A1 media (paper) size: 23.39" × 33.11" -->
-    <string name="mediasize_iso_a1">ISO A1</string>
-    <!-- ISO (European standard) A2 media (paper) size: 16.54" x 23.39" -->
-    <string name="mediasize_iso_a2">ISO A2</string>
-    <!-- ISO (European standard) A3 media (paper) size: 11.69" x 16.54" -->
-    <string name="mediasize_iso_a3">ISO A3</string>
-    <!-- ISO (European standard) A4 media (paper) size: 8.27" x 11.69" -->
-    <string name="mediasize_iso_a4">ISO A4</string>
-    <!-- ISO (European standard) A5 media (paper) size: 5.83" x 8.27" -->
-    <string name="mediasize_iso_a5">ISO A5</string>
-    <!-- ISO (European standard) A6 media (paper) size: 4.13" x 5.83" -->
-    <string name="mediasize_iso_a6">ISO A6</string>
-    <!-- ISO (European standard) A7 media (paper) size: 2.91" x 4.13" -->
-    <string name="mediasize_iso_a7">ISO A7</string>
-    <!-- ISO (European standard) A8 media (paper) size: 2.05" x 2.91" -->
-    <string name="mediasize_iso_a8">ISO A8</string>
-    <!-- ISO (European standard) A9 media (paper) size: 1.46" x 2.05" -->
-    <string name="mediasize_iso_a9">ISO A9</string>
-    <!-- ISO (European standard) A10 media (paper) size: 1.02" x 1.46" -->
-    <string name="mediasize_iso_a10">ISO A10</string>
-
-    <!-- ISO (European standard) B0 media (paper) size: 39.37" x 55.67" -->
-    <string name="mediasize_iso_b0">ISO B0</string>
-    <!-- ISO (European standard) B1 media (paper) size: 27.83" x 39.37" -->
-    <string name="mediasize_iso_b1">ISO B1</string>
-    <!-- ISO (European standard) B2 media (paper) size - 19.69" x 27.83" -->
-    <string name="mediasize_iso_b2">ISO B2</string>
-    <!-- ISO (European standard) B3 media (paper) size: 13.90" x 19.69" -->
-    <string name="mediasize_iso_b3">ISO B3</string>
-    <!-- ISO (European standard) B4 media (paper) size: 9.84" x 13.90" -->
-    <string name="mediasize_iso_b4">ISO B4</string>
-    <!-- ISO (European standard) B5 media (paper) size: 6.93" x 9.84" -->
-    <string name="mediasize_iso_b5">ISO B5</string>
-    <!-- ISO (European standard) B6 media (paper) size: 4.92" x 6.93" -->
-    <string name="mediasize_iso_b6">ISO B6</string>
-    <!-- ISO (European standard) B7 media (paper) size: 3.46" x 4.92" -->
-    <string name="mediasize_iso_b7">ISO B7</string>
-    <!-- ISO (European standard) B8 media (paper) size: 2.44" x 3.46" -->
-    <string name="mediasize_iso_b8">ISO B8</string>
-    <!-- ISO (European standard) B9 media (paper) size: 1.73" x 2.44" -->
-    <string name="mediasize_iso_b9">ISO B9</string>
-    <!-- ISO (European standard) B10 media (paper) size: 1.22" x 1.73" -->
-    <string name="mediasize_iso_b10">ISO B10</string>
-
-    <!-- ISO (European standard) C0 media (paper) size: 36.10" x 51.06" -->
-    <string name="mediasize_iso_c0">ISO C0</string>
-    <!-- ISO (European standard) C1 media (paper) size: 25.51" x 36.10" -->
-    <string name="mediasize_iso_c1">ISO C1</string>
-    <!-- ISO (European standard) C2 media (paper) size: 18.03" x 25.51" -->
-    <string name="mediasize_iso_c2">ISO C2</string>
-    <!-- ISO (European standard) C3 media (paper) size: 12.76" x 18.03" -->
-    <string name="mediasize_iso_c3">ISO C3</string>
-    <!-- ISO (European standard) C4 media (paper) size: 9.02" x 12.76" -->
-    <string name="mediasize_iso_c4">ISO C4</string>
-    <!-- ISO (European standard) C5 media (paper) size: 6.38" x 9.02" -->
-    <string name="mediasize_iso_c5">ISO C5</string>
-    <!-- ISO (European standard) C6 media (paper) size: 4.49" x 6.38" -->
-    <string name="mediasize_iso_c6">ISO C6</string>
-    <!-- ISO (European standard) C7 media (paper) size: 3.19" x 4.49" -->
-    <string name="mediasize_iso_c7">ISO C7</string>
-    <!-- ISO ISO C8 media (paper) size: 2.24" x 3.19" -->
-    <string name="mediasize_iso_c8">ISO C8</string>
-    <!-- ISO ISO C9 media (paper) size: 1.57" x 2.24" -->
-    <string name="mediasize_iso_c9">ISO C9</string>
-    <!-- ISO (European standard) C10 media (paper) size: 1.10" x 1.57" -->
-    <string name="mediasize_iso_c10">ISO C10</string>
-
-    <!-- North America Letter media (paper) size: 8.5" × 11" (279mm x 216mm) -->
-    <string name="mediasize_na_letter">Letter</string>
-    <!-- North America Government Letter media (paper) size: 8.0" × 10.5" (203mm x 267mm) -->
-    <string name="mediasize_na_gvrnmt_letter">Government Letter</string>
-    <!-- North America Legal media (paper) size: 8.5" × 14" (216mm x 356mm) -->
-    <string name="mediasize_na_legal">Legal</string>
-    <!-- North America Junior Legal media (paper) size: 8.0" × 5.0" (203mm × 127mm) -->
-    <string name="mediasize_na_junior_legal">Junior Legal</string>
-    <!-- North America Ledger media (paper) size: 17" × 11" (432mm × 279mm) -->
-    <string name="mediasize_na_ledger">Ledger</string>
-    <!-- North America Tabloid media (paper) size: 11" × 17" (279mm × 432mm) -->
-    <string name="mediasize_na_tabloid">Tabloid</string>
-
-    <!-- North America Index Card 3x5 media (paper) size: 3" x 5" (76mm x 127mm) -->
-    <string name="mediasize_na_index_3x5">Index Card 3x5</string>
-    <!-- North America Index Card 4x6 media (paper) size: 4" x 6" (102mm x 152mm) -->
-    <string name="mediasize_na_index_4x6">Index Card 4x6</string>
-    <!-- North America Index Card 5x8 media (paper) size: 5" x 8" (127mm x 203mm) -->
-    <string name="mediasize_na_index_5x8">Index Card 5x8</string>
-    <!-- North America Monarch media (paper) size: 7.25" x 10.5" (184mm x 267mm) -->
-    <string name="mediasize_na_monarch">Monarch</string>
-    <!-- North America Quarto media (paper) size: 8" x 10" (203mm x 254mm) -->
-    <string name="mediasize_na_quarto">Quarto</string>
-    <!-- North America Foolscap media (paper) size: 8" x 13" (203mm x 330mm) -->
-    <string name="mediasize_na_foolscap">Foolscap</string>
-
-    <!-- Chinese Roc 8k media (paper) size: 270mm x 390mm (10.629" x 15.3543") -->
-    <string name="mediasize_chinese_roc_8k">ROC 8K</string>
-    <!-- Chinese Roc 16k media (paper) size: 195mm x 270mm (7.677" x 10.629") -->
-    <string name="mediasize_chinese_roc_16k">ROC 16K</string>
-
-    <!-- Chinese PRC 1 media (paper) size: 102mm x 165mm (4.015" x 6.496") -->
-    <string name="mediasize_chinese_prc_1">PRC 1</string>
-    <!-- Chinese PRC 2 media (paper) size: 102mm x 176mm (4.015" x 6.929") -->
-    <string name="mediasize_chinese_prc_2">PRC 2</string>
-    <!-- Chinese PRC 3 media (paper) size: 125mm x 176mm (4.921" x 6.929") -->
-    <string name="mediasize_chinese_prc_3">PRC 3</string>
-    <!-- Chinese PRC 4 media (paper) size: 110mm x 208mm (4.330" x 8.189") -->
-    <string name="mediasize_chinese_prc_4">PRC 4</string>
-    <!-- Chinese PRC 5 media (paper) size: 110mm x 220mm (4.330" x 8.661") -->
-    <string name="mediasize_chinese_prc_5">PRC 5</string>
-    <!-- Chinese PRC 6 media (paper) size: 120mm x 320mm (4.724" x 12.599") -->
-    <string name="mediasize_chinese_prc_6">PRC 6</string>
-    <!-- Chinese PRC 7 media (paper) size: 160mm x 230mm (6.299" x 9.055") -->
-    <string name="mediasize_chinese_prc_7">PRC 7</string>
-    <!-- Chinese PRC 8 media (paper) size: 120mm x 309mm (4.724" x 12.165") -->
-    <string name="mediasize_chinese_prc_8">PRC 8</string>
-    <!-- Chinese PRC 9 media (paper) size: 229mm x 324mm (9.016" x 12.756") -->
-    <string name="mediasize_chinese_prc_9">PRC 9</string>
-    <!-- Chinese PRC 10 media (paper) size: 324mm x 458mm (12.756" x 18.032") -->
-    <string name="mediasize_chinese_prc_10">PRC 10</string>
-
-    <!-- Chinese RPC 16K media (paper) size: 146mm x 215mm (5.749" x 8.465") -->
-    <string name="mediasize_chinese_prc_16k">PRC 16K</string>
-    <!-- Chinese Pa Kai media (paper) size: 146mm x 215mm (5.749" x 8.465") -->
-    <string name="mediasize_chinese_om_pa_kai">Pa Kai</string>
-    <!-- Chinese Dai Pa Kai media (paper) size: 275mm x 395mm (10.827" x 15.551") -->
-    <string name="mediasize_chinese_om_dai_pa_kai">Dai Pa Kai</string>
-    <!-- Chinese Jurro Ku Kai media (paper) size: 275mm x 395mm (10.827" x 15.551") -->
-    <string name="mediasize_chinese_om_jurro_ku_kai">Jurro Ku Kai</string>
-
-    <!-- Japanese JIS B10 media (paper) size: 32mm x 45mm (1.259" x 1.772") -->
-    <string name="mediasize_japanese_jis_b10">JIS B10</string>
-    <!-- Japanese JIS B9 media (paper) size: 45mm x 64mm (1.772" x 2.52") -->
-    <string name="mediasize_japanese_jis_b9">JIS B9</string>
-    <!-- Japanese JIS B8 media (paper) size: 64mm x 91mm (2.52" x 3.583") -->
-    <string name="mediasize_japanese_jis_b8">JIS B8</string>
-    <!-- Japanese JIS B7 media (paper) size: 91mm x 128mm (3.583" x 5.049") -->
-    <string name="mediasize_japanese_jis_b7">JIS B7</string>
-    <!-- Japanese JIS B6 media (paper) size: 128mm x 182mm (5.049" x 7.165") -->
-    <string name="mediasize_japanese_jis_b6">JIS B6</string>
-    <!-- Japanese JIS B5 media (paper) size: 182mm x 257mm (7.165" x 10.118") -->
-    <string name="mediasize_japanese_jis_b5">JIS B5</string>
-    <!-- Japanese JIS B4 media (paper) size: 257mm x 364mm (10.118" x 14.331") -->
-    <string name="mediasize_japanese_jis_b4">JIS B4</string>
-    <!-- Japanese JIS B3 media (paper) size: 364mm x 515mm (14.331" x 20.276") -->
-    <string name="mediasize_japanese_jis_b3">JIS B3</string>
-    <!-- Japanese JIS B2 media (paper) size: 515mm x 728mm (20.276" x 28.661") -->
-    <string name="mediasize_japanese_jis_b2">JIS B2</string>
-    <!-- Japanese JIS B1 media (paper) size: 728mm x 1030mm (28.661" x 40.551") -->
-    <string name="mediasize_japanese_jis_b1">JIS B1</string>
-    <!-- Japanese JIS B0 media (paper) size: 1030mm x 1456mm (40.551" x 57.323") -->
-    <string name="mediasize_japanese_jis_b0">JIS B0</string>
-
-    <!-- Japanese JIS Exec media (paper) size: 216mm x 330mm (8.504" x 12.992") -->
-    <string name="mediasize_japanese_jis_exec">JIS Exec</string>
-
-    <!-- Japanese Chou4 media (paper) size: 90mm x 205mm (3.543" x 8.071") -->
-    <string name="mediasize_japanese_chou4">Chou4</string>
-    <!-- Japanese Chou3 media (paper) size: 120mm x 235mm (4.724" x 9.252") -->
-    <string name="mediasize_japanese_chou3">Chou3</string>
-    <!-- Japanese Chou2 media (paper) size: 111.1mm x 146mm (4.374" x 5.748") -->
-    <string name="mediasize_japanese_chou2">Chou2</string>
-
-    <!-- Japanese Hagaki media (paper) size: 100mm x 148mm (3.937" x 5.827") -->
-    <string name="mediasize_japanese_hagaki">Hagaki </string>
-    <!-- Japanese Oufuku media (paper) size: 148mm x 200mm (5.827" x 7.874") -->
-    <string name="mediasize_japanese_oufuku">Oufuku </string>
-    <!-- Japanese Kahu media (paper) size: 240mm x 322.1mm (9.449" x 12.681") -->
-    <string name="mediasize_japanese_kahu">Kahu</string>
-    <!-- Japanese Kaku2 media (paper) size: 240mm x 332mm (9.449" x 13.071") -->
-    <string name="mediasize_japanese_kaku2">Kaku2</string>
-    <!-- Japanese You4 media (paper) size: 105mm x 235mm (4.134" x 9.252") -->
-    <string name="mediasize_japanese_you4">You4</string>
-
-    <!-- Media (paper) size for specifying any paper size in portrait.-->
-    <string name="mediasize_unknown_portrait">Unknown portrait</string>
-    <!-- Media (paper) size for specifying any paper size in landscape.-->
-    <string name="mediasize_unknown_landscape">Unknown landscape</string>
-
-    <!-- Write fail reason: printing was cancelled.[CHAR LIMIT=none] -->
-    <string name="write_fail_reason_cancelled">Cancelled</string>
-    <!-- Write fail reason: couldn't write the printed content. [CHAR LIMIT=none] -->
-    <string name="write_fail_reason_cannot_write">Error writing content</string>
-
-    <!-- Print fail reason: unknown. [CHAR LIMIT=25] -->
-    <string name="reason_unknown">unknown</string>
-
-    <!-- Print fail reason: the print service that has to process the print job is not available. [CHAR LIMIT=none] -->
-    <string name="reason_service_unavailable">Print service not enabled</string>
-
-    <!-- Title for the notification that a print service was installed. [CHAR LIMIT=50] -->
-    <string name="print_service_installed_title"><xliff:g id="name" example="Cloud Print">%s</xliff:g> service installed</string>
-    <!-- Message for the notification that a print service was installed. [CHAR LIMIT=50] -->
-    <string name="print_service_installed_message">Tap to enable</string>
-
-    <!-- PIN entry dialog title for entering the administrator PIN [CHAR LIMIT=none] -->
-    <string name="restr_pin_enter_admin_pin">Enter administrator PIN</string>
-    <!-- PIN entry dialog label/hint for PIN [CHAR LIMIT=none] -->
-    <string name="restr_pin_enter_pin">Enter PIN</string>
-    <!-- PIN entry dialog label/hint for incorrect PIN entry [CHAR LIMIT=none] -->
-    <string name="restr_pin_incorrect">Incorrect</string>
-    <!-- PIN entry dialog label/hint for old PIN [CHAR LIMIT=none] -->
-    <string name="restr_pin_enter_old_pin">Current PIN</string>
-    <!-- PIN entry dialog label for new PIN [CHAR LIMIT=none] -->
-    <string name="restr_pin_enter_new_pin">New PIN</string>
-    <!-- PIN entry dialog label for new PIN confirmation [CHAR LIMIT=none] -->
-    <string name="restr_pin_confirm_pin">Confirm new PIN</string>
-    <!-- PIN creation dialog message [CHAR LIMIT=none] -->
-    <string name="restr_pin_create_pin">Create a PIN for modifying restrictions</string>
-    <!-- PIN entry dialog error when PINs are not the same [CHAR LIMIT=none] -->
-    <string name="restr_pin_error_doesnt_match">PINs don\'t match. Try again.</string>
-    <!-- PIN entry dialog error when PIN is too short [CHAR LIMIT=none] -->
-    <string name="restr_pin_error_too_short">PIN is too short. Must be at least 4 digits.</string>
-    <!-- PIN entry dialog countdown message for next chance to enter the PIN [CHAR LIMIT=none] -->
-    <!-- Phrase describing a time duration using seconds [CHAR LIMIT=none] -->
-    <plurals name="restr_pin_countdown">
-        <item quantity="one">Try again in 1 second</item>
-        <item quantity="other">Try again in <xliff:g id="count">%d</xliff:g> seconds</item>
-    </plurals>
-    <!-- PIN entry dialog tells the user to not enter a PIN for a while. [CHAR LIMIT=none] -->
-    <string name="restr_pin_try_later">Try again later</string>
-
-    <!-- Cling help message title when hiding the navigation bar entering immersive mode [CHAR LIMIT=none] -->
-    <string name="immersive_cling_title">Viewing full screen</string>
-
-    <!-- Cling help message description when hiding the navigation bar entering immersive mode [CHAR LIMIT=none] -->
-    <string name="immersive_cling_description">To exit, swipe down from the top.</string>
-
-    <!-- Cling help message confirmation button when hiding the navigation bar entering immersive mode [CHAR LIMIT=30] -->
-    <string name="immersive_cling_positive">Got it</string>
-
-    <!-- Label for button to confirm chosen date or time [CHAR LIMIT=30] -->
-    <string name="done_label">Done</string>
-    <!--
-         Content description for the hour selector in the time picker, which displays
-         selectable hours of the day along the inside edge of a circle, as in an analog clock.
-         [CHAR LIMIT=50]
-    -->
-    <string name="hour_picker_description">Hours circular slider</string>
-    <!--
-         Content description for the minute selector in the time picker, which displays
-         selectable five-minute intervals along the inside edge of a circle, as in an analog clock.
-         [CHAR LIMIT=50]
-    -->
-    <string name="minute_picker_description">Minutes circular slider</string>
-    <!-- Accessibility announcement for hour circular picker [CHAR LIMIT=NONE] -->
-    <string name="select_hours">Select hours</string>
-    <!-- Accessibility announcement for minute circular picker [CHAR LIMIT=NONE] -->
-    <string name="select_minutes">Select minutes</string>
-
-    <!-- Accessibility announcement for the day picker [CHAR LIMIT=NONE] -->
-    <string name="select_day">Select month and day</string>
-    <!-- Accessibility announcement for the year picker [CHAR LIMIT=NONE] -->
-    <string name="select_year">Select year</string>
-    <!-- Accessibility announcement when a number that had been typed in is deleted [CHAR_LIMIT=NONE] -->
-    <string name="deleted_key"><xliff:g id="key" example="4">%1$s</xliff:g> deleted</string>
-
-    <!--
-        Used to wrap a label for content description for a work profile, e.g. "Work Email" instead
-        of email when there are two email apps.
-        [CHAR LIMIT=20]
-     -->
-    <string name="managed_profile_label_badge">Work <xliff:g id="label" example="Email">%1$s</xliff:g></string>
-
-    <!-- DO NOT TRANSLATE -->
-    <string name="time_placeholder">--</string>
-
-    <!-- DO NOT TRANSLATE -->
-    <string name="radial_numbers_typeface">sans-serif</string>
-    <!-- DO NOT TRANSLATE -->
-    <string name="sans_serif">sans-serif</string>
-
-    <!-- DO NOT TRANSLATE -->
-    <string name="date_picker_month_typeface">sans-serif-medium</string>
-    <!-- DO NOT TRANSLATE -->
-    <string name="date_picker_day_of_week_typeface">sans-serif-medium</string>
-    <!-- DO NOT TRANSLATE -->
-    <string name="date_picker_day_typeface">sans-serif-medium</string>
-
-    <!-- Notify use that they are in Lock-to-app -->
-    <string name="lock_to_app_toast">To unpin this screen, touch &amp; hold Back.</string>
-    <!-- Notify user that they are locked in lock-to-app mode -->
-    <string name="lock_to_app_toast_locked">App is pinned: Unpinning isn\'t allowed on this device.</string>
-    <!-- Starting lock-to-app indication. -->
-    <string name="lock_to_app_start">Screen pinned</string>
-    <!-- Exting lock-to-app indication. -->
-    <string name="lock_to_app_exit">Screen unpinned</string>
-
-    <!-- Lock-to-app unlock pin string -->
-    <string name="lock_to_app_unlock_pin">Ask for PIN before unpinning</string>
-    <!-- Lock-to-app unlock pattern string -->
-    <string name="lock_to_app_unlock_pattern">Ask for unlock pattern before unpinning</string>
-    <!-- Lock-to-app unlock password string -->
-    <string name="lock_to_app_unlock_password">Ask for password before unpinning</string>
-
-    <!-- Notification shown when device owner silently installs a package [CHAR LIMIT=NONE] -->
-    <string name="package_installed_device_owner">Installed by your administrator</string>
-    <!-- Notification shown when device owner silently updates a package [CHAR LIMIT=NONE] -->
-    <string name="package_updated_device_owner">Updated by your administrator</string>
-    <!-- Notification shown when device owner silently deletes a package [CHAR LIMIT=NONE] -->
-    <string name="package_deleted_device_owner">Deleted by your administrator</string>
-
-    <!-- [CHAR_LIMIT=NONE] Battery saver: Feature description -->
-    <string name="battery_saver_description">To help improve battery life, battery saver reduces your device’s performance and limits vibration, location services, and most background data. Email, messaging, and other apps that rely on syncing may not update unless you open them.\n\nBattery saver turns off automatically when your device is charging.</string>
-
-    <!-- [CHAR_LIMIT=NONE] Data saver: Feature description -->
-    <string name="data_saver_description">To help reduce data usage, Data Saver prevents some apps from sending or receiving data in the background. An app you’re currently using can access data, but may do so less frequently. This may mean, for example, that images don’t display until you tap them.</string>
-    <!-- [CHAR_LIMIT=35] Data saver: Title on first-time dialog -->
-    <string name="data_saver_enable_title">Turn on Data Saver?</string>
-    <!-- [CHAR_LIMIT=16] Data saver: Button to turn it on on first-time dialog -->
-    <string name="data_saver_enable_button">Turn on</string>
-
-    <!-- Zen mode condition - summary: time duration in minutes. [CHAR LIMIT=NONE] -->
-    <plurals name="zen_mode_duration_minutes_summary">
-        <item quantity="one">For one minute (until <xliff:g id="formattedTime" example="10:00 PM">%2$s</xliff:g>)</item>
-        <item quantity="other">For %1$d minutes (until <xliff:g id="formattedTime" example="10:00 PM">%2$s</xliff:g>)</item>
-    </plurals>
-
-    <!-- Zen mode condition - summary: time duration in minutes (short version). [CHAR LIMIT=NONE] -->
-    <plurals name="zen_mode_duration_minutes_summary_short">
-        <item quantity="one">For 1 min (until <xliff:g id="formattedTime" example="10:00 PM">%2$s</xliff:g>)</item>
-        <item quantity="other">For %1$d min (until <xliff:g id="formattedTime" example="10:00 PM">%2$s</xliff:g>)</item>
-    </plurals>
-
-    <!-- Zen mode condition - summary: time duration in hours. [CHAR LIMIT=NONE] -->
-    <plurals name="zen_mode_duration_hours_summary">
-        <item quantity="one">For one hour (until <xliff:g id="formattedTime" example="10:00 PM">%2$s</xliff:g>)</item>
-        <item quantity="other">For %1$d hours (until <xliff:g id="formattedTime" example="10:00 PM">%2$s</xliff:g>)</item>
-    </plurals>
-
-    <!-- Zen mode condition - summary: time duration in hours (short version). [CHAR LIMIT=NONE] -->
-    <plurals name="zen_mode_duration_hours_summary_short">
-        <item quantity="one">For 1 hr (until <xliff:g id="formattedTime" example="10:00 PM">%2$s</xliff:g>)</item>
-        <item quantity="other">For %1$d hr (until <xliff:g id="formattedTime" example="10:00 PM">%2$s</xliff:g>)</item>
-    </plurals>
-
-    <!-- Zen mode condition - line one: time duration in minutes. [CHAR LIMIT=NONE] -->
-    <plurals name="zen_mode_duration_minutes">
-        <item quantity="one">For one minute</item>
-        <item quantity="other">For %d minutes</item>
-    </plurals>
-
-    <!-- Zen mode condition - line one: time duration in minutes (short version). [CHAR LIMIT=NONE] -->
-    <plurals name="zen_mode_duration_minutes_short">
-        <item quantity="one">For 1 min</item>
-        <item quantity="other">For %d min</item>
-    </plurals>
-
-    <!-- Zen mode condition - line one: time duration in hours. [CHAR LIMIT=NONE] -->
-    <plurals name="zen_mode_duration_hours">
-        <item quantity="one">For one hour</item>
-        <item quantity="other">For %d hours</item>
-    </plurals>
-
-    <!-- Zen mode condition - line one: time duration in hours (short version). [CHAR LIMIT=NONE] -->
-    <plurals name="zen_mode_duration_hours_short">
-        <item quantity="one">For 1 hr</item>
-        <item quantity="other">For %d hr</item>
-    </plurals>
-
-    <!-- Zen mode condition - line two: ending time. [CHAR LIMIT=NONE] -->
-    <string name="zen_mode_until">Until <xliff:g id="formattedTime" example="10:00 PM">%1$s</xliff:g></string>
-
-    <!-- Zen mode condition - line one: Until next alarm. [CHAR LIMIT=NONE] -->
-    <string name="zen_mode_alarm">Until <xliff:g id="formattedTime" example="10:00 PM">%1$s</xliff:g> (next alarm)</string>
-
-    <!-- Zen mode condition: no exit criteria. [CHAR LIMIT=NONE] -->
-    <string name="zen_mode_forever">Until you turn this off</string>
-
-    <!-- Zen mode condition: no exit criteria, includes the name of the feature for emphasis. [CHAR LIMIT=NONE] -->
-    <string name="zen_mode_forever_dnd">Until you turn off Do Not Disturb</string>
-
-    <!-- Zen mode active automatic rule name separator. [CHAR LIMIT=NONE] -->
-    <string name="zen_mode_rule_name_combination"><xliff:g id="first" example="Weeknights">%1$s</xliff:g> / <xliff:g id="rest" example="Meetings">%2$s</xliff:g></string>
-
-    <!-- Content description for the Toolbar icon used to collapse an expanded action mode. [CHAR LIMIT=NONE] -->
-    <string name="toolbar_collapse_description">Collapse</string>
-
-    <!-- Zen mode - feature name. [CHAR LIMIT=40] -->
-    <string name="zen_mode_feature_name">Do not disturb</string>
-
-    <!-- Zen mode - downtime legacy feature name. [CHAR LIMIT=40] -->
-    <string name="zen_mode_downtime_feature_name">Downtime</string>
-
-    <!-- Zen mode - name of default automatic schedule for weeknights. [CHAR LIMIT=40] -->
-    <string name="zen_mode_default_weeknights_name">Weeknight</string>
-
-    <!-- Zen mode - name of default automatic schedule for weekends. [CHAR LIMIT=40] -->
-    <string name="zen_mode_default_weekends_name">Weekend</string>
-
-    <!-- Zen mode - name of default automatic calendar event-based rule. [CHAR LIMIT=40] -->
-    <string name="zen_mode_default_events_name">Event</string>
-
-    <!-- Indication that the current volume and other effects (vibration) are being suppressed by a third party, such as a notification listener. [CHAR LIMIT=30] -->
-    <string name="muted_by">Muted by <xliff:g id="third_party">%1$s</xliff:g></string>
-
-    <!-- Error message shown when there is a system error which can be solved by user performing factory reset. [CHAR LIMIT=NONE] -->
-    <string name="system_error_wipe_data">There\'s an internal problem with your device, and it may be unstable until you factory data reset.</string>
-    <!-- Error message shown when there is a system error which can be solved by the manufacturer. [CHAR LIMIT=NONE] -->
-    <string name="system_error_manufacturer">There\'s an internal problem with your device. Contact your manufacturer for details.</string>
-
-    <!-- Displayed when the USSD/SS request is modified by STK CC to a
-    different request. This will be displayed in a toast. -->
-    <string name="stk_cc_ussd_to_dial">USSD request is modified to DIAL request.</string>
-    <string name="stk_cc_ussd_to_ss">USSD request is modified to SS request.</string>
-    <string name="stk_cc_ussd_to_ussd">USSD request is modified to new USSD request.</string>
-    <string name="stk_cc_ss_to_dial">SS request is modified to DIAL request.</string>
-    <string name="stk_cc_ss_to_ussd">SS request is modified to USSD request.</string>
-    <string name="stk_cc_ss_to_ss">SS request is modified to new SS request.</string>
-
-    <!-- Content description of the work profile icon in the notification. -->
-    <string name="notification_work_profile_content_description">Work profile</string>
-
-    <!-- Content description of the expand button icon in the notification.-->
-    <string name="expand_button_content_description">Expand button</string>
-
-    <!-- Accessibility action description on the expand button. -->
-    <string name="expand_action_accessibility">toggle expansion</string>
-
-    <!-- User visible name for USB MIDI Peripheral port -->
-    <string name="usb_midi_peripheral_name">Android USB Peripheral Port</string>
-    <!-- Manufacturer name for USB MIDI Peripheral port -->
-    <string name="usb_midi_peripheral_manufacturer_name">Android</string>
-    <!-- Product name for USB MIDI Peripheral port -->
-    <string name="usb_midi_peripheral_product_name">USB Peripheral Port</string>
-
-    <!-- Floating toolbar strings -->
-    <!-- Content description for the button that opens the floating toolbar overflow. [CHAR LIMIT=NONE] -->
-    <string name="floating_toolbar_open_overflow_description">More options</string>
-    <!-- Content description for the button that closes the floating toolbar overflow. [CHAR LIMIT=NONE] -->
-    <string name="floating_toolbar_close_overflow_description">Close overflow</string>
-
-    <!-- Free style window strings -->
-    <!-- Accessibility text for the maximize window button -->
-    <string name="maximize_button_text">Maximize</string>
-    <!-- Accessibility text for the close window button -->
-    <string name="close_button_text">Close</string>
-
-    <!-- Ellipsis character to appear in notification templates, e.g.
-         notification_template_material_inbox.xml.
-         DO NOT TRANSLATE -->
-    <string name="notification_inbox_ellipsis">\u2026</string>
-
-    <!-- Tempalate for Notification.MessagingStyle to join a conversation name with the name of the sender of a message, to make a notification title [CHAR LIMIT=NONE] -->
-    <string name="notification_messaging_title_template"><xliff:g id="conversation_title" example="Tasty Treat Team">%1$s</xliff:g>: <xliff:g id="sender_name" example="Adrian Baker">%2$s</xliff:g></string>
-
-
-    <!-- Label describing the number of selected items [CHAR LIMIT=48] -->
-    <plurals name="selected_count">
-        <item quantity="one"><xliff:g id="count" example="1">%1$d</xliff:g> selected</item>
-        <item quantity="other"><xliff:g id="count" example="3">%1$d</xliff:g> selected</item>
-    </plurals>
-
-    <string name="importance_from_user">You set the importance of these notifications.</string>
-    <string name="importance_from_person">This is important because of the people involved.</string>
-
-    <!-- Message to user that app trying to create user for an account that already exists. [CHAR LIMIT=none] -->
-    <string name="user_creation_account_exists">Allow <xliff:g id="app" example="Gmail">%1$s</xliff:g> to create a new User with <xliff:g id="account" example="foobar@gmail.com">%2$s</xliff:g> ?</string>
-    <!-- Message to user that app is trying to create user for a specified account. [CHAR LIMIT=none] -->
-    <string name="user_creation_adding">Allow <xliff:g id="app" example="Gmail">%1$s</xliff:g> to create a new User with <xliff:g id="account" example="foobar">%2$s</xliff:g> (a User with this account already exists) ?</string>
-
-    <!-- Locale picker strings -->
-
-    <!-- Title for the language selection screen [CHAR LIMIT=25] -->
-    <string name="language_selection_title">Add a language</string>
-    <!-- Title for the region selection screen [CHAR LIMIT=25] -->
-    <string name="country_selection_title">Region preference</string>
-    <!-- Hint text in a search edit box (used to filter long language / country lists) [CHAR LIMIT=25] -->
-    <string name="search_language_hint">Type language name</string>
-
-    <!-- List section subheader for the language picker, containing a list of suggested languages determined by the default region [CHAR LIMIT=30] -->
-    <string name="language_picker_section_suggested">Suggested</string>
-    <!-- List section subheader for the language picker, containing a list of all languages available [CHAR LIMIT=30] -->
-    <string name="language_picker_section_all">All languages</string>
-    <!-- List section subheader for the region picker, containing a list of all regions supported for the selected language.
-    Warning: this is a more 'neutral' term for 'country', not for the sub-divisions of a country. [CHAR LIMIT=30] -->
-    <string name="region_picker_section_all">All regions</string>
-
-    <!-- Menu item in the locale menu  [CHAR LIMIT=30] -->
-    <string name="locale_search_menu">Search</string>
-
-    <!-- Title for dialog displayed when work profile is turned off. [CHAR LIMIT=30] -->
-    <string name="work_mode_off_title">Work mode is OFF</string>
-    <!-- Message displayed in dialog when work profile is turned off. [CHAR LIMIT=NONE] -->
-    <string name="work_mode_off_message">Allow work profile to function, including apps, background sync, and related features.</string>
-    <!-- Title for button to turn on work profile. [CHAR LIMIT=NONE] -->
-    <string name="work_mode_turn_on">Turn on</string>
-
-    <!-- Notification title shown when new SMS/MMS is received while the device is locked [CHAR LIMIT=NONE] -->
-    <string name="new_sms_notification_title">You have new messages</string>
-    <!-- Notification content shown when new SMS/MMS is received while the device is locked [CHAR LIMIT=NONE] -->
-    <string name="new_sms_notification_content">Open SMS app to view</string>
-
-    <!-- Notification title shown when user profile is credential encrypted and requires the user to unlock before some features are usable [CHAR LIMIT=30] -->
-    <string name="user_encrypted_title">Some functionality may be limited</string>
-    <!-- Notification message shown when user profile is credential encrypted and requires the user to unlock before some features are usable [CHAR LIMIT=30] -->
-    <string name="user_encrypted_message">Tap to unlock</string>
-    <!-- Notification detail shown when user profile is credential encrypted and requires the user to unlock before some features are usable [CHAR LIMIT=30] -->
-    <string name="user_encrypted_detail">User data locked</string>
-
-    <!-- Notification detail shown when work profile is credential encrypted and requires the user to unlock before some features are usable [CHAR LIMIT=30] -->
-    <string name="profile_encrypted_detail">Work profile locked</string>
-    <!-- Notification message shown when work profile is credential encrypted and requires the user to unlock before some features are usable [CHAR LIMIT=30] -->
-    <string name="profile_encrypted_message">Tap to unlock work profile</string>
-
-    <!-- Title of notification shown after a MTP device is connected to Android. -->
-    <string name="usb_mtp_launch_notification_title">Connected to <xliff:g id="product_name">%1$s</xliff:g></string>
-    <!-- Description of notification shown after a MTP device is connected to Android. -->
-    <string name="usb_mtp_launch_notification_description">Tap to view files</string>
-
-    <!-- Resolver target actions strings -->
-
-    <!-- Pin (as in to a bulletin board with a pushpin) a resolver
-         target to the front of the list. -->
-    <string name="pin_target">Pin</string>
-    <!-- Unpin a resolver target such that it sorts normally. -->
-    <string name="unpin_target">Unpin</string>
-    <!-- View application info for a target. -->
-    <string name="app_info">App info</string>
-
-    <!-- The representation of a time duration when negative. An example is -1:14. This can be used with a countdown timer for example.-->
-    <string name="negative_duration">\u2212<xliff:g id="time" example="1:14">%1$s</xliff:g></string>
-
-    <!-- Title of notification to start a new demo session when device is in retail mode [CHAR LIMIT=NONE] -->
-    <string name="reset_retail_demo_mode_title">Reset device?</string>
-    <!-- Text of notification to start a new demo session when device is in retail mode [CHAR LIMIT=NONE] -->
-    <string name="reset_retail_demo_mode_text">Tap to reset device</string>
-    <!-- Text of dialog shown when starting a demo user for the first time [CHAR LIMIT=40] -->
-    <string name="demo_starting_message">Starting demo\u2026</string>
-    <!-- Text of dialog shown when starting a new demo user in retail demo mode [CHAR LIMIT=40] -->
-    <string name="demo_restarting_message">Resetting device\u2026</string>
-    <!-- Title of the dialog shown when user inactivity times out in retail demo mode [CHAR LIMIT=40] -->
-    <string name="demo_user_inactivity_timeout_title">Reset device?</string>
-    <!-- Warning message shown when user inactivity times out in retail demo mode [CHAR LIMIT=none] -->
-    <string name="demo_user_inactivity_timeout_countdown">You\u2019ll lose any changes and the demo will start again in <xliff:g id="timeout" example="9">%1$s</xliff:g> seconds\u2026</string>
-    <!-- Text of button to allow user to abort countdown and continue current session in retail demo mode [CHAR LIMIT=40] -->
-    <string name="demo_user_inactivity_timeout_left_button">Cancel</string>
-    <!-- Text of button to allow user to abort countdown and immediately start another session in retail demo mode [CHAR LIMIT=40] -->
-    <string name="demo_user_inactivity_timeout_right_button">Reset now</string>
-
-    <!-- Title of notification shown when device has been forced to safe mode after a security compromise. -->
-    <string name="audit_safemode_notification">Factory reset to use this device without restrictions</string>
-    <!-- Description of notification shown when device has been forced to safe mode after a security compromise. -->
-    <string name="audit_safemode_notification_details">Touch to learn more.</string>
-
-    <!-- Accessibilty string added to a widget that has been suspended [CHAR LIMIT=20] -->
-    <string name="suspended_widget_accessibility">Disabled <xliff:g id="label" example="Calendar">%1$s</xliff:g></string>
-
-    <!-- Label used by Telephony code, assigned as the display name for conference calls [CHAR LIMIT=60] -->
-    <string name="conference_call">Conference Call</string>
-  <string name="low_storage_view_title_500m">Storage less than 500MB</string>
-  <string name="low_storage_view_title_100m">Storage less than 100MB</string>
-  <string name="low_storage_view_title_50m">Storage less than 50MB</string>
-  <string name="low_storage_warning_message_500m">Apps might now work properly.Do you want to free up space? Don not remind me again.</string>
-  <string name="low_storage_warning_message_100m">Wi-Fi and mobile data are disabled.Apps might stop working. Do you want to free up space?</string>
-  <string name="low_storage_warning_message_50m">Wi-Fi and mobile data are disabled.Apps might stop working. Do you want to free up space?</string>
-  <string name="free_memory_ignore_btn">IGNORE</string>
-  <string name="free_memory_free_up_space_btn">FREE UP SPACE</string>
-  <string name="reboot">Reboot</string>
-  <string name="reboot_confirm">Your phone will reboot</string>
-  <string name="battery_countdown">Your phone will shut down after 15 seconds.</string>
-  <string name="global_action_enforce_restart">Press and hold the power key for at least 8 seconds to power off or hold it longer to reboot.</string>
-  <string name="face_verify_fail_tip">Verify failure </string>
-  <string name="face_verify_timeout_tip">No face was detected</string>
-	
-  <string name="fingerprint_acquired_duplicate_finger">Duplicate finger.Please change a finger.</string>
-  <string name="fingerprint_acquired_duplicate_area">Duplicate area.Please try again.</string>
-	
-  <string name="shutdown_poweroff">POWER OFF</string>
-  
-  <!--Begin added by Xutao.Wu for TASK5709544 on 2017/11/28-->
-  <!-- Title of the dialog shown when user inactivity times to start retail demo mode [CHAR LIMIT=40] -->
-  <string name="start_demo_mode_inactivity_timeout_title">Enter into demo mode</string>
-  <!-- Warning message shown when user inactivity times out to start retail demo mode [CHAR LIMIT=none] -->
-  <string name="start_demo_mode_inactivity_timeout_countdown">The demo mode will activate in <xliff:g id="timeout" example="9">%1$s</xliff:g> seconds\u2026</string>
-  <!-- Text of button to allow user to abort countdown and immediately start retail demo mode [CHAR LIMIT=40] -->
-  <string name="start_demo_mode_inactivity_timeout_right_button">ENTER</string>
-  <!--End added by Xutao.Wu for TASK5709544 on 2017/11/28-->
-</resources>
Index: vendor/branch/5058A_Telcel/frameworks/base/core/res/res/values/config.xml
===================================================================
--- vendor/branch/5058A_Telcel/frameworks/base/core/res/res/values/config.xml	(revision 4785)
+++ vendor/branch/5058A_Telcel/frameworks/base/core/res/res/values/config.xml	(revision 4786)
@@ -2672,4 +2672,5 @@
     <string-array translatable="false" name="config_nonBlockableNotificationPackages" />
 	
 	<bool name="def_cb_channel_50_behaviour_brazil">false</bool>
+	<integer name="def_customized_stk_app_name">2</integer>
 </resources>
