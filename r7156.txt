Index: vendor/branch/5058I_ALRU/packages/apps/Email/UnifiedEmail/src/com/android/mail/bitmap/ContactDrawable.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Email/UnifiedEmail/src/com/android/mail/bitmap/ContactDrawable.java	(revision 0)
+++ vendor/branch/5058I_ALRU/packages/apps/Email/UnifiedEmail/src/com/android/mail/bitmap/ContactDrawable.java	(revision 7156)
@@ -0,0 +1,118 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.mail.bitmap;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Paint.Align;
+import android.graphics.Rect;
+import android.graphics.Typeface;
+
+import com.android.mail.R;
+
+/**
+ * A contact drawable with the default avatar as a letter tile.
+ */
+public class ContactDrawable extends AbstractAvatarDrawable {
+    /** Letter tile */
+    private ColorPicker mTileColorPicker;
+
+    /** Reusable components to avoid new allocations */
+    private static int sTileLetterFontSize;
+    private static int sTileFontColor;
+    private static Bitmap DEFAULT_AVATAR;
+    private static final Paint sPaint = new Paint();
+    private static final Rect sRect = new Rect();
+    private static final char[] sFirstChar = new char[1];
+
+    public ContactDrawable(final Resources res) {
+        super(res);
+
+        if (sTileLetterFontSize == 0) {
+            sTileLetterFontSize = res.getDimensionPixelSize(R.dimen.tile_letter_font_size_small);
+            sTileFontColor = res.getColor(R.color.letter_tile_font_color);
+            DEFAULT_AVATAR = BitmapFactory.decodeResource(res, R.drawable.ic_anonymous_avatar_40dp);
+
+            sPaint.setTypeface(Typeface.create("sans-serif-light", Typeface.NORMAL));
+            sPaint.setTextAlign(Align.CENTER);
+            sPaint.setAntiAlias(true);
+        }
+    }
+
+    /**
+     * Sets the {@link ColorPicker} for the background tile used in letter avatars.
+     * @param colorPicker
+     */
+    public void setTileColorPicker(ColorPicker colorPicker) {
+        mTileColorPicker = colorPicker;
+    }
+
+    /**
+     * Returns the color picker for the background tile used in the letter avatars.
+     * If none was set, initializes a simple {@link ColorPicker.PaletteColorPicker} first.
+     * @return non-null color picker.
+     */
+    public ColorPicker getTileColorPicker() {
+        if (mTileColorPicker == null) {
+            mTileColorPicker = new ColorPicker.PaletteColorPicker(mResources);
+        }
+        return mTileColorPicker;
+    }
+
+    @Override
+    protected void drawDefaultAvatar(Canvas canvas) {
+        // Draw letter tile as default
+        drawLetterTile(canvas);
+    }
+
+    private void drawLetterTile(final Canvas canvas) {
+        if (mContactRequest == null) {
+            return;
+        }
+
+        final Rect bounds = getBounds();
+
+        // Draw background color.
+        final String email = mContactRequest.getEmail();
+        // The email should already have been normalized by the ContactRequest.
+        sPaint.setColor(getTileColorPicker().pickColor(email));
+        sPaint.setAlpha(mBitmapPaint.getAlpha());
+        drawCircle(canvas, bounds, sPaint);
+
+        // Draw letter/digit or generic avatar.
+        final String displayName = mContactRequest.getDisplayName();
+        final char firstChar = displayName.charAt(0);
+        if (isEnglishLetterOrDigit(firstChar)) {
+            // Draw letter or digit.
+            sFirstChar[0] = Character.toUpperCase(firstChar);
+            sPaint.setTextSize(sTileLetterFontSize);
+            sPaint.getTextBounds(sFirstChar, 0, 1, sRect);
+            sPaint.setColor(sTileFontColor);
+            canvas.drawText(sFirstChar, 0, 1, bounds.centerX(),
+                    bounds.centerY() + sRect.height() / 2, sPaint);
+        } else {
+            drawBitmap(DEFAULT_AVATAR, DEFAULT_AVATAR.getWidth(), DEFAULT_AVATAR.getHeight(),
+                    canvas);
+        }
+    }
+
+    private static boolean isEnglishLetterOrDigit(final char c) {
+        return ('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z') || ('0' <= c && c <= '9');
+    }
+}
Index: vendor/branch/5058I_ALRU/packages/apps/Email/UnifiedEmail/src/com/android/mail/photomanager/LetterTileProvider.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Email/UnifiedEmail/src/com/android/mail/photomanager/LetterTileProvider.java	(revision 0)
+++ vendor/branch/5058I_ALRU/packages/apps/Email/UnifiedEmail/src/com/android/mail/photomanager/LetterTileProvider.java	(revision 7156)
@@ -0,0 +1,175 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.mail.photomanager;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Paint.Align;
+import android.graphics.Rect;
+import android.graphics.Typeface;
+import android.text.TextPaint;
+import android.text.TextUtils;
+
+import com.android.mail.R;
+import com.android.mail.bitmap.ColorPicker;
+import com.android.mail.ui.ImageCanvas.Dimensions;
+import com.android.mail.utils.BitmapUtil;
+import com.android.mail.utils.LogTag;
+import com.android.mail.utils.LogUtils;
+
+/**
+ * LetterTileProvider is an implementation of the DefaultImageProvider. When no
+ * matching contact photo is found, and there is a supplied displayName or email
+ * address whose first letter corresponds to an English alphabet letter (or
+ * number), this method creates a bitmap with the letter in the center of a
+ * tile. If there is no English alphabet character (or digit), it creates a
+ * bitmap with the default contact avatar.
+ */
+public class LetterTileProvider {
+    private static final String TAG = LogTag.getLogTag();
+    private final Bitmap mDefaultBitmap;
+    private final Bitmap[] mBitmapBackgroundCache;
+    private final Bitmap[] mDefaultBitmapCache;
+    private final Typeface mSansSerifLight;
+    private final Rect mBounds;
+    private final int mTileLetterFontSize;
+    private final int mTileLetterFontSizeSmall;
+    private final int mTileFontColor;
+    private final TextPaint mPaint = new TextPaint();
+    private final Canvas mCanvas = new Canvas();
+    private final char[] mFirstChar = new char[1];
+
+    private static final int POSSIBLE_BITMAP_SIZES = 3;
+    private final ColorPicker mTileColorPicker;
+
+    public LetterTileProvider(Resources res) {
+        this(res, new ColorPicker.PaletteColorPicker(res));
+    }
+
+    public LetterTileProvider(Resources res, ColorPicker colorPicker) {
+        mTileLetterFontSize = res.getDimensionPixelSize(R.dimen.tile_letter_font_size_small);
+        mTileLetterFontSizeSmall = res.getDimensionPixelSize(R.dimen.tile_letter_font_size_tiny);
+        mTileFontColor = res.getColor(R.color.letter_tile_font_color);
+        mSansSerifLight = Typeface.create("sans-serif-light", Typeface.NORMAL);
+        mBounds = new Rect();
+        mPaint.setTypeface(mSansSerifLight);
+        mPaint.setColor(mTileFontColor);
+        mPaint.setTextAlign(Align.CENTER);
+        mPaint.setAntiAlias(true);
+        mBitmapBackgroundCache = new Bitmap[POSSIBLE_BITMAP_SIZES];
+
+        mDefaultBitmap = BitmapFactory.decodeResource(res, R.drawable.ic_anonymous_avatar_40dp);
+        mDefaultBitmapCache = new Bitmap[POSSIBLE_BITMAP_SIZES];
+
+        mTileColorPicker = colorPicker;
+    }
+
+    public Bitmap getLetterTile(final Dimensions dimensions, final String displayName,
+            final String address) {
+        final String display = !TextUtils.isEmpty(displayName) ? displayName : address;
+
+        // get an empty bitmap
+        final Bitmap bitmap = getBitmap(dimensions, false /* getDefault */);
+        if (bitmap == null) {
+            LogUtils.w(TAG, "LetterTileProvider width(%d) or height(%d) is 0 for name %s and "
+                    + "address %s.", dimensions.width, dimensions.height, displayName, address);
+            return null;
+        }
+
+        final Canvas c = mCanvas;
+        c.setBitmap(bitmap);
+        c.drawColor(mTileColorPicker.pickColor(address));
+
+        // If its a valid English alphabet letter,
+        // draw the letter on top of the color
+        /// M: Draw letter tile for specific first char, or draw a default icon otherwise
+        if (!TextUtils.isEmpty(display)) {
+            final char firstChar = display.charAt(0);
+            if (isEnglishLetterOrDigit(firstChar)
+                    || isChineseLetter(firstChar)) {
+                mFirstChar[0] = Character.toUpperCase(firstChar);
+                mPaint.setTextSize(
+                        dimensions.fontSize > 0 ? dimensions.fontSize : getFontSize(dimensions.scale));
+                mPaint.getTextBounds(mFirstChar, 0, 1, mBounds);
+                c.drawText(mFirstChar, 0, 1, 0 + dimensions.width / 2,
+                        0 + dimensions.height / 2 + (mBounds.bottom - mBounds.top) / 2, mPaint);
+                return bitmap;
+            }
+        }
+        // draw the generic icon on top
+        c.drawBitmap(getBitmap(dimensions, true /* getDefault */), 0, 0, null);
+
+        return bitmap;
+    }
+
+    private static boolean isEnglishLetterOrDigit(char c) {
+        return ('A' <= c && c <= 'Z')
+                || ('a' <= c && c <= 'z')
+                || ('0' <= c && c <= '9');
+    }
+
+    /** M: Check whether it's a Chinese character by the simplest way
+     * @param c Char need to be checked
+     * @return True for Chinese Chars
+     */
+    private static boolean isChineseLetter(char c) {
+        return (0x4E00 <= c && c <= 0x9FBF);
+    }
+
+    private Bitmap getBitmap(final Dimensions d, boolean getDefault) {
+        if (d.width <= 0 || d.height <= 0) {
+            LogUtils.w(TAG,
+                    "LetterTileProvider width(%d) or height(%d) is 0.", d.width, d.height);
+            return null;
+        }
+        final int pos;
+        float scale = d.scale;
+        if (scale == Dimensions.SCALE_ONE) {
+            pos = 0;
+        } else if (scale == Dimensions.SCALE_HALF) {
+            pos = 1;
+        } else {
+            pos = 2;
+        }
+
+        final Bitmap[] cache = (getDefault) ? mDefaultBitmapCache : mBitmapBackgroundCache;
+
+        Bitmap bitmap = cache[pos];
+        // ensure bitmap is suitable for the desired w/h
+        // (two-pane uses two different sets of dimensions depending on pane width)
+        if (bitmap == null || bitmap.getWidth() != d.width || bitmap.getHeight() != d.height) {
+            // create and place the bitmap
+            if (getDefault) {
+                bitmap = BitmapUtil.centerCrop(mDefaultBitmap, d.width, d.height);
+            } else {
+                bitmap = Bitmap.createBitmap(d.width, d.height, Bitmap.Config.ARGB_8888);
+            }
+            cache[pos] = bitmap;
+        }
+        return bitmap;
+    }
+
+    private int getFontSize(float scale)  {
+        if (scale == Dimensions.SCALE_ONE) {
+            return mTileLetterFontSize;
+        } else {
+            return mTileLetterFontSizeSmall;
+        }
+    }
+}
