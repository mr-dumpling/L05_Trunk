Index: vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/frontcameraflasher/FrontCameraFlasher.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/frontcameraflasher/FrontCameraFlasher.java	(revision 2115)
+++ vendor/mediatek/proprietary/packages/apps/MMITestDevice/src/com/android/mmi/frontcameraflasher/FrontCameraFlasher.java	(revision 2116)
@@ -26,8 +26,7 @@
 
 
 public class FrontCameraFlasher extends Activity implements OnClickListener {
-	private static final String FLASHLIGHT_TEST = "/dev/flashlight_test";
-	 private int bInput = 0;
+
 	TextView tv_base_title, tv_base_pixi;
 	Button bt_base_left, bt_base_right;
 	Camera camera;
@@ -40,30 +39,13 @@
 	static final int INTERVAL = 500;
 	Handler handler = new Handler() {
 		public void handleMessage(Message msg) {
-			if (//msg.what % 2 == 0
-				true) {
-				processOnFlash();
-			} else {
-				processOffFlash();
-			}
-			showCount++;
-			if (showCount == (FLASH_NUMBER - 1) * 2) {
 				bt_base_left.setVisibility(View.VISIBLE);
 				bt_base_right.setVisibility(View.VISIBLE);
-			}
 			super.handleMessage(msg);
 		}
 
 	};
 
-	class MytimerTask extends TimerTask {
-		public void run() {
-			Message message = new Message();
-			message.what = count;
-			handler.sendMessage(message);
-			count++;
-		}
-	}
 
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
@@ -85,8 +67,14 @@
 		bt_base_right = (Button) findViewById(R.id.bt_base_right);
 		bt_base_right.setText(R.string.bt_fail);
 		bt_base_right.setOnClickListener(this);
+		bt_base_right.getBackground().setAlpha(100);
+		bt_base_left.getBackground().setAlpha(100);
 		bt_base_left.setVisibility(View.GONE);
 		bt_base_right.setVisibility(View.GONE);
+		camera = Camera.open(1);
+		p = camera.getParameters();
+		processOnFlash();
+		delay(2000);
 	}
 
 	@Override
@@ -94,11 +82,6 @@
 		super.onResume();
 		count = 0;
 	//	camera = Camera.open();
-		openFrontCamera();
-		p = camera.getParameters();
-		for (int i = 0; i < FLASH_NUMBER * 2 - 1; i++) {
-			timer.schedule(new MytimerTask(), DELAY + INTERVAL * i);
-		}
 	}
 
 	@Override
@@ -105,7 +88,6 @@
 	public void onClick(View v) {
 		switch (v.getId()) {
 		case R.id.bt_base_left: {
-			processOffFlash();
 			if (camera != null) {
 				camera.stopPreview();
 				camera.release();
@@ -118,7 +100,6 @@
 		}
 
 		case R.id.bt_base_right: {
-			processOffFlash();
 			Intent intent = new Intent(FrontCameraFlasher.this, MMITestDevice.class);
 			setResult(RESULT_CANCELED, intent);
 			finish();
@@ -129,16 +110,19 @@
 	}
 
 	private void processOnFlash() {
-		 bInput = bInput | 0x01;
-         FlashLightControl(String.valueOf(bInput)); 
+		if (p != null || camera != null) {
+			p.setFlashMode(Parameters.FLASH_MODE_TORCH);
+			camera.setParameters(p);
+			camera.startPreview();
+		}
 	}
 
 	private void processOffFlash() {
-		bInput = bInput & 0x02;
-        FlashLightControl(String.valueOf(bInput));
+		if (p != null || camera != null) {
+			p.setFlashMode(Parameters.FLASH_MODE_OFF);
+			camera.setParameters(p);
+			camera.stopPreview();
 		}
-	public void FlashLightControl(String code) {
-	  ShellUtils.writeFile(FLASHLIGHT_TEST,code);
 	}
 
 	@Override
@@ -178,17 +162,20 @@
 		return super.onKeyUp(keyCode, event);
 	}
 
-	public void openFrontCamera() {
-        for (int i = 0; i < Camera.getNumberOfCameras(); i++) {
-            CameraInfo info = new CameraInfo();
-            Camera.getCameraInfo(i, info);
-            if (info.facing == CameraInfo.CAMERA_FACING_FRONT
-                    && null == camera) {
-                camera = Camera.open(i);  
-            }else{
-     //       camera = Camera.open();
-            }
+	protected void delay(long time) {
+		Message message = new Message();
+		message.what = 000;
+	 	new Thread(new Runnable()
+        {  
+            public void run()
+            {  
+                try {
+                Thread.sleep(time);
+                } catch (InterruptedException e) {
+                e.printStackTrace();
         }
+                handler.sendMessage(message);
     }
+        }).start();}
 }
 
