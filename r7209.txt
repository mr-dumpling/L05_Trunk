Index: frameworks/opt/telephony/src/java/android/telephony/SmsMessage.java
===================================================================
--- frameworks/opt/telephony/src/java/android/telephony/SmsMessage.java	(revision 7208)
+++ frameworks/opt/telephony/src/java/android/telephony/SmsMessage.java	(revision 7209)
@@ -1146,7 +1146,11 @@
      *
      * @hide
      */
-    public static ArrayList<String> fragmentText(String text, int encodingType) {
+    public static ArrayList<String> fragmentText(String text, int encodingType) {    	
+    	if(encodingType== SmsConstants.ENCODING_7BIT){
+            Rlog.e(LOG_TAG, "fragmentText force to use 7bit encoding");
+            text = Sms7BitEncodingTranslator.translate(text);
+    	}
         int activePhone = TelephonyManager.getDefault().getPhoneType();
         TextEncodingDetails ted = (useCdmaFormatForMoSms()) ?
                 com.android.internal.telephony.cdma.SmsMessage.calculateLength(
Index: vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpComposeExt.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpComposeExt.java	(revision 7208)
+++ vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpComposeExt.java	(revision 7209)
@@ -72,8 +72,12 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
 
+import android.telephony.SmsMessage;
 
+
 public class DefaultOpComposeExt extends ContextWrapper implements IOpComposeExt {
     private static final String TAG = "Mms/MmsComposeImpl";
 
@@ -363,8 +367,40 @@
 
     @Override
     public int getSmsEncodingType(int encodingType, Context context) {
-        return encodingType;
+		boolean bFrSmsEncoding = context.getResources().getBoolean(com.android.internal.R.bool.FR_SMS_ENCODING);
+		if(bFrSmsEncoding){
+			int type = SmsMessage.ENCODING_UNKNOWN;
+			SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+			String encodingTypeStr = null;
+			encodingTypeStr = prefs.getString("pref_key_sms_input_mode", "Automatic");
+			if ("Unicode".equals(encodingTypeStr)) {
+				type = SmsMessage.ENCODING_16BIT;
+			} else if ("GSM alphabet".equals(encodingTypeStr)) {
+				type = SmsMessage.ENCODING_7BIT;
+			}
+			return type;
+		}else{
+			return encodingType;
+		}
     }
+    
+    public static int getSmsEncodingTypes(int encodingType, Context context) {
+		boolean bFrSmsEncoding = context.getResources().getBoolean(com.android.internal.R.bool.FR_SMS_ENCODING);
+		if(bFrSmsEncoding){
+			int type = SmsMessage.ENCODING_UNKNOWN;
+			SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+			String encodingTypeStr = null;
+			encodingTypeStr = prefs.getString("pref_key_sms_input_mode", "Automatic");
+			if ("Unicode".equals(encodingTypeStr)) {
+				type = SmsMessage.ENCODING_16BIT;
+			} else if ("GSM alphabet".equals(encodingTypeStr)) {
+				type = SmsMessage.ENCODING_7BIT;
+			}
+			return type;
+		}else{
+			return encodingType;
+		}
+    }
 
     @Override
     public boolean checkConditionsAndSendMessage(boolean isMms, final boolean bcheckMode) {
Index: vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpSmsSingleRecipientSenderExt.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpSmsSingleRecipientSenderExt.java	(revision 7208)
+++ vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpSmsSingleRecipientSenderExt.java	(revision 7209)
@@ -23,6 +23,7 @@
 
     @Override
     public int sendMessagePrepare(Context context, int codingType) {
-        return codingType;
+    	return DefaultOpComposeExt.getSmsEncodingTypes(codingType, context); // Add this
+        //return codingType;
     }
 }
Index: vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/SmsPreferenceActivity.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/SmsPreferenceActivity.java	(revision 7208)
+++ vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/SmsPreferenceActivity.java	(revision 7209)
@@ -268,7 +268,13 @@
                     = (PreferenceCategory) findPreference("pref_key_sms_settings");
             mSmsInputMode = (ListPreference) findPreference(SMS_INPUT_MODE);
             if (mSmsInputMode != null) {
-                smsCategory.removePreference(mSmsInputMode);
+				boolean bFrSmsEncoding = getResources().getBoolean(com.android.internal.R.bool.FR_SMS_ENCODING);
+				if(bFrSmsEncoding){
+					mSmsInputMode.setOnPreferenceChangeListener(this);
+				}else{
+					smsCategory.removePreference(mSmsInputMode);
+				}
+                
             }
         }
     }
@@ -562,6 +568,10 @@
         MmsConfig.setInitQuickText(true);
 
         mOpSmsPreferenceActivityExt.restoreDefaultPreferences(this, editor);
+		boolean bFrSmsEncoding = getResources().getBoolean(com.android.internal.R.bool.FR_SMS_ENCODING);
+		if(bFrSmsEncoding){
+			editor.putString(SMS_INPUT_MODE, "Automatic"); // Add this
+		}
         editor.apply();
         setPreferenceScreen(null);
         setMessagePreferences();
@@ -575,16 +585,19 @@
         }
 
         final String key = preference.getKey();
-        if (preference == mSmsLocation && !(SimStateMonitor.getInstance().getSubCount() > 1)) {
-            if (!getResources().getBoolean(R.bool.isTablet)) {
-                mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, (String) arg1,
-                        R.array.pref_sms_save_location_choices,
-                        R.array.pref_sms_save_location_values));
-            } else {
-                mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, (String) arg1,
-                        R.array.pref_tablet_sms_save_location_choices,
-                        R.array.pref_tablet_sms_save_location_values));
-            }
+            if (SMS_INPUT_MODE.equals(key)) {
+                MmsLog.d(TAG, "Input Mode Changed");
+                mSmsInputMode.setValue((String) arg1);
+            }else if (preference == mSmsLocation && !(SimStateMonitor.getInstance().getSubCount() > 1)) {
+				if (!getResources().getBoolean(R.bool.isTablet)) {
+					mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, (String) arg1,
+							R.array.pref_sms_save_location_choices,
+							R.array.pref_sms_save_location_values));
+				} else {
+					mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, (String) arg1,
+							R.array.pref_tablet_sms_save_location_choices,
+							R.array.pref_tablet_sms_save_location_values));
+				}
         }
 
         return true;
Index: vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/ui/ComposeMessageActivity.java
===================================================================
--- vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/ui/ComposeMessageActivity.java	(revision 7208)
+++ vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/ui/ComposeMessageActivity.java	(revision 7209)
@@ -978,8 +978,13 @@
         int encodingType = SmsMessage.ENCODING_UNKNOWN;
 
         encodingType = mOpComposeExt.getSmsEncodingType(encodingType, ComposeMessageActivity.this);
-
-        params = SmsMessage.calculateLength(text, false, encodingType);
+        MmsLog.d(TAG, "updateCounter getSmsEncodingType encodingType = " + encodingType ); // Add this log
+        
+        if(encodingType == SmsMessage.ENCODING_7BIT){
+            params = SmsMessage.calculateLength(text, true, encodingType);
+        } else {
+            params = SmsMessage.calculateLength(text, false, encodingType);
+        }
             /* SmsMessage.calculateLength returns an int[4] with:
              *   int[0] being the number of SMS's required,
              *   int[1] the number of code units used,
