Index: vendor/branch/5058Y/packages/apps/Settings/AndroidManifest.xml
===================================================================
--- vendor/branch/5058Y/packages/apps/Settings/AndroidManifest.xml	(revision 12252)
+++ vendor/branch/5058Y/packages/apps/Settings/AndroidManifest.xml	(revision 12253)
@@ -3492,13 +3492,13 @@
 		<receiver android:name="com.android.settings.NightModeReceiver">
 		<intent-filter>
                 <action android:name="com.android.settings.nightmode.open"/>
-		
+                <action android:name="android.intent.action.BOOT_COMPLETED"/>
+                <action android:name="android.intent.action.TIME_SET"/>
+                <action android:name="com.android.settings.nightmode.close"/>
             </intent-filter>
         </receiver>
 		<receiver android:name="com.android.settings.CloseNightMode">
 		<intent-filter>
-                
-				 <action android:name="com.android.settings.nightmode.close"/>
             </intent-filter>
         </receiver>
 		<receiver android:name="com.android.settings.BootedReceiver">  
Index: vendor/branch/5058Y/packages/apps/Settings/src/com/android/settings/NightModeReceiver.java
===================================================================
--- vendor/branch/5058Y/packages/apps/Settings/src/com/android/settings/NightModeReceiver.java	(revision 0)
+++ vendor/branch/5058Y/packages/apps/Settings/src/com/android/settings/NightModeReceiver.java	(revision 12253)
@@ -0,0 +1,108 @@
+package com.android.settings;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import com.mediatek.pq.PictureQuality;
+import android.util.Log;
+import android.widget.Toast;
+import android.content.SharedPreferences;
+import java.util.Calendar;
+/**
+ * Created by Administrator on 2017/8/24.
+ 	open nightMode
+ */
+public class NightModeReceiver extends BroadcastReceiver {
+    public static final String OPEN="open_nightMode";
+	public static final String CLOSE="close_nightMode";
+	public static final String timeOn="22:00";
+	public static final String timeOff="07:00";
+	public static final String TIME_ON = "timeOn";
+	public static final String TIME_Off = "timeOff";
+    public static final String PREFERENCE_NAME = "com.android.settings";
+	public static final String SETTING_TIME_PLAN = "setting_time_plan";
+	    
+	public static final String SUNSET_TO_SUNRISE = "sunset_to_sunrise";
+	public static final String SETTING_TIME = "automate_schedule";
+	public static final String OPEN_ACTION = "com.android.settings.nightmode.open";
+	public static final String CLOSE_ACTION ="com.android.settings.nightmode.close";
+	public static final String ACTION_TIME_SET = "android.intent.action.TIME_SET";
+	 
+    SharedPreferences modePrenference;
+			
+    @Override
+    public void onReceive(Context context, Intent intent) {
+   		int id=intent.getIntExtra("id",1);
+		String msg = intent.getStringExtra("msg");
+       	String action= intent.getAction();
+        modePrenference = context.getSharedPreferences(PREFERENCE_NAME, 0);
+		boolean automate_schedule = modePrenference.getBoolean(SETTING_TIME, false);
+		boolean auto = modePrenference.getBoolean(SUNSET_TO_SUNRISE, true);
+		
+		if(action.equals(ACTION_TIME_SET) || action.equals("android.intent.action.BOOT_COMPLETED")){
+			if(!automate_schedule){
+			    return;
+		    }
+			Calendar c = Calendar.getInstance();
+            int mHour = c.get(Calendar.HOUR_OF_DAY);
+            int mMinute = c.get(Calendar.MINUTE);
+			
+			if(auto){
+				if (mHour >= 22 || mHour < 7) {
+                    PictureQuality.enableBlueLight(true);
+                } else{
+                    PictureQuality.enableBlueLight(false);
+                }
+			    NightModeUtils.sendBroad(OPEN_ACTION, context, OPEN, 22, 0, 0);
+                NightModeUtils.sendBroad(CLOSE_ACTION, context, CLOSE, 7, 0, -1);
+		    }else if(modePrenference.getBoolean(SETTING_TIME_PLAN, false)){
+				String[] timeOns = modePrenference.getString(TIME_ON, timeOn).split(":");
+				String[] timeOffs = modePrenference.getString(TIME_Off, timeOff).split(":");
+				int startTime_Hour = Integer.parseInt(timeOns[0]);
+				int startTime_Min = Integer.parseInt(timeOns[1]);
+				int offTime_Hour = Integer.parseInt(timeOffs[0]);
+				int offTime_Min = Integer.parseInt(timeOffs[1]);
+				if(offTime_Hour > startTime_Hour || (offTime_Hour == startTime_Hour && offTime_Min > startTime_Min)){  //NightMode offTime later startTime
+					if((mHour > startTime_Hour || (mHour == startTime_Hour && mMinute > startTime_Min)) 
+						&& (mHour < offTime_Hour || (mHour == offTime_Hour && mMinute < offTime_Min))){        //nowTime is between startTime and offTime
+						PictureQuality.enableBlueLight(true);
+					}else{
+						PictureQuality.enableBlueLight(false);
+					}
+				}else{ // NightMode offTime earlier to startTime   example startTime is 02:00,offTime is 01:00
+					if((mHour > startTime_Hour || (mHour == startTime_Hour && mMinute > startTime_Min)) 
+						|| (mHour < offTime_Hour || (mHour == offTime_Hour && mMinute < offTime_Min))){        //now is 00:30 or 03:00
+						PictureQuality.enableBlueLight(true);
+					}else{
+						PictureQuality.enableBlueLight(false);
+					}
+				}
+				NightModeUtils.sendBroad(OPEN_ACTION, context, OPEN, Integer.parseInt(timeOns[0]), Integer.parseInt(timeOns[1]), 0);
+				NightModeUtils.sendBroad(CLOSE_ACTION, context, CLOSE, Integer.parseInt(timeOffs[0]), Integer.parseInt(timeOffs[1]), -1);
+			}   
+		}else if(msg.equals(OPEN) && id==0 && action.equals(OPEN_ACTION)){
+			if(!automate_schedule){
+			    return;
+		    }
+			PictureQuality.enableBlueLight(true);
+			if(auto){
+			    NightModeUtils.sendBroad(OPEN_ACTION, context, OPEN, 22, 0, 0);
+			}else if(modePrenference.getBoolean(SETTING_TIME_PLAN, false)){
+				String[] timeOns = modePrenference.getString(TIME_ON, timeOn).split(":");
+				NightModeUtils.sendBroad(OPEN_ACTION, context, OPEN, Integer.parseInt(timeOns[0]), Integer.parseInt(timeOns[1]), 0);
+			}
+        } else if(msg.equals(CLOSE)&&id==-1){
+			if(!automate_schedule){
+			    return;
+		    }
+			PictureQuality.enableBlueLight(false);
+			if(auto){
+                NightModeUtils.sendBroad(CLOSE_ACTION, context, CLOSE, 7, 0, -1);
+			}else if(modePrenference.getBoolean(SETTING_TIME_PLAN, false)){
+				String[] timeOffs = modePrenference.getString(TIME_Off, timeOff).split(":");
+				NightModeUtils.sendBroad(CLOSE_ACTION, context, CLOSE, Integer.parseInt(timeOffs[0]), Integer.parseInt(timeOffs[1]), -1);
+			}
+		}
+
+    }
+}
Index: vendor/branch/5058Y/packages/apps/Settings/src/com/android/settings/SchedulePlanTypeSettings.java
===================================================================
--- vendor/branch/5058Y/packages/apps/Settings/src/com/android/settings/SchedulePlanTypeSettings.java	(revision 12252)
+++ vendor/branch/5058Y/packages/apps/Settings/src/com/android/settings/SchedulePlanTypeSettings.java	(revision 12253)
@@ -56,7 +56,7 @@
 	private static final String KEY_TIME_OFF = "turn_off_at";
 	private static final String KEY_SETTING_TIME = "custom_schedule";
 	private static final String KEY_SUNSET_SUNRISE = "sunset2sunrise";
-	private final String timeOn="10:00";
+	private final String timeOn="22:00";
 	private final String timeOff="07:00";
 	 private final String OPEN="open_nightMode";
     private final String CLOSE="close_nightMode";
@@ -270,6 +270,7 @@
 				}else{
 					min=""+minute;
 				}
+				/*
                 if(mIs24HourBool){
                    modePrenference.edit().putString(TIME_ON,hour+":"+min).commit();
                 }else{
@@ -280,7 +281,10 @@
                    modePrenference.edit().putString(TIME_ON,hour+":"+min).commit();
                    Log.d("faker:", "245lin");                   
                 }
+				*/
+				modePrenference.edit().putString(TIME_ON,hour+":"+min).commit();
             	updateTimeDisplay();
+				setNightMode();
 				//modified by zxp for 112000
 				NightModeUtils.sendBroad(OPEN_ACTION,getContext(),OPEN,startTime_Hour,startTime_Min,0);
 				//NightModeUtils.sendBroad(CLOSE_ACTION,getContext(),CLOSE,hourOfDay,minute,-1);
@@ -310,6 +314,7 @@
 				 Calendar c = Calendar.getInstance();
            		 int mHour = c.get(Calendar.HOUR_OF_DAY);
 				 int mMinute = c.get(Calendar.MINUTE);
+				 /*
 				if(startTime_Hour<mHour){
 					PictureQuality.enableBlueLight(true);
 				}else if(startTime_Hour==mHour&&startTime_Min<mMinute){
@@ -326,7 +331,10 @@
                    modePrenference.edit().putString(TIME_Off,hour+":"+min).commit(); 
                    Log.d("faker:", "288lin");
                 }
+				*/
+				modePrenference.edit().putString(TIME_Off,hour+":"+min).commit();
                 updateTimeDisplay();
+				setNightMode();
 				// modified by zxp for 112000
 				//NightModeUtils.sendBroad(OPEN_ACTION,getContext(),OPEN,startTime_Hour,startTime_Min,0);
 				NightModeUtils.sendBroad(CLOSE_ACTION,getContext(),CLOSE,hourOfDay,minute,-1);
@@ -336,61 +344,62 @@
 	}
 	/*Update the selected time to the page above */
 	public void updateTimeDisplay(){
-    
-            mPrefChangeFlag =PrefChangeBroadcast.mPrefChangeFlag;
-            Log.d("faker:updateTimeDisplay:", ""+mPrefChangeFlag);
-            String[] deOnTime=modePrenference.getString(TIME_ON,timeOn).split(":");
-            String[] deOffTime=modePrenference.getString(TIME_Off,timeOff).split(":");
-            int deOnHour=Integer.parseInt(deOnTime[0]);
-            int deOffHour=Integer.parseInt(deOffTime[0]);
-            if(mPrefChangeFlag){
-                   if(deOnHour<12){
-                       String nTimeOn=(deOnHour+12)+":"+deOnTime[1];
-                       //turn_on_at.setSummary(nTimeOn);
-                       Log.i("faker:", "nTimeOn:"+nTimeOn);
-                       modePrenference.edit().putString(TIME_ON,nTimeOn).commit();
-                       //turn_on_at.setSummary(modePrenference.getString(TIME_ON,timeOn));
-                   }
-                   /*
-                   else if(deOnHour>12){
-                        String nTimeOn=(deOnHour-12)+":"+deOnTime[1];
-                        modePrenference.edit().putString(TIME_ON,nTimeOn).commit();
-                        turn_on_at.setSummary(modePrenference.getString(TIME_ON,timeOn));
-                   }
-                   */
-                   if(deOffHour<12){
-                       Log.i("faker:", "deOffHour"+deOffHour);  
-                       String nTimeOff=(deOffHour+12)+":"+deOffTime[1];
-                       //turn_off_at.setSummary(nTimeOff);
-                       Log.i("faker:", "nTimeOff:"+nTimeOff);
-                       modePrenference.edit().putString(TIME_Off,nTimeOff).commit();
-                       //turn_off_at.setSummary(modePrenference.getString(TIME_Off,timeOff)); 
-                   }
-                   /*
-                   else if(deOffHour>12){
-                       String nTimeOff=(deOffHour-12)+":"+deOffTime[1];
-                       modePrenference.edit().putString(TIME_Off,nTimeOff).commit();
-                       turn_off_at.setSummary(modePrenference.getString(TIME_Off,timeOff));
-                   }
-                   */
-                    turn_on_at.setSummary(modePrenference.getString(TIME_ON,timeOn));
-                    turn_off_at.setSummary(modePrenference.getString(TIME_Off,timeOff)); 
-            }else if(!mPrefChangeFlag){
-                    if(deOnHour>12){
-                        String nTimeOn=(deOnHour-12)+":"+deOnTime[1];
-                        modePrenference.edit().putString(TIME_ON,nTimeOn).commit();
-                        //turn_on_at.setSummary(modePrenference.getString(TIME_ON,timeOn));
-                    }
-                    if(deOffHour>12){
-                       String nTimeOff=(deOffHour-12)+":"+deOffTime[1];
-                       modePrenference.edit().putString(TIME_Off,nTimeOff).commit();
-                       //turn_off_at.setSummary(modePrenference.getString(TIME_Off,timeOff));
-                   }
-                       turn_on_at.setSummary(modePrenference.getString(TIME_ON,timeOn));
-                       turn_off_at.setSummary(modePrenference.getString(TIME_Off,timeOff));
-                   
+		if(is24Hour()){
+			turn_on_at.setSummary(modePrenference.getString(TIME_ON,timeOn));
+			turn_off_at.setSummary(modePrenference.getString(TIME_Off,timeOff));
+		}else{
+			String[] timeOns = modePrenference.getString(TIME_ON, timeOn).split(":");
+			String[] timeOffs = modePrenference.getString(TIME_Off, timeOff).split(":");
+			int startTime_Hour = Integer.parseInt(timeOns[0]);
+			int startTime_Min = Integer.parseInt(timeOns[1]);
+			int offTime_Hour = Integer.parseInt(timeOffs[0]);
+			int offTime_Min = Integer.parseInt(timeOffs[1]);
+			
+			Calendar calendar = Calendar.getInstance();
+			calendar.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get
+                (Calendar.DAY_OF_MONTH), startTime_Hour, startTime_Min, 0);
+			Date date = calendar.getTime();
+			SimpleDateFormat sf = new SimpleDateFormat("hh:mm a");
+			turn_on_at.setSummary(sf.format(date));
+			
+			calendar.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get
+                (Calendar.DAY_OF_MONTH), offTime_Hour, offTime_Min, 0);
+			date = calendar.getTime();
+			turn_off_at.setSummary(sf.format(date));
+		}
+		
+        
+		
+    }
+
+    private void setNightMode(){
+		String[] timeOns = modePrenference.getString(TIME_ON, timeOn).split(":");
+		String[] timeOffs = modePrenference.getString(TIME_Off, timeOff).split(":");
+		int startTime_Hour = Integer.parseInt(timeOns[0]);
+		int startTime_Min = Integer.parseInt(timeOns[1]);
+		int offTime_Hour = Integer.parseInt(timeOffs[0]);
+		int offTime_Min = Integer.parseInt(timeOffs[1]);
+		
+		Calendar c = Calendar.getInstance();
+		int mHour = c.get(Calendar.HOUR_OF_DAY);
+		int mMinute = c.get(Calendar.MINUTE);	
+		if(offTime_Hour > startTime_Hour || (offTime_Hour == startTime_Hour && offTime_Min > startTime_Min)){  //NightMode offTime later startTime
+			if((mHour > startTime_Hour || (mHour == startTime_Hour && mMinute > startTime_Min)) 
+				&& (mHour < offTime_Hour || (mHour == offTime_Hour && mMinute < offTime_Min))){        //nowTime is between startTime and offTime
+				PictureQuality.enableBlueLight(true);
+			}else{
+				PictureQuality.enableBlueLight(false);
+			}
+		}else{ // NightMode offTime earlier to startTime   example startTime is 02:00,offTime is 01:00
+			if((mHour > startTime_Hour || (mHour == startTime_Hour && mMinute > startTime_Min)) 
+				|| (mHour < offTime_Hour || (mHour == offTime_Hour && mMinute < offTime_Min))){        //now is 00:30 or 03:00
+				PictureQuality.enableBlueLight(true);
+			}else{
+				PictureQuality.enableBlueLight(false);
+			}
+		}
 	}
-    }
+	
      private boolean is24Hour() {
         return DateFormat.is24HourFormat(getActivity());
     }
@@ -435,11 +444,20 @@
         turn_on_at.setShouldDisableView(!settingTimeFlag);
         turn_off_at.setEnabled(settingTimeFlag);
         turn_off_at.setShouldDisableView(!settingTimeFlag);
-
+         
         if (sunsetToSunriseFlag) {
-            updateSunset2Sunrise(sunsetToSunriseFlag);
+            NightModeUtils.sendBroad(OPEN_ACTION, getContext(), OPEN, 22, 0, 0);
+            NightModeUtils.sendBroad(CLOSE_ACTION, getContext(), CLOSE, 7, 0, -1);
+            Calendar c = Calendar.getInstance();
+            int mHour = c.get(Calendar.HOUR_OF_DAY);
+            int mMinute = c.get(Calendar.MINUTE);
+            if (22 <= mHour || mHour < 7) {
+                PictureQuality.enableBlueLight(true);
+            }else{
+			    PictureQuality.enableBlueLight(false);
+			}
         } else {
-            PictureQuality.enableBlueLight(false);
+			setNightMode();
             String[] timeOns = modePrenference.getString(TIME_ON, timeOn).split(":");
             String[] timeOffs = modePrenference.getString(TIME_ON, timeOff).split(":");
             startTime_Min = Integer.parseInt(timeOns[0]);
Index: vendor/branch/5058Y/packages/apps/Settings/src/com/android/settings/NightModeTypeSettings.java
===================================================================
--- vendor/branch/5058Y/packages/apps/Settings/src/com/android/settings/NightModeTypeSettings.java	(revision 0)
+++ vendor/branch/5058Y/packages/apps/Settings/src/com/android/settings/NightModeTypeSettings.java	(revision 12253)
@@ -0,0 +1,368 @@
+/*
+ * Night mode attribute list
+ */
+package com.android.settings;
+import android.app.Activity;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.os.Bundle;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceScreen;
+import android.support.v14.preference.SwitchPreference;
+import android.util.Log;
+
+import com.android.internal.logging.MetricsProto.MetricsEvent;
+import com.android.settings.search.BaseSearchIndexProvider;
+import com.android.settings.search.Indexable;
+import com.android.settings.search.SearchIndexableRaw;
+import android.content.SharedPreferences;
+import com.mediatek.pq.PictureQuality;
+import android.widget.Toast;
+import com.android.settings.ColorTemperaturePreference.Callback;
+import android.provider.Settings;
+import android.app.ActivityManager;
+import android.provider.Settings.Secure;
+import android.content.ContentResolver;
+import android.os.SystemProperties;
+import android.content.BroadcastReceiver;
+import android.content.IntentFilter;
+import java.util.Calendar;
+import java.util.Date;
+import java.text.SimpleDateFormat;
+import android.text.format.DateFormat;
+
+public class NightModeTypeSettings extends SettingsPreferenceFragment implements Indexable {
+	private static final String TAG = "NightModeTypeSettings";
+	private static final String PREFERENCE_NAME = "com.android.settings";
+	private static final String KEY_AUTOMATE = "automate_schedule";
+	private static final String KEY_SCHEDULE = "schedule_plan";
+	private static final String KEY_MANUALLY_ENABLE = "manually_enable";
+	private static final String KEY_MANUALLY = "manually";
+	private static final String NIGHT_MODE_ON_OROFF = "nightMode";
+	private static final String NIGHT_MODE_LEVEL = "night_mode_level";
+	private static final String SETTING_TIME = "automate_schedule";
+	private final String NIGHT_MODE_SWITCH="night_mode_switch";
+	private static final String SETTING_TIME_PLAN = "setting_time_plan";
+	private static final String SUNSET_TO_SUNRISE = "sunset_to_sunrise";
+	private final String timeOn="22:00";
+	private final String timeOff="07:00";
+	private static final String TIME_ON = "timeOn";
+	private static final String TIME_Off = "timeOff";
+	private final String OPEN="open_nightMode";
+    private final String CLOSE="close_nightMode";
+    private ContentResolver mContentResolver;
+	private int mCurrentUser;
+	private static SharedPreferences modePrenference;
+	private SwitchPreference manuallyEnablePreference;
+	private SwitchPreference automateSchedulePreference;
+	private static ColorTemperaturePreference manuallyPreference;
+	private PreferenceScreen schedulePlanPreference;
+    private boolean mPrefChangeFlag = false;
+
+	private final String NIGHT_MODE_ACTION_ON="android.intent.action.NIGHT_MODE_ACTION_ON";
+	private final String NIGHT_MODE_ACTION_OFF="android.intent.action.NIGHT_MODE_ACTION_OFF";
+	private final String OPEN_ACTION = "com.android.settings.nightmode.open";
+	private final String CLOSE_ACTION ="com.android.settings.nightmode.close";
+
+	 @Override
+    protected int getMetricsCategory() {
+        return MetricsEvent.WALLPAPER_TYPE;
+    }
+	 @Override
+		protected int getHelpResource() {
+			return R.string.help_uri_wallpaper;
+		}
+	 @Override
+		 public void onResume() {
+			 super.onResume();
+	/* manuallyPreference.upDataModeLevel();*/
+			String nightModeSwitch= Settings.System.getString(mContentResolver,NIGHT_MODE_SWITCH);
+			boolean mode= Boolean.parseBoolean(nightModeSwitch);
+			manuallyEnablePreference.setChecked(PictureQuality.isBlueLightEnabled());
+
+			if(mode&&!PictureQuality.isBlueLightEnabled()){
+				PictureQuality.enableBlueLight(true);
+
+			}
+			if(mode&&automateSchedulePreference.isChecked()){
+				automateSchedulePreference.setChecked(false);
+				schedulePlanPreference.setEnabled(false);
+            	schedulePlanPreference.setShouldDisableView(true);
+				modePrenference.edit().putBoolean(SETTING_TIME,false).commit();
+			}
+			//if(automateSchedulePreference.isChecked()){
+				boolean checkoutTime = modePrenference.getBoolean(SETTING_TIME_PLAN, false);
+				boolean auto = modePrenference.getBoolean(SUNSET_TO_SUNRISE, true);
+				if(auto){
+					schedulePlanPreference.setSummary(R.string.night_display_auto_mode_twilight);
+				}else if(checkoutTime){
+                    /*mPrefChangeFlag =PrefChangeBroadcast.mPrefChangeFlag;
+                    String[] deOnTime=modePrenference.getString(TIME_ON,timeOn).split(":");
+                    String[] deOffTime=modePrenference.getString(TIME_Off,timeOff).split(":");
+                    int deOnHour=Integer.parseInt(deOnTime[0]);
+                    int deOffHour=Integer.parseInt(deOffTime[0]);
+                    if(mPrefChangeFlag){
+                        if(deOnHour<12){
+                            String nTimeOn=(deOnHour+12)+":"+deOnTime[1];
+                            //turn_on_at.setSummary(nTimeOn);
+                            Log.i("faker:", "nTimeOn:"+nTimeOn);
+                            modePrenference.edit().putString(TIME_ON,nTimeOn).commit();
+                        }
+                        if(deOffHour<12){
+                             String nTimeOff=(deOffHour+12)+":"+deOffTime[1];
+                             Log.i("faker:", "nTimeOff:"+nTimeOff);
+                             modePrenference.edit().putString(TIME_Off,nTimeOff).commit();
+                        }
+                    }else{
+                        if(deOnHour>12){
+                            String nTimeOn=(deOnHour-12)+":"+deOnTime[1];
+                            //turn_on_at.setSummary(nTimeOn);
+                            Log.i("faker:", "nTimeOn:"+nTimeOn);
+                            modePrenference.edit().putString(TIME_ON,nTimeOn).commit();
+                        }
+                        if(deOffHour>12){
+                             String nTimeOff=(deOffHour-12)+":"+deOffTime[1];
+                             Log.i("faker:", "nTimeOff:"+nTimeOff);
+                             modePrenference.edit().putString(TIME_Off,nTimeOff).commit();
+                        }
+                    }
+*/
+                    if(!DateFormat.is24HourFormat(getActivity())){
+						String[] timeOns=modePrenference.getString(TIME_ON,timeOn).split(":");
+						String[] timeOffs=modePrenference.getString(TIME_Off,timeOff).split(":");
+						int startTime_Hour = Integer.parseInt(timeOns[0]);
+						int startTime_Min = Integer.parseInt(timeOns[1]);
+						int offTime_Hour = Integer.parseInt(timeOffs[0]);
+						int offTime_Min = Integer.parseInt(timeOffs[1]);
+						Calendar calendar = Calendar.getInstance();
+						calendar.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get
+							(Calendar.DAY_OF_MONTH), startTime_Hour, startTime_Min, 0);
+						Date date = calendar.getTime();
+						SimpleDateFormat sf = new SimpleDateFormat("hh:mm a");
+						String startTime= new String(sf.format(date));
+						
+						calendar.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get
+							(Calendar.DAY_OF_MONTH), offTime_Hour, offTime_Min, 0);
+						date = calendar.getTime();
+						String offTime= new String(sf.format(date));
+						
+						
+						schedulePlanPreference.setSummary(startTime+" to "+offTime);
+					}
+					else{
+						String timeOns=modePrenference.getString(TIME_ON,timeOn);
+					    String timeOffs=modePrenference.getString(TIME_Off,timeOff);
+						schedulePlanPreference.setSummary(timeOns+" to "+timeOffs);
+					}
+				}else{
+					schedulePlanPreference.setSummary(R.string.sunset2sunrise_title);
+				}
+			//}else{
+			//	schedulePlanPreference.setSummary(R.string.sunset2sunrise_title);
+			//}
+
+            /*
+            if(automateSchedulePreference.isChecked()||manuallyEnablePreference.isChecked()){
+                manuallyPreference.setEnabled(true);
+            }else{
+                manuallyPreference.setEnabled(false);
+            }
+            */
+		 }
+
+   /*display attribute list*/
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+			super.onCreate(savedInstanceState);
+			final Activity activity = getActivity();
+			addPreferencesFromResource(R.xml.nightmode_settings);
+			mContentResolver = getContext().getContentResolver();
+			initPreference();
+			IntentFilter filter = new IntentFilter(NIGHT_MODE_ACTION_ON);
+            filter.addAction(NIGHT_MODE_ACTION_OFF);
+            activity.registerReceiver(manuallyNightReceiver,filter);
+	}
+      private BroadcastReceiver manuallyNightReceiver = new BroadcastReceiver(){
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            Log.d(TAG,"intent.getAction()="+intent.getAction());
+            if(intent.getAction().equals(NIGHT_MODE_ACTION_ON)){
+                manuallyEnablePreference.setChecked(true);
+            }else if(intent.getAction().equals(NIGHT_MODE_ACTION_OFF)){
+                manuallyEnablePreference.setChecked(false);
+            }
+        }
+    };
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        getActivity().unregisterReceiver(manuallyNightReceiver);
+    }
+   public void sendBroadcast(){
+   		Intent intent1=new Intent(getContext(),BootedReceiver.class);
+        getContext().sendBroadcast(intent1);
+	}
+   	/* Initialize the layout and display the user data*/
+     public void initPreference(){
+      	manuallyPreference = (ColorTemperaturePreference) findPreference(KEY_MANUALLY);
+	 	manuallyEnablePreference = (SwitchPreference) findPreference(KEY_MANUALLY_ENABLE);
+        automateSchedulePreference = (SwitchPreference) findPreference(KEY_AUTOMATE);
+        schedulePlanPreference = (PreferenceScreen) findPreference(KEY_SCHEDULE);
+        modePrenference = getContext().getSharedPreferences(PREFERENCE_NAME,  0);
+        // boolean mode = modePrenference.getBoolean(NIGHT_MODE_ON_OROFF, false);
+		 boolean automate_schedule = modePrenference.getBoolean(SETTING_TIME, false);
+		/*manuallyPreference.setSeekbarProgress(modePrenference.getInt(NIGHT_MODE_LEVEL,5));*/
+		Log.e("indexfargmen",modePrenference.getInt(NIGHT_MODE_LEVEL,5)+"");
+
+
+
+		schedulePlanPreference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
+            @Override
+            public boolean onPreferenceClick(Preference preference) {
+                if(!modePrenference.getBoolean(SETTING_TIME, false)){
+                    return true;
+                }
+                return false;
+            }
+        });
+		/*According to whether the user has opened the night mode to set whether the user can click the time to set the night mode*/
+        if(automate_schedule){
+
+            automateSchedulePreference.setChecked(true);
+			schedulePlanPreference.setEnabled(true);
+            schedulePlanPreference.setShouldDisableView(false);
+
+        }else{
+        Log.e("automate_schedule------","false");
+            automateSchedulePreference.setChecked(false);
+            schedulePlanPreference.setEnabled(false);
+            schedulePlanPreference.setShouldDisableView(true);
+        }
+		/*Logical processing when the night mode switch state changes*/
+        automateSchedulePreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+            @Override
+            public boolean onPreferenceChange(Preference preference, Object newValue) {
+
+          	modePrenference.edit().putBoolean(SETTING_TIME,Boolean.parseBoolean(newValue.toString())).commit();
+				if(Boolean.parseBoolean(newValue.toString())){
+					schedulePlanPreference.setEnabled(true);
+					Calendar c = Calendar.getInstance();
+            int mHour = c.get(Calendar.HOUR_OF_DAY);
+            int mMinute = c.get(Calendar.MINUTE);
+			
+			boolean auto = modePrenference.getBoolean(SUNSET_TO_SUNRISE, true);
+			if(auto){
+				if (mHour >= 22 || mHour < 7) {
+                    manuallyEnablePreference.setChecked(true);
+                    PictureQuality.enableBlueLight(true);
+                } else{
+                    manuallyEnablePreference.setChecked(false);
+                    PictureQuality.enableBlueLight(false);
+                }
+			    NightModeUtils.sendBroad(OPEN_ACTION, getActivity(), OPEN, 22, 0, 0);
+                NightModeUtils.sendBroad(CLOSE_ACTION, getActivity(), CLOSE, 7, 0, -1);
+		    }else if(modePrenference.getBoolean(SETTING_TIME_PLAN, false)){
+				String[] timeOns = modePrenference.getString(TIME_ON, timeOn).split(":");
+				String[] timeOffs = modePrenference.getString(TIME_Off, timeOff).split(":");
+				int startTime_Hour = Integer.parseInt(timeOns[0]);
+				int startTime_Min = Integer.parseInt(timeOns[1]);
+				int offTime_Hour = Integer.parseInt(timeOffs[0]);
+				int offTime_Min = Integer.parseInt(timeOffs[1]);
+				if(offTime_Hour > startTime_Hour || (offTime_Hour == startTime_Hour && offTime_Min > startTime_Min)){  //NightMode offTime later startTime
+					if((mHour > startTime_Hour || (mHour == startTime_Hour && mMinute > startTime_Min)) 
+						&& (mHour < offTime_Hour || (mHour == offTime_Hour && mMinute < offTime_Min))){        //nowTime is between startTime and offTime
+						manuallyEnablePreference.setChecked(true);
+						PictureQuality.enableBlueLight(true);
+					}else{
+						manuallyEnablePreference.setChecked(false);
+						PictureQuality.enableBlueLight(false);
+					}
+				}else{ // NightMode offTime earlier to startTime   example startTime is 02:00,offTime is 01:00
+					if((mHour > startTime_Hour || (mHour == startTime_Hour && mMinute > startTime_Min)) 
+						|| (mHour < offTime_Hour || (mHour == offTime_Hour && mMinute < offTime_Min))){        //now is 00:30 or 03:00
+						manuallyEnablePreference.setChecked(true);
+						PictureQuality.enableBlueLight(true);
+					}else{
+						manuallyEnablePreference.setChecked(false);
+						PictureQuality.enableBlueLight(false);
+					}
+				}
+				NightModeUtils.sendBroad(OPEN_ACTION, getActivity(), OPEN, Integer.parseInt(timeOns[0]), Integer.parseInt(timeOns[1]), 0);
+				NightModeUtils.sendBroad(CLOSE_ACTION, getActivity(), CLOSE, Integer.parseInt(timeOffs[0]), Integer.parseInt(timeOffs[1]), -1);
+			}   
+				}	
+				
+				return true;
+            }
+        });
+		manuallyEnablePreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+            @Override
+            public boolean onPreferenceChange(Preference preference, Object newValue) {
+            	Settings.System.putString(mContentResolver,NIGHT_MODE_SWITCH,newValue.toString());
+              	//modePrenference.edit().putBoolean(NIGHT_MODE_ON_OROFF,Boolean.parseBoolean(newValue.toString())).commit();
+				if(Boolean.parseBoolean(newValue.toString())){
+					if(!PictureQuality.isBlueLightEnabled()){
+						PictureQuality.enableBlueLight(true);
+					}
+					
+					//modify start
+					/*if(automateSchedulePreference.isChecked()){
+						automateSchedulePreference.setChecked(false);
+						schedulePlanPreference.setEnabled(false);
+						schedulePlanPreference.setShouldDisableView(true);
+						modePrenference.edit().putBoolean(SETTING_TIME,false).commit();	
+						}*/
+					//modify end
+					
+					/*Settings.Secure.putIntForUser(mContentResolver, Secure.TWILIGHT_MODE, Secure.TWILIGHT_MODE_LOCKED_ON, mCurrentUser);
+					*///manuallyPreference.setEnabled(true);
+				}else{
+
+					PictureQuality.enableBlueLight(false);
+                    /*
+                    if (automateSchedulePreference.isChecked()) {
+                        manuallyPreference.setEnabled(true);
+
+                    } else {
+                        manuallyPreference.setEnabled(false);
+                    }
+                    */
+					/*manuallyPreference.setTitleColor();*/
+
+				}
+				return true;
+            }
+        });
+		manuallyPreference.setCallback(new ColorTemperaturePreference.Callback() {
+			@Override
+			public void onNightModeLevel(int level) {
+				if(level!=modePrenference.getInt(NIGHT_MODE_LEVEL,0)){
+     				PictureQuality.setBlueLightStrength(level*40);
+					/*Settings.Secure.putIntForUser(mContentResolver,Secure.ACCESSIBILITY_DISPLAY_COLOR_MATRIX,level*300 , mCurrentUser);
+					*/
+	  				modePrenference.edit().putInt(NIGHT_MODE_LEVEL,level).commit();
+	  			}
+			};
+			
+			@Override
+			public void onStartTouch (int level) {	
+					if(!automateSchedulePreference.isChecked() && !manuallyEnablePreference.isChecked() && !PictureQuality.isBlueLightEnabled()){
+						PictureQuality.enableBlueLight(true);
+						PictureQuality.setBlueLightStrength(level*40);
+					}
+			};
+
+			@Override
+			public void onEndTouch (int level) {	
+					if(!automateSchedulePreference.isChecked() && !manuallyEnablePreference.isChecked() && PictureQuality.isBlueLightEnabled()){
+						PictureQuality.enableBlueLight(false);	
+					}
+			}
+		});
+
+    }
+
+}
