Index: vendor/branch/5058A_Digicel_Jamaica/build/core/Makefile
===================================================================
--- vendor/branch/5058A_Digicel_Jamaica/build/core/Makefile	(revision 0)
+++ vendor/branch/5058A_Digicel_Jamaica/build/core/Makefile	(revision 9171)
@@ -0,0 +1,2591 @@
+# Put some miscellaneous rules here
+
+# HACK: clear LOCAL_PATH from including last build target before calling
+# intermedites-dir-for
+LOCAL_PATH := $(BUILD_SYSTEM)
+
+# Pick a reasonable string to use to identify files.
+ifneq "" "$(filter eng.%,$(BUILD_NUMBER))"
+  # BUILD_NUMBER has a timestamp in it, which means that
+  # it will change every time.  Pick a stable value.
+  FILE_NAME_TAG := eng.$(USER)
+else
+  FILE_NAME_TAG := $(BUILD_NUMBER)
+endif
+
+ifeq "" "$(CUSTOM_BUILD_VERNO)"
+  CUSTOM_BUILD_VERNO := $(BUILD_NUMBER)
+  CUSTOM_BUILD_VERNO := $(subst eng.$(USER).,,$(CUSTOM_BUILD_VERNO))
+endif
+CUSTOM_BUILD_VERNO_HDR := $(shell echo $(firstword $(CUSTOM_BUILD_VERNO)) | cut -b 1-15)
+
+# -----------------------------------------------------------------
+# Define rules to copy PRODUCT_COPY_FILES defined by the product.
+# PRODUCT_COPY_FILES contains words like <source file>:<dest file>[:<owner>].
+# <dest file> is relative to $(PRODUCT_OUT), so it should look like,
+# e.g., "system/etc/file.xml".
+# The filter part means "only eval the copy-one-file rule if this
+# src:dest pair is the first one to match the same dest"
+#$(1): the src:dest pair
+#define check-product-copy-files
+#$(if $(filter %.apk, $(call word-colon, 2, $(1))),$(error \
+#    Prebuilt apk found in PRODUCT_COPY_FILES: $(1), use BUILD_PREBUILT instead!))
+#endef
+# filter out the duplicate <source file>:<dest file> pairs.
+unique_product_copy_files_pairs :=
+$(foreach cf,$(PRODUCT_COPY_FILES), \
+    $(if $(filter $(unique_product_copy_files_pairs),$(cf)),,\
+        $(eval unique_product_copy_files_pairs += $(cf))))
+unique_product_copy_files_destinations :=
+$(foreach cf,$(unique_product_copy_files_pairs), \
+    $(eval _src := $(call word-colon,1,$(cf))) \
+    $(eval _dest := $(call word-colon,2,$(cf))) \
+    $(call check-product-copy-files,$(cf)) \
+    $(if $(filter $(unique_product_copy_files_destinations),$(_dest)), \
+        $(info PRODUCT_COPY_FILES $(cf) ignored.), \
+        $(eval _fulldest := $(call append-path,$(PRODUCT_OUT),$(_dest))) \
+        $(if $(filter %.xml,$(_dest)),\
+            $(eval $(call copy-xml-file-checked,$(_src),$(_fulldest))),\
+            $(eval $(call copy-one-file,$(_src),$(_fulldest)))) \
+        $(eval ALL_DEFAULT_INSTALLED_MODULES += $(_fulldest)) \
+        $(eval unique_product_copy_files_destinations += $(_dest))))
+unique_product_copy_files_pairs :=
+unique_product_copy_files_destinations :=
+
+# -----------------------------------------------------------------
+# Define rules to copy headers defined in copy_headers.mk
+# If more than one makefile declared a header, print a warning,
+# then copy the last one defined. This matches the previous make
+# behavior.
+$(foreach dest,$(ALL_COPIED_HEADERS), \
+    $(eval _srcs := $(ALL_COPIED_HEADERS.$(dest).SRC)) \
+    $(eval _src := $(word $(words $(_srcs)),$(_srcs))) \
+    $(if $(call streq,$(_src),$(_srcs)),, \
+        $(warning Duplicate header copy: $(dest)) \
+	$(warning Defined in: $(ALL_COPIED_HEADERS.$(dest).MAKEFILE))) \
+    $(eval $(call copy-one-header,$(_src),$(dest))))
+all_copied_headers: $(ALL_COPIED_HEADERS)
+
+# -----------------------------------------------------------------
+# docs/index.html
+ifeq (,$(TARGET_BUILD_APPS))
+gen := $(OUT_DOCS)/index.html
+ALL_DOCS += $(gen)
+$(gen): frameworks/base/docs/docs-redirect-index.html
+	@mkdir -p $(dir $@)
+	@cp -f $< $@
+endif
+
+# -----------------------------------------------------------------
+# default.prop
+INSTALLED_DEFAULT_PROP_TARGET := $(TARGET_ROOT_OUT)/default.prop
+ALL_DEFAULT_INSTALLED_MODULES += $(INSTALLED_DEFAULT_PROP_TARGET)
+ADDITIONAL_DEFAULT_PROPERTIES := \
+    $(call collapse-pairs, $(ADDITIONAL_DEFAULT_PROPERTIES))
+ADDITIONAL_DEFAULT_PROPERTIES += \
+    $(call collapse-pairs, $(PRODUCT_DEFAULT_PROPERTY_OVERRIDES))
+ADDITIONAL_DEFAULT_PROPERTIES := $(call uniq-pairs-by-first-component, \
+    $(ADDITIONAL_DEFAULT_PROPERTIES),=)
+
+intermediate_system_build_prop := $(call intermediates-dir-for,ETC,system_build_prop)/build.prop
+
+$(INSTALLED_DEFAULT_PROP_TARGET): $(intermediate_system_build_prop)
+	@echo Target buildinfo: $@
+	@mkdir -p $(dir $@)
+	$(hide) echo "#" > $@; \
+	        echo "# ADDITIONAL_DEFAULT_PROPERTIES" >> $@; \
+	        echo "#" >> $@;
+	$(hide) $(foreach line,$(ADDITIONAL_DEFAULT_PROPERTIES), \
+		echo "$(line)" >> $@;)
+	$(hide) echo "#" >> $@; \
+	        echo "# BOOTIMAGE_BUILD_PROPERTIES" >> $@; \
+	        echo "#" >> $@;
+	$(hide) echo ro.bootimage.build.date=`$(DATE_FROM_FILE)`>>$@
+	$(hide) echo ro.bootimage.build.date.utc=`$(DATE_FROM_FILE) +%s`>>$@
+	$(hide) echo ro.bootimage.build.fingerprint="$(BUILD_FINGERPRINT_FROM_FILE)">>$@
+	$(hide) build/tools/post_process_props.py $@
+
+# -----------------------------------------------------------------
+# build.prop
+INSTALLED_BUILD_PROP_TARGET := $(TARGET_OUT)/build.prop
+ALL_DEFAULT_INSTALLED_MODULES += $(INSTALLED_BUILD_PROP_TARGET)
+ADDITIONAL_BUILD_PROPERTIES := \
+    $(call collapse-pairs, $(ADDITIONAL_BUILD_PROPERTIES))
+ADDITIONAL_BUILD_PROPERTIES := $(call uniq-pairs-by-first-component, \
+    $(ADDITIONAL_BUILD_PROPERTIES),=)
+
+# A list of arbitrary tags describing the build configuration.
+# Force ":=" so we can use +=
+BUILD_VERSION_TAGS := $(BUILD_VERSION_TAGS)
+ifeq ($(TARGET_BUILD_TYPE),debug)
+  BUILD_VERSION_TAGS += debug
+endif
+# The "test-keys" tag marks builds signed with the old test keys,
+# which are available in the SDK.  "dev-keys" marks builds signed with
+# non-default dev keys (usually private keys from a vendor directory).
+# Both of these tags will be removed and replaced with "release-keys"
+# when the target-files is signed in a post-build step.
+ifeq ($(DEFAULT_SYSTEM_DEV_CERTIFICATE),build/target/product/security/testkey)
+BUILD_KEYS := test-keys
+else
+BUILD_KEYS := dev-keys
+endif
+BUILD_VERSION_TAGS += $(BUILD_KEYS)
+BUILD_VERSION_TAGS := $(subst $(space),$(comma),$(sort $(BUILD_VERSION_TAGS)))
+
+# A human-readable string that descibes this build in detail.
+build_desc := $(TARGET_PRODUCT)-$(TARGET_BUILD_VARIANT) $(PLATFORM_VERSION) $(BUILD_ID) $(BUILD_NUMBER_FROM_FILE) $(BUILD_VERSION_TAGS)
+$(intermediate_system_build_prop): PRIVATE_BUILD_DESC := $(build_desc)
+
+# The string used to uniquely identify the combined build and product; used by the OTA server.
+ifeq (,$(strip $(BUILD_FINGERPRINT)))
+  ifneq ($(filter eng.%,$(BUILD_NUMBER)),)
+    # Trim down BUILD_FINGERPRINT: the default BUILD_NUMBER makes it easily exceed
+    # the Android system property length limit (PROPERTY_VALUE_MAX=92).
+    BF_BUILD_NUMBER := $(shell echo $${USER:0:6})$(shell $(DATE) +%m%d%H%M)
+  else
+    BF_BUILD_NUMBER := $(BUILD_NUMBER)
+  endif
+  BUILD_FINGERPRINT := $(PRODUCT_BRAND)/$(TARGET_PRODUCT)/$(TARGET_DEVICE):$(PLATFORM_VERSION)/$(BUILD_ID)/$(BF_BUILD_NUMBER):$(TARGET_BUILD_VARIANT)/$(BUILD_VERSION_TAGS)
+  endif
+ifneq ($(words $(BUILD_FINGERPRINT)),1)
+  $(error BUILD_FINGERPRINT cannot contain spaces: "$(BUILD_FINGERPRINT)")
+endif
+
+$(shell mkdir -p $(PRODUCT_OUT) && echo $(BUILD_FINGERPRINT) > $(PRODUCT_OUT)/build_fingerprint.txt)
+BUILD_FINGERPRINT_FROM_FILE := $$(cat $(PRODUCT_OUT)/build_fingerprint.txt)
+
+# The string used to uniquely identify the system build; used by the OTA server.
+# This purposefully excludes any product-specific variables.
+ifeq (,$(strip $(BUILD_THUMBPRINT)))
+  BUILD_THUMBPRINT := $(PLATFORM_VERSION)/$(BUILD_ID)/$(BUILD_NUMBER):$(TARGET_BUILD_VARIANT)/$(BUILD_VERSION_TAGS)
+endif
+ifneq ($(words $(BUILD_THUMBPRINT)),1)
+  $(error BUILD_THUMBPRINT cannot contain spaces: "$(BUILD_THUMBPRINT)")
+endif
+
+KNOWN_OEM_THUMBPRINT_PROPERTIES := \
+    ro.product.brand \
+    ro.product.name \
+    ro.product.device
+OEM_THUMBPRINT_PROPERTIES := $(filter $(KNOWN_OEM_THUMBPRINT_PROPERTIES),\
+    $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_OEM_PROPERTIES))
+
+# Display parameters shown under Settings -> About Phone
+ifeq ($(TARGET_BUILD_VARIANT),user)
+  # User builds should show:
+  # release build number or branch.buld_number non-release builds
+
+  # Dev. branches should have DISPLAY_BUILD_NUMBER set
+  ifeq "true" "$(DISPLAY_BUILD_NUMBER)"
+    BUILD_DISPLAY_ID := $(BUILD_ID).$(BUILD_NUMBER_FROM_FILE) $(BUILD_KEYS)
+  else
+    BUILD_DISPLAY_ID := $(BUILD_ID) $(BUILD_KEYS)
+  endif
+else
+  # Non-user builds should show detailed build information
+  BUILD_DISPLAY_ID := $(build_desc)
+endif
+
+# Accepts a whitespace separated list of product locales such as
+# (en_US en_AU en_GB...) and returns the first locale in the list with
+# underscores replaced with hyphens. In the example above, this will
+# return "en-US".
+define get-default-product-locale
+$(strip $(subst _,-, $(firstword $(1))))
+endef
+
+BUILDINFO_SH := build/tools/buildinfo.sh
+
+# TARGET_BUILD_FLAVOR and ro.build.flavor are used only by the test harness to distinguish builds.
+TARGET_BUILD_FLAVOR := $(TARGET_PRODUCT)-$(TARGET_BUILD_VARIANT)
+ifdef SANITIZE_TARGET
+TARGET_BUILD_FLAVOR := $(TARGET_BUILD_FLAVOR)_asan
+endif
+
+ifdef TARGET_SYSTEM_PROP
+system_prop_file := $(TARGET_SYSTEM_PROP)
+else
+system_prop_file := $(wildcard $(TARGET_DEVICE_DIR)/system.prop)
+endif
+$(intermediate_system_build_prop): $(BUILDINFO_SH) $(INTERNAL_BUILD_ID_MAKEFILE) $(BUILD_SYSTEM)/version_defaults.mk $(system_prop_file) $(INSTALLED_ANDROID_INFO_TXT_TARGET)
+	@echo Target buildinfo: $@
+	@mkdir -p $(dir $@)
+	$(hide) echo > $@
+ifneq ($(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_OEM_PROPERTIES),)
+	$(hide) echo "#" >> $@; \
+	        echo "# PRODUCT_OEM_PROPERTIES" >> $@; \
+	        echo "#" >> $@;
+	$(hide) $(foreach prop,$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_OEM_PROPERTIES), \
+		echo "import /oem/oem.prop $(prop)" >> $@;)
+endif
+ifeq ($(strip $(MTK_CIP_SUPPORT)),yes)
+	$(hide) echo "import /custom/cip-build.prop" >> $@;
+endif
+	$(hide) TARGET_BUILD_TYPE="$(TARGET_BUILD_VARIANT)" \
+			TARGET_BUILD_FLAVOR="$(TARGET_BUILD_FLAVOR)" \
+			TARGET_DEVICE="$(TARGET_DEVICE)" \
+			PRODUCT_NAME="$(TARGET_PRODUCT)" \
+			PRODUCT_BRAND="$(PRODUCT_BRAND)" \
+			PRODUCT_DEFAULT_LOCALE="$(call get-default-product-locale,$(PRODUCT_LOCALES))" \
+			PRODUCT_DEFAULT_WIFI_CHANNELS="$(PRODUCT_DEFAULT_WIFI_CHANNELS)" \
+			PRODUCT_MODEL="$(PRODUCT_MODEL)" \
+			PRODUCT_MANUFACTURER="$(PRODUCT_MANUFACTURER)" \
+			PRIVATE_BUILD_DESC="$(PRIVATE_BUILD_DESC)" \
+			BUILD_ID="$(BUILD_ID)" \
+			BUILD_DISPLAY_ID="$(BUILD_DISPLAY_ID)" \
+			DATE="$(DATE_FROM_FILE)" \
+			BUILD_NUMBER="$(BUILD_NUMBER_FROM_FILE)" \
+			BOARD_BUILD_SYSTEM_ROOT_IMAGE="$(BOARD_BUILD_SYSTEM_ROOT_IMAGE)" \
+			AB_OTA_UPDATER="$(AB_OTA_UPDATER)" \
+			PLATFORM_VERSION="$(PLATFORM_VERSION)" \
+			PLATFORM_SECURITY_PATCH="$(PLATFORM_SECURITY_PATCH)" \
+			PLATFORM_BASE_OS="$(PLATFORM_BASE_OS)" \
+			PLATFORM_SDK_VERSION="$(PLATFORM_SDK_VERSION)" \
+			PLATFORM_PREVIEW_SDK_VERSION="$(PLATFORM_PREVIEW_SDK_VERSION)" \
+			PLATFORM_VERSION_CODENAME="$(PLATFORM_VERSION_CODENAME)" \
+			PLATFORM_VERSION_ALL_CODENAMES="$(PLATFORM_VERSION_ALL_CODENAMES)" \
+			BUILD_VERSION_TAGS="$(BUILD_VERSION_TAGS)" \
+			TARGET_BOOTLOADER_BOARD_NAME="$(TARGET_BOOTLOADER_BOARD_NAME)" \
+			BUILD_FINGERPRINT="$(BUILD_FINGERPRINT_FROM_FILE)" \
+			$(if $(OEM_THUMBPRINT_PROPERTIES),BUILD_THUMBPRINT="$(BUILD_THUMBPRINT)") \
+			TARGET_BOARD_PLATFORM="$(TARGET_BOARD_PLATFORM)" \
+			TARGET_CPU_ABI_LIST="$(TARGET_CPU_ABI_LIST)" \
+			TARGET_CPU_ABI_LIST_32_BIT="$(TARGET_CPU_ABI_LIST_32_BIT)" \
+			TARGET_CPU_ABI_LIST_64_BIT="$(TARGET_CPU_ABI_LIST_64_BIT)" \
+			TARGET_CPU_ABI="$(TARGET_CPU_ABI)" \
+			TARGET_CPU_ABI2="$(TARGET_CPU_ABI2)" \
+			TARGET_AAPT_CHARACTERISTICS="$(TARGET_AAPT_CHARACTERISTICS)" \
+	        bash $(BUILDINFO_SH) >> $@
+	$(hide) $(foreach file,$(system_prop_file), \
+		if [ -f "$(file)" ]; then \
+			echo "#" >> $@; \
+			echo Target buildinfo from: "$(file)"; \
+			echo "# from $(file)" >> $@; \
+			echo "#" >> $@; \
+			cat $(file) >> $@; \
+		fi;)
+	$(if $(ADDITIONAL_BUILD_PROPERTIES), \
+		$(hide) echo >> $@; \
+		        echo "#" >> $@; \
+		        echo "# ADDITIONAL_BUILD_PROPERTIES" >> $@; \
+		        echo "#" >> $@; )
+	$(hide) $(foreach line,$(ADDITIONAL_BUILD_PROPERTIES), \
+		echo "$(line)" >> $@;)
+	$(hide) cat $(INSTALLED_ANDROID_INFO_TXT_TARGET) | grep 'require version-' | sed -e 's/require version-/ro.build.expect./g' >> $@
+	$(hide) build/tools/post_process_props.py $@ $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_PROPERTY_BLACKLIST)
+ifeq ($(strip $(MTK_CIP_SUPPORT)),yes)
+	$(hide) echo "import /custom/cip-build.prop" >> $@;
+endif
+
+build_desc :=
+
+ifeq (,$(filter true, $(TARGET_NO_KERNEL) $(TARGET_NO_RECOVERY)))
+INSTALLED_RECOVERYIMAGE_TARGET := $(PRODUCT_OUT)/recovery.img
+else
+INSTALLED_RECOVERYIMAGE_TARGET :=
+endif
+
+$(INSTALLED_BUILD_PROP_TARGET): $(intermediate_system_build_prop) $(INSTALLED_RECOVERYIMAGE_TARGET)
+	@echo "Target build info: $@"
+	$(hide) cat $(intermediate_system_build_prop) > $@
+ifdef INSTALLED_RECOVERYIMAGE_TARGET
+	$(hide) echo ro.expect.recovery_id=`cat $(RECOVERYIMAGE_ID_FILE)` >> $@
+endif
+
+# -----------------------------------------------------------------
+# vendor build.prop
+#
+# For verifying that the vendor build is what we thing it is
+ifdef BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE
+INSTALLED_VENDOR_BUILD_PROP_TARGET := $(TARGET_OUT_VENDOR)/build.prop
+ALL_DEFAULT_INSTALLED_MODULES += $(INSTALLED_VENDOR_BUILD_PROP_TARGET)
+$(INSTALLED_VENDOR_BUILD_PROP_TARGET): $(INSTALLED_BUILD_PROP_TARGET)
+	@echo Target vendor buildinfo: $@
+	@mkdir -p $(dir $@)
+	$(hide) echo > $@
+	$(hide) echo ro.vendor.build.date=`$(DATE_FROM_FILE)`>>$@
+	$(hide) echo ro.vendor.build.date.utc=`$(DATE_FROM_FILE) +%s`>>$@
+	$(hide) echo ro.vendor.build.fingerprint="$(BUILD_FINGERPRINT_FROM_FILE)">>$@
+endif
+
+# ----------------------------------------------------------------
+
+# -----------------------------------------------------------------
+# sdk-build.prop
+#
+# There are certain things in build.prop that we don't want to
+# ship with the sdk; remove them.
+
+# This must be a list of entire property keys followed by
+# "=" characters, without any internal spaces.
+sdk_build_prop_remove := \
+	ro.build.user= \
+	ro.build.host= \
+	ro.product.brand= \
+	ro.product.manufacturer= \
+	ro.product.device=
+# TODO: Remove this soon-to-be obsolete property
+sdk_build_prop_remove += ro.build.product=
+INSTALLED_SDK_BUILD_PROP_TARGET := $(PRODUCT_OUT)/sdk/sdk-build.prop
+$(INSTALLED_SDK_BUILD_PROP_TARGET): $(INSTALLED_BUILD_PROP_TARGET)
+	@echo SDK buildinfo: $@
+	@mkdir -p $(dir $@)
+	$(hide) grep -v "$(subst $(space),\|,$(strip \
+				$(sdk_build_prop_remove)))" $< > $@.tmp
+	$(hide) for x in $(sdk_build_prop_remove); do \
+				echo "$$x"generic >> $@.tmp; done
+	$(hide) mv $@.tmp $@
+
+# -----------------------------------------------------------------
+# package stats
+PACKAGE_STATS_FILE := $(PRODUCT_OUT)/package-stats.txt
+PACKAGES_TO_STAT := \
+    $(sort $(filter $(TARGET_OUT)/% $(TARGET_OUT_DATA)/%, \
+	$(filter %.jar %.apk, $(ALL_DEFAULT_INSTALLED_MODULES))))
+$(PACKAGE_STATS_FILE): $(PACKAGES_TO_STAT)
+	@echo Package stats: $@
+	@mkdir -p $(dir $@)
+	$(hide) rm -f $@
+ifeq ($(PACKAGES_TO_STAT),)
+# Create empty package stats file if target builds no jar(s) or apk(s).
+	$(hide) touch $@
+else
+	$(hide) build/tools/dump-package-stats $^ > $@
+endif
+
+.PHONY: package-stats
+package-stats: $(PACKAGE_STATS_FILE)
+
+# -----------------------------------------------------------------
+# Cert-to-package mapping.  Used by the post-build signing tools.
+# Use a macro to add newline to each echo command
+define _apkcerts_echo_with_newline
+$(hide) echo $(1)
+
+endef
+
+name := $(TARGET_PRODUCT)
+ifeq ($(TARGET_BUILD_TYPE),debug)
+  name := $(name)_debug
+endif
+name := $(name)-apkcerts-$(FILE_NAME_TAG)
+intermediates := \
+	$(call intermediates-dir-for,PACKAGING,apkcerts)
+APKCERTS_FILE := $(intermediates)/$(name).txt
+# We don't need to really build all the modules.
+# TODO: rebuild APKCERTS_FILE if any app change its cert.
+$(APKCERTS_FILE):
+	@echo APK certs list: $@
+	@mkdir -p $(dir $@)
+	@rm -f $@
+	$(hide) $(foreach p,$(wordlist 1,400,$(PACKAGES)),\
+          $(if $(PACKAGES.$(p).EXTERNAL_KEY),\
+	    echo 'name="$(p).apk" certificate="EXTERNAL" \
+	         private_key=""' >> $@;,\
+	    echo 'name="$(p).apk" certificate="$(PACKAGES.$(p).CERTIFICATE)" \
+	         private_key="$(PACKAGES.$(p).PRIVATE_KEY)"' >> $@;))
+	$(hide) $(foreach p,$(wordlist 401,800,$(PACKAGES)),\
+          $(if $(PACKAGES.$(p).EXTERNAL_KEY),\
+	    echo 'name="$(p).apk" certificate="EXTERNAL" \
+	         private_key=""' >> $@;,\
+	    echo 'name="$(p).apk" certificate="$(PACKAGES.$(p).CERTIFICATE)" \
+	         private_key="$(PACKAGES.$(p).PRIVATE_KEY)"' >> $@;))
+	$(hide) $(foreach p,$(wordlist 801,99999,$(PACKAGES)),\
+	  $(if $(PACKAGES.$(p).EXTERNAL_KEY),\
+	    $(call _apkcerts_echo_with_newline,\
+	      'name="$(p).apk" certificate="EXTERNAL" \
+	      private_key=""' >> $@),\
+	    $(call _apkcerts_echo_with_newline,\
+	      'name="$(p).apk" certificate="$(PACKAGES.$(p).CERTIFICATE)" \
+	      private_key="$(PACKAGES.$(p).PRIVATE_KEY)"' >> $@)))
+	# In case value of PACKAGES is empty.
+	$(hide) touch $@
+
+.PHONY: apkcerts-list
+apkcerts-list: $(APKCERTS_FILE)
+
+ifneq (,$(TARGET_BUILD_APPS))
+  $(call dist-for-goals, apps_only, $(APKCERTS_FILE):apkcerts.txt)
+endif
+
+# -----------------------------------------------------------------
+
+# The dev key is used to sign this package, and as the key required
+# for future OTA packages installed by this system.  Actual product
+# deliverables will be re-signed by hand.  We expect this file to
+# exist with the suffixes ".x509.pem" and ".pk8".
+DEFAULT_KEY_CERT_PAIR := $(DEFAULT_SYSTEM_DEV_CERTIFICATE)
+
+
+# Rules that need to be present for the all targets, even
+# if they don't do anything.
+.PHONY: systemimage
+systemimage:
+
+# -----------------------------------------------------------------
+
+.PHONY: event-log-tags
+
+# Produce an event logs tag file for everything we know about, in order
+# to properly allocate numbers.  Then produce a file that's filtered
+# for what's going to be installed.
+
+all_event_log_tags_file := $(TARGET_OUT_COMMON_INTERMEDIATES)/all-event-log-tags.txt
+
+event_log_tags_file := $(TARGET_OUT)/etc/event-log-tags
+
+# Include tags from all packages that we know about
+all_event_log_tags_src := \
+    $(sort $(foreach m, $(ALL_MODULES), $(ALL_MODULES.$(m).EVENT_LOG_TAGS)))
+
+# PDK builds will already have a full list of tags that needs to get merged
+# in with the ones from source
+pdk_fusion_log_tags_file := $(patsubst $(PRODUCT_OUT)/%,$(_pdk_fusion_intermediates)/%,$(filter $(event_log_tags_file),$(ALL_PDK_FUSION_FILES)))
+
+$(all_event_log_tags_file): PRIVATE_SRC_FILES := $(all_event_log_tags_src) $(pdk_fusion_log_tags_file)
+$(all_event_log_tags_file): $(all_event_log_tags_src) $(pdk_fusion_log_tags_file)
+	$(hide) mkdir -p $(dir $@)
+	$(hide) build/tools/merge-event-log-tags.py -o $@ $(PRIVATE_SRC_FILES)
+
+# Include tags from all packages included in this product, plus all
+# tags that are part of the system (ie, not in a vendor/ or device/
+# directory).
+event_log_tags_src := \
+    $(sort $(foreach m,\
+      $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_PACKAGES) \
+      $(call module-names-for-tag-list,user), \
+      $(ALL_MODULES.$(m).EVENT_LOG_TAGS)) \
+      $(filter-out vendor/% device/% out/%,$(all_event_log_tags_src)))
+
+$(event_log_tags_file): PRIVATE_SRC_FILES := $(event_log_tags_src) $(pdk_fusion_log_tags_file)
+$(event_log_tags_file): PRIVATE_MERGED_FILE := $(all_event_log_tags_file)
+$(event_log_tags_file): $(event_log_tags_src) $(all_event_log_tags_file) $(pdk_fusion_log_tags_file)
+	$(hide) mkdir -p $(dir $@)
+	$(hide) build/tools/merge-event-log-tags.py -o $@ -m $(PRIVATE_MERGED_FILE) $(PRIVATE_SRC_FILES)
+
+event-log-tags: $(event_log_tags_file)
+
+ALL_DEFAULT_INSTALLED_MODULES += $(event_log_tags_file)
+
+
+# #################################################################
+# Targets for boot/OS images
+# #################################################################
+ifneq ($(strip $(TARGET_NO_BOOTLOADER)),true)
+  INSTALLED_BOOTLOADER_MODULE := $(PRODUCT_OUT)/bootloader
+  ifeq ($(strip $(TARGET_BOOTLOADER_IS_2ND)),true)
+    INSTALLED_2NDBOOTLOADER_TARGET := $(PRODUCT_OUT)/2ndbootloader
+  else
+    INSTALLED_2NDBOOTLOADER_TARGET :=
+  endif
+else
+  INSTALLED_BOOTLOADER_MODULE :=
+  INSTALLED_2NDBOOTLOADER_TARGET :=
+endif # TARGET_NO_BOOTLOADER
+ifneq ($(strip $(TARGET_NO_KERNEL)),true)
+  INSTALLED_KERNEL_TARGET := $(PRODUCT_OUT)/kernel
+else
+  INSTALLED_KERNEL_TARGET :=
+endif
+
+# -----------------------------------------------------------------
+# the ramdisk
+INTERNAL_RAMDISK_FILES := $(filter $(TARGET_ROOT_OUT)/%, \
+	$(ALL_PREBUILT) \
+	$(ALL_GENERATED_SOURCES) \
+	$(ALL_DEFAULT_INSTALLED_MODULES))
+
+BUILT_RAMDISK_TARGET := $(PRODUCT_OUT)/ramdisk.img
+
+# We just build this directly to the install location.
+INSTALLED_RAMDISK_TARGET := $(BUILT_RAMDISK_TARGET)
+$(INSTALLED_RAMDISK_TARGET): $(MKBOOTFS) $(INTERNAL_RAMDISK_FILES) | $(MINIGZIP)
+ifeq ($(MTK_HEADER_SUPPORT),yes)
+$(INSTALLED_RAMDISK_TARGET): $(HOST_OUT_EXECUTABLES)/mkimage
+endif
+	$(call pretty,"Target ram disk: $@")
+ifeq ($(MTK_HEADER_SUPPORT),yes)
+	$(hide) $(MKBOOTFS) -d $(TARGET_OUT) $(TARGET_ROOT_OUT) | $(MINIGZIP) > $@_raw
+	$(hide) $(HOST_OUT_EXECUTABLES)/mkimage $@_raw ROOTFS 0xffffffff > $@
+else
+	$(hide) $(MKBOOTFS) -d $(TARGET_OUT) $(TARGET_ROOT_OUT) | $(MINIGZIP) > $@
+endif
+
+.PHONY: ramdisk-nodeps
+ramdisk-nodeps: $(MKBOOTFS) | $(MINIGZIP)
+ifeq ($(MTK_HEADER_SUPPORT),yes)
+ramdisk-nodeps: $(HOST_OUT_EXECUTABLES)/mkimage
+endif
+	@echo "make $@: ignoring dependencies"
+ifeq ($(MTK_HEADER_SUPPORT),yes)
+	$(hide) $(MKBOOTFS) -d $(TARGET_OUT) $(TARGET_ROOT_OUT) | $(MINIGZIP) > $(INSTALLED_RAMDISK_TARGET)_raw
+	$(hide) $(HOST_OUT_EXECUTABLES)/mkimage $(INSTALLED_RAMDISK_TARGET)_raw ROOTFS 0xffffffff > $(INSTALLED_RAMDISK_TARGET)
+else
+	$(hide) $(MKBOOTFS) -d $(TARGET_OUT) $(TARGET_ROOT_OUT) | $(MINIGZIP) > $(INSTALLED_RAMDISK_TARGET)
+endif
+
+ifneq ($(strip $(TARGET_NO_KERNEL)),true)
+
+# -----------------------------------------------------------------
+# the boot image, which is a collection of other images.
+INTERNAL_BOOTIMAGE_ARGS := \
+	$(addprefix --second ,$(INSTALLED_2NDBOOTLOADER_TARGET)) \
+	--kernel $(INSTALLED_KERNEL_TARGET)
+
+ifneq ($(BOARD_BUILD_SYSTEM_ROOT_IMAGE),true)
+INTERNAL_BOOTIMAGE_ARGS += --ramdisk $(INSTALLED_RAMDISK_TARGET)
+endif
+
+INTERNAL_BOOTIMAGE_FILES := $(filter-out --%,$(INTERNAL_BOOTIMAGE_ARGS))
+
+BOARD_KERNEL_BASE := $(strip $(BOARD_KERNEL_BASE))
+ifdef BOARD_KERNEL_BASE
+  INTERNAL_BOOTIMAGE_ARGS += --base $(BOARD_KERNEL_BASE)
+endif
+
+BOARD_RAMDISK_OFFSET := $(strip $(BOARD_RAMDISK_OFFSET))
+ifdef BOARD_RAMDISK_OFFSET
+  INTERNAL_BOOTIMAGE_ARGS += --ramdisk_offset $(BOARD_RAMDISK_OFFSET)
+endif
+
+BOARD_KERNEL_OFFSET := $(strip $(BOARD_KERNEL_OFFSET))
+ifdef BOARD_KERNEL_OFFSET
+  INTERNAL_BOOTIMAGE_ARGS += --kernel_offset $(BOARD_KERNEL_OFFSET)
+endif
+
+BOARD_TAGS_OFFSET := $(strip $(BOARD_TAGS_OFFSET))
+ifdef BOARD_TAGS_OFFSET
+  INTERNAL_BOOTIMAGE_ARGS += --tags_offset $(BOARD_TAGS_OFFSET)
+endif
+
+BOARD_KERNEL_PAGESIZE := $(strip $(BOARD_KERNEL_PAGESIZE))
+ifdef BOARD_KERNEL_PAGESIZE
+  INTERNAL_BOOTIMAGE_ARGS += --pagesize $(BOARD_KERNEL_PAGESIZE)
+endif
+
+ifeq ($(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VERITY),true)
+ifeq ($(BOARD_BUILD_SYSTEM_ROOT_IMAGE),true)
+VERITY_KEYID := veritykeyid=id:`openssl x509 -in $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).x509.pem -text \
+                | grep keyid | sed 's/://g' | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]' | sed 's/keyid//g'`
+endif
+endif
+
+BOARD_KERNEL_CMDLINE := $(strip $(BOARD_KERNEL_CMDLINE) buildvariant=$(TARGET_BUILD_VARIANT) $(VERITY_KEYID))
+ifdef BOARD_KERNEL_CMDLINE
+INTERNAL_BOOTIMAGE_ARGS += --cmdline "$(BOARD_KERNEL_CMDLINE)"
+endif
+
+INTERNAL_MKBOOTIMG_VERSION_ARGS := \
+    --os_version $(PLATFORM_VERSION) \
+    --os_patch_level $(PLATFORM_SECURITY_PATCH)
+
+ifdef CUSTOM_BUILD_VERNO
+  INTERNAL_BOOTIMAGE_ARGS += --board $(CUSTOM_BUILD_VERNO_HDR)
+endif
+
+INSTALLED_BOOTIMAGE_TARGET := $(PRODUCT_OUT)/boot.img
+
+# BOARD_USES_RECOVERY_AS_BOOT = true must have BOARD_BUILD_SYSTEM_ROOT_IMAGE = true.
+ifeq ($(BOARD_USES_RECOVERY_AS_BOOT),true)
+ifneq ($(BOARD_BUILD_SYSTEM_ROOT_IMAGE),true)
+  $(error BOARD_BUILD_SYSTEM_ROOT_IMAGE must be enabled for BOARD_USES_RECOVERY_AS_BOOT.)
+endif
+endif
+
+# We build recovery as boot image if BOARD_USES_RECOVERY_AS_BOOT is true.
+ifneq ($(BOARD_USES_RECOVERY_AS_BOOT),true)
+ifeq ($(TARGET_BOOTIMAGE_USE_EXT2),true)
+$(error TARGET_BOOTIMAGE_USE_EXT2 is not supported anymore)
+else ifeq (true,$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_BOOT_SIGNER)) # TARGET_BOOTIMAGE_USE_EXT2 != true
+
+$(INSTALLED_BOOTIMAGE_TARGET): $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_FILES) $(BOOT_SIGNER)
+	$(call pretty,"Target boot image: $@")
+	$(hide) $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_ARGS) $(INTERNAL_MKBOOTIMG_VERSION_ARGS) $(BOARD_MKBOOTIMG_ARGS) --output $@
+	$(BOOT_SIGNER) /boot $@ $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).pk8 $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).x509.pem $@
+	$(hide) $(call assert-max-image-size,$@,$(BOARD_BOOTIMAGE_PARTITION_SIZE))
+
+.PHONY: bootimage-nodeps
+bootimage-nodeps: $(MKBOOTIMG) $(BOOT_SIGNER)
+	@echo "make $@: ignoring dependencies"
+	$(hide) $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_ARGS) $(INTERNAL_MKBOOTIMG_VERSION_ARGS) $(BOARD_MKBOOTIMG_ARGS) --output $(INSTALLED_BOOTIMAGE_TARGET)
+	$(BOOT_SIGNER) /boot $(INSTALLED_BOOTIMAGE_TARGET) $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).pk8 $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).x509.pem $(INSTALLED_BOOTIMAGE_TARGET)
+	$(hide) $(call assert-max-image-size,$(INSTALLED_BOOTIMAGE_TARGET),$(BOARD_BOOTIMAGE_PARTITION_SIZE))
+
+else ifeq (true,$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VBOOT)) # PRODUCT_SUPPORTS_BOOT_SIGNER != true
+
+$(INSTALLED_BOOTIMAGE_TARGET): $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_FILES) $(VBOOT_SIGNER)
+	$(call pretty,"Target boot image: $@")
+	$(hide) $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_ARGS) $(INTERNAL_MKBOOTIMG_VERSION_ARGS) $(BOARD_MKBOOTIMG_ARGS) --output $@.unsigned
+	$(VBOOT_SIGNER) $(FUTILITY) $@.unsigned $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_KEY).vbpubk $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_KEY).vbprivk $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_SUBKEY).vbprivk $@.keyblock $@
+	$(hide) $(call assert-max-image-size,$@,$(BOARD_BOOTIMAGE_PARTITION_SIZE))
+
+.PHONY: bootimage-nodeps
+bootimage-nodeps: $(MKBOOTIMG) $(VBOOT_SIGNER)
+	@echo "make $@: ignoring dependencies"
+	$(hide) $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_ARGS) $(INTERNAL_MKBOOTIMG_VERSION_ARGS) $(BOARD_MKBOOTIMG_ARGS) --output $(INSTALLED_BOOTIMAGE_TARGET).unsigned
+	$(VBOOT_SIGNER) $(FUTILITY) $(INSTALLED_BOOTIMAGE_TARGET).unsigned $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_KEY).vbpubk $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_KEY).vbprivk $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_SUBKEY).vbprivk $(INSTALLED_BOOTIMAGE_TARGET).keyblock $(INSTALLED_BOOTIMAGE_TARGET)
+	$(hide) $(call assert-max-image-size,$(INSTALLED_BOOTIMAGE_TARGET),$(BOARD_BOOTIMAGE_PARTITION_SIZE))
+
+else # PRODUCT_SUPPORTS_VBOOT != true
+
+$(INSTALLED_BOOTIMAGE_TARGET): $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_FILES)
+	$(call pretty,"Target boot image: $@")
+	$(hide) $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_ARGS) $(INTERNAL_MKBOOTIMG_VERSION_ARGS) $(BOARD_MKBOOTIMG_ARGS) --output $@
+	$(hide) $(call assert-max-image-size,$@,$(BOARD_BOOTIMAGE_PARTITION_SIZE))
+
+.PHONY: bootimage-nodeps
+bootimage-nodeps: $(MKBOOTIMG)
+	@echo "make $@: ignoring dependencies"
+	$(hide) $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_ARGS) $(INTERNAL_MKBOOTIMG_VERSION_ARGS) $(BOARD_MKBOOTIMG_ARGS) --output $(INSTALLED_BOOTIMAGE_TARGET)
+	$(hide) $(call assert-max-image-size,$(INSTALLED_BOOTIMAGE_TARGET),$(BOARD_BOOTIMAGE_PARTITION_SIZE))
+
+endif # TARGET_BOOTIMAGE_USE_EXT2
+endif # BOARD_USES_RECOVERY_AS_BOOT
+
+else	# TARGET_NO_KERNEL
+# HACK: The top-level targets depend on the bootimage.  Not all targets
+# can produce a bootimage, though, and emulator targets need the ramdisk
+# instead.  Fake it out by calling the ramdisk the bootimage.
+# TODO: make the emulator use bootimages, and make mkbootimg accept
+#       kernel-less inputs.
+INSTALLED_BOOTIMAGE_TARGET := $(INSTALLED_RAMDISK_TARGET)
+endif
+
+# -----------------------------------------------------------------
+# NOTICE files
+#
+# We are required to publish the licenses for all code under BSD, GPL and
+# Apache licenses (and possibly other more exotic ones as well). We err on the
+# side of caution, so the licenses for other third-party code are included here
+# too.
+#
+# This needs to be before the systemimage rules, because it adds to
+# ALL_DEFAULT_INSTALLED_MODULES, which those use to pick which files
+# go into the systemimage.
+
+.PHONY: notice_files
+
+# Create the rule to combine the files into text and html forms
+# $(1) - Plain text output file
+# $(2) - HTML output file
+# $(3) - File title
+# $(4) - Directory to use.  Notice files are all $(4)/src.  Other
+#		 directories in there will be used for scratch
+# $(5) - Dependencies for the output files
+#
+# The algorithm here is that we go collect a hash for each of the notice
+# files and write the names of the files that match that hash.  Then
+# to generate the real files, we go print out all of the files and their
+# hashes.
+#
+# These rules are fairly complex, so they depend on this makefile so if
+# it changes, they'll run again.
+#
+# TODO: We could clean this up so that we just record the locations of the
+# original notice files instead of making rules to copy them somwehere.
+# Then we could traverse that without quite as much bash drama.
+define combine-notice-files
+$(1) $(2): PRIVATE_MESSAGE := $(3)
+$(1) $(2): PRIVATE_DIR := $(4)
+$(1) : $(2)
+$(2) : $(5) $(BUILD_SYSTEM)/Makefile build/tools/generate-notice-files.py
+	build/tools/generate-notice-files.py $(1) $(2) $$(PRIVATE_MESSAGE) $$(PRIVATE_DIR)/src
+notice_files: $(1) $(2)
+endef
+
+# TODO These intermediate NOTICE.txt/NOTICE.html files should go into
+# TARGET_OUT_NOTICE_FILES now that the notice files are gathered from
+# the src subdirectory.
+
+target_notice_file_txt := $(TARGET_OUT_INTERMEDIATES)/NOTICE.txt
+target_notice_file_html := $(TARGET_OUT_INTERMEDIATES)/NOTICE.html
+target_notice_file_html_gz := $(TARGET_OUT_INTERMEDIATES)/NOTICE.html.gz
+tools_notice_file_txt := $(HOST_OUT_INTERMEDIATES)/NOTICE.txt
+tools_notice_file_html := $(HOST_OUT_INTERMEDIATES)/NOTICE.html
+
+ifndef TARGET_BUILD_APPS
+kernel_notice_file := $(TARGET_OUT_NOTICE_FILES)/src/kernel.txt
+pdk_fusion_notice_files := $(filter $(TARGET_OUT_NOTICE_FILES)/%, $(ALL_PDK_FUSION_FILES))
+
+$(eval $(call combine-notice-files, \
+			$(target_notice_file_txt), \
+			$(target_notice_file_html), \
+			"Notices for files contained in the filesystem images in this directory:", \
+			$(TARGET_OUT_NOTICE_FILES), \
+			$(ALL_DEFAULT_INSTALLED_MODULES) $(kernel_notice_file) $(pdk_fusion_notice_files)))
+
+$(eval $(call combine-notice-files, \
+			$(tools_notice_file_txt), \
+			$(tools_notice_file_html), \
+			"Notices for files contained in the tools directory:", \
+			$(HOST_OUT_NOTICE_FILES), \
+			$(ALL_DEFAULT_INSTALLED_MODULES)))
+
+# Install the html file at /system/etc/NOTICE.html.gz.
+# This is not ideal, but this is very late in the game, after a lot of
+# the module processing has already been done -- in fact, we used the
+# fact that all that has been done to get the list of modules that we
+# need notice files for.
+$(target_notice_file_html_gz): $(target_notice_file_html) | $(MINIGZIP)
+	$(hide) $(MINIGZIP) -9 < $< > $@
+installed_notice_html_gz := $(TARGET_OUT)/etc/NOTICE.html.gz
+$(installed_notice_html_gz): $(target_notice_file_html_gz) | $(ACP)
+	$(copy-file-to-target)
+
+# if we've been run my mm, mmm, etc, don't reinstall this every time
+ifeq ($(ONE_SHOT_MAKEFILE),)
+ALL_DEFAULT_INSTALLED_MODULES += $(installed_notice_html_gz)
+endif
+endif  # TARGET_BUILD_APPS
+
+# The kernel isn't really a module, so to get its module file in there, we
+# make the target NOTICE files depend on this particular file too, which will
+# then be in the right directory for the find in combine-notice-files to work.
+$(kernel_notice_file): \
+	    $(BUILD_SYSTEM)/LINUX_KERNEL_COPYING \
+	    | $(ACP)
+	@echo Copying: $@
+	$(hide) mkdir -p $(dir $@)
+	$(hide) $(ACP) $< $@
+
+
+# -----------------------------------------------------------------
+# Build a keystore with the authorized keys in it, used to verify the
+# authenticity of downloaded OTA packages.
+#
+# This rule adds to ALL_DEFAULT_INSTALLED_MODULES, so it needs to come
+# before the rules that use that variable to build the image.
+ALL_DEFAULT_INSTALLED_MODULES += $(TARGET_OUT_ETC)/security/otacerts.zip
+$(TARGET_OUT_ETC)/security/otacerts.zip: KEY_CERT_PAIR := $(DEFAULT_KEY_CERT_PAIR)
+$(TARGET_OUT_ETC)/security/otacerts.zip: $(addsuffix .x509.pem,$(DEFAULT_KEY_CERT_PAIR)) | $(ZIPTIME)
+	$(hide) rm -f $@
+	$(hide) mkdir -p $(dir $@)
+	$(hide) zip -qjX $@ $<
+	$(remove-timestamps-from-package)
+
+# Carry the public key for update_engine if it's a non-Brillo target that
+# uses the AB updater. We use the same key as otacerts but in RSA public key
+# format.
+ifeq ($(AB_OTA_UPDATER),true)
+ifeq ($(BRILLO),)
+ALL_DEFAULT_INSTALLED_MODULES += $(TARGET_OUT_ETC)/update_engine/update-payload-key.pub.pem
+$(TARGET_OUT_ETC)/update_engine/update-payload-key.pub.pem: $(addsuffix .x509.pem,$(DEFAULT_KEY_CERT_PAIR))
+	$(hide) rm -f $@
+	$(hide) mkdir -p $(dir $@)
+	$(hide) openssl x509 -pubkey -noout -in $< > $@
+
+ALL_DEFAULT_INSTALLED_MODULES += $(TARGET_RECOVERY_ROOT_OUT)/etc/update_engine/update-payload-key.pub.pem
+$(TARGET_RECOVERY_ROOT_OUT)/etc/update_engine/update-payload-key.pub.pem: $(TARGET_OUT_ETC)/update_engine/update-payload-key.pub.pem
+	$(hide) cp -f $< $@
+endif
+endif
+
+.PHONY: otacerts
+otacerts: $(TARGET_OUT_ETC)/security/otacerts.zip
+
+
+# #################################################################
+# Targets for user images
+# #################################################################
+
+INTERNAL_USERIMAGES_EXT_VARIANT :=
+ifeq ($(TARGET_USERIMAGES_USE_EXT2),true)
+INTERNAL_USERIMAGES_USE_EXT := true
+INTERNAL_USERIMAGES_EXT_VARIANT := ext2
+else
+ifeq ($(TARGET_USERIMAGES_USE_EXT3),true)
+INTERNAL_USERIMAGES_USE_EXT := true
+INTERNAL_USERIMAGES_EXT_VARIANT := ext3
+else
+ifeq ($(TARGET_USERIMAGES_USE_EXT4),true)
+INTERNAL_USERIMAGES_USE_EXT := true
+INTERNAL_USERIMAGES_EXT_VARIANT := ext4
+ifeq ($(MTK_NAND_MTK_FTL_SUPPORT),yes)
+define generate-mtftl-prop-dictionary
+$(hide) echo "mtftl_support=yes"                                                >> $(1)
+$(hide) echo "pagesize=$(BOARD_MTFTL_MIN_IO_SIZE)"                              >> $(1)
+$(hide) echo "vid_offset=$(BOARD_MTFTL_VID_HDR_OFFSET)"                         >> $(1)
+$(hide) echo "lebsize=$(BOARD_MTFTL_LOGICAL_ERASEBLOCK_SIZE)"                   >> $(1)
+$(hide) echo "system_cnt=$(BOARD_MTFTL_ANDROID_MAX_LOGICAL_ERASEBLOCK_COUNT)"   >> $(1)
+$(hide) echo "userdata_cnt=$(BOARD_MTFTL_USRDATA_MAX_LOGICAL_ERASEBLOCK_COUNT)" >> $(1)
+$(hide) echo "blocksize=$(BOARD_FLASH_BLOCK_SIZE)"                              >> $(1)
+$(hide) echo "userdata_ini=$(PRODUCT_OUT)/ubi_usrdata.ini"                      >> $(1)
+$(hide) echo "system_ini=$(PRODUCT_OUT)/ubi_android.ini"                        >> $(1)
+endef
+else
+define generate-mtftl-prop-dictionary
+endef
+endif
+endif
+endif
+endif
+ifeq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+INTERNAL_USERIMAGES_EXT_VARIANT := ubifs
+define generate-ubifs-prop-dictionary
+$(hide) echo "pagesize=$(BOARD_UBIFS_MIN_IO_SIZE)"                              >> $(1)
+$(hide) echo "vid_offset=$(BOARD_UBIFS_VID_HDR_OFFSET)"                         >> $(1)
+$(hide) echo "lebsize=$(BOARD_UBIFS_LOGICAL_ERASEBLOCK_SIZE)"                   >> $(1)
+$(hide) echo "system_cnt=$(BOARD_UBIFS_ANDROID_MAX_LOGICAL_ERASEBLOCK_COUNT)"   >> $(1)
+$(hide) echo "userdata_cnt=$(BOARD_UBIFS_USRDATA_MAX_LOGICAL_ERASEBLOCK_COUNT)" >> $(1)
+$(hide) echo "blocksize=$(BOARD_FLASH_BLOCK_SIZE)"                              >> $(1)
+$(hide) echo "userdata_ini=$(PRODUCT_OUT)/ubi_usrdata.ini"                      >> $(1)
+$(hide) echo "system_ini=$(PRODUCT_OUT)/ubi_android.ini"                        >> $(1)
+endef
+endif
+ifeq ($(MTK_SLC_BUFFER_SUPPORT),yes)
+define generate-mtslc-prop-dictionary
+$(hide) echo "mtslc_support=yes"                                                >> $(1)
+endef
+endif
+
+# These options tell the recovery updater/installer how to mount the partitions writebale.
+# <fstype>=<fstype_opts>[|<fstype_opts>]...
+# fstype_opts := <opt>[,<opt>]...
+#         opt := <name>[=<value>]
+# The following worked on Nexus devices with Kernel 3.1, 3.4, 3.10
+DEFAULT_TARGET_RECOVERY_FSTYPE_MOUNT_OPTIONS := ext4=max_batch_time=0,commit=1,data=ordered,barrier=1,errors=panic,nodelalloc
+
+ifneq (true,$(TARGET_USERIMAGES_SPARSE_EXT_DISABLED))
+  INTERNAL_USERIMAGES_SPARSE_EXT_FLAG := -s
+endif
+
+ifneq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+ifeq ($(INTERNAL_USERIMAGES_USE_EXT),true)
+INTERNAL_USERIMAGES_DEPS := $(SIMG2IMG)
+INTERNAL_USERIMAGES_DEPS += $(MKEXTUSERIMG) $(MAKE_EXT4FS) $(E2FSCK)
+ifeq ($(MTK_NAND_MTK_FTL_SUPPORT),yes)
+INTERNAL_USERIMAGES_DEPS += $(MKFTL) $(UBINIZE)
+endif
+
+ifeq ($(TARGET_USERIMAGES_USE_MNTL),true)
+INTERNAL_USERIMAGES_DEPS += $(MKMNTL)
+endif
+
+ifeq ($(TARGET_USERIMAGES_USE_F2FS),true)
+INTERNAL_USERIMAGES_DEPS += $(MKF2FSUSERIMG) $(MAKE_F2FS)
+endif
+endif
+
+ifneq (true,$(TARGET_USERIMAGES_SPARSE_SQUASHFS_DISABLED))
+  INTERNAL_USERIMAGES_SPARSE_SQUASHFS_FLAG := -s
+endif
+ifneq ($(filter $(BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE) $(BOARD_SYSTEMIMAGE_FILE_SYSTEM_TYPE),squashfs),)
+INTERNAL_USERIMAGES_DEPS += $(MAKE_SQUASHFS) $(MKSQUASHFSUSERIMG) $(IMG2SIMG)
+endif
+else # TARGET_USERIMAGES_USE_UBIFS == true , default ext or yaffs
+INTERNAL_USERIMAGES_DEPS := $(MKUBIFS) $(UBINIZE)
+endif # TARGET_USERIMAGES_USE_UBIFS
+
+INTERNAL_USERIMAGES_BINARY_PATHS := $(sort $(dir $(INTERNAL_USERIMAGES_DEPS)))
+
+ifeq (true,$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VERITY))
+INTERNAL_USERIMAGES_DEPS += $(BUILD_VERITY_TREE) $(APPEND2SIMG) $(VERITY_SIGNER)
+ifeq (true,$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VERITY_FEC))
+INTERNAL_USERIMAGES_DEPS += $(FEC)
+endif
+endif
+
+SELINUX_FC := $(TARGET_ROOT_OUT)/file_contexts.bin
+INTERNAL_USERIMAGES_DEPS += $(SELINUX_FC)
+
+INTERNAL_USERIMAGES_DEPS += $(BLK_ALLOC_TO_BASE_FS)
+
+# $(1): the path of the output dictionary file
+# $(2): additional "key=value" pairs to append to the dictionary file.
+define generate-userimage-prop-dictionary
+$(if $(INTERNAL_USERIMAGES_EXT_VARIANT),$(hide) echo "fs_type=$(INTERNAL_USERIMAGES_EXT_VARIANT)" >> $(1))
+$(if $(BOARD_SYSTEMIMAGE_PARTITION_SIZE),$(hide) echo "system_size=$(BOARD_SYSTEMIMAGE_PARTITION_SIZE)" >> $(1))
+$(if $(BOARD_SYSTEMIMAGE_FILE_SYSTEM_TYPE),$(hide) echo "system_fs_type=$(BOARD_SYSTEMIMAGE_FILE_SYSTEM_TYPE)" >> $(1))
+$(if $(BOARD_SYSTEMIMAGE_JOURNAL_SIZE),$(hide) echo "system_journal_size=$(BOARD_SYSTEMIMAGE_JOURNAL_SIZE)" >> $(1))
+$(if $(BOARD_HAS_EXT4_RESERVED_BLOCKS),$(hide) echo "has_ext4_reserved_blocks=$(BOARD_HAS_EXT4_RESERVED_BLOCKS)" >> $(1))
+$(if $(BOARD_SYSTEMIMAGE_SQUASHFS_COMPRESSOR),$(hide) echo "system_squashfs_compressor=$(BOARD_SYSTEMIMAGE_SQUASHFS_COMPRESSOR)" >> $(1))
+$(if $(BOARD_SYSTEMIMAGE_SQUASHFS_COMPRESSOR_OPT),$(hide) echo "system_squashfs_compressor_opt=$(BOARD_SYSTEMIMAGE_SQUASHFS_COMPRESSOR_OPT)" >> $(1))
+$(if $(BOARD_SYSTEMIMAGE_SQUASHFS_BLOCK_SIZE),$(hide) echo "system_squashfs_block_size=$(BOARD_SYSTEMIMAGE_SQUASHFS_BLOCK_SIZE)" >> $(1))
+$(if $(BOARD_SYSTEMIMAGE_SQUASHFS_DISABLE_4K_ALIGN),$(hide) echo "system_squashfs_disable_4k_align=$(BOARD_SYSTEMIMAGE_SQUASHFS_DISABLE_4K_ALIGN)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_BASE_FS_PATH),$(hide) echo "system_base_fs_file=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_BASE_FS_PATH)" >> $(1))
+$(if $(BOARD_USERDATAIMAGE_FILE_SYSTEM_TYPE),$(hide) echo "userdata_fs_type=$(BOARD_USERDATAIMAGE_FILE_SYSTEM_TYPE)" >> $(1))
+$(if $(BOARD_USERDATAIMAGE_PARTITION_SIZE),$(hide) echo "userdata_size=$(BOARD_USERDATAIMAGE_PARTITION_SIZE)" >> $(1))
+$(if $(BOARD_CUSTOMIMAGE_PARTITION_SIZE),$(hide) echo "custom_size=$(BOARD_CUSTOMIMAGE_PARTITION_SIZE)" >> $(1))
+$(if $(BOARD_CACHEIMAGE_FILE_SYSTEM_TYPE),$(hide) echo "cache_fs_type=$(BOARD_CACHEIMAGE_FILE_SYSTEM_TYPE)" >> $(1))
+$(if $(BOARD_CACHEIMAGE_PARTITION_SIZE),$(hide) echo "cache_size=$(BOARD_CACHEIMAGE_PARTITION_SIZE)" >> $(1))
+$(if $(BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE),$(hide) echo "vendor_fs_type=$(BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE)" >> $(1))
+$(if $(BOARD_VENDORIMAGE_PARTITION_SIZE),$(hide) echo "vendor_size=$(BOARD_VENDORIMAGE_PARTITION_SIZE)" >> $(1))
+$(if $(BOARD_VENDORIMAGE_JOURNAL_SIZE),$(hide) echo "vendor_journal_size=$(BOARD_VENDORIMAGE_JOURNAL_SIZE)" >> $(1))
+$(if $(BOARD_VENDORIMAGE_SQUASHFS_COMPRESSOR),$(hide) echo "vendor_squashfs_compressor=$(BOARD_VENDORIMAGE_SQUASHFS_COMPRESSOR)" >> $(1))
+$(if $(BOARD_VENDORIMAGE_SQUASHFS_COMPRESSOR_OPT),$(hide) echo "vendor_squashfs_compressor_opt=$(BOARD_VENDORIMAGE_SQUASHFS_COMPRESSOR_OPT)" >> $(1))
+$(if $(BOARD_VENDORIMAGE_SQUASHFS_BLOCK_SIZE),$(hide) echo "vendor_squashfs_block_size=$(BOARD_VENDORIMAGE_SQUASHFS_BLOCK_SIZE)" >> $(1))
+$(if $(BOARD_VENDORIMAGE_SQUASHFS_DISABLE_4K_ALIGN),$(hide) echo "vendor_squashfs_disable_4k_align=$(BOARD_VENDORIMAGE_SQUASHFS_DISABLE_4K_ALIGN)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VENDOR_BASE_FS_PATH),$(hide) echo "vendor_base_fs_file=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VENDOR_BASE_FS_PATH)" >> $(1))
+$(if $(BOARD_OEMIMAGE_PARTITION_SIZE),$(hide) echo "oem_size=$(BOARD_OEMIMAGE_PARTITION_SIZE)" >> $(1))
+$(if $(BOARD_OEMIMAGE_JOURNAL_SIZE),$(hide) echo "oem_journal_size=$(BOARD_OEMIMAGE_JOURNAL_SIZE)" >> $(1))
+$(if $(INTERNAL_USERIMAGES_SPARSE_EXT_FLAG),$(hide) echo "extfs_sparse_flag=$(INTERNAL_USERIMAGES_SPARSE_EXT_FLAG)" >> $(1))
+$(if $(INTERNAL_USERIMAGES_SPARSE_SQUASHFS_FLAG),$(hide) echo "squashfs_sparse_flag=$(INTERNAL_USERIMAGES_SPARSE_SQUASHFS_FLAG)" >> $(1))
+$(hide) echo "selinux_fc=$(SELINUX_FC)" >> $(1)
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_BOOT_SIGNER),$(hide) echo "boot_signer=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_BOOT_SIGNER)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VERITY),$(hide) echo "verity=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VERITY)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VERITY),$(hide) echo "verity_key=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VERITY),$(hide) echo "verity_signer_cmd=$(notdir $(VERITY_SIGNER))" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VERITY_FEC),$(hide) echo "verity_fec=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VERITY_FEC)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_VERITY_PARTITION),$(hide) echo "system_verity_block_device=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_VERITY_PARTITION)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VENDOR_VERITY_PARTITION),$(hide) echo "vendor_verity_block_device=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VENDOR_VERITY_PARTITION)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VBOOT),$(hide) echo "vboot=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VBOOT)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VBOOT),$(hide) echo "vboot_key=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_KEY)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VBOOT),$(hide) echo "vboot_subkey=$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_SUBKEY)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VBOOT),$(hide) echo "futility=$(FUTILITY)" >> $(1))
+$(if $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VBOOT),$(hide) echo "vboot_signer_cmd=$(VBOOT_SIGNER)" >> $(1))
+$(if $(filter true,$(BOARD_USES_RECOVERY_AS_BOOT)),\
+    $(hide) echo "recovery_as_boot=true" >> $(1))
+$(if $(filter true,$(BOARD_BUILD_SYSTEM_ROOT_IMAGE)),\
+    $(hide) echo "system_root_image=true" >> $(1);\
+    echo "ramdisk_dir=$(TARGET_ROOT_OUT)" >> $(1))
+$(if $(2),$(hide) $(foreach kv,$(2),echo "$(kv)" >> $(1);))
+endef
+
+# -----------------------------------------------------------------
+# Recovery image
+
+# Recovery image exists if we are building recovery, or building recovery as boot.
+ifneq (,$(INSTALLED_RECOVERYIMAGE_TARGET)$(filter true,$(BOARD_USES_RECOVERY_AS_BOOT)))
+
+INTERNAL_RECOVERYIMAGE_FILES := $(filter $(TARGET_RECOVERY_OUT)/%, \
+    $(ALL_DEFAULT_INSTALLED_MODULES))
+
+#tonykuo
+ifeq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+recovery_ubiformat := $(call intermediates-dir-for,EXECUTABLES,ubiformat_static)/ubiformat_static
+endif
+
+recovery_initrc := $(call include-path-for, recovery)/etc/init.rc
+recovery_sepolicy := $(call intermediates-dir-for,ETC,sepolicy.recovery)/sepolicy.recovery
+recovery_kernel := $(INSTALLED_KERNEL_TARGET) # same as a non-recovery system
+recovery_ramdisk := $(PRODUCT_OUT)/ramdisk-recovery.img
+recovery_build_prop := $(intermediate_system_build_prop)
+recovery_resources_common := $(call include-path-for, recovery)/res
+recovery_ramdisk_bthdr := $(PRODUCT_OUT)/ramdisk-recovery-bthdr.img
+
+# Set recovery_density to the density bucket of the device.
+recovery_density := unknown
+ifneq (,$(PRODUCT_AAPT_PREF_CONFIG))
+# If PRODUCT_AAPT_PREF_CONFIG includes a dpi bucket, then use that value.
+recovery_density := $(filter %dpi,$(PRODUCT_AAPT_PREF_CONFIG))
+else
+# Otherwise, use the default medium density.
+recovery_density := mdpi
+endif
+
+ifeq ($(MTK_RECOVERY_MEDIUM_RES),yes)
+recovery_density := mdpi
+endif
+
+ifneq (,$(wildcard $(recovery_resources_common)-$(recovery_density)))
+recovery_resources_common := $(recovery_resources_common)-$(recovery_density)
+else
+recovery_resources_common := $(recovery_resources_common)-xhdpi
+endif
+
+# Select the 18x32 font on high-density devices (xhdpi and up); and
+# the 12x22 font on other devices.  Note that the font selected here
+# can be overridden for a particular device by putting a font.png in
+# its private recovery resources.
+
+ifneq (,$(filter xxxhdpi 560dpi xxhdpi 400dpi xhdpi,$(recovery_density)))
+recovery_font := $(call include-path-for, recovery)/fonts/18x32.png
+else
+recovery_font := $(call include-path-for, recovery)/fonts/12x22.png
+endif
+
+ifndef TARGET_PRIVATE_RES_DIRS
+TARGET_PRIVATE_RES_DIRS := $(wildcard $(TARGET_DEVICE_DIR)/recovery/res)
+endif
+recovery_resource_deps := $(shell find $(recovery_resources_common) \
+  $(TARGET_PRIVATE_RES_DIRS) -type f)
+ifdef TARGET_RECOVERY_FSTAB
+recovery_fstab := $(TARGET_RECOVERY_FSTAB)
+else
+recovery_fstab := $(strip $(wildcard $(TARGET_DEVICE_DIR)/recovery.fstab))
+endif
+ifdef TARGET_RECOVERY_WIPE
+recovery_wipe := $(TARGET_RECOVERY_WIPE)
+else
+recovery_wipe :=
+endif
+
+# Prior to A/B update, we used to have:
+#   boot.img + recovery-from-boot.p + recovery-resource.dat = recovery.img.
+# recovery-resource.dat is needed only if we carry a patch of the boot and
+# recovery images and invoke install-recovery.sh on the first boot post an
+# OTA update.
+#
+# We no longer need that if one of the following conditions holds:
+#   a) We carry a full copy of the recovery image
+#      (BOARD_USES_FULL_RECOVERY_IMAGE = true);
+#   b) We build a single image that contains boot and recovery both
+#      (BOARD_USES_RECOVERY_AS_BOOT = true).
+
+ifeq (,$(filter true, $(BOARD_USES_FULL_RECOVERY_IMAGE) $(BOARD_USES_RECOVERY_AS_BOOT)))
+# Named '.dat' so we don't attempt to use imgdiff for patching it.
+RECOVERY_RESOURCE_ZIP := $(TARGET_OUT)/etc/recovery-resource.dat
+else
+RECOVERY_RESOURCE_ZIP :=
+endif
+
+ifeq ($(TARGET_PRIVATE_RES_DIRS),)
+  $(info No private recovery resources for TARGET_DEVICE $(TARGET_DEVICE))
+endif
+
+ifeq ($(recovery_fstab),)
+  $(info No recovery.fstab for TARGET_DEVICE $(TARGET_DEVICE))
+endif
+
+INTERNAL_RECOVERYIMAGE_ARGS := \
+	$(addprefix --second ,$(INSTALLED_2NDBOOTLOADER_TARGET)) \
+	--kernel $(recovery_kernel) \
+	--ramdisk $(recovery_ramdisk)
+
+INTERNAL_RECOVERYIMAGE_BTHDR_ARGS := \
+	$(addprefix --second ,$(INSTALLED_2NDBOOTLOADER_TARGET)) \
+	--kernel $(recovery_kernel) \
+	--ramdisk $(recovery_ramdisk_bthdr)
+
+# Assumes this has already been stripped
+ifdef BOARD_KERNEL_CMDLINE
+  INTERNAL_RECOVERYIMAGE_ARGS += --cmdline "$(BOARD_KERNEL_CMDLINE)"
+endif
+ifdef BOARD_KERNEL_BASE
+  INTERNAL_RECOVERYIMAGE_ARGS += --base $(BOARD_KERNEL_BASE)
+endif
+
+ifdef BOARD_RAMDISK_OFFSET
+  INTERNAL_RECOVERYIMAGE_ARGS += --ramdisk_offset $(BOARD_RAMDISK_OFFSET)
+endif
+ifdef BOARD_KERNEL_OFFSET
+  INTERNAL_RECOVERYIMAGE_ARGS += --kernel_offset $(BOARD_KERNEL_OFFSET)
+endif
+ifdef BOARD_TAGS_OFFSET
+  INTERNAL_RECOVERYIMAGE_ARGS += --tags_offset $(BOARD_TAGS_OFFSET)
+endif
+
+BOARD_KERNEL_PAGESIZE := $(strip $(BOARD_KERNEL_PAGESIZE))
+ifdef BOARD_KERNEL_PAGESIZE
+  INTERNAL_RECOVERYIMAGE_ARGS += --pagesize $(BOARD_KERNEL_PAGESIZE)
+endif
+
+ifdef CUSTOM_BUILD_VERNO
+  INTERNAL_RECOVERYIMAGE_ARGS += --board $(CUSTOM_BUILD_VERNO_HDR)
+endif
+
+# Keys authorized to sign OTA packages this build will accept.  The
+# build always uses dev-keys for this; release packaging tools will
+# substitute other keys for this one.
+OTA_PUBLIC_KEYS := $(DEFAULT_SYSTEM_DEV_CERTIFICATE).x509.pem
+
+# Generate a file containing the keys that will be read by the
+# recovery binary.
+RECOVERY_INSTALL_OTA_KEYS := \
+	$(call intermediates-dir-for,PACKAGING,ota_keys)/keys
+DUMPKEY_JAR := $(HOST_OUT_JAVA_LIBRARIES)/dumpkey.jar
+$(RECOVERY_INSTALL_OTA_KEYS): PRIVATE_OTA_PUBLIC_KEYS := $(OTA_PUBLIC_KEYS)
+$(RECOVERY_INSTALL_OTA_KEYS): extra_keys := $(patsubst %,%.x509.pem,$(PRODUCT_EXTRA_RECOVERY_KEYS))
+$(RECOVERY_INSTALL_OTA_KEYS): $(OTA_PUBLIC_KEYS) $(DUMPKEY_JAR) $(extra_keys)
+	@echo "DumpPublicKey: $@ <= $(PRIVATE_OTA_PUBLIC_KEYS) $(extra_keys)"
+	@rm -rf $@
+	@mkdir -p $(dir $@)
+	java -jar $(DUMPKEY_JAR) $(PRIVATE_OTA_PUBLIC_KEYS) $(extra_keys) > $@
+
+RECOVERYIMAGE_ID_FILE := $(PRODUCT_OUT)/recovery.id
+# $(1): output file
+define build-recoveryimage-target
+  @echo ----- Making recovery image ------
+  $(hide) mkdir -p $(TARGET_RECOVERY_OUT)
+  $(hide) mkdir -p $(TARGET_RECOVERY_ROOT_OUT)/etc $(TARGET_RECOVERY_ROOT_OUT)/sdcard $(TARGET_RECOVERY_ROOT_OUT)/tmp
+  @echo Copying baseline ramdisk...
+  $(hide) rsync -a --exclude=etc --exclude=sdcard $(IGNORE_CACHE_LINK) $(TARGET_ROOT_OUT) $(TARGET_RECOVERY_OUT) # "cp -Rf" fails to overwrite broken symlinks on Mac.
+  @echo Modifying ramdisk contents...
+  $(hide) rm -f $(TARGET_RECOVERY_ROOT_OUT)/init*.rc
+  $(if $(filter true,$(TARGET_USERIMAGES_USE_UBIFS)), \
+    $(hide) cp -f $(recovery_ubiformat) $(TARGET_RECOVERY_ROOT_OUT)/sbin/ubiformat)
+  $(hide) cp -f $(recovery_initrc) $(TARGET_RECOVERY_ROOT_OUT)/
+  $(hide) rm -f $(TARGET_RECOVERY_ROOT_OUT)/sepolicy
+  $(hide) cp -f $(recovery_sepolicy) $(TARGET_RECOVERY_ROOT_OUT)/sepolicy
+  $(hide) cp $(TARGET_ROOT_OUT)/init.recovery.*.rc $(TARGET_RECOVERY_ROOT_OUT)/ || true # Ignore error when the src file doesn't exist.
+  $(hide) mkdir -p $(TARGET_RECOVERY_ROOT_OUT)/res
+  $(hide) rm -rf $(TARGET_RECOVERY_ROOT_OUT)/res/*
+  $(hide) cp -rf $(recovery_resources_common)/* $(TARGET_RECOVERY_ROOT_OUT)/res
+  $(hide) cp -f $(recovery_font) $(TARGET_RECOVERY_ROOT_OUT)/res/images/font.png
+  $(if $(filter yes,$(TRUSTONIC_TEE_SUPPORT)), \
+    $(hide) rm -f $(TARGET_RECOVERY_ROOT_OUT)/system/bin/mcDriverDaemon
+    $(hide) mkdir -p $(TARGET_RECOVERY_ROOT_OUT)/system/bin; cp -f $(call intermediates-dir-for,EXECUTABLES,mcDriverDaemon)/mcDriverDaemon $(TARGET_RECOVERY_ROOT_OUT)/system/bin
+    $(hide) rm -fr $(TARGET_RECOVERY_ROOT_OUT)/system/vendor/app/mcRegistry
+    $(hide) mkdir -p $(TARGET_RECOVERY_ROOT_OUT)/system/vendor/app/mcRegistry; cp -f `find $(TARGET_OUT_VENDOR_APPS)/mcRegistry -type f \( -name "*.drbin" -or -name "*.tlbin" \) -print` $(TARGET_RECOVERY_ROOT_OUT)/system/vendor/app/mcRegistry)
+  $(hide) rm -f $(TARGET_RECOVERY_ROOT_OUT)/system/vendor/app/mcRegistry/*
+  $(hide) rm -f $(TARGET_RECOVERY_ROOT_OUT)/sbin/meta_tst
+  $(hide) $(foreach item,$(TARGET_PRIVATE_RES_DIRS), \
+    cp -rf $(item) $(TARGET_RECOVERY_ROOT_OUT)/$(newline))
+  $(hide) $(foreach item,$(recovery_fstab), \
+    cp -f $(item) $(TARGET_RECOVERY_ROOT_OUT)/etc/recovery.fstab)
+  $(if $(strip $(recovery_wipe)), \
+    $(hide) cp -f $(recovery_wipe) $(TARGET_RECOVERY_ROOT_OUT)/etc/recovery.wipe)
+  $(hide) cp -f $(RECOVERY_INSTALL_OTA_KEYS) $(TARGET_RECOVERY_ROOT_OUT)/res/keys
+  $(hide) cat $(INSTALLED_DEFAULT_PROP_TARGET) $(recovery_build_prop) \
+          > $(TARGET_RECOVERY_ROOT_OUT)/default.prop
+  $(BOARD_RECOVERY_IMAGE_PREPARE)
+  $(if $(filter true,$(BOARD_BUILD_SYSTEM_ROOT_IMAGE)), \
+    $(hide) mkdir -p $(TARGET_RECOVERY_ROOT_OUT)/system_root; \
+            rm -rf $(TARGET_RECOVERY_ROOT_OUT)/system; \
+            ln -sf /system_root/system $(TARGET_RECOVERY_ROOT_OUT)/system) # Mount the system_root_image to /system_root and symlink /system.
+  $(hide) $(MKBOOTFS) -d $(TARGET_OUT) $(TARGET_RECOVERY_ROOT_OUT) | $(MINIGZIP) > $(recovery_ramdisk)
+  $(if $(filter yes,$(MTK_HEADER_SUPPORT)), \
+    $(hide) cp -f $(recovery_ramdisk) $(recovery_ramdisk_bthdr)
+    $(hide) $(HOST_OUT_EXECUTABLES)/mkimage $(recovery_ramdisk_bthdr) ROOTFS 0xffffffff > $(PRODUCT_OUT)/ramdisk_recovery_bthdr.img
+    $(hide) mv $(PRODUCT_OUT)/ramdisk_recovery_bthdr.img $(recovery_ramdisk_bthdr)
+    $(hide) $(HOST_OUT_EXECUTABLES)/mkimage $(recovery_ramdisk) RECOVERY 0xffffffff > $(PRODUCT_OUT)/ramdisk_recovery.img
+    $(hide) mv $(PRODUCT_OUT)/ramdisk_recovery.img $(recovery_ramdisk))
+  $(if $(filter true,$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VBOOT)), \
+    $(hide) $(MKBOOTIMG) $(INTERNAL_RECOVERYIMAGE_ARGS) $(INTERNAL_MKBOOTIMG_VERSION_ARGS) $(BOARD_MKBOOTIMG_ARGS) --output $(1).unsigned, \
+    $(hide) $(MKBOOTIMG) $(INTERNAL_RECOVERYIMAGE_ARGS) $(INTERNAL_MKBOOTIMG_VERSION_ARGS) $(BOARD_MKBOOTIMG_ARGS) --output $(1) --id > $(RECOVERYIMAGE_ID_FILE))
+  $(if $(filter true,$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_BOOT_SIGNER)),\
+    $(if $(filter true,$(BOARD_USES_RECOVERY_AS_BOOT)),\
+      $(BOOT_SIGNER) /boot $(1) $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).pk8 $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).x509.pem $(1),\
+      $(BOOT_SIGNER) /recovery $(1) $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).pk8 $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).x509.pem $(1)\
+    )\
+  )
+  $(if $(filter true,$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VBOOT)), \
+    $(VBOOT_SIGNER) $(FUTILITY) $(1).unsigned $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_KEY).vbpubk $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_KEY).vbprivk $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_SUBKEY).vbprivk $(1).keyblock $(1))
+  $(if $(filter true,$(BOARD_USES_RECOVERY_AS_BOOT)), \
+    $(hide) $(call assert-max-image-size,$(1),$(BOARD_BOOTIMAGE_PARTITION_SIZE)), \
+    $(hide) $(call assert-max-image-size,$(1),$(BOARD_RECOVERYIMAGE_PARTITION_SIZE)))
+  $(if $(filter yes,$(MTK_HEADER_SUPPORT)), \
+    $(hide) $(MKBOOTIMG) $(INTERNAL_RECOVERYIMAGE_BTHDR_ARGS) $(BOARD_MKBOOTIMG_ARGS) --output $(PRODUCT_OUT)/recovery_bthdr.img
+    $(hide) $(call assert-max-image-size,$(PRODUCT_OUT)/recovery_bthdr.img,$(BOARD_RECOVERYIMAGE_PARTITION_SIZE)))
+  @echo ----- Made recovery image: $(1) --------
+endef
+
+ifeq ($(BOARD_USES_RECOVERY_AS_BOOT),true)
+ifeq (true,$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_BOOT_SIGNER))
+$(INSTALLED_BOOTIMAGE_TARGET) : $(BOOT_SIGNER)
+endif
+ifeq (true,$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VBOOT))
+$(INSTALLED_BOOTIMAGE_TARGET) : $(VBOOT_SIGNER)
+endif
+$(INSTALLED_BOOTIMAGE_TARGET): $(MKBOOTFS) $(MKBOOTIMG) $(MINIGZIP) \
+		$(INSTALLED_RAMDISK_TARGET) \
+		$(INTERNAL_RECOVERYIMAGE_FILES) \
+		$(recovery_initrc) $(recovery_sepolicy) $(recovery_kernel) \
+		$(INSTALLED_2NDBOOTLOADER_TARGET) \
+		$(recovery_build_prop) $(recovery_resource_deps) \
+		$(recovery_fstab) \
+		$(RECOVERY_INSTALL_OTA_KEYS)
+		$(call pretty,"Target boot image from recovery: $@")
+		$(call build-recoveryimage-target, $@)
+endif
+
+$(INSTALLED_RECOVERYIMAGE_TARGET): $(MKBOOTFS) $(MKBOOTIMG) $(MINIGZIP) \
+		$(INSTALLED_RAMDISK_TARGET) \
+		$(INSTALLED_BOOTIMAGE_TARGET) \
+		$(INTERNAL_RECOVERYIMAGE_FILES) \
+		$(recovery_initrc) $(recovery_sepolicy) $(recovery_kernel) \
+		$(INSTALLED_2NDBOOTLOADER_TARGET) \
+		$(recovery_build_prop) $(recovery_resource_deps) \
+		$(recovery_fstab) \
+		$(RECOVERY_INSTALL_OTA_KEYS)
+ifeq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+$(INSTALLED_RECOVERYIMAGE_TARGET): $(recovery_ubiformat)
+endif
+		$(call build-recoveryimage-target, $@)
+
+ifdef RECOVERY_RESOURCE_ZIP
+$(RECOVERY_RESOURCE_ZIP): $(INSTALLED_RECOVERYIMAGE_TARGET) | $(ZIPTIME)
+	$(hide) mkdir -p $(dir $@)
+	$(hide) find $(TARGET_RECOVERY_ROOT_OUT)/res -type f | sort | zip -0qrjX $@ -@
+	$(remove-timestamps-from-package)
+endif
+
+.PHONY: recoveryimage-nodeps
+recoveryimage-nodeps:
+	@echo "make $@: ignoring dependencies"
+	$(call build-recoveryimage-target, $(INSTALLED_RECOVERYIMAGE_TARGET))
+
+else # INSTALLED_RECOVERYIMAGE_TARGET not defined
+RECOVERY_RESOURCE_ZIP :=
+endif
+
+.PHONY: recoveryimage
+recoveryimage: $(INSTALLED_RECOVERYIMAGE_TARGET) $(RECOVERY_RESOURCE_ZIP)
+
+ifeq ($(BOARD_NAND_PAGE_SIZE),)
+BOARD_NAND_PAGE_SIZE := 2048
+endif
+
+ifeq ($(BOARD_NAND_SPARE_SIZE),)
+BOARD_NAND_SPARE_SIZE := 64
+endif
+
+# -----------------------------------------------------------------
+# system image
+#
+# Remove overridden packages from $(ALL_PDK_FUSION_FILES)
+PDK_FUSION_SYSIMG_FILES := \
+    $(filter-out $(foreach p,$(overridden_packages),$(p) %/$(p).apk), \
+        $(ALL_PDK_FUSION_FILES))
+
+INTERNAL_SYSTEMIMAGE_FILES := $(filter $(TARGET_OUT)/%, \
+    $(ALL_PREBUILT) \
+    $(ALL_GENERATED_SOURCES) \
+    $(ALL_DEFAULT_INSTALLED_MODULES) \
+    $(PDK_FUSION_SYSIMG_FILES) \
+    $(RECOVERY_RESOURCE_ZIP))
+
+
+FULL_SYSTEMIMAGE_DEPS := $(INTERNAL_SYSTEMIMAGE_FILES) $(INTERNAL_USERIMAGES_DEPS)
+# -----------------------------------------------------------------
+# installed file list
+# Depending on anything that $(BUILT_SYSTEMIMAGE) depends on.
+# We put installed-files.txt ahead of image itself in the dependency graph
+# so that we can get the size stat even if the build fails due to too large
+# system image.
+INSTALLED_FILES_FILE := $(PRODUCT_OUT)/installed-files.txt
+$(INSTALLED_FILES_FILE): $(FULL_SYSTEMIMAGE_DEPS)
+	@echo Installed file list: $@
+	@mkdir -p $(dir $@)
+	@rm -f $@
+	$(hide) build/tools/fileslist.py $(TARGET_OUT) > $@
+
+.PHONY: installed-file-list
+installed-file-list: $(INSTALLED_FILES_FILE)
+
+$(call dist-for-goals, sdk win_sdk sdk_addon, $(INSTALLED_FILES_FILE))
+
+systemimage_intermediates := \
+    $(call intermediates-dir-for,PACKAGING,systemimage)
+BUILT_SYSTEMIMAGE := $(systemimage_intermediates)/system.img
+
+# Create symlink /system/vendor to /vendor if necessary.
+ifdef BOARD_USES_VENDORIMAGE
+define create-system-vendor-symlink
+$(hide) if [ -d $(TARGET_OUT)/vendor ] && [ ! -h $(TARGET_OUT)/vendor ]; then \
+  echo 'Non-symlink $(TARGET_OUT)/vendor detected!' 1>&2; \
+  echo 'You cannot install files to $(TARGET_OUT)/vendor while building a separate vendor.img!' 1>&2; \
+  exit 1; \
+fi
+$(hide) ln -sf /vendor $(TARGET_OUT)/vendor
+endef
+else
+define create-system-vendor-symlink
+endef
+endif
+
+ifneq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+# $(1): output file
+define build-systemimage-target
+  @echo "Target system fs image: $(1)"
+  $(call create-system-vendor-symlink)
+  @mkdir -p $(dir $(1)) $(systemimage_intermediates) && rm -rf $(systemimage_intermediates)/system_image_info.txt
+  $(call generate-userimage-prop-dictionary, $(systemimage_intermediates)/system_image_info.txt, \
+      skip_fsck=true)
+  $(call generate-mtftl-prop-dictionary, $(systemimage_intermediates)/system_image_info.txt)
+  $(if $(filter $(strip $(MTK_EMULATOR_SUPPORT)),no),
+            python ./build/tools/releasetools/rootcheck.py \
+		$(TARGET_OUT) \
+		$(PRODUCT_OUT)/lk.bin \
+		$(PRODUCT_OUT)/recovery.img \
+		$(PRODUCT_OUT)/boot.img \
+		$(PRODUCT_OUT)/logo.bin \
+		$(TARGET_OUT)/data \
+		$(PRODUCT_OUT)/trustzone.bin,
+            @echo no need rootcheck)
+  $(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH \
+      ./build/tools/releasetools/build_image.py \
+      $(TARGET_OUT) $(systemimage_intermediates)/system_image_info.txt $(1) $(TARGET_OUT) \
+      || ( echo "Out of space? the tree size of $(TARGET_OUT) is (MB): " 1>&2 ;\
+           du -sm $(TARGET_OUT) 1>&2;\
+           if [ "$(INTERNAL_USERIMAGES_EXT_VARIANT)" == "ext4" ]; then \
+               maxsize=$(BOARD_SYSTEMIMAGE_PARTITION_SIZE); \
+               if [ "$(BOARD_HAS_EXT4_RESERVED_BLOCKS)" == "true" ]; then \
+                   maxsize=$$((maxsize - 4096 * 4096)); \
+               fi; \
+               echo "The max is $$(( maxsize / 1048576 )) MB." 1>&2 ;\
+           else \
+               echo "The max is $$(( $(BOARD_SYSTEMIMAGE_PARTITION_SIZE) / 1048576 )) MB." 1>&2 ;\
+           fi; \
+           mkdir -p $(DIST_DIR); cp $(INSTALLED_FILES_FILE) $(DIST_DIR)/installed-files-rescued.txt; \
+           exit 1 )
+endef
+
+else # TARGET_USERIMAGES_USE_UBIFS == true
+
+## Generate a ubifs image
+define build-systemimage-target
+    @echo "Target system fs ubi image: $(1)"
+    @mkdir -p $(dir $(1))
+    $(if $(filter $(strip $(MTK_EMULATOR_SUPPORT)),no),
+      python ./build/tools/releasetools/rootcheck.py \
+	$(TARGET_OUT) \
+	$(PRODUCT_OUT)/lk.bin \
+	$(PRODUCT_OUT)/recovery.img \
+	$(PRODUCT_OUT)/boot.img \
+	$(PRODUCT_OUT)/logo.bin \
+	$(TARGET_OUT)/data \
+	$(PRODUCT_OUT)/trustzone.bin,
+      @echo no need rootcheck)
+    @mkdir -p $(dir $(1)) $(systemimage_intermediates) && rm -rf $(systemimage_intermediates)/system_image_info.txt
+    $(call generate-userimage-prop-dictionary, $(systemimage_intermediates)/system_image_info.txt, skip_fsck=true)
+    $(call generate-ubifs-prop-dictionary, $(systemimage_intermediates)/system_image_info.txt)
+    $(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH \
+        ./build/tools/releasetools/build_image.py \
+        $(TARGET_OUT) $(systemimage_intermediates)/system_image_info.txt $(1) $(TARGET_OUT)
+endef
+
+endif # TARGET_USERIMAGES_USE_UBIFS
+
+$(BUILT_SYSTEMIMAGE): $(FULL_SYSTEMIMAGE_DEPS) $(INSTALLED_FILES_FILE)
+	$(call build-systemimage-target,$@)
+
+INSTALLED_SYSTEMIMAGE := $(PRODUCT_OUT)/system.img
+SYSTEMIMAGE_SOURCE_DIR := $(TARGET_OUT)
+
+# The system partition needs room for the recovery image as well.  We
+# now store the recovery image as a binary patch using the boot image
+# as the source (since they are very similar).  Generate the patch so
+# we can see how big it's going to be, and include that in the system
+# image size check calculation.
+ifneq ($(INSTALLED_RECOVERYIMAGE_TARGET),)
+ifneq ($(BOARD_USES_FULL_RECOVERY_IMAGE),true)
+intermediates := $(call intermediates-dir-for,PACKAGING,recovery_patch)
+RECOVERY_FROM_BOOT_PATCH := $(intermediates)/recovery-from-boot.p
+$(RECOVERY_FROM_BOOT_PATCH): $(INSTALLED_RECOVERYIMAGE_TARGET) \
+                             $(INSTALLED_BOOTIMAGE_TARGET) \
+			     $(HOST_OUT_EXECUTABLES)/imgdiff \
+	                     $(HOST_OUT_EXECUTABLES)/bsdiff
+	@echo "Construct recovery from boot"
+	mkdir -p $(dir $@)
+	PATH=$(HOST_OUT_EXECUTABLES):$$PATH $(HOST_OUT_EXECUTABLES)/imgdiff $(INSTALLED_BOOTIMAGE_TARGET) $(INSTALLED_RECOVERYIMAGE_TARGET) $@
+	$(hide) $(ACP) $@ $(TARGET_OUT)
+else # $(BOARD_USES_FULL_RECOVERY_IMAGE) == true
+RECOVERY_FROM_BOOT_PATCH := $(INSTALLED_RECOVERYIMAGE_TARGET)
+endif
+endif
+
+
+$(INSTALLED_SYSTEMIMAGE): $(BUILT_SYSTEMIMAGE) $(RECOVERY_FROM_BOOT_PATCH) | $(ACP)
+	@echo "Install system fs image: $@"
+	$(copy-file-to-target)
+	$(hide) $(call assert-max-image-size,$@ $(RECOVERY_FROM_BOOT_PATCH),$(BOARD_SYSTEMIMAGE_PARTITION_SIZE))
+	./addSign
+	./efuseSign.sh
+systemimage: $(INSTALLED_SYSTEMIMAGE)
+
+.PHONY: systemimage-nodeps snod
+systemimage-nodeps snod: $(filter-out systemimage-nodeps snod,$(MAKECMDGOALS)) \
+	            | $(INTERNAL_USERIMAGES_DEPS)
+	@echo "make $@: ignoring dependencies"
+	$(call build-systemimage-target,$(INSTALLED_SYSTEMIMAGE))
+	$(hide) $(call assert-max-image-size,$(INSTALLED_SYSTEMIMAGE),$(BOARD_SYSTEMIMAGE_PARTITION_SIZE))
+
+ifneq (,$(filter systemimage-nodeps snod, $(MAKECMDGOALS)))
+ifeq (true,$(WITH_DEXPREOPT))
+$(warning Warning: with dexpreopt enabled, you may need a full rebuild.)
+endif
+endif
+
+#######
+## system tarball
+define build-systemtarball-target
+  $(call pretty,"Target system fs tarball: $(INSTALLED_SYSTEMTARBALL_TARGET)")
+  $(call create-system-vendor-symlink)
+  $(MKTARBALL) $(FS_GET_STATS) \
+    $(PRODUCT_OUT) system $(PRIVATE_SYSTEM_TAR) \
+    $(INSTALLED_SYSTEMTARBALL_TARGET) $(TARGET_OUT)
+endef
+
+ifndef SYSTEM_TARBALL_FORMAT
+    SYSTEM_TARBALL_FORMAT := bz2
+endif
+
+system_tar := $(PRODUCT_OUT)/system.tar
+INSTALLED_SYSTEMTARBALL_TARGET := $(system_tar).$(SYSTEM_TARBALL_FORMAT)
+$(INSTALLED_SYSTEMTARBALL_TARGET): PRIVATE_SYSTEM_TAR := $(system_tar)
+$(INSTALLED_SYSTEMTARBALL_TARGET): $(FS_GET_STATS) $(INTERNAL_SYSTEMIMAGE_FILES)
+	$(build-systemtarball-target)
+
+.PHONY: systemtarball-nodeps
+systemtarball-nodeps: $(FS_GET_STATS) \
+                      $(filter-out systemtarball-nodeps stnod,$(MAKECMDGOALS))
+	$(build-systemtarball-target)
+
+.PHONY: stnod
+stnod: systemtarball-nodeps
+
+# -----------------------------------------------------------------
+## platform.zip: system, plus other files to be used in PDK fusion build,
+## in a zip file
+##
+## PDK_PLATFORM_ZIP_PRODUCT_BINARIES is used to store specified files to platform.zip.
+## The variable will be typically set from BoardConfig.mk.
+## Files under out dir will be rejected to prevent possible conflicts with other rules.
+pdk_odex_javalibs := $(strip $(foreach m,$(DEXPREOPT.MODULES.JAVA_LIBRARIES),\
+  $(if $(filter $(DEXPREOPT.$(m).INSTALLED),$(ALL_DEFAULT_INSTALLED_MODULES)),$(m))))
+pdk_odex_apps := $(strip $(foreach m,$(DEXPREOPT.MODULES.APPS),\
+  $(if $(filter $(DEXPREOPT.$(m).INSTALLED),$(ALL_DEFAULT_INSTALLED_MODULES)),$(m))))
+pdk_classes_dex := $(strip \
+  $(foreach m,$(pdk_odex_javalibs),$(call intermediates-dir-for,JAVA_LIBRARIES,$(m),,COMMON)/javalib.jar) \
+  $(foreach m,$(pdk_odex_apps),$(call intermediates-dir-for,APPS,$(m))/package.dex.apk))
+
+pdk_odex_config_mk := $(PRODUCT_OUT)/pdk_dexpreopt_config.mk
+$(pdk_odex_config_mk): PRIVATE_JAVA_LIBRARIES := $(pdk_odex_javalibs)
+$(pdk_odex_config_mk): PRIVATE_APPS := $(pdk_odex_apps)
+$(pdk_odex_config_mk) :
+	@echo "PDK odex config makefile: $@"
+	$(hide) mkdir -p $(dir $@)
+	$(hide) echo "# Auto-generated. Do not modify." > $@
+	$(hide) echo "PDK.DEXPREOPT.JAVA_LIBRARIES:=$(PRIVATE_JAVA_LIBRARIES)" >> $@
+	$(hide) echo "PDK.DEXPREOPT.APPS:=$(PRIVATE_APPS)" >> $@
+	$(foreach m,$(PRIVATE_JAVA_LIBRARIES),\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).SRC:=$(patsubst $(OUT_DIR)/%,%,$(call intermediates-dir-for,JAVA_LIBRARIES,$(m),,COMMON)/javalib.jar)" >> $@$(newline)\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).DEX_PREOPT:=$(DEXPREOPT.$(m).DEX_PREOPT)" >> $@$(newline)\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).MULTILIB:=$(DEXPREOPT.$(m).MULTILIB)" >> $@$(newline)\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).DEX_PREOPT_FLAGS:=$(DEXPREOPT.$(m).DEX_PREOPT_FLAGS)" >> $@$(newline)\
+	  )
+	$(foreach m,$(PRIVATE_APPS),\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).SRC:=$(patsubst $(OUT_DIR)/%,%,$(call intermediates-dir-for,APPS,$(m))/package.dex.apk)" >> $@$(newline)\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).DEX_PREOPT:=$(DEXPREOPT.$(m).DEX_PREOPT)" >> $@$(newline)\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).MULTILIB:=$(DEXPREOPT.$(m).MULTILIB)" >> $@$(newline)\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).DEX_PREOPT_FLAGS:=$(DEXPREOPT.$(m).DEX_PREOPT_FLAGS)" >> $@$(newline)\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).PRIVILEGED_MODULE:=$(DEXPREOPT.$(m).PRIVILEGED_MODULE)" >> $@$(newline)\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).PROPRIETARY_MODULE:=$(DEXPREOPT.$(m).PROPRIETARY_MODULE)" >> $@$(newline)\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).TARGET_ARCH:=$(DEXPREOPT.$(m).TARGET_ARCH)" >> $@$(newline)\
+	  $(hide) echo "PDK.DEXPREOPT.$(m).STRIPPED_SRC:=$(patsubst $(PRODUCT_OUT)/%,%,$(DEXPREOPT.$(m).INSTALLED_STRIPPED))" >> $@$(newline)\
+	  )
+
+PDK_PLATFORM_ZIP_PRODUCT_BINARIES := $(filter-out $(OUT_DIR)/%,$(PDK_PLATFORM_ZIP_PRODUCT_BINARIES))
+INSTALLED_PLATFORM_ZIP := $(PRODUCT_OUT)/platform.zip
+
+$(INSTALLED_PLATFORM_ZIP): PRIVATE_DEX_FILES := $(pdk_classes_dex)
+$(INSTALLED_PLATFORM_ZIP): PRIVATE_ODEX_CONFIG := $(pdk_odex_config_mk)
+$(INSTALLED_PLATFORM_ZIP) : $(INTERNAL_SYSTEMIMAGE_FILES) $(pdk_odex_config_mk)
+	$(call pretty,"Platform zip package: $(INSTALLED_PLATFORM_ZIP)")
+	$(hide) rm -f $@
+	$(hide) cd $(dir $@) && zip -qryX $(notdir $@) \
+		$(TARGET_COPY_OUT_SYSTEM) \
+		$(patsubst $(PRODUCT_OUT)/%, %, $(TARGET_OUT_NOTICE_FILES)) \
+		$(addprefix symbols/,$(PDK_SYMBOL_FILES_LIST))
+ifdef BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE
+	$(hide) cd $(dir $@) && zip -qryX $(notdir $@) \
+		$(TARGET_COPY_OUT_VENDOR)
+endif
+ifneq ($(PDK_PLATFORM_JAVA_ZIP_CONTENTS),)
+	$(hide) cd $(OUT_DIR) && zip -qryX $(patsubst $(OUT_DIR)/%,%,$@) $(PDK_PLATFORM_JAVA_ZIP_CONTENTS)
+endif
+ifneq ($(PDK_PLATFORM_ZIP_PRODUCT_BINARIES),)
+	$(hide) zip -qryX $@ $(PDK_PLATFORM_ZIP_PRODUCT_BINARIES)
+endif
+	@# Add dex-preopt files and config.
+	$(if $(PRIVATE_DEX_FILES),$(hide) cd $(OUT_DIR) && zip -qryX $(patsubst $(OUT_DIR)/%,%,$@ $(PRIVATE_DEX_FILES)))
+	$(hide) zip -qryXj $@ $(PRIVATE_ODEX_CONFIG)
+
+.PHONY: platform
+platform: $(INSTALLED_PLATFORM_ZIP)
+
+.PHONY: platform-java
+platform-java: platform
+
+# Dist the platform.zip
+ifneq (,$(filter platform platform-java, $(MAKECMDGOALS)))
+$(call dist-for-goals, platform platform-java, $(INSTALLED_PLATFORM_ZIP))
+endif
+
+
+# -----------------------------------------------------------------
+##begin mediatek add a new custom image
+include build/core/customimage.mk
+##end mediatek add a new custom image
+
+# -----------------------------------------------------------------
+## boot tarball
+define build-boottarball-target
+    $(hide) echo "Target boot fs tarball: $(INSTALLED_BOOTTARBALL_TARGET)"
+    $(hide) mkdir -p $(PRODUCT_OUT)/boot
+    $(hide) cp -f $(INTERNAL_BOOTIMAGE_FILES) $(PRODUCT_OUT)/boot/.
+    $(hide) echo $(BOARD_KERNEL_CMDLINE) > $(PRODUCT_OUT)/boot/cmdline
+    $(hide) $(MKTARBALL) $(FS_GET_STATS) \
+                 $(PRODUCT_OUT) boot $(PRIVATE_BOOT_TAR) \
+                 $(INSTALLED_BOOTTARBALL_TARGET) $(TARGET_OUT)
+endef
+
+ifndef BOOT_TARBALL_FORMAT
+    BOOT_TARBALL_FORMAT := bz2
+endif
+
+boot_tar := $(PRODUCT_OUT)/boot.tar
+INSTALLED_BOOTTARBALL_TARGET := $(boot_tar).$(BOOT_TARBALL_FORMAT)
+$(INSTALLED_BOOTTARBALL_TARGET): PRIVATE_BOOT_TAR := $(boot_tar)
+$(INSTALLED_BOOTTARBALL_TARGET): $(FS_GET_STATS) $(INTERNAL_BOOTIMAGE_FILES)
+	$(build-boottarball-target)
+
+.PHONY: boottarball-nodeps btnod
+boottarball-nodeps btnod: $(FS_GET_STATS) \
+                      $(filter-out boottarball-nodeps btnod,$(MAKECMDGOALS))
+	$(build-boottarball-target)
+
+
+# -----------------------------------------------------------------
+# data partition image
+INTERNAL_USERDATAIMAGE_FILES := \
+    $(filter $(TARGET_OUT_DATA)/%,$(ALL_DEFAULT_INSTALLED_MODULES))
+
+# Don't build userdata.img if it's extfs but no partition size
+skip_userdata.img :=
+ifneq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+ifdef INTERNAL_USERIMAGES_EXT_VARIANT
+ifndef BOARD_USERDATAIMAGE_PARTITION_SIZE
+skip_userdata.img := true
+endif
+endif
+endif
+
+ifneq ($(skip_userdata.img),true)
+userdataimage_intermediates := \
+    $(call intermediates-dir-for,PACKAGING,userdata)
+BUILT_USERDATAIMAGE_TARGET := $(PRODUCT_OUT)/userdata.img
+
+ifneq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+define build-userdataimage-target
+  $(call pretty,"Target userdata fs image: $(INSTALLED_USERDATAIMAGE_TARGET)")
+  @mkdir -p $(TARGET_OUT_DATA)
+  @mkdir -p $(userdataimage_intermediates) && rm -rf $(userdataimage_intermediates)/userdata_image_info.txt
+  $(call generate-userimage-prop-dictionary, $(userdataimage_intermediates)/userdata_image_info.txt, skip_fsck=true)
+  $(call generate-mtftl-prop-dictionary, $(userdataimage_intermediates)/userdata_image_info.txt)
+  $(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH \
+      ./build/tools/releasetools/build_image.py \
+      $(TARGET_OUT_DATA) $(userdataimage_intermediates)/userdata_image_info.txt $(INSTALLED_USERDATAIMAGE_TARGET) $(TARGET_OUT)
+  $(hide) $(call assert-max-image-size,$(INSTALLED_USERDATAIMAGE_TARGET),$(BOARD_USERDATAIMAGE_PARTITION_SIZE))
+endef
+else # TARGET_USERIMAGES_USE_UBIFS == true
+## Generate a ubifs image
+define build-userdataimage-target
+    $(call pretty,"Target userdata fs image: $(INSTALLED_USERDATAIMAGE_TARGET)")
+    @mkdir -p $(TARGET_OUT_DATA)
+    @mkdir -p $(userdataimage_intermediates) && rm -rf $(userdataimage_intermediates)/userdata_image_info.txt
+    $(call generate-userimage-prop-dictionary, $(userdataimage_intermediates)/userdata_image_info.txt, skip_fsck=true)
+    $(call generate-ubifs-prop-dictionary, $(userdataimage_intermediates)/userdata_image_info.txt)
+    $(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH \
+        ./build/tools/releasetools/build_image.py \
+        $(TARGET_OUT_DATA) $(userdataimage_intermediates)/userdata_image_info.txt $(INSTALLED_USERDATAIMAGE_TARGET) $(TARGET_OUT)
+endef
+
+endif # TARGET_USERIMAGES_USE_UBIFS
+
+# We just build this directly to the install location.
+INSTALLED_USERDATAIMAGE_TARGET := $(BUILT_USERDATAIMAGE_TARGET)
+$(INSTALLED_USERDATAIMAGE_TARGET): $(INTERNAL_USERIMAGES_DEPS) \
+                                   $(INTERNAL_USERDATAIMAGE_FILES)
+	$(build-userdataimage-target)
+
+.PHONY: userdataimage-nodeps
+userdataimage-nodeps: | $(INTERNAL_USERIMAGES_DEPS)
+	$(build-userdataimage-target)
+
+endif # not skip_userdata.img
+skip_userdata.img :=
+
+#######
+## data partition tarball
+define build-userdatatarball-target
+    $(call pretty,"Target userdata fs tarball: " \
+                  "$(INSTALLED_USERDATATARBALL_TARGET)")
+    $(MKTARBALL) $(FS_GET_STATS) \
+		$(PRODUCT_OUT) data $(PRIVATE_USERDATA_TAR) \
+		$(INSTALLED_USERDATATARBALL_TARGET) $(TARGET_OUT)
+endef
+
+userdata_tar := $(PRODUCT_OUT)/userdata.tar
+INSTALLED_USERDATATARBALL_TARGET := $(userdata_tar).bz2
+$(INSTALLED_USERDATATARBALL_TARGET): PRIVATE_USERDATA_TAR := $(userdata_tar)
+$(INSTALLED_USERDATATARBALL_TARGET): $(FS_GET_STATS) $(INTERNAL_USERDATAIMAGE_FILES)
+	$(build-userdatatarball-target)
+
+$(call dist-for-goals,userdatatarball,$(INSTALLED_USERDATATARBALL_TARGET))
+
+.PHONY: userdatatarball-nodeps
+userdatatarball-nodeps: $(FS_GET_STATS)
+	$(build-userdatatarball-target)
+
+
+# -----------------------------------------------------------------
+# cache partition image
+ifdef BOARD_CACHEIMAGE_FILE_SYSTEM_TYPE
+INTERNAL_CACHEIMAGE_FILES := \
+    $(filter $(TARGET_OUT_CACHE)/%,$(ALL_DEFAULT_INSTALLED_MODULES))
+
+cacheimage_intermediates := \
+    $(call intermediates-dir-for,PACKAGING,cache)
+BUILT_CACHEIMAGE_TARGET := $(PRODUCT_OUT)/cache.img
+
+define build-cacheimage-target
+  $(call pretty,"Target cache fs image: $(INSTALLED_CACHEIMAGE_TARGET)")
+  @mkdir -p $(TARGET_OUT_CACHE)
+  @mkdir -p $(cacheimage_intermediates) && rm -rf $(cacheimage_intermediates)/cache_image_info.txt
+  $(call generate-userimage-prop-dictionary, $(cacheimage_intermediates)/cache_image_info.txt, skip_fsck=true)
+  $(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH \
+      ./build/tools/releasetools/build_image.py \
+      $(TARGET_OUT_CACHE) $(cacheimage_intermediates)/cache_image_info.txt $(INSTALLED_CACHEIMAGE_TARGET) $(TARGET_OUT)
+  $(hide) $(call assert-max-image-size,$(INSTALLED_CACHEIMAGE_TARGET),$(BOARD_CACHEIMAGE_PARTITION_SIZE))
+endef
+
+# We just build this directly to the install location.
+INSTALLED_CACHEIMAGE_TARGET := $(BUILT_CACHEIMAGE_TARGET)
+$(INSTALLED_CACHEIMAGE_TARGET): $(INTERNAL_USERIMAGES_DEPS) $(INTERNAL_CACHEIMAGE_FILES)
+	$(build-cacheimage-target)
+
+.PHONY: cacheimage-nodeps
+cacheimage-nodeps: | $(INTERNAL_USERIMAGES_DEPS)
+	$(build-cacheimage-target)
+
+else # BOARD_CACHEIMAGE_FILE_SYSTEM_TYPE
+# we need to ignore the broken cache link when doing the rsync
+IGNORE_CACHE_LINK := --exclude=cache
+endif # BOARD_CACHEIMAGE_FILE_SYSTEM_TYPE
+
+# -----------------------------------------------------------------
+# mntl partition image
+define build-mntlimage-target
+	python $(MNTL_PARTITION_PATH)/gen-mntl-gpt.py $(MNTL_NAND_PART_XML) $(1)
+	$(MKMNTL) -m $(BOARD_FLASH_PAGE_SIZE) -f $(MNTL_GPT) -p 0 -f $(INSTALLED_SYSTEMIMAGE) \
+	    -p $(BOARD_SYSTEMIMAGE_START_SECTOR) -f $(INSTALLED_CACHEIMAGE_TARGET) -p $(BOARD_CACHEIMAGE_START_SECTOR) \
+	    -f $(INSTALLED_USERDATAIMAGE_TARGET) -p $(BOARD_USERDATAIMAGE_START_SECTOR) -o $(2)
+endef
+
+ifeq ($(TARGET_USERIMAGES_USE_MNTL), true)
+ENTRY_TYPE := {0FC63DAF-8483-4772-8E79-3D69D8477DE4}
+MNTL_PARTITION_PATH := device/mediatek/build/build/tools/partition
+MNTL_NAND_PART_XML := $(TARGET_OUT_INTERMEDIATES)/PTGEN/partition_nand.xml
+MNTL_GPT := $(PRODUCT_OUT)/ftl_gpt.bin
+
+INSTALLED_MNTLIMAGE_TARGET := $(PRODUCT_OUT)/mntl.img
+$(INSTALLED_MNTLIMAGE_TARGET): $(MKMNTL) $(INSTALLED_SYSTEMIMAGE) $(INSTALLED_CACHEIMAGE_TARGET) $(INSTALLED_USERDATAIMAGE_TARGET) $(MNTL_NAND_PART_XML)
+	$(call build-mntlimage-target, $(MNTL_GPT), $@)
+else
+INSTALLED_MNTLIMAGE_TARGET :=
+endif
+
+# -----------------------------------------------------------------
+# system_other partition image
+ifeq ($(BOARD_USES_SYSTEM_OTHER_ODEX),true)
+BOARD_USES_SYSTEM_OTHER := true
+
+# Marker file to identify that odex files are installed
+INSTALLED_SYSTEM_OTHER_ODEX_MARKER := $(TARGET_OUT_SYSTEM_OTHER)/system-other-odex-marker
+ALL_DEFAULT_INSTALLED_MODULES += $(INSTALLED_SYSTEM_OTHER_ODEX_MARKER)
+$(INSTALLED_SYSTEM_OTHER_ODEX_MARKER):
+	$(hide) touch $@
+endif
+
+ifdef BOARD_USES_SYSTEM_OTHER
+INTERNAL_SYSTEMOTHERIMAGE_FILES := \
+    $(filter $(TARGET_OUT_SYSTEM_OTHER)/%,\
+      $(ALL_DEFAULT_INSTALLED_MODULES)\
+      $(ALL_PDK_FUSION_FILES))
+
+INSTALLED_FILES_FILE_SYSTEMOTHER := $(PRODUCT_OUT)/installed-files-system-other.txt
+$(INSTALLED_FILES_FILE_SYSTEMOTHER) : $(INTERNAL_SYSTEMOTHERIMAGE_FILES)
+	@echo Installed file list: $@
+	@mkdir -p $(dir $@)
+	@rm -f $@
+	$(hide) build/tools/fileslist.py $(TARGET_OUT_SYSTEM_OTHER) > $@
+
+systemotherimage_intermediates := \
+    $(call intermediates-dir-for,PACKAGING,system_other)
+BUILT_SYSTEMOTHERIMAGE_TARGET := $(PRODUCT_OUT)/system_other.img
+
+# Note that we assert the size is SYSTEMIMAGE_PARTITION_SIZE since this is the 'b' system image.
+define build-systemotherimage-target
+  $(call pretty,"Target system_other fs image: $(INSTALLED_SYSTEMOTHERIMAGE_TARGET)")
+  @mkdir -p $(TARGET_OUT_SYSTEM_OTHER)
+  @mkdir -p $(systemotherimage_intermediates) && rm -rf $(systemotherimage_intermediates)/system_other_image_info.txt
+  $(call generate-userimage-prop-dictionary, $(systemotherimage_intermediates)/system_other_image_info.txt, skip_fsck=true)
+  $(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH \
+      ./build/tools/releasetools/build_image.py \
+      $(TARGET_OUT_SYSTEM_OTHER) $(systemotherimage_intermediates)/system_other_image_info.txt $(INSTALLED_SYSTEMOTHERIMAGE_TARGET) $(TARGET_OUT)
+  $(hide) $(call assert-max-image-size,$(INSTALLED_SYSTEMOTHERIMAGE_TARGET),$(BOARD_SYSTEMIMAGE_PARTITION_SIZE))
+endef
+
+# We just build this directly to the install location.
+INSTALLED_SYSTEMOTHERIMAGE_TARGET := $(BUILT_SYSTEMOTHERIMAGE_TARGET)
+$(INSTALLED_SYSTEMOTHERIMAGE_TARGET): $(INTERNAL_USERIMAGES_DEPS) $(INTERNAL_SYSTEMOTHERIMAGE_FILES) $(INSTALLED_FILES_FILE_SYSTEMOTHER)
+	$(build-systemotherimage-target)
+
+.PHONY: systemotherimage-nodeps
+systemotherimage-nodeps: | $(INTERNAL_USERIMAGES_DEPS)
+	$(build-systemotherimage-target)
+
+endif # BOARD_USES_SYSTEM_OTHER
+
+
+# -----------------------------------------------------------------
+# vendor partition image
+ifdef BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE
+INTERNAL_VENDORIMAGE_FILES := \
+    $(filter $(TARGET_OUT_VENDOR)/%,\
+      $(ALL_DEFAULT_INSTALLED_MODULES)\
+      $(ALL_PDK_FUSION_FILES))
+
+# platform.zip depends on $(INTERNAL_VENDORIMAGE_FILES).
+$(INSTALLED_PLATFORM_ZIP) : $(INTERNAL_VENDORIMAGE_FILES)
+
+INSTALLED_FILES_FILE_VENDOR := $(PRODUCT_OUT)/installed-files-vendor.txt
+$(INSTALLED_FILES_FILE_VENDOR) : $(INTERNAL_VENDORIMAGE_FILES)
+	@echo Installed file list: $@
+	@mkdir -p $(dir $@)
+	@rm -f $@
+	$(hide) build/tools/fileslist.py $(TARGET_OUT_VENDOR) > $@
+
+vendorimage_intermediates := \
+    $(call intermediates-dir-for,PACKAGING,vendor)
+BUILT_VENDORIMAGE_TARGET := $(PRODUCT_OUT)/vendor.img
+
+define build-vendorimage-target
+  $(call pretty,"Target vendor fs image: $(INSTALLED_VENDORIMAGE_TARGET)")
+  @mkdir -p $(TARGET_OUT_VENDOR)
+  @mkdir -p $(vendorimage_intermediates) && rm -rf $(vendorimage_intermediates)/vendor_image_info.txt
+  $(call generate-userimage-prop-dictionary, $(vendorimage_intermediates)/vendor_image_info.txt, skip_fsck=true)
+  $(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH \
+      ./build/tools/releasetools/build_image.py \
+      $(TARGET_OUT_VENDOR) $(vendorimage_intermediates)/vendor_image_info.txt $(INSTALLED_VENDORIMAGE_TARGET) $(TARGET_OUT)
+  $(hide) $(call assert-max-image-size,$(INSTALLED_VENDORIMAGE_TARGET),$(BOARD_VENDORIMAGE_PARTITION_SIZE))
+endef
+
+# We just build this directly to the install location.
+INSTALLED_VENDORIMAGE_TARGET := $(BUILT_VENDORIMAGE_TARGET)
+$(INSTALLED_VENDORIMAGE_TARGET): $(INTERNAL_USERIMAGES_DEPS) $(INTERNAL_VENDORIMAGE_FILES) $(INSTALLED_FILES_FILE_VENDOR)
+	$(build-vendorimage-target)
+
+.PHONY: vendorimage-nodeps
+vendorimage-nodeps: | $(INTERNAL_USERIMAGES_DEPS)
+	$(build-vendorimage-target)
+
+else ifdef BOARD_PREBUILT_VENDORIMAGE
+INSTALLED_VENDORIMAGE_TARGET := $(PRODUCT_OUT)/vendor.img
+$(eval $(call copy-one-file,$(BOARD_PREBUILT_VENDORIMAGE),$(INSTALLED_VENDORIMAGE_TARGET)))
+endif
+
+# -----------------------------------------------------------------
+# bring in the installer image generation defines if necessary
+ifeq ($(TARGET_USE_DISKINSTALLER),true)
+include bootable/diskinstaller/config.mk
+endif
+
+# -----------------------------------------------------------------
+# host tools needed to build dist and OTA packages
+
+build_ota_package := true
+ifeq ($(TARGET_SKIP_OTA_PACKAGE),true)
+build_ota_package := false
+endif
+ifeq ($(BUILD_OS),darwin)
+build_ota_package := false
+endif
+ifneq ($(strip $(SANITIZE_TARGET)),)
+build_ota_package := false
+endif
+ifeq ($(TARGET_PRODUCT),sdk)
+build_ota_package := false
+endif
+ifneq ($(filter generic%,$(TARGET_DEVICE)),)
+build_ota_package := false
+endif
+ifeq ($(TARGET_NO_KERNEL),true)
+build_ota_package := false
+endif
+ifeq ($(recovery_fstab),)
+build_ota_package := false
+endif
+ifeq ($(TARGET_BUILD_PDK),true)
+build_ota_package := false
+endif
+
+ifeq ($(build_ota_package),true)
+OTATOOLS :=  $(HOST_OUT_EXECUTABLES)/minigzip \
+  $(HOST_OUT_EXECUTABLES)/aapt \
+  $(HOST_OUT_EXECUTABLES)/mkbootfs \
+  $(HOST_OUT_EXECUTABLES)/mkbootimg \
+  $(HOST_OUT_EXECUTABLES)/fs_config \
+  $(HOST_OUT_EXECUTABLES)/zipalign \
+  $(HOST_OUT_EXECUTABLES)/bsdiff \
+  $(HOST_OUT_EXECUTABLES)/imgdiff \
+  $(HOST_OUT_JAVA_LIBRARIES)/dumpkey.jar \
+  $(HOST_OUT_JAVA_LIBRARIES)/signapk.jar \
+  $(HOST_OUT_JAVA_LIBRARIES)/BootSignature.jar \
+  $(HOST_OUT_EXECUTABLES)/mkuserimg.sh \
+  $(HOST_OUT_EXECUTABLES)/make_ext4fs \
+  $(HOST_OUT_EXECUTABLES)/mksquashfsimage.sh \
+  $(HOST_OUT_EXECUTABLES)/mksquashfs \
+  $(HOST_OUT_EXECUTABLES)/mkf2fsuserimg.sh \
+  $(HOST_OUT_EXECUTABLES)/make_f2fs \
+  $(HOST_OUT_EXECUTABLES)/simg2img \
+  $(HOST_OUT_EXECUTABLES)/e2fsck \
+  $(HOST_OUT_EXECUTABLES)/build_verity_tree \
+  $(HOST_OUT_EXECUTABLES)/verity_signer \
+  $(HOST_OUT_EXECUTABLES)/append2simg \
+  $(HOST_OUT_EXECUTABLES)/img2simg \
+  $(HOST_OUT_EXECUTABLES)/boot_signer \
+  $(HOST_OUT_EXECUTABLES)/fec \
+  $(HOST_OUT_EXECUTABLES)/brillo_update_payload \
+  $(HOST_OUT_EXECUTABLES)/lib/shflags/shflags \
+  $(HOST_OUT_EXECUTABLES)/delta_generator \
+  $(BLK_ALLOC_TO_BASE_FS)
+
+# Shared libraries.
+OTATOOLS += \
+  $(HOST_LIBRARY_PATH)/libc++$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/liblog$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libcutils$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libselinux$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libcrypto-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libdivsufsort$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libdivsufsort64$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libext2fs-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libext2_blkid-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libext2_com_err-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libext2_e2p-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libext2_profile-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libext2_quota-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libext2_uuid-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libconscrypt_openjdk_jni$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libbrillo$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libbrillo-stream$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libbrillo-http$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libchrome$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libcurl-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libevent-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libprotobuf-cpp-lite$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libssl-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libz-host$(HOST_SHLIB_SUFFIX) \
+  $(HOST_LIBRARY_PATH)/libbase$(HOST_SHLIB_SUFFIX)
+
+.PHONY: otatools
+otatools: $(OTATOOLS)
+
+BUILT_OTATOOLS_PACKAGE := $(PRODUCT_OUT)/otatools.zip
+$(BUILT_OTATOOLS_PACKAGE): zip_root := $(call intermediates-dir-for,PACKAGING,otatools)/otatools
+
+$(BUILT_OTATOOLS_PACKAGE): $(OTATOOLS) | $(ACP)
+	@echo "Package OTA tools: $@"
+	$(hide) rm -rf $@ $(zip_root)
+	$(hide) mkdir -p $(dir $@) $(zip_root)/bin $(zip_root)/framework $(zip_root)/releasetools $(zip_root)/system/extras/verity
+	$(call copy-files-with-structure,$(OTATOOLS),$(HOST_OUT)/,$(zip_root))
+	$(hide) $(ACP) $(HOST_OUT_JAVA_LIBRARIES)/VeritySigner.jar $(zip_root)/framework/
+	$(hide) $(ACP) -p system/extras/verity/build_verity_metadata.py $(zip_root)/system/extras/verity/
+	$(hide) $(ACP) -r -d -p build/tools/releasetools/* $(zip_root)/releasetools
+	$(hide) rm -rf $@ $(zip_root)/releasetools/*.pyc
+	$(hide) (cd $(zip_root) && zip -qryX $(abspath $@) *)
+	$(hide) zip -qryX $(abspath $@) build/target/product/security/
+	$(hide) find device vendor -name \*.pk8 -o -name verifiedboot\* -o -name \*.x509.pem -o -name oem\*.prop | xargs zip -qryX $(abspath $@)>/dev/null || true
+
+.PHONY: otatools-package
+otatools-package: $(BUILT_OTATOOLS_PACKAGE)
+
+endif # build_ota_package
+
+# -----------------------------------------------------------------
+# A zip of the directories that map to the target filesystem.
+# This zip can be used to create an OTA package or filesystem image
+# as a post-build step.
+#
+name := $(TARGET_PRODUCT)
+ifeq ($(TARGET_BUILD_TYPE),debug)
+  name := $(name)_debug
+endif
+name := $(name)-target_files-$(FILE_NAME_TAG)
+
+intermediates := $(call intermediates-dir-for,PACKAGING,target_files)
+BUILT_TARGET_FILES_PACKAGE := $(intermediates)/$(name).zip
+$(BUILT_TARGET_FILES_PACKAGE): intermediates := $(intermediates)
+$(BUILT_TARGET_FILES_PACKAGE): \
+		zip_root := $(intermediates)/$(name)
+
+# $(1): Directory to copy
+# $(2): Location to copy it to
+# The "ls -A" is to prevent "acp s/* d" from failing if s is empty.
+define package_files-copy-root
+  if [ -d "$(strip $(1))" -a "$$(ls -A $(1))" ]; then \
+    mkdir -p $(2) && \
+    $(ACP) -rd $(strip $(1))/* $(2); \
+  fi
+endef
+
+built_ota_tools :=
+
+# We can't build static executables when SANITIZE_TARGET=address
+ifeq ($(strip $(SANITIZE_TARGET)),)
+built_ota_tools += \
+    $(call intermediates-dir-for,EXECUTABLES,updater,,,$(TARGET_PREFER_32_BIT))/updater
+endif
+
+$(BUILT_TARGET_FILES_PACKAGE): PRIVATE_OTA_TOOLS := $(built_ota_tools)
+
+$(BUILT_TARGET_FILES_PACKAGE): PRIVATE_RECOVERY_API_VERSION := $(RECOVERY_API_VERSION)
+$(BUILT_TARGET_FILES_PACKAGE): PRIVATE_RECOVERY_FSTAB_VERSION := $(RECOVERY_FSTAB_VERSION)
+
+ifeq ($(TARGET_RELEASETOOLS_EXTENSIONS),)
+# default to common dir for device vendor
+$(BUILT_TARGET_FILES_PACKAGE): tool_extensions := $(TARGET_DEVICE_DIR)/../common
+else
+$(BUILT_TARGET_FILES_PACKAGE): tool_extensions := $(TARGET_RELEASETOOLS_EXTENSIONS)
+endif
+
+# Build OTA tools if not using the AB Updater.
+ifneq ($(AB_OTA_UPDATER),true)
+$(BUILT_TARGET_FILES_PACKAGE): $(built_ota_tools)
+endif
+
+# If we are using recovery as boot, output recovery files to BOOT/.
+ifeq ($(BOARD_USES_RECOVERY_AS_BOOT),true)
+$(BUILT_TARGET_FILES_PACKAGE): PRIVATE_RECOVERY_OUT := BOOT
+else
+$(BUILT_TARGET_FILES_PACKAGE): PRIVATE_RECOVERY_OUT := RECOVERY
+endif
+
+# Depending on the various images guarantees that the underlying
+# directories are up-to-date.
+$(BUILT_TARGET_FILES_PACKAGE): \
+		$(INSTALLED_BOOTIMAGE_TARGET) \
+		$(INSTALLED_RADIOIMAGE_TARGET) \
+		$(INSTALLED_RECOVERYIMAGE_TARGET) \
+		$(INSTALLED_SYSTEMIMAGE) \
+		$(INSTALLED_USERDATAIMAGE_TARGET) \
+		$(INSTALLED_CACHEIMAGE_TARGET) \
+		$(INSTALLED_VENDORIMAGE_TARGET) \
+		$(INSTALLED_SYSTEMOTHERIMAGE_TARGET) \
+		$(INSTALLED_ANDROID_INFO_TXT_TARGET) \
+		$(SELINUX_FC) \
+		$(APKCERTS_FILE) \
+		$(HOST_OUT_EXECUTABLES)/fs_config \
+		| $(ACP) \
+		$(INSTALLED_MNTLIMAGE_TARGET)
+ifeq ($(TARGET_USERIMAGES_USE_EXT4),true)
+$(BUILT_TARGET_FILES_PACKAGE): $(INSTALLED_CACHEIMAGE_TARGET)
+endif
+	@echo "Package target files: $@"
+	$(hide) rm -rf $@ $(zip_root)
+	$(hide) mkdir -p $(dir $@) $(zip_root)
+ifneq (,$(INSTALLED_RECOVERYIMAGE_TARGET)$(filter true,$(BOARD_USES_RECOVERY_AS_BOOT)))
+	@# Components of the recovery image
+	$(hide) mkdir -p $(zip_root)/$(PRIVATE_RECOVERY_OUT)
+	$(hide) $(call package_files-copy-root, \
+		$(TARGET_RECOVERY_ROOT_OUT),$(zip_root)/$(PRIVATE_RECOVERY_OUT)/RAMDISK)
+ifdef INSTALLED_KERNEL_TARGET
+	$(hide) $(ACP) $(INSTALLED_KERNEL_TARGET) $(zip_root)/$(PRIVATE_RECOVERY_OUT)/kernel
+	$(hide) $(ACP) $(recovery_ramdisk) $(zip_root)/RECOVERY/ramdisk
+ifeq ($(MTK_HEADER_SUPPORT),yes)
+	$(hide) $(ACP) $(recovery_ramdisk_bthdr) $(zip_root)/RECOVERY/ramdisk-bthdr
+endif
+endif
+ifdef INSTALLED_2NDBOOTLOADER_TARGET
+	$(hide) $(ACP) \
+		$(INSTALLED_2NDBOOTLOADER_TARGET) $(zip_root)/$(PRIVATE_RECOVERY_OUT)/second
+endif
+ifdef BOARD_KERNEL_CMDLINE
+	$(hide) echo "$(BOARD_KERNEL_CMDLINE)" > $(zip_root)/$(PRIVATE_RECOVERY_OUT)/cmdline
+endif
+ifdef BOARD_KERNEL_BASE
+	$(hide) echo "$(BOARD_KERNEL_BASE)" > $(zip_root)/$(PRIVATE_RECOVERY_OUT)/base
+endif
+ifdef BOARD_KERNEL_PAGESIZE
+	$(hide) echo "$(BOARD_KERNEL_PAGESIZE)" > $(zip_root)/$(PRIVATE_RECOVERY_OUT)/pagesize
+endif
+endif # INSTALLED_RECOVERYIMAGE_TARGET defined or BOARD_USES_RECOVERY_AS_BOOT is true
+
+ifdef BOARD_RAMDISK_OFFSET
+	$(hide) echo "$(BOARD_RAMDISK_OFFSET)" > $(zip_root)/RECOVERY/ramdisk_offset
+endif
+ifdef BOARD_KERNEL_OFFSET
+	$(hide) echo "$(BOARD_KERNEL_OFFSET)" > $(zip_root)/RECOVERY/kernel_offset
+endif
+ifdef BOARD_TAGS_OFFSET
+	$(hide) echo "$(BOARD_TAGS_OFFSET)" > $(zip_root)/RECOVERY/tags_offset
+endif
+ifdef CUSTOM_BUILD_VERNO
+	$(hide) echo -n $(CUSTOM_BUILD_VERNO_HDR) > $(zip_root)/RECOVERY/board
+endif
+	@# Components of the boot image
+	$(hide) mkdir -p $(zip_root)/BOOT
+ifeq ($(BOARD_BUILD_SYSTEM_ROOT_IMAGE),true)
+	$(hide) mkdir -p $(zip_root)/ROOT
+	$(hide) $(call package_files-copy-root, \
+		$(TARGET_ROOT_OUT),$(zip_root)/ROOT)
+else
+	$(hide) $(call package_files-copy-root, \
+		$(TARGET_ROOT_OUT),$(zip_root)/BOOT/RAMDISK)
+endif
+	@# If we are using recovery as boot, this is already done when processing recovery.
+ifneq ($(BOARD_USES_RECOVERY_AS_BOOT),true)
+ifdef INSTALLED_KERNEL_TARGET
+	$(hide) $(ACP) $(INSTALLED_KERNEL_TARGET) $(zip_root)/BOOT/kernel
+	$(hide) $(ACP) $(INSTALLED_RAMDISK_TARGET) $(zip_root)/BOOT/ramdisk
+endif
+ifdef INSTALLED_2NDBOOTLOADER_TARGET
+	$(hide) $(ACP) \
+		$(INSTALLED_2NDBOOTLOADER_TARGET) $(zip_root)/BOOT/second
+endif
+ifdef BOARD_KERNEL_CMDLINE
+	$(hide) echo "$(BOARD_KERNEL_CMDLINE)" > $(zip_root)/BOOT/cmdline
+endif
+ifdef BOARD_KERNEL_BASE
+	$(hide) echo "$(BOARD_KERNEL_BASE)" > $(zip_root)/BOOT/base
+endif
+ifdef BOARD_RAMDISK_OFFSET
+	$(hide) echo "$(BOARD_RAMDISK_OFFSET)" > $(zip_root)/BOOT/ramdisk_offset
+endif
+ifdef BOARD_KERNEL_OFFSET
+	$(hide) echo "$(BOARD_KERNEL_OFFSET)" > $(zip_root)/BOOT/kernel_offset
+endif
+ifdef BOARD_TAGS_OFFSET
+	$(hide) echo "$(BOARD_TAGS_OFFSET)" > $(zip_root)/BOOT/tags_offset
+endif
+ifdef BOARD_KERNEL_PAGESIZE
+	$(hide) echo "$(BOARD_KERNEL_PAGESIZE)" > $(zip_root)/BOOT/pagesize
+endif
+ifdef CUSTOM_BUILD_VERNO
+	$(hide) echo -n $(CUSTOM_BUILD_VERNO_HDR) > $(zip_root)/BOOT/board
+endif
+endif # BOARD_USES_RECOVERY_AS_BOOT
+	$(hide) $(foreach t,$(INSTALLED_RADIOIMAGE_TARGET),\
+	            mkdir -p $(zip_root)/RADIO; \
+	            $(ACP) $(t) $(zip_root)/RADIO/$(notdir $(t));)
+	@# Contents of the system image
+	$(hide) $(call package_files-copy-root, \
+		$(SYSTEMIMAGE_SOURCE_DIR),$(zip_root)/SYSTEM)
+	@# Contents of the data image
+	$(hide) $(call package_files-copy-root, \
+		$(TARGET_OUT_DATA),$(zip_root)/DATA)
+ifdef BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE
+	@# Contents of the vendor image
+	$(hide) $(call package_files-copy-root, \
+		$(TARGET_OUT_VENDOR),$(zip_root)/VENDOR)
+endif
+	$(if $(BOARD_CUSTOMIMAGE_PARTITION_SIZE), \
+	$(hide) $(call package_files-copy-root, \
+		$(TARGET_CUSTOM_OUT),$(zip_root)/CUSTOM))
+ifdef INSTALLED_SYSTEMOTHERIMAGE_TARGET
+	@# Contents of the system_other image
+	$(hide) $(call package_files-copy-root, \
+		$(TARGET_OUT_SYSTEM_OTHER),$(zip_root)/SYSTEM_OTHER)
+endif
+	@# Extra contents of the OTA package
+	$(hide) mkdir -p $(zip_root)/OTA
+	$(hide) $(ACP) $(INSTALLED_ANDROID_INFO_TXT_TARGET) $(zip_root)/OTA/
+ifneq ($(AB_OTA_UPDATER),true)
+ifneq ($(built_ota_tools),)
+	$(hide) mkdir -p $(zip_root)/OTA/bin
+	$(hide) $(ACP) $(PRIVATE_OTA_TOOLS) $(zip_root)/OTA/bin/
+endif
+endif
+	@# Files that do not end up in any images, but are necessary to
+	@# build them.
+	$(hide) mkdir -p $(zip_root)/META
+	$(hide) $(ACP) $(APKCERTS_FILE) $(zip_root)/META/apkcerts.txt
+	$(hide) if test -e $(tool_extensions)/releasetools.py; then $(ACP) $(tool_extensions)/releasetools.py $(zip_root)/META/; fi
+	$(hide) echo "$(PRODUCT_OTA_PUBLIC_KEYS)" > $(zip_root)/META/otakeys.txt
+	$(hide) $(ACP) $(SELINUX_FC) $(zip_root)/META/file_contexts.bin
+	$(hide) echo "recovery_api_version=$(PRIVATE_RECOVERY_API_VERSION)" > $(zip_root)/META/misc_info.txt
+	$(hide) echo "fstab_version=$(PRIVATE_RECOVERY_FSTAB_VERSION)" >> $(zip_root)/META/misc_info.txt
+ifdef BOARD_FLASH_BLOCK_SIZE
+	$(hide) echo "blocksize=$(BOARD_FLASH_BLOCK_SIZE)" >> $(zip_root)/META/misc_info.txt
+endif
+ifdef BOARD_BOOTIMAGE_PARTITION_SIZE
+	$(hide) echo "boot_size=$(BOARD_BOOTIMAGE_PARTITION_SIZE)" >> $(zip_root)/META/misc_info.txt
+endif
+ifeq ($(BOARD_USES_RECOVERY_AS_BOOT),)
+	$(hide) echo "recovery_as_boot=$(BOARD_USES_RECOVERY_AS_BOOT)" >> $(zip_root)/META/misc_info.txt
+endif
+ifeq ($(INSTALLED_RECOVERYIMAGE_TARGET),)
+	$(hide) echo "no_recovery=true" >> $(zip_root)/META/misc_info.txt
+endif
+ifdef BOARD_RECOVERYIMAGE_PARTITION_SIZE
+	$(hide) echo "recovery_size=$(BOARD_RECOVERYIMAGE_PARTITION_SIZE)" >> $(zip_root)/META/misc_info.txt
+endif
+ifdef BOARD_HAS_EXT4_RESERVED_BLOCKS
+	$(hide) echo "has_ext4_reserved_blocks=$(BOARD_HAS_EXT4_RESERVED_BLOCKS)" >> $(zip_root)/META/misc_info.txt
+endif
+ifdef TARGET_RECOVERY_FSTYPE_MOUNT_OPTIONS
+	@# TARGET_RECOVERY_FSTYPE_MOUNT_OPTIONS can be empty to indicate that nothing but defaults should be used.
+	$(hide) echo "recovery_mount_options=$(TARGET_RECOVERY_FSTYPE_MOUNT_OPTIONS)" >> $(zip_root)/META/misc_info.txt
+else
+	$(hide) echo "recovery_mount_options=$(DEFAULT_TARGET_RECOVERY_FSTYPE_MOUNT_OPTIONS)" >> $(zip_root)/META/misc_info.txt
+endif
+	$(hide) echo "tool_extensions=$(tool_extensions)" >> $(zip_root)/META/misc_info.txt
+	$(hide) echo "default_system_dev_certificate=$(DEFAULT_SYSTEM_DEV_CERTIFICATE)" >> $(zip_root)/META/misc_info.txt
+ifdef PRODUCT_EXTRA_RECOVERY_KEYS
+	$(hide) echo "extra_recovery_keys=$(PRODUCT_EXTRA_RECOVERY_KEYS)" >> $(zip_root)/META/misc_info.txt
+endif
+	$(hide) echo 'mkbootimg_args=$(BOARD_MKBOOTIMG_ARGS)' >> $(zip_root)/META/misc_info.txt
+	$(hide) echo 'mkbootimg_version_args=$(INTERNAL_MKBOOTIMG_VERSION_ARGS)' >> $(zip_root)/META/misc_info.txt
+	$(hide) echo "use_set_metadata=1" >> $(zip_root)/META/misc_info.txt
+	$(hide) echo "multistage_support=1" >> $(zip_root)/META/misc_info.txt
+	$(hide) echo "update_rename_support=1" >> $(zip_root)/META/misc_info.txt
+	$(hide) echo "blockimgdiff_versions=1,2,3,4" >> $(zip_root)/META/misc_info.txt
+ifeq ($(MTK_HEADER_SUPPORT),yes)
+	$(hide) echo "mtk_header_support=1" >> $(zip_root)/META/misc_info.txt
+endif
+ifneq ($(OEM_THUMBPRINT_PROPERTIES),)
+	# OTA scripts are only interested in fingerprint related properties
+	$(hide) echo "oem_fingerprint_properties=$(OEM_THUMBPRINT_PROPERTIES)" >> $(zip_root)/META/misc_info.txt
+endif
+ifneq ($(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_BASE_FS_PATH),)
+	$(hide) $(ACP) $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_BASE_FS_PATH) \
+	  $(zip_root)/META/$(notdir $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_BASE_FS_PATH))
+endif
+ifneq ($(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VENDOR_BASE_FS_PATH),)
+	$(hide) $(ACP) $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VENDOR_BASE_FS_PATH) \
+	  $(zip_root)/META/$(notdir $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VENDOR_BASE_FS_PATH))
+endif
+ifneq ($(strip $(SANITIZE_TARGET)),)
+	# We need to create userdata.img with real data because the instrumented libraries are in userdata.img.
+	$(hide) echo "userdata_img_with_data=true" >> $(zip_root)/META/misc_info.txt
+endif
+ifeq ($(BOARD_USES_FULL_RECOVERY_IMAGE),true)
+	$(hide) echo "full_recovery_image=true" >> $(zip_root)/META/misc_info.txt
+endif
+ifeq ($(TARGET_USERIMAGES_USE_UBIFS),true)
+	$(call generate-ubifs-prop-dictionary, $(zip_root)/META/misc_info.txt)
+endif
+	$(call generate-userimage-prop-dictionary, $(zip_root)/META/misc_info.txt)
+ifeq ($(MTK_SLC_BUFFER_SUPPORT),yes)
+	$(call generate-mtslc-prop-dictionary, $(zip_root)/META/misc_info.txt)
+endif
+
+	@# sign image used to get boot and recovery sig files
+	$(hide) $(SHELL) vendor/mediatek/proprietary/scripts/sign-image/sign_image.sh
+	@#prepare image and update list for OTA upgrade used
+	$(hide) ./device/mediatek/build/releasetools/mt_ota_preprocess.py $(zip_root) $(PRODUCT_OUT) $(PRODUCT_OUT)/ota_update_list.txt
+
+ifneq ($(INSTALLED_RECOVERYIMAGE_TARGET),)
+	$(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH MKBOOTIMG=$(MKBOOTIMG) \
+	    ./build/tools/releasetools/make_recovery_patch $(zip_root) $(zip_root)
+endif
+ifeq ($(AB_OTA_UPDATER),true)
+	@# When using the A/B updater, include the updater config files in the zip.
+	$(hide) $(ACP) $(TOPDIR)system/update_engine/update_engine.conf $(zip_root)/META/update_engine_config.txt
+	$(hide) for part in $(AB_OTA_PARTITIONS); do \
+	  echo "$${part}" >> $(zip_root)/META/ab_partitions.txt; \
+	done
+	$(hide) for conf in $(AB_OTA_POSTINSTALL_CONFIG); do \
+	  echo "$${conf}" >> $(zip_root)/META/postinstall_config.txt; \
+	done
+	@# Include the build type in META/misc_info.txt so the server can easily differentiate production builds.
+	$(hide) echo "build_type=$(TARGET_BUILD_VARIANT)" >> $(zip_root)/META/misc_info.txt
+	$(hide) echo "ab_update=true" >> $(zip_root)/META/misc_info.txt
+ifdef OSRELEASED_DIRECTORY
+	$(hide) $(ACP) $(TARGET_OUT_ETC)/$(OSRELEASED_DIRECTORY)/product_id $(zip_root)/META/product_id.txt
+	$(hide) $(ACP) $(TARGET_OUT_ETC)/$(OSRELEASED_DIRECTORY)/product_version $(zip_root)/META/product_version.txt
+endif
+endif
+ifeq ($(BREAKPAD_GENERATE_SYMBOLS),true)
+	@# If breakpad symbols have been generated, add them to the zip.
+	$(hide) $(ACP) -r $(TARGET_OUT_BREAKPAD) $(zip_root)/BREAKPAD
+endif
+ifdef BOARD_PREBUILT_VENDORIMAGE
+	$(hide) mkdir -p $(zip_root)/IMAGES
+	$(hide) cp $(INSTALLED_VENDORIMAGE_TARGET) $(zip_root)/IMAGES/
+endif
+	@# Zip everything up, preserving symlinks and placing META/ files first to
+	@# help early validation of the .zip file while uploading it.
+	$(hide) (cd $(zip_root) && \
+	        zip -qryX ../$(notdir $@) ./META && \
+	        zip -qryXu ../$(notdir $@) .)
+	@# Run fs_config on all the system, vendor, boot ramdisk,
+	@# and recovery ramdisk files in the zip, and save the output
+	$(hide) zipinfo -1 $@ | awk 'BEGIN { FS="SYSTEM/" } /^SYSTEM\// {print "system/" $$2}' | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) > $(zip_root)/META/filesystem_config.txt
+	$(hide) zipinfo -1 $@ | awk 'BEGIN { FS="VENDOR/" } /^VENDOR\// {print "vendor/" $$2}' | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) > $(zip_root)/META/vendor_filesystem_config.txt
+ifeq ($(BOARD_BUILD_SYSTEM_ROOT_IMAGE),true)
+	$(hide) zipinfo -1 $@ | awk 'BEGIN { FS="ROOT/" } /^ROOT\// {print $$2}' | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) > $(zip_root)/META/root_filesystem_config.txt
+endif
+	$(hide) zipinfo -1 $@ | awk 'BEGIN { FS="BOOT/RAMDISK/" } /^BOOT\/RAMDISK\// {print $$2}' | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) > $(zip_root)/META/boot_filesystem_config.txt
+ifneq ($(INSTALLED_RECOVERYIMAGE_TARGET),)
+	$(hide) zipinfo -1 $@ | awk 'BEGIN { FS="RECOVERY/RAMDISK/" } /^RECOVERY\/RAMDISK\// {print $$2}' | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) > $(zip_root)/META/recovery_filesystem_config.txt
+endif
+	$(if $(BOARD_CUSTOMIMAGE_PARTITION_SIZE), \
+	$(hide) zipinfo -1 $@ | awk 'BEGIN { FS="CUSTOM/" } /^CUSTOM\// {print "custom/" $$2}' | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) > $(zip_root)/META/custom_filesystem_config.txt)
+ifdef INSTALLED_SYSTEMOTHERIMAGE_TARGET
+	$(hide) zipinfo -1 $@ | awk 'BEGIN { FS="SYSTEM_OTHER/" } /^SYSTEM_OTHER\// { print "system/" $$2}' | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) > $(zip_root)/META/system_other_filesystem_config.txt
+endif
+	$(hide) (cd $(zip_root) && zip -qX ../$(notdir $@) META/*filesystem_config.txt)
+	$(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH MKBOOTIMG=$(MKBOOTIMG) \
+	    ./build/tools/releasetools/add_img_to_target_files -a -v -p $(HOST_OUT) $@
+	$(hide) ./build/tools/releasetools/replace_img_from_target_files.py $@ $(PRODUCT_OUT)
+ifeq ($(TARGET_USERIMAGES_USE_MNTL), true)
+	$(call build-mntlimage-target, $(MNTL_GPT), $(INSTALLED_MNTLIMAGE_TARGET))
+endif
+
+.PHONY: target-files-package
+target-files-package: $(BUILT_TARGET_FILES_PACKAGE)
+
+ifneq ($(filter $(MAKECMDGOALS),target-files-package),)
+$(call dist-for-goals, target-files-package, $(BUILT_TARGET_FILES_PACKAGE))
+endif
+
+ifeq ($(build_ota_package),true)
+# -----------------------------------------------------------------
+# OTA update package
+
+name := $(TARGET_PRODUCT)
+ifeq ($(TARGET_BUILD_TYPE),debug)
+  name := $(name)_debug
+endif
+name := $(name)-ota-$(FILE_NAME_TAG)
+
+INTERNAL_OTA_PACKAGE_TARGET := $(PRODUCT_OUT)/$(name).zip
+
+$(INTERNAL_OTA_PACKAGE_TARGET): KEY_CERT_PAIR := $(DEFAULT_KEY_CERT_PAIR)
+
+$(INTERNAL_OTA_PACKAGE_TARGET): $(BUILT_TARGET_FILES_PACKAGE)
+	@echo "Package OTA: $@"
+	$(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH MKBOOTIMG=$(MKBOOTIMG) \
+	   ./build/tools/releasetools/ota_from_target_files -v \
+	   $(if $(filter true,$(TARGET_USERIMAGES_USE_UBIFS)),-g,--block) \
+	   -p $(HOST_OUT) \
+	   -k $(KEY_CERT_PAIR) \
+	   -s ./device/mediatek/build/releasetools/mt_ota_from_target_files \
+	   $(if $(OEM_OTA_CONFIG), -o $(OEM_OTA_CONFIG)) \
+	   $(BUILT_TARGET_FILES_PACKAGE) $@
+
+.PHONY: otapackage
+otapackage: $(INTERNAL_OTA_PACKAGE_TARGET)
+
+endif    # build_ota_package
+
+# -----------------------------------------------------------------
+# The update package
+
+name := $(TARGET_PRODUCT)
+ifeq ($(TARGET_BUILD_TYPE),debug)
+  name := $(name)_debug
+endif
+name := $(name)-img-$(FILE_NAME_TAG)
+
+INTERNAL_UPDATE_PACKAGE_TARGET := $(PRODUCT_OUT)/$(name).zip
+
+$(INTERNAL_UPDATE_PACKAGE_TARGET): $(BUILT_TARGET_FILES_PACKAGE)
+	@echo "Package: $@"
+	$(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH MKBOOTIMG=$(MKBOOTIMG) \
+	   ./build/tools/releasetools/img_from_target_files -v \
+	   -p $(HOST_OUT) \
+	   $(BUILT_TARGET_FILES_PACKAGE) $@
+
+.PHONY: updatepackage
+updatepackage: $(INTERNAL_UPDATE_PACKAGE_TARGET)
+
+# -----------------------------------------------------------------
+# A zip of the symbols directory.  Keep the full paths to make it
+# more obvious where these files came from.
+#
+name := $(TARGET_PRODUCT)
+ifeq ($(TARGET_BUILD_TYPE),debug)
+  name := $(name)_debug
+endif
+name := $(name)-symbols-$(FILE_NAME_TAG)
+
+SYMBOLS_ZIP := $(PRODUCT_OUT)/$(name).zip
+# For apps_only build we'll establish the dependency later in build/core/main.mk.
+ifndef TARGET_BUILD_APPS
+$(SYMBOLS_ZIP): $(INSTALLED_SYSTEMIMAGE) $(INSTALLED_BOOTIMAGE_TARGET)
+endif
+$(SYMBOLS_ZIP):
+	@echo "Package symbols: $@"
+	$(hide) rm -rf $@
+	$(hide) mkdir -p $(dir $@) $(TARGET_OUT_UNSTRIPPED)
+	$(hide) zip -qrX $@ $(TARGET_OUT_UNSTRIPPED)
+
+# -----------------------------------------------------------------
+# A zip of the Android Apps. Not keeping full path so that we don't
+# include product names when distributing
+#
+name := $(TARGET_PRODUCT)
+ifeq ($(TARGET_BUILD_TYPE),debug)
+  name := $(name)_debug
+endif
+name := $(name)-apps-$(FILE_NAME_TAG)
+
+APPS_ZIP := $(PRODUCT_OUT)/$(name).zip
+$(APPS_ZIP): $(INSTALLED_SYSTEMIMAGE)
+	@echo "Package apps: $@"
+	$(hide) rm -rf $@
+	$(hide) mkdir -p $(dir $@)
+	$(hide) apps_to_zip=`find $(TARGET_OUT_APPS) $(TARGET_OUT_APPS_PRIVILEGED) -mindepth 2 -maxdepth 3 -name "*.apk"`; \
+	if [ -z "$$apps_to_zip" ]; then \
+		echo "No apps to zip up. Generating empty apps archive." ; \
+		a=$$(mktemp /tmp/XXXXXXX) && touch $$a && zip $@ $$a && zip -d $@ $$a; \
+	else \
+		zip -qjX $@ $$apps_to_zip; \
+	fi
+
+#------------------------------------------------------------------
+# A zip of emma code coverage meta files. Generated for fully emma
+# instrumented build.
+#
+ifeq (true,$(EMMA_INSTRUMENT))
+EMMA_META_ZIP := $(PRODUCT_OUT)/emma_meta.zip
+# the dependency will be set up later in build/core/main.mk.
+$(EMMA_META_ZIP) :
+	@echo "Collecting Emma coverage meta files."
+	$(hide) find $(TARGET_COMMON_OUT_ROOT) $(HOST_COMMON_OUT_ROOT) -name "coverage.em" | \
+		zip -@ -qX $@
+
+endif # EMMA_INSTRUMENT=true
+
+#------------------------------------------------------------------
+# A zip of Proguard obfuscation dictionary files.
+# Only for apps_only build.
+#
+ifdef TARGET_BUILD_APPS
+PROGUARD_DICT_ZIP := $(PRODUCT_OUT)/$(TARGET_PRODUCT)-proguard-dict-$(FILE_NAME_TAG).zip
+# the dependency will be set up later in build/core/main.mk.
+$(PROGUARD_DICT_ZIP) :
+	@echo "Packaging Proguard obfuscation dictionary files."
+	$(hide) dict_files=`find $(TARGET_OUT_COMMON_INTERMEDIATES)/APPS -name proguard_dictionary -o -name jack_dictionary`; \
+		if [ -n "$$dict_files" ]; then \
+		  unobfuscated_jars=$${dict_files//proguard_dictionary/classes.jar}; \
+		  zip -qX $@ $$dict_files $$unobfuscated_jars; \
+		else \
+		  touch $(dir $@)/zipdummy; \
+		  (cd $(dir $@) && zip -q $(notdir $@) zipdummy); \
+		  zip -qd $@ zipdummy; \
+		  rm $(dir $@)/zipdummy; \
+		fi
+
+endif # TARGET_BUILD_APPS
+
+# -----------------------------------------------------------------
+# dalvik something
+.PHONY: dalvikfiles
+dalvikfiles: $(INTERNAL_DALVIK_MODULES)
+
+# -----------------------------------------------------------------
+# The emulator package
+ifeq ($(BUILD_EMULATOR),true)
+INTERNAL_EMULATOR_PACKAGE_FILES += \
+        $(HOST_OUT_EXECUTABLES)/emulator$(HOST_EXECUTABLE_SUFFIX) \
+        prebuilts/qemu-kernel/$(TARGET_ARCH)/kernel-qemu \
+        $(INSTALLED_RAMDISK_TARGET) \
+		$(INSTALLED_SYSTEMIMAGE) \
+		$(INSTALLED_USERDATAIMAGE_TARGET)
+
+name := $(TARGET_PRODUCT)-emulator-$(FILE_NAME_TAG)
+
+INTERNAL_EMULATOR_PACKAGE_TARGET := $(PRODUCT_OUT)/$(name).zip
+
+$(INTERNAL_EMULATOR_PACKAGE_TARGET): $(INTERNAL_EMULATOR_PACKAGE_FILES)
+	@echo "Package: $@"
+	$(hide) zip -qjX $@ $(INTERNAL_EMULATOR_PACKAGE_FILES)
+
+endif
+# -----------------------------------------------------------------
+# Old PDK stuffs, retired
+# The pdk package (Platform Development Kit)
+
+#ifneq (,$(filter pdk,$(MAKECMDGOALS)))
+#  include development/pdk/Pdk.mk
+#endif
+
+
+# -----------------------------------------------------------------
+# The SDK
+
+# The SDK includes host-specific components, so it belongs under HOST_OUT.
+sdk_dir := $(HOST_OUT)/sdk/$(TARGET_PRODUCT)
+
+# Build a name that looks like:
+#
+#     linux-x86   --> android-sdk_12345_linux-x86
+#     darwin-x86  --> android-sdk_12345_mac-x86
+#     windows-x86 --> android-sdk_12345_windows
+#
+sdk_name := android-sdk_$(FILE_NAME_TAG)
+ifeq ($(HOST_OS),darwin)
+  INTERNAL_SDK_HOST_OS_NAME := mac
+else
+  INTERNAL_SDK_HOST_OS_NAME := $(HOST_OS)
+endif
+ifneq ($(HOST_OS),windows)
+  INTERNAL_SDK_HOST_OS_NAME := $(INTERNAL_SDK_HOST_OS_NAME)-$(SDK_HOST_ARCH)
+endif
+sdk_name := $(sdk_name)_$(INTERNAL_SDK_HOST_OS_NAME)
+
+sdk_dep_file := $(sdk_dir)/sdk_deps.mk
+
+ATREE_FILES :=
+-include $(sdk_dep_file)
+
+# if we don't have a real list, then use "everything"
+ifeq ($(strip $(ATREE_FILES)),)
+ifneq ($(strip $(BUILD_MTK_SDK)), sdk)
+ATREE_FILES := \
+	$(ALL_PREBUILT) \
+	$(ALL_DEFAULT_INSTALLED_MODULES) \
+	$(INSTALLED_RAMDISK_TARGET) \
+	$(ALL_DOCS) \
+	$(ALL_SDK_FILES)
+else
+ATREE_FILES := \
+	$(ALL_PREBUILT) \
+	$(ALL_COPIED_HEADERS) \
+	$(ALL_DOCS) \
+	$(ALL_SDK_FILES)
+endif
+endif
+
+atree_dir := development/build
+
+
+ifneq ($(strip $(BUILD_MTK_SDK)), sdk)
+sdk_atree_files := \
+	$(atree_dir)/sdk.exclude.atree \
+	$(atree_dir)/sdk-$(HOST_OS)-$(SDK_HOST_ARCH).atree
+else
+sdk_atree_files := \
+	$(atree_dir)/sdk.exclude.atree \
+	$(atree_dir)/sdk-$(HOST_OS)-$(SDK_HOST_ARCH)-no-img.atree
+endif
+
+# development/build/sdk-android-<abi>.atree is used to differentiate
+# between architecture models (e.g. ARMv5TE versus ARMv7) when copying
+# files like the kernel image. We use TARGET_CPU_ABI because we don't
+# have a better way to distinguish between CPU models.
+ifneq (,$(strip $(wildcard $(atree_dir)/sdk-android-$(TARGET_CPU_ABI).atree)))
+  sdk_atree_files += $(atree_dir)/sdk-android-$(TARGET_CPU_ABI).atree
+endif
+
+ifneq ($(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SDK_ATREE_FILES),)
+sdk_atree_files += $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SDK_ATREE_FILES)
+else
+    ifneq ($(strip $(BUILD_MTK_SDK)), sdk)
+    sdk_atree_files += $(atree_dir)/sdk.atree
+    else
+    sdk_atree_files += $(atree_dir)/sdk-no-img.atree
+    endif
+endif
+
+include $(BUILD_SYSTEM)/sdk_font.mk
+
+ifneq ($(strip $(BUILD_MTK_SDK)), sdk)
+deps := \
+	$(target_notice_file_txt) \
+	$(tools_notice_file_txt) \
+	$(OUT_DOCS)/offline-sdk-timestamp \
+	$(SYMBOLS_ZIP) \
+	$(INSTALLED_SYSTEMIMAGE) \
+	$(INSTALLED_USERDATAIMAGE_TARGET) \
+	$(INSTALLED_RAMDISK_TARGET) \
+	$(INSTALLED_SDK_BUILD_PROP_TARGET) \
+	$(INSTALLED_BUILD_PROP_TARGET) \
+	$(ATREE_FILES) \
+	$(sdk_atree_files) \
+	$(HOST_OUT_EXECUTABLES)/atree \
+	$(HOST_OUT_EXECUTABLES)/line_endings \
+	$(SDK_FONT_DEPS)
+else
+deps := \
+	$(OUT_DOCS)/offline-sdk-timestamp \
+	$(ATREE_FILES) \
+	$(sdk_atree_files) \
+	$(HOST_OUT_EXECUTABLES)/atree \
+	$(HOST_OUT_EXECUTABLES)/line_endings \
+	$(SDK_FONT_DEPS)
+endif
+
+INTERNAL_SDK_TARGET := $(sdk_dir)/$(sdk_name).zip
+$(INTERNAL_SDK_TARGET): PRIVATE_NAME := $(sdk_name)
+$(INTERNAL_SDK_TARGET): PRIVATE_DIR := $(sdk_dir)/$(sdk_name)
+$(INTERNAL_SDK_TARGET): PRIVATE_DEP_FILE := $(sdk_dep_file)
+$(INTERNAL_SDK_TARGET): PRIVATE_INPUT_FILES := $(sdk_atree_files)
+
+# Set SDK_GNU_ERROR to non-empty to fail when a GNU target is built.
+#
+#SDK_GNU_ERROR := true
+
+$(INTERNAL_SDK_TARGET): $(deps)
+	@echo "Package SDK: $@"
+	$(hide) rm -rf $(PRIVATE_DIR) $@
+	$(hide) for f in $(target_gnu_MODULES); do \
+	  if [ -f $$f ]; then \
+	    echo SDK: $(if $(SDK_GNU_ERROR),ERROR:,warning:) \
+	        including GNU target $$f >&2; \
+	    FAIL=$(SDK_GNU_ERROR); \
+	  fi; \
+	done; \
+	if [ $$FAIL ]; then exit 1; fi
+	$(hide) echo $(notdir $(SDK_FONT_DEPS)) | tr " " "\n"  > $(SDK_FONT_TEMP)/fontsInSdk.txt
+	$(hide) ( \
+		ATREE_STRIP="strip -x" \
+		$(HOST_OUT_EXECUTABLES)/atree \
+		$(addprefix -f ,$(PRIVATE_INPUT_FILES)) \
+			-m $(PRIVATE_DEP_FILE) \
+			-I . \
+			-I $(PRODUCT_OUT) \
+			-I $(HOST_OUT) \
+			-I $(TARGET_COMMON_OUT_ROOT) \
+			-v "PLATFORM_NAME=android-$(PLATFORM_VERSION)" \
+			-v "OUT_DIR=$(OUT_DIR)" \
+			-v "HOST_OUT=$(HOST_OUT)" \
+			-v "TARGET_ARCH=$(TARGET_ARCH)" \
+			-v "TARGET_CPU_ABI=$(TARGET_CPU_ABI)" \
+			-v "DLL_EXTENSION=$(HOST_SHLIB_SUFFIX)" \
+			-v "FONT_OUT=$(SDK_FONT_TEMP)" \
+			-v "JACK_SDKTOOL_VERSION=$(JACK_SDKTOOL_VERSION)" \
+			-o $(PRIVATE_DIR) && \
+		cp -f $(target_notice_file_txt) \
+				$(PRIVATE_DIR)/system-images/android-$(PLATFORM_VERSION)/$(TARGET_CPU_ABI)/NOTICE.txt | tee && \
+		cp -f $(tools_notice_file_txt) $(PRIVATE_DIR)/platform-tools/NOTICE.txt | tee && \
+		HOST_OUT_EXECUTABLES=$(HOST_OUT_EXECUTABLES) HOST_OS=$(HOST_OS) \
+			development/build/tools/sdk_clean.sh $(PRIVATE_DIR) && \
+		chmod -R ug+rwX $(PRIVATE_DIR) && \
+		cd $(dir $@) && zip -rqX $(notdir $@) $(PRIVATE_NAME) \
+	) || ( rm -rf $(PRIVATE_DIR) $@ && exit 44 )
+
+
+# Is a Windows SDK requested? If so, we need some definitions from here
+# in order to find the Linux SDK used to create the Windows one.
+MAIN_SDK_NAME := $(sdk_name)
+MAIN_SDK_DIR  := $(sdk_dir)
+MAIN_SDK_ZIP  := $(INTERNAL_SDK_TARGET)
+ifneq ($(filter win_sdk winsdk-tools,$(MAKECMDGOALS)),)
+include $(TOPDIR)development/build/tools/windows_sdk.mk
+endif
+
+# -----------------------------------------------------------------
+# Findbugs
+INTERNAL_FINDBUGS_XML_TARGET := $(PRODUCT_OUT)/findbugs.xml
+INTERNAL_FINDBUGS_HTML_TARGET := $(PRODUCT_OUT)/findbugs.html
+$(INTERNAL_FINDBUGS_XML_TARGET): $(ALL_FINDBUGS_FILES)
+	@echo UnionBugs: $@
+	$(hide) $(FINDBUGS_DIR)/unionBugs $(ALL_FINDBUGS_FILES) \
+	> $@
+$(INTERNAL_FINDBUGS_HTML_TARGET): $(INTERNAL_FINDBUGS_XML_TARGET)
+	@echo ConvertXmlToText: $@
+	$(hide) $(FINDBUGS_DIR)/convertXmlToText -html:fancy.xsl \
+	$(INTERNAL_FINDBUGS_XML_TARGET) > $@
+
+# -----------------------------------------------------------------
+# Findbugs
+
+# -----------------------------------------------------------------
+# These are some additional build tasks that need to be run.
+ifneq ($(dont_bother),true)
+include $(sort $(wildcard $(BUILD_SYSTEM)/tasks/*.mk))
+-include $(sort $(wildcard vendor/*/build/tasks/*.mk))
+-include $(sort $(wildcard device/*/build/tasks/*.mk))
+-include $(sort $(wildcard product/*/build/tasks/*.mk))
+# Also the project-specific tasks
+-include $(sort $(wildcard vendor/*/*/build/tasks/*.mk))
+-include $(sort $(wildcard device/*/*/build/tasks/*.mk))
+-include $(sort $(wildcard product/*/*/build/tasks/*.mk))
+endif
+
+include $(BUILD_SYSTEM)/product-graph.mk
+
+# -----------------------------------------------------------------
+# Create SDK repository packages. Must be done after tasks/* since
+# we need the addon rules defined.
+ifneq ($(sdk_repo_goal),)
+include $(TOPDIR)development/build/tools/sdk_repo.mk
+endif
Index: vendor/branch/5058A_Digicel_Jamaica/build/core/version_defaults.mk
===================================================================
--- vendor/branch/5058A_Digicel_Jamaica/build/core/version_defaults.mk	(revision 0)
+++ vendor/branch/5058A_Digicel_Jamaica/build/core/version_defaults.mk	(revision 9171)
@@ -0,0 +1,160 @@
+#
+# Copyright (C) 2008 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+#
+# Handle various build version information.
+#
+# Guarantees that the following are defined:
+#     PLATFORM_VERSION
+#     PLATFORM_SDK_VERSION
+#     PLATFORM_VERSION_CODENAME
+#     DEFAULT_APP_TARGET_SDK
+#     BUILD_ID
+#     BUILD_NUMBER
+#     BUILD_DATETIME
+#     PLATFORM_SECURITY_PATCH
+#
+
+# Look for an optional file containing overrides of the defaults,
+# but don't cry if we don't find it.  We could just use -include, but
+# the build.prop target also wants INTERNAL_BUILD_ID_MAKEFILE to be set
+# if the file exists.
+#
+INTERNAL_BUILD_ID_MAKEFILE := $(wildcard $(BUILD_SYSTEM)/build_id.mk)
+ifneq "" "$(INTERNAL_BUILD_ID_MAKEFILE)"
+  include $(INTERNAL_BUILD_ID_MAKEFILE)
+endif
+
+ifeq "" "$(PLATFORM_VERSION)"
+  # This is the canonical definition of the platform version,
+  # which is the version that we reveal to the end user.
+  # Update this value when the platform version changes (rather
+  # than overriding it somewhere else).  Can be an arbitrary string.
+  PLATFORM_VERSION := 7.1.1
+endif
+
+ifeq "" "$(PLATFORM_SDK_VERSION)"
+  # This is the canonical definition of the SDK version, which defines
+  # the set of APIs and functionality available in the platform.  It
+  # is a single integer that increases monotonically as updates to
+  # the SDK are released.  It should only be incremented when the APIs for
+  # the new release are frozen (so that developers don't write apps against
+  # intermediate builds).  During development, this number remains at the
+  # SDK version the branch is based on and PLATFORM_VERSION_CODENAME holds
+  # the code-name of the new development work.
+  PLATFORM_SDK_VERSION := 25
+endif
+
+ifeq "" "$(PLATFORM_JACK_MIN_SDK_VERSION)"
+  # This is definition of the min SDK version given to Jack for the current
+  # platform. For released version it should be the same as
+  # PLATFORM_SDK_VERSION. During development, this number may be incremented
+  # before PLATFORM_SDK_VERSION if the plateform starts to add new java
+  # language supports.
+  PLATFORM_JACK_MIN_SDK_VERSION := 25
+endif
+
+ifeq "" "$(PLATFORM_VERSION_CODENAME)"
+  # This is the current development code-name, if the build is not a final
+  # release build.  If this is a final release build, it is simply "REL".
+  PLATFORM_VERSION_CODENAME := REL
+
+  # This is all of the development codenames that are active.  Should be either
+  # the same as PLATFORM_VERSION_CODENAME or a comma-separated list of additional
+  # codenames after PLATFORM_VERSION_CODENAME.
+  PLATFORM_VERSION_ALL_CODENAMES := $(PLATFORM_VERSION_CODENAME)
+endif
+
+ifeq "REL" "$(PLATFORM_VERSION_CODENAME)"
+  PLATFORM_PREVIEW_SDK_VERSION := 0
+else
+  ifeq "" "$(PLATFORM_PREVIEW_SDK_VERSION)"
+    # This is the definition of a preview SDK version over and above the current
+    # platform SDK version. Unlike the platform SDK version, a higher value
+    # for preview SDK version does NOT mean that all prior preview APIs are
+    # included. Packages reading this value to determine compatibility with
+    # known APIs should check that this value is precisely equal to the preview
+    # SDK version the package was built for, otherwise it should fall back to
+    # assuming the device can only support APIs as of the previous official
+    # public release.
+    # This value will always be 0 for release builds.
+    PLATFORM_PREVIEW_SDK_VERSION := 0
+  endif
+endif
+
+ifeq "" "$(DEFAULT_APP_TARGET_SDK)"
+  # This is the default minSdkVersion and targetSdkVersion to use for
+  # all .apks created by the build system.  It can be overridden by explicitly
+  # setting these in the .apk's AndroidManifest.xml.  It is either the code
+  # name of the development build or, if this is a release build, the official
+  # SDK version of this release.
+  ifeq "REL" "$(PLATFORM_VERSION_CODENAME)"
+    DEFAULT_APP_TARGET_SDK := $(PLATFORM_SDK_VERSION)
+  else
+    DEFAULT_APP_TARGET_SDK := $(PLATFORM_VERSION_CODENAME)
+  endif
+endif
+
+ifeq "" "$(PLATFORM_SECURITY_PATCH)"
+    #  Used to indicate the security patch that has been applied to the device.
+    #  It must signify that the build includes all security patches issued up through the designated Android Public Security Bulletin.
+    #  It must be of the form "YYYY-MM-DD" on production devices.
+    #  It must match one of the Android Security Patch Level strings of the Public Security Bulletins.
+    #  If there is no $PLATFORM_SECURITY_PATCH set, keep it empty.
+    PLATFORM_SECURITY_PATCH := 2018-02-05
+endif
+
+ifeq "" "$(PLATFORM_BASE_OS)"
+  # Used to indicate the base os applied to the device.
+  # Can be an arbitrary string, but must be a single word.
+  #
+  # If there is no $PLATFORM_BASE_OS set, keep it empty.
+  PLATFORM_BASE_OS :=
+endif
+
+ifeq "" "$(BUILD_ID)"
+  # Used to signify special builds.  E.g., branches and/or releases,
+  # like "M5-RC7".  Can be an arbitrary string, but must be a single
+  # word and a valid file name.
+  #
+  # If there is no BUILD_ID set, make it obvious.
+  BUILD_ID := UNKNOWN
+endif
+
+ifeq "" "$(BUILD_DATETIME)"
+  # Used to reproduce builds by setting the same time. Must be the number
+  # of seconds since the Epoch.
+  BUILD_DATETIME := $(shell date +%s)
+endif
+
+ifneq (,$(findstring Darwin,$(shell uname -sm)))
+DATE := date -r $(BUILD_DATETIME)
+else
+DATE := date -d @$(BUILD_DATETIME)
+endif
+
+ifeq "" "$(BUILD_NUMBER)"
+  # BUILD_NUMBER should be set to the source control value that
+  # represents the current state of the source code.  E.g., a
+  # perforce changelist number or a git hash.  Can be an arbitrary string
+  # (to allow for source control that uses something other than numbers),
+  # but must be a single word and a valid file name.
+  #
+  # If no BUILD_NUMBER is set, create a useful "I am an engineering build
+  # from this date/time" value.  Make it start with a non-digit so that
+  # anyone trying to parse it as an integer will probably get "0".
+  BUILD_NUMBER := eng.$(shell echo $${USER:0:6}).$(shell $(DATE) +%Y%m%d.%H%M%S)
+endif
Index: vendor/branch/5058A_Digicel_Jamaica/build/tools/buildinfo.sh
===================================================================
--- vendor/branch/5058A_Digicel_Jamaica/build/tools/buildinfo.sh	(revision 0)
+++ vendor/branch/5058A_Digicel_Jamaica/build/tools/buildinfo.sh	(revision 9171)
@@ -0,0 +1,69 @@
+#!/bin/bash 
+echo "# begin build properties"
+echo "# autogenerated by buildinfo.sh"
+
+echo "ro.build.id=$BUILD_ID"
+echo "ro.build.display.id=5058A_LATAM_V3.1_180301"
+echo "ro.build.version.custintid=5058A_LATAM_V3.1_180301"
+echo "ro.build.version.incremental=LATAM_5058A_L030_S28_180301"
+echo "ro.tct.sys.ver=O58AWE11"
+echo "ro.build.hardware.version=V1"
+echo "ro.build.display.factoryid=Plat:LATAM_5058A_L030_S28_180301Outer:5058A_LATAM_V3.1_180301End"
+echo "ro.build.version.sdk=$PLATFORM_SDK_VERSION"
+echo "ro.build.version.preview_sdk=$PLATFORM_PREVIEW_SDK_VERSION"
+echo "ro.build.version.codename=$PLATFORM_VERSION_CODENAME"
+echo "ro.build.version.all_codenames=$PLATFORM_VERSION_ALL_CODENAMES"
+echo "ro.build.version.release=$PLATFORM_VERSION"
+echo "ro.build.version.security_patch=$PLATFORM_SECURITY_PATCH"
+echo "ro.build.version.base_os=$PLATFORM_BASE_OS"
+echo "ro.build.date=`$DATE "+%Y-%m-%d %H:%M:%S"`"
+echo "ro.build.date.utc=`$DATE +%s`"
+echo "ro.build.type=$TARGET_BUILD_TYPE"
+echo "ro.build.user=$USER"
+echo "ro.build.host=`hostname`"
+echo "ro.build.tags=release-keys"
+echo "ro.build.flavor=$TARGET_BUILD_FLAVOR"
+if [ -n "$BOARD_BUILD_SYSTEM_ROOT_IMAGE" ] ; then
+  echo "ro.build.system_root_image=$BOARD_BUILD_SYSTEM_ROOT_IMAGE"
+fi
+if [ -n "$AB_OTA_UPDATER" ] ; then
+  echo "ro.build.ab_update=$AB_OTA_UPDATER"
+fi
+echo "ro.product.model=5058A"
+echo "ro.product.brand=TCL"
+echo "ro.product.name=5058A"
+echo "ro.product.device=A3A_PLUS"
+echo "ro.product.board=$TARGET_BOOTLOADER_BOARD_NAME"
+
+# These values are deprecated, use "ro.product.cpu.abilist"
+# instead (see below).
+echo "# ro.product.cpu.abi and ro.product.cpu.abi2 are obsolete,"
+echo "# use ro.product.cpu.abilist instead."
+echo "ro.product.cpu.abi=$TARGET_CPU_ABI"
+if [ -n "$TARGET_CPU_ABI2" ] ; then
+  echo "ro.product.cpu.abi2=$TARGET_CPU_ABI2"
+fi
+echo "ro.product.cpu.abilist=$TARGET_CPU_ABI_LIST"
+echo "ro.product.cpu.abilist32=$TARGET_CPU_ABI_LIST_32_BIT"
+echo "ro.product.cpu.abilist64=$TARGET_CPU_ABI_LIST_64_BIT"
+
+echo "ro.product.manufacturer= TCL"
+if [ -n "$PRODUCT_DEFAULT_LOCALE" ] ; then
+  echo "ro.product.locale=$PRODUCT_DEFAULT_LOCALE"
+fi
+echo "ro.wifi.channels=$PRODUCT_DEFAULT_WIFI_CHANNELS"
+echo "ro.board.platform=$TARGET_BOARD_PLATFORM"
+
+echo "# ro.build.product is obsolete; use ro.product.device"
+echo "ro.build.product=A3A PLUS"
+
+echo "# Do not try to parse description, fingerprint, or thumbprint"
+echo "ro.build.description=$PRIVATE_BUILD_DESC"
+#echo "ro.build.fingerprint=$BUILD_FINGERPRINT"
+echo "ro.build.fingerprint=TCL/5058A/A3A_PLUS:7.1.1/N6F26Q/5058A_LATAM_V3.1_180301:user/release-keys"
+if [ -n "$BUILD_THUMBPRINT" ] ; then
+  echo "ro.build.thumbprint=$BUILD_THUMBPRINT"
+fi
+echo "ro.build.characteristics=$TARGET_AAPT_CHARACTERISTICS"
+
+echo "# end build properties"
Index: vendor/branch/5058A_Digicel_Jamaica/device/ausshine/aus6739_66_n1/ProjectConfig.mk
===================================================================
--- vendor/branch/5058A_Digicel_Jamaica/device/ausshine/aus6739_66_n1/ProjectConfig.mk	(revision 0)
+++ vendor/branch/5058A_Digicel_Jamaica/device/ausshine/aus6739_66_n1/ProjectConfig.mk	(revision 9171)
@@ -0,0 +1,727 @@
+ANDROID_LOG_MUCH_COUNT =
+AUTO_ADD_GLOBAL_DEFINE_BY_NAME = MTK_MAGICONFERENCE_SUPPORT MTK_HAC_SUPPORT CUSTOM_KERNEL_PDR_SENSOR MTK_EMBMS_SUPPORT MTK_SIM_LOCK_POWER_ON_WRITE_PROTECT MTK_CROSSMOUNT_MULTI_CH_SUPPORT MTK_MULTIPLE_TDLS_SUPPORT MTK_MODEM_MONITOR_SUPPORT MTK_BT_BLUEDROID_AVRCP_TG_16 MTK_CROSSMOUNT_SUPPORT CUSTOM_KERNEL_ANSWER_CALL_SENSOR MTK_CAM_STEREO_DENOISE_SUPPORT CUSTOM_KERNEL_UNCALI_MAG_SENSOR CUSTOM_KERNEL_UNCALI_GYRO_SENSOR MTK_BLULIGHT_DEFENDER_SUPPORT MTK_LCM_DEVICE_TREE_SUPPORT MTK_BT_BLUEDROID_A2DP_APTX MTK_NVCONFIG_PARTITION_SUPPORT MTK_BT_BLUEDROID_HFP_AG_17 MTK_AURISYS_PHONE_CALL_SUPPORT MTK_HEADSET_ACTIVE_NOISE_CANCELLATION MTK_DYNAMIC_SBP_SUPPORT MTK_FACTORY_GAMMA_SUPPORT MTK_VT3G324M_SUPPORT MTK_WFC_SUPPORT MTK_BT_BLUEDROID_AVRCP_TG_15 MTK_BT_BLUEDROID_PLUS MTK_CAM_VSDOF_SUPPORT MTK_ECCCI_C2K MTK_EXTERNAL_SIM_SUPPORT MTK_EFUSE_WRITER_SUPPORT MTK_FACTORY_MODE_IN_GB2312 MTK_A1_FEATURE MTK_AUDIO_TUNNELING_SUPPORT CUSTOM_KERNEL_HEART_RATE_SENSOR CUSTOM_KERNEL_SENSORHUB CUSTOM_KERNEL_TILT_DETECTOR_SENSOR CUSTOM_KERNEL_IN_POCKET_SENSOR CUSTOM_KERNEL_WAKE_GESTURE_SENSOR CUSTOM_KERNEL_FACE_DOWN_SENSOR CUSTOM_KERNEL_PICK_UP_SENSOR CUSTOM_KERNEL_GLANCE_GESTURE_SENSOR CUSTOM_KERNEL_PEDOMETER CUSTOM_KERNEL_SHAKE_SENSOR CUSTOM_KERNEL_PEDOMETERENSOR CUSTOM_KERNEL_ACTIVITY_SENSOR CUSTOM_KERNEL_SIGNIFICANT_MOTION_SENSOR CUSTOM_KERNEL_STEP_COUNTER MTK_GMO_ROM_OPTIMIZE MTK_GMO_RAM_OPTIMIZE MTK_ENABLE_MD3 SENSOR_BATCH_SUPPORT MTK_EPDG_SUPPORT MTK_LOSSLESS_BT_SUPPORT MTK_DTAG_DUAL_APN_SUPPORT MTK_DEINTERLACE_SUPPORT MTK_WIFI_MCC_SUPPORT MTK_JEITA_STANDARD_SUPPORT MTK_AUDIO_ALAC_SUPPORT MTK_BQ24261_SUPPORT MTK_REGIONALPHONE_SUPPORT MTK_VIDEO_VP8ENC_SUPPORT LENOVO_X2 MTK_BQ24250_SUPPORT X2_BQ27531_SUPPORT X2_CHARGING_STANDARD_SUPPORT MTK_MAX77819_SUPPORT MTK_PCA9575A_SUPPORT MTK_MD_LOW_BAT_SUPPORT MTK_ALPS_BOX_TVE_SUPPORT MTK_EXTMD_NATIVE_DOWNLOAD_SUPPORT MTK_ALPS_BOX_DONGLE_SUPPORT MTK_ETHERNET_SUPPORT MTK_BESSURROUND_SUPPORT MTK_BOX_AUDIO_DDPLUS_SUPPORT MTK_PLAYBACK_60FPS_TO_30FPS MTK_CAM_MMSDK_SUPPORT MTK_ANT_SUPPORT MTK_MIRAVISION_SETTING_SUPPORT MTK_PUMP_EXPRESS_SUPPORT MTK_BQ24157_SUPPORT MTK_MPEG_DASH_SUPPORT MTK_VOLTE_SUPPORT MTK_IMS_SUPPORT MTK_VOW_SUPPORT MTK_IPTV_SUPPORT MTK_PASSPOINT_R2_SUPPORT MTK_EXTERNAL_DONGLE_SUPPORT MTK_ALPS_BOX_SUPPORT MTK_OD_SUPPORT MTK_BQ24296_SUPPORT MTK_CAM_HDR_SUPPORT MTK_TC1_FEATURE MTK_BATTERY_PROTECT MTK_WIRELESS_CHARGER_SUPPORT MTK_CAM_STEREO_CAMERA_SUPPORT MTK_BESLOUDNESS_SUPPORT MTK_CAM_VHDR_SUPPORT MTK_CAM_EIS_SUPPORT MTK_CAM_VIDEO_FACEBEAUTY_SUPPORT MTK_CAM_FACEBEAUTY_SUPPORT MTK_WFD_SINK_UIBC_SUPPORT MTK_WFD_SINK_SUPPORT MTK_CAM_VSS_SUPPORT MTK_CAM_ZSD_SUPPORT MTK_POWER_EXT_DETECT MTK_CAM_LOMO_SUPPORT MTK_POST_PROCESS_FRAMEWORK_SUPPORT MTK_CAM_DEPTH_AF_SUPPORT MTK_MERGE_INTERFACE_SUPPORT MTK_CAM_NATIVE_PIP_SUPPORT MTK_CAM_NR3D_SUPPORT MTK_CAM_SINGLE_3DSHOT_SUPPORT MTK_CAM_AUTORAMA_SUPPORT MTK_CAM_IMAGE_REFOCUS_SUPPORT MTK_CAM_ASD_SUPPORT MTK_CAM_FD_SUPPORT MTK_MLC_NAND_SUPPORT MTK_FORCE_CLUSTER1 TRUSTONIC_TEE_SUPPORT MTK_RAWFS_NAND_SUPPORT MTK_LOMO_SUPPORT MTK_EXTERNAL_LDO MTK_PMIC_MT6397 MTK_TOUCH_BOOST MTK_SLOW_MOTION_VIDEO_SUPPORT MTK_VIDEO_HEVC_SUPPORT MTK_AUTO_DETECT_ALSPS MTK_GPT_SCHEME_SUPPORT MT6280_SUPER_DONGLE MTK_CSD_DIALER_SUPPORT MTK_PRIVACY_PROTECTION_LOCK MTK_SIM_RECOVERY MTK_FAN5402_SUPPORT MTK_AUDIO_HD_REC_SUPPORT MTK_AUDIO MTK_CLEARMOTION_SUPPORT MTK_FSCK_TUNE HW_HAVE_TP_THREAD MTK_NEW_COMBO_EMMC_SUPPORT MTK_PERSIST_PARTITION_SUPPORT MTK_DX_HDCP_SUPPORT MTK_COMBO_NAND_SUPPORT MTK_SMARTBOOK_SUPPORT MTK_DFO_RESOLUTION_SUPPORT MTK_HIGH_RESOLUTION_AUDIO_SUPPORT MTK_AUDIO_EXTCODEC_SUPPORT MTK_SUBTITLE_SUPPORT MTK_SDIOAUTOK_SUPPORT MTK_MSDC1_NOT_SUPPORT_SDR104 MTK_FEMTO_CELL_SUPPORT MTK_CHIPTEST_INT MTK_USER_ROOT_SWITCH MTK_ENABLE_MD5 MTK_WMV_PLAYBACK_SUPPORT MTK_WMA_PLAYBACK_SUPPORT MTK_MOBILE_MANAGEMENT MTK_PARTITION_TABLE_PLAIN_TEXT MTK_DOLBY_DAP_SUPPORT MTK_BQ24156_SUPPORT CUSTOM_KERNEL_BAROMETER MTK_BQ24158_SUPPORT MTK_TABLET_PLUGIN_BUILD MTK_MULTI_PARTITION_MOUNT_ONLY_SUPPORT MTK_BQ24297_SUPPORT MTK_3GDONGLE_SUPPORT MTK_PM_STATS_SUPPORT MTK_AUDIO_DDPLUS_SUPPORT MTK_SEC_WFD_VIDEO_PATH_SUPPORT MTK_BATLOWV_NO_PANEL_ON_EARLY MTK_SIM_HOT_SWAP_COMMON_SLOT MTK_TER_SERVICE MTK_OWNER_SDCARD_ONLY_SUPPORT MTK_DRM_PLAYREADY_SUPPORT MTK_SHOW_MSENSOR_TOAST_SUPPORT MTK_AUDIO_CHANGE_SUPPORT IS_VCORE_USE_6333VCORE IS_VRF18_USE_6333VRF18 IS_VM_USE_6333VM MTK_VIDEO_AUTO_FLASH_SUPPORT MTK_AIV_SUPPORT MTK_WFD_HDCP_TX_SUPPORT PURE_AP_USE_EXTERNAL_MODEM MTK_NO_NEED_USB_LED MTK_HDMI_HDCP_SUPPORT MTK_INTERNAL_HDMI_SUPPORT MTK_INTERNAL_MHL_SUPPORT MTK_DMNR_TUNING_AT_MD NAND_OTP_SUPPORT MTK_DVFS_DISABLE_LOW_VOLTAGE_SUPPORT MTK_VOIP_ENHANCEMENT_SUPPORT MTK_HANDSFREE_DMNR_SUPPORT MTK_SWCHR_SUPPORT MTK_MT6333_SUPPORT MTK_DRM_KEY_MNG_SUPPORT MTK_SEC_VIDEO_PATH_SUPPORT MTK_WVDRM_L1_SUPPORT MTK_IN_HOUSE_TEE_SUPPORT MTK_DISABLE_POWER_ON_OFF_VOLTAGE_LIMITATION MTK_CTA_SUPPORT MTK_DFO_SUPPORT MTK_BIP_SCWS MTK_MDM_FUMO MTK_MDM_LAWMO MTK_MDM_SCOMO MTK_UART_USB_SWITCH MTK_FAT_ON_NAND MTK_AUDIO_RAW_SUPPORT MTK_MD_SHUT_DOWN_NT MTK_CACHE_MERGE_SUPPORT MTK_IPV6_TETHER_PD_MODE MTK_YMAL_SCATTER_FILE_SUPPORT MTK_RADIOOFF_POWER_OFF_MD MTK_MT8193_HDCP_SUPPORT MTK_PLATFORM_OPTIMIZE MTK_HW_ENHANCE MTK_PQ_SUPPORT MTK_AUDIO_ADPCM_SUPPORT HAVE_ADPCMENCODE_FEATURE MTK_2IN1_SPK_SUPPORT MTK_BQ27541_SUPPORT MTK_WFD_SUPPORT MTK_IPV6_TETHER_NDP_MODE MTK_TETHERING_EEM_SUPPORT MTK_AAL_SUPPORT MTK_KERNEL_POWER_OFF_CHARGING MTK_FLIGHT_MODE_POWER_OFF_MD MTK_ENABLE_MD1 MTK_ENABLE_MD2 MTK_ACMT_DEBUG MTK_MMPROFILE_SUPPORT MTK_GPS_SUPPORT MTK_MULTIBRIDGE_SUPPORT MTK_CAMCORDER_PROFILE_MID_MP4 MTK_FM_SUPPORT MTK_TABLET_PLATFORM MTK_AUTO_DETECT_MAGNETOMETER MTK_NCP1851_SUPPORT MTK_NFC_SUPPORT MTK_MASS_STORAGE MTK_COMBO_QUICK_SLEEP_SUPPORT MTK_MT8193_SUPPORT HAVE_AACENCODE_FEATURE MTK_FM_50KHZ_SUPPORT MTK_COMBO_SUPPORT MTK_2SDCARD_SWAP CUSTOM_KERNEL_GYROSCOPE MTK_SHARED_SDCARD MTK_EMMC_DISCARD MTK_DSPIRDBG MTK_MULTI_STORAGE_SUPPORT CUSTOM_KERNEL_ALSPS MTK_ENABLE_VIDEO_EDITOR CUSTOM_KERNEL_ACCELEROMETER MTK_DUAL_MIC_SUPPORT MTK_WAPI_SUPPORT MTK_FD_SUPPORT MTK_DISPLAY_HIGH_RESOLUTION MTK_BT_SUPPORT MTK_TABLET_DRAM MTK_FACEBEAUTY_SUPPORT MTK_FAN5405_SUPPORT MTK_BQ24160_SUPPORT MTK_HIGH_QUALITY_THUMBNAIL MTK_SPH_EHN_CTRL_SUPPORT MTK_FM_TX_SUPPORT MTK_BRAZIL_CUSTOMIZATION_VIVO MTK_BRAZIL_CUSTOMIZATION_CLARO MTK_IPV6_SUPPORT MTK_AUTORAMA_SUPPORT MTK_EAP_SIM_AKA MTK_BSP_PACKAGE MTK_BRAZIL_CUSTOMIZATION MTK_NVRAM_SECURITY CUSTOM_KERNEL_MAGNETOMETER MTK_WLANBT_SINGLEANT MTK_WLAN_SUPPORT MTK_TETHERINGIPV6_SUPPORT MTK_AUTO_DETECT_ACCELEROMETER HAVE_CMMB_FEATURE MTK_MT8193_HDMI_SUPPORT MTK_EMMC_SUPPORT_OTP MTK_TB_APP_CALL_FORCE_SPEAKER_ON MTK_PRODUCT_INFO_SUPPORT MTK_FM_SHORT_ANTENNA_SUPPORT MTK_HDMI_SUPPORT MTK_M4U_SUPPORT MTK_MT8193_NFI_SUPPORT MTK_ION_SUPPORT MTK_FSCK_MSDOS_MTK MTK_BQ24196_SUPPORT MTK_FM_RX_SUPPORT MTK_WB_SPEECH_SUPPORT ENCRY_PARTITION_SUPPORT MTK_SD_REINIT_SUPPORT MTK_SENSOR_SUPPORT MTK_EMMC_SUPPORT MTK_COMBO_CORE_DUMP_SUPPORT MTK_DHCPV6C_WIFI MTK_EMULATOR_SUPPORT MTK_NAND_UBIFS_SUPPORT MTK_YAML_SCATTER_FILE_SUPPORT MTK_VIDEO_VP9_SUPPORT MTK_THERMAL_PA_VIA_ATCMD MTK_FLV_PLAYBACK_SUPPORT MTK_AUDIO_APE_SUPPORT MTK_AVI_PLAYBACK_SUPPORT USE_FRAUNHOFER_AAC MTK_DRM_APP MTK_OGM_PLAYBACK_SUPPORT MTK_MTKPS_PLAYBACK_SUPPORT MTK_MT6306_SUPPORT
+AUTO_ADD_GLOBAL_DEFINE_BY_NAME_VALUE = MTK_FUSED_LOCATION_SUPPORT MTK_NFC_PACKAGE MTK_CAM_STEREO_CAMERA_FACING MTK_JPEG_HW_RESIZER_TYPE MAXIM_SPEAKER_SUPPORT MTK_VZW_CHIPTEST_MODE_SUPPORT MTK_CAM_ZSDHDR_SUPPORT MTK_CAM_ZSDMFB_SUPPORT MTK_AUDIO_MIC_INVERSE SIM_ME_LOCK_MODE CUSTOM_CONFIG_MAX_DRAM_SIZE MTK_MD_SBP_CUSTOM_VALUE MTK_CAM_MFB_SUPPORT MTK_CAM_CONTINUOUS_SHOT_MODE MTK_FW_UPGRADE_APP MTK_FW_UPGRADE MTK_VIDEO_4KH264_SUPPORT MTK_HOTKNOT_SUPPORT MTK_TELEPHONY_BOOTUP_MODE_SLOT2 MTK_TELEPHONY_BOOTUP_MODE_SLOT1 MTK_NFC_SE_NUM MTK_OVERLAY_ENGINE_SUPPORT MTK_SIM1_SOCKET_TYPE MTK_SIM2_SOCKET_TYPE CUSTOM_KERNEL_MAIN2_IMGSENSOR CUSTOM_KERNEL_SSW MTK_LCM_PHYSICAL_ROTATION LCM_WIDTH MTK_SINGLE_3DSHOT_SUPPORT MTK_EXTERNAL_MODEM_SLOT MTK_NEON_SUPPORT LCM_HEIGHT MTK_NTFS_OPENSOURCE_SUPPORT
+AUTO_ADD_GLOBAL_DEFINE_BY_VALUE = CUSTOM_HAL_LENS BOOT_LOGO MTK_AUDIO_BLOUD_CUSTOMPARAMETER_REV MTK_PLATFORM CUSTOM_KERNEL_LENS CUSTOM_KERNEL_MAIN_BACKUP_LENS MTK_MODEM_SUPPORT CUSTOM_KERNEL_MAIN_IMGSENSOR MTK_BT_CHIP MTK_WLAN_CHIP CUSTOM_KERNEL_SUB_BACKUP_IMGSENSOR CUSTOM_KERNEL_MAIN_BACKUP_IMGSENSOR CUSTOM_KERNEL_FLASHLIGHT CUSTOM_KERNEL_SUB_IMGSENSOR CUSTOM_KERNEL_SUB_LENS CUSTOM_KERNEL_IMGSENSOR MTK_FM_RX_AUDIO MTK_COMBO_CHIP MTK_GPS_CHIP CUSTOM_KERNEL_SUB_BACKUP_LENS CUSTOM_KERNEL_MAIN_LENS MTK_FM_TX_AUDIO MTK_FM_CHIP CUSTOM_KERNEL_MAIN2_IMGSENSOR BOOT_LOGO
+BOOT_LOGO = hdplus
+BUILD_KERNEL = yes
+BUILD_LK = yes
+BUILD_MD32 = no
+BUILD_MTK_SDK =
+BUILD_PRELOADER = yes
+BUILD_UBOOT = no
+CUSTOM_BUILD_VERNO =
+CUSTOM_CONFIG_MAX_DRAM_SIZE = 0x80000000
+CUSTOM_HAL_ANT = mt6739_ant_m1
+CUSTOM_HAL_AUDIOFLINGER = audio
+CUSTOM_HAL_BLUETOOTH = bluetooth
+CUSTOM_HAL_CAMERA = camera
+CUSTOM_HAL_CAM_CAL = BRCB032GWZ_3 GT24c32a cat24c16
+CUSTOM_HAL_COMBO = mt6739
+CUSTOM_HAL_EEPROM = dummy_eeprom
+CUSTOM_HAL_FLASHLIGHT = dummy_flashlight
+CUSTOM_HAL_IMGSENSOR = s5k3l8_mipi_raw s5k3l9_mipi_raw hi556_mipi_raw gc5025_mipi_raw gc5034_mipi_raw
+CUSTOM_HAL_LENS = dw9714af dummy_lens
+CUSTOM_HAL_MAIN2_IMGSENSOR = gc5025_mipi_raw gc5034_mipi_raw
+CUSTOM_HAL_MAIN_BACKUP_IMGSENSOR =
+CUSTOM_HAL_MAIN_BACKUP_LENS =
+CUSTOM_HAL_MAIN_IMGSENSOR = s5k3l8_mipi_raw s5k3l9_mipi_raw
+CUSTOM_HAL_MAIN_LENS = dw9714af
+CUSTOM_HAL_MSENSORLIB = mmc328x akm8975 ami304 yamaha530 mag3110 akmd8963 bmm050 mc6420 mmc3416x s62xd lsm303md qmc5983 akmd09911 mc64xx bmm056 mc41xx akmd09912 akmd09918 memsicd3680x
+CUSTOM_HAL_SENSORS = sensor
+CUSTOM_HAL_SUB_BACKUP_IMGSENSOR =
+CUSTOM_HAL_SUB_BACKUP_LENS =
+CUSTOM_HAL_SUB_IMGSENSOR = hi556_mipi_raw
+CUSTOM_HAL_SUB_LENS = dummy_lens
+CUSTOM_HIFI_SENSORS = no
+CUSTOM_KERNEL_ACCELEROMETER = yes
+CUSTOM_KERNEL_ACTIVITY_SENSOR = no
+CUSTOM_KERNEL_ALSPS = yes
+CUSTOM_KERNEL_ANSWER_CALL_SENSOR =
+CUSTOM_KERNEL_BAROMETER =
+CUSTOM_KERNEL_BATTERY = battery
+CUSTOM_KERNEL_BIOMETRIC_SENSOR = no
+CUSTOM_KERNEL_CAMERA = camera
+CUSTOM_KERNEL_CAM_CAL = BRCB032GWZ_3 GT24c32a cat24c16
+CUSTOM_KERNEL_CORE = src
+CUSTOM_KERNEL_DCT = dct
+CUSTOM_KERNEL_DEVICE_ORIENTATION =
+CUSTOM_KERNEL_EEPROM = dummy_eeprom
+CUSTOM_KERNEL_FACE_DOWN_SENSOR = no
+CUSTOM_KERNEL_FLASHLIGHT = constant_flashlight
+CUSTOM_KERNEL_GLANCE_GESTURE_SENSOR = no
+CUSTOM_KERNEL_GYROSCOPE = no
+CUSTOM_KERNEL_HEADSET = accdet
+CUSTOM_KERNEL_IMGSENSOR = s5k3l8_mipi_raw s5k3l9_mipi_raw hi556_mipi_raw gc5025_mipi_raw gc5034_mipi_raw
+CUSTOM_KERNEL_IN_POCKET_SENSOR = no
+CUSTOM_KERNEL_KPD = kpd
+CUSTOM_KERNEL_LEDS = mt65xx
+CUSTOM_KERNEL_LENS = dw9714af dummy_lens
+CUSTOM_KERNEL_MAGNETOMETER = yes
+CUSTOM_KERNEL_MAIN2_BACKUP_IMGSENSOR = gc5034_mipi_raw
+CUSTOM_KERNEL_MAIN2_IMGSENSOR = gc5025_mipi_raw
+CUSTOM_KERNEL_MAIN_BACKUP_IMGSENSOR =
+CUSTOM_KERNEL_MAIN_BACKUP_LENS =
+CUSTOM_KERNEL_MAIN_IMGSENSOR = s5k3l8_mipi_raw s5k3l9_mipi_raw
+CUSTOM_KERNEL_MAIN_LENS = dw9714af
+CUSTOM_KERNEL_MOTION_DETECT =
+CUSTOM_KERNEL_ORIENTATION_SENSOR = yes
+CUSTOM_KERNEL_PDR_SENSOR = no
+CUSTOM_KERNEL_PEDOMETER = no
+CUSTOM_KERNEL_PICK_UP_SENSOR = no
+CUSTOM_KERNEL_RTC = rtc
+CUSTOM_KERNEL_SENSORHUB = no
+CUSTOM_KERNEL_SHAKE_SENSOR = no
+CUSTOM_KERNEL_SIGNIFICANT_MOTION_SENSOR = no
+CUSTOM_KERNEL_SOUND = amp_6323pmic_spk
+CUSTOM_KERNEL_SSW =
+CUSTOM_KERNEL_STATIONARY_SENSOR =
+CUSTOM_KERNEL_STEP_COUNTER =
+CUSTOM_KERNEL_SUB_BACKUP_IMGSENSOR =
+CUSTOM_KERNEL_SUB_BACKUP_LENS =
+CUSTOM_KERNEL_SUB_IMGSENSOR = hi556_mipi_raw
+CUSTOM_KERNEL_SUB_LENS = dummy_lens
+CUSTOM_KERNEL_TILT_DETECTOR_SENSOR = no
+CUSTOM_KERNEL_TOUCHPANEL = GT1XX
+CUSTOM_KERNEL_UNCALI_GYRO_SENSOR =
+CUSTOM_KERNEL_UNCALI_MAG_SENSOR =
+CUSTOM_KERNEL_USB = mt6577
+CUSTOM_KERNEL_VIBRATOR = vibrator
+CUSTOM_KERNEL_WAKE_GESTURE_SENSOR = no
+CUSTOM_MODEM = aus6739_66_n1_lwctg
+CUSTOM_SEC_AUTH_SUPPORT = no
+CUSTOM_SEC_SIGNTOOL_SUPPORT = no
+DCORE_TEST_MODE1 = no
+DISABLE_EARPIECE = no
+ENCRY_PARTITION_SUPPORT = no
+EVB = no
+EVDO_IR_SUPPORT = no
+FEATURE_FTM_AUDIO_AUTOTEST = yes
+FEATURE_FTM_AUDIO_TEST = yes
+FPGA_EARLY_PORTING = no
+GOOGLE_RELEASE_RIL = no
+HAVE_AACENCODE_FEATURE = yes
+HAVE_ADPCMENCODE_FEATURE = no
+HAVE_APPC_FEATURE = no
+HAVE_SRSAUDIOEFFECT_FEATURE = no
+HAVE_VORBISENC_FEATURE = yes
+HW_HAVE_TP_THREAD = no
+IS_VCORE_USE_6333VCORE = no
+IS_VM_USE_6333VM = no
+IS_VRF18_USE_6333VRF18 = no
+KBUILD_OUTPUT_SUPPORT = yes
+LCM_FAKE_HEIGHT = 0
+LCM_FAKE_WIDTH = 0
+LCM_HEIGHT = 1440
+LCM_WIDTH = 720
+LIGHT_NVRAM_DAEMON = no
+LINUX_KERNEL_VERSION = kernel-4.4
+LOVELYFONTS_ICON_SHOW = no
+LOVELYFONTS_SUPPORT = yes
+MAXIM_SPEAKER_SUPPORT = no
+MCUPM_FW_USE_PARTITION = yes
+MD32_TOOLCHAIN_MODULE = IPDesigner/12R2.36-64
+MD5_SIZE = 0x01600000
+MD5_SMEM_SIZE = 0x00200000
+MICROTRUST_TEE_SUPPORT = yes
+MICROTRUST_IFAA_SUPPORT = yes
+MNTL_SUPPORT = no
+MT6280_SUPER_DONGLE = no
+MTK_2IN1_SPK_SUPPORT = no
+MTK_2SDCARD_SWAP = no
+MTK_3GDONGLE_SUPPORT = no
+MTK_AAL_SUPPORT = yes
+MTK_ACAO_SUPPORT = yes
+MTK_ACDK_BUILD_DUMMY_ENG = no
+MTK_ACMT_DEBUG = no
+MTK_ACTIVE_NOISE_CANCELLATION = no
+MTK_ACWFDIALOG_APP = yes
+MTK_AEE_SUPPORT = yes
+MTK_AFPSGO_FBT_GAME = yes
+MTK_AGPS_APP = yes
+MTK_AIV_SUPPORT = no
+MTK_ALARM_AWARE_UPLINK_SUPPORT = yes
+MTK_ALPS_BOX_DONGLE_SUPPORT = no
+MTK_ALPS_BOX_SUPPORT = no
+MTK_ALPS_BOX_TVE_SUPPORT = no
+MTK_ALPS_GATEWAY_AP_ROUTER_SUPPORT = no
+MTK_ALPS_GATEWAY_SUPPORT = yes
+MTK_ANDROID_FOR_WORK_SUPPORT = yes
+MTK_ANT_SUPPORT = no
+MTK_AOD_SUPPORT = no
+MTK_API_CHECK = yes
+MTK_APKINSTALLER_APP = no
+MTK_APPENDED_DTB_SUPPORT = yes
+MTK_APP_GUIDE = yes
+MTK_AP_SPEECH_ENHANCEMENT = no
+MTK_ASR_SUPPORT = no
+MTK_ATF_SUPPORT = yes
+MTK_AUDENH_SUPPORT = no
+MTK_AUDIO = yes
+MTK_AUDIO_ADPCM_SUPPORT = no
+MTK_AUDIO_ALAC_SUPPORT = no
+MTK_AUDIO_APE_SUPPORT = no
+MTK_AUDIO_BLOUD_CUSTOMPARAMETER_REV = MTK_AUDIO_BLOUD_CUSTOMPARAMETER_V5
+MTK_AUDIO_CHANGE_SUPPORT = no
+MTK_AUDIO_CODEC_SUPPORT_TABLET = no
+MTK_AUDIO_DDPLUS_SUPPORT = no
+MTK_AUDIO_EXTCODEC_SUPPORT = no
+MTK_AUDIO_GAIN_TABLE_SUPPORT = no
+MTK_AUDIO_HD_REC_SUPPORT = yes
+MTK_AUDIO_HYBRID_NLE_SUPPORT = no
+MTK_AUDIO_MIC_INVERSE = no
+MTK_AUDIO_NUMBER_OF_MIC = 2
+MTK_AUDIO_NUMBER_OF_SPEAKER = 1
+MTK_AUDIO_RAW_SUPPORT = yes
+MTK_AUDIO_SPEAKER_PATH = int_lo_buf
+MTK_AUDIO_TUNING_TOOL_VERSION = V2.2
+MTK_AUDIO_TUNNELING_SUPPORT = no
+MTK_AUIDO_MIC_INVERSE = no
+MTK_AURISYS_FRAMEWORK_SUPPORT = yes
+MTK_AURISYS_PHONE_CALL_SUPPORT = no
+MTK_AUTOIP_SUPPORT = no
+MTK_AUTORAMA_SUPPORT = yes
+MTK_AUTO_DETECT_ACCELEROMETER = no
+MTK_AUTO_DETECT_ALSPS = no
+MTK_AUTO_DETECT_MAGNETOMETER = no
+MTK_AUTO_SANITY = no
+MTK_AVI_PLAYBACK_SUPPORT = yes
+MTK_AWS_SUPPORT = no
+MTK_BASIC_PACKAGE = no
+MTK_BATLOWV_NO_PANEL_ON_EARLY = no
+MTK_BATTERY_PROTECT = no
+MTK_BESLOUDNESS_SUPPORT = yes
+MTK_BESSURROUND_SUPPORT = no
+MTK_BG_POWER_SAVING_SUPPORT = yes
+MTK_BG_POWER_SAVING_UI_SUPPORT = yes
+MTK_BIP_SCWS = yes
+MTK_BLULIGHT_DEFENDER_SUPPORT = yes
+MTK_BOX_AUDIO_DDPLUS_SUPPORT = no
+MTK_BOX_CAM_SUPPORT = no
+MTK_BQ24156_SUPPORT = no
+MTK_BQ24157_SUPPORT = no
+MTK_BQ24158_SUPPORT = no
+MTK_BQ24160_SUPPORT = no
+MTK_BQ24261_SUPPORT = no
+MTK_BQ24296_SUPPORT = no
+MTK_BQ24297_SUPPORT = no
+MTK_BQ27541_SUPPORT = no
+MTK_BRANCH = alps-mp-n1.mp18
+MTK_BRAZIL_CUSTOMIZATION = no
+MTK_BRAZIL_CUSTOMIZATION_CLARO = no
+MTK_BRAZIL_CUSTOMIZATION_TIM = no
+MTK_BRAZIL_CUSTOMIZATION_VIVO = no
+MTK_BSP_PACKAGE = no
+MTK_BTLOGGER_SUPPORT = yes
+MTK_BT_BLUEDROID_A2DP_APTX = no
+MTK_BT_BLUEDROID_AVRCP_TG_15 = no
+MTK_BT_BLUEDROID_AVRCP_TG_16 = no
+MTK_BT_BLUEDROID_DUN_GW_12 = no
+MTK_BT_BLUEDROID_HFP_AG_17 = no
+MTK_BT_BLUEDROID_PLUS = yes
+MTK_BT_CHIP = MTK_CONSYS_MT6739
+MTK_BT_CUSTOM = no
+MTK_BT_HOST_SNOOP_LOG_SUPPORT = yes
+MTK_BT_SUPPORT = yes
+MTK_BT_WIFI_COEX_RADIO_MODIFY = no
+MTK_BUFFER_COMPRESSION_SUPPORT = no
+MTK_BUILD_VERNO = alps-mp-n1.mp18-V1_aus6739.66.n1_P62
+MTK_BWC_SUPPORT = yes
+MTK_C2K_LTE_MODE = 0
+MTK_CACHE_MERGE_SUPPORT = no
+MTK_CALENDAR_IMPORTER_APP = yes
+MTK_CAMCORDER_PROFILE_MID_MP4 = no
+MTK_CAMERA_APP = no
+MTK_CAM_ASD_SUPPORT = yes
+MTK_CAM_AUTORAMA_SUPPORT = yes
+MTK_CAM_CONTINUOUS_SHOT_MODE = 1
+MTK_CAM_DEPTH_AF_SUPPORT = no
+MTK_CAM_DUALPD_SUPPORT = yes
+MTK_CAM_DUAL_ZOOM_MTK_FOV_SUPPORT = no
+MTK_CAM_DUAL_ZOOM_SUPPORT = no
+MTK_CAM_EIS_SUPPORT = yes
+MTK_CAM_FACEBEAUTY_SUPPORT = no
+MTK_CAM_FD_SUPPORT = yes
+MTK_CAM_HDR_DETECTION_MODE = 0
+MTK_CAM_HDR_SUPPORT = yes
+MTK_CAM_IMAGE_REFOCUS_SUPPORT = NONE
+MTK_CAM_LOMO_SUPPORT = yes
+MTK_CAM_MFB_BUILDIN_SUPPORT = 0
+MTK_CAM_MFB_SUPPORT = 0
+MTK_CAM_MMSDK_SUPPORT = yes
+MTK_CAM_NATIVE_PIP_SUPPORT = no
+MTK_CAM_NR3D_SUPPORT = no
+MTK_CAM_PDO_TEST_ENABLE = no
+MTK_CAM_SINGLE_3DSHOT_SUPPORT = no
+MTK_CAM_STEREO_CAMERA_FACING = rear
+MTK_CAM_STEREO_CAMERA_SUPPORT = no
+MTK_CAM_STEREO_DENOISE_SUPPORT = no
+MTK_CAM_SW_VERSION = ver1
+MTK_CAM_USER_DBG_LOG_OFF = no
+MTK_CAM_VHDR_SUPPORT = no
+MTK_CAM_VIDEO_FACEBEAUTY_SUPPORT = no
+MTK_CAM_VSDOF_SUPPORT = no
+MTK_CAM_VSS_SUPPORT = yes
+MTK_CAM_ZSDHDR_SUPPORT = no
+MTK_CAM_ZSDMFB_SUPPORT = no
+MTK_CAM_ZSD_SUPPORT = yes
+MTK_CARRIEREXPRESS_APK_INSTALL_SUPPORT = no
+MTK_CARRIEREXPRESS_SWITCH_MODE = 1
+MTK_CC33_SUPPORT = no
+MTK_CDS_EM_SUPPORT = yes
+MTK_CHAMELEON_DISPLAY_SUPPORT = no
+MTK_CHARM_SUPPORT = no
+MTK_CHIPTEST_INT = no
+MTK_CHIP_VER = S01
+MTK_CHIP_VERSION = 0
+MTK_CHKIMGSIZE_SUPPORT = yes
+MTK_CIP_SUPPORT = no
+MTK_CLEARMOTION_SUPPORT = no
+MTK_CMAS_SUPPORT = yes
+MTK_CMCC_FT_PRECHECK_SUPPORT = no
+MTK_CMCC_RCS_QRCODE_SUPPORT = no
+MTK_COMBO_CHIP = CONSYS_6739
+MTK_COMBO_NAND_SUPPORT = no
+MTK_COMBO_SUPPORT = yes
+MTK_CONSUMER_PARTIAL_UPDATE_SUPPORT = no
+MTK_CPU = arm_cortexa7
+MTK_CROSSMOUNT_MULTI_CH_SUPPORT = no
+MTK_CROSSMOUNT_SUPPORT = no
+MTK_CSD_DIALER_SUPPORT = no
+MTK_CTA_SET = yes
+MTK_CTA_SUPPORT = no
+MTK_CTM_SUPPORT = no
+MTK_CTSC_MTBF_INTERNAL_SUPPORT = no
+MTK_CT_VOLTE_SUPPORT = no
+MTK_CUSTOMERSERVICE_APP = no
+MTK_CUSTOM_USERLOAD_ENGINEERMODE = yes
+MTK_DAL_SUPPORT = no
+MTK_DATADIALOG_APP = no
+MTK_DEFAULT_DATA_OFF = no
+MTK_DEINTERLACE_SUPPORT = yes
+MTK_DEVREG_APP = no
+MTK_DFO_RESOLUTION_SUPPORT = no
+MTK_DHCPV6C_WIFI = yes
+MTK_DIALER_SEARCH_SUPPORT = yes
+MTK_DIGITAL_MIC_SUPPORT = no
+MTK_DISABLE_CAPABILITY_SWITCH = no
+MTK_DISABLE_EFUSE = no
+MTK_DISABLE_PERSIST_VSIM = no
+MTK_DISABLE_POWER_ON_OFF_VOLTAGE_LIMITATION = no
+MTK_DISPLAY_HIGH_RESOLUTION = no
+MTK_DITHERING_SUPPORT = yes
+MTK_DMNR_TUNING_AT_MD = no
+MTK_DM_APP = no
+MTK_DM_ENTRY_DISPLAY = no
+MTK_DM_RELEASE = no
+MTK_DM_VERITY_OFF = no
+MTK_DOCOMO_SUPPORT = no
+MTK_DOLBY_DAP_SUPPORT = no
+MTK_DP_FRAMEWORK = yes
+MTK_DRE30_SUPPORT = no
+MTK_DRM_APP = yes
+MTK_DRM_KEY_MNG_SUPPORT = no
+MTK_DRM_PLAYREADY_SUPPORT = no
+MTK_DSPIRDBG = no
+MTK_DTAG_DUAL_APN_SUPPORT = no
+MTK_DTBO_FEATURE = no
+MTK_DUAL_CHARGER_SUPPORT = no
+MTK_DUAL_MIC_SUPPORT = yes
+MTK_DVFS_DISABLE_LOW_VOLTAGE_SUPPORT = no
+MTK_DX_HDCP_SUPPORT = no
+MTK_DYNAMIC_FPS_SUPPORT = no
+MTK_DYNAMIC_IMS_SWITCH_SUPPORT = yes
+MTK_DYNAMIC_SBP_SUPPORT = yes
+MTK_EAP_SIM_AKA = yes
+MTK_ECCCI_C2K = yes
+MTK_EFUSE_WRITER_SUPPORT = yes
+MTK_EMBMS_SUPPORT = no
+MTK_EMCAMERA_APP = yes
+MTK_EMMC_DISCARD = no
+MTK_EMMC_SUPPORT = yes
+MTK_EMMC_SUPPORT_OTP = yes
+MTK_EMULATOR_SUPPORT = no
+MTK_ENABLE_DIVX_DECODER = no
+MTK_ENABLE_MD1 = yes
+MTK_ENABLE_MD2 = no
+MTK_ENABLE_MD3 = no
+MTK_ENABLE_MD5 = no
+MTK_ENABLE_NATIVE_ASAN = no
+MTK_ENABLE_S263_DECODER = no
+MTK_ENABLE_VIDEO_EDITOR = no
+MTK_ENCRYPTION_DEFAULT_OFF = no
+MTK_ENCRYPTION_FDE_TO_FBE = yes
+MTK_ENCRYPTION_TYPE_FILE = yes
+MTK_ENGINEERMODE_APP = yes
+MTK_EPDG_SUPPORT = yes
+MTK_ESN_TRACK_APP = no
+MTK_ETHERNET_SUPPORT = no
+MTK_ETWS_SUPPORT = no
+MTK_EXTERNAL_DONGLE_SUPPORT = no
+MTK_EXTERNAL_LDO = no
+MTK_EXTERNAL_MODEM_SLOT = 0
+MTK_EXTERNAL_SIM_ONLY_SLOTS = 0
+MTK_EXTERNAL_SIM_SUPPORT = no
+MTK_EXTMD_NATIVE_DOWNLOAD_SUPPORT = no
+MTK_FACEBEAUTY_SUPPORT = yes
+MTK_FACTORY_GAMMA_SUPPORT = no
+MTK_FACTORY_MODE_IN_GB2312 = yes
+MTK_FACTORY_RESET_PROTECTION_SUPPORT = yes
+MTK_FAN5402_SUPPORT = no
+MTK_FAN5405_SUPPORT = no
+MTK_FASTBOOT_SUPPORT = yes
+MTK_FAT_ON_NAND = no
+MTK_FD_FORCE_REL_SUPPORT = no
+MTK_FD_SUPPORT = yes
+MTK_FEMTO_CELL_SUPPORT = no
+MTK_FENCE_SUPPORT = yes
+MTK_FILEMANAGER_APP = yes
+MTK_FIRST_MD = 1
+MTK_FLIGHT_MODE_POWER_OFF_MD = no
+MTK_FLIGHT_MODE_POWER_OFF_MD_POLICY = 0
+MTK_FLV_PLAYBACK_SUPPORT = no
+MTK_FMRADIO_APP = yes
+MTK_FM_50KHZ_SUPPORT = no
+MTK_FM_CHIP = MT6625_FM
+MTK_FM_RX_AUDIO = FM_DIGITAL_INPUT
+MTK_FM_RX_SUPPORT = yes
+MTK_FM_SHORT_ANTENNA_SUPPORT = no
+MTK_FM_SUPPORT = yes
+MTK_FM_TX_AUDIO = FM_DIGITAL_OUTPUT
+MTK_FM_TX_SUPPORT = no
+MTK_FORCE_CLUSTER1 = no
+MTK_FOTA_ENTRY = no
+MTK_FOTA_RELEASE = no
+MTK_FOTA_SUPPORT = no
+MTK_FSCK_MSDOS_MTK = no
+MTK_FSCK_TUNE = no
+MTK_FUSED_LOCATION_SUPPORT = no
+MTK_FW_UPGRADE = no
+MTK_FW_UPGRADE_APP = no
+MTK_GAS_SERVICE_SUPPORT = yes
+MTK_GAUGE_VERSION = 30
+MTK_GLOBAL_PQ_SUPPORT = no
+MTK_GMO_RAM_OPTIMIZE = no
+MTK_GMO_ROM_OPTIMIZE = no
+MTK_GOOGLEOTA_SUPPORT = no
+MTK_GOOGLE_TRUSTY_SUPPORT = no
+MTK_GPS_CHIP = MTK_GPS_MT6631
+MTK_GPS_SUPPORT = yes
+MTK_GPT_SCHEME_SUPPORT = yes
+MTK_GPU_SUPPORT = yes
+MTK_GPU_VERSION = rgx auckland 1.8ED
+MTK_HAC_SUPPORT = no
+MTK_HANDSFREE_DMNR_SUPPORT = no
+MTK_HDMI_HDCP_SUPPORT = no
+MTK_HDMI_SUPPORT = no
+MTK_HDR_VIDEO_SUPPORT = no
+MTK_HEADER_SUPPORT = no
+MTK_HEADSET_ACTIVE_NOISE_CANCELLATION = no
+MTK_HEART_RATE_MONITOR_SUPPORT = no
+MTK_HIGH_QUALITY_THUMBNAIL = yes
+MTK_HIGH_RESOLUTION_AUDIO_SUPPORT = no
+MTK_HOTKNOT_SUPPORT = no
+MTK_HW_ENHANCE = no
+MTK_ICCS_SUPPORT = no
+MTK_IMS_SUPPORT = no
+MTK_INCALL_HANDSFREE_DMNR = no
+MTK_INCALL_NORMAL_DMNR = yes
+MTK_INCLUDE_MODEM_DB_IN_IMAGE = yes
+MTK_INTERNAL = no
+MTK_INTERNAL_API_CHECK = no
+MTK_INTERNAL_HDMI_SUPPORT = no
+MTK_INTERNAL_LANG_SET = no
+MTK_INTERNAL_MHL_SUPPORT = no
+MTK_INT_MD_SPE_FOR_EXT_MD = no
+MTK_IN_HOUSE_TEE_SUPPORT = no
+MTK_ION_SUPPORT = yes
+MTK_IPO_SUPPORT = no
+MTK_IPTV_SUPPORT = no
+MTK_IPV6_SUPPORT = yes
+MTK_IPV6_TETHER_NDP_MODE = no
+MTK_IPV6_TETHER_PD_MODE = no
+MTK_IRAT_SUPPORT = no
+MTK_IRTX_PWM_SUPPORT = no
+MTK_IRTX_SUPPORT = no
+MTK_JEITA_STANDARD_SUPPORT = no
+MTK_JPEG_HW_RESIZER_TYPE = HW_RESIZER_TYPE_2
+MTK_K64_SUPPORT=yes
+MTK_KERNEL_POWER_OFF_CHARGING = yes
+MTK_LAUNCHER_UNREAD_SUPPORT = yes
+MTK_LCM_DEVICE_TREE_SUPPORT = no
+MTK_LCM_PHYSICAL_ROTATION = 0
+MTK_LIVEWALLPAPER_APP = yes
+MTK_LOG2SERVER_APP = no
+MTK_LOG2SERVER_INTERNAL = no
+MTK_LOG_CUSTOMER_SUPPORT = yes
+MTK_LOG_SUPPORT_GPS = yes
+MTK_LOG_SUPPORT_MOBILE_LOG = yes
+MTK_LOMO_SUPPORT = no
+MTK_LWA_SUPPORT = no
+MTK_M4U_SUPPORT = no
+MTK_MAGICONFERENCE_SUPPORT = no
+MTK_MASS_STORAGE = no
+MTK_MD1_SUPPORT = 10
+MTK_MD2_SUPPORT = 4
+MTK_MD3_SUPPORT = 0
+MTK_MD5_SUPPORT = 5
+MTK_MDLOGGER_SUPPORT = yes
+MTK_MDM_APP = no
+MTK_MDM_FUMO = no
+MTK_MDM_LAWMO = no
+MTK_MDM_SCOMO = no
+MTK_MD_DIRECT_TETHERING_SUPPORT = no
+MTK_MD_LOW_BAT_SUPPORT = no
+MTK_MD_SBP_CUSTOM_VALUE =
+MTK_MD_SHUT_DOWN_NT = yes
+MTK_MEMORY_COMPRESSION_SUPPORT = no
+MTK_MERGE_INTERFACE_SUPPORT = no
+MTK_META_RSSITRIGGER_SUPPORT = no
+MTK_MIRAVISION_SETTING_SUPPORT = yes
+MTK_MKV_PLAYBACK_ENHANCEMENT = no
+MTK_MLC_NAND_SUPPORT = no
+MTK_MMPROFILE_SUPPORT = yes
+MTK_MMUMAP_SUPPORT = no
+MTK_MOBILE_MANAGEMENT = yes
+MTK_MODEM_MONITOR_SUPPORT = yes
+MTK_MODEM_SUPPORT =
+MTK_MP2_PLAYBACK_SUPPORT = no
+MTK_MPEG_DASH_SUPPORT = no
+MTK_MSDC1_NOT_SUPPORT_SDR104 = no
+MTK_MT6306_SUPPORT = no
+MTK_MT6333_SUPPORT = no
+MTK_MT8193_HDCP_SUPPORT = no
+MTK_MT8193_HDMI_SUPPORT = no
+MTK_MT8193_SUPPORT = no
+MTK_MTKLOGGER_SUPPORT = yes
+MTK_MTKPS_PLAYBACK_SUPPORT = no
+MTK_MULTIBRIDGE_SUPPORT = no
+MTK_MULTIPLE_TDLS_SUPPORT = no
+MTK_MULTI_PARTITION_MOUNT_ONLY_SUPPORT = no
+MTK_MULTI_PS_SUPPORT = yes
+MTK_MULTI_SIM_SUPPORT = ss
+MTK_MULTI_STORAGE_SUPPORT = yes
+MTK_MULTI_WINDOW_SUPPORT = no
+MTK_MUX_CHANNEL = 64
+MTK_NAND_MTK_FTL_SUPPORT = no
+MTK_NAND_PAGE_SIZE = 2K
+MTK_NAND_UBIFS_SUPPORT = no
+MTK_NATIVE_FENCE_SUPPORT = no
+MTK_NEON_SUPPORT = yes
+MTK_NETWORK_LOG_SUPPORT = yes
+MTK_NETWORK_TYPE_ALWAYS_ON = no
+MTK_NETWORK_TYPE_DISPLAY = no
+MTK_NET_RFC7217 = no
+MTK_NEW_COMBO_EMMC_SUPPORT = no
+MTK_NEW_IPTABLES_SUPPORT = yes
+MTK_NFC_ADDON_SUPPORT = no
+MTK_NFC_GSMA_SUPPORT = no
+MTK_NFC_HCE_SUPPORT = no
+MTK_NFC_OMAAC_SUPPORT = no
+#MTK_NFC_PACKAGE = MTK
+#MTK_NFC_SE_NUM = 7
+MTK_NFC_SUPPORT = no
+MTK_NO_NEED_USB_LED = no
+MTK_NTFS_OPENSOURCE_SUPPORT = no
+MTK_NUM_MODEM_PROTOCOL = 2
+MTK_NVCONFIG_PARTITION_SUPPORT = no
+MTK_NVRAM_SECURITY = no
+MTK_OAT_ON_SDCARD_SUPPORT = no
+MTK_OD_SUPPORT = no
+MTK_OGG_RECORD_SUPPORT = no
+MTK_OGM_PLAYBACK_SUPPORT = no
+MTK_OMACP_SUPPORT = yes
+MTK_OMADRM_SUPPORT = yes
+MTK_OMA_DOWNLOAD_SUPPORT = yes
+MTK_ONLY_OWNER_SIM_SUPPORT = no
+MTK_OVERLAY_ENGINE_SUPPORT = no
+MTK_OWNER_SDCARD_ONLY_SUPPORT = no
+MTK_PARTITION_TABLE_PLAIN_TEXT = no
+MTK_PASSPOINT_R2_SUPPORT = no
+MTK_PCA9575A_SUPPORT = no
+MTK_PCM_RECORD_SUPPORT = no
+MTK_PERFSERVICE_SUPPORT = yes
+MTK_PERMISSION_CONTROL = yes
+MTK_PERSIST_PARTITION_SUPPORT = no
+MTK_PHONE_CALL_FIXED_48K_SAMPLERATE = no
+MTK_PHONE_VT_VOICE_ANSWER = no
+MTK_PLATFORM = MT6739
+MTK_PLATFORM_OPTIMIZE = yes
+MTK_PLAYBACK_60FPS_TO_30FPS = no
+MTK_PMIC_MT6397 = no
+MTK_PM_STATS_SUPPORT = no
+MTK_POST_PROCESS_FRAMEWORK_SUPPORT = no
+MTK_POWER_EXT_DETECT = no
+MTK_POWER_PERFORMANCE_STRATEGY_SUPPORT = yes
+MTK_PQ_COLOR_MODE = DISP
+MTK_PQ_SUPPORT = PQ_HW_VER_2
+MTK_PRIVACY_PROTECTION_LOCK = no
+MTK_PRODUCER_PARTIAL_UPDATE_SUPPORT = no
+MTK_PRODUCT_INFO_SUPPORT = yes
+MTK_PROTOCOL1_RAT_CONFIG = Lf/Lt/W/T/G
+MTK_PROTOCOL2_RAT_CONFIG = G
+MTK_PROTOCOL3_RAT_CONFIG = G
+MTK_PUMP_EXPRESS_PLUS_20_SUPPORT = no
+MTK_PUMP_EXPRESS_PLUS_30_SUPPORT = no
+MTK_PUMP_EXPRESS_PLUS_SUPPORT = no
+MTK_PUMP_EXPRESS_SUPPORT = no
+MTK_RADIOOFF_POWER_OFF_MD = no
+MTK_RAT_BALANCING = no
+MTK_RAT_WCDMA_PREFERRED = no
+MTK_RAWFS_NAND_SUPPORT = no
+MTK_RCS_SUPPORT = no
+MTK_REBOOT_META_SUPPORT = no
+MTK_REGIONALPHONE_SUPPORT = no
+MTK_RELEASE_PACKAGE = rel_customer_basic rel_customer_platform_mt6739 rel_customer_kernel_4-4
+MTK_RESOLUTION_SWITCH_SUPPORT = no
+MTK_RESOURCE_OPTIMIZATION =
+MTK_RILD_READ_IMSI = yes
+MTK_RIL_MODE = c6m_1rild
+MTK_ROTATION_OFFSET_SUPPORT = no
+MTK_RSDM_APP = no
+MTK_RTP_OVER_RTSP_SUPPORT = yes
+MTK_RUNNING_BOOSTER_DEFAULT_ON = yes
+MTK_RUNNING_BOOSTER_SUPPORT = yes
+MTK_RUNNING_BOOSTER_UPGRADE = yes
+MTK_RUNTIME_PERMISSION_SUPPORT = no
+MTK_SCOMO_ENTRY = no
+MTK_SCREEN_OFF_WIFI_OFF = no
+MTK_SDIOAUTOK_SUPPORT = no
+MTK_SEARCH_DB_SUPPORT = yes
+MTK_SEC_MODEM_AUTH = no
+MTK_SEC_MODEM_ENCODE = no
+MTK_SEC_SECRO_AC_SUPPORT = yes
+MTK_SEC_VIDEO_PATH_SUPPORT = no
+MTK_SEC_WFD_VIDEO_PATH_SUPPORT = no
+MTK_SEND_RR_SUPPORT = yes
+MTK_SENSOR_BIO = no
+MTK_SENSOR_SUPPORT = yes
+MTK_SHARED_SDCARD = yes
+MTK_SHOW_MSENSOR_TOAST_SUPPORT = no
+MTK_SIGNATURE_CUSTOMIZATION = yes
+MTK_SIGNMODEM_SUPPORT = no
+MTK_SIM1_SOCKET_TYPE = 1
+MTK_SIM2_SOCKET_TYPE = 1
+MTK_SIM_HOT_SWAP = yes
+MTK_SIM_HOT_SWAP_COMMON_SLOT = no
+MTK_SIM_LOCK_POWER_ON_WRITE_PROTECT = no
+MTK_SIM_RECOVERY = yes
+MTK_SINGLE_3DSHOT_SUPPORT = no
+MTK_SINGLE_IMEI = no
+MTK_SLOW_MOTION_VIDEO_SUPPORT = no
+MTK_SMARTBOOK_SUPPORT = no
+MTK_SMARTSWITCH_SUPPORT = no
+MTK_SMSREG_APP = no
+MTK_SMS_NATIONAL_LANGUAGE_SUPPORT = no
+MTK_SMT_SUPPORT = no
+MTK_SOTER_SUPPORT = no
+MTK_SPECIAL_FACTORY_RESET = no
+MTK_SPECIFIC_SM_CAUSE = no
+MTK_SUBTITLE_SUPPORT = no
+MTK_SUPER_DIMMING_SUPPORT = no
+MTK_SVP_64BIT_SUPPORT = no
+MTK_SWABF_SUPPORT = yes
+MTK_SWCHR_SUPPORT = yes
+MTK_SWIP_WMAPRO = no
+MTK_SYSTEM_UPDATE_SUPPORT = no
+MTK_TABLET_PLATFORM = no
+MTK_TABLET_PLUGIN_BUILD = no
+MTK_TABLET_TS_ENHANCEMENT = no
+MTK_TB_APP_CALL_FORCE_SPEAKER_ON = no
+MTK_TB_APP_LANDSCAPE_SUPPORT = no
+MTK_TC1_FEATURE = no
+MTK_TC9_FEATURE = no
+MTK_TDD_DATA_ONLY_SUPPORT = no
+MTK_TEE_GP_SUPPORT = no
+MTK_TEE_SUPPORT = yes
+MTK_TEE_TRUSTED_UI_SUPPORT = no
+MTK_TELEPHONY_BOOTUP_MODE_SLOT1 = 0
+MTK_TELEPHONY_BOOTUP_MODE_SLOT2 = 1
+MTK_TELEPHONY_CONN_LOG_CTRL_SUPPORT = yes
+MTK_TELEPHONY_FEATURE_SWITCH_DYNAMICALLY = no
+MTK_TELEPHONY_MODE = 0
+MTK_TER_SERVICE = no
+MTK_TETHERINGIPV6_SUPPORT = yes
+MTK_TETHERING_EEM_SUPPORT = no
+MTK_THERMAL_PA_VIA_ATCMD = yes
+MTK_TINYSYS_SCP_SUPPORT = no
+MTK_TINYSYS_SSPM_SUPPORT = no
+MTK_TINY_UTIL = no
+MTK_TOUCH_BOOST = no
+MTK_TTY_SUPPORT = yes
+MTK_UART_USB_SWITCH = no
+MTK_UFS_BOOTING = no
+MTK_UFS_OTP = no
+MTK_ULTRA_DIMMING_SUPPORT = no
+MTK_USB_CBA_SUPPORT = no
+MTK_USB_PHONECALL = AP
+MTK_USER_ROOT_SWITCH = no
+MTK_USER_SPACE_DEBUG_FW = yes
+MTK_USE_ANDROID_MM_DEFAULT_CODE = no
+MTK_USSI_SUPPORT = yes
+MTK_VIDEO_4KH264_SUPPORT = no
+MTK_VIDEO_HEVC_SUPPORT = yes
+MTK_VIDEO_VP8ENC_SUPPORT = no
+MTK_VILTE_SUPPORT = no
+MTK_VIWIFI_SUPPORT = no
+MTK_VOICE_UNLOCK_USE_TAB_LIB = no
+MTK_VOIP_ENHANCEMENT_SUPPORT = yes
+MTK_VOIP_HANDSFREE_DMNR = no
+MTK_VOIP_NORMAL_DMNR = no
+MTK_VOLTE_SUPPORT = no
+MTK_VOW_SUPPORT = no
+MTK_VPU_SUPPORT = no
+MTK_VR_HIGH_PERFORMANCE_SUPPORT = no
+MTK_VSS_SUPPORT = no
+MTK_VT3G324M_SUPPORT = no
+MTK_VZW_CHIPTEST_MODE_SUPPORT = 0
+MTK_WAPI_SUPPORT = yes
+MTK_WAPPUSH_SUPPORT = yes
+MTK_WB_SPEECH_SUPPORT = yes
+MTK_WEEK_NO = W18.05
+MTK_WFC_SUPPORT = no
+MTK_WFD_HDCP_RX_SVP_SUPPORT = no
+MTK_WFD_HDCP_TX_SUPPORT = no
+MTK_WFD_SINK_SUPPORT = no
+MTK_WFD_SINK_UIBC_SUPPORT = no
+MTK_WFD_SUPPORT = yes
+MTK_WIFI_MCC_SUPPORT = yes
+MTK_WIFI_P2P_SUPPORT = yes
+MTK_WIRELESS_CHARGER_SUPPORT = no
+MTK_WLANBT_SINGLEANT = no
+MTK_WLAN_CHIP = CONSYS_MT6739
+MTK_WLAN_PATH_SET = siso
+MTK_WLAN_SUPPORT = yes
+MTK_WMA_PLAYBACK_SUPPORT = no
+MTK_WMV_PLAYBACK_SUPPORT = no
+MTK_WORLD_PHONE_POLICY = 0
+MTK_WPA2PSK_SUPPORT = no
+MTK_WVDRM_L1_SUPPORT = no
+MTK_WVDRM_SUPPORT = yes
+MTK_YAML_SCATTER_FILE_SUPPORT = yes
+MTK_YIQI_FONTS_FRAMEWORK_SUPPORT = yes
+NAND_OTP_SUPPORT = no
+NFC_CHIP_SUPPORT = no
+NO_INIT_PERMISSION_CHECK = yes
+NXP_SMARTPA_SUPPORT = no_nxp
+OP01_COMPATIBLE = no
+OPTR_SPEC_SEG_DEF = NONE
+PURE_AP_USE_EXTERNAL_MODEM = no
+SENSOR_BATCH_SUPPORT = no
+SIM_ME_LOCK_MODE = 0
+SIM_REFRESH_RESET_BY_MODEM = yes
+SPM_FW_USE_PARTITION = yes
+ST_NFC_FM_SE_CONFIG = 3
+TRUSTONIC_TEE_SUPPORT = no
+USE_FRAUNHOFER_AAC = yes
+USE_XML_AUDIO_POLICY_CONF = 1
+WIFI_WEP_KEY_ID_SET = no
+#CREATE_PROJECT_INFO=20171102102954
+DMNR_COMPLEX_ARCH_SUPPORT = yes
+BUILD_GMS = yes
+
+TCL_LSCREEN_SUPPORT = yes
+MTK_FULLSCREEN_SWITCH_SUPPORT = yes
+TCL_LED_SUPPORT = no
+OP01SOUNDRECORDER_APP = yes
+TCT_DIAGNOSTIC = yes
+BOOT_DEFAULT_LOCALE_BY_SIM = yes
Index: vendor/branch/5058A_Digicel_Jamaica/device/ausshine/aus6739_66_n1/full_aus6739_66_n1.mk
===================================================================
--- vendor/branch/5058A_Digicel_Jamaica/device/ausshine/aus6739_66_n1/full_aus6739_66_n1.mk	(revision 0)
+++ vendor/branch/5058A_Digicel_Jamaica/device/ausshine/aus6739_66_n1/full_aus6739_66_n1.mk	(revision 9171)
@@ -0,0 +1,51 @@
+# Inherit for devices that support 64-bit primary and 32-bit secondary zygote startup script
+$(call inherit-product, $(SRC_TARGET_DIR)/product/core_64_bit.mk)
+
+# Inherit from those products. Most specific first.
+#$(call inherit-product, $(SRC_TARGET_DIR)/product/full_base_telephony.mk)
+# Inherit from those products. Most specific first.
+$(call inherit-product, $(SRC_TARGET_DIR)/product/full_base.mk)
+
+# Set target and base project for flavor build
+MTK_TARGET_PROJECT := $(subst full_,,$(TARGET_PRODUCT))
+MTK_BASE_PROJECT := $(MTK_TARGET_PROJECT)
+MTK_PROJECT_FOLDER := $(shell find device/* -maxdepth 1 -name $(MTK_BASE_PROJECT))
+MTK_TARGET_PROJECT_FOLDER := $(shell find device/* -maxdepth 1 -name $(MTK_TARGET_PROJECT))
+
+# This is where we'd set a backup provider if we had one
+#$(call inherit-product, device/sample/products/backup_overlay.mk)
+# Inherit from maguro device
+$(call inherit-product, device/ausshine/$(MTK_TARGET_PROJECT)/device.mk)
+
+# set locales & aapt config.
+include $(MTK_TARGET_PROJECT_FOLDER)/ProjectConfig.mk
+#ifneq (,$(filter OP01%, $(OPTR_SPEC_SEG_DEF)))
+  #ifeq ($(OP01_COMPATIBLE), yes)
+    #PRODUCT_LOCALES:=zh_CN en_US zh_TW ja_JP en_GB fr_FR
+  #else
+   # PRODUCT_LOCALES:=zh_CN en_US zh_TW
+  #endif
+#else ifneq (,$(filter OP09%, $(OPTR_SPEC_SEG_DEF)))
+  #PRODUCT_LOCALES:=zh_CN zh_HK zh_TW en_US pt_BR pt_PT en_GB fr_FR ja_JP
+#else
+  #PRODUCT_LOCALES := en_US zh_CN zh_TW es_ES pt_BR ru_RU fr_FR de_DE tr_TR vi_VN ms_MY in_ID th_TH it_IT ar_EG hi_IN bn_IN ur_PK fa_IR pt_PT nl_NL el_GR hu_HU tl_PH ro_RO cs_CZ ko_KR km_KH iw_IL my_MM pl_PL es_US bg_BG hr_HR lv_LV lt_LT sk_SK uk_UA de_AT da_DK fi_FI nb_NO sv_SE en_GB hy_AM zh_HK et_EE ja_JP kk_KZ sr_RS sl_SI ca_ES
+#endif
+PRODUCT_LOCALES :=es_MX es_US es en_US en_GB pt_BR pt_PT fr_FR
+# Set those variables here to overwrite the inherited values.
+PRODUCT_MANUFACTURER := alps
+PRODUCT_NAME := full_aus6739_66_n1
+PRODUCT_DEVICE := aus6739_66_n1
+PRODUCT_MODEL := aus6739_66_n1
+PRODUCT_POLICY := android.policy_phone
+PRODUCT_BRAND := alps
+
+ifeq ($(TARGET_BUILD_VARIANT), eng)
+KERNEL_DEFCONFIG ?= aus6739_66_n1_debug_defconfig
+else
+KERNEL_DEFCONFIG ?= aus6739_66_n1_defconfig
+endif
+PRELOADER_TARGET_PRODUCT ?= aus6739_66_n1
+LK_PROJECT ?= aus6739_66_n1
+TRUSTY_PROJECT ?= aus6739_66_n1
+$(call inherit-product, device/cdfinger/cdfinger_product_64bit.mk)
+$(call inherit-product, device/chipsailing/csfinger_product_64bit.mk)
\ No newline at end of file
Index: vendor/branch/5058A_Digicel_Jamaica/device/ausshine/aus6739_66_n1/system.prop
===================================================================
--- vendor/branch/5058A_Digicel_Jamaica/device/ausshine/aus6739_66_n1/system.prop	(revision 0)
+++ vendor/branch/5058A_Digicel_Jamaica/device/ausshine/aus6739_66_n1/system.prop	(revision 9171)
@@ -0,0 +1,98 @@
+#
+# system.prop for generic sdk
+#
+
+rild.libpath=mtk-ril.so
+rild.libargs=-d /dev/ttyC0
+
+
+# MTK, Infinity, 20090720 {
+wifi.interface=wlan0
+# MTK, Infinity, 20090720 }
+
+# MTK, mtk03034, 20101210 {
+ro.mediatek.wlan.wsc=1
+# MTK, mtk03034 20101210}
+# MTK, mtk03034, 20110318 {
+ro.mediatek.wlan.p2p=1
+# MTK, mtk03034 20110318}
+
+# MTK, mtk03034, 20101213 {
+mediatek.wlan.ctia=0
+# MTK, mtk03034 20101213}
+
+
+#
+wifi.tethering.interface=ap0
+#
+
+ro.opengles.version=196610
+# ro.kernel.qemu=1
+# ro.kernel.qemu.gles=0
+
+wifi.direct.interface=p2p0
+#dalvik.vm.heapgrowthlimit=256m
+#dalvik.vm.heapsize=512m
+
+# USB MTP WHQL
+ro.sys.usb.mtp.whql.enable=0
+
+# Power off opt in IPO
+sys.ipo.pwrdncap=2
+
+ro.sys.usb.storage.type=mtp
+
+# USB BICR function
+ro.sys.usb.bicr=no
+
+# USB Charge only function
+ro.sys.usb.charging.only=yes
+
+# audio
+ro.camera.sound.forced=0
+ro.audio.silent=0
+
+ro.zygote.preload.enable=0
+
+# temporary enables NAV bar (soft keys)
+qemu.hw.mainkeys=0
+
+ro.kernel.zio=38,108,105,16
+#ro.kernel.qemu=1
+#ro.kernel.qemu.gles=0
+#ro.boot.selinux=disable
+
+# Disable dirty region for Mali
+#debug.hwui.render_dirty_regions=false
+
+ro.sf.lcd_density=320
+
+# performance
+ro.mtk_perf_simple_start_win=1
+ro.mtk_perf_fast_start_win=1
+ro.mtk_perf_response_time=1
+
+# disable ipo for development
+sys.ipo.disable=1
+
+# shutdown audio
+ro.operator.optr=CUST
+# shutdown animation
+persist.operator.optr=CUST
+
+ro.customer.commercial.name=5058A
+ro.product.hardware.id=Proto
+ro.tct.curef.default=5058A-2*ALOP1
+ro.def.software.version=010 01
+ro.mtk_default_ime=com.android.inputmethod.latin
+ro.business.name=Alcatel 3X
+ro.mtk_gemini_support = 0
+
+ro.camera_default_picture_size=0x0010
+
+# add customer client id
+ro.com.google.clientidbase=android-alcatel
+ro.com.google.clientidbase.ms=android-alcatel
+ro.com.google.clientidbase.am=android-alcatel
+ro.com.google.clientidbase.wal=android-alcatel
+ro.com.google.clientidbase.cr=android-alcatel
\ No newline at end of file
