Index: vendor/branch/5058A_Claro/vendor/google/products/gms.mk
===================================================================
--- vendor/branch/5058A_Claro/vendor/google/products/gms.mk	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/google/products/gms.mk	(revision 3018)
@@ -1,72 +0,0 @@
-###############################################################################
-# GMS home folder location
-# Note: we cannot use $(my-dir) in this makefile
-ANDROID_PARTNER_GMS_HOME := vendor/google
-
-# GMS mandatory core packages
-PRODUCT_PACKAGES := \
-    ConfigUpdater \
-    GoogleBackupTransport \
-    GoogleExtServices \
-    GoogleExtShared \
-    GoogleFeedback \
-    GoogleLoginService \
-    GoogleOneTimeInitializer \
-    GooglePackageInstaller \
-    GooglePartnerSetup \
-    GooglePrintRecommendationService \
-    GoogleServicesFramework \
-    GoogleCalendarSyncAdapter \
-    GoogleContactsSyncAdapter \
-    GoogleTTS \
-    GmsCore \
-    Phonesky \
-    SetupWizard \
-    CalendarGoogle \
-    CalculatorGoogle \
-    DeskClockGoogle \
-    WebViewGoogle
-
-# GMS mandatory libraries
-PRODUCT_PACKAGES += \
-    com.google.android.maps.jar \
-    com.google.android.media.effects.jar
-
-# Overlay for GMS devices
-$(call inherit-product, device/sample/products/backup_overlay.mk)
-$(call inherit-product, device/sample/products/location_overlay.mk)
-PRODUCT_PACKAGE_OVERLAYS += $(ANDROID_PARTNER_GMS_HOME)/products/gms_overlay
-
-# Configuration files for GMS apps
-PRODUCT_COPY_FILES += \
-    $(ANDROID_PARTNER_GMS_HOME)/etc/preferred-apps/google.xml:system/etc/preferred-apps/google.xml \
-    $(ANDROID_PARTNER_GMS_HOME)/etc/sysconfig/google.xml:system/etc/sysconfig/google.xml
-
-# GMS mandatory application packages
-# Note: Duo is mandatory for telephony devices, whereas Hangouts is for non-telephony devices.
-PRODUCT_PACKAGES += \
-    Chrome \
-    Drive \
-    Gmail2 \
-    Duo \
-    Maps \
-    Music2 \
-    Photos \
-    Velvet \
-    Videos \
-    YouTube
-
-# GMS optional application packages
-PRODUCT_PACKAGES += \
-    Keep
-
-# GMS sample application packages
-# GmsSampleLayout customizes the default home screen layout of Launcher3
-# OpaSuwIntegrationSample cutomizes Google Assistant/Now opt-in screen in Android 7.1 SetupWizard
-PRODUCT_PACKAGES += \
-
-# Overrides
-PRODUCT_PROPERTY_OVERRIDES += \
-    ro.setupwizard.require_network=no \
-    ro.setupwizard.mode=OPTIONAL \
-    ro.com.google.gmsversion=7.1_r7
Index: vendor/branch/5058A_Claro/vendor/customer/custom.mk
===================================================================
--- vendor/branch/5058A_Claro/vendor/customer/custom.mk	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/customer/custom.mk	(revision 3018)
@@ -1,53 +0,0 @@
-# Add Custom Apps and Services
-PRODUCT_PACKAGES += ActivateLATAM \
-                    AppCloud \
-                    Apps \
-                    BrowserTcl \
-                    BrowserOverlay \
-                    CompassTcl \
-                    CompassOverlay \
-                    Diagnostics \
-                    DisneyMagicKingdom \
-                    DragonMania \
-                    Elabel \
-                    ElabelOverlay \
-                    EnjoyNow \
-                    FileManagerTcl \
-                    FileManagerOverlay \
-                    Fota \
-                    Officesuit \
-                    PhoneGuard \
-                    SetupWizardTcl \
-                    SimpleLauncher \
-                    SingleLogin \
-                    UserCare \
-                    Weather \
-                    WeatherOverlay \
-                    WeatherOverlay \
-                    WhatsApp \
-                    JoyLauncherOverlay \
-                    JoyLauncher \
-                    Gallery_Global \
-                    ThemeCenter \
-                    CameraTcl \
-                    Selife \
-                    Facebook \
-                    NovaNews \
-                    Movistar_Play \
-                    Modo_Futbol \
-                    Mi_Movistar \
-                    Club_Movistar \
-                    STUDIO \
-                    100game \
-                    ModernCombat4 \
-                    MotocrossTrialExtreme \
-                    SpidermanUltimatePower
-                    
-# Overrides
-PRODUCT_PROPERTY_OVERRIDES +=
-
-# add facebook config file use in TCL project
-PRODUCT_COPY_FILES += vendor/customer/appmanager.conf:system/etc/appmanager.conf
-PRODUCT_COPY_FILES += vendor/customer/privapp-permissions-facebook.xml:system/etc/permissions/privapp-permissions-facebook.xml
-PRODUCT_COPY_FILES += vendor/customer/OfficeSuiteAlcatel.txt:system/etc/OfficeSuiteAlcatel.txt
-PRODUCT_COPY_FILES += vendor/customer/apps/Officesuit/OfficeSuite_Free_Alcatel_9.1.10667.apk:system/vendor/operator/app/Officesuit/Officesuit.apk
Index: vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/JoyLauncherOverlay/res/xml/jrd_default_workspace.xml
===================================================================
--- vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/JoyLauncherOverlay/res/xml/jrd_default_workspace.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/JoyLauncherOverlay/res/xml/jrd_default_workspace.xml	(revision 3018)
@@ -1,734 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<favorites xmlns:launcher="http://schemas.android.com/apk/res-auto/com.tct.launcher" >
-
-    <!--
-   Type:
-     AppShortcut:1
-     AppWidget: 2
-     Bookmark: 3
-     Folder:  4 (id : 1 ~ 8 , 3*4)
-     Settings Shortcut: 5
-     HotSeat Shortcut:6
-     Other:7
-    -->
-    <!--
-    Note:
-     1. If you need customize one item, please put you code in special area, that is special screen area, and please give your detail comments.
-        Otherwise, this xml will be more and more confusion.
-     2. If you need customize item in folder, please put it by rows in priority, and the launcher:x in folder is 0-3, but launcher:y is 0-2.
-     3. Because one screen of folder can place 3*4 items, when you customize items in folder, please also be noted launcher:screen="" property in folder.
-     4. Customization for 4 items' position in Hotseat is same as projects before Diablox,
-     order|(screen,x,y)
-     1         |   (0,0,0)
-     2         |   (1,1,0)
-     3         |   (3,3,0)
-     4         |   (4,4,0)
-    -->
-
-
-    <!-- screen 0 begin -->
-    <!-- AppWidget: Google search bar(4*1) -->
-    <item
-        launcher:id=""
-        launcher:className="com.google.android.googlequicksearchbox.SearchWidgetProvider"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.google.android.googlequicksearchbox"
-        launcher:screen="0"
-        launcher:spanX="4"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="2"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="0"/>
-
-    <!-- AppWidget: Weather widget(4*1) -->
-    <item
-        launcher:id=""
-        launcher:className="com.tct.widget.WeatherWidget"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.tct.weather"
-        launcher:screen="0"
-        launcher:spanX="4"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="2"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="1"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.android.music.activitymanagement.TopLevelActivity"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.google.android.music"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="1"
-        launcher:y="4"/>
-
-    <!-- AppShortCut: Gallery -->
-    <item
-        launcher:id=""
-        launcher:className="com.tcl.gallery.app.GalleryActivity"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.tcl.gallery"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="2"
-        launcher:y="4"/>
-
-    <!-- AppShortCut: Play store -->
-    <item
-        launcher:id=""
-        launcher:className="com.android.vending.AssetBrowserActivity"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.android.vending"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="3"
-        launcher:y="4"/>
-    <!-- Folder "Google" Start -->
-    <item
-        launcher:id="1"
-        launcher:className=""
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName=""
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title="Google"
-        launcher:type="4"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="4"/>
-        
-        
-
-    <item
-        launcher:id=""
-        launcher:className="com.google.android.googlequicksearchbox.SearchActivity"
-        launcher:container="1"
-        launcher:icon=""
-        launcher:packageName="com.google.android.googlequicksearchbox"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.google.android.gm.ConversationListActivityGmail"
-        launcher:container="1"
-        launcher:icon=""
-        launcher:packageName="com.google.android.gm"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="1"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.google.android.maps.MapsActivity"
-        launcher:container="1"
-        launcher:icon=""
-        launcher:packageName="com.google.android.apps.maps"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="2"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.google.android.youtube.app.honeycomb.Shell$HomeActivity"
-        launcher:container="1"
-        launcher:icon=""
-        launcher:packageName="com.google.android.youtube"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="1"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.google.android.apps.docs.app.NewMainProxyActivity"
-        launcher:container="1"
-        launcher:icon=""
-        launcher:packageName="com.google.android.apps.docs"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="1"
-        launcher:y="1"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.google.android.youtube.videos.EntryPoint"
-        launcher:container="1"
-        launcher:icon=""
-        launcher:packageName="com.google.android.videos"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="2"
-        launcher:y="1"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.google.android.apps.tachyon.MainActivity"
-        launcher:container="1"
-        launcher:icon=""
-        launcher:packageName="com.google.android.apps.tachyon"
-        launcher:screen="1"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="2"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.google.android.apps.photos.home.HomeActivity"
-        launcher:container="1"
-        launcher:icon=""
-        launcher:packageName="com.google.android.apps.photos"
-        launcher:screen="1"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="1"
-        launcher:y="2"/>
-    <!-- Folder "Google" End -->
-    
-     <!--add movistar-->
-    <item
-        launcher:id="4"
-        launcher:className=""
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName=""
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title="Movistar"
-        launcher:type="4"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="3"/>
-    <item
-        launcher:id=""
-        launcher:className="com.pdi.mca.go.login.activities.LoginActivity"
-        launcher:container="4"
-        launcher:icon=""
-        launcher:packageName="cl.movistarplay"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="0"/>
-    <item
-        launcher:id=""
-        launcher:className="com.smartboxtv.copamovistarchile.ModoFutbolSplashActivity"
-        launcher:container="4"
-        launcher:icon=""
-        launcher:packageName="com.smartboxtv.copamovistarchile"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="1"
-        launcher:y="0"/>
-    <item
-        launcher:id=""
-        launcher:className="com.gameloft.android.GloftDBMF.Start"
-        launcher:container="4"
-        launcher:icon=""
-        launcher:packageName="com.gameloft.android.GloftDBMF"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="2"
-        launcher:y="0"/>
-    <item
-        launcher:id=""
-        launcher:className="cl.movistar.android.MainActivity"
-        launcher:container="4"
-        launcher:icon=""
-        launcher:packageName="cl.movistar.android"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="1"/>
-    <item
-        launcher:id=""
-        launcher:className="cl.jbravo.ams.ClubMovistarActivity"
-        launcher:container="4"
-        launcher:icon=""
-        launcher:packageName="cl.jbravo.ams"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="2"/>  
-    <item
-        launcher:id=""
-        launcher:className="com.watchever.studioplus.views.SplashActivity"
-        launcher:container="4"
-        launcher:icon=""
-        launcher:packageName="com.watchever.studioplus"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="2"/>       
-    <!-- screen 0 end -->
-
-    <!-- Screen 1 begin -->
-    <item
-        launcher:id=""
-        launcher:className="com.android.settings.Settings"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.android.settings"
-        launcher:screen="1"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.clean.spaceplus.main.SplashActivity"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.apps.go.clean.boost.master"
-        launcher:screen="1"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="1"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.hawk.android.browser.BrowserActivity"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.hawk.android.browser"
-        launcher:screen="1"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="2"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.android.contacts.activities.PeopleActivity"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.android.contacts"
-        launcher:screen="1"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="3"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.mcrm.activities.ActivityMain"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.alcatel.mcrm"
-        launcher:screen="1"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="1"/>
-
-    <item
-        launcher:id="2"
-        launcher:className=""
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName=""
-        launcher:screen="1"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title="Tools"
-        launcher:type="4"
-        launcher:uri=""
-        launcher:x="1"
-        launcher:y="1"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.android.calculator2"
-        launcher:container="2"
-        launcher:icon=""
-        launcher:packageName="com.google.android.calculator"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.jrdcom.compass.CompassMainActivity"
-        launcher:container="2"
-        launcher:icon=""
-        launcher:packageName="com.jrdcom.compass"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="1"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.android.documentsui.LauncherActivity"
-        launcher:container="2"
-        launcher:icon=""
-        launcher:packageName="com.android.documentsui"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="2"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.jrdcom.filemanager.activity.FileBrowserActivity"
-        launcher:container="2"
-        launcher:icon=""
-        launcher:packageName="com.jrdcom.filemanager"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="1"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.android.fmradio.FmMainActivity"
-        launcher:container="2"
-        launcher:icon=""
-        launcher:packageName="com.android.fmradio"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="1"
-        launcher:y="1"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.android.soundrecorder.SoundRecorder"
-        launcher:container="2"
-        launcher:icon=""
-        launcher:packageName="com.android.soundrecorder"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="2"
-        launcher:y="1"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.tct.weather.MainActivity"
-        launcher:container="2"
-        launcher:icon=""
-        launcher:packageName="com.tct.weather"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="2"/>
-
-    <item
-        launcher:id="3"
-        launcher:className=""
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName=""
-        launcher:screen="1"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title="Games"
-        launcher:type="4"
-        launcher:uri=""
-        launcher:x="2"
-        launcher:y="1"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.gameloft.android.GloftPDMF.Start"
-        launcher:container="3"
-        launcher:icon=""
-        launcher:packageName="com.gameloft.android.GloftPDMF"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.gameloft.android.GloftDMKF.Start"
-        launcher:container="3"
-        launcher:icon=""
-        launcher:packageName="com.gameloft.android.GloftDMKF"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="1"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.gameloft.android.GloftMBCF.Start"
-        launcher:container="3"
-        launcher:icon=""
-        launcher:packageName="com.gameloft.android.GloftMBCF"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="2"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.gameloft.android.GloftSMIF.Start"
-        launcher:container="3"
-        launcher:icon=""
-        launcher:packageName="com.gameloft.android.GloftSMIF"
-        launcher:screen="0"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="1"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.facebook.katana.LoginActivity"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.facebook.katana"
-        launcher:screen="1"
-        launcher:spanX="1"
-        launcher:spanY="1"
-        launcher:title=""
-        launcher:type="1"
-        launcher:uri=""
-        launcher:x="3"
-        launcher:y="1"/>
-
-    <!-- Hotseats Start -->
-    <!-- Hotseat: Call -->
-    <item
-        launcher:id=""
-        launcher:className="com.android.dialer.DialtactsActivity"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.android.dialer"
-        launcher:screen="0"
-        launcher:spanX=""
-        launcher:spanY=""
-        launcher:title=""
-        launcher:type="6"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="0"/>
-
-    <!-- Hotseat: Messaging -->
-    <item
-        launcher:id=""
-        launcher:className="com.android.mms.ui.ConversationList"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.android.mms"
-        launcher:screen="1"
-        launcher:spanX=""
-        launcher:spanY=""
-        launcher:title=""
-        launcher:type="6"
-        launcher:uri=""
-        launcher:x="1"
-        launcher:y="0"/>
-
-    <!-- Hotseat: Mainmenu -->
-    <item
-        launcher:id=""
-        launcher:className=""
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName=""
-        launcher:screen="2"
-        launcher:spanX=""
-        launcher:spanY=""
-        launcher:title="MainMenu"
-        launcher:type="6"
-        launcher:uri=""
-        launcher:x="2"
-        launcher:y="0"/>
-
-    <!-- Hotseat: Camera -->
-    <item
-        launcher:id=""
-        launcher:className="com.android.camera.CameraLauncher"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.mediatek.hz.camera"
-        launcher:screen="3"
-        launcher:spanX=""
-        launcher:spanY=""
-        launcher:title=""
-        launcher:type="6"
-        launcher:uri=""
-        launcher:x="3"
-        launcher:y="0"/>
-
-    <item
-        launcher:id=""
-        launcher:className="com.google.android.apps.chrome.Main"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.android.chrome"
-        launcher:screen="4"
-        launcher:spanX=""
-        launcher:spanY=""
-        launcher:title=""
-        launcher:type="6"
-        launcher:uri=""
-        launcher:x="4"
-        launcher:y="0"/>
-    <!-- Hotseats End -->
-    <item
-        launcher:id=""
-        launcher:className="com.gameloft.android.gdc.GDCWidgetProvider"
-        launcher:container=""
-        launcher:icon=""
-        launcher:packageName="com.gameloft.android.gdc"
-        launcher:screen="1"
-        launcher:spanX="4"
-        launcher:spanY="3"
-        launcher:title=""
-        launcher:type="2"
-        launcher:uri=""
-        launcher:x="0"
-        launcher:y="2"/>
-      
-        
-        
-        
-        
-
-</favorites>
\ No newline at end of file
Index: vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/ui/ComposeMessageActivity.java
===================================================================
--- vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/ui/ComposeMessageActivity.java	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/ui/ComposeMessageActivity.java	(revision 3018)
@@ -1,11303 +0,0 @@
-/*
-* Copyright (C) 2014 MediaTek Inc.
-* Modification based on code covered by the mentioned copyright
-* and/or permission notice(s).
-*/
-/*
- * Copyright (C) 2008 Esmertec AG.
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.mms.ui;
-
-import static android.content.res.Configuration.KEYBOARDHIDDEN_NO;
-import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_ABORT;
-import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_COMPLETE;
-import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_START;
-import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_STATUS_ACTION;
-import static com.android.mms.ui.MessageListAdapter.COLUMN_ID;
-import static com.android.mms.ui.MessageListAdapter.COLUMN_MSG_TYPE;
-import static com.android.mms.ui.MessageListAdapter.PROJECTION;
-
-import android.app.ActionBar;
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.app.StatusBarManager;
-import android.content.ActivityNotFoundException;
-import android.content.BroadcastReceiver;
-import android.content.ClipData;
-import android.content.ClipboardManager;
-import android.content.ComponentName;
-import android.content.ContentResolver;
-import android.content.ContentUris;
-import android.content.ContentValues;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.DialogInterface.OnClickListener;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.SharedPreferences;
-import android.content.res.Configuration;
-import android.content.res.Resources;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteException;
-import android.database.sqlite.SqliteWrapper;
-import android.drm.DrmStore;
-import android.graphics.drawable.Drawable;
-import android.media.RingtoneManager;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Environment;
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
-import android.os.Parcelable;
-import android.os.SystemClock;
-import android.preference.PreferenceManager;
-import android.provider.ContactsContract;
-import android.provider.MediaStore;
-import android.provider.Settings;
-import android.provider.Telephony;
-import android.provider.ContactsContract.CommonDataKinds;
-import android.provider.ContactsContract.CommonDataKinds.Email;
-import android.provider.ContactsContract.CommonDataKinds.Phone;
-import android.provider.ContactsContract.Contacts;
-import android.provider.ContactsContract.Data;
-import android.provider.ContactsContract.Intents;
-import android.provider.MediaStore.Audio;
-import android.provider.MediaStore.Images;
-import android.provider.MediaStore.Video;
-import android.provider.Telephony.Mms;
-import android.provider.Telephony.Sms;
-import android.telephony.SmsManager;
-import android.telephony.SmsMessage;
-import android.telephony.SubscriptionInfo;
-import android.telephony.SubscriptionManager;
-import android.telephony.TelephonyManager;
-import android.text.Editable;
-import android.text.InputFilter;
-import android.text.SpannableString;
-import android.text.Spanned;
-import android.text.TextUtils;
-import android.text.TextWatcher;
-import android.text.method.TextKeyListener;
-import android.text.style.URLSpan;
-import android.text.util.Linkify;
-import android.util.Log;
-import android.view.ContextMenu;
-import android.view.ContextMenu.ContextMenuInfo;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewStub;
-import android.view.Window;
-import android.view.WindowManager;
-import android.view.View.OnCreateContextMenuListener;
-import android.view.View.OnKeyListener;
-import android.view.View.OnTouchListener;
-import android.view.inputmethod.EditorInfo;
-import android.view.inputmethod.InputMethodManager;
-import android.webkit.MimeTypeMap;
-import android.widget.AdapterView;
-import android.widget.EditText;
-import android.widget.ImageButton;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.QuickContactBadge;
-import android.widget.SimpleAdapter;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.android.browser.provider.Browser;
-import com.android.ims.ImsManager;
-import com.android.internal.telephony.PhoneConstants;
-import com.android.internal.telephony.TelephonyIntents;
-import com.android.internal.telephony.TelephonyProperties;
-import com.android.mms.ExceedMessageSizeException;
-import com.android.mms.LogTag;
-import com.android.mms.MmsApp;
-import com.android.mms.MmsConfig;
-import com.android.mms.TempFileProvider;
-import com.android.mms.data.Contact;
-import com.android.mms.data.ContactList;
-import com.android.mms.data.Conversation;
-import com.android.mms.data.Conversation.ConversationQueryHandler;
-import com.android.mms.data.WorkingMessage;
-import com.android.mms.data.WorkingMessage.MessageStatusListener;
-import com.android.mms.draft.DraftManager;
-import com.android.mms.draft.DraftService;
-import com.android.mms.drm.DrmUtils;
-import com.android.mms.model.AudioModel;
-import com.android.mms.model.MediaModel;
-import com.android.mms.model.SlideModel;
-import com.android.mms.model.SlideshowModel;
-import com.android.mms.model.TextModel;
-import com.android.mms.R;
-import com.android.mms.transaction.MessagingNotification;
-import com.android.mms.transaction.MmsSystemEventReceiver.OnShutDownListener;
-import com.android.mms.transaction.MmsSystemEventReceiver.OnSubInforChangedListener;
-import com.android.mms.transaction.SmsReceiverService;
-import com.android.mms.transaction.Transaction;
-import com.android.mms.transaction.TransactionBundle;
-import com.android.mms.transaction.TransactionService;
-import com.android.mms.ui.MessageUtils.ResizeImageResultCallback;
-import com.android.mms.ui.RecipientsEditor.RecipientContextMenuInfo;
-import com.android.mms.ui.SubSelectDialog.SubClickAndDismissListener;
-import com.android.mms.util.DraftCache;
-import com.android.mms.util.FeatureOption;
-import com.android.mms.util.MessageResource;
-import com.android.mms.util.MmsContentType;
-import com.android.mms.util.MmsLog;
-import com.android.mms.util.SendingProgressTokenManager;
-import com.android.mms.util.ThreadCountManager;
-import com.android.mms.util.ThumbnailManager;
-import com.android.mms.widget.MmsWidgetProvider;
-import com.android.mtkex.chips.MTKRecipientEditTextView;
-import com.android.mtkex.chips.RecipientEntry;
-import com.android.mtkex.chips.MTKRecipientEditTextView.ChipProcessListener;
-import com.google.android.mms.MmsException;
-import com.google.android.mms.pdu.EncodedStringValue;
-import com.google.android.mms.pdu.PduBody;
-import com.google.android.mms.pdu.PduHeaders;
-import com.google.android.mms.pdu.PduPart;
-import com.google.android.mms.pdu.PduPersister;
-import com.google.android.mms.pdu.SendReq;
-
-import com.mediatek.cta.CtaUtils;
-import com.mediatek.internal.telephony.CellConnMgr;
-import com.mediatek.internal.telephony.DefaultSmsSimSettings;
-import com.mediatek.internal.telephony.MmsConfigInfo;
-import com.mediatek.ipmsg.util.IpMessageUtils;
-import com.mediatek.mms.callback.IComposeActivityCallback;
-import com.mediatek.mms.callback.ITextSizeAdjustHost;
-import com.mediatek.mms.callback.IWorkingMessageCallback;
-import com.mediatek.mms.ext.IOpComposeExt;
-import com.mediatek.mms.ext.IOpWorkingMessageExt;
-import com.mediatek.mms.folder.ui.FolderViewList;
-import com.mediatek.mms.folder.util.FolderModeUtils;
-import com.mediatek.mms.ipmessage.IIpComposeActivityExt;
-import com.mediatek.mms.ipmessage.IIpConversationExt;
-import com.mediatek.mms.model.FileAttachmentModel;
-import com.mediatek.mms.ui.VCardAttachment;
-import com.mediatek.mms.util.DrmUtilsEx;
-import com.mediatek.mms.util.MmsDialogNotifyUtils;
-import com.mediatek.mms.util.MmsSizeUtils;
-import com.mediatek.mms.util.PermissionCheckUtil;
-import com.mediatek.mms.util.VCardUtils;
-import com.mediatek.opmsg.util.OpMessageUtils;
-import com.mediatek.setting.GeneralPreferenceActivity;
-import com.mediatek.setting.MmsPreferenceActivity;
-import com.mediatek.setting.SettingListActivity;
-import com.mediatek.storage.StorageManagerEx;
-import com.mediatek.telephony.TelephonyManagerEx;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
-import java.lang.ref.WeakReference;
-import java.net.URLDecoder;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.regex.Pattern;
-
-/**
- * This is the main UI for:
- * 1. Composing a new message;
- * 2. Viewing/managing message history of a conversation.
- *
- * This activity can handle following parameters from the intent
- * by which it's launched.
- * thread_id long Identify the conversation to be viewed. When creating a
- *         new message, this parameter shouldn't be present.
- * msg_uri Uri The message which should be opened for editing in the editor.
- * address String The addresses of the recipients in current conversation.
- * exit_on_sent boolean Exit this activity after the message is sent.
- */
-public class ComposeMessageActivity extends Activity
-        implements View.OnClickListener, TextView.OnEditorActionListener,
-        MessageStatusListener, Contact.UpdateListener, OnShutDownListener,
- OnSubInforChangedListener,
-        ITextSizeAdjustHost, SubClickAndDismissListener {
-    public static final int REQUEST_CODE_ATTACH_IMAGE     = 100;
-    public static final int REQUEST_CODE_TAKE_PICTURE     = 101;
-    public static final int REQUEST_CODE_ATTACH_VIDEO     = 102;
-    public static final int REQUEST_CODE_TAKE_VIDEO       = 103;
-    public static final int REQUEST_CODE_ATTACH_SOUND     = 104;
-    public static final int REQUEST_CODE_RECORD_SOUND     = 105;
-    public static final int REQUEST_CODE_CREATE_SLIDESHOW = 106;
-    public static final int REQUEST_CODE_ECM_EXIT_DIALOG  = 107;
-    public static final int REQUEST_CODE_ADD_CONTACT      = 108;
-    public static final int REQUEST_CODE_PICK             = 109;
-
-    /// M: fix bug ALPS00490684, update group mms state from GROUP_PARTICIPANTS to setting @{
-    public static final int REQUEST_CODE_GROUP_PARTICIPANTS = 130;
-    /// @}
-    /// M: fix bug ALPS00448677, update or delete Contact Chip
-    public static final int REQUEST_CODE_VIEW_CONTACT     = 111;
-    private Contact mInViewContact;
-    /// @}
-
-    private static final String TAG = "Mms/compose";
-    private static final String TAG_OMH = "OMH_MMS";
-    /// M: add for ip message
-    private static final String TAG_DIVIDER = "Mms/divider";
-
-    private static final boolean DEBUG = false;
-    private static final boolean TRACE = false;
-    private static final boolean LOCAL_LOGV = false;
-
-    // Menu ID
-    private static final int MENU_ADD_SUBJECT           = 0;
-    private static final int MENU_DELETE_THREAD         = 1;
-    private static final int MENU_ADD_ATTACHMENT        = 2;
-    private static final int MENU_DISCARD               = 3;
-    private static final int MENU_SEND                  = 4;
-    private static final int MENU_CALL_RECIPIENT        = 5;
-    private static final int MENU_CONVERSATION_LIST     = 6;
-    private static final int MENU_DEBUG_DUMP            = 7;
-
-    // Context menu ID
-    private static final int MENU_VIEW_CONTACT          = 12;
-    private static final int MENU_ADD_TO_CONTACTS       = 13;
-
-    private static final int MENU_EDIT_MESSAGE          = 14;
-    private static final int MENU_VIEW_SLIDESHOW        = 16;
-    private static final int MENU_VIEW_MESSAGE_DETAILS  = 17;
-    private static final int MENU_DELETE_MESSAGE        = 18;
-    private static final int MENU_SEARCH                = 19;
-    private static final int MENU_DELIVERY_REPORT       = 20;
-    private static final int MENU_FORWARD_MESSAGE       = 21;
-    private static final int MENU_CALL_BACK             = 22;
-    private static final int MENU_SEND_EMAIL            = 23;
-    private static final int MENU_COPY_MESSAGE_TEXT     = 24;
-    private static final int MENU_COPY_TO_SDCARD        = 25;
-    private static final int MENU_INSERT_SMILEY         = 26;
-    private static final int MENU_ADD_ADDRESS_TO_CONTACTS = 27;
-    private static final int MENU_LOCK_MESSAGE          = 28;
-    private static final int MENU_UNLOCK_MESSAGE        = 29;
-    private static final int MENU_SAVE_RINGTONE         = 30;
-    private static final int MENU_PREFERENCES           = 31;
-    /// M: google jb.mr1 patch
-    private static final int MENU_GROUP_PARTICIPANTS    = 32;
-
-    private static final int MENU_SELECT_MESSAGE = 101;
-
-    private static final int MENU_COPY = 207;
-
-    private static final int MESSAGE_LIST_QUERY_TOKEN = 9527;
-    private static final int MESSAGE_LIST_QUERY_AFTER_DELETE_TOKEN = 9528;
-
-    private static final int DELETE_MESSAGE_TOKEN  = 9700;
-
-    private static final int CHARS_REMAINING_BEFORE_COUNTER_SHOWN = 10;
-
-    private static final long NO_DATE_FOR_DIALOG = -1L;
-
-    private static final String KEY_EXIT_ON_SENT = "exit_on_sent";
-    private static final String KEY_FORWARDED_MESSAGE = "forwarded_message";
-    private static final String KEY_APPEND_MESSAGE = "append_attachment";
-
-    private static final String EXIT_ECM_RESULT = "exit_ecm_result";
-
-    // When the conversation has a lot of messages and a new message is sent, the list is scrolled
-    // so the user sees the just sent message. If we have to scroll the list more than 20 items,
-    // then a scroll shortcut is invoked to move the list near the end before scrolling.
-    private static final int MAX_ITEMS_TO_INVOKE_SCROLL_SHORTCUT = 20;
-
-    // Any change in height in the message list view greater than this threshold will not
-    // cause a smooth scroll. Instead, we jump the list directly to the desired position.
-    private static final int SMOOTH_SCROLL_THRESHOLD = 200;
-
-    ///M: ALPS00592380: status of detection
-    private static final int DETECT_INIT = 0;
-    private static final int DETECT_ANGLE_BRACKETS = 1;
-    private static final int DETECT_ANGLE_BRACKETS_WITH_WORD = 2;
-
-    int TOAST_TYPE_FOR_SAVE_DRAFT = 0;
-    int TOAST_TYPE_FOR_SEND_MSG = 1;
-    int TOAST_TYPE_FOR_ATTACH = 2;
-
-    String USING_COLON = "USE_COLON";
-
-    String SELECTION_CONTACT_RESULT = "contactId";
-    String NUMBERS_SEPARATOR_COLON = ":";
-    String NUMBERS_SEPARATOR_SIMCOLON = ";";
-    String NUMBERS_SEPARATOR_COMMA = ",";
-
-    private ContentResolver mContentResolver;
-
-    private BackgroundQueryHandler mBackgroundQueryHandler;
-
-    private Conversation mConversation;     // Conversation we are working in
-
-    private boolean mExitOnSent;            // Should we finish() after sending a message?
-                                            // TODO: mExitOnSent is obsolete -- remove
-    private boolean mForwardMessageMode;
-
-    private View mTopPanel;                 // View containing the recipient and subject editors
-    private View mBottomPanel;              // View containing the text editor, send button, ec.
-    private EnhanceEditText mTextEditor;           // Text editor to type your message into
-    private TextView mTextCounter;          // Shows the number of characters used in text editor
-    private TextView mSendButtonMms;        // Press to send mms
-    private ImageButton mSendButtonSms;     // Press to send sms
-    private EditText mSubjectTextEditor;    // Text editor for MMS subject
-
-    private TextView mTypingStatus;
-    private TextView mRemoteStrangerText;
-
-    private AttachmentEditor mAttachmentEditor;
-    private View mAttachmentEditorScrollView;
-
-    private MessageListView mMsgListView;        // ListView for messages in this conversation
-    /// M: @{
-    public MessageListAdapter mMsgListAdapter = null;  // and its corresponding ListAdapter
-    /// @}
-    private RecipientsEditor mRecipientsEditor;  // UI control for editing recipients
-    private ImageButton mRecipientsPicker;       // UI control for recipients picker
-
-    private boolean mIsKeyboardOpen;             // Whether the hardware keyboard is visible
-    /// M: fix bug ALPS00419856, set TextEditor Height = four when unlock screen @{
-    private boolean mIsSoftKeyBoardShow;
-    private static final int SOFT_KEY_BOARD_MIN_HEIGHT = 150;
-    /// @}
-    private boolean mIsLandscape;                // Whether we're in landscape mode
-
-    private boolean mPossiblePendingNotification;   // If the message list has changed, we may have
-                                                    // a pending notification to deal with.
-
-    private boolean mToastForDraftSave;   // Whether to notify the user that a draft is being saved
-
-    private boolean mSentMessage;       // true if the user has sent a message while in this
-                                        // activity. On a new compose message case, when the first
-                                        // message is sent is a MMS w/ attachment, the list blanks
-                                        // for a second before showing the sent message. But we'd
-                                        // think the message list is empty, thus show the recipient
-                                        // editor thinking it's a draft message. This flag should
-                                        // help clarify the situation.
-
-    private WorkingMessage mWorkingMessage;         // The message currently being composed.
-
-    private AlertDialog mSmileyDialog;
-
-    private AlertDialog mDiscardDraftDialog;
-
-    private boolean mWaitingForSubActivity;
-    private int mLastRecipientCount;    // Used for warning the user on too many recipients.
-    private AttachmentTypeSelectorAdapter mAttachmentTypeSelectorAdapter;
-
-    private boolean mSendingMessage;    // Indicates the message is sending, and not send again.
-
-    private Intent mAddContactIntent;   // Intent used to add a new contact
-
-    private Uri mTempMmsUri;            // Only used as a temporary to hold a slideshow uri
-    private long mTempThreadId;         // Only used as a temporary to hold a threadId
-    /// M: fix bug for ConversationList select all performance ,update selected threads array.@{
-    private long mSelectedThreadId = 0;
-    /// @}
-
-    private AsyncDialog mAsyncDialog;   // Used for background tasks.
-
-    private String mDebugRecipients;
-    private int mLastSmoothScrollPosition;
-    private boolean mScrollOnSend;      // Flag that we need to scroll the list to the end.
-
-    private int mSavedScrollPosition = -1;  // we save the ListView's scroll position in onPause(),
-                                            // so can remember it after re-entering the activity.
-                                            // If the value >= 0, then we jump to that line. If the
-                                            // value is maxint, then we jump to the end.
-    private long mLastMessageId;
-
-    ///M: ALPS00726802, this int save the position in cursor of the clicked item
-    private int mClickedItemPosition = -1;
-
-    private boolean  mErrorDialogShown = true;
-    /**
-     * Whether this activity is currently running (i.e. not paused)
-     */
-    private boolean mIsRunning;
-    // key for extras and icicles
-    public static final String THREAD_ID = "thread_id";
-
-    ///M: add for fix issue ALPS00380788
-    private ProgressDialog mCellProgressDialog;
-
-    /// M: fix bug ALPS00397146, removeThumbnailManager uri
-    // (Content://media/external/images/media/) when it rotated
-    private static final HashMap<String, Integer> sDegreeMap = new HashMap<String, Integer>();
-    /// @}
-
-    private String mBeforeTextChangeString = "";
-
-    //public static final String SELECTED_ID = "SELECTID";
-
-    private InputMethodManager mInputMethodManager = null;
-
-    private AlertDialog mPlaneModeDialog = null;
-
-    ///M: actionbar customer view
-    private View mActionBarCustomView;
-    private TextView mTopTitle;
-    private ImageView mMuteLogo;
-    private TextView mTopSubtitle;
-
-    private boolean mHadToSlideShowEditor = false;
-
-    /// M: record cell progress dialog is showing or not
-    private boolean mIsCellDialogShowing = false;
-
-    private boolean mForwardingMessage = false;
-
-    /// M: fix bug ALPS01258201, mAsyncTaskNum for count asyncTask number
-    //  ShowRunnable can avoid dismiss progressDialog.
-    private int mAsyncTaskNum;
-
-    /// M: fix bug ALPS01505548, delete VCard temp file
-    private ArrayList<String> mVCardFiles = new ArrayList<String>();
-
-    // add for ipmessage
-    public IIpComposeActivityExt mIpCompose;
-    public ComposeActivityCallback mIpComposeCallback = new ComposeActivityCallback();
-
-    // add for Op plugin
-    public IOpComposeExt mOpComposeExt;
-
-    private ContextMenu mChipViewMenu = null;
-
-    private boolean mIsActivityPaused = true;
-    private boolean mIsActivityStoped = true;
-
-    // add for Runtime permission
-    private boolean mNeedRequestPermissins = false;
-    private Bundle mSavedInstanceState = null;
-
-    /// M: ALPS03562153 @{
-    private boolean mCreateFromSendTo = false;
-    /// @}
-
-    private void dismissProgressDialog() {
-        Log.d(TAG, "Composer reduce mAsyncTaskNum = " + (--mAsyncTaskNum));
-        if (mAsyncTaskNum == 0) {
-            runOnUiThread(new Runnable() {
-                public void run() {
-                    getAsyncDialog().dismissProgressDialog();
-                    getAsyncDialog().resetProgressDialog();
-                }
-            });
-        }
-    }
-
-    class ShowRunnable implements Runnable {
-        public void run() {
-        }
-    }
-
-    private Runnable mQueryMsgListRunnable = new Runnable() {
-        public void run() {
-            // add for op plugin
-            Uri conversationUri = mOpComposeExt.onQueryMsgListRun(mConversation.getUri(),
-                    mConversation.getThreadId());
-            if (conversationUri == null) {
-                log("##### startMsgListQuery: conversationUri is null, bail!");
-                return;
-            }
-            final long threadId = mConversation.getThreadId();
-
-            boolean queryed = mIpCompose.onIPQueryMsgList(mBackgroundQueryHandler,
-                    MESSAGE_LIST_QUERY_TOKEN, threadId, conversationUri,
-                    PROJECTION, null, null, null);
-            if (!queryed) {
-                mBackgroundQueryHandler.startQuery(
-                        MESSAGE_LIST_QUERY_TOKEN, threadId, conversationUri,
-                        PROJECTION, null, null, null);
-            }
-        }
-    };
-    /// @}
-
-    public Handler mHandler = new Handler() {
-        public void handleMessage(Message msg) {
-            if (mIpCompose.handleIpMessage(msg)) {
-                super.handleMessage(msg);
-                return;
-            }
-            super.handleMessage(msg);
-        }
-    };
-
-    @SuppressWarnings("unused")
-    public static void log(String logMsg) {
-        Thread current = Thread.currentThread();
-        long tid = current.getId();
-        StackTraceElement[] stack = current.getStackTrace();
-        String methodName = stack[3].getMethodName();
-        // Prepend current thread ID and name of calling method to the message.
-        logMsg = "[" + tid + "] [" + methodName + "] " + logMsg;
-        Log.d(TAG, logMsg);
-    }
-
-    //==========================================================
-    // Inner classes
-    //==========================================================
-
-    private void editSlideshow() {
-        // The user wants to edit the slideshow. That requires us to persist the slideshow to
-        // disk as a PDU in saveAsMms. This code below does that persisting in a background
-        // task. If the task takes longer than a half second, a progress dialog is displayed.
-        // Once the PDU persisting is done, another runnable on the UI thread get executed to start
-        // the SlideshowEditActivity.
-
-        /// M: fix bug ALPS00520531, Do not load draft when compose is going to edit slideshow
-//        mContentResolver.unregisterContentObserver(mDraftChangeObserver);
-
-        getAsyncDialog().runAsync(new Runnable() {
-            @Override
-            public void run() {
-                // This runnable gets run in a background thread.
-                mTempMmsUri = mWorkingMessage.saveAsMms(false);
-            }
-        }, new Runnable() {
-            @Override
-            public void run() {
-                // Once the above background thread is complete, this runnable is run
-                // on the UI thread.
-                if (mTempMmsUri == null) {
-                    mWaitingForSubActivity = false;
-                    return;
-                }
-                long threadId = mConversation.getThreadId();
-                if (threadId <= 0) {
-                    if (!mConversation.getRecipients().isEmpty()) {
-                        threadId = mConversation.ensureThreadId();
-                    }
-                }
-                /// M: add for fix ALPS01317511 @{
-                mOpComposeExt.editSlideshow(mHadToSlideShowEditor);
-                /// @}
-                Intent intent = new Intent(ComposeMessageActivity.this,
-                        SlideshowEditActivity.class);
-                intent.setData(mTempMmsUri);
-                intent.putExtra("thread_id", threadId);
-                startActivityForResult(intent, REQUEST_CODE_CREATE_SLIDESHOW);
-            }
-        // M: fix bug ALPS00351027
-        }, R.string.sync_mms_to_db);
-    }
-
-    private final Handler mAttachmentEditorHandler = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-            MmsLog.d(TAG, "mAttachmentEditorHandler, handleMessage = " + msg.what);
-            /// M: Code analyze 026, If the two clicks are too close. @{
-
-            long oldTime = mAttachClickTime;
-            mAttachClickTime = SystemClock.elapsedRealtime();
-            if ((mAttachClickTime - oldTime < 500) && (mAttachClickTime - oldTime > 0)) {
-                MmsLog.d(TAG, "mAttachmentEditorHandler, ignore a click if too close");
-                return;
-            }
-
-            /// M: OP01
-            if (mOpComposeExt.handleAttachmentEditorHandlerMessage(msg,
-                    mSendButtonCanResponse, mWorkingMessage,
-                    mWorkingMessage.getSlideshow(), mCompressingImage)) {
-                return;
-            }
-            switch (msg.what) {
-                case AttachmentEditor.MSG_EDIT_SLIDESHOW: {
-                    /// M: Code analyze 024, If the click operator can be responsed. @{
-                    if (mClickCanResponse) {
-                        mClickCanResponse = false;
-                        /// M: Code analyze 038, If the user is editing slideshow now.
-                        /// Do not allow the activity finish but return
-                        /// directly when back key is entered. @{
-                        mIsEditingSlideshow = true;
-                        /// @}
-                        editSlideshow();
-                    }
-                    /// @}
-                    break;
-                }
-                case AttachmentEditor.MSG_SEND_SLIDESHOW: {
-                    if (isPreparedForSending()) {
-                        /// M: Code analyze 028, Before sending message,check the recipients count
-                        /// and add sub card selection dialog if multi sub cards exist.@{
-                        // ComposeMessageActivity.this.confirmSendMessageIfNeeded();
-                        checkRecipientsCount();
-                        /// @}
-                    }
-                    break;
-                }
-                case AttachmentEditor.MSG_VIEW_IMAGE:
-                case AttachmentEditor.MSG_PLAY_VIDEO:
-                case AttachmentEditor.MSG_PLAY_AUDIO:
-                case AttachmentEditor.MSG_PLAY_SLIDESHOW:
-                    /// M: Code analyze 024, If the click operator can be responsed. @{
-                    if (mClickCanResponse) {
-                        mClickCanResponse = false;
-                        viewMmsMessageAttachment(msg.what);
-                    }
-                    /// @}
-                    /// M: Code analyze 051, Hide input keyboard.@{
-                    hideInputMethod();
-                    /// @}
-                    break;
-
-                case AttachmentEditor.MSG_REPLACE_IMAGE:
-                    /// M: @{
-                    getSharedPreferences("SetDefaultLayout", 0)
-                        .edit().putBoolean("SetDefaultLayout", false).commit();
-                    /// @}
-                case AttachmentEditor.MSG_REPLACE_VIDEO:
-                case AttachmentEditor.MSG_REPLACE_AUDIO:
-                    /// M: Code analyze 051, Hide input keyboard.@{
-                    hideInputMethod();
-                    /// @}
-                    showAddAttachmentDialog(false);
-                    break;
-
-                case AttachmentEditor.MSG_REMOVE_ATTACHMENT:
-                    /// M: fix bug ALPS01538338
-                    if (!mSendButtonCanResponse) {
-                        MmsLog.d(TAG, "handle MSG_REMOVE_ATTACHMENT return");
-                        return;
-                    }
-                    mWorkingMessage.removeAttachment(true);
-                    break;
-                default:
-                    break;
-            }
-        }
-    };
-
-
-    private void viewMmsMessageAttachment(final int requestCode) {
-        final SlideshowModel slideshow = mWorkingMessage.getSlideshow();
-        if (slideshow == null) {
-            /// M: ALPS01846425. If mms has been sent, slideshow is null. @{
-//            throw new IllegalStateException("mWorkingMessage.getSlideshow() == null");
-            MmsLog.e(TAG, "viewMmsMessageAttachment slideshow is null",
-                    new IllegalStateException("mWorkingMessage.getSlideshow() == null"));
-            return;
-            /// @}
-        }
-        /// M: Code analyze 035, The audio becomes "simple" slideshow.
-        /// Launch the slideshow activity or MmsPlayerActivity to play/view media attachment. @{
-        SlideModel slideOne = slideshow.get(0);
-        if (slideshow.isSimple() && slideOne != null && !slideOne.hasAudio()) {
-            MessageUtils.viewSimpleSlideshow(this, slideshow);
-        } else {
-
-            // M: change feature ALPS01751464
-            if (slideshow.isSimple() && slideOne != null && slideOne.hasAudio()) {
-                MediaModel model = slideOne.getAudio();
-                if (model != null && model.hasDrmContent()) {
-                    DrmUtilsEx.showDrmAlertDialog(ComposeMessageActivity.this);
-                    return;
-                }
-            }
-
-            // The user wants to view the slideshow. That requires us to persist the slideshow to
-            // disk as a PDU in saveAsMms. This code below does that persisting in a background
-            // task. If the task takes longer than a half second, a progress dialog is displayed.
-            // Once the PDU persisting is done, another runnable on the UI thread get executed to
-            // start the SlideshowActivity.
-            getAsyncDialog().runAsync(new Runnable() {
-                @Override
-                public void run() {
-                    // This runnable gets run in a background thread.
-                    mTempMmsUri = mWorkingMessage.saveAsMms(false);
-                }
-            }, new Runnable() {
-                @Override
-                public void run() {
-                    // Once the above background thread is complete, this runnable is run
-                    // on the UI thread.
-                    // Launch the slideshow activity to play/view.
-                    Intent intent;
-                    SlideModel slide = slideshow.get(0);
-                    /// M: play the only audio directly
-                    if ((slideshow.isSimple() && slide != null && slide.hasAudio())
-                        || (requestCode == AttachmentEditor.MSG_PLAY_AUDIO)) {
-                        intent = new Intent(ComposeMessageActivity.this, SlideshowActivity.class);
-                    } else {
-                        intent = new Intent(ComposeMessageActivity.this, MmsPlayerActivity.class);
-                    }
-                    intent.setData(mTempMmsUri);
-                    if (mTempMmsUri == null) {
-                        MmsLog.d(TAG, "viewMmsMessageAttachment mTempMmsUri == null");
-                        return;
-                    }
-                    if (requestCode > 0) {
-                        startActivityForResult(intent, requestCode);
-                    } else {
-                        startActivity(intent);
-                    }
-                    /// @}
-                }
-            // M: fix bug ALPS00351027
-            }, R.string.sync_mms_to_db);
-        }
-    }
-
-    // Whether or not we are currently enabled for SMS. This field is updated in onStart to make
-    // sure we notice if the user has changed the default SMS app.
-    private boolean mIsSmsEnabled;
-
-    private final Handler mMessageListItemHandler = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-            MessageItem msgItem = (MessageItem) msg.obj;
-                /// M: move if into switch, we have item not use it.
-                /// M: Code analyze, fix bug ALPS00358964
-            if (msgItem != null && mIpCompose.onIpMessageListItemHandler(msg.what, msgItem.mMsgId,
-                    mConversation.getThreadId(), msgItem.mSubId)) {
-                return;
-            }
-
-            if (msgItem != null
-                    && mOpComposeExt.onMessageListItemHandler(msg, msgItem.mTimestamp)) {
-                return;
-            }
-
-                switch (msg.what) {
-                    case MessageListItem.MSG_LIST_DETAILS:
-                        if (msgItem != null) {
-                            showMessageDetails(msgItem);
-                        }
-                        break;
-
-                    case MessageListItem.MSG_LIST_EDIT:
-                        if (msgItem != null && mIsSmsEnabled) {
-                            editMessageItem(msgItem);
-                            updateSendButtonState();
-                            drawBottomPanel();
-                        }
-                        break;
-
-                    case MessageListItem.MSG_LIST_PLAY:
-                        if (msgItem != null) {
-                            switch (msgItem.mAttachmentType) {
-                                case WorkingMessage.IMAGE:
-                                case WorkingMessage.VIDEO:
-                                case WorkingMessage.AUDIO:
-                                case WorkingMessage.SLIDESHOW:
-                                    MessageUtils.viewMmsMessageAttachment(
-                                            ComposeMessageActivity.this,
-                                            msgItem.mMessageUri, msgItem.mSlideshow,
-                                            getAsyncDialog());
-                                    break;
-                            }
-                        }
-                        break;
-
-                    /// M: Code analyze 039, When the cache add new item,
-                    /// notifiy ComposeMessageAcitivity the data has been changed .@{
-                    case MessageListAdapter.MSG_LIST_NEED_REFRASH: {
-                        boolean isClearCache =
-                            msg.arg1 == MessageListAdapter.MESSAGE_LIST_REFRASH_WITH_CLEAR_CACHE;
-                        MmsLog.d(MessageListAdapter.CACHE_TAG,
-                                "mMessageListItemHandler.handleMessage(): " +
-                                    "run adapter notify in isClearCache = " + isClearCache);
-                        mMsgListAdapter.setClearCacheFlag(isClearCache);
-                        mMsgListAdapter.notifyDataSetChanged();
-                        return;
-                    }
-                    /// @
-                    /// M:,Support messages multi-delete opeartor. @{
-                    case MessageListItem.ITEM_CLICK: { // can be deleted!!!
-                        mMsgListAdapter.changeSelectedState(msg.arg1);
-                        return;
-                    }
-                    /// @}
-                    default:
-                        Log.w(TAG, "Unknown message: " + msg.what);
-                        return;
-                }
-        }
-    };
-
-    private boolean showMessageDetails(MessageItem msgItem) {
-        /// M: Code analyze 040, The function getMessageDetails
-        /// use MessageItem but not cursor now.@{
-        /*
-        Cursor cursor = mMsgListAdapter.getCursorForItem(msgItem);
-        if (cursor == null) {
-            return false;
-        }
-        */
-        if (mIpCompose.showIpMessageDetails(msgItem.mIpMessageItem)) {
-            return true;
-        }
-
-        if (mOpComposeExt.showMessageDetails(String.valueOf(msgItem.mIpMessageId))) {
-            return true;
-        }
-
-        String messageDetails = MessageUtils.getMessageDetails(
-               //ComposeMessageActivity.this, cursor, msgItem.mMessageSize);
-                ComposeMessageActivity.this, msgItem);
-        /// @}
-        MmsLog.dpi(TAG, "showMessageDetails. messageDetails:" + messageDetails);
-        new AlertDialog.Builder(ComposeMessageActivity.this)
-                .setTitle(R.string.message_details_title)
-                .setMessage(messageDetails)
-                .setCancelable(true)
-                .show();
-        return true;
-    }
-
-    private final OnKeyListener mSubjectKeyListener = new OnKeyListener() {
-        @Override
-        public boolean onKey(View v, int keyCode, KeyEvent event) {
-            if (event.getAction() != KeyEvent.ACTION_DOWN) {
-                return false;
-            }
-
-            // When the subject editor is empty, press "DEL" to hide the input field.
-            if ((keyCode == KeyEvent.KEYCODE_DEL) && (mSubjectTextEditor.length() == 0)) {
-                showSubjectEditor(false);
-                mWorkingMessage.setSubject(null, true);
-                /// M: add for character counter
-                updateCounter(mWorkingMessage.getText(), 0, 0, 0);
-                return true;
-            }
-            return false;
-        }
-    };
-
-    /**
-     * Return the messageItem associated with the type ("mms" or "sms") and message id.
-     * @param type Type of the message: "mms" or "sms"
-     * @param msgId Message id of the message. This is the _id of the sms or pdu row and is
-     * stored in the MessageItem
-     * @param createFromCursorIfNotInCache true if item is not found in the MessageListAdapter's
-     * cache and the code can create a new MessageItem based on the position of the current cursor.
-     * If false, the function returns null if the MessageItem isn't in the cache.
-     * @return MessageItem or null if not found and createFromCursorIfNotInCache is false
-     */
-    private MessageItem getMessageItem(String type, long msgId,
-            boolean createFromCursorIfNotInCache) {
-        return mMsgListAdapter.getCachedMessageItem(type, msgId,
-                createFromCursorIfNotInCache ? mMsgListAdapter.getCursor() : null);
-    }
-
-    private boolean isCursorValid() {
-        // Check whether the cursor is valid or not.
-        Cursor cursor = mMsgListAdapter.getCursor();
-        if (cursor.isClosed() || cursor.isBeforeFirst() || cursor.isAfterLast()) {
-            Log.e(TAG, "Bad cursor.", new RuntimeException());
-            return false;
-        }
-        return true;
-    }
-
-    /*** M: remove Google default code
-    private void resetCounter() {
-        /// M: Code analyze 032, According to the message state to update text counter.@{
-        mTextEditor.setText(mWorkingMessage.getText());
-        /// M: once updateCounter.
-        updateCounter(mWorkingMessage.getText(), 0, 0, 0);
-        if (mWorkingMessage.requiresMms()) {
-            mTextCounter.setVisibility(View.GONE);
-        } else {
-            mTextCounter.setVisibility(View.VISIBLE);
-        }
-        /// @}
-    }
-    */
-
-    private void updateCounter(CharSequence text, int start, int before, int count) {
-        if (!mIsSmsEnabled) {
-            MmsLog.w(TAG, "updateCounter(): sms is disabled!");
-            mTextCounter.setVisibility(View.GONE);
-            return;
-        }
-        if (text == null) {
-            MmsLog.w(TAG, "updateCounter(): text is null!");
-            return;
-        }
-
-        if (mOpComposeExt.updateCounter(text, mTextCounter, mWorkingMessage)) {
-            return;
-        }
-
-        if (text.length() == 0) {
-            mTextCounter.setVisibility(View.GONE);
-            mWorkingMessage.setLengthRequiresMms(false, true);
-            return;
-        }
-
-        // add for ipmessage
-        if (mIpCompose.onIpUpdateCounter(text, start, before, count)) {
-            return;
-        }
-
-        /// M: Code analyze 031, Add encode type for calculating message lenght and always show
-        /// text counter if it is in sms mode.@{
-        /*
-        WorkingMessage workingMessage = mWorkingMessage;
-        if (workingMessage.requiresMms()) {
-            // If we're not removing text (i.e. no chance of converting back to SMS
-            // because of this change) and we're in MMS mode, just bail out since we
-            // then won't have to calculate the length unnecessarily.
-            final boolean textRemoved = (before > count);
-            if (!textRemoved) {
-                showSmsOrMmsSendButton(workingMessage.requiresMms());
-                return;
-            }
-        }
-        */
-        int[] params = null;
-
-        int encodingType = SmsMessage.ENCODING_UNKNOWN;
-
-        encodingType = mOpComposeExt.getSmsEncodingType(encodingType, ComposeMessageActivity.this);
-        MmsLog.d(TAG, "updateCounter getSmsEncodingType encodingType = " + encodingType ); // Add this log
-        
-        if(encodingType == SmsMessage.ENCODING_7BIT){
-            params = SmsMessage.calculateLength(text, true, encodingType);
-        } else {
-            params = SmsMessage.calculateLength(text, false, encodingType);
-        }
-            /* SmsMessage.calculateLength returns an int[4] with:
-             *   int[0] being the number of SMS's required,
-             *   int[1] the number of code units used,
-             *   int[2] is the number of code units remaining until the next message.
-             *   int[3] is the encoding type that should be used for the message.
-             */
-        final int msgCount = params[0];
-        final int remainingInCurrentMessage = params[2];
-        /*
-        if (!MmsConfig.getMultipartSmsEnabled()) {
-            mWorkingMessage.setLengthRequiresMms(
-                    msgCount >= MmsConfig.getSmsToMmsTextThreshold(), true);
-        }
-
-        // Show the counter only if:
-        // - We are not in MMS mode
-        // - We are going to send more than one message OR we are getting close
-        boolean showCounter = false;
-        if (!workingMessage.requiresMms() &&
-                (msgCount > 1 ||
-                 remainingInCurrentMessage <= CHARS_REMAINING_BEFORE_COUNTER_SHOWN)) {
-            showCounter = true;
-        }
-
-        showSmsOrMmsSendButton(workingMessage.requiresMms());
-
-        if (showCounter) {
-            // Update the remaining characters and number of messages required.
-            String counterText = msgCount > 1 ? remainingInCurrentMessage + " / " + msgCount
-                    : String.valueOf(remainingInCurrentMessage);
-            mTextCounter.setText(counterText);
-            mTextCounter.setVisibility(View.VISIBLE);
-        } else {
-            mTextCounter.setVisibility(View.GONE);
-        }
-         */
-        mWorkingMessage.setLengthRequiresMms(
-            msgCount >= MmsConfig.getSmsToMmsTextThreshold(), true);
-        MmsLog.d(TAG, "updateCounter(): message msgCount = " + msgCount
-                + " TextThreshold() = " + MmsConfig.getSmsToMmsTextThreshold()
-                + " remainingInCurrentMessage = " + remainingInCurrentMessage);
-        /// M: Show the counter
-        /// M: Update the remaining characters and number of messages required.
-        if (msgCount >= MmsConfig.getSmsToMmsTextThreshold()) {
-            mTextCounter.setVisibility(View.GONE);
-            return;
-        }
-        mUiHandler.postDelayed(new Runnable() {
-            @Override
-            public void run() {
-                if (mOpComposeExt.updateCounterUiRun(mTextEditor, remainingInCurrentMessage,
-                        msgCount, mWorkingMessage)) {
-                    return;
-                }
-
-                MmsLog.d(TAG, "updateCounter requiresMms = " + mWorkingMessage.requiresMms()
-                        + " line count = " + mTextEditor.getLineCount());
-                if (mWorkingMessage.requiresMms() || /*mTextEditor.getLineCount() <= 1*/TextUtils.isEmpty(mTextEditor.getText().toString().trim())) {
-                    mTextCounter.setVisibility(View.GONE);
-                    return;
-                }
-                mTextCounter.setVisibility(View.VISIBLE);
-                String counterText = remainingInCurrentMessage + "/" + msgCount;
-                mTextCounter.setText(counterText);
-            }
-        }, 100);
-        /// @}
-    }
-
-    @Override
-    public void startActivityForResult(Intent intent, int requestCode) {
-        if (mNeedRequestPermissins) {
-            super.startActivityForResult(intent, requestCode);
-            return;
-        }
-
-        // requestCode >= 0 means the activity in question is a sub-activity.
-        if (requestCode >= 0) {
-            mWaitingForSubActivity = true;
-        }
-
-        /// M : FIX CR : ALPS01795853 @{
-        if (mWorkingMessage.getText().toString().trim().length() != 0) {
-            if (requestCode == REQUEST_CODE_ATTACH_IMAGE
-                    || requestCode == REQUEST_CODE_ATTACH_VIDEO
-                    || requestCode == REQUEST_CODE_ADD_CONTACT
-                    || requestCode == REQUEST_CODE_ATTACH_SOUND
-                    || requestCode == REQUEST_CODE_ATTACH_RINGTONE
-                    || requestCode == REQUEST_CODE_ATTACH_VCALENDAR
-                    || requestCode == REQUEST_CODE_ATTACH_VCARD
-                    || requestCode == REQUEST_CODE_RECORD_SOUND
-                    || requestCode == REQUEST_CODE_TAKE_PICTURE
-                    || requestCode == REQUEST_CODE_TAKE_VIDEO
-                    || requestCode == REQUEST_CODE_TEXT_VCARD) {
-                mWorkingMessage.setTruntoChooseAttach(true);
-            }
-        }
-        /// @}
-
-
-        if (mIsKeyboardOpen) {
-            hideKeyboard();  // camera and other activities take a long time to hide the keyboard
-        }
-
-        /// M: Code analyze 041, Add exception handling for starting activity.@{
-        if (null != intent && null != intent.getData()
-                && intent.getData().getScheme().equals("mailto")) {
-            try {
-                super.startActivityForResult(intent, requestCode);
-            } catch (ActivityNotFoundException e) {
-                MmsLog.e(TAG,
-                        "[ActivityNotFoundException] Failed to startActivityForResult: " + intent);
-                Intent mchooserIntent = Intent.createChooser(intent, null);
-                super.startActivityForResult(mchooserIntent, requestCode);
-            } catch (Exception e) {
-                MmsLog.e(TAG, "[Exception] Failed to startActivityForResult: " + intent);
-                Toast.makeText(this, getString(R.string.message_open_email_fail),
-                      Toast.LENGTH_SHORT).show();
-          }
-        } else {
-            try {
-                super.startActivityForResult(intent, requestCode);
-            } catch (ActivityNotFoundException e) {
-                if (requestCode == REQUEST_CODE_PICK) {
-                    misPickContatct = false;
-                    mShowingContactPicker = false;
-                }
-                Intent mchooserIntent = Intent.createChooser(intent, null);
-                super.startActivityForResult(mchooserIntent, requestCode);
-            }
-        }
-        /// @}
-    }
-
-    private void toastConvertInfo(boolean toMms) {
-        if (mIpCompose.toastIpConvertInfo(toMms)) {
-            return;
-        }
-        final int resId = toMms ? R.string.converting_to_picture_message
-                : R.string.converting_to_text_message;
-        Toast.makeText(this, resId, Toast.LENGTH_SHORT).show();
-    }
-
-    private class DeleteMessageListener implements OnClickListener {
-        private final MessageItem mMessageItem;
-
-        public DeleteMessageListener(MessageItem messageItem) {
-            mMessageItem = messageItem;
-        }
-
-        @Override
-        public void onClick(DialogInterface dialog, int whichButton) {
-            dialog.dismiss();
-
-            new Thread(new Runnable() {
-                @Override
-                public void run() {
-                    if (mMessageItem.isMms()) {
-                        WorkingMessage.removeThumbnailsFromCache(mMessageItem.getSlideshow());
-
-                        MmsApp.getApplication().getPduLoaderManager()
-                            .removePdu(mMessageItem.mMessageUri);
-                        // Delete the message *after* we've removed the thumbnails because we
-                        // need the pdu and slideshow for removeThumbnailsFromCache to work.
-                    }
-                    // add for ipmessage
-                    mIpCompose.onIpDeleteMessageListenerClick(mMessageItem.mIpMessageItem);
-
-                    /// M: google jb.mr1 patch, Conversation should scroll to the bottom
-                    /// when incoming received @{
-                    Boolean deletingLastItem = false;
-                    Cursor cursor = mMsgListAdapter != null ? mMsgListAdapter.getCursor() : null;
-                    if (cursor != null) {
-                        cursor.moveToLast();
-                        long msgId = cursor.getLong(COLUMN_ID);
-                        deletingLastItem = msgId == mMessageItem.mMsgId;
-                    }
-                    Uri deleteUri = mMessageItem.mMessageUri;
-                    MmsLog.dpi(TAG, "deleteUri " + deleteUri
-                            + " deleteUri.host " + deleteUri.getHost());
-
-                    if (mOpComposeExt.onDeleteMessageListenerClick(mBackgroundQueryHandler,
-                            mMessageItem.mMsgId, mMessageItem.mIpMessageId)) {
-                        return;
-                    }
-
-                    mBackgroundQueryHandler.startDelete(DELETE_MESSAGE_TOKEN,
-                            deletingLastItem, mMessageItem.mMessageUri,
-                            mMessageItem.mLocked ? null : "locked=0", null);
-                    /// @}
-                    return;
-                }
-            }).start();
-        }
-    }
-
-    private class DiscardDraftListener implements OnClickListener {
-        @Override
-        public void onClick(DialogInterface dialog, int whichButton) {
-            mWorkingMessage.discard();
-            dialog.dismiss();
-            mOpComposeExt.onDiscardDraftListenerClick();
-            /// M: Code analyze 042, If you discard the draft message manually.@{
-            mHasDiscardWorkingMessage = true;
-            /// @}
-            // add for ipmessage
-            mIpCompose.onIpDiscardDraftListenerClick();
-            finish();
-            mDiscardDraftDialog = null;
-        }
-    }
-
-    private class SendIgnoreInvalidRecipientListener implements OnClickListener {
-        @Override
-        public void onClick(DialogInterface dialog, int whichButton) {
-            /// M: Code analyze 030, Check condition before sending message.@{
-            checkConditionsAndSendMessage(true);
-            /// @}
-            dialog.dismiss();
-        }
-    }
-
-    private class CancelSendingListener implements OnClickListener {
-        @Override
-        public void onClick(DialogInterface dialog, int whichButton) {
-            if (isRecipientsEditorVisible()) {
-                mRecipientsEditor.requestFocus();
-            }
-            dialog.dismiss();
-            /// M: @{
-            updateSendButtonState();
-            /// @}
-        }
-    }
-
-    /// M: fix bug ALPS00484778
-    private ContactList mCutRecipients;
-
-    private class CancelSendingListenerForInvalidRecipient implements OnClickListener {
-        @Override
-        public void onClick(DialogInterface dialog, int whichButton) {
-            if (isRecipientsEditorVisible()) {
-                if (mCutRecipients != null) {
-                        mRecipientsEditor.removeChipChangedListener(mChipWatcher);
-                        mRecipientsEditor.populate(new ContactList());
-                        mRecipientsEditor.addChipChangedListener(mChipWatcher);
-                        mRecipientsEditor.populate(mCutRecipients);
-                        mCutRecipients = null;
-                } else {
-                    mRecipientsEditor.requestFocus();
-                }
-            }
-            dialog.dismiss();
-            /// M: @{
-            updateSendButtonState();
-            /// @}
-        }
-    }
-    /// @}
-
-    private void setSubId(int subId) {
-        if (subId != 0) {
-            mSelectedSubId = subId;
-        }
-    }
-
-    private boolean isOmhSizeLimitDialog() {
-        TelephonyManagerEx telephonyManagerEx;
-        MmsConfigInfo mmsConfigInfo = null;
-        boolean isOmhEnable = false;
-        boolean isOmhCard = false;
-        int omhMessageMaxSize = 0;
-        try {
-            telephonyManagerEx = TelephonyManagerEx.getDefault();
-            mmsConfigInfo = telephonyManagerEx.getMmsConfigInfo(mSelectedSubId);
-            isOmhEnable = telephonyManagerEx.isOmhEnable(mSelectedSubId);
-            isOmhCard = telephonyManagerEx.isOmhCard(mSelectedSubId);
-            MmsLog.d(TAG_OMH, "ComposeMessageActivity.isOmhSizeLimitDialog:isOmhEnable="
-                    + isOmhEnable + " isOmhCard=" + isOmhCard);
-            if (mmsConfigInfo != null) {
-                omhMessageMaxSize = mmsConfigInfo.mMessageMaxSize;
-                MmsLog.d(TAG_OMH, "ComposeMessageActivity.isOmhSizeLimitDialog:"
-                        + " mmsConfigInfo != null"
-                        + " mmsConfigInfo.mMessageMaxSize =" + omhMessageMaxSize);
-            }
-        } catch (Exception e) {
-            // TODO: handle exception
-        }
-        if (isOmhEnable && isOmhCard && mmsConfigInfo != null && omhMessageMaxSize != 0) {
-            int mmsSizeLimit = omhMessageMaxSize;
-            mmsSizeLimit = mmsSizeLimit / 1024;
-            SlideshowModel slideShow = mWorkingMessage.getSlideshow();
-            if (slideShow != null) {
-                int showSize = (slideShow.getCurrentSlideshowSize() - 1) / 1024 + 1;
-                if (mmsSizeLimit < showSize) {
-                    MmsLog.d(TAG_OMH, "ComposeMessageActivity.isOmhSizeLimitDialog:"
-                            + "mmsSizeLimit < showSize start"
-                            + " mSelectedSubId=" + mSelectedSubId);
-                    String info = "(" + showSize + "K/" + mmsSizeLimit + "K)";
-                    String titleView = getString(R.string.omh_exceed_message_size_limitation);
-                    titleView = titleView + info;
-                    String messageView = getString(R.string.omh_failed_to_add_image);
-                    AlertDialog.Builder builder = new AlertDialog.Builder(this);
-                    /// M: replace error icon.
-                    builder.setIcon(R.drawable.size_limited);
-                    builder.setTitle(titleView);
-                    builder.setMessage(messageView);
-                    builder.setPositiveButton(android.R.string.ok, new OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            if (which == DialogInterface.BUTTON_POSITIVE) {
-                                dialog.dismiss();
-                            }
-                        }
-                    });
-                    builder.create().show();
-                    mSendButtonCanResponse = true;
-                    updateSendButtonState(true);
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-
-    private void confirmSendMessageIfNeeded() {
-        if (isOmhSizeLimitDialog()) {
-            return;
-        }
-        if (!isRecipientsEditorVisible()) {
-            /// M: Code analyze 030, Check condition before sending message.@{
-            checkConditionsAndSendMessage(true);
-            /// @}
-            return;
-        }
-
-        boolean isMms = mWorkingMessage.requiresMms();
-        if (mOpComposeExt.confirmSendMessageIfNeeded(isRecipientsEditorVisible(),
-                mRecipientsEditor.hasInvalidRecipient(isMms))) {
-            return;
-        }
-
-        if (mRecipientsEditor.hasInvalidRecipient(isMms)) {
-            /// M: Code analyze 054, Even if there are some invalid recipients , we also try to
-            /// send messag.Now, We do not disgingush there are some or all invalid recipients. @{
-            updateSendButtonState();
-                String title = getResourcesString(R.string.has_invalid_recipient,
-                        mRecipientsEditor.formatInvalidNumbers(isMms));
-                new AlertDialog.Builder(this)
-                    .setCancelable(false)
-                    .setIconAttribute(android.R.attr.alertDialogIcon)
-                    .setTitle(title)
-                    .setMessage(R.string.invalid_recipient_message)
-                    .setPositiveButton(R.string.try_to_send,
-                            new SendIgnoreInvalidRecipientListener())
-                    .setNegativeButton(R.string.no, new CancelSendingListenerForInvalidRecipient())
-                    .setOnKeyListener(new DialogInterface.OnKeyListener() {
-                        @Override
-                        public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
-                            if (keyCode == KeyEvent.KEYCODE_BACK) {
-                                dialog.dismiss();
-                            }
-                            return false;
-                        }
-                    })
-                    .show();
-        } else {
-             /// M: Code analyze 030, Check condition before
-            /// sending message.(All recipients are valid.)@{
-            checkConditionsAndSendMessage(true);
-             /// @}
-        }
-    }
-
-    /// M: Recipient Control refactory, don't use TextWatcher: replace with ChipWatcher,
-    /// to reduce the frequency of notify. and to sync recipients. @{
-    private final MTKRecipientEditTextView.ChipWatcher mChipWatcher =
-        new MTKRecipientEditTextView.ChipWatcher() {
-        public void onChipChanged(ArrayList<RecipientEntry> allChips,
-                ArrayList<String> changedChipAddresses, String lastString) {
-            /// M: ALPS01843842, when chip changed ,close the contact view context menu.
-            if (mChipViewMenu != null) {
-                mChipViewMenu.close();
-                mChipViewMenu = null;
-            }
-            if (!isRecipientsEditorVisible()) {
-                Log.w(TAG, "ChipWatcher: onChipChanged called with invisible mRecipientsEditor");
-                return;
-            }
-
-            Log.i(TAG, "ChipWatcher onChipChanged begin.");
-            ContactList LastContacts = mRecipientsEditor.getContactsFromChipWatcher();
-            int updateLimit = getLimitedContact();
-            /// @}
-            mRecipientsEditor.parseRecipientsFromChipWatcher(allChips,
-                    changedChipAddresses, lastString, updateLimit);
-            List<String> numbers = mRecipientsEditor.getNumbersFromChipWatcher();
-            // google steps in textchange
-            mWorkingMessage.setWorkingRecipients(numbers);
-            /// M: google JB.MR1 patch, group mms
-            boolean multiRecipients = numbers != null && numbers.size() > 1;
-            boolean isGroupMms =
-                MmsPreferenceActivity.getIsGroupMmsEnabled(ComposeMessageActivity.this)
-                                                        && multiRecipients;
-            mMsgListAdapter.setIsGroupConversation(isGroupMms);
-            mWorkingMessage.setHasMultipleRecipients(multiRecipients, true);
-            mWorkingMessage.setHasEmail(mRecipientsEditor.containsEmailFromChipWatcher(), true);
-            int recipientCount = (numbers != null ? numbers.size() : 0);
-            checkForTooManyRecipients(recipientCount);
-            // google steps end
-            ContactList contacts = mRecipientsEditor.getContactsFromChipWatcher();
-            if (!contacts.equals(LastContacts)
-                    || (changedChipAddresses != null && changedChipAddresses.size() > 0)) {
-                updateTitle(contacts);
-            }
-            updateSendButtonState();
-            mIpCompose.onIpRecipientsChipChanged(contacts.size());
-        }
-    };
-    /// @}
-
-    private void checkForTooManyRecipients(int recipientCount) {
-        /// M: Code analyze 056,Now,the sms recipient limit is different from mms.
-        /// We can set limit for sms or mms individually. @{
-        final int recipientLimit = MmsConfig.getSmsRecipientLimit();
-        /// @}
-        if (recipientLimit != Integer.MAX_VALUE && recipientLimit > 0) {
-
-            //final int recipientCount = recipientCount();
-            boolean tooMany = recipientCount > recipientLimit;
-
-            if (recipientCount != mLastRecipientCount) {
-                // Don't warn the user on every character they type when they're over the limit,
-                // only when the actual # of recipients changes.
-                mLastRecipientCount = recipientCount;
-                if (tooMany) {
-                    String tooManyMsg = getString(R.string.too_many_recipients, recipientCount,
-                            recipientLimit);
-                    Toast.makeText(ComposeMessageActivity.this,
-                            tooManyMsg, Toast.LENGTH_LONG).show();
-                }
-            }
-        }
-    }
-
-    private final OnCreateContextMenuListener mRecipientsMenuCreateListener =
-        new OnCreateContextMenuListener() {
-        @Override
-        public void onCreateContextMenu(ContextMenu menu, View v,
-                ContextMenuInfo menuInfo) {
-            mChipViewMenu = menu;
-            mOpComposeExt.chipOnCreateContextMenu(mChipViewMenu);
-            if (menuInfo != null) {
-                Contact c = ((RecipientContextMenuInfo) menuInfo).recipient;
-                RecipientsMenuClickListener l = new RecipientsMenuClickListener(c);
-
-                menu.setHeaderTitle(c.getName());
-
-                if (c.existsInDatabase()) {
-                    menu.add(0, MENU_VIEW_CONTACT, 0, R.string.menu_view_contact)
-                            .setOnMenuItemClickListener(l);
-                /// M: Code analyze 043, Whether the address can be added to contacts app. @{
-                } else if (MessageUtils.canAddToContacts(c)) {
-                /// @}
-                    menu.add(0, MENU_ADD_TO_CONTACTS, 0, R.string.menu_add_to_contacts)
-                            .setOnMenuItemClickListener(l);
-                }
-            }
-        }
-    };
-
-    private final class RecipientsMenuClickListener implements MenuItem.OnMenuItemClickListener {
-        private final Contact mRecipient;
-
-        RecipientsMenuClickListener(Contact recipient) {
-            mRecipient = recipient;
-        }
-
-        @Override
-        public boolean onMenuItemClick(MenuItem item) {
-            switch (item.getItemId()) {
-                // Context menu handlers for the recipients editor.
-                case MENU_VIEW_CONTACT: {
-                    Uri contactUri = mRecipient.getUri();
-                    /// M: fix bug ALPS00448677, update or delete Contact Chip
-                    mInViewContact = mRecipient;
-                    /// @}
-                    Intent intent = new Intent(Intent.ACTION_VIEW, contactUri);
-                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
-                    startActivityForResult(intent, REQUEST_CODE_VIEW_CONTACT);
-                    return true;
-                }
-                case MENU_ADD_TO_CONTACTS: {
-                    /// M: fix bug ALPS00448677, update or delete Contact Chip
-                    mInViewContact = null;
-                    /// @}
-                    mAddContactIntent = ConversationList.createAddContactIntent(
-                            mRecipient.getNumber());
-                    ComposeMessageActivity.this.startActivityForResult(mAddContactIntent,
-                            REQUEST_CODE_ADD_CONTACT);
-                    return true;
-                }
-            }
-            return false;
-        }
-    }
-
-    private boolean canAddToContacts(Contact contact) {
-        // There are some kind of automated messages, like STK messages, that we don't want
-        // to add to contacts. These names begin with special characters, like, "*Info".
-        final String name = contact.getName();
-        if (!TextUtils.isEmpty(contact.getNumber())) {
-            char c = contact.getNumber().charAt(0);
-            if (isSpecialChar(c)) {
-                return false;
-            }
-        }
-        if (!TextUtils.isEmpty(name)) {
-            char c = name.charAt(0);
-            if (isSpecialChar(c)) {
-                return false;
-            }
-        }
-        if (!(Mms.isEmailAddress(name) ||
-                Telephony.Mms.isPhoneNumber(name) ||
-                contact.isMe())) {
-            return false;
-        }
-        return true;
-    }
-
-    private boolean isSpecialChar(char c) {
-        return c == '*' || c == '%' || c == '$';
-    }
-
-    private void addPositionBasedMenuItems(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
-        AdapterView.AdapterContextMenuInfo info;
-
-        try {
-            info = (AdapterView.AdapterContextMenuInfo) menuInfo;
-        } catch (ClassCastException e) {
-            Log.e(TAG, "bad menuInfo");
-            return;
-        }
-        final int position = info.position;
-
-        addUriSpecificMenuItems(menu, v, position);
-    }
-
-    private Uri getSelectedUriFromMessageList(ListView listView, int position) {
-        // If the context menu was opened over a uri, get that uri.
-        MessageListItem msglistItem = (MessageListItem) listView.getChildAt(position);
-        if (msglistItem == null) {
-            // FIXME: Should get the correct view. No such interface in ListView currently
-            // to get the view by position. The ListView.getChildAt(position) cannot
-            // get correct view since the list doesn't create one child for each item.
-            // And if setSelection(position) then getSelectedView(),
-            // cannot get corrent view when in touch mode.
-            return null;
-        }
-
-        TextView textView;
-        CharSequence text = null;
-        int selStart = -1;
-        int selEnd = -1;
-
-        //check if message sender is selected
-        textView = (TextView) msglistItem.findView(MessageListItem.text_view);
-        if (textView != null) {
-            text = textView.getText();
-            selStart = textView.getSelectionStart();
-            selEnd = textView.getSelectionEnd();
-        }
-
-        /// M: Code analyze 044,If sender is not being selected, it may be in the message body.@{
-        if (selStart == -1) {
-            textView = (TextView) msglistItem.findView(MessageListItem.text_view);
-            if (textView != null) {
-                text = textView.getText();
-                selStart = textView.getSelectionStart();
-                selEnd = textView.getSelectionEnd();
-            }
-        }
-        /// @}
-
-        // Check that some text is actually selected, rather than the cursor
-        // just being placed within the TextView.
-        if (selStart != selEnd) {
-            int min = Math.min(selStart, selEnd);
-            int max = Math.max(selStart, selEnd);
-
-            URLSpan[] urls = ((Spanned) text).getSpans(min, max,
-                                                        URLSpan.class);
-
-            if (urls.length == 1) {
-                return Uri.parse(urls[0].getURL());
-            }
-        }
-
-        //no uri was selected
-        return null;
-    }
-
-    private void addUriSpecificMenuItems(ContextMenu menu, View v, int position) {
-        Uri uri = getSelectedUriFromMessageList((ListView) v, position);
-
-        if (uri != null) {
-            Intent intent = new Intent(null, uri);
-            intent.addCategory(Intent.CATEGORY_SELECTED_ALTERNATIVE);
-            menu.addIntentOptions(0, 0, 0,
-                    new android.content.ComponentName(this, ComposeMessageActivity.class),
-                    null, intent, 0, null);
-        }
-    }
-
-    private final void addCallAndContactMenuItems(
-            ContextMenu menu, MsgListMenuClickListener l, MessageItem msgItem) {
-        if (TextUtils.isEmpty(msgItem.mBody)) {
-            return;
-        }
-        SpannableString msg = new SpannableString(msgItem.mBody);
-        Linkify.addLinks(msg, Linkify.ALL);
-        ArrayList<String> uris =
-            MessageUtils.extractUris(msg.getSpans(0, msg.length(), URLSpan.class));
-        /// M: Code analyze 022, Add bookmark. Clear the List.@{
-        mURLs.clear();
-        /// @}
-        // Remove any dupes so they don't get added to the menu multiple times
-        HashSet<String> collapsedUris = new HashSet<String>();
-        for (String uri : uris) {
-            collapsedUris.add(uri.toLowerCase());
-        }
-        for (String uriString : collapsedUris) {
-            String prefix = null;
-            int sep = uriString.indexOf(":");
-            if (sep >= 0) {
-                prefix = uriString.substring(0, sep);
-                /// M: Code analyze 022, Add bookmark. @{
-                if ("mailto".equalsIgnoreCase(prefix) || "tel".equalsIgnoreCase(prefix)) {
-                    uriString = uriString.substring(sep + 1);
-                }
-                /// @}
-            }
-            Uri contactUri = null;
-            boolean knownPrefix = true;
-            if ("mailto".equalsIgnoreCase(prefix))  {
-                contactUri = getContactUriForEmail(uriString);
-            } else if ("tel".equalsIgnoreCase(prefix)) {
-                contactUri = getContactUriForPhoneNumber(uriString);
-            } else {
-                knownPrefix = false;
-
-                /// M: Code analyze 022, Add bookmark. Maybe exist multi URL address @{
-                if (msgItem.isSms() && mURLs.size() <= 0) {
-                    //menu.add(0, MENU_ADD_TO_BOOKMARK, 0, R.string.menu_add_to_bookmark)
-                    //.setOnMenuItemClickListener(l);
-                }
-                /// @}
-
-                /// M: Code analyze 022, Add bookmark. fix bug ALPS00783237 @{
-                for (String uri : uris) {
-                    if (uri != null && uri.equalsIgnoreCase(uriString)) {
-                        mURLs.add(uri);
-                        break;
-                    }
-                }
-                /// @}
-            }
-            if (knownPrefix && contactUri == null) {
-                Intent intent = ConversationList.createAddContactIntent(uriString);
-
-                String addContactString = getString(R.string.menu_add_address_to_contacts,
-                        uriString);
-                menu.add(0, MENU_ADD_ADDRESS_TO_CONTACTS, 0, addContactString)
-                    .setOnMenuItemClickListener(l)
-                    .setIntent(intent);
-            }
-        }
-        /// M: New plugin API @{
-        mOpComposeExt.addCallAndContactMenuItems(
-                this, menu, MENU_ADD_TO_BOOKMARK, mURLs, msgItem);
-        /// @}
-    }
-
-    private Uri getContactUriForEmail(String emailAddress) {
-        Cursor cursor = SqliteWrapper.query(this, getContentResolver(),
-                Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, Uri.encode(emailAddress)),
-                new String[] { Email.CONTACT_ID, Contacts.DISPLAY_NAME }, null, null, null);
-
-        if (cursor != null) {
-            try {
-                while (cursor.moveToNext()) {
-                    String name = cursor.getString(1);
-                    if (!TextUtils.isEmpty(name)) {
-                        return ContentUris.withAppendedId(Contacts.CONTENT_URI, cursor.getLong(0));
-                    }
-                }
-            } finally {
-                cursor.close();
-            }
-        }
-        return null;
-    }
-
-    private Uri getContactUriForPhoneNumber(String phoneNumber) {
-        Contact contact = Contact.get(phoneNumber, true);
-        if (contact.existsInDatabase()) {
-            return contact.getUri();
-        }
-        return null;
-    }
-
-    private final OnCreateContextMenuListener mMsgListMenuCreateListener =
-        new OnCreateContextMenuListener() {
-        @Override
-        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
-            if (!isCursorValid()) {
-                return;
-            }
-            Cursor cursor = mMsgListAdapter.getCursor();
-            String type = cursor.getString(COLUMN_MSG_TYPE);
-            long msgId = cursor.getLong(COLUMN_ID);
-            ///M: ALPS00726802, save the position in cursor of the clicked item
-            mClickedItemPosition = cursor.getPosition();
-
-            MmsLog.i(TAG, "onCreateContextMenu(): msgId=" + msgId);
-            addPositionBasedMenuItems(menu, v, menuInfo);
-
-            MessageItem msgItem = mMsgListAdapter.getCachedMessageItem(type, msgId, cursor);
-            if (msgItem == null) {
-                Log.w(TAG, "Cannot load message item for type = " + type
-                        + ", msgId = " + msgId);
-                return;
-            }
-
-            menu.setHeaderTitle(R.string.message_options);
-
-            MsgListMenuClickListener l = new MsgListMenuClickListener(msgItem);
-
-            // add for ipmessage
-            boolean isForwardEnabled =
-                msgItem.isSms() || (msgItem.isDownloaded() && isForwardable(msgId));
-
-            if (msgItem.isSms()) {
-                menu.add(0, MENU_COPY, 0, R.string.ipmsg_copy)
-                .setOnMenuItemClickListener(l);
-            }
-
-            // Forward is not available for undownloaded messages.
-            if (mIsSmsEnabled) {
-                if (isForwardEnabled) {
-                    menu.add(0, MENU_FORWARD_MESSAGE, 0,
-                            R.string.menu_forward).setOnMenuItemClickListener(l);
-                }
-            }
-            if (mIsSmsEnabled) {
-                menu.add(0, MENU_DELETE_MESSAGE, 0, R.string.delete_message)
-                        .setOnMenuItemClickListener(l);
-            }
-
-            if (mIsSmsEnabled) {
-                if (msgItem.mLocked) {
-                    menu.add(0, MENU_UNLOCK_MESSAGE, 0, R.string.menu_unlock)
-                            .setOnMenuItemClickListener(l);
-                } else if (mIsSmsEnabled) {
-                    menu.add(0, MENU_LOCK_MESSAGE, 0, R.string.menu_lock)
-                            .setOnMenuItemClickListener(l);
-                }
-            }
-
-            if (msgItem.isMms()) {
-                switch (msgItem.mAttachmentType) {
-                    case WorkingMessage.SLIDESHOW:
-                        menu.add(0, MENU_VIEW_SLIDESHOW, 0, R.string.view_slideshow)
-                                .setOnMenuItemClickListener(l);
-                        if (haveSomethingToCopyToSDCard(msgItem.mMsgId)) {
-                            menu.add(0, MENU_COPY_TO_SDCARD, 0, R.string.copy_to_sdcard)
-                                    .setOnMenuItemClickListener(l);
-                        }
-                        break;
-                    default:
-                        if (haveSomethingToCopyToSDCard(msgItem.mMsgId)) {
-                            menu.add(0, MENU_COPY_TO_SDCARD, 0, R.string.copy_to_sdcard)
-                                    .setOnMenuItemClickListener(l);
-                        }
-                        break;
-                }
-            }
-
-            addCallAndContactMenuItems(menu, l, msgItem);
-
-            menu.add(0, MENU_VIEW_MESSAGE_DETAILS, 0, R.string.view_message_details)
-                .setOnMenuItemClickListener(l);
-
-            if (msgItem.mDeliveryStatus != MessageItem.DeliveryStatus.NONE
-                    || msgItem.mReadReport) {
-                menu.add(0, MENU_DELIVERY_REPORT, 0, R.string.view_delivery_report)
-                        .setOnMenuItemClickListener(l);
-            }
-
-            /// M: Code analyze 016, Add for select text copy. @{
-            if (!TextUtils.isEmpty(msgItem.mBody)
-                    && msgItem.mMessageType != PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND) {
-                menu.add(0, MENU_SELECT_TEXT, 0, R.string.select_text)
-                        .setOnMenuItemClickListener(l);
-            }
-            /// @}
-
-            if (!mOpComposeExt.onCreateContextMenu(mIsSmsEnabled, msgItem.isSms(),
-                    mSubCount, msgItem.isSending(), l, menu, v, menuInfo, msgItem.mIpMessageId,
-                    mConversation.getMessageCount())) {
-                if (mIsSmsEnabled) {
-                    if (msgItem.isSms()) {
-                        if (mSubCount > 0 && !msgItem.isSending()) {
-                            menu.add(0, MENU_SAVE_MESSAGE_TO_SUB, 0, R.string.save_message_to_sim)
-                                    .setOnMenuItemClickListener(l);
-                        }
-                    }
-                }
-            }
-
-            mIpCompose.onIpCreateContextMenu(menu, mIsSmsEnabled, isForwardEnabled,
-                    msgItem.mIpMessageItem);
-        }
-    };
-
-    private void editMessageItem(MessageItem msgItem) {
-        if ("sms".equals(msgItem.mType)) {
-            if (mWorkingMessage.hasSlideshow()) {
-                /// M: it's a real slideshow, ignore edit request, show a toast.
-                String message = getString(R.string.failed_to_add_media,
-                        getString(R.string.viewer_title_sms));
-                Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
-                return;
-            } else {
-                editSmsMessageItem(msgItem);
-            }
-        } else {
-            editMmsMessageItem(msgItem);
-            mWorkingMessage.setHasMmsDraft(true);
-        }
-        MessagingNotification.nonBlockingUpdateSendFailedNotification(ComposeMessageActivity.this);
-        /// M: @{
-        if ((msgItem.isFailedMessage() || msgItem.isSending()
-                || (msgItem.mDeliveryStatus == MessageItem.DeliveryStatus.FAILED))
-                && mMsgListAdapter.getCount() <= 1) {
-            // For messages with bad addresses, let the user re-edit the recipients.
-            initRecipientsEditor(null);
-            /// M: Code analyze 046, Whether the recipientedit control has been initialized. @{
-            isInitRecipientsEditor = true;
-            /// @}
-            mMsgListAdapter.changeCursor(null);
-            invalidateOptionsMenu();
-        }
-    }
-
-    private void editSmsMessageItem(MessageItem msgItem) {
-        // When the message being edited is the only message in the conversation, the delete
-        // below does something subtle. The trigger "delete_obsolete_threads_pdu" sees that a
-        // thread contain no messages and silently deletes the thread. Meanwhile, the mConversation
-        // object still holds onto the old thread_id and code thinks there's a backing thread in
-        // the DB when it really has been deleted. Here we try and notice that situation and
-        // clear out the thread_id. Later on, when Conversation.ensureThreadId() is called, we'll
-        // create a new thread if necessary.
-        synchronized (mConversation) {
-            /// M: @{
-            //if (mConversation.getMessageCount() <= 1) {
-            if (mMsgListAdapter.getCursor().getCount() <= 1) {
-            /// @}
-                mConversation.clearThreadId();
-                MessagingNotification.setCurrentlyDisplayedThreadId(
-                    MessagingNotification.THREAD_NONE);
-            }
-        }
-        // Delete the old undelivered SMS and load its content.
-        Uri uri = ContentUris.withAppendedId(Sms.CONTENT_URI, msgItem.mMsgId);
-        SqliteWrapper.delete(ComposeMessageActivity.this,
-                mContentResolver, uri, null, null);
-
-        mWorkingMessage.setConversation(mConversation);
-        mWorkingMessage.setText(msgItem.mBody);
-    }
-
-    private void editMmsMessageItem(MessageItem msgItem) {
-        /// M: fix bug ALPS00834025. ignore a click if too close.
-        long oldTime = mEditClickTime;
-        mEditClickTime = SystemClock.elapsedRealtime();
-        if ((mEditClickTime - oldTime < 1500) && (mEditClickTime - oldTime > 0)) {
-            MmsLog.w(TAG, "editMmsMessageItem, ignore a click if too close");
-            return;
-        }
-
-        /// M: make a failed message editable, the count should reduce too.
-        if (mConversation.getMessageCount() == 1) {
-            mConversation.setMessageCount(0);
-        }
-        /// M: Discard the current message in progress.
-        mWorkingMessage.discard();
-
-        // Load the selected message in as the working message.
-        WorkingMessage newWorkingMessage = WorkingMessage.load(this, msgItem.mMessageUri);
-        if (newWorkingMessage == null) {
-            MmsLog.w(TAG, "editMmsMessageItem, load returns null message");
-            return;
-        }
-        mWorkingMessage = newWorkingMessage;
-        mWorkingMessage.setConversation(mConversation);
-        invalidateOptionsMenu();
-        /// M: @{
-        mAttachmentEditor.update(mWorkingMessage);
-        updateTextEditorHeightInFullScreen();
-        /// @}
-        drawTopPanel(false);
-
-        // WorkingMessage.load() above only loads the slideshow. Set the
-        // subject here because we already know what it is and avoid doing
-        // another DB lookup in load() just to get it.
-        mWorkingMessage.setSubject(msgItem.mSubject, false);
-
-        if (mWorkingMessage.hasSubject()) {
-            showSubjectEditor(true);
-        }
-
-        mOpComposeExt.editMmsMessageItem(mWorkingMessage.mOpWorkingMessageExt);
-
-        /// M: fix bug ALPS00433858, update read==1(readed) when reload failed-mms
-        final MessageItem item = msgItem;
-        new Thread(new Runnable() {
-            public void run() {
-                // TODO Auto-generated method stub
-                Uri uri = ContentUris.withAppendedId(Mms.CONTENT_URI, item.mMsgId);
-                ContentValues values = new ContentValues(1);
-                values.put(Mms.READ, 1);
-                SqliteWrapper.update(ComposeMessageActivity.this,
-                        mContentResolver, uri, values, null, null);
-            }
-        }).start();
-    }
-
-    private void copyToClipboard(String str) {
-        ClipboardManager clipboard =
-            (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
-        clipboard.setPrimaryClip(ClipData.newPlainText(null, str));
-    }
-
-    private void forwardMessage(final MessageItem msgItem) {
-        /// M: Code analyze 051, Hide input keyboard
-        /// (add for input method covered Compose UI issue).@{
-        hideInputMethod();
-        /// @}
-
-        mTempThreadId = 0;
-        // The user wants to forward the message. If the message is an mms message, we need to
-        // persist the pdu to disk. This is done in a background task.
-        // If the task takes longer than a half second, a progress dialog is displayed.
-        // Once the PDU persisting is done, another runnable on the UI thread get executed to start
-        // the ForwardMessageActivity.
-        getAsyncDialog().runAsync(new Runnable() {
-            @Override
-            public void run() {
-                // This runnable gets run in a background thread.
-                if (msgItem.mType.equals("mms")) {
-                    SendReq sendReq = new SendReq();
-                    String subject = getString(R.string.forward_prefix);
-                    if (msgItem.mSubject != null) {
-                        subject += msgItem.mSubject;
-                    }
-                    sendReq.setSubject(new EncodedStringValue(subject));
-                    sendReq.setBody(msgItem.mSlideshow.makeCopy());
-
-                    mTempMmsUri = null;
-                    try {
-                        PduPersister persister =
-                                PduPersister.getPduPersister(ComposeMessageActivity.this);
-                        // Copy the parts of the message here.
-                        /// M: google jb.mr1 patch, group mms
-                        mTempMmsUri = persister.persist(sendReq, Mms.Draft.CONTENT_URI, true,
-                                MmsPreferenceActivity
-                                    .getIsGroupMmsEnabled(ComposeMessageActivity.this), null);
-                        mTempThreadId = MessagingNotification.getThreadId(
-                                ComposeMessageActivity.this, mTempMmsUri);
-                    } catch (MmsException e) {
-                        Log.e(TAG, "Failed to copy message: " + msgItem.mMessageUri);
-                        runOnUiThread(new Runnable() {
-                            public void run() {
-                                Toast.makeText(ComposeMessageActivity.this,
-                                        R.string.cannot_save_message, Toast.LENGTH_SHORT).show();
-                            }
-                        });
-                        return;
-                    }
-                }
-            }
-        }, new Runnable() {
-            @Override
-            public void run() {
-                // Once the above background thread is complete, this runnable is run
-                // on the UI thread.
-                Intent intent = createIntent(ComposeMessageActivity.this, 0);
-                intent.putExtra(KEY_FORWARDED_MESSAGE, true);
-                if (mTempThreadId > 0) {
-                    intent.putExtra("thread_id", mTempThreadId);
-                }
-
-                if (msgItem.mType.equals("sms")) {
-                    intent.putExtra("sms_body", msgItem.mBody);
-                } else {
-                    intent.putExtra("msg_uri", mTempMmsUri);
-                    String subject = getString(R.string.forward_prefix);
-                    if (msgItem.mSubject != null) {
-                        subject += msgItem.mSubject;
-                    }
-                    intent.putExtra("subject", subject);
-                }
-
-                Contact contact = Contact.get(msgItem.mAddress, false);
-                String nameAndNumber = Contact.formatNameAndNumber(
-                        contact.getName(), contact.getNumber(), "");
-                if (!mOpComposeExt.forwardMessage(
-                        ComposeMessageActivity.this, msgItem, nameAndNumber, intent)) {
-                    intent.putExtra(KEY_EXIT_ON_SENT, true);
-                }
-
-                // ForwardMessageActivity is simply an alias in the manifest for
-                // ComposeMessageActivity. We have to make an alias because ComposeMessageActivity
-                // launch flags specify singleTop. When we forward a message, we want to start a
-                // separate ComposeMessageActivity. The only way to do that is to override the
-                // singleTop flag, which is impossible to do in code. By creating an alias to the
-                // activity, without the singleTop flag, we can launch a separate
-                // ComposeMessageActivity to edit the forward message.
-                intent.setClassName(ComposeMessageActivity.this,
-                        "com.android.mms.ui.ForwardMessageActivity");
-                startActivity(intent);
-            }
-        }, R.string.sync_mms_to_db);
-    }
-
-    /**
-     * Context menu handlers for the message list view.
-     */
-    private final class MsgListMenuClickListener implements MenuItem.OnMenuItemClickListener {
-        private MessageItem mMsgItem;
-
-        public MsgListMenuClickListener(MessageItem msgItem) {
-            mMsgItem = msgItem;
-        }
-
-        @Override
-        public boolean onMenuItemClick(MenuItem item) {
-            if (mMsgItem == null) {
-                return false;
-            }
-            if (mIpCompose.onIpMenuItemClick(item, mMsgItem.mIpMessageItem)) {
-                return true;
-            }
-
-            Intent deliveryIntent = new Intent(
-                    ComposeMessageActivity.this, DeliveryReportActivity.class);
-            Intent intentMultiSave = new Intent(
-                    ComposeMessageActivity.this, MultiSaveActivity.class);
-            if (mOpComposeExt.onMenuItemClick(
-                    item, mMsgItem.mOpMessageItemExt, intentMultiSave, deliveryIntent)) {
-                return true;
-            }
-
-            switch (item.getItemId()) {
-                case MENU_EDIT_MESSAGE:
-                    editMessageItem(mMsgItem);
-                    drawBottomPanel();
-                    return true;
-                case MENU_COPY:
-                case MENU_COPY_MESSAGE_TEXT:
-                    /// M: keep original string when copy, if delete '\r', search will failed. @{
-                    if (mMsgItem.mBody != null) {
-                        copyToClipboard(mMsgItem.mBody);
-                    } else {
-                        MmsLog.w(TAG, "onMenuItemClick, mMsgItem.mBody == null");
-                        return false;
-                    }
-                    /// @}
-                    return true;
-
-                case MENU_FORWARD_MESSAGE:
-                    /// M: @{
-                    final MessageItem mRestrictedItem = mMsgItem;
-                    if (WorkingMessage.sCreationMode == 0 ||
-                      !MessageUtils.isRestrictedType(ComposeMessageActivity.this,
-                              mMsgItem.mMsgId)) {
-                        runOnUiThread(new Runnable() {
-                            public void run() {
-                                forwardMessage(mRestrictedItem);
-                            }
-                        });
-                    } else if (WorkingMessage.sCreationMode == WorkingMessage.WARNING_TYPE) {
-                        new AlertDialog.Builder(ComposeMessageActivity.this)
-                        .setTitle(R.string.restricted_forward_title)
-                        .setIconAttribute(android.R.attr.alertDialogIcon)
-                        .setMessage(R.string.restricted_forward_message)
-                        .setPositiveButton(android.R.string.ok,
-                                new DialogInterface.OnClickListener() {
-                                public void onClick(DialogInterface dialog, int which) {
-                                    int createMode = WorkingMessage.sCreationMode;
-                                    WorkingMessage.sCreationMode = 0;
-                                    runOnUiThread(new Runnable() {
-                                        public void run() {
-                                            forwardMessage(mRestrictedItem);
-                                        }
-                                    });
-                                    WorkingMessage.sCreationMode = createMode;
-                                }
-                            })
-                        .setNegativeButton(android.R.string.cancel, null)
-                        .show();
-                    }
-                    /// @}
-                    return true;
-
-                case MENU_VIEW_SLIDESHOW:
-                    /// M: Code analyze 024, If the click operator can be responsed. @{
-                    if (mClickCanResponse) {
-                        mClickCanResponse = false;
-                        MessageUtils.viewMmsMessageAttachment(ComposeMessageActivity.this,
-                                ContentUris.withAppendedId(Mms.CONTENT_URI, mMsgItem.mMsgId), null,
-                                getAsyncDialog());
-                    return true;
-                    }
-                    /// @}
-                case MENU_VIEW_MESSAGE_DETAILS:
-                    return showMessageDetails(mMsgItem);
-
-                case MENU_DELETE_MESSAGE: {
-                    DeleteMessageListener l = new DeleteMessageListener(mMsgItem);
-
-                    /// M: Code analyze 027,Add for deleting one message.@{
-                    // (Why only query sms table?)
-                    String where = Telephony.Mms._ID + "=" + mMsgItem.mMsgId;
-                    String[] projection = new String[] { Sms.Inbox.THREAD_ID };
-                    MmsLog.d(TAG, "where:" + where);
-                    Cursor queryCursor = Sms.query(getContentResolver(), // query uri:content://sms
-                            projection, where, null);
-
-                    if (queryCursor != null) {
-                        if (queryCursor.moveToFirst()) {
-                            mThreadId = queryCursor.getLong(0);
-                        }
-                        queryCursor.close();
-                    }
-                    /// @}
-                    confirmDeleteDialog(l, mMsgItem.mLocked);
-                    return true;
-                }
-                case MENU_DELIVERY_REPORT:
-                    showDeliveryReport(mMsgItem.mMsgId, mMsgItem.mType);
-                    return true;
-
-                case MENU_COPY_TO_SDCARD: {
-                    /// M: Code analyze 021, Copy valid parts of the attachment(pdu) to SD card.
-                    /// This opeartor will be removed to a separate activity.  @{
-                    /// M: new feature, change default disk when storage is full
-                    long availSize = MessageUtils.getAvailableBytesInFileSystemAtGivenRoot
-                                                    (StorageManagerEx.getDefaultPath());
-                    boolean haveExSD = MessageUtils.existingSD(ComposeMessageActivity.this, true);
-                    boolean haveInSD = MessageUtils.existingSD(ComposeMessageActivity.this, false);
-
-                    /// M: fix bug ALPS00574679, modify toast string when haven't SD Card @{
-                    if (!haveExSD && !haveInSD) {
-                        Toast.makeText(ComposeMessageActivity.this,
-                                getString(R.string.no_sdcard_suggestion),
-                                Toast.LENGTH_LONG).show();
-                        return false;
-                    }
-                    /// @}
-
-                    if (mMsgItem.mMessageSize > availSize) {
-                        if ((haveInSD && !haveExSD) || (!haveInSD && haveExSD)) {
-                            Toast.makeText(ComposeMessageActivity.this,
-                                    getString(R.string.export_disk_problem),
-                                    Toast.LENGTH_LONG).show();
-                            return false;
-                        } else {
-                            new AlertDialog.Builder(ComposeMessageActivity.this)
-                            .setTitle(R.string.copy_to_sdcard_fail)
-                            .setIconAttribute(android.R.attr.alertDialogIcon)
-                            .setMessage(R.string.change_default_disk)
-                            .setPositiveButton(R.string.change,
-                                    new DialogInterface.OnClickListener() {
-                                public void onClick(DialogInterface dialog, int which) {
-                                    Intent intent = new Intent(
-                                            "android.settings.MEMORY_CARD_SETTINGS");
-                                    startActivity(intent);
-                                }
-                            })
-                            .setNegativeButton(android.R.string.cancel, null)
-                            .show();
-                        }
-                    } else {
-
-                        intentMultiSave.putExtra("msgid", mMsgItem.mMsgId);
-                        startActivityForResult(intentMultiSave, REQUEST_CODE_MULTI_SAVE);
-                     }
-                    return true;
-                }
-
-                case MENU_SAVE_RINGTONE: {
-                    int resId = getDrmMimeSavedStringRsrc(mMsgItem.mMsgId,
-                            saveRingtone(mMsgItem.mMsgId));
-                    Toast.makeText(ComposeMessageActivity.this, resId, Toast.LENGTH_SHORT).show();
-                    return true;
-                }
-                case MENU_LOCK_MESSAGE: {
-                    lockMessage(mMsgItem, true);
-                    return true;
-                }
-                case MENU_UNLOCK_MESSAGE: {
-                    lockMessage(mMsgItem, false);
-                    return true;
-                }
-
-                /// M: Code analyze 022, Add bookmark. Maybe exist multi URL addresses. @{
-                case MENU_ADD_TO_BOOKMARK: {
-                    if (mURLs.size() == 1) {
-                        Browser.saveBookmark(ComposeMessageActivity.this, null, mURLs.get(0));
-                    } else if (mURLs.size() > 1) {
-                        CharSequence[] items = new CharSequence[mURLs.size()];
-                        for (int i = 0; i < mURLs.size(); i++) {
-                            items[i] = mURLs.get(i);
-                        }
-                        new AlertDialog.Builder(ComposeMessageActivity.this)
-                            .setTitle(R.string.menu_add_to_bookmark)
-                            .setIcon(MessageResource.drawable.ic_dialog_menu_generic)
-                            .setItems(items, new DialogInterface.OnClickListener() {
-                                public void onClick(DialogInterface dialog, int which) {
-                                    Browser.saveBookmark(ComposeMessageActivity.this,
-                                            null, mURLs.get(which));
-                                    }
-                                })
-                            .show();
-                    }
-                    return true;
-                }
-
-                /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-                case MENU_SAVE_MESSAGE_TO_SUB: {
-                    mSaveMsgThread = new SaveMsgThread(mMsgItem.mType, mMsgItem.mMsgId);
-                    mSaveMsgThread.start();
-                    return true;
-                }
-                /// @}
-
-                /// M: Code analyze 016, Add for select text copy. @{
-                case MENU_SELECT_TEXT: {
-                    AdapterView.AdapterContextMenuInfo info =
-                        (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
-                    Log.i(TAG, "onMenuItemClick(): info.position = " + info.position);
-                    mMsgListAdapter.getItemId(info.position);
-                    MessageListItem msglistItem = (MessageListItem) info.targetView;
-                    if (msglistItem != null) {
-                        Log.i(TAG, "msglistItem != null");
-                        TextView textView =
-                            (TextView) msglistItem.findView(MessageListItem.text_view);
-                        AlertDialog.Builder builder =
-                            new AlertDialog.Builder(ComposeMessageActivity.this);
-                        LayoutInflater factory = LayoutInflater.from(builder.getContext());
-                        final View textEntryView =
-                            factory.inflate(R.layout.alert_dialog_text_entry, null);
-                        EditText contentSelector =
-                            (EditText) textEntryView.findViewById(R.id.content_selector);
-                        contentSelector.setText(textView.getText());
-                        builder.setTitle(R.string.select_text)
-                               .setView(textEntryView)
-                               .setPositiveButton(R.string.yes, null)
-                               .show();
-                    }
-                    return true;
-                }
-                case MENU_ADD_ADDRESS_TO_CONTACTS: {
-                    mAddContactIntent = item.getIntent();
-                    startActivityForResult(mAddContactIntent, REQUEST_CODE_ADD_CONTACT);
-                    return true;
-                }
-                /// @}
-
-                default:
-                    return false;
-            }
-        }
-    }
-
-    private void lockMessage(final MessageItem msgItem, final boolean locked) {
-        final Uri uri;
-        if ("sms".equals(msgItem.mType)) {
-            uri = Sms.CONTENT_URI;
-        } else {
-            uri = Mms.CONTENT_URI;
-        }
-        final Uri lockUri = ContentUris.withAppendedId(uri, msgItem.mMsgId);
-
-        final ContentValues values = new ContentValues(1);
-        values.put("locked", locked ? 1 : 0);
-
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                if (mIpCompose.lockMessage(getApplicationContext(), msgItem.mIpMessageItem,
-                        locked)) {
-                    return;
-                }
-                if (mOpComposeExt.lockMessage(getApplicationContext(), uri, msgItem.mMsgId,
-                        msgItem.mIpMessageId, locked)) {
-                    return;
-                }
-                getContentResolver().update(lockUri, values, null, null);
-            }
-        }, "ComposeMessageActivity.lockMessage").start();
-    }
-
-    /**
-     * Looks to see if there are any valid parts of the attachment that can be copied to a SD card.
-     * @param msgId
-     */
-    private boolean haveSomethingToCopyToSDCard(long msgId) {
-        PduBody body = null;
-        try {
-            body = SlideshowModel.getPduBody(this,
-                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
-        } catch (MmsException e) {
-            Log.e(TAG, "haveSomethingToCopyToSDCard can't load pdu body: " + msgId);
-        }
-        if (body == null) {
-            return false;
-        }
-
-        boolean result = false;
-        int partNum = body.getPartsNum();
-        for (int i = 0; i < partNum; i++) {
-            PduPart part = body.getPart(i);
-            // M: fix bug ALPS00355917
-            byte[] fileName = part.getFilename();
-            String mSrc = null;
-            if (fileName == null) {
-                fileName = part.getContentLocation();
-            }
-            if (fileName != null) {
-                mSrc = new String(fileName);
-            }
-            String type =  MessageUtils.getContentType(new String(part.getContentType()), mSrc);
-            part.setContentType(type.getBytes());
-            if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                log("[CMA] haveSomethingToCopyToSDCard: part[" + i + "] contentType=" + type);
-            }
-            /// M: Code analyze 057,Now, if the pdu type is "application/ogg" or
-            /// vcard and vcalender attachment can be saved to sdcard.
-            if (MmsContentType.isImageType(type) || MmsContentType.isVideoType(type) ||
-                    MmsContentType.isAudioType(type) || DrmUtils.isDrmType(type) ||
-                    "application/ogg".equalsIgnoreCase(type)
-                    || FileAttachmentModel.isSupportedFile(part)
-                    /// M: fix bug ALPS00446644, support dcf (0ct-stream) file to save
-                    || (mSrc != null && mSrc.toLowerCase().endsWith(".dcf"))) {
-            /// @}
-                return true;
-            }
-        }
-
-        /// M: add for attachment enhance
-        // Justify weather there are attachments in parts but not in slides
-        // SlideshowModel mSlideShowModel = mWorkingMessage.getSlideshow();
-        return mOpComposeExt.haveSomethingToCopyToSDCard(this, body);
-    }
-
-    /**
-     * Copies media from an Mms to the DrmProvider
-     * @param msgId
-     */
-    private boolean saveRingtone(long msgId) {
-        boolean result = true;
-        PduBody body = null;
-        try {
-            body = SlideshowModel.getPduBody(this,
-                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
-        } catch (MmsException e) {
-            Log.e(TAG, "copyToDrmProvider can't load pdu body: " + msgId);
-        }
-        if (body == null) {
-            return false;
-        }
-
-        int partNum = body.getPartsNum();
-        for (int i = 0; i < partNum; i++) {
-            PduPart part = body.getPart(i);
-            String type = new String(part.getContentType());
-
-            if (DrmUtils.isDrmType(type)) {
-                // All parts (but there's probably only a single one) have to be successful
-                // for a valid result.
-                result &= copyPart(part, Long.toHexString(msgId));
-            }
-        }
-        return result;
-    }
-
-    /**
-     * Returns true if any part is drm'd audio with ringtone rights.
-     * @param msgId
-     * @return true if one of the parts is drm'd audio with rights to save as a ringtone.
-     */
-    private boolean isDrmRingtoneWithRights(long msgId) {
-        PduBody body = null;
-        try {
-            body = SlideshowModel.getPduBody(this,
-                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
-        } catch (MmsException e) {
-            Log.e(TAG, "isDrmRingtoneWithRights can't load pdu body: " + msgId);
-        }
-        if (body == null) {
-            return false;
-        }
-
-        int partNum = body.getPartsNum();
-        for (int i = 0; i < partNum; i++) {
-            PduPart part = body.getPart(i);
-            String type = new String(part.getContentType());
-
-            if (DrmUtils.isDrmType(type)) {
-                String mimeType = MmsApp.getApplication().getDrmManagerClient()
-                        .getOriginalMimeType(part.getDataUri());
-                if (MmsContentType.isAudioType(mimeType)
-                        && DrmUtils.haveRightsForAction(part.getDataUri(),
-                        DrmStore.Action.RINGTONE)) {
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Returns true if all drm'd parts are forwardable.
-     * @param msgId
-     * @return true if all drm'd parts are forwardable.
-     */
-    private boolean isForwardable(long msgId) {
-        PduBody body = null;
-        try {
-            body = SlideshowModel.getPduBody(this,
-                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
-        } catch (MmsException e) {
-            Log.e(TAG, "getDrmMimeType can't load pdu body: " + msgId);
-        }
-        if (body == null) {
-            return false;
-        }
-
-        int partNum = body.getPartsNum();
-        for (int i = 0; i < partNum; i++) {
-            PduPart part = body.getPart(i);
-            String type = new String(part.getContentType());
-            if (DrmUtils.isDrmType(type) && !DrmUtils.haveRightsForAction(part.getDataUri(),
-                    DrmStore.Action.TRANSFER)) {
-                    return false;
-            }
-        }
-        return true;
-    }
-
-    private int getDrmMimeMenuStringRsrc(long msgId) {
-        if (isDrmRingtoneWithRights(msgId)) {
-            return R.string.save_ringtone;
-        }
-        return 0;
-    }
-
-    private int getDrmMimeSavedStringRsrc(long msgId, boolean success) {
-        if (isDrmRingtoneWithRights(msgId)) {
-            return success ? R.string.saved_ringtone : R.string.saved_ringtone_fail;
-        }
-        return 0;
-    }
-
-    /**
-     * Copies media from an Mms to the "download" directory on the SD card. If any of the parts
-     * are audio types, drm'd or not, they're copied to the "Ringtones" directory.
-     * @param msgId
-     */
-    private boolean copyMedia(long msgId) {
-        boolean result = true;
-        PduBody body = null;
-        try {
-            body = SlideshowModel.getPduBody(this,
-                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
-        } catch (MmsException e) {
-            Log.e(TAG, "copyMedia can't load pdu body: " + msgId);
-        }
-        if (body == null) {
-            return false;
-        }
-
-        int partNum = body.getPartsNum();
-        for (int i = 0; i < partNum; i++) {
-            PduPart part = body.getPart(i);
-
-            // all parts have to be successful for a valid result.
-            result &= copyPart(part, Long.toHexString(msgId));
-        }
-        return result;
-    }
-
-    private boolean copyPart(PduPart part, String fallback) {
-        Uri uri = part.getDataUri();
-        String type = new String(part.getContentType());
-        boolean isDrm = DrmUtils.isDrmType(type);
-        if (isDrm) {
-            type = MmsApp.getApplication().getDrmManagerClient()
-                    .getOriginalMimeType(part.getDataUri());
-        }
-        if (!MmsContentType.isImageType(type) && !MmsContentType.isVideoType(type) &&
-                !MmsContentType.isAudioType(type)) {
-            return true;    // we only save pictures, videos, and sounds. Skip the text parts,
-                            // the app (smil) parts, and other type that we can't handle.
-                            // Return true to pretend that we successfully saved the part so
-                            // the whole save process will be counted a success.
-        }
-        InputStream input = null;
-        FileOutputStream fout = null;
-        try {
-            input = mContentResolver.openInputStream(uri);
-            if (input instanceof FileInputStream) {
-                FileInputStream fin = (FileInputStream) input;
-
-                byte[] location = part.getName();
-                if (location == null) {
-                    location = part.getFilename();
-                }
-                if (location == null) {
-                    location = part.getContentLocation();
-                }
-
-                String fileName;
-                if (location == null) {
-                    // Use fallback name.
-                    fileName = fallback;
-                } else {
-                    // For locally captured videos, fileName can end up being something like this:
-                    //      /mnt/sdcard/Android/data/com.android.mms/cache/.temp1.3gp
-                    fileName = new String(location);
-                }
-                File originalFile = new File(fileName);
-                fileName = originalFile.getName();  // Strip the full path of where the "part" is
-                                                    // stored down to just the leaf filename.
-
-                // Depending on the location, there may be an
-                // extension already on the name or not. If we've got audio, put the attachment
-                // in the Ringtones directory.
-                String dir = Environment.getExternalStorageDirectory() + "/"
-                                + (MmsContentType.isAudioType(type) ?
-                                        Environment.DIRECTORY_RINGTONES :
-                                    Environment.DIRECTORY_DOWNLOADS)  + "/";
-                String extension;
-                int index = fileName.lastIndexOf('.');
-                if (index == -1) {
-                    extension = MimeTypeMap.getSingleton().getExtensionFromMimeType(type);
-                } else {
-                    extension = fileName.substring(index + 1, fileName.length());
-                    fileName = fileName.substring(0, index);
-                }
-                MmsLog.i(TAG, "Save part extension name is: " + extension);
-                if (isDrm) {
-                    extension += DrmUtils.getConvertExtension(type);
-                }
-                // Remove leading periods. The gallery ignores files starting with a period.
-                fileName = fileName.replaceAll("^.", "");
-
-                File file = getUniqueDestination(dir + fileName, extension);
-
-                // make sure the path is valid and directories created for this file.
-                File parentFile = file.getParentFile();
-                if (!parentFile.exists() && !parentFile.mkdirs()) {
-                    MmsLog.wpi(TAG, " copyPart: mkdirs for " + parentFile.getPath() + " failed!");
-                    return false;
-                }
-
-                fout = new FileOutputStream(file);
-
-                byte[] buffer = new byte[8000];
-                int size = 0;
-                while ((size = fin.read(buffer)) != -1) {
-                    fout.write(buffer, 0, size);
-                }
-
-                // Notify other applications listening to scanner events
-                // that a media file has been added to the sd card
-                sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,
-                        Uri.fromFile(file)));
-            }
-        } catch (IOException e) {
-            // Ignore
-            Log.e(TAG, "IOException caught while opening or reading stream", e);
-            return false;
-        } finally {
-            if (null != input) {
-                try {
-                    input.close();
-                } catch (IOException e) {
-                    // Ignore
-                    Log.e(TAG, "IOException caught while closing stream", e);
-                    return false;
-                }
-            }
-            if (null != fout) {
-                try {
-                    fout.close();
-                } catch (IOException e) {
-                    // Ignore
-                    Log.e(TAG, "IOException caught while closing stream", e);
-                    return false;
-                }
-            }
-        }
-        return true;
-    }
-
-    private File getUniqueDestination(String base, String extension) {
-        File file = new File(base + "." + extension);
-
-        for (int i = 2; file.exists(); i++) {
-            file = new File(base + "_" + i + "." + extension);
-        }
-        return file;
-    }
-
-    private void showDeliveryReport(long messageId, String type) {
-        Intent intent = new Intent(this, DeliveryReportActivity.class);
-        intent.putExtra("message_id", messageId);
-        intent.putExtra("message_type", type);
-
-        startActivity(intent);
-    }
-
-    private final IntentFilter mHttpProgressFilter = new IntentFilter(PROGRESS_STATUS_ACTION);
-
-    private final BroadcastReceiver mHttpProgressReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (PROGRESS_STATUS_ACTION.equals(intent.getAction())) {
-                long token = intent.getLongExtra("token",
-                                    SendingProgressTokenManager.NO_TOKEN);
-                if (token != mConversation.getThreadId()) {
-                    return;
-                }
-
-                int progress = intent.getIntExtra("progress", 0);
-                switch (progress) {
-                    case PROGRESS_START:
-                        setProgressBarVisibility(true);
-                        break;
-                    case PROGRESS_ABORT:
-                    case PROGRESS_COMPLETE:
-                        setProgressBarVisibility(false);
-                        break;
-                    default:
-                        setProgress(100 * progress);
-                }
-            }
-        }
-    };
-
-    private static ContactList sEmptyContactList;
-
-    private ContactList getRecipients() {
-        // If the recipients editor is visible, the conversation has
-        // not really officially 'started' yet.  Recipients will be set
-        // on the conversation once it has been saved or sent.  In the
-        // meantime, let anyone who needs the recipient list think it
-        // is empty rather than giving them a stale one.
-        if (isRecipientsEditorVisible()) {
-            if (sEmptyContactList == null) {
-                sEmptyContactList = new ContactList();
-            }
-            return sEmptyContactList;
-        }
-        return mConversation.getRecipients();
-    }
-
-    private void updateTitle(ContactList list) {
-        String title = null;
-        String subTitle = null;
-        Drawable avatarIcon = null;
-        int cnt = list.size();
-        ArrayList<String> titles = new ArrayList<String>();
-        MmsLog.d(TAG, "updateTitle(): list.size()" + list.size());
-        switch (cnt) {
-            case 0: {
-                /// M: only show "new message" string if list size is 0, if a number
-                /// end without "," or ";" should not display on title.
-                title = getString(R.string.new_message);
-                break;
-            }
-            case 1: {
-                title = list.get(0).getName();      // get name returns the number if there's no
-                                                    // name available.
-                Drawable sDefaultContactImage = this.getResources().getDrawable(
-                    R.drawable.ic_contact_picture);
-                avatarIcon = list.get(0).getAvatar(this, sDefaultContactImage,
-                                                    mConversation != null
-                                                    ? mConversation.getThreadId() : -1);
-                String number = list.get(0).getNumber();
-                String numberAfterFormat;
-//                ImageView ipCustomView = (ImageView) mActionBarCustomView
-//                        .findViewById(R.id.iv_full_integrated);
-
-                // add for ipmessage
-//                if (mIpCompose.onIpUpdateTitle(number, title, ipCustomView, titles)) {
-//                    title = titles.get(0);
-//                    subTitle = titles.get(1);
-//                }
-
-                if (!title.equals(number)) {
-                    numberAfterFormat = MessageUtils.formatNumber(number,
-                            this.getApplicationContext());
-                    if (!title.equals(numberAfterFormat)) {
-                        subTitle = numberAfterFormat;
-                    }
-                }
-                /// M: fix bug ALPS00488976, group mms @{
-                if (mMsgListAdapter.isGroupConversation()) {
-                    mMsgListAdapter.setIsGroupConversation(false);
-                }
-                /// @}
-                break;
-            }
-            default: {
-                // Handle multiple recipients
-                avatarIcon = this.getResources().getDrawable(R.drawable.ic_contact_picture);
-                title = list.formatNames(", ");
-                subTitle = getResources().getQuantityString(R.plurals.recipient_count, cnt, cnt);
-                break;
-            }
-        }
-        mDebugRecipients = list.serialize();
-
-        ActionBar actionBar = getActionBar();
-        if (actionBar == null) {
-            return;
-        }
-        if (avatarIcon != null) {
-            actionBar.setIcon(avatarIcon);
-        }
-
-        if (actionBar.getCustomView() == null) {
-            actionBar.setCustomView(R.layout.actionbar_message_title);
-        }
-        mActionBarCustomView = actionBar.getCustomView();
-        mTopTitle = (TextView) mActionBarCustomView.findViewById(R.id.tv_top_title);
-        mTopSubtitle = (TextView) mActionBarCustomView.findViewById(R.id.tv_top_subtitle);
-        String number = null;
-        if (!list.isEmpty())
-        {
-            number = list.get(0).getNumber();
-            MmsLog.dpi(TAG, "updateTitle(): list.1 number" + number);
-        }
-        // add for ipmessage
-        ImageView ipCustomView = (ImageView) mActionBarCustomView
-                .findViewById(R.id.iv_full_integrated);
-        if (mIpCompose.onIpUpdateTitle(number, null, ipCustomView, titles)) {
-            title = titles.get(0);
-            subTitle = titles.get(1);
-        }
-
-        subTitle = mOpComposeExt.updateTitle(cnt, number, subTitle);
-
-        asyncUpdateThreadMuteIcon();
-        ///M: ALPS00772324 The recipient didn't shown completely after input a recipient's numbers
-        ///M: and put the cursor to the text field.
-        ///M: setMaxWidth to a very large value for textView can width can be wrap_content
-        mTopTitle.setMaxWidth(3000);
-        mTopTitle.setText(title);
-		setTextMarquee(mTopTitle);
-        if (TextUtils.isEmpty(subTitle)) {
-            if (cnt == 0) {
-                actionBar.setIcon(R.drawable.ic_launcher_smsmms);
-            }
-            mTopSubtitle.setVisibility(View.GONE);
-        } else {
-            mTopSubtitle.setText(subTitle);
-            mTopSubtitle.setVisibility(View.VISIBLE);
-        }
-        actionBar.setDisplayShowCustomEnabled(true);
-        actionBar.setDisplayShowTitleEnabled(false);
-    }
-
-	public static void setTextMarquee(TextView textView) {
-        if (textView != null) {
-            textView.setEllipsize(TextUtils.TruncateAt.MARQUEE);
-			textView.setMarqueeRepeatLimit(6);
-            textView.setSingleLine(true);
-            textView.setSelected(true);
-            textView.setFocusable(true);
-            textView.setFocusableInTouchMode(true);
-        }
-    }
-
-    private void asyncUpdateThreadMuteIcon() {
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                boolean value = false;
-                if (mConversation != null && mConversation.getThreadId() > 0) {
-                    value = MessageUtils.checkNeedNotify(ComposeMessageActivity.this,
-                            mConversation.getThreadId(), null);
-                } else {
-                    value = MessageUtils.checkNeedNotify(ComposeMessageActivity.this, 0, null);
-                }
-                final boolean needNotify = value;
-                runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        MmsLog.d(TAG, "asyncUpdateThreadMuteIcon: meedNotify is " + needNotify);
-                        ActionBar actionBar = getActionBar();
-                        if (actionBar.getCustomView() == null) {
-                            actionBar.setCustomView(R.layout.actionbar_message_title);
-                        }
-                        mActionBarCustomView = actionBar.getCustomView();
-                        mMuteLogo = (ImageView) mActionBarCustomView.findViewById(R.id.iv_silent);
-                        mMuteLogo.setVisibility(needNotify ? View.INVISIBLE : View.VISIBLE);
-                    }
-                });
-            }
-        }, "check and update mute icon").start();
-    }
-
-    // Get the recipients editor ready to be displayed onscreen.
-    private void initRecipientsEditor(Bundle bundle) {
-        /// M: Code analyze 046, Whether the recipientedit control has been initialized. @{
-        if (isRecipientsEditorVisible() && isInitRecipientsEditor) {
-        /// @}
-            return;
-        }
-        // Must grab the recipients before the view is made visible because getRecipients()
-        // returns empty recipients when the editor is visible.
-        ContactList recipients = getRecipients();
-        /// M: Code analyze 058, Remove exceed recipients.
-        while (!recipients.isEmpty() && recipients.size() > RECIPIENTS_LIMIT_FOR_SMS) {
-            recipients.remove(RECIPIENTS_LIMIT_FOR_SMS);
-        }
-        /// @}
-
-        ViewStub stub = (ViewStub) findViewById(R.id.recipients_editor_stub);
-        if (stub != null) {
-            View stubView = stub.inflate();
-            mRecipientsEditor = (RecipientsEditor) stubView.findViewById(R.id.recipients_editor);
-            mRecipientsPicker = (ImageButton) stubView.findViewById(R.id.recipients_picker);
-        } else {
-            mRecipientsEditor = (RecipientsEditor) findViewById(R.id.recipients_editor);
-            mRecipientsEditor.setVisibility(View.VISIBLE);
-            mRecipientsPicker = (ImageButton) findViewById(R.id.recipients_picker);
-            /// M: Code analyze 059, Set the pick button visible or
-            /// invisible the same as recipient editor.
-            mRecipientsPicker.setVisibility(View.VISIBLE);
-            /// @}
-        }
-        mRecipientsPicker.setOnClickListener(this);
-        mRecipientsEditor.removeChipChangedListener(mChipWatcher);
-        mRecipientsEditor.addChipChangedListener(mChipWatcher);
-
-        mRecipientsPicker.setEnabled(mIsSmsEnabled);
-        mRecipientsEditor.setEnabled(mIsSmsEnabled);
-        mRecipientsEditor.setFocusableInTouchMode(mIsSmsEnabled);
-        mRecipientsEditor.setIsTouchable(mIsSmsEnabled);
-
-        // M: indicate contain email address or not in RecipientsEditor candidates. @{
-        SharedPreferences prefs =
-            PreferenceManager.getDefaultSharedPreferences(ComposeMessageActivity.this);
-        boolean showEmailAddress =
-            prefs.getBoolean(GeneralPreferenceActivity.SHOW_EMAIL_ADDRESS, true);
-        MmsLog.d(TAG, "initRecipientsEditor(), showEmailAddress = " + showEmailAddress);
-        /// M: fix bug ALPS00380930
-        if (mRecipientsEditor.getAdapter() == null) {
-            ChipsRecipientAdapter chipsAdapter = new ChipsRecipientAdapter(this);
-            chipsAdapter.setShowEmailAddress(showEmailAddress);
-            mRecipientsEditor.setAdapter(chipsAdapter);
-            mRecipientsEditor.setGalSearchDelayer();
-        } else {
-            ((ChipsRecipientAdapter) mRecipientsEditor
-                    .getAdapter()).setShowEmailAddress(showEmailAddress);
-        }
-        // @}
-        if (bundle == null) {
-            mRecipientsEditor.populate(new ContactList());
-            mRecipientsEditor.populate(recipients);
-        }
-        mRecipientsEditor.setOnCreateContextMenuListener(mRecipientsMenuCreateListener);
-        // TODO : Remove the max length limitation due to the multi phone picker is added and the
-        // user is able to select a large number of recipients from the Contacts. The coming
-        // potential issue is that it is hard for user to edit a recipient from hundred of
-        // recipients in the editor box. We may redesign the editor box UI for this use case.
-        // mRecipientsEditor.setFilters(new InputFilter[] {
-        //         new InputFilter.LengthFilter(RECIPIENTS_MAX_LENGTH) });
-
-        mRecipientsEditor.setOnSelectChipRunnable(new Runnable() {
-            public void run() {
-                // After the user selects an item in the pop-up contacts list, move the
-                // focus to the text editor if there is only one recipient.  This helps
-                // the common case of selecting one recipient and then typing a message,
-                // but avoids annoying a user who is trying to add five recipients and
-                // keeps having focus stolen away.
-                if (mRecipientsEditor.getRecipientCount() == 1) {
-                    // if we're in extract mode then don't request focus
-                    final InputMethodManager inputManager = mInputMethodManager;
-                    if (inputManager == null || !inputManager.isFullscreenMode()) {
-                        if (mBottomPanel != null && mBottomPanel.getVisibility() == View.VISIBLE) {
-                            mTextEditor.requestFocus();
-                        }
-                    }
-                }
-            }
-        });
-
-        mRecipientsEditor.setOnFocusChangeListener(new View.OnFocusChangeListener() {
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                if (hasFocus) {
-                    /// M: add for ip message
-                    MmsLog.d(TAG, "onFocusChange(): mRecipientsEditor get focus.");
-                    if (mIsLandscape) {
-                        mTextEditor.setMaxHeight(
-                                mReferencedTextEditorTwoLinesHeight
-                                * mCurrentMaxHeight / mReferencedMaxHeight);
-                    } else {
-                        updateTextEditorHeightInFullScreen();
-                    }
-                }
-                // add for ipmessage
-                mIpCompose.onIpRecipientsEditorFocusChange(
-                        hasFocus, mRecipientsEditor.getNumbers());
-                mOpComposeExt.onRecipientsEditorFocusChange(hasFocus);
-            }
-        });
-
-        mRecipientsEditor.setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                mIpCompose.onIpRecipientsEditorTouch();
-                mOpComposeExt.onRecipientsEditorTouch();
-                return false;
-            }
-        });
-
-        mRecipientsEditor.setChipProcessListener(new ChipProcessListener() {
-            public void onChipProcessDone() {
-                mIsPopulatingRecipients = false;
-                if (mIsConvertToastDelayed) {
-                    mIsConvertToastDelayed = false;
-                    toastConvertInfo(mIsConvertMms);
-                }
-            }
-        });
-
-        // M: fix bug ALPS00355897
-        // PhoneNumberFormatter.setPhoneNumberFormattingTextWatcher(this, mRecipientsEditor);
-
-        mTopPanel.setVisibility(View.VISIBLE);
-        /// M: Code analyze 013, Get contacts from Contact app . @{
-        if (mIsRecipientHasIntentNotHandle && (mIntent != null)) {
-            processPickResult(mIntent);
-            mIsRecipientHasIntentNotHandle = false;
-            mIntent = null;
-        }
-        /// @}
-        mIpCompose.initRecipientsEditor(mRecipientsEditor);
-    }
-
-    //==========================================================
-    // Activity methods
-    //==========================================================
-
-    public static boolean cancelFailedToDeliverNotification(Intent intent, Context context) {
-        if (MessagingNotification.isFailedToDeliver(intent)) {
-            // Cancel any failed message notifications
-            MessagingNotification.cancelNotification(context,
-                        MessagingNotification.MESSAGE_FAILED_NOTIFICATION_ID);
-            return true;
-        }
-        return false;
-    }
-
-    public static boolean cancelFailedDownloadNotification(Intent intent, Context context) {
-        if (MessagingNotification.isFailedToDownload(intent)) {
-            // Cancel any failed download notifications
-            MessagingNotification.cancelNotification(context,
-                        MessagingNotification.DOWNLOAD_FAILED_NOTIFICATION_ID);
-            return true;
-        }
-        return false;
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        mIsSmsEnabled = MmsConfig.isSmsEnabled(this);
-        super.onCreate(savedInstanceState);
-        mSavedInstanceState = savedInstanceState;
-
-        if (requestAllPermissions()) {
-            MmsLog.d(TAG, "onCreate() requestAllPermissions return !!");
-            mNeedRequestPermissins = true;
-            return;
-        } else {
-            if (DraftCache.getInstance() == null) {
-                MmsApp.getApplication().onRequestPermissionsResult();
-            }
-        }
-
-        mForwardingMessage = false;
-
-        /// M: If cell dialog is showed before, do not show it. @{
-        if (savedInstanceState != null
-                && savedInstanceState.getBoolean("cell_dialog_showing", false)) {
-            MmsLog.d(TAG, "cell progress dialog is showed before, do not show it now");
-            savedInstanceState.putBundle("android:savedDialogs", null);
-        }
-        /// @}
-
-        // add for ipmessage
-        mIpCompose = IpMessageUtils.getIpMessagePlugin(this).getIpComposeActivity();
-        // add for op plugin
-        mOpComposeExt = OpMessageUtils.getOpMessagePlugin().getOpComposeExt();
-
-        mMessageSubId = (int) Settings.System.getLong(getContentResolver(),
-                Settings.System.SMS_SIM_SETTING, Settings.System.DEFAULT_SIM_NOT_SET);
-
-        mInputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
-
-        /// M: Code analyze 002,  If a new ComposeMessageActivity is created, kill old one
-        Activity compose = sCompose == null ? null : sCompose.get();
-        /// M Fix CR : ALPS01275735, which has mms draft for conversation A, enter it.
-        /// change recipients froam A to B, then come a B notification , click the notification,
-        /// enter the thread A, it will show wrong composer UI.
-        /// because conversation from cache is the same. @{
-        if (compose != null && compose instanceof ComposeMessageActivity) {
-            Intent in = this.getIntent();
-            /// M : Fix issue ALPS01767850 @{
-            if (in.getBooleanExtra("from_notification", false)) {
-                boolean b = ((ComposeMessageActivity) compose).hasValidRecipient();
-                if (b) {
-                    mLastThreadIdFromNotification
-                            = ((ComposeMessageActivity) compose).mConversation.ensureThreadId();
-                    if (!((ComposeMessageActivity) compose).mWorkingMessage.hasAttachment()) {
-                        sTextEditorText
-                                = ((ComposeMessageActivity) compose)
-                                        .mWorkingMessage.getText().toString();
-                    } else {
-                        sTextEditorText = null;
-                    }
-                }
-            }
-            /// @}
-
-            long thid = in.getLongExtra("thread_id_from_notification", -1);
-            if (((ComposeMessageActivity) compose).mConversation != null) {
-                if (thid == ((ComposeMessageActivity) compose).mConversation.getThreadId()) {
-                    ((ComposeMessageActivity) compose).mConversation.clearThreadId();
-                }
-            }
-        }
-        /// @}
-
-        if (compose != null && !compose.isFinishing() && savedInstanceState == null) {
-            MmsLog.d(TAG, "onCreate finish old compose");
-            compose.finish();
-        }
-        sCompose = new WeakReference(this);
-        /// @}
-        /// M: Code analyze 003,  Set or get max mms size.
-        initMessageSettings();
-        /// @}
-        resetConfiguration(getResources().getConfiguration());
-        /// M: Code analyze 004, Set max height for text editor. @{
-        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
-        if (mIsLandscape) {
-            mCurrentMaxHeight = windowManager.getDefaultDisplay().getWidth();
-        } else {
-            mCurrentMaxHeight = windowManager.getDefaultDisplay().getHeight();
-        }
-        MmsLog.d(TAG, "onCreate(): mCurrentMaxHeight = " + mCurrentMaxHeight);
-        /// @}
-        setContentView(R.layout.compose_message_activity);
-        setProgressBarVisibility(false);
-
-        mIpCompose.onIpComposeActivityCreate(this, mIpComposeCallback, mHandler, mUiHandler,
-                (ImageButton) findViewById(R.id.send_button_sms),
-                (TextView) findViewById(R.id.ip_message_typing_status),
-                (TextView) findViewById(R.id.ipmsg_joyn_stranger_remind),
-                findViewById(R.id.bottom_panel), savedInstanceState,
-                (ImageButton) findViewById(R.id.share_button),
-                (LinearLayout) findViewById(R.id.panel_container),
-                (EditText) findViewById(R.id.embedded_text_editor));
-
-        /// M: add for update sub state dynamically. @{
-        IntentFilter intentFilter =
-            new IntentFilter(TelephonyIntents.ACTION_SUBINFO_RECORD_UPDATED);
-        mOpComposeExt.onCreate(mIpComposeCallback, getIntent(), intentFilter, compose, this,
-                savedInstanceState, mUiHandler, (ImageButton) findViewById(R.id.share_button),
-                (LinearLayout) findViewById(R.id.panel_container),
-                (EditText) findViewById(R.id.embedded_text_editor));
-        /// @}
-
-        /// M: Code analyze 005, Set input mode. @{
-        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
-        /// @}
-
-        // Initialize members for UI elements.
-        initResourceRefs();
-        /// M: Code analyze 006, Control Sub indicator on status bar. @{
-        mStatusBarManager = (StatusBarManager) getSystemService(Context.STATUS_BAR_SERVICE);
-        mComponentName = getComponentName();
-        /// @}
-
-        /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-        mSubCount = 0;
-        /// @}
-
-        mContentResolver = getContentResolver();
-        mBackgroundQueryHandler = new BackgroundQueryHandler(mContentResolver);
-
-        initialize(savedInstanceState, 0, false);
-
-        if (TRACE) {
-            android.os.Debug.startMethodTracing("compose");
-        }
-        /// M: Code analyze 008,unkown . @{
-        mDestroy = false;
-
-        /// @}
-        /// M: Code analyze 009,Show attachment dialog . @{
-        mSoloAlertDialog = new SoloAlertDialog(this);
-        /// @}
-        /// M: Code analyze 007, Get information from Sub or
-        /// save message to Sub.(Get all Sub info) @{
-        mGetSubInfoRunnable.run();
-        /// @} for ALPS00475359 end
-
-        this.registerReceiver(mSubReceiver, intentFilter);
-        /// @}
-    }
-
-    private void showSubjectEditor(boolean show) {
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            log("showSubjectEditor: " + show);
-        }
-
-        if (mSubjectTextEditor == null) {
-            // Don't bother to initialize the subject editor if
-            // we're just going to hide it.
-            if (show == false) {
-                return;
-            }
-            mSubjectTextEditor = (EditText) findViewById(R.id.subject);
-            /// M: Code analyze 068, Unknown. Why delete these code? @{
-            /// mSubjectTextEditor.setFilters(new InputFilter[] {
-            ///     new LengthFilter(MmsConfig.getMaxSubjectLength())});
-            /// @}
-            /// M: Code analyze 001, Plugin opeartor. @{
-            mOpComposeExt.showSubjectEditor(mSubjectTextEditor);
-            /// @}
-       }
-
-        mSubjectTextEditor.setOnKeyListener(show ? mSubjectKeyListener : null);
-
-        mSubjectTextEditor.removeTextChangedListener(mSubjectEditorWatcher);
-        if (show) {
-            mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher);
-        }
-
-        if ((mBottomPanel != null) && (mBottomPanel.getVisibility() == View.VISIBLE)) {
-            if (!show) {
-                mTextEditor.requestFocus();
-            }
-            //mSubjectTextEditor.setNextFocusDownId(R.id.embedded_text_editor);
-            mSubjectTextEditor.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-            mSubjectTextEditor.setImeActionLabel(getText(
-                    com.android.internal.R.string.ime_action_next), EditorInfo.IME_ACTION_NEXT);
-        } else {
-            //mSubjectTextEditor.setNextFocusDownId(-1);
-            mSubjectTextEditor.setImeOptions(EditorInfo.IME_ACTION_DONE);
-            mSubjectTextEditor.setImeActionLabel(
-                    getText(com.android.internal.R.string.ime_action_done),
-                    EditorInfo.IME_ACTION_DONE);
-        }
-        CharSequence subjectText = mWorkingMessage.getSubject();
-        if (subjectText != null && show) {
-            mSubjectTextEditor.setTextKeepState(subjectText);
-            try {
-                mSubjectTextEditor.setSelection(mSubjectTextEditor.getText().toString().length());
-            } catch (IndexOutOfBoundsException e) {
-                mSubjectTextEditor.setSelection(
-                        mSubjectTextEditor.getText().toString().length() - 1);
-            }
-        } else {
-            mSubjectTextEditor.setText("");
-        }
-
-        mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE);
-
-        mSubjectTextEditor.setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                mIpCompose.onIpSubjectTextEditorTouch();
-                mOpComposeExt.onSubjectTextEditorTouch();
-                return false;
-            }
-        });
-
-        mSubjectTextEditor.setOnFocusChangeListener(new View.OnFocusChangeListener() {
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                mIpCompose.onIpSubjectTextEditorFocusChange(hasFocus);
-                mOpComposeExt.onSubjectTextEditorFocusChange(hasFocus);
-            }
-        });
-
-        mSubjectTextEditor.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-            @Override
-            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
-                if (actionId == EditorInfo.IME_ACTION_NEXT) {
-                    if ((mBottomPanel != null) && (mBottomPanel.getVisibility() == View.VISIBLE)) {
-                        mTextEditor.requestFocus();
-                        return true;
-                    }
-                }
-                return false;
-            }
-        });
-        hideOrShowTopPanel();
-    }
-
-    private void hideOrShowTopPanel() {
-        if (mOpComposeExt.hideOrShowTopPanel(mTopPanel)) {
-            return;
-        }
-        boolean anySubViewsVisible = (isSubjectEditorVisible() || isRecipientsEditorVisible());
-        mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE);
-    }
-
-    /// M : Fix issue ALPS01767850 @{
-    /// If there a mms draft with thread id 1, and create a new sms message with threadid 1
-    /// Then send a threadid 1 message, and click the notification to enter the 1 thread
-    /// The sms message will disapre which just edit in the editor box
-    private boolean needLoadDraftWhileFromNotification(Intent intent) {
-        if (intent == null) {
-            return true;
-        }
-        // check from notification or not
-        boolean isFromNotification = intent.getBooleanExtra("from_notification", false);
-
-        if (!isFromNotification) {
-            Log.d(TAG,
-                    "[needLoadDraftWhileFromNotification] NOT from notification, need load draft");
-            return true;
-        }
-
-        // check exist text or not
-        if (sTextEditorText == null || sTextEditorText.trim().length() == 0) {
-            Log.d(TAG, "[needLoadDraftWhileFromNotification] NO" +
-                    " EXIST text in the editor, need load draft");
-            return true;
-        }
-        // check the thread id from notification and the thread id from last compose is the same
-        boolean isSameThread = false;
-
-        long threadIdFromNotification = intent.getLongExtra("thread_id_from_notification", -1);
-
-        if (mLastThreadIdFromNotification == -1 || threadIdFromNotification == -1) {
-            isSameThread = false;
-        } else if (mLastThreadIdFromNotification == threadIdFromNotification) {
-            isSameThread = true;
-        }
-
-        Log.d(TAG, "[needLoadDraftWhileFromNotification] mLastThreadIdFromNotification : "
-                + mLastThreadIdFromNotification
-                + ", threadIdFromNotification : " + threadIdFromNotification);
-
-        if (!isSameThread) {
-            Log.d(TAG, "[needLoadDraftWhileFromNotification] NOT the same thread, load draft");
-            return true;
-        }
-
-        mLastThreadIdFromNotification = -1;
-        Log.d(TAG, "[needLoadDraftWhileFromNotification] return false");
-
-        return false;
-    }
-    ///@}
-
-    public void initialize(Bundle savedInstanceState, long originalThreadId,
-                           boolean fromPremissionresult) {
-        /// M: Code analyze 010, Support dirtory mode. @{
-        Intent intent = getIntent();
-        boolean showInput = false;
-        boolean hiderecipient = false;
-        boolean isMustRecipientEditable = false;
-        if (FolderModeUtils.getMmsDirMode()) {
-            mHomeBox = intent.getIntExtra("folderbox", 0);
-            showInput = intent.getBooleanExtra("showinput", false);
-            hiderecipient = intent.getBooleanExtra("hiderecipient", false);
-            isMustRecipientEditable = true;
-        }
-        /// @}
-
-        // Create a new empty working message.
-        mWorkingMessage = WorkingMessage.createEmpty(this);
-
-        // add for ipmessage
-//        mIpCompose.onIpInitialize(intent, mWorkingMessage);
-
-        // Read parameters or previously saved state of this activity. This will load a new
-        // mConversation
-        initActivityState(savedInstanceState);
-
-        if (LogTag.SEVERE_WARNING && originalThreadId != 0 &&
-                originalThreadId == mConversation.getThreadId()) {
-            LogTag.warnPossibleRecipientMismatch("ComposeMessageActivity.initialize: " +
-                    " threadId didn't change from: " + originalThreadId, this);
-        }
-
-        log("savedInstanceState = " + savedInstanceState +
-            ", intent = " + intent +
-            ", originalThreadId = " + originalThreadId +
-            ", mConversation = " + mConversation);
-
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (!FolderModeUtils.getMmsDirMode()) {
-            if (cancelFailedToDeliverNotification(getIntent(), this)
-                    && savedInstanceState == null) {
-                // Show a pop-up dialog to inform user the message was
-                // failed to deliver.
-                undeliveredMessageDialog(getMessageDate(null));
-            }
-            cancelFailedDownloadNotification(getIntent(), this);
-        }
-        ///  @}
-        // Set up the message history ListAdapter
-        initMessageList();
-        /// M: fix bug for ConversationList select all performance ,update selected thread array.@{
-        mSelectedThreadId = mConversation.getThreadId();
-        /// @}
-        // Load the draft for this thread, if we aren't already handling
-        // existing data, such as a shared picture or forwarded message.
-        boolean isForwardedMessage = false;
-        // We don't attempt to handle the Intent.ACTION_SEND when saveInstanceState is non-null.
-        // saveInstanceState is non-null when this activity is killed. In that case, we already
-        // handled the attachment or the send, so we don't try and parse the intent again.
-        boolean intentHandled = savedInstanceState == null &&
-        /// M: unknown @{
-            (handleSendIntent() || (handleForwardedMessage() && !mConversation.hasDraft()));
-        /// @}
-
-        /// M: ALPS03562153 @{
-        String action = intent.getAction();
-        if ((action != null) && Intent.ACTION_SENDTO.equals(action)) {
-            Log.d(TAG, "[initialize] action: " + action);
-            mCreateFromSendTo = true;
-        }
-        /// @}
-
-        /// M : Fix issue ALPS01767850
-        boolean need = needLoadDraftWhileFromNotification(intent);
-        Log.d(TAG, "[initialize] need : " + need);
-        if (!intentHandled && need) {
-            MmsLog.d(TAG, "Composer init load Draft.");
-            loadDraft();
-        } else if (!need) {
-            mTextEditor.setText(sTextEditorText);
-        }
-
-        sTextEditorText = null;
-
-        // Let the working message know what conversation it belongs to
-        mWorkingMessage.setConversation(mConversation);
-
-        // need init cc editor no matter recipient editor show or not
-        mOpComposeExt.onInitialize(intent, mWorkingMessage.mOpWorkingMessageExt);
-        mOpComposeExt.initRecipientsEditor(savedInstanceState,
-                (RecipientsEditor) findViewById(R.id.recipients_cc_editor));
-
-        // Show the recipients editor if we don't have a valid thread. Hide it otherwise.
-        /// M: @{
-        //  if (mConversation.getThreadId() <= 0) {
-        if (mConversation.getThreadId() <= 0L
-            || (mConversation.getMessageCount() <= 0
-                    && (intent.getAction() != null || mConversation.hasDraft()))
-            || (mConversation.getThreadId() > 0L && mConversation.getMessageCount() <= 0)
-            || isMustRecipientEditable) {
-         /// @}
-            // Hide the recipients editor so the call to initRecipientsEditor won't get
-            // short-circuited.
-            hideRecipientEditor();
-            if (fromPremissionresult == true) {
-                initRecipientsEditor(null);
-            } else {
-                initRecipientsEditor(savedInstanceState);
-            }
-
-            // Bring up the softkeyboard so the user can immediately enter recipients. This
-            // call won't do anything on devices with a hard keyboard.
-            if (mIsSmsEnabled) {
-                getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                    WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
-            }
-        } else {
-            hideRecipientEditor();
-        }
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (FolderModeUtils.getMmsDirMode()) {
-            if (showInput) {
-                getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                        WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
-            } else {
-                getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                        WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
-            }
-            if (hiderecipient) {
-                if (isRecipientsEditorVisible()) {
-                    hideRecipientEditor();
-                }
-            }
-        }
-        /// M: @{
-
-        invalidateOptionsMenu();    // do after show/hide of recipients editor because the options
-                                    // menu depends on the recipients, which depending upon the
-                                    // visibility of the recipients editor, returns a different
-                                    // value (see getRecipients()).
-
-        updateSendButtonState();
-
-        drawTopPanel(false);
-        if (intentHandled) {
-            // We're not loading a draft, so we can draw the bottom panel immediately.
-            drawBottomPanel();
-        }
-
-        onKeyboardStateChanged();
-
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "update title, mConversation=" + mConversation.toString());
-        }
-
-        // no longer update title in onResume, so set "New Message" here.
-        updateTitle(new ContactList());
-
-        if (isForwardedMessage && isRecipientsEditorVisible()) {
-            // The user is forwarding the message to someone. Put the focus on the
-            // recipient editor rather than in the message editor.
-            mRecipientsEditor.requestFocus();
-        }
-
-        /// M: google JB.MR1 patch, group mms
-        boolean isGroupMms = mConversation.getRecipients().size() > 1;
-        mMsgListAdapter.setIsGroupConversation(isGroupMms);
-        mIpCompose.onIpInitialize(intent, mWorkingMessage);
-    }
-
-    @Override
-    protected void onNewIntent(Intent intent) {
-        super.onNewIntent(intent);
-
-        if (requestAllPermissions()) {
-            mNeedRequestPermissins = true;
-            return;
-        }
-
-        MmsLog.dpi(TAG, "onNewIntent: intent = " + intent.toString());
-      /// M: add for fix ALPS01317511 @{
-        if (!mOpComposeExt.onNewIntent(intent, mHadToSlideShowEditor, mTempMmsUri, mWorkingMessage,
-                this, mRecipientsEditor, FolderViewList.OPTION_INBOX)) {
-            processNewIntent(intent);
-        }
-        /// @}
-    }
-
-   private void processNewIntent(Intent intent) {
-        setIntent(intent);
-        /// M: reload working message if it is not correct.
-        if (!mOpComposeExt.processNewIntent(intent)) {
-            if (!intent.getBooleanExtra(FORWARD_MESSAGE, false)) {
-                reloadWorkingMessage();
-                resetConfiguration(getResources().getConfiguration());
-            }
-        }
-
-        mWaitingAttachment = false;
-
-        if (mQuickTextDialog != null && mQuickTextDialog.isShowing()) {
-            mQuickTextDialog.dismiss();
-            mQuickTextDialog = null;
-        }
-
-        if (mSubSelectDialog != null && mSubSelectDialog.isShowing()) {
-            mSubSelectDialog.dismiss();
-            mSubSelectDialog = null;
-        }
-
-        Conversation conversation = null;
-        mSentMessage = false;
-
-        // If we have been passed a thread_id, use that to find our
-        // conversation.
-
-        // Note that originalThreadId might be zero but if this is a draft and we save the
-        // draft, ensureThreadId gets called async from WorkingMessage.asyncUpdateDraftSmsMessage
-        // the thread will get a threadId behind the UI thread's back.
-        long originalThreadId = mConversation.getThreadId();
-        long threadId = intent.getLongExtra("thread_id", 0);
-        Uri intentUri = intent.getData();
-
-        boolean sameThread = false;
-        if (threadId > 0) {
-            conversation = Conversation.get(getApplicationContext(), threadId, false);
-        } else {
-            if (mConversation.getThreadId() == 0) {
-                // We've got a draft. Make sure the working recipients are synched
-                // to the conversation so when we compare conversations later in this function,
-                // the compare will work.
-                mWorkingMessage.syncWorkingRecipients();
-            }
-            // Get the "real" conversation based on the intentUri. The intentUri might specify
-            // the conversation by a phone number or by a thread id. We'll typically get a threadId
-            // based uri when the user pull down a notification while in ComposeMessageActivity and
-            // we end up here in onNewIntent. mConversation can have a threadId of zero when we're
-            // working on a draft. When a new message comes in for that same recipient, a
-            // conversation will get created behind CMA's back when the message is inserted into
-            // the database and the corresponding entry made in the threads table. The code should
-            // use the real conversation as soon as it can rather than finding out the threadId
-            // when sending with "ensureThreadId".
-            conversation = Conversation.get(getApplicationContext(), intentUri, false);
-        }
-
-        /// M: Fix bug: ALPS00444760, The keyboard display under the MMS after
-        // you tap shortcut enter this thread.
-        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
-        /// @}
-
-        ///M @{
-        if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "onNewIntent: data=" + intentUri + ", thread_id extra is " + threadId +
-                    ", new conversation=" + conversation + ", mConversation=" + mConversation);
-        }
-
-        // this is probably paranoid to compare both thread_ids and recipient lists,
-        // but we want to make double sure because this is a last minute fix for Froyo
-        // and the previous code checked thread ids only.
-        // (we cannot just compare thread ids because there is a case where mConversation
-        // has a stale/obsolete thread id (=1) that could collide against the new thread_id(=1),
-        // even though the recipient lists are different)
-        sameThread = ((conversation.getThreadId() == mConversation.getThreadId() ||
-                mConversation.getThreadId() == 0) &&
-                conversation.equals(mConversation));
-
-        if (sameThread) {
-            log("onNewIntent: same conversation");
-            /// M Fix CR:ALPS01081972 which cannot show received message in the composer @{
-            if (intent.getBooleanExtra("finish", false) == true) {
-                Activity compose = sCompose == null ? null : sCompose.get();
-                if (compose != null && !compose.isFinishing()) {
-                    Log.d("[Mms][ComposeMessageActivity]",
-                            "[onNewIntent] same conversation call finish composer");
-                    compose.finish();
-                    this.startActivity(intent);
-                    return;
-                }
-            }
-            /// @}
-            if (mConversation.getThreadId() == 0) {
-                mConversation = conversation;
-                mWorkingMessage.setConversation(mConversation);
-                updateThreadIdIfRunning();
-                invalidateOptionsMenu();
-            }
-        } else {
-            if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                log("onNewIntent: different conversation");
-            }
-            /// M: @{
-            /// M: Don't let any markAsRead DB updates occur before we've loaded the messages for
-            /// M: the thread.
-            conversation.blockMarkAsRead(true);
-            /// @}
-            if ((!isRecipientsEditorVisible())
-                    || (mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms()))) {
-                    //For ALPS00457252
-                    if (!mWorkingMessage.isWorthSaving()) {
-                        mWorkingMessage.discard();
-                    } else {
-                        saveDraft(false); // if we've got a draft, save it first
-                    }
-            }
-            /// if is not the same thread, to cancel progress dialog @{
-            mUiHandler.removeCallbacks(this.mContactPickRunnable);
-            if (mContactPickDialog != null && mContactPickDialog.isShowing()) {
-                mContactPickDialog.dismiss();
-            }
-            mContactPickDialog = null;
-            /// @}
-            if (mAsyncDialog != null) {
-                mAsyncDialog.dismissProgressDialog();
-            }
-            /// if from shortcut, finish origin compoer, and start again @{
-            if (intent.getBooleanExtra("finish", false) == true) {
-                Activity compose = sCompose == null ? null : sCompose.get();
-                if (compose != null && !compose.isFinishing()) {
-                    Log.d("[Mms][ComposeMessageActivity]", "[onNewIntent] call finish composer");
-                    compose.finish();
-                    this.startActivity(intent);
-                    return;
-                }
-            }
-            /// @}
-            /// M: @{
-            mMsgListAdapter.changeCursor(null);
-            mConversation = conversation;
-            /// @}
-
-            initialize(null, originalThreadId, false);
-            /// M: add for attach dialog do not dismiss when enter other thread. @{
-            if (!mSoloAlertDialog.needShow()) {
-                mSoloAlertDialog.dismiss();
-            }
-            /// @}
-            /// M: fix bug ALPS00941735
-            mIsSameConv = false;
-            MmsLog.d(TAG, "onNewIntent not same thread");
-        }
-        loadMessageContent();
-
-        if (mMsgListAdapter != null && mMsgListAdapter.getCount() == 0) {
-            showKeyBoard(true);
-            if (mRecipientsEditor != null) {
-                mRecipientsEditor.requestFocus();
-            }
-        }
-   }
-
-    private void sanityCheckConversation() {
-        if (mWorkingMessage.getConversation() != mConversation) {
-            LogTag.warnPossibleRecipientMismatch(
-                    "ComposeMessageActivity: mWorkingMessage.mConversation=" +
-                    mWorkingMessage.getConversation() + ", mConversation=" +
-                    mConversation + ", MISMATCH!", this);
-        }
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-
-        if (mNeedRequestPermissins) {
-            MmsLog.d(TAG, "onRestart() mNeedRequestPermissins return !!" + mNeedRequestPermissins);
-            return;
-        }
-        if (requestAllPermissions()) {
-            MmsLog.d(TAG, "onRestart() requestAllPermissions return !!");
-            mNeedRequestPermissins = true;
-            return;
-        }
-
-         /// M: For fix bug ALPS00542156 The "_" still display under the SubA after
-        /// you change it to the "Always ask" or "SubB.@{
-        sCompose = null;
-        sCompose = new WeakReference(this);
-        /// @}
-
-        if (mWorkingMessage != null && mWorkingMessage.isDiscarded()) {
-            // If the message isn't worth saving, don't resurrect it. Doing so can lead to
-            // a situation where a new incoming message gets the old thread id of the discarded
-            // draft. This activity can end up displaying the recipients of the old message with
-            // the contents of the new message. Recognize that dangerous situation and bail out
-            // to the ConversationList where the user can enter this in a clean manner.
-            mWorkingMessage.unDiscard();    // it was discarded in onStop().
-            if (mWorkingMessage.isWorthSaving()) {
-                if (LogTag.VERBOSE) {
-                    log("onRestart: mWorkingMessage.unDiscard()");
-                }
-                //mWorkingMessage.unDiscard();    // it was discarded in onStop().
-
-                sanityCheckConversation();
-            } else if (isRecipientsEditorVisible()) {
-                if (LogTag.VERBOSE) {
-                    log("onRestart: goToConversationList");
-                }
-                goToConversationList();
-            } else {
-                if (LogTag.VERBOSE) {
-                    log("onRestart: loadDraft");
-                }
-                /// M: @{
-                //loadDraft();
-                /// @}
-                mWorkingMessage.setConversation(mConversation);
-                mAttachmentEditor.update(mWorkingMessage);
-                updateTextEditorHeightInFullScreen();
-                invalidateOptionsMenu();
-            }
-        }
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        MmsLog.d(TAG, "onStart() enter!!");
-
-        if (mNeedRequestPermissins) {
-            return;
-        }
-
-        mIsActivityStoped = false;
-        boolean isSmsEnabled = MmsConfig.isSmsEnabled(this);
-        if (isSmsEnabled != mIsSmsEnabled) {
-            mIsSmsEnabled = isSmsEnabled;
-            invalidateOptionsMenu();
-        }
-        /// M: For fix bug ALPS00688631 The "_" still display under the SubA after
-        /// you change it to the "Always ask" or "SubB.@{
-        sCompose = null;
-        sCompose = new WeakReference(this);
-        /// @}
-        /// M Fix CR : ALPS01257113, when sub select dialog showed in default sms. after change to
-        /// non-default sms, dismiss the sub select dialog @{
-        if (!mIsSmsEnabled) {
-            if (mSubSelectDialog != null && mSubSelectDialog.isShowing()) {
-                mSubSelectDialog.dismiss();
-            }
-        }
-        /// @}
-
-        /// M: Code analyze 036, Change text size if adjust font size.@{
-        float textSize = MessageUtils.getPreferenceValueFloat(this,
-                SettingListActivity.TEXT_SIZE, 18);
-        setTextSize(textSize);
-        /// @}
-
-        /// M: Code analyze 013, Get contacts from Contact app . @{
-        misPickContatct = false;
-        /// @}
-        // M:for ALPS01065027,just for compose messagelist in scrolling
-        mMsgListView.setOnScrollListener(mScrollListener);
-        mScrollListener.setIsNeedRefresh(true);
-        mScrollListener.setThreadId(mConversation.getThreadId(), ComposeMessageActivity.this);
-        initFocus();
-
-        // Register a BroadcastReceiver to listen on HTTP I/O process.
-        registerReceiver(mHttpProgressReceiver, mHttpProgressFilter);
-        mOpComposeExt.onStart(this, this);
-        loadMessageContent();
-
-        // Update the fasttrack info in case any of the recipients' contact info changed
-        // while we were paused. This can happen, for example, if a user changes or adds
-        // an avatar associated with a contact.
-        /// M: @{
-        if (mConversation.getThreadId() == 0) {
-            mWorkingMessage.syncWorkingRecipients();
-        }
-        /// @}
-
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "onStart: update title, mConversation=" + mConversation.toString());
-        }
-
-        ActionBar actionBar = getActionBar();
-        /// M: Add log. @{
-        if (actionBar == null) {
-            MmsLog.e(TAG, "ACTION BAR is null, window feature FEATURE_ACTION_BAR: "
-                    + getWindow().hasFeature(Window.FEATURE_ACTION_BAR)
-                    + ", feature FEATURE_NO_TITLE: "
-                    + getWindow().hasFeature(Window.FEATURE_NO_TITLE));
-        } else {
-            actionBar.setDisplayHomeAsUpEnabled(true);
-        }
-        /// @}
-
-        /// M: Code analyze 047, Extra uri from message body and get number from uri.
-        /// Then use this number to update contact cache. @{
-        mNeedUpdateContactForMessageContent = true;
-        /// @}
-
-        /// M: Code analyze 001, Plugin opeartor. @{
-        new MmsDialogNotifyUtils(this).closeMsgDialog();
-        /// @}
-
-        if (isRecipientsEditorVisible() && mIsSmsEnabled &&
-                getResources().getConfiguration().orientation
-                    != Configuration.ORIENTATION_LANDSCAPE) {
-            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                    WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
-        }
-        ///M: WFC: Show notification ticker @ {
-        if (ImsManager.isWfcEnabledByPlatform(getApplicationContext())) {
-//            MessagingNotification.showWfcNotification(getApplicationContext());
-        }
-        /// @}
-        if (mMsgListAdapter != null) {
-            mMsgListAdapter.setOnDataSetChangedListener(mDataSetChangedListener);
-        }
-        addRecipientsListeners();
-    }
-
-    public void loadMessageContent() {
-        // Don't let any markAsRead DB updates occur before we've loaded the messages for
-        // the thread. Unblocking occurs when we're done querying for the conversation
-        // items.
-        MmsLog.d(TAG, "loadMessageContent()");
-        ///M: for fix ALPS01026162, for folder mode, no content loaded.must not mark as read. @{
-        if (!FolderModeUtils.getMmsDirMode()) {
-            mConversation.blockMarkAsRead(true);
-            mConversation.markAsRead();         // dismiss any notifications for this convo
-            /// M: mark conversation as seen, update new messages notification.
-            /// M: fix bug ALPS01065220. onStart() will update message seen = 1.
-            /// But if before update start,
-            /// do not update it.{@
-            mConversation.setComposeIsPaused(false);
-            /// @}
-            mConversation.markAsSeen();
-        }
-        /// @}
-        startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 0);
-        updateSendFailedNotification();
-        updateDownloadFailedNotification();
-        drawBottomPanel();
-    }
-
-    private void updateSendFailedNotification() {
-        final long threadId = mConversation.getThreadId();
-        if (threadId <= 0)
-            return;
-
-        // updateSendFailedNotificationForThread makes a database call, so do the work off
-        // of the ui thread.
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                MessagingNotification.updateSendFailedNotificationForThread(
-                        ComposeMessageActivity.this, threadId);
-            }
-        }, "ComposeMessageActivity.updateSendFailedNotification").start();
-    }
-
-    private void updateDownloadFailedNotification() {
-        final long threadId = mConversation.getThreadId();
-        if (threadId <= 0)
-            return;
-
-        // updateSendFailedNotificationForThread makes a database call, so do the work off
-        // of the ui thread.
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                MessagingNotification.updateDownloadFailedNotificationForThread(
-                        ComposeMessageActivity.this, threadId);
-            }
-        }, "ComposeMessageActivity.updateSendFailedNotificationForThread").start();
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        /// M: Code analyze 033, Save some useful information in order to restore the draft when
-        /// activity restarting.@{
-        // super is commented for a bug work around see MessageUtils.showErrorDialog()
-        super.onSaveInstanceState(outState); //why delete this line?
-        if (mNeedRequestPermissins) {
-            return;
-        }
-        String number = "";
-
-        mOpComposeExt.onSaveInstanceState(outState);
-
-        // save recipients of this coversation
-        if (mRecipientsEditor != null && isRecipientsEditorVisible()) {
-            // TODO need re-coding for below code
-            //outState.putString("recipients", mRecipientsEditor.allNumberToString());
-            /// M: We are compressing the image, so save the thread id in order to restore the
-            /// M: draft when activity restarting.
-            if (mCompressingImage) {
-                outState.putLong("thread", mConversation.ensureThreadId());
-            } else if (mRecipientsEditor.getRecipientCount() < 1) {
-                outState.putLong("thread", mConversation.ensureThreadId());
-                if ((mBackgroundQueryHandler != null) && (mConversation.getThreadId() > 0)) {
-                    Conversation.asyncDeleteObsoleteThreadID(
-                            mBackgroundQueryHandler, mConversation.getThreadId());
-                }
-            } else if (mRecipientsEditor.getRecipientCount() > 0) {
-                ArrayList<String> numbers = (ArrayList<String>) (mRecipientsEditor.getNumbers());
-                outState.putString("recipients", TextUtils.join(";", numbers.toArray()));
-            }
-        } else {
-            /// M: save the current thread id
-            outState.putLong("thread", mConversation.getThreadId());
-            MmsLog.i(TAG, "saved thread id:" + mConversation.getThreadId());
-        }
-        outState.putBoolean("compressing_image", mCompressingImage);
-        // add for ipmessage
-        mIpCompose.onIpSaveInstanceState(outState, mConversation.getThreadId());
-        /// @}
-        mWorkingMessage.writeStateToBundle(outState);
-
-        if (mExitOnSent) {
-            outState.putBoolean(KEY_EXIT_ON_SENT, mExitOnSent);
-        }
-        if (mForwardMessageMode) {
-            outState.putBoolean(KEY_FORWARDED_MESSAGE, mForwardMessageMode);
-        }
-        if (!mAppendAttachmentSign) {
-            MmsLog.d(TAG, "onSaveInstanceState mAppendAttachmentSign : " + mAppendAttachmentSign);
-            outState.putBoolean(KEY_APPEND_MESSAGE, mAppendAttachmentSign);
-        }
-        /// M: save cell progress dialog is showing or not
-        outState.putBoolean("cell_dialog_showing", mIsCellDialogShowing);
-    }
-
-    @Override
-    protected void onResume() {
-        /// M: fix bug ALPS00444752, set false to enable to Show ContactPicker
-        mShowingContactPicker = false;
-        super.onResume();
-        if (mNeedRequestPermissins) {
-            return;
-        }
-
-        mIsActivityPaused = false;
-        mNeedSaveDraftAfterStop = false;
-        boolean isSmsEnabled = MmsConfig.isSmsEnabled(this);
-        if (isSmsEnabled != mIsSmsEnabled) {
-            mIsSmsEnabled = isSmsEnabled;
-            invalidateOptionsMenu();
-        }
-        initFocus();
-        getAsyncDialog().resetShowProgressDialog();
-         /// M: Code analyze 005, Set input mode. @{
-        Configuration config = getResources().getConfiguration();
-        MmsLog.d(TAG, "onResume - config.orientation = " + config.orientation);
-        if (config.orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            MmsLog.e(TAG, "onResume Set setSoftInputMode to 0x" +
-                    Integer.toHexString(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                            WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN));
-            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                    WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
-        }
-        /// @}
-
-        /// M: Code analyze 024, If the click operator can be responsed. @{
-        //  button can response to start other activity
-        mClickCanResponse = true;
-        /// @}
-        /// M: Code analyze 038, If the user is editing slideshow now.
-        /// Do not allow the activity finish but return directly when back key is entered. @{
-        mIsEditingSlideshow = false;
-        /// @}
-        String text = null;
-        if (mWorkingMessage != null && mWorkingMessage.getText() != null) {
-            text = mWorkingMessage.getText().toString();
-        }
-
-        mOpComposeExt.initResourceRefsOnResume(
-                        (LinearLayout) findViewById(R.id.button_with_counter),
-                        (TextView) findViewById(R.id.ct_text_counter),
-                        mAttachmentEditor.mOpAttachmentEditorExt);
-
-        mOpComposeExt.onResume(mSubCount, text, mIsSmsEnabled,
-                mRecipientsEditor, mSubjectTextEditor);
-
-        if (mDrawBottomPanel) {
-            drawBottomPanel();
-        }
-        // OLD: get notified of presence updates to update the titlebar.
-        // NEW: we are using ContactHeaderWidget which displays presence, but updating presence
-        //      there is out of our control.
-        //Contact.startPresenceObserver();
-
-        //addRecipientsListeners();
-
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "onResume: update title, mConversation=" + mConversation.toString());
-        }
-
-        // There seems to be a bug in the framework such that setting the title
-        // here gets overwritten to the original title.  Do this delayed as a
-        // workaround.
-        if (isRecipientsEditorVisible()) {
-            asyncUpdateThreadMuteIcon();
-        } else {
-            new Thread(new Runnable() {
-                public void run() {
-                    /// M: Fix CR ALPS00558119
-                    /// When the Contact phone is long enough ,after add audio,
-                    /// The title will show only phony number @{
-                    ///@M:fix bug ALPS00871320 tablet has wide space to show more contact
-                    int limite = getLimitedContact();
-                    ///@
-                    final ContactList recipients = getRecipients();
-                    int min = Math.min(limite, recipients.size());
-                    MmsLog.d(TAG, "onResume reload recipients size = " + recipients.size());
-                    for (int i = 0; i < min; i++) {
-                        recipients.get(i).reload();
-                    }
-                    mMessageListItemHandler.postDelayed(new Runnable() {
-                        public void run() {
-                            updateTitle(recipients);
-                        }
-                    }, 10);
-                }
-            }).start();
-        }
-
-        mIsRunning = true;
-        updateThreadIdIfRunning();
-
-        // add for ipmessage
-        mIpCompose.onIpComposeActivityResume(isSmsEnabled,
-                mTextEditor, mTextEditorWatcher, mTextCounter,
-                mRecipientsEditor, mSubjectTextEditor);
-        /// M: just update state but didn't notify will miss some mms/sms switch toast.
-        //mWorkingMessage.updateStateForGroupMmsChanged();
-
-        updateSendButtonState();
-
-        if (mOldThreadID == -1 && mConversation != null) {
-            mOldThreadID = mConversation.getThreadId();
-        }
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        MmsLog.d(TAG, "onPause() enter!!");
-        if (mNeedRequestPermissins) {
-            return;
-        }
-        mIsActivityPaused = true;
-        if (FeatureOption.MTK_GMO_ROM_OPTIMIZE) {
-            MmsLog.d(TAG, "onPause() start Draft Service");
-            startService(new Intent(this, DraftService.class));
-        }
-        /// M: fix bug ALPS00421362. Allow any blocked calls to update the thread's read status.
-        /// M: fix bug ALPS01026162.for folder mode, no content loaded.must not mark as read.
-        if (this.isFinishing() && !isRecipientsEditorVisible()
-                && !FolderModeUtils.getMmsDirMode()) {
-            mConversation.blockMarkAsRead(false);
-            mConversation.markAsRead();
-        }
-
-        mDrawBottomPanel = true;
-
-        // OLD: stop getting notified of presence updates to update the titlebar.
-        // NEW: we are using ContactHeaderWidget which displays presence, but updating presence
-        //      there is out of our control.
-        //Contact.stopPresenceObserver();
-        //removeRecipientsListeners();
-
-        // remove any callback to display a progress spinner
-        if (mAsyncDialog != null) {
-            mAsyncDialog.clearPendingProgressDialog();
-        }
-
-        // Remember whether the list is scrolled to the end when we're paused so we can rescroll
-        // to the end when resumed.
-        if (mMsgListAdapter != null &&
-                mMsgListView.getLastVisiblePosition() >= mMsgListAdapter.getCount() - 1) {
-            mSavedScrollPosition = Integer.MAX_VALUE;
-        } else {
-            mSavedScrollPosition = mMsgListView.getFirstVisiblePosition();
-        }
-        if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            Log.v(TAG, "onPause: mSavedScrollPosition=" + mSavedScrollPosition);
-        }
-
-        mIsRunning = false;
-        mErrorDialogShown = true;
-
-        // add for ipmessage
-        mIpCompose.onIpComposeActivityPause();
-
-        /// M: Stop in conversation notification sound
-        MessagingNotification.stopInConversationNotificationSound();
-        /// @}
-
-        checkObsoleteThreadId();
-    }
-
-    @Override
-    protected void onStop() {
-        super.onStop();
-
-        if (mNeedRequestPermissins) {
-            MmsLog.d(TAG, "onStop() no permissions");
-            return;
-        }
-
-        mIsActivityStoped = true;
-//        mContentResolver.unregisterContentObserver(mDraftChangeObserver);
-        /// M: fix bug ALPS01065220. onStart() will update message seen = 1.
-        /// But if before update start,
-        /// do not update it.{@
-        mConversation.setComposeIsPaused(true);
-        /// @}
-        /// M: Code analyze 013, Get contacts from Contact app . @{
-        if (misPickContatct) {
-            stopDraftService();
-            return;
-        }
-        /// @}
-        // Allow any blocked calls to update the thread's read status.
-      /// M: fix bug ALPS01026162.for folder mode, no content loaded.must not mark as read.
-        if (!isRecipientsEditorVisible() && !FolderModeUtils.getMmsDirMode()) {
-            mConversation.blockMarkAsRead(false);
-            mConversation.markAsRead();
-        }
-
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            log("onStop: save draft");
-        }
-        MessagingNotification.setCurrentlyDisplayedThreadId(MessagingNotification.THREAD_NONE);
-        /// M: If image is being compressed, wait for it
-        if (isFinishing()) {
-            waitForCompressing();
-        }
-        /// M: @{
-        if ((!isRecipientsEditorVisible()) ||
-                (mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms()))) {
-            if (isWorthSaving() && MessageUtils.allowSafeDraft(this,
-                    MmsConfig.getDeviceStorageFullStatus(), false, TOAST_TYPE_FOR_SAVE_DRAFT)) {
-                if (!mCompressingImage) {
-                    saveDraft(true);
-                } else {
-                    mNeedSaveDraftAfterStop = true;
-                    log("onStop: skip save draft");
-                }
-                if (mConversation.getMessageCount() == 0) {
-                    ConversationListAdapter.removeSelectedState(mSelectedThreadId);
-                }
-            }
-        }
-        /// @}
-        /// M: @{
-        MmsWidgetProvider.notifyDatasetChanged(getApplicationContext());
-        MmsLog.i(TAG,
-                "onStop(): mWorkingMessage.isDiscarded() == " + mWorkingMessage.isDiscarded());
-        /// @}
-        // Cleanup the BroadcastReceiver.
-        unregisterReceiver(mHttpProgressReceiver);
-        /// M: fix bug ALPS00380930, fix RecipientsAdapter cursor leak @{
-        //if (mRecipientsEditor != null && isFinishing()) {
-        //    CursorAdapter recipientsAdapter = (CursorAdapter)mRecipientsEditor.getAdapter();
-        //    if (recipientsAdapter != null) {
-        //        recipientsAdapter.changeCursor(null);
-        //    }
-        //}
-        /// @}
-
-        // / M: fix bug ALPS00451836, remove FLAG_DISMISS_KEYGUARD flags
-        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD |
-                                   WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
-        stopDraftService();
-
-        ///M: WFC: Stop notification ticker @ {
-        if (ImsManager.isWfcEnabledByPlatform(getApplicationContext())) {
-//            MessagingNotification.stopWfcNotification(getApplicationContext());
-        }
-        if (mMsgListAdapter != null) {
-            MmsLog.d(TAG, "set OnDataSetChangedListener null");
-            mMsgListAdapter.setOnDataSetChangedListener(null);
-        }
-        removeRecipientsListeners();
-    }
-
-
-    private void dismissmDiscardDraftDialog() {
-        if (mDiscardDraftDialog != null && mDiscardDraftDialog.isShowing()) {
-            MmsLog.d(TAG, "dismissmDiscardDraftDialog");
-            mDiscardDraftDialog.dismiss();
-            mDiscardDraftDialog = null;
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        if (mNeedRequestPermissins) {
-            super.onDestroy();
-            MmsLog.d(TAG, "onDestroy() no permissions");
-            return;
-        }
-        dismissmDiscardDraftDialog();
-        /// it will not show draft icon in the conversationlist @{
-       if (!mWorkingMessage.isWorthSaving()) {
-                                   Log.i(TAG, "delete unsavedempty draft: ");
-            mWorkingMessage.discard();
-            mHasDiscardWorkingMessage = true;
-            new Thread(new Runnable() {
-               public void run() {
-                   long threadId = mConversation.getThreadId();
-                   boolean isHasDraft =
-                       DraftCache.refreshDraft(ComposeMessageActivity.this, threadId);
-                   Log.i(TAG, "onDestroy, nothing to be save, reset threadId : "
-                           + threadId + ", isHasDraft : " + isHasDraft);
-                   DraftCache.getInstance().setDraftState(threadId, isHasDraft);
-               }
-           }, "Composer.resetDraftCache").start();
-        }
-        stopDraftService();
-        /// M: fix bug ALPS00473488, delete ObsoleteThread through threadID when discard()
-        if (mConversation.getMessageCount() == 0
-                && (!mWorkingMessage.isWorthSaving()
-                        || mWorkingMessage.isDiscarded())
-                && isRecipientsEditorVisible()) {
-            Conversation.asyncDeleteObsoleteThreads(mBackgroundQueryHandler,
-                    ConversationList.DELETE_OBSOLETE_THREADS_TOKEN);
-            mConversation.setDiscardThreadId(0);
-        }
-        mIsStartMultiDeleteActivity = false;
-        /// @}
-        MmsLog.d(TAG, "onDestroy()");
-        if (TRACE) {
-            android.os.Debug.stopMethodTracing();
-        }
-
-        mUiHandler.removeCallbacks(mContactPickRunnable);
-        if (mContactPickDialog != null && mContactPickDialog.isShowing()) {
-            mContactPickDialog.dismiss();
-        }
-        mContactPickDialog = null;
-
-        unregisterReceiver(mSubReceiver);
-
-        /// @}
-        mDestroy = true;
-        mScrollListener.destroyThread();
-        /// M: Stop not started queries @{
-        if (mBackgroundQueryHandler != null) {
-            MmsLog.d(TAG, "clear pending queries in onDestroy");
-            mBackgroundQueryHandler.cancelOperation(MESSAGE_LIST_QUERY_TOKEN);
-            mBackgroundQueryHandler.removeCallbacks(mQueryMsgListRunnable);
-        }
-        /// @}
-        if (mMsgListAdapter != null) {
-            mMsgListAdapter.destroyTaskStack();
-            /// M: we need unregister cursor, so no more callback
-            mMsgListAdapter.changeCursor(null);
-        }
-        mIpCompose.onIpComposeActivityDestroy();
-        mOpComposeExt.onDestroy();
-
-        /// M: ALPS03562153 @{
-        if (mCreateFromSendTo == true) {
-            MmsLog.d(TAG, "to clear contact cache");
-            Contact.invalidateCache();
-        }
-        /// @}
-
-        super.onDestroy();
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        MmsLog.d(TAG, "onConfigurationChanged-Start");
-        super.onConfigurationChanged(newConfig);
-        if (mNeedRequestPermissins) {
-            return;
-        }
-        mIpCompose.onIpConfig(newConfig);
-        mOpComposeExt.onConfigurationChanged();
-        if (LOCAL_LOGV) {
-            Log.v(TAG, "onConfigurationChanged: " + newConfig);
-        }
-
-        if (resetConfiguration(newConfig)) {
-            // Have to re-layout the attachment editor because we have different layouts
-            // depending on whether we're portrait or landscape.
-            drawTopPanel(isSubjectEditorVisible());
-        }
-        onKeyboardStateChanged();
-        MmsLog.d(TAG, "onConfigurationChanged-End");
-    }
-
-    private boolean mUpdateForScrnOrientationChanged = false;
-    // returns true if landscape/portrait configuration has changed
-    private boolean resetConfiguration(Configuration config) {
-        mIsKeyboardOpen = config.keyboardHidden == KEYBOARDHIDDEN_NO;
-        boolean isLandscape = config.orientation == Configuration.ORIENTATION_LANDSCAPE;
-        mIpCompose.resetIpConfiguration(mIsLandscape, isLandscape, mIsSoftKeyBoardShow);
-        mOpComposeExt.resetConfiguration(mIsLandscape, isLandscape, mIsSoftKeyBoardShow);
-
-        /// M: Code analyze 004, Set max height for text editor. @{
-        if ((mTextEditor != null)
-                && (mTextEditor.getVisibility() == View.VISIBLE) && isLandscape) {
-            mUiHandler.postDelayed(new Runnable() {
-                public void run() {
-                    MmsLog.d(TAG, "resetConfiguration(): mTextEditor.setMaxHeight: "
-                            + mReferencedTextEditorThreeLinesHeight);
-                    mTextEditor.setMaxHeight(mReferencedTextEditorTwoLinesHeight *
-                            mCurrentMaxHeight / mReferencedMaxHeight);
-                }
-            }, 100);
-        }
-        /// @}
-
-        MmsLog.d(TAG, "resetConfiguration(): isLandscape = " + isLandscape + ", mIsKeyboardOpen = "
-                + mIsKeyboardOpen);
-
-        if (mIsLandscape != isLandscape) {
-            MmsLog.d(TAG, "resetConfiguration-mUpdateForScrnOrientationChanged mIsLandscape = "
-                    + mIsLandscape);
-            mUpdateForScrnOrientationChanged = true;
-            mIsLandscape = isLandscape;
-            return true;
-        }
-        return false;
-    }
-
-    private void onKeyboardStateChanged() {
-        // If the keyboard is hidden, don't show focus highlights for
-        // things that cannot receive input.
-        mTextEditor.setEnabled(mIsSmsEnabled);
-        if (!mIsSmsEnabled) {
-            if (mRecipientsEditor != null) {
-                mRecipientsEditor.setFocusableInTouchMode(false);
-                mRecipientsEditor.setIsTouchable(false);
-            }
-            if (mSubjectTextEditor != null) {
-                mSubjectTextEditor.setFocusableInTouchMode(false);
-            }
-            mTextEditor.setFocusableInTouchMode(false);
-            mTextEditor.setHint(R.string.sending_disabled_not_default_app);
-        } else if (mIsKeyboardOpen) {
-            if (mRecipientsEditor != null) {
-                mRecipientsEditor.setFocusableInTouchMode(true);
-                mRecipientsEditor.setIsTouchable(true);
-            }
-            if (mSubjectTextEditor != null) {
-                mSubjectTextEditor.setFocusableInTouchMode(true);
-            }
-            mTextEditor.setFocusableInTouchMode(true);
-            /// M: add for ip message
-            updateTextEditorHint();
-        } else {
-            if (mRecipientsEditor != null) {
-                mRecipientsEditor.setFocusable(false);
-                mRecipientsEditor.setIsTouchable(false);
-            }
-            if (mSubjectTextEditor != null) {
-                mSubjectTextEditor.setFocusable(false);
-            }
-            mTextEditor.setFocusable(false);
-            mTextEditor.setHint(R.string.open_keyboard_to_compose_message);
-        }
-    }
-
-    @Override
-    public void onUserInteraction() {
-        checkPendingNotification();
-    }
-
-    @Override
-    public boolean onKeyDown(int keyCode, KeyEvent event) {
-        Log.d(TAG, "onKeyDown(): keyCode = " + keyCode);
-        if (mNeedRequestPermissins) {
-            return false;
-        }
-        if (mIpCompose != null && mIpCompose.onIpKeyDown(keyCode, event)) {
-            return true;
-        }
-        if (mOpComposeExt != null && mOpComposeExt.onKeyDown(keyCode, event)) {
-            return true;
-        }
-
-        switch (keyCode) {
-            case KeyEvent.KEYCODE_DEL:
-                if ((mMsgListAdapter != null) && (mMsgListView != null) && mMsgListView.isFocused()) {
-                    Cursor cursor;
-                    try {
-                        cursor = (Cursor) mMsgListView.getSelectedItem();
-                    } catch (ClassCastException e) {
-                        Log.e(TAG, "Unexpected ClassCastException.", e);
-                        return super.onKeyDown(keyCode, event);
-                    }
-
-                    if (cursor != null) {
-                        String type = cursor.getString(COLUMN_MSG_TYPE);
-                        long msgId = cursor.getLong(COLUMN_ID);
-                        MessageItem msgItem = mMsgListAdapter.getCachedMessageItem(type, msgId,
-                                cursor);
-                        if (msgItem != null) {
-                            DeleteMessageListener l = new DeleteMessageListener(msgItem);
-                            confirmDeleteDialog(l, msgItem.mLocked);
-                        }
-                        return true;
-                    }
-                }
-                break;
-            case KeyEvent.KEYCODE_DPAD_CENTER:
-                /// M: @{
-                break;
-                /// @}
-            case KeyEvent.KEYCODE_ENTER:
-                /// M: Code analyze 028, Before sending message,check the recipients count
-                /// and add sub card selection dialog if multi sim cards exist.@{
-                /** Fix bug ALPS001070636
-                if (isPreparedForSending()) {
-                    checkRecipientsCount();
-                    return true;
-                } else {
-                    unpreparedForSendingAlert();
-                /// @}
-                }
-                **/
-                break;
-            case KeyEvent.KEYCODE_BACK:
-                /// M: Code analyze 038, If the user is editing slideshow now.
-                /// Do not allow the activity finish but return directly
-                /// when back key is entered. @{
-                if (mIsEditingSlideshow) {
-                    return true;
-                }
-                /// @}
-
-                // M: when out of composemessageactivity,try to send read report
-                if (FeatureOption.MTK_SEND_RR_SUPPORT) {
-                    checkAndSendReadReport();
-                }
-                /// @}
-                mIsCheckObsolete = true;
-                exitComposeMessageActivity(new Runnable() {
-                    @Override
-                    public void run() {
-                        finish();
-                    }
-                });
-                return true;
-            case KeyEvent.KEYCODE_MENU:
-                invalidateOptionsMenu();
-                return false;
-        }
-
-        return super.onKeyDown(keyCode, event);
-    }
-
-    private void unpreparedForSendingAlert() {
-        if (!isHasRecipientCount()) {
-            new AlertDialog.Builder(this).setIconAttribute(
-                    android.R.attr.alertDialogIcon).setTitle(
-                    R.string.cannot_send_message).setMessage(
-                    R.string.cannot_send_message_reason).setPositiveButton(
-                    R.string.yes, new CancelSendingListener()).show();
-        } else {
-            new AlertDialog.Builder(this).setIconAttribute(
-                    android.R.attr.alertDialogIcon).setTitle(
-                    R.string.cannot_send_message).setMessage(
-                    R.string.cannot_send_message_reason_no_content)
-                    .setPositiveButton(R.string.yes,
-                            new CancelSendingListener()).show();
-        }
-    }
-
-    private void exitComposeMessageActivity(final Runnable exit) {
-          VideoThumbnailCache.clear();
-        // If the message is empty, just quit -- finishing the
-        // activity will cause an empty draft to be deleted.
-        if (!mWorkingMessage.isWorthSaving()) {
-            /// M: Code analyze 042, If you discard the draft message manually.@{
-            if (mMsgListAdapter.getCount() == 0) {
-                ConversationListAdapter.removeSelectedState(mSelectedThreadId);
-            }
-            mWorkingMessage.discard();
-            mHasDiscardWorkingMessage = true;
-            /// @}
-            /// M Fix CR: ALPS01222344. new message input a contact and some content,
-            /// incoming a messae which is the same contact as the draft.
-            /// it will not show draft icon in the conversationlist @{
-            new Thread(new Runnable() {
-                public void run() {
-                    long threadId = mConversation.getThreadId();
-                    boolean isHasDraft =
-                        DraftCache.refreshDraft(ComposeMessageActivity.this, threadId);
-                    Log.d(TAG, "exitComposeMessageActivity, nothing to be save, reset threadId : "
-                            + threadId + ", isHasDraft : " + isHasDraft);
-                    DraftCache.getInstance().setDraftState(threadId, isHasDraft);
-                }
-            }, "Composer.resetDraftCache").start();
-            /// @}
-            exit.run();
-            return;
-        }
-
-        if (isRecipientsEditorVisible() &&
-                !mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms())) {
-            mDiscardDraftDialog = MessageUtils.showDiscardDraftConfirmDialog(
-                                this, new DiscardDraftListener());
-            return;
-        }
-
-        if (needSaveDraft()) {
-            if (MessageUtils.allowSafeDraft(this, MmsConfig.getDeviceStorageFullStatus(), true,
-                    TOAST_TYPE_FOR_SAVE_DRAFT)) {
-                /// M: for requery searchactivity.
-                SearchActivity.setNeedRequery();
-                if (mIsSmsEnabled) {
-                    SearchActivity.setWaitSaveDraft();
-                }
-                DraftCache.getInstance().setSavingDraft(true);
-            }
-        }
-        mWorkingMessage.setNeedDeleteOldMmsDraft(true);
-        mToastForDraftSave = true;
-        exit.run();
-    }
-
-    private void goToConversationList() {
-        finish();
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (FolderModeUtils.getMmsDirMode()) {
-            Intent it = new Intent(this, FolderViewList.class);
-            it.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
-                    | Intent.FLAG_ACTIVITY_SINGLE_TOP
-                    | Intent.FLAG_ACTIVITY_CLEAR_TOP);
-            it.putExtra("floderview_key", mHomeBox);
-            startActivity(it);
-        } else {
-        ///  @}
-        /// M: add extra flags
-        Intent it = new Intent(this, ConversationList.class);
-        it.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
-                | Intent.FLAG_ACTIVITY_SINGLE_TOP
-                | Intent.FLAG_ACTIVITY_CLEAR_TOP);
-        startActivity(it);
-        }
-    }
-
-    private void hideRecipientEditor() {
-        if (mRecipientsEditor != null) {
-            Log.d(TAG, "hideRecipientEditor");
-            mRecipientsEditor.removeChipChangedListener(mChipWatcher);
-            mRecipientsEditor.setVisibility(View.GONE);
-            /// M: Code analyze 059, Set the pick button visible or
-            /// invisible the same as recipient editor.
-            mRecipientsPicker.setVisibility(View.GONE);
-            /// @}
-            hideOrShowTopPanel();
-            mRecipientsEditor.recycleBitmap();
-        }
-    }
-
-    private boolean isRecipientsEditorVisible() {
-        return (null != mRecipientsEditor)
-                    && (View.VISIBLE == mRecipientsEditor.getVisibility());
-    }
-
-    private boolean isSubjectEditorVisible() {
-        return (null != mSubjectTextEditor)
-                    && (View.VISIBLE == mSubjectTextEditor.getVisibility());
-    }
-
-    @Override
-    public void onAttachmentChanged() {
-        // Have to make sure we're on the UI thread. This function can be called off of the UI
-        // thread when we're adding multi-attachments
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                drawBottomPanel();
-                updateSendButtonState();
-                drawTopPanel(isSubjectEditorVisible());
-                if (null != mRecipientsEditor) {
-                    if (mWorkingMessage.hasSlideshow()) {
-                        mRecipientsEditor.setImeActionLabel(
-                                getString(MessageResource.string.ime_action_done),
-                                EditorInfo.IME_ACTION_DONE);
-                        mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_DONE);
-                    } else {
-                        mRecipientsEditor.setImeActionLabel(
-                                getString(MessageResource.string.ime_action_next),
-                                EditorInfo.IME_ACTION_NEXT);
-                        mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-                    }
-                }
-
-                mInputMethodManager.restartInput(mRecipientsEditor);
-            }
-        });
-    }
-    private boolean mIsConvertToastDelayed = false;
-    /// M: Code analyze 060, For bug ALPS00050082, When the protocol has been changed,
-    /// whether show a toast . @{
-    private boolean mIsConvertMms = false;
-    @Override
-    public void onProtocolChanged(final boolean mms, final boolean needToast) {
-        // Have to make sure we're on the UI thread. This function can be called off of the UI
-        // thread when we're adding multi-attachments
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                //toastConvertInfo(mms);
-                /// M: fix ALPS01033728, don't call showSmsOrMmsSendButton() here, method
-                /// updateSendButtonState() will call it.
-                //showSmsOrMmsSendButton(mms);
-                mIpCompose.onIpProtocolChanged(mms, needToast);
-                updateSendButtonState();
-
-                if (mOpComposeExt.onProtocolChanged(mms, mWorkingMessage.getText())) {
-                    if (mms) {
-                        // In the case we went from a long sms with a counter to an mms because
-                        // the user added an attachment or a subject, hide the counter --
-                        // it doesn't apply to mms.
-                        mTextCounter.setVisibility(View.GONE);
-                    } else {
-                        if (mTextEditor.getLineCount() <= 1) {
-                            mTextCounter.setVisibility(View.GONE);
-                        } else {
-                            mTextCounter.setVisibility(View.VISIBLE);
-                        }
-                    }
-                }
-
-                if (needToast) {
-                    if (mIsPopulatingRecipients) {
-                        mIsConvertToastDelayed = true;
-                        mIsConvertMms = mms;
-                    } else {
-                        toastConvertInfo(mms);
-                    }
-                }
-            }
-        });
-    }
-    /// @}
-
-    // Show or hide the Sms or Mms button as appropriate. Return the view so that the caller
-    // can adjust the enableness and focusability.
-    private View showSmsOrMmsSendButton(boolean isMms) {
-        View showButton = null;
-        View hideButton = null;
-        // add for ipmessage
-
-        if (isMms) {
-            if (mSubCount == 0 || (isRecipientsEditorVisible()
-                    && TextUtils.isEmpty(mRecipientsEditor.getText()))
-                    /// M: fix bug ALPS00563318, show gray mms_send_button
-                /// when haven't subject, text and attachment
-                || ((mSubjectTextEditor == null || (mSubjectTextEditor != null
-                        && TextUtils.isEmpty(mSubjectTextEditor.getText().toString().trim())))
-                        && mTextEditor != null
-                        && TextUtils.isEmpty(mTextEditor.getText().toString().trim())
-                        && !mWorkingMessage.hasAttachment())
-                        || !mIsSmsEnabled) {
-            mSendButtonMms.setCompoundDrawablesWithIntrinsicBounds(null, null, null,
-                getResources().getDrawable(R.drawable.ic_send_sms_unsend));
-        } else {
-            mSendButtonMms.setCompoundDrawablesWithIntrinsicBounds(null, null, null,
-                    getResources().getDrawable(R.drawable.ic_send_ipmsg));
-            }
-            showButton = mSendButtonMms;
-            hideButton = mSendButtonSms;
-        } else {
-            if (!mIpCompose.onIpShowSmsOrMmsSendButton(isMms)) {
-                if ((mTextEditor.getText().toString().isEmpty())
-                        || mSubCount == 0
-                        || (isRecipientsEditorVisible()
-                                && TextUtils.isEmpty(mRecipientsEditor.getText()))
-                        || recipientCount() > MmsConfig.getSmsRecipientLimit()
-                        || !mIsSmsEnabled) {
-                    ///@}
-                    mSendButtonSms.setImageResource(R.drawable.ic_send_sms_unsend);
-                } else {
-                    mSendButtonSms.setImageResource(R.drawable.ic_send_ipmsg);
-                }
-            }
-            showButton = mSendButtonSms;
-            hideButton = mSendButtonMms;
-        }
-
-        if (showButton != null) {
-            showButton.setVisibility(View.VISIBLE);
-        }
-        if (hideButton != null) {
-            hideButton.setVisibility(View.GONE);
-        }
-        updateTextEditorHint();
-        return showButton;
-    }
-
-    Runnable mResetMessageRunnable = new Runnable() {
-        @Override
-        public void run() {
-            resetMessage();
-        }
-    };
-
-    @Override
-    public void onPreMessageSent() {
-        runOnUiThread(mResetMessageRunnable);
-    }
-
-    @Override
-    public void onMessageSent() {
-        // This callback can come in on any thread; put it on the main thread to avoid
-        // concurrency problems
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                /// M: @{
-                mWaitingForSendMessage = false;
-                /// @}
-                // If we already have messages in the list adapter, it
-                // will be auto-requerying; don't thrash another query in.
-                // TODO: relying on auto-requerying seems unreliable when priming an MMS into the
-                // outbox. Need to investigate.
-//                if (mMsgListAdapter.getCount() == 0) {
-                    if (LogTag.VERBOSE) {
-                        log("onMessageSent");
-                    }
-                    startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 0);
-//                }
-
-                // The thread ID could have changed if this is a new message that we just inserted
-                // into the database (and looked up or created a thread for it)
-                updateThreadIdIfRunning();
-            }
-        });
-    }
-
-    @Override
-    public void onMaxPendingMessagesReached() {
-        saveDraft(false);
-
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                Toast.makeText(ComposeMessageActivity.this, R.string.too_many_unsent_mms,
-                        Toast.LENGTH_LONG).show();
-                mSendingMessage = false;
-                updateSendButtonState();
-            }
-        });
-    }
-
-    @Override
-    public void onAttachmentError(final int error) {
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                handleAddAttachmentError(error, R.string.type_picture);
-                onMessageSent();        // now requery the list of messages
-            }
-        });
-    }
-
-    // We don't want to show the "call" option unless there is only one
-    // recipient and it's a phone number.
-    private boolean isRecipientCallable() {
-        ContactList recipients = getRecipients();
-        if (mIpCompose.isIpRecipientCallable(recipients.getNumbers())) {
-            return true;
-        }
-        return (recipients.size() == 1 && !recipients.containsEmail());
-    }
-    /// M: Code analyze 061, Add video call menu.
-    private void dialRecipient(Boolean isVideoCall) {
-        if (isRecipientCallable()) {
-            String number = getRecipients().get(0).getNumber();
-            number = mIpCompose.dialIpRecipient(number);
-            Intent dialIntent ;
-            if (isVideoCall) {
-                dialIntent = new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + number));
-                dialIntent.putExtra("com.android.phone.extra.video", true);
-            } else {
-                dialIntent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + number));
-            }
-            hideInputMethod();
-            startActivity(dialIntent);
-        }
-    }
-    /// @}
-
-    @Override
-    public boolean onPrepareOptionsMenu(Menu menu) {
-        super.onPrepareOptionsMenu(menu) ;
-
-        if (mNeedRequestPermissins) {
-            return false;
-        }
-
-        menu.clear();
-        /// M: google JB.MR1 patch, group mms
-        if (mIsSmsEnabled) {
-            if (getRecipients().size() > 1) {
-                menu.add(0, MENU_GROUP_PARTICIPANTS, 0, R.string.menu_group_participants);
-            }
-        }
-
-        if (!isRecipientsEditorVisible()) {
-            MmsLog.d(TAG, "onPrepareOptionsMenu recipient editor is not visible!");
-            if (getRecipients().size() == 1) {
-                Contact contact = getRecipients().get(0);
-                contact.reload(true);
-                if (contact.existsInDatabase()) {
-                    MmsLog.dpi(TAG,
-                            "onPrepareOptionsMenu contact is in database: " + contact.getUri());
-                    menu.add(0, MENU_SHOW_CONTACT, 0, R.string.menu_view_contact)
-                        .setIcon(R.drawable.ic_menu_recipients)
-                        .setTitle(R.string.menu_view_contact)
-                        .setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
-                    mQuickContact.assignContactUri(contact.getUri());
-                } else if (MessageUtils.canAddToContacts(contact)) {
-                    menu.add(0, MENU_CREATE_CONTACT, 0, R.string.menu_add_to_contacts)
-                        .setIcon(R.drawable.ic_menu_recipients)
-                        .setTitle(R.string.menu_add_to_contacts)
-                        .setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
-                    String number = contact.getNumber();
-                    if (Mms.isEmailAddress(number)) {
-                        mQuickContact.assignContactFromEmail(number, true);
-                    } else {
-                        mQuickContact.assignContactFromPhone(number, true);
-                    }
-                }
-
-            }
-
-            if (mIsSmsEnabled) {
-                menu.add(0, MENU_SELECT_MESSAGE, 0, R.string.select_message);
-            }
-
-        }
-
-        /// M: Code analyze 061, Add video call menu.
-        TelephonyManager telephony =
-            (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
-        if (telephony != null && telephony.isVoiceCapable() && isRecipientCallable()) {
-            MenuItem item = menu.add(0, MENU_CALL_RECIPIENT, 0, R.string.menu_call)
-                .setIcon(R.drawable.ic_menu_call)
-                .setTitle(R.string.menu_call);
-            if (!isRecipientsEditorVisible()) {
-                // If we're not composing a new message, show the call icon in the actionbar
-                item.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
-            }
-        /// @}
-        }
-
-        /// M: Code analyze 014, Add quick text. @{
-        if (mIsSmsEnabled) {
-            if (!mWorkingMessage.hasSlideshow()
-                    || (mSubjectTextEditor != null && mSubjectTextEditor.isFocused())) {
-                menu.add(0, MENU_ADD_QUICK_TEXT, 0, R.string.menu_insert_quick_text).setIcon(
-                    R.drawable.ic_menu_quick_text);
-            }
-        }
-        /// @}
-
-        /// M: Code analyze 015, Add text vcard. @{
-        if (mIsSmsEnabled) {
-            if (!mWorkingMessage.hasSlideshow()) {
-                menu.add(0, MENU_ADD_TEXT_VCARD, 0, R.string.menu_insert_text_vcard);
-            }
-        }
-        /// @}
-        if (mIsSmsEnabled) {
-            if (!isSubjectEditorVisible()) {
-                menu.add(0, MENU_ADD_SUBJECT, 0,
-                        R.string.add_subject).setIcon(R.drawable.ic_menu_edit);
-            }
-
-            menu.add(0, MENU_ADD_ATTACHMENT, 0, R.string.add_attachment)
-                    .setIcon(R.drawable.ic_menu_attachment)
-                .setTitle(R.string.add_attachment)
-                    .setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);    // add to actionbar
-        }
-        buildAddAddressToContactMenuItem(menu);
-
-        if (LogTag.DEBUG_DUMP) {
-            menu.add(0, MENU_DEBUG_DUMP, 0, R.string.menu_debug_dump);
-        }
-
-        int contactSize = 0;
-        if (mConversation.getRecipients() != null) {
-            contactSize = mConversation.getRecipients().size();
-        }
-
-        if (isRecipientsEditorVisible() && mIsSmsEnabled) {
-            menu.add(0, MENU_DISCARD, 0, R.string.discard).setIcon(
-                android.R.drawable.ic_menu_delete);
-        }
-
-        mOpComposeExt.onPrepareOptionsMenu(menu, mIsSmsEnabled,
-                isRecipientsEditorVisible(), contactSize, mConversation.getThreadId());
-
-        // add for ipmessage
-        mIpCompose.onIpPrepareOptionsMenu(mConversation.getIpConv(this), menu);
-
-        return true;
-    }
-
-    private void buildAddAddressToContactMenuItem(Menu menu) {
-        // Look for the first recipient we don't have a contact for and create a menu item to
-        // add the number to contacts.
-        for (Contact c : getRecipients()) {
-            /// M: Code analyze 043, Whether the address can be added to contacts app. @{
-            if (!c.existsInDatabase() && MessageUtils.canAddToContacts(c)) {
-            /// @}
-                Intent intent = ConversationList.createAddContactIntent(c.getNumber());
-                menu.add(0, MENU_ADD_ADDRESS_TO_CONTACTS, 0, R.string.menu_add_to_contacts)
-                    .setIcon(android.R.drawable.ic_menu_add)
-                    .setIntent(intent);
-                break;
-            }
-        }
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        if (mNeedRequestPermissins) {
-            return false;
-        }
-        // add for ipmessage
-        if (mIpCompose.onIpMsgOptionsItemSelected(
-                mConversation.getIpConv(this), item, mConversation.getThreadId())) {
-            return true;
-        }
-        if (mOpComposeExt.onOptionsItemSelected(item, mWorkingMessage.mOpWorkingMessageExt,
-                mInputMethodManager)) {
-            return true;
-        }
-
-        switch (item.getItemId()) {
-            case MENU_ADD_SUBJECT:
-                showSubjectEditor(true);
-                mWorkingMessage.setSubject("", true);
-                /// M: Code analyze 052, Show input keyboard.@{
-                mInputMethodManager.showSoftInput(
-                        getCurrentFocus(), InputMethodManager.SHOW_IMPLICIT);
-                /// @}
-                updateSendButtonState();
-                mSubjectTextEditor.requestFocus();
-                break;
-            case MENU_ADD_ATTACHMENT:
-                // Launch the add-attachment list dialog
-                /// M: Code analyze 051, Hide input keyboard.@{
-                hideInputMethod();
-                showAddAttachmentDialog(!mWorkingMessage.hasAttachedFiles());
-                MmsLog.d(TAG, "Attach: showAddAttachmentDialog(!hasAttachedFiles)");
-                break;
-            /// M: Code analyze 014, Add quick text. @{
-            case MENU_ADD_QUICK_TEXT:
-                showQuickTextDialog();
-                break;
-            /// @}
-            /// M: Code analyze 015, Add text vcard. @{
-            case MENU_ADD_TEXT_VCARD: {
-                Intent intent =
-                    new Intent("android.intent.action.contacts.list.PICKMULTICONTACTS");
-                intent.setType(Contacts.CONTENT_TYPE);
-                startActivityForResult(intent, REQUEST_CODE_TEXT_VCARD);
-                break;
-            }
-            /// @}
-            case MENU_DISCARD:
-                /// M: fix bug for ConversationList select all performance,
-                /// update selected threads array.@{
-                ConversationListAdapter.removeSelectedState(mSelectedThreadId);
-                /// @}
-                /// M: Fix bug of inputmethod not disappear
-                hideInputMethod();
-                mWorkingMessage.discard();
-                finish();
-                break;
-            case MENU_SEND:
-                if (isPreparedForSending()) {
-                    /// M: Code analyze 028, Before sending message,check the recipients count
-                    /// and add sub card selection dialog if multi sub cards exist.@{
-                    updateSendButtonState(false);
-                    checkRecipientsCount();
-                    mSendButtonCanResponse = true;
-                    /// @}
-                }
-                break;
-            case MENU_SEARCH:
-                onSearchRequested();
-                break;
-            case MENU_DELETE_THREAD:
-                /// M: Code analyze 012, add for multi-delete @{
-                Intent it = new Intent(this, MultiDeleteActivity.class);
-                it.putExtra("thread_id", mConversation.getThreadId());
-                startActivityForResult(it, REQUEST_CODE_FOR_MULTIDELETE);
-                /// @}
-                break;
-
-            case android.R.id.home:
-                mIsCheckObsolete = true;
-                mConversation.setDiscardThreadId(mConversation.getThreadId());
-            case MENU_CONVERSATION_LIST:
-                exitComposeMessageActivity(new Runnable() {
-                    @Override
-                    public void run() {
-                        goToConversationList();
-                    }
-                });
-                break;
-            case MENU_CALL_RECIPIENT:
-                dialRecipient(false);
-                break;
-            /// M: Code analyze 061, Add video call menu.
-            case MENU_CALL_RECIPIENT_BY_VT:
-                dialRecipient(true);
-                break;
-            /// @}
-            /// M: google jb.mr1 patch, group mms
-            case MENU_GROUP_PARTICIPANTS: {
-                Intent intent = new Intent(this, RecipientListActivity.class);
-                intent.putExtra(THREAD_ID, mConversation.getThreadId());
-                startActivityForResult(intent, REQUEST_CODE_GROUP_PARTICIPANTS);
-                break;
-            }
-            case MENU_VIEW_CONTACT: {
-                // View the contact for the first (and only) recipient.
-                ContactList list = getRecipients();
-                if (list.size() == 1 && list.get(0).existsInDatabase()) {
-                    Uri contactUri = list.get(0).getUri();
-                    Intent intent = new Intent(Intent.ACTION_VIEW, contactUri);
-                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
-                    startActivity(intent);
-                }
-                break;
-            }
-            case MENU_ADD_ADDRESS_TO_CONTACTS:
-                mAddContactIntent = item.getIntent();
-                startActivityForResult(mAddContactIntent, REQUEST_CODE_ADD_CONTACT);
-                break;
-            case MENU_PREFERENCES: {
-                Intent settingIntent = null;
-                settingIntent = new Intent(this, SettingListActivity.class);
-                startActivityIfNeeded(settingIntent, -1);
-                break;
-            }
-            case MENU_DEBUG_DUMP:
-                mWorkingMessage.dump();
-                Conversation.dump();
-                LogTag.dumpInternalTables(this);
-                break;
-            case MENU_ADD_TO_CONTACTS: {
-                mAddContactIntent =
-                    ConversationList.createAddContactIntent(getRecipients().get(0).getNumber());
-                startActivityForResult(mAddContactIntent, REQUEST_CODE_ADD_CONTACT);
-                break;
-            }
-            /// M: show contact detail or create new contact. @{
-            case MENU_SHOW_CONTACT:
-            case MENU_CREATE_CONTACT:
-                hideInputMethod();
-                mQuickContact.onClick(mActionBarCustomView);
-                break;
-            /// @}
-            case MENU_SELECT_MESSAGE:
-                Intent intentSelectMessage = new Intent(this, MultiDeleteActivity.class);
-                intentSelectMessage.putExtra("thread_id", mConversation.getThreadId());
-                startActivityForResult(intentSelectMessage, REQUEST_CODE_FOR_MULTIDELETE);
-                mIsStartMultiDeleteActivity = true;
-                break;
-            default:
-                MmsLog.d(TAG, "unkown option.");
-                break;
-        }
-
-        return true;
-    }
-
-    private void addAttachment(int type, boolean append) {
-        if (!MessageUtils.allowSafeDraft(this, MmsConfig.getDeviceStorageFullStatus(), true,
-                TOAST_TYPE_FOR_ATTACH)) {
-            return;
-        }
-        mWaitingAttachment = true;
-        // Calculate the size of the current slide if we're doing a replace so the
-        // slide size can optionally be used in computing how much room is left for an attachment.
-        int currentSlideSize = 0;
-        SlideshowModel slideShow = mWorkingMessage.getSlideshow();
-
-        /// M: Code analyze 025, Add video or audio attachment and check the attachment size.@{
-        if (append) {
-            mAppendAttachmentSign = true;
-        } else {
-            mAppendAttachmentSign = false;
-        }
-        /// @}
-
-        if (slideShow != null) {
-            if (!(append && type == AttachmentTypeSelectorAdapter.ADD_SOUND)) {
-                WorkingMessage.removeThumbnailsFromCache(slideShow);
-            }
-            SlideModel slide = slideShow.get(0);
-            currentSlideSize = slide == null ? 0 : slide.getSlideSize();
-        }
-        /// M: Code analyze 025, Add video or audio attachment and check the attachment size.@{
-        if ((type != AttachmentTypeSelectorAdapter.ADD_SLIDESHOW)
-                && (type != AttachmentTypeSelectorAdapter.ADD_VCARD)
-            && (!checkSlideCount(mAppendAttachmentSign))) {
-            return;
-        }
-        /// @}
-        switch (type) {
-            case AttachmentTypeSelectorAdapter.ADD_IMAGE:
-                MessageUtils.selectImage(this, REQUEST_CODE_ATTACH_IMAGE);
-                break;
-
-            case AttachmentTypeSelectorAdapter.TAKE_PICTURE: {
-                MessageUtils.capturePicture(this, REQUEST_CODE_TAKE_PICTURE);
-                break;
-            }
-
-            case AttachmentTypeSelectorAdapter.ADD_VIDEO:
-                MessageUtils.selectVideo(this, REQUEST_CODE_ATTACH_VIDEO);
-                break;
-
-            case AttachmentTypeSelectorAdapter.RECORD_VIDEO: {
-                /// M: Code analyze 025, Add video or audio attachment
-                /// and check the attachment size.@{
-                long sizeLimit = 0;
-                if (mAppendAttachmentSign) {
-                    sizeLimit = computeAttachmentSizeLimit(slideShow, 0);
-                } else {
-                    sizeLimit = computeAttachmentSizeLimit(slideShow, currentSlideSize);
-                }
-                /// M: fix bug ALPS01221817 & ALPS01231411, Should subtract mText Size
-                if ((slideShow == null || !mAppendAttachmentSign)
-                        && !TextUtils.isEmpty(mWorkingMessage.getText())) {
-                    int textSize = mWorkingMessage.getText().toString().getBytes().length;
-                    sizeLimit -= textSize;
-                }
-                if (sizeLimit > MIN_SIZE_FOR_CAPTURE_VIDEO) {
-                    MessageUtils.recordVideo(this, REQUEST_CODE_TAKE_VIDEO, sizeLimit);
-                } else {
-                    Toast.makeText(this,
-                            getString(R.string.space_not_enough),
-                            Toast.LENGTH_SHORT).show();
-                }
-                /// @}
-            }
-            break;
-
-            case AttachmentTypeSelectorAdapter.ADD_SOUND:
-                /// M: Code analyze 018, Add ringtone for sound attachment.  @{
-                //MessageUtils.selectAudio(this, REQUEST_CODE_ATTACH_SOUND);
-                AlertDialog.Builder alertBuilder = new AlertDialog.Builder(this);
-                alertBuilder.setTitle(getString(R.string.add_music));
-                String[] items = new String[2];
-                items[0] = getString(R.string.attach_ringtone);
-                items[1] = getString(R.string.attach_sound);
-                alertBuilder.setItems(items, new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int which) {
-                        switch (which) {
-                            case 0:
-                                MessageUtils.selectRingtone(ComposeMessageActivity.this,
-                                        REQUEST_CODE_ATTACH_RINGTONE);
-                                break;
-                            case 1:
-                                if (!Environment.getExternalStorageState()
-                                        .equals(Environment.MEDIA_MOUNTED)) {
-                                    Toast.makeText(ComposeMessageActivity.this,
-                                                    getString(R.string.Insert_sdcard),
-                                                    Toast.LENGTH_LONG).show();
-                                    return;
-                                }
-                                MessageUtils.selectAudio(ComposeMessageActivity.this,
-                                        REQUEST_CODE_ATTACH_SOUND);
-                                break;
-                            default:
-                                break;
-                        }
-                    }
-                });
-                alertBuilder.create().show();
-               /// @}
-                break;
-
-            case AttachmentTypeSelectorAdapter.RECORD_SOUND:
-                /// M: Code analyze 025, Add video or audio attachment
-                /// and check the attachment size.@{
-                long sizeLimit = 0;
-                if (mAppendAttachmentSign) {
-                    sizeLimit = computeAttachmentSizeLimit(slideShow, 0);
-                } else {
-                    sizeLimit = computeAttachmentSizeLimit(slideShow, currentSlideSize);
-                }
-                /// M: fix bug ALPS01221817 & ALPS01231411, Should subtract mText Size
-                if ((slideShow == null || !mAppendAttachmentSign)
-                        && !TextUtils.isEmpty(mWorkingMessage.getText())) {
-                    int textSize = mWorkingMessage.getText().toString().getBytes().length;
-                    sizeLimit -= textSize;
-                }
-                if (sizeLimit > ComposeMessageActivity.MIN_SIZE_FOR_RECORD_AUDIO) {
-                    MessageUtils.recordSound(this, REQUEST_CODE_RECORD_SOUND, sizeLimit);
-                } else {
-                    Toast.makeText(this, getString(R.string.space_not_enough_for_audio),
-                            Toast.LENGTH_SHORT).show();
-                }
-                /// @}
-                break;
-
-            case AttachmentTypeSelectorAdapter.ADD_SLIDESHOW:
-                editSlideshow();
-                break;
-            /// M: Code analyze 019, Add vcard attachment.@{
-            case AttachmentTypeSelectorAdapter.ADD_VCARD:
-                Intent intent =
-                    new Intent("android.intent.action.contacts.list.PICKMULTICONTACTS");
-                intent.setType(Contacts.CONTENT_TYPE);
-                startActivityForResult(intent, REQUEST_CODE_ATTACH_VCARD);
-                break;
-            /// @}
-            /// M: Code analyze 020, Add vcalendar attachment.  @{
-            case AttachmentTypeSelectorAdapter.ADD_VCALENDAR:
-                Intent i = new Intent("android.intent.action.CALENDARCHOICE");
-                i.setType("text/x-vcalendar");
-                i.putExtra("request_type", 0);
-                startActivityForResult(i, REQUEST_CODE_ATTACH_VCALENDAR);
-                break;
-            /// @}
-            default:
-                break;
-        }
-    }
-
-    public static long computeAttachmentSizeLimit(SlideshowModel slideShow, int currentSlideSize) {
-        // Computer attachment size limit. Subtract 1K for some text.
-        /// M: Code analyze 003,  Set or get max mms size.
-        long sizeLimit = MmsConfig.getUserSetMmsSizeLimit(true) - SlideshowModel.SLIDESHOW_SLOP;
-        /// @}
-        if (slideShow != null) {
-            sizeLimit -= slideShow.getCurrentSlideshowSize();
-
-            // We're about to ask the camera to capture some video (or the sound recorder
-            // to record some audio) which will eventually replace the content on the current
-            // slide. Since the current slide already has some content (which was subtracted
-            // out just above) and that content is going to get replaced, can add the size of the
-            // current slide into the available space used to capture a video (or audio).
-            sizeLimit += currentSlideSize;
-        } else {
-            sizeLimit -= MmsSizeUtils.getSlideshowHeaderSize();
-        }
-        return sizeLimit;
-    }
-
-    private void showAddAttachmentDialog(final boolean append) {
-        /// M: Code analyze 009,Show attachment dialog . Create a new class to @{
-        mSoloAlertDialog.show(append);
-        /// @}
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-            log("requestCode=" + requestCode + ", resultCode=" + resultCode + ", data=" + data);
-        if (!isAllPermissionGranted() || mWorkingMessage == null) {
-            return;
-        }
-        mWaitingForSubActivity = false;          // We're back!
-
-        /// M : FIX CR : ALPS01795853 @{
-        mWorkingMessage.setTruntoChooseAttach(false);
-        ///@}
-
-        // M: fix bug ALPS00354728
-        boolean mNeedAppendAttachment = true;
-
-        MmsLog.d(TAG, "onActivityResult mAppendAttachmentSign : " + mAppendAttachmentSign);
-        if (mAppendAttachmentSign) {
-            mNeedAppendAttachment = true;
-        } else if (!mAppendAttachmentSign) {
-            mNeedAppendAttachment = false;
-        }
-
-        /// @}
-        if (mWorkingMessage.isFakeMmsForDraft()) {
-            // We no longer have to fake the fact we're an Mms. At this point we are or we aren't,
-            // based on attachments and other Mms attrs.
-            mWorkingMessage.removeFakeMmsForDraft();
-        }
-
-        // add for ipmessage
-        mIpCompose.onIpMsgActivityResult(this, requestCode, resultCode, data);
-
-         /// M: Code analyze 012, add for multi-delete @{
-         if (requestCode == REQUEST_CODE_FOR_MULTIDELETE && resultCode == RESULT_OK) {
-             ContactList recipients = mConversation.getRecipients();
-             mConversation = Conversation.upDateThread(getApplicationContext(),
-                     mConversation.getThreadId(), false);
-             mIsStartMultiDeleteActivity = false;
-             if (mConversation.getMessageCount() <= 0 || mConversation.getThreadId() <= 0) {
-                 mMsgListAdapter.changeCursor(null);
-                 if (needSaveDraft() && (recipients != null)) {
-                     makeDraftEditable(recipients);
-                 } else {
-                     mWorkingMessage.discard();
-
-                     /// M: Rebuild the contacts cache now that a thread and its associated unique
-                     /// M: recipients have been deleted.
-                     Contact.init(getApplicationContext());
-
-                     /// M: Make sure the conversation cache reflects the threads in the DB.
-                     Conversation.init(getApplicationContext());
-                     /// M: fix bug for ConversationList select all performance,
-                     /// update selected threads array.@{
-                     ConversationListAdapter.removeSelectedState(mSelectedThreadId);
-                     /// @}
-                     finish();
-                 }
-             }
-            return;
-        }
-        /// @}
-        if (requestCode == REQUEST_CODE_PICK && MmsConfig.isSmsEnabled(this)) {
-            mWorkingMessage.asyncDeleteDraftSmsMessage(mConversation);
-        }
-
-        /// M: fix bug ALPS00490684, update group mms state from GROUP_PARTICIPANTS to setting @{
-        if (requestCode == REQUEST_CODE_GROUP_PARTICIPANTS) {
-            boolean multiRecipients = mConversation.getRecipients().size() > 1;
-            boolean isGroupMms = MmsPreferenceActivity.getIsGroupMmsEnabled(
-                    ComposeMessageActivity.this) && multiRecipients;
-            mMsgListAdapter.setIsGroupConversation(isGroupMms);
-            mWorkingMessage.setHasMultipleRecipients(multiRecipients, true);
-            mWorkingMessage.deleteGruoupMmsDraft();
-        }
-        /// @}
-
-        if (requestCode == REQUEST_CODE_ADD_CONTACT) {
-            // The user might have added a new contact. When we tell contacts to add a contact
-            // and tap "Done", we're not returned to Messaging. If we back out to return to
-            // messaging after adding a contact, the resultCode is RESULT_CANCELED. Therefore,
-            // assume a contact was added and get the contact and force our cached contact to
-            // get reloaded with the new info (such as contact name). After the
-            // contact is reloaded, the function onUpdate() in this file will get called
-            // and it will update the title bar, etc.
-            if (!isRecipientsEditorVisible()) {
-                if (mAddContactIntent != null) {
-                    String address =
-                        mAddContactIntent.getStringExtra(ContactsContract.Intents.Insert.EMAIL);
-                    if (address == null) {
-                        address = mAddContactIntent.getStringExtra(
-                                ContactsContract.Intents.Insert.PHONE);
-                    }
-                    if (address != null) {
-                        Contact contact = Contact.get(address, false);
-                        if (contact != null) {
-                            contact.reload();
-                        }
-                    }
-                }
-            }
-        }
-
-        if (resultCode != RESULT_OK && requestCode == REQUEST_CODE_CREATE_SLIDESHOW
-                && mWorkingMessage != null) {
-            mWorkingMessage.setForceUpdateThreadId(true);
-        }
-
-        if (resultCode != RESULT_OK) {
-            if (LogTag.VERBOSE) log("bail due to resultCode=" + resultCode);
-            mWaitingAttachment = false;
-            return;
-        }
-
-        /// M: disable when non-default sms
-        if (!MmsConfig.isSmsEnabled(this) && requestCode != REQUEST_CODE_ECM_EXIT_DIALOG
-                && requestCode != REQUEST_CODE_MULTI_SAVE
-                && requestCode != REQUEST_CODE_CREATE_SLIDESHOW) {
-            Toast.makeText(ComposeMessageActivity.this,
-                    R.string.compose_disabled_toast, Toast.LENGTH_SHORT).show();
-            return;
-        }
-
-        WorkingMessage newMessage = null;
-        IOpWorkingMessageExt newOpWorkingMessageExt = null;
-        if (requestCode == REQUEST_CODE_CREATE_SLIDESHOW && data != null) {
-            newMessage = WorkingMessage.load(this, data.getData());
-            if (newMessage != null) {
-                newOpWorkingMessageExt = newMessage.mOpWorkingMessageExt;
-            }
-        }
-
-        if (mOpComposeExt.onActivityResult(requestCode, data, newOpWorkingMessageExt,
-                mWorkingMessage.mOpWorkingMessageExt)) {
-            //return;
-        }
-
-        switch (requestCode) {
-            case REQUEST_CODE_CREATE_SLIDESHOW:
-                if (data != null) {
-                    mWaitingAttachment = false;
-                    int slideSize = 0;
-                    if (newMessage != null && newMessage.getSlideshow() != null) {
-                        slideSize = newMessage.getSlideshow().size();
-                        MmsLog.i(TAG, "REQUEST_CODE_CREATE_SLIDESHOW" +
-                                    " newWorkingMessage Slideshow num = " + slideSize);
-                    } else {
-                        MmsLog.i(TAG, "REQUEST_CODE_CREATE_SLIDESHOW" +
-                                " newWorkingMessage Slideshow = null or newMessage = null");
-                    }
-
-                    if (newMessage != null) {
-                        /// M: Code analyze 053, If exist vcard attachment, move it before
-                        /// creating a new slideshow.Because the Workingmessage object  has been
-                        /// changed, reset subject and tell the convertion to user.@{
-                        /// M: add for vcard, vcard is exclusive with other attach, so remove them
-                        if (newMessage.hasMediaAttachments()) {
-                            newMessage.removeAllFileAttaches();
-                        }
-                        boolean isMmsBefore = mWorkingMessage.requiresMms();
-                        newMessage.setSubject(mWorkingMessage.getSubject(), false);
-
-                        /// M: fix bug ALPS01265824, need remove FileAttachment
-                        /// when text + attachmentSize > limit
-                        if (newMessage.isRemoveFileAttachment()) {
-                            int[] params = null;
-                            int encodingType = SmsMessage.ENCODING_UNKNOWN;
-                            encodingType = mOpComposeExt.getSmsEncodingType(encodingType,
-                                    ComposeMessageActivity.this);
-                            params = SmsMessage.calculateLength(newMessage.getText(),
-                                    false, encodingType);
-                            final int msgCount = params[0];
-                            newMessage.setLengthRequiresMms(
-                                    msgCount >= MmsConfig.getSmsToMmsTextThreshold(), false);
-
-                            newMessage.removeAllFileAttaches();
-                            newMessage.correctAttachmentState();
-                        }
-
-                        mWorkingMessage = newMessage;
-                        updateThreadIdIfRunning();
-                        drawTopPanel(isSubjectEditorVisible());
-                        updateSendButtonState();
-                        invalidateOptionsMenu();
-
-                        boolean isMmsAfter = mWorkingMessage.requiresMms();
-                        if (!isMmsAfter) {
-                            mWorkingMessage.asyncDeleteDraftMmsMessage(
-                                    newMessage.getConversation().getThreadId());
-                            DraftCache.getInstance().setDraftState(
-                                    newMessage.getConversation().getThreadId(), false);
-                        }
-                        if (isMmsAfter && !isMmsBefore) {
-                            toastConvertInfo(true);
-                        } else if (!isMmsAfter && isMmsBefore) {
-                            toastConvertInfo(false);
-                        } else if (!isMmsAfter && !isMmsBefore) {
-                            mWorkingMessage.setForceUpdateThreadId(true);
-                        }
-                        /// @}
-
-                        if (null != mRecipientsEditor) {
-                            if (mWorkingMessage.hasSlideshow()) {
-                                mRecipientsEditor.setImeActionLabel(
-                                        getString(MessageResource.string.ime_action_done),
-                                        EditorInfo.IME_ACTION_DONE);
-                                mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_DONE);
-                            } else {
-                                mRecipientsEditor.setImeActionLabel(
-                                        getString(MessageResource.string.ime_action_next),
-                                        EditorInfo.IME_ACTION_NEXT);
-                                mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-                            }
-                        }
-                    }
-                }
-                // M: fix bug ALPS00354728
-                MmsLog.i(TAG, "mNeedAppendAttachment = " + mNeedAppendAttachment);
-
-                break;
-
-            case REQUEST_CODE_TAKE_PICTURE: {
-                // create a file based uri and pass to addImage(). We want to read the JPEG
-                // data directly from file (using UriImage) instead of decoding it into a Bitmap,
-                // which takes up too much memory and could easily lead to OOM.
-
-                /// M: fix bug ALPS00408589
-                String scrappath = TempFileProvider.getScrapPath(this);
-                if (scrappath != null) {
-                    File file = new File(scrappath);
-                    Uri uri = Uri.fromFile(file);
-
-                    // Remove the old captured picture's thumbnail from the cache
-                    MmsApp.getApplication().getThumbnailManager().removeThumbnail(uri);
-
-                    addImageAsync(uri, mNeedAppendAttachment);
-                }
-                break;
-            }
-
-            case REQUEST_CODE_ATTACH_IMAGE: {
-                if (data != null) {
-                    addImageAsync(data.getData(), mNeedAppendAttachment);
-                }
-                break;
-            }
-            case REQUEST_CODE_TAKE_VIDEO:
-                Uri videoUri = TempFileProvider.renameScrapVideoFile(System.currentTimeMillis()
-                        + ".3gp", null, this);
-                // Remove the old captured video's thumbnail from the cache
-                MmsApp.getApplication().getThumbnailManager().removeThumbnail(videoUri);
-
-                addVideoAsync(videoUri, mNeedAppendAttachment);      // can handle null videoUri
-                break;
-
-            case REQUEST_CODE_ATTACH_VIDEO:
-                if (data != null) {
-                    addVideoAsync(data.getData(), mNeedAppendAttachment);
-                }
-                break;
-
-            case REQUEST_CODE_ATTACH_SOUND: {
-                Uri uri = (Uri) data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-                if (Settings.System.getUriFor(Settings.System.RINGTONE).equals(uri)) {
-                    break;
-                }
-                addAudioAsync(data.getData(), mNeedAppendAttachment);
-                break;
-            }
-
-            case REQUEST_CODE_RECORD_SOUND:
-                if (data != null) {
-                    addAudioAsync(data.getData(), mNeedAppendAttachment);
-                }
-                break;
-
-            /// M: @{
-            case REQUEST_CODE_ATTACH_RINGTONE:
-                Uri uri = (Uri) data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-                if (Settings.System.getUriFor(Settings.System.RINGTONE).equals(uri)) {
-                    break;
-                }
-                addAudioAsync(uri, mNeedAppendAttachment);
-                break;
-            /// @}
-
-            case REQUEST_CODE_ECM_EXIT_DIALOG:
-                boolean outOfEmergencyMode = data.getBooleanExtra(EXIT_ECM_RESULT, false);
-                if (outOfEmergencyMode) {
-                    sendMessage(false);
-                }
-                break;
-
-            case REQUEST_CODE_PICK:
-                /// M: Code analyze 013, Get contacts from Contact app . @{
-                if (data != null) {
-                    if (mRecipientsEditor != null) {
-                        processPickResult(data);
-                    } else {
-                        mIsRecipientHasIntentNotHandle = true;
-                        mIntent = data;
-                    }
-                }
-                misPickContatct = false;
-                return;
-                /// @}
-            /// M: Code analyze 015, Add text vcard. @{
-            case REQUEST_CODE_TEXT_VCARD:
-                if (data != null) {
-                    long[] contactIds =
-                        data.getLongArrayExtra("com.mediatek.contacts.list.pickcontactsresult");
-                    addTextVCardAsync(contactIds);
-                } else {
-                    MmsLog.wpi(TAG, "data should not be null," + "requestCode=" + requestCode
-                            + ", resultCode=" + resultCode + ", data=" + data);
-                }
-                misPickContatct = false;
-                return;
-            /// @}
-            /// M: Code analyze 019, Add vcard attachment.@{
-            case REQUEST_CODE_ATTACH_VCARD:
-                asyncAttachVCardByContactsId(data);
-                misPickContatct = false;
-                isInitRecipientsEditor = false;
-                return;
-            /// @}
-            /// M: Code analyze 020, Add vcalendar attachment.  @{
-            case REQUEST_CODE_ATTACH_VCALENDAR:
-                asyncAttachVCalendar(data.getData());
-                misPickContatct = false;
-                isInitRecipientsEditor = false;
-                return;
-            /// @}
-            /// M: Code analyze 021, Copy all valid parts of the attachment(pdu) to SD card.
-            /// This opeartor will be removed to a separate activity.  @{
-            case REQUEST_CODE_MULTI_SAVE:
-                boolean succeeded = false;
-                if (data != null && data.hasExtra("multi_save_result")) {
-                    succeeded = data.getBooleanExtra("multi_save_result", false);
-                    int resId =
-                        succeeded ? R.string.copy_to_sdcard_success : R.string.copy_to_sdcard_fail;
-                    Toast.makeText(ComposeMessageActivity.this, resId, Toast.LENGTH_SHORT).show();
-                }
-                return;
-            /// @}
-            default:
-                if (LogTag.VERBOSE) log("bail due to unknown requestCode=" + requestCode);
-                break;
-        }
-        /// M: @{
-        isInitRecipientsEditor = false; /// why add this variable here???
-    }
-
-    /**
-     * Handle duplicate selected contacts and put new selected contact to list.
-     * @param mSelectContactsNumbers the result of selected contacts number.
-     * @param editor the current recipientEditor.
-     * @param contactsId the result of selected contacts id.
-     * @param list the new select contacts.
-     * @param allList all contacts.
-     * @return whether has duplicate recipients.
-     */
-    private boolean processDuplicatePickResult(String mSelectContactsNumbers,
-            RecipientsEditor editor, long[] contactsId,
-            ContactList list, ContactList allList) {
-        boolean isDuplicate = false;
-        try {
-            /// M: @{
-            //list = ContactList.blockingGetByUris(uris);
-            /// M: add for ip message
-            /// M: To append recipients into RecipientsEditor, no need to load avatar,
-            /// because Editor will query and notify avatar info to MMS later. If append
-            /// 100 recipients, will saving almost 3s.
-            Contact.sNeedLoadAvatar = false;
-            ContactList selected = TextUtils.isEmpty(mSelectContactsNumbers) ?
-                 ContactList.blockingGetByIds(contactsId) :
-                     ContactList.getByNumbers(mSelectContactsNumbers, false, false);
-            Contact.sNeedLoadAvatar = true;
-            final List<String> numbers = editor.getNumbers();
-
-            /** M: better merge strategy.
-             * Avoid the use of mRecipientsEditor.contrcutionContactsFromInput()
-             * all Contacts in selected list should be added.
-             * */
-            /// M: remove duplicated numbers and format
-            List<String> selectedNumbers = Arrays.asList(selected.getProtosomaitcNumbers());
-            if (selectedNumbers.size() < selected.size()) {
-                isDuplicate = true;
-            }
-            String selectedNumberAfterFormat = "";
-            if (numbers.size() > 0) {
-                for (String number : numbers) {
-                    if (!number.trim().equals("")) {
-                        Contact c = Contact.get(number, false);
-                        allList.add(c);
-                    }
-                }
-                /// M: format existing numbers(remove "-" and " ")
-                List<String> formatedNumbers = Arrays.asList(allList.getNumbers(true));
-                for (String selectedNumber : selectedNumbers) {
-                    selectedNumberAfterFormat = MessageUtils.parseMmsAddress(selectedNumber);
-                    if (selectedNumberAfterFormat != null
-                            && !selectedNumberAfterFormat.trim().equals("")) {
-                        if (!formatedNumbers.contains(selectedNumberAfterFormat)) {
-                            Contact c = Contact.get(selectedNumber, false);
-                            list.add(c);
-                        } else {
-                            //M: ALPS01831885, fix contact cache error.
-                            Contact c = Contact.get(selectedNumber, false);
-                            c.removeFromCache();
-                            isDuplicate = true;
-                        }
-                    }
-                }
-                allList.addAll(list);
-            } else {
-                for (String selectedNumber : selectedNumbers) {
-                    selectedNumberAfterFormat = MessageUtils.parseMmsAddress(selectedNumber);
-                    if (selectedNumberAfterFormat != null && !selectedNumber.trim().equals("")) {
-                        Contact c = Contact.get(selectedNumber, false);
-                        list.add(c);
-                    }
-                }
-                allList.addAll(list);
-            }
-            /// @}
-        } finally {
-            Message msg = mUiHandler.obtainMessage();
-            msg.what = MSG_DISMISS_CONTACT_PICK_DIALOG;
-            mUiHandler.sendMessage(msg);
-            return isDuplicate;
-        }
-    }
-
-    private ProgressDialog mContactPickDialog;
-
-    private Runnable mContactPickRunnable = new Runnable() {
-        public void run() {
-            if (mContactPickDialog != null) {
-                mContactPickDialog.show();
-            }
-        }
-    };
-
-    public String getNumbersFromIntent(Intent intent) {
-        if (intent == null) {
-            return null;
-        }
-        boolean usingColon = intent.getBooleanExtra(USING_COLON, false);
-        String selectContactsNumbers = intent.getStringExtra(SELECTION_CONTACT_RESULT);
-        if (usingColon) {
-            if (selectContactsNumbers == null || selectContactsNumbers.length() < 1) {
-                return null;
-            }
-            String[] numberArray = selectContactsNumbers.split(NUMBERS_SEPARATOR_COLON);
-            String numberTempl = "";
-            int simcolonIndex = -1;
-            int colonIndex = -1;
-            int separatorIndex = -1;
-            for (int index = 0; index < numberArray.length; index++) {
-                numberTempl = numberArray[index];
-                simcolonIndex = numberTempl.indexOf(NUMBERS_SEPARATOR_SIMCOLON);
-                colonIndex = numberTempl.indexOf(NUMBERS_SEPARATOR_COMMA);
-                if (simcolonIndex > 0) {
-                    if (colonIndex < 0) {
-                        separatorIndex = simcolonIndex;
-                    } else if (simcolonIndex < colonIndex) {
-                        separatorIndex = simcolonIndex;
-                    } else if (colonIndex > 0) {
-                        separatorIndex = colonIndex;
-                    }
-                } else {
-                    if (colonIndex > 0) {
-                        separatorIndex = colonIndex;
-                    }
-                }
-                if (separatorIndex > 0) {
-                    numberArray[index] = numberTempl.substring(0, separatorIndex);
-                }
-                simcolonIndex = -1;
-                colonIndex = -1;
-                separatorIndex = -1;
-            }
-            return TextUtils.join(NUMBERS_SEPARATOR_SIMCOLON, numberArray);
-        }
-        return selectContactsNumbers;
-    }
-
-    private void processPickResult(final Intent data) {
-        // The EXTRA_PHONE_URIS stores the phone's urls that were selected by user in the
-        // multiple phone picker.
-        /// M: Code analyze 013, Get contacts from Contact app . @{
-        /*final Parcelable[] uris =
-            data.getParcelableArrayExtra(Intents.EXTRA_PHONE_URIS);
-
-        final int recipientCount = uris != null ? uris.length : 0;*/
-
-        final long[] contactsId =
-            data.getLongArrayExtra("com.mediatek.contacts.list.pickdataresult");
-        final String mSelectContactsNumbers = getNumbersFromIntent(data);
-        MmsLog.dpi(TAG,
-                "processPickResult, data = " + data.toString() + ", contactsId = "
-                        + Arrays.toString(contactsId) + ", mSelectContactsNumbers = "
-                        + mSelectContactsNumbers);
-        if ((contactsId == null || contactsId.length <= 0)
-                && TextUtils.isEmpty(mSelectContactsNumbers)) {
-            return;
-        }
-        int recipientCount = mRecipientsEditor.getRecipientCount();
-        if (!TextUtils.isEmpty(mSelectContactsNumbers)) {
-            recipientCount += mSelectContactsNumbers.split(";").length;
-        } else {
-            recipientCount += contactsId.length;
-        }
-        /// @}
-        /// M: Code analyze 056,Now,the sms recipient limit is different from mms.
-        /// We can set limit for sms or mms individually. @{
-        final int recipientLimit = MmsConfig.getSmsRecipientLimit();
-        /// @}
-        if (recipientLimit != Integer.MAX_VALUE && recipientCount > recipientLimit) {
-            new AlertDialog.Builder(this)
-                    .setTitle(R.string.pick_too_many_recipients)
-                    .setIconAttribute(android.R.attr.alertDialogIcon)
-                    .setMessage(getString(R.string.too_many_recipients,
-                            recipientCount, recipientLimit))
-                    .setPositiveButton(android.R.string.ok, null)
-                    .create().show();
-            return;
-        }
-
-        /// M: @{
-//        final Handler handler = new Handler();
-        if (mContactPickDialog == null) {
-            mContactPickDialog = new ProgressDialog(this);
-            mContactPickDialog.setMessage(getText(R.string.adding_recipients));
-            mContactPickDialog.setIndeterminate(true);
-            mContactPickDialog.setCancelable(false);
-        }
-
-        // Only show the progress dialog if we can not finish off parsing the return data in 1s,
-        // otherwise the dialog could flicker.
-        mUiHandler.postDelayed(mContactPickRunnable, 500);
-        new Thread(new Runnable() {
-            public void run() {
-                final ContactList list = new ContactList();
-                final ContactList allList = new ContactList();
-                final boolean isDuplicate = processDuplicatePickResult(mSelectContactsNumbers,
-                        mRecipientsEditor, contactsId, list, allList);
-                // TODO: there is already code to update the contact header widget and recipients
-                // editor if the contacts change. we can re-use that code.
-                final Runnable populateWorker = new Runnable() {
-                    public void run() {
-                        mConversation.setRecipients(allList);
-                        if (list.size() > 0) {
-                            // Fix ALPS01594370, if has attach, recipient eidtor always on focus.
-                            // And adding a recipient bebind the editable recipient is not allowed.
-                            if ((mBottomPanel == null)
-                                    || (mBottomPanel.getVisibility() != View.VISIBLE)) {
-                                mRecipientsEditor.clearFocus();
-                            }
-                            mIsPopulatingRecipients = true;
-                            mRecipientsEditor.populate(list);
-                        }
-                        if (mRecipientsEditor != null && isRecipientsEditorVisible()) {
-                            mRecipientsEditor.requestFocus();
-                        }
-                        if (isDuplicate) {
-                            Toast.makeText(ComposeMessageActivity.this,
-                                    R.string.add_duplicate_recipients, Toast.LENGTH_SHORT).show();
-                        }
-                    }
-                };
-                mUiHandler.post(populateWorker);
-            }
-        }, "ComoseMessageActivity.processPickResult").start();
-    }
-
-    private boolean mIsPopulatingRecipients = false;
-    /// M: Code analyze 062, Resize image. @{
-    private final ResizeImageResultCallback mResizeImageCallback =
-        new ResizeImageResultCallback() {
-        // TODO: make this produce a Uri, that's what we want anyway
-        @Override
-        public void onResizeResult(PduPart part, boolean append) {
-            mNeedSaveAsMms = false;
-            if (part == null) {
-                MmsLog.d(TAG, "onResizeResult part == null");
-                notifyCompressingDone();
-                handleAddAttachmentError(WorkingMessage.UNKNOWN_ERROR, R.string.type_picture);
-                return;
-            }
-
-            mWorkingMessage.setResizeImage(true);
-            Context context = ComposeMessageActivity.this;
-            PduPersister persister = PduPersister.getPduPersister(context);
-            int result;
-            if (mWorkingMessage.isDiscarded()) {
-                notifyCompressingDone();
-                return;
-            }
-            Uri messageUri = mWorkingMessage.getMessageUri();
-            if (null == messageUri) {
-                try {
-                    messageUri = mWorkingMessage.saveAsMms(true);
-                } catch (IllegalStateException e) {
-                    notifyCompressingDone();
-                    MmsLog.e(TAG, e.getMessage() + ", go to ConversationList!");
-                    goToConversationList();
-                }
-            }
-            if (messageUri == null) {
-                MmsLog.d(TAG, "onResizeResult messageUri == null");
-                result = WorkingMessage.UNKNOWN_ERROR;
-            } else {
-                try {
-                    /// M: it is modifying the mms draft, maybe
-                    /// interlaced with WorkingMessage.saveDraft!
-                    Uri dataUri;
-                    int mode;
-                    synchronized (WorkingMessage.sDraftMmsLock) {
-                        dataUri = persister.persistPart(part,
-                                ContentUris.parseId(messageUri), null);
-                        mode = mWorkingMessage.sCreationMode;
-                        mWorkingMessage.sCreationMode = 0;
-                        result = mWorkingMessage.setAttachment(WorkingMessage.IMAGE,
-                                dataUri, append);
-                        /// M: fix bug ALPS00914391, remove redundancy part
-                        if (result != mWorkingMessage.OK
-                                && mWorkingMessage.getSlideshow() != null) {
-                            try {
-                                PduBody pb = mWorkingMessage.getSlideshow().toPduBody();
-                                MessageUtils.updatePartsIfNeeded(mWorkingMessage.getSlideshow(),
-                                        PduPersister.getPduPersister(context),
-                                        messageUri, pb, null);
-                                if (pb != null) {
-                                    mWorkingMessage.getSlideshow().sync(pb);
-                                }
-                            }  catch (MmsException e) {
-                                Log.e(TAG, "Cannot update the message: " + messageUri, e);
-                            }
-                        }
-
-                    }
-                    mWorkingMessage.sCreationMode = mode;
-                    if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                        log("ResizeImageResultCallback: dataUri=" + dataUri);
-                    }
-                } catch (MmsException e) {
-                    result = WorkingMessage.UNKNOWN_ERROR;
-                }
-            }
-
-            /// M:added for bug ALPS00317889 begin,for not pop up alertDialog if
-            // attachment size is reaching limited size
-            if (!mShowDialogForMultiImage) {
-                handleAddAttachmentError(result, R.string.type_picture);
-            }
-            if (result == WorkingMessage.MESSAGE_SIZE_EXCEEDED) {
-                mShowDialogForMultiImage = true;
-            }
-            /// M:added for bug ALPS00317889 end
-            if (result == WorkingMessage.OK) {
-                try {
-                    if (mWorkingMessage.saveAsMms(false) != null) {
-                        mHasDiscardWorkingMessage = true;
-                    }
-                } catch (IllegalStateException e) {
-                    MmsLog.e(TAG, e.getMessage() + ", go to ConversationList!");
-                    notifyCompressingDone();
-                    goToConversationList();
-                }
-                mNeedSaveDraftAfterStop = false;
-            }
-            notifyCompressingDone();
-            mWaitingAttachment = false;
-        }
-    };
-    /// @}
-
-    private void handleAddAttachmentError(final int error, final int mediaTypeStringId) {
-        if (error == WorkingMessage.OK) {
-            return;
-        }
-        Log.d(TAG, "handleAddAttachmentError: " + error);
-
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                int titleId;
-                int messageId;
-                mWorkingMessage.removeFakeMmsForDraft();
-                updateSendButtonState();
-
-                MmsLog.d(TAG, "Error Code:" + error);
-                switch(error) {
-                /// M: Code analyze 063, For new feature ALPS00233419, Creation mode . @{
-                case WorkingMessage.WARNING_TYPE:
-                /// @}
-                case WorkingMessage.UNKNOWN_ERROR:
-                    Resources res = getResources();
-                    String mediaType = res.getString(mediaTypeStringId);
-                    String message = res.getString(R.string.error_add_attachment, mediaType);
-                    Toast.makeText(ComposeMessageActivity.this,
-                            message, Toast.LENGTH_SHORT).show();
-                    return;
-                case WorkingMessage.UNSUPPORTED_TYPE:
-                /// M: Code analyze 063, For new feature ALPS00233419, Creation mode . @{
-                case WorkingMessage.RESTRICTED_TYPE:
-                /// @}
-                    titleId = R.string.unsupport_media_type;
-                    messageId = R.string.select_different_media_type;
-                    break;
-                case WorkingMessage.MESSAGE_SIZE_EXCEEDED:
-                    titleId = R.string.exceed_message_size_limitation;
-                    messageId = R.string.failed_to_add_image;
-                    break;
-                case WorkingMessage.IMAGE_TOO_LARGE:
-                    titleId = R.string.failed_to_resize_image;
-                    messageId = R.string.resize_image_error_information;
-                    break;
-                 /// M: Code analyze 063, For new feature ALPS00233419, Creation mode . @{
-                case WorkingMessage.RESTRICTED_RESOLUTION:
-                    titleId = R.string.select_different_media_type;
-                    messageId = R.string.image_resolution_too_large;
-                    break;
-                /// @}
-                default:
-                    throw new IllegalArgumentException("unknown error " + error);
-                }
-                if (mErrorDialogShown) {
-                    MessageUtils.showErrorDialog(ComposeMessageActivity.this, titleId, messageId,
-                            0, 0);
-                    mErrorDialogShown = false;
-                }
-            }
-        });
-    }
-
-    /// M: Code analyze 064, Add image attachment. @{
-    private void addImageAsync(final Uri uri, final boolean append) {
-        mCompressingImage = true;
-        getAsyncDialog().runAsync(new Runnable() {
-            @Override
-            public void run() {
-                mShowDialogForMultiImage = false; /// M:added for bug ALPS00317889
-                addImage(uri, append);
-                if (mNeedSaveAsMms) {
-                    saveAsMms(false);
-                } else if (mNeedSaveDraftAfterStop) {
-                    if ((!isRecipientsEditorVisible()) ||
-                            (mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms()))) {
-                        if (MessageUtils.allowSafeDraft(ComposeMessageActivity.this,
-                                MmsConfig.getDeviceStorageFullStatus(), false,
-                                TOAST_TYPE_FOR_SAVE_DRAFT)) {
-                            saveDraft(true);
-                            Log.v(TAG, "save draft if needed after compressing" +
-                                    " image after onStop and update MmsWidget");
-                            MmsWidgetProvider.notifyDatasetChanged(getApplicationContext());
-                        }
-                    }
-                }
-             }
-        }, null, R.string.adding_attachments_title);
-    }
-
-    private void addImage(final Uri uri, final boolean append) {
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "addImage: append=" + append + ", uri=" + uri);
-        }
-        mNeedSaveAsMms = true;
-        int result = WorkingMessage.OK;
-        try {
-            if (append) {
-                mWorkingMessage.checkSizeBeforeAppend();
-            }
-        } catch (ExceedMessageSizeException e) {
-            result = WorkingMessage.MESSAGE_SIZE_EXCEEDED;
-            notifyCompressingDone();
-            handleAddAttachmentError(result, R.string.type_picture);
-            mNeedSaveAsMms = false;
-            return;
-        }
-
-        result = mWorkingMessage.setAttachment(WorkingMessage.IMAGE, uri, append);
-
-        if (result != WorkingMessage.IMAGE_TOO_LARGE &&
-                result != WorkingMessage.MESSAGE_SIZE_EXCEEDED) {
-            mWaitingAttachment = false;
-        }
-        if (result == WorkingMessage.IMAGE_TOO_LARGE ||
-            result == WorkingMessage.MESSAGE_SIZE_EXCEEDED) {
-            MmsLog.dpi(TAG, "addImage: resize image " + uri);
-
-            /// M: Adjust whether its a DRM IMAGE
-            if (FeatureOption.MTK_DRM_APP) {
-                if (!DrmUtilsEx.checkUriContainsDrm(this, uri)) {
-                    mToastCountForResizeImage++;
-                    if (mToastCountForResizeImage == 1) {
-                        MessageUtils.resizeImage(this, uri,
-                                mAttachmentEditorHandler, mResizeImageCallback, append,
-                            true);
-                    } else {
-                        MessageUtils.resizeImage(this, uri,
-                                mAttachmentEditorHandler, mResizeImageCallback, append,
-                            false);
-                    }
-                } else {
-                    notifyCompressingDone();
-                    handleAddAttachmentError(result, R.string.type_picture);
-                    mNeedSaveAsMms = false;
-                }
-            } else {
-                mToastCountForResizeImage++;
-                if (mToastCountForResizeImage == 1) {
-                    MessageUtils.resizeImage(this, uri,
-                            mAttachmentEditorHandler, mResizeImageCallback, append, true);
-                } else {
-                    MessageUtils.resizeImage(this, uri,
-                            mAttachmentEditorHandler, mResizeImageCallback, append, false);
-                }
-            }
-            return;
-        } else if (result == WorkingMessage.WARNING_TYPE) {
-            mNeedSaveAsMms = false;
-            notifyCompressingDone();
-            runOnUiThread(new Runnable() {
-                public void run() {
-                    showConfirmDialog(uri, append,
-                            WorkingMessage.IMAGE, R.string.confirm_restricted_image);
-                }
-            });
-            return;
-        }
-        notifyCompressingDone();
-        if (result != WorkingMessage.OK) {
-            mNeedSaveAsMms = false;
-        }
-        handleAddAttachmentError(result, R.string.type_picture);
-    }
-    /// @}
-
-    /// M: Code analyze 065, Add video attachment. @{
-    private void addVideoAsync(final Uri uri, final boolean append) {
-        getAsyncDialog().runAsyncInThreadPool(new Runnable() {
-            @Override
-            public void run() {
-                addVideo(uri, append);
-                saveAsMms(false);
-           }
-        }, null, R.string.adding_attachments_title);
-    }
-
-    private void addVideo(final Uri uri, final boolean append) {
-        mNeedSaveAsMms = false;
-        if (uri != null) {
-            mNeedSaveAsMms = true;
-            int result = WorkingMessage.OK;
-            try {
-                if (append) {
-                    mWorkingMessage.checkSizeBeforeAppend();
-                }
-            } catch (ExceedMessageSizeException e) {
-                result = WorkingMessage.MESSAGE_SIZE_EXCEEDED;
-                handleAddAttachmentError(result, R.string.type_video);
-                mNeedSaveAsMms = false;
-                return;
-            }
-            result = mWorkingMessage.setAttachment(WorkingMessage.VIDEO, uri, append);
-            if (result == WorkingMessage.WARNING_TYPE) {
-                mNeedSaveAsMms = false;
-                runOnUiThread(new Runnable() {
-                    public void run() {
-                        showConfirmDialog(uri, append,
-                                WorkingMessage.VIDEO, R.string.confirm_restricted_video);
-                    }
-                });
-            } else {
-                handleAddAttachmentError(result, R.string.type_video);
-                if (result != WorkingMessage.OK) {
-                    mNeedSaveAsMms = false;
-                }
-            }
-        }
-    }
-    /// @}
-
-    private void addAudioAsync(final Uri uri, final boolean append) {
-        getAsyncDialog().runAsync(new Runnable() {
-            @Override
-            public void run() {
-                addAudio(uri, append);
-                saveAsMms(false);
-            }
-        }, null, R.string.adding_attachments_title);
-    }
-
-    AsyncDialog getAsyncDialog() {
-        if (mAsyncDialog == null) {
-            mAsyncDialog = new AsyncDialog(this);
-        }
-        return mAsyncDialog;
-    }
-
-    public boolean getForwordingState() {
-        return mForwardingMessage;
-    }
-
-    /// M: Code analyze 017, Handle forwarded message.(see:forwardMessage())@{
-    private boolean handleForwardedMessage() {
-        Intent intent = getIntent();
-
-        // If this is a forwarded message, it will have an Intent extra
-        // indicating so.  If not, bail out.
-        if (!mForwardMessageMode) {
-            mForwardingMessage = false;
-            return false;
-        }
-        mForwardingMessage = true;
-
-        Uri uri = intent.getParcelableExtra("msg_uri");
-
-        if (Log.isLoggable(LogTag.APP, Log.DEBUG)) {
-            MmsLog.dpi(TAG, "handle forwarded message " + uri);
-        }
-
-        if (uri != null) {
-            mWorkingMessage = WorkingMessage.load(this, uri);
-            if (mWorkingMessage != null) {
-                mWorkingMessage.setSubject(intent.getStringExtra("subject"), false);
-                SlideshowModel mSlideshowModel = mWorkingMessage.getSlideshow();
-                if (mSlideshowModel != null) {
-                    int mSsmSize = mSlideshowModel.size();
-                    for (int index = 0; index < mSsmSize; index++) {
-                        SlideModel mSlideModel = mSlideshowModel.get(index);
-                        if (mSlideModel != null) {
-                            if (mSlideModel.hasText()) {
-                                TextModel mTextModel = mSlideModel.getText();
-                                String textChar = mTextModel.getText();
-                                long textLength = textChar.length();
-                                if (textLength > MmsConfig.getMaxTextLimit()) {
-                                    mTextModel.setText(
-                                            textChar.substring(0, MmsConfig.getMaxTextLimit()));
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        } else {
-            String smsAddress = null;
-            if (intent.hasExtra(SMS_ADDRESS)) {
-                smsAddress = intent.getStringExtra(SMS_ADDRESS);
-                if (smsAddress != null) {
-                   //TODO need re-coding
-                   //mRecipientsEditor.addRecipient(smsAddress, true);
-                }
-            }
-            mWorkingMessage.setText(intent.getStringExtra(SMS_BODY));
-        }
-        /// M:
-        // add for ipmessage
-        mIpCompose.onIpHandleForwardedMessage(intent);
-        // let's clear the message thread for forwarded messages
-        mMsgListAdapter.changeCursor(null);
-
-        return true;
-    }
-    /// @}
-
-    // Handle send actions, where we're told to send a picture(s) or text.
-    private boolean handleSendIntent() {
-        Intent intent = getIntent();
-        Bundle extras = intent.getExtras();
-        if (extras == null) {
-            return false;
-        }
-        /// M: Code analyze 066,Handle intent. @{
-        /// M: add for saveAsMms
-        mWorkingMessage.setConversation(mConversation);
-        final String mimeType = intent.getType();
-        String action = intent.getAction();
-        MmsLog.i(TAG, "Get mimeType: " + mimeType + " Get action: " + action);
-        /// M: disable when non-default sms
-        if (!mIsSmsEnabled) {
-            Toast.makeText(ComposeMessageActivity.this,
-                    R.string.compose_disabled_toast, Toast.LENGTH_SHORT).show();
-            return false;
-        }
-        if (Intent.ACTION_SEND.equals(action)) {
-            if (extras.containsKey(Intent.EXTRA_STREAM)) {
-                final Uri uri = (Uri) extras.getParcelable(Intent.EXTRA_STREAM);
-                if (uri == null) {
-                    MmsLog.w(TAG, "handleSendIntent uri == null");
-                    return false;
-                }
-                if (mimeType.equals("text/plain")) {
-                    String fileName = "";
-                    if (uri != null) {
-                        if (uri.getScheme() != null && uri.getScheme().equals("file")) {
-                            String mUriStr = Uri.decode(uri.toString());
-                            fileName = mUriStr.substring(mUriStr.lastIndexOf("/") + 1,
-                                    mUriStr.length());
-                        } else {
-                            Cursor c = mContentResolver.query(uri, null, null, null, null);
-                            if (c != null) {
-                                try {
-                                    if (c.getCount() == 1 && c.moveToFirst()) {
-                                        fileName = c.getString(
-                                                c.getColumnIndex(Images.Media.DISPLAY_NAME));
-                                    }
-                                } catch (Exception e) {
-                                    e.printStackTrace();
-                                } finally {
-                                    c.close();
-                                }
-                            }
-                        }
-                    }
-
-                    String mMessage = this.getString(R.string.failed_to_add_media, fileName);
-                    Toast.makeText(this, mMessage, Toast.LENGTH_SHORT).show();
-                    return false;
-                }
-                getAsyncDialog().runAsync(new Runnable() {
-                    @Override
-                    public void run() {
-                        /// M: fix bug ALPS00397146, removeThumbnailManager uri
-                        // (Content://media/external/images/media/) when it rotated
-                        String fileName = "";
-                        int degree = 0;
-                        String uriStr = uri.toString();
-                        if (uriStr.startsWith("content://media/external/images/media")) {
-                            Cursor c = mContentResolver.query(uri, null, null, null, null);
-                            if (c != null) {
-                                try {
-                                    if (c.getCount() == 1 && c.moveToFirst()) {
-                                        fileName = c.getString(
-                                                c.getColumnIndex(Images.Media.DISPLAY_NAME));
-                                        degree = c.getInt(
-                                                c.getColumnIndex(Images.Media.ORIENTATION));
-                                    }
-                                } catch (Exception e) {
-                                    e.printStackTrace();
-                                } finally {
-                                    c.close();
-                                }
-                            }
-
-                            if (sDegreeMap != null && sDegreeMap.containsKey(uriStr)) {
-                                if (sDegreeMap.get(uriStr).intValue() != degree) {
-                                    Uri thumbnailUri =
-                                        Uri.parse(uriStr + ThumbnailManager.FLAG_FNAME + fileName);
-                                    MmsApp.getApplication().getThumbnailManager()
-                                                                    .removeThumbnail(thumbnailUri);
-                                    sDegreeMap.remove(uriStr);
-                                    sDegreeMap.put(uriStr, degree);
-                                }
-                            } else if (sDegreeMap != null) {
-                                sDegreeMap.put(uriStr, degree);
-                            }
-                        }
-                        /// @}
-                        Uri tempUri = uri;
-                        if (uri.toString().contains(TempFileProvider.SCRAP_VIDEO_URI.toString())) {
-                            File file = new File(TempFileProvider
-                                    .getScrapVideoPath(ComposeMessageActivity.this));
-                            if (file != null && file.exists()) {
-                                tempUri = Uri.fromFile(file);
-                            }
-                        }
-
-                        String scheme = tempUri.getScheme();
-                        if (scheme != null && scheme.equals("file")) {
-                            /// M: fix bug ALPS01400468, workaround for GoogleDrive Audio Uri
-                            if (uri.toString().contains(AudioModel.sAuthorityForGoogleDrive)) {
-                                AudioModel.sTypeForGoogleDrive = mimeType;
-                            }
-                            addFileAttachment(mimeType, tempUri, false);
-                        } else {
-                            String type = MessageUtils.queryContentType(
-                                    ComposeMessageActivity.this, (Uri) uri);
-                            if (TextUtils.isEmpty(type)) {
-                                type = mimeType;
-                            }
-                            addAttachment(type, tempUri, false);
-                        }
-                        SlideshowModel slides = mWorkingMessage.getSlideshow();
-                        if (slides != null && (slides.size() > 0
-                                || slides.sizeOfFilesAttach() > 0)) {
-                            mWorkingMessage.saveAsMms(false);
-                        }
-                        VCardUtils.deleteVCardTempFiles(getApplicationContext(), mVCardFiles);
-                    }
-                }, null, R.string.adding_attachments_title);
-                intent.setAction(SIGN_CREATE_AFTER_KILL_BY_SYSTEM);
-                return true;
-            } else if (extras.containsKey(Intent.EXTRA_TEXT)) {
-                mWorkingMessage.setText(extras.getString(Intent.EXTRA_TEXT));
-                intent.setAction(SIGN_CREATE_AFTER_KILL_BY_SYSTEM);
-                return true;
-            }
-        } else if (Intent.ACTION_SEND_MULTIPLE.equals(action) &&
-                extras.containsKey(Intent.EXTRA_STREAM)) {
-            SlideshowModel slideShow = mWorkingMessage.getSlideshow();
-            final ArrayList<Parcelable> uris = extras.getParcelableArrayList(Intent.EXTRA_STREAM);
-            int currentSlideCount = slideShow != null ? slideShow.size() : 0;
-            int importCount = uris.size();
-            if (importCount + currentSlideCount > SlideshowEditor.MAX_SLIDE_NUM) {
-                importCount = Math.min(SlideshowEditor.MAX_SLIDE_NUM - currentSlideCount,
-                        importCount);
-            }
-
-            // Attach all the pictures/videos asynchronously off of the UI thread.
-            // Show a progress dialog if adding all the slides hasn't finished
-            // within half a second.
-            final int numberToImport = importCount;
-            MmsLog.i(TAG, "numberToImport: " + numberToImport);
-            final WorkingMessage msg = mWorkingMessage;
-            getAsyncDialog().runAsync(new Runnable() {
-                @Override
-                public void run() {
-                    mToastCountForResizeImage = 0;
-                    for (int i = 0; i < numberToImport; i++) {
-                        Parcelable uri = uris.get(i);
-
-                        String scheme = ((Uri) uri).getScheme();
-                        String authority = ((Uri) uri).getAuthority();
-                        if (scheme != null && scheme.equals("file")) {
-                            // change "file://..." Uri to "Content://....,
-                            // and attemp to add this attachment"
-                            /// M: fix bug ALPS604911, change MmsContentType
-                            /// when share multi-file from FileManager @{
-                            String type = MessageUtils.getContentType((Uri) uri);
-                            if (TextUtils.isEmpty(type)) {
-                                type = mimeType;
-                            }
-                            /// @}
-                            addFileAttachment(type, (Uri) uri, true);
-                        } else if (authority != null && (authority.contains("com.android.email")
-                                || (authority.equals(MediaStore.AUTHORITY)
-                                        && mimeType != null && mimeType.contains("*")))) {
-                            addAttachment(mimeType, (Uri) uri, true);
-                        } else {
-                            String type = MessageUtils.queryContentType(
-                                    ComposeMessageActivity.this, (Uri) uri);
-                            if (TextUtils.isEmpty(type)) {
-                                type = mimeType;
-                            }
-                            addAttachment(type, (Uri) uri, true);
-                        }
-                    }
-                    mToastCountForResizeImage = 0;
-                    SlideshowModel slides = mWorkingMessage.getSlideshow();
-                    if (slides != null && (slides.size() > 0 || slides.sizeOfFilesAttach() > 0)) {
-                        mWorkingMessage.saveAsMms(false);
-                    }
-                    VCardUtils.deleteVCardTempFiles(getApplicationContext(), mVCardFiles);
-                }
-            }, null, R.string.adding_attachments_title);
-            intent.setAction(SIGN_CREATE_AFTER_KILL_BY_SYSTEM);
-            return true;
-        } else if (SIGN_CREATE_AFTER_KILL_BY_SYSTEM.equals(action)) {
-        /// @}
-            return true;
-        }
-        return false;
-    }
-
-    // mVideoUri will look like this: content://media/external/video/media
-    private static final String mVideoUri = Video.Media.getContentUri("external").toString();
-    // mImageUri will look like this: content://media/external/images/media
-    private static final String mImageUri = Images.Media.getContentUri("external").toString();
-
-    private void addAttachment(String type, Uri uri, boolean append) {
-        if (uri != null) {
-            // When we're handling Intent.ACTION_SEND_MULTIPLE, the passed in items can be
-            // videos, and/or images, and/or some other unknown types we don't handle. When
-            // a single attachment is "shared" the type will specify an image or video. When
-            // there are multiple types, the type passed in is "*/*". In that case, we've got
-            // to look at the uri to figure out if it is an image or video.
-            try
-            {
-                boolean wildcard = "*/*".equals(type);
-                MmsLog.i(TAG, "Got send intent mimeType :" + type);
-            if (type == null) {
-                handleAddAttachmentError(WorkingMessage.UNSUPPORTED_TYPE, R.string.type_picture);
-            }
-            else if (type.startsWith("image/") || (wildcard &&
-                           uri.toString().startsWith(mImageUri))) {
-                    addImage(uri, append);
-                } else if (type.startsWith("video/") ||
-                        (wildcard && uri.toString().startsWith(mVideoUri))) {
-                    addVideo(uri, append);
-                }
-                 /// M: Code analyze 067, Add audio attachment. @{
-                else if (type.startsWith("audio/") || type.equals("application/ogg")
-                    || (wildcard && uri.toString().startsWith(mAudioUri))) {
-                    addAudio(uri, append);
-                /// @}
-                /// M: Code analyze 019, Add vcard attachment.  @{
-                } else if (type.equalsIgnoreCase("text/x-vcard")) {
-                    VCardAttachment va = new VCardAttachment(ComposeMessageActivity.this);
-                    String fileName = va.getVCardFileNameByUri(uri);
-                    setFileAttachment(fileName, WorkingMessage.VCARD, false);
-                    mVCardFiles.add(fileName);
-                 /// M: Code analyze 020, Add vcalendar attachment.  @{
-                } else if (type.equalsIgnoreCase("text/x-vcalendar")) {
-                    attachVCalendar(uri);
-                } else {
-                    handleAddAttachmentError(WorkingMessage.UNSUPPORTED_TYPE, R.string.type_audio);
-                }
-            } catch (NullPointerException  e) {
-                   Log.e(TAG, "Null mimetype", e);
-                }
-            /// @}
-        }
-    }
-
-    private String getResourcesString(int id, String mediaName) {
-        Resources r = getResources();
-        return r.getString(id, mediaName);
-    }
-
-    private void drawBottomPanel() {
-        // Reset the counter for text editor.
-        /// M: @{
-        mDrawBottomPanel = false;
-        /// M: remove Google default code
-        // Reset the counter for text editor.
-        //resetCounter();
-
-        mOpComposeExt.drawBottomPanel(mWorkingMessage.hasSlideshow(),
-                mWorkingMessage.getIsUpdateAttachEditor(), mIsSmsEnabled);
-
-        if (mWorkingMessage.hasSlideshow()) {
-            if (mWorkingMessage.getIsUpdateAttachEditor()) {
-                mBottomPanel.setVisibility(View.GONE);
-                if (mSubjectTextEditor != null) {
-                    //mSubjectTextEditor.setNextFocusDownId(-1);
-                    mSubjectTextEditor.setImeOptions(EditorInfo.IME_ACTION_DONE);
-                    mSubjectTextEditor.setImeActionLabel(
-                            getText(com.android.internal.R.string.ime_action_done),
-                            EditorInfo.IME_ACTION_DONE);
-                }
-
-                mAttachmentEditor.update(mWorkingMessage);
-                mAttachmentEditor.requestFocus();
-            } else {
-                MmsLog.d(TAG, "drawBottomPanel, isUpdateAttachEditor == false");
-            }
-            if (mRecipientsEditor != null) {
-                mRecipientsEditor.setEnabled(mIsSmsEnabled);
-                mRecipientsEditor.setFocusableInTouchMode(mIsSmsEnabled);
-                mRecipientsEditor.setIsTouchable(mIsSmsEnabled);
-            }
-            if (mSubjectTextEditor != null) {
-                mSubjectTextEditor.setEnabled(mIsSmsEnabled);
-                mSubjectTextEditor.setFocusableInTouchMode(mIsSmsEnabled);
-            }
-            if (mRecipientsPicker != null) {
-                mRecipientsPicker.setEnabled(mIsSmsEnabled);
-            }
-            return;
-        }
-
-        mAttachmentEditor.update(mWorkingMessage);
-        updateTextEditorHeightInFullScreen();
-        /// @}
-        mBottomPanel.setVisibility(View.VISIBLE);
-        if (mSubjectTextEditor != null) {
-            //mSubjectTextEditor.setNextFocusDownId(R.id.embedded_text_editor);
-            mSubjectTextEditor.setImeOptions(EditorInfo.IME_ACTION_NEXT);
-            mSubjectTextEditor.setImeActionLabel(
-                    getText(com.android.internal.R.string.ime_action_next),
-                    EditorInfo.IME_ACTION_NEXT);
-        }
-
-        CharSequence text = mWorkingMessage.getText();
-
-        // TextView.setTextKeepState() doesn't like null input.
-        mTextEditor.removeTextChangedListener(mTextEditorWatcher);
-        if (mIsSmsEnabled) {
-            mTextEditor.addTextChangedListener(mTextEditorWatcher);
-            if (text != null) {
-                mTextEditor.setTextKeepState(text);
-                /// M: @{
-                try {
-                    mTextEditor.setSelection(mTextEditor.getText().toString().length());
-                } catch (IndexOutOfBoundsException e) {
-                    mTextEditor.setSelection(mTextEditor.getText().toString().length() - 1);
-                }
-                /// @}
-            } else {
-                mTextEditor.setText("");
-            }
-        } else {
-            mTextEditor.setText("");
-            mTextEditor.setHint(R.string.sending_disabled_not_default_app);
-            mTextEditor.setFocusable(false);
-        }
-        mTextEditor.setEnabled(mIsSmsEnabled);
-        mTextEditor.setFocusableInTouchMode(mIsSmsEnabled);
-
-        if (mRecipientsEditor != null) {
-            mRecipientsEditor.setEnabled(mIsSmsEnabled);
-            mRecipientsEditor.setFocusableInTouchMode(mIsSmsEnabled);
-            mRecipientsEditor.setIsTouchable(mIsSmsEnabled);
-        }
-        if (mSubjectTextEditor != null) {
-            mSubjectTextEditor.setEnabled(mIsSmsEnabled);
-            mSubjectTextEditor.setFocusableInTouchMode(mIsSmsEnabled);
-        }
-        if (mRecipientsPicker != null) {
-            mRecipientsPicker.setEnabled(mIsSmsEnabled);
-        }
-
-        /// M: add for character counter
-        // Reset the counter for text editor.
-        updateCounter(mWorkingMessage.getText(), 0, 0, 0);
-    }
-
-    private void drawTopPanel(boolean showSubjectEditor) {
-        /// M: why ? @{
-        //boolean showingAttachment = mAttachmentEditor.update(mWorkingMessage);
-        //mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE);
-        //mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE);
-        mOpComposeExt.drawTopPanel(isRecipientsEditorVisible(),
-                mWorkingMessage.mOpWorkingMessageExt);
-
-        boolean isHasSubject = false;
-        if (mWorkingMessage == null) {
-            isHasSubject = false;
-        } else {
-            isHasSubject = mWorkingMessage.hasSubject();
-        }
-        boolean isDeleteMode = false;
-        if (mMsgListAdapter == null) {
-            isDeleteMode = false;
-        } else {
-            isDeleteMode = mMsgListAdapter.mIsDeleteMode;
-        }
-        showSubjectEditor((showSubjectEditor || isHasSubject) && !isDeleteMode);
-        mAttachmentEditor.update(mWorkingMessage);
-        updateTextEditorHeightInFullScreen();
-        /// @}
-    }
-
-    //==========================================================
-    // Interface methods
-    //==========================================================
-
-    @Override
-    public void onClick(View v) {
-        /// M: Code analyze 028, Before sending message,check the recipients count
-        /// and add sub card selection dialog if multi sub cards exist.@{
-        /*if ((v == mSendButtonSms || v == mSendButtonMms) && isPreparedForSending()){
-            confirmSendMessageIfNeeded();
-        }
-        */
-
-        if (mOpComposeExt.onClick(v, mRecipientsPicker)) {
-            return;
-        }
-        if (v == mSendButtonSms || v == mSendButtonMms) {
-            MmsLog.d(TAG, "onClick send button click!");
-            if (mSendButtonCanResponse) {
-                ///M: WFC: Show pop-up, if condition satisfy @ {
-/*                if (showWfcSendButtonPopUp()) {
-                    return;
-                }
-                */
-                /// @}
-                mSendButtonCanResponse = false;
-                if (isPreparedForSending()) {
-                    /// M: Since sending message here, why not disable button 'Send'??
-                    updateSendButtonState(false);
-                    checkRecipientsCount();
-                    mUiHandler.sendEmptyMessageDelayed(MSG_RESUME_SEND_BUTTON,
-                            RESUME_BUTTON_INTERVAL);
-                } else {
-                    mSendButtonCanResponse = true;
-                    unpreparedForSendingAlert();
-                }
-            }
-        /// @}
-        } else if ((v == mRecipientsPicker)) {
-             /// M: Code analyze 013, Get contacts from Contact app . @{
-             //launchMultiplePhonePicker();
-            if (recipientCount() >= RECIPIENTS_LIMIT_FOR_SMS) {
-                Toast.makeText(ComposeMessageActivity.this,
-                        R.string.cannot_add_recipient, Toast.LENGTH_SHORT).show();
-            } else {
-                /// M: fix bug ALPS00444752, dis-clickble when showing ContactPicker
-                if (!mShowingContactPicker) {
-                    addContacts(mRecipientsEditor != null
-                            ? (RECIPIENTS_LIMIT_FOR_SMS - mRecipientsEditor.getNumbers().size())
-                                    : RECIPIENTS_LIMIT_FOR_SMS, REQUEST_CODE_PICK);
-                }
-            }
-             /// @}
-        }
-    }
-
-    /// M: fix bug ALPS00444752, set false to enable to Show ContactPicker
-    private boolean mShowingContactPicker = false;
-
-    private void launchMultiplePhonePicker() {
-        Intent intent = new Intent(Intents.ACTION_GET_MULTIPLE_PHONES);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setType(Phone.CONTENT_TYPE);
-        // We have to wait for the constructing complete.
-        ContactList contacts = mRecipientsEditor.constructContactsFromInput(true);
-        int urisCount = 0;
-        Uri[] uris = new Uri[contacts.size()];
-        urisCount = 0;
-        for (Contact contact : contacts) {
-            if (Contact.CONTACT_METHOD_TYPE_PHONE == contact.getContactMethodType()) {
-                    uris[urisCount++] = contact.getPhoneUri();
-            }
-        }
-        if (urisCount > 0) {
-            intent.putExtra(Intents.EXTRA_PHONE_URIS, uris);
-        }
-        startActivityForResult(intent, REQUEST_CODE_PICK);
-    }
-
-    @Override
-    public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
-        if (event != null) {
-            // if shift key is down, then we want to insert the '\n' char in the TextView;
-            // otherwise, the default action is to send the message.
-            if (!event.isShiftPressed()) {
-                if (event.getAction() == KeyEvent.ACTION_DOWN) {
-                    return false;
-                }
-                /// M: Code analyze 028, Before sending message,check the recipients count
-                /// and add sub card selection dialog if multi sub cards exist.@{
-                if (isPreparedForSending()) {
-                    checkRecipientsCount();
-                } else {
-                    unpreparedForSendingAlert();
-                    }
-                /// @}
-                return true;
-            }
-            return false;
-        }
-        /// M: Code analyze 028, Before sending message,check the recipients count
-        /// and add sub card selection dialog if multi sub cards exist.@{
-        if (isPreparedForSending()) {
-            //confirmSendMessageIfNeeded();
-            checkRecipientsCount();
-        } else {
-            unpreparedForSendingAlert();
-        }
-        /// @}
-        return true;
-    }
-
-    private final TextWatcher mTextEditorWatcher = new TextWatcher() {
-        private int mStart;
-
-        /// M: fix bug ALPS00612093, postDelay for ANR
-        private Runnable mUpdateRunnable = new Runnable() {
-            public void run() {
-                updateSendButtonState();
-            }
-        };
-
-        private Runnable mRunnable = new Runnable() {
-            public void run() {
-                Toast.makeText(ComposeMessageActivity.this, R.string.dialog_sms_limit,
-                        Toast.LENGTH_SHORT).show();
-            }
-        };
-
-        @Override
-        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-            mBeforeTextChangeString = s.toString();
-            MmsLog.d(TAG, "beforeTextChanged count = " + count + " after =" + after);
-        }
-
-        @Override
-        public void onTextChanged(CharSequence s, int start, int before, int count) {
-            // This is a workaround for bug 1609057. Since onUserInteraction() is
-            // not called when the user touches the soft keyboard, we pretend it was
-            // called when textfields changes.  This should be removed when the bug
-            // is fixed.
-            onUserInteraction();
-
-            mWorkingMessage.setText(s);
-            /// M: fix bug ALPS00712509, show toast when paste many word and > 300k
-            if (mWorkingMessage.isExceedSize()) {
-                mWorkingMessage.setIsExceedSize(false);
-                mUiHandler.removeCallbacks(mRunnable);
-                mUiHandler.postDelayed(mRunnable, 200);
-            }
-            /// M: @{
-            mAttachmentEditor.onTextChangeForOneSlide();
-            /// @}
-
-            /// M: fix bug ALPS00612093, postDelay for ANR
-            mUiHandler.removeCallbacks(mUpdateRunnable);
-            mUiHandler.postDelayed(mUpdateRunnable, 100);
-
-            updateCounter(s, start, before, count);
-            mStart = start;
-            /// M: @{
-            //ensureCorrectButtonHeight();
-            /// @}
-
-            // add for ipmessage
-            mIpCompose.onIpTextChanged(s, start, before, count);
-        }
-
-        @Override
-        public void afterTextChanged(Editable s) {
-            // add for ipmessage
-            mIpCompose.onIpAfterTextChanged(s, mBeforeTextChangeString);
-        }
-    };
-
-    /**
-     * Ensures that if the text edit box extends past two lines then the
-     * button will be shifted up to allow enough space for the character
-     * counter string to be placed beneath it.
-     */
-    /*** M: remove Google default code
-    private void ensureCorrectButtonHeight() {
-        int currentTextLines = mTextEditor.getLineCount();
-        if (currentTextLines <= 2) {
-            mTextCounter.setVisibility(View.GONE);
-        }
-        else if (currentTextLines > 2 && mTextCounter.getVisibility() == View.GONE) {
-            // Making the counter invisible ensures that it is used to correctly
-            // calculate the position of the send button even if we choose not to
-            // display the text.
-            mTextCounter.setVisibility(View.INVISIBLE);
-        }
-    }
-    */
-
-    private final TextWatcher mSubjectEditorWatcher = new TextWatcher() {
-        @Override
-        public void beforeTextChanged(CharSequence s, int start, int count, int after) { }
-
-        @Override
-        public void onTextChanged(CharSequence s, int start, int before, int count) {
-            mWorkingMessage.setSubject(s, true);
-            if (s != null && TextUtils.getTrimmedLength(s) > 0) {
-                /// M: Code analyze 032, According to the message state to update text counter.@{
-                mTextCounter.setVisibility(View.GONE);
-                // / @}
-                // updateSendButtonState();
-            }
-            // / M: for fixed ALPS00562999,when change subject to null,update send button.@{
-            updateSendButtonState();
-            // / @}
-        }
-
-        @Override
-        public void afterTextChanged(Editable s) {
-            String subjectString = s.toString();
-            if (subjectString.length() == 0) {
-                Log.d(TAG, "[mSubjectEditorWatcher.afterTextChanged] subject lenght is 0,"
-                    + "current mms or sms : " + mWorkingMessage.requiresMms());
-                if (!mWorkingMessage.requiresMms()) {
-                    if (mConversation != null && mWorkingMessage != null) {
-                        mWorkingMessage.asyncDeleteDraftMmsMessage(mConversation);
-                        mWorkingMessage.clearConversation(mConversation, true);
-                    }
-                }
-            }
-        }
-    };
-
-    //==========================================================
-    // Private methods
-    //==========================================================
-
-    /**
-     * Initialize all UI elements from resources.
-     */
-    private void initResourceRefs() {
-        /// M: Code analyze 004, Set max height for text editor. @{
-        mHeightChangedLinearLayout =
-            (HeightChangedLinearLayout) findViewById(R.id.changed_linear_layout);
-        mHeightChangedLinearLayout.setLayoutSizeChangedListener(mLayoutSizeChangedListener);
-        /// @}
-        mMsgListView = (MessageListView) findViewById(R.id.history);
-        mMsgListView.setDivider(null);      // no divider so we look like IM conversation.
-        mMsgListView.setDividerHeight(getResources()
-                .getDimensionPixelOffset(R.dimen.ipmsg_message_list_divier_height));
-
-        // called to enable us to show some padding between the message list and the
-        // input field but when the message list is scrolled that padding area is filled
-        // in with message content
-        mMsgListView.setClipToPadding(false);
-
-        /** M: 4.1  used this code.
-        mMsgListView.setOnSizeChangedListener(new OnSizeChangedListener() {
-            public void onSizeChanged(int width, int height, int oldWidth, int oldHeight) {
-                // The message list view changed size, most likely because the keyboard
-                // appeared or disappeared or the user typed/deleted chars in the message
-                // box causing it to change its height when expanding/collapsing to hold more
-                // lines of text.
-                smoothScrollToEnd(false, height - oldHeight);
-            }
-        });
-        */
-
-        /// M: turn off children clipping because we draw the border outside of our own
-        /// M: bounds at the bottom.  The background is also drawn in code to avoid drawing
-        /// M: the top edge.
-        mMsgListView.setClipChildren(false);
-
-        mBottomPanel = findViewById(R.id.bottom_panel);
-        mTextEditor = (EnhanceEditText) findViewById(R.id.embedded_text_editor);
-        /// M: @{
-        //  mTextEditor.setOnEditorActionListener(this);
-        /// @}
-        mTextEditor.removeTextChangedListener(mTextEditorWatcher);
-        mTextEditor.addTextChangedListener(mTextEditorWatcher);
-        mTextEditor.setFilters(new InputFilter[] {
-                new TextLengthFilter(MmsConfig.getMaxTextLimit())});
-        mTextEditor.setOnKeyListener(new OnKeyListener() {
-            @Override
-            public boolean onKey(View v, int keyCode, KeyEvent event) {
-                // add for ipmessage
-                mIpCompose.onIpTextEditorKey(v, keyCode, event);
-                return false;
-            }
-        });
-
-        mTextEditor.setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                mIpCompose.onIpTextEditorTouch();
-                mOpComposeExt.onTextEditorTouch();
-                return false;
-            }
-        });
-
-        mTextEditor.addOnLayoutChangeListener(new View.OnLayoutChangeListener() {
-            @Override
-            public void onLayoutChange(View v, int left, int top, int right,
-                    int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom) {
-                if (Log.isLoggable(TAG, Log.VERBOSE)) {
-                    MmsLog.v(TAG, "mTextEditor onLayoutChange mUpdateForScrnOrientationChanged = "
-                            + mUpdateForScrnOrientationChanged);
-                }
-                if (mUpdateForScrnOrientationChanged) {
-                    mUiHandler.postDelayed(new Runnable() {
-                        @Override
-                        public void run() {
-                            updateCounter(mWorkingMessage.getText(), 0, 0, 0);
-                        }
-                    }, 1000);
-                    mUpdateForScrnOrientationChanged = false;
-                }
-            }
-        });
-
-        mTextCounter = (TextView) findViewById(R.id.text_counter);
-        mSendButtonMms = (TextView) findViewById(R.id.send_button_mms);
-        mSendButtonSms = (ImageButton) findViewById(R.id.send_button_sms);
-        mTypingStatus = (TextView) findViewById(R.id.ip_message_typing_status);
-        mRemoteStrangerText = (TextView) findViewById(R.id.ipmsg_joyn_stranger_remind);
-        mSendButtonMms.setOnClickListener(this);
-        mSendButtonSms.setOnClickListener(this);
-        mTopPanel = findViewById(R.id.recipients_subject_linear);
-        mTopPanel.setFocusable(false);
-        mAttachmentEditor = (AttachmentEditor) findViewById(R.id.attachment_editor);
-        mAttachmentEditor.setHandler(mAttachmentEditorHandler);
-        //mAttachmentEditorScrollView = findViewById(R.id.attachment_editor_scroll_view);
-        mQuickContact = (QuickContactBadge) findViewById(R.id.avatar);
-        mOpComposeExt.initResourceRefs((LinearLayout) findViewById(R.id.button_with_counter),
-                (TextView) findViewById(R.id.ct_text_counter),
-                mAttachmentEditor.mOpAttachmentEditorExt);
-    }
-
-    private void confirmDeleteDialog(OnClickListener listener, boolean locked) {
-        AlertDialog.Builder builder = new AlertDialog.Builder(this);
-        /// M: Code analyze 027,Add for deleting one message.@{
-        // Set different title and icon for locked message.
-        builder.setTitle(locked ? R.string.confirm_dialog_locked_title :
-            R.string.confirm_dialog_title);
-        builder.setIconAttribute(android.R.attr.alertDialogIcon);
-        /// @}
-        builder.setCancelable(true);
-        builder.setMessage(locked ? R.string.confirm_delete_locked_message :
-                    R.string.confirm_delete_message);
-        builder.setPositiveButton(R.string.delete, listener);
-        builder.setNegativeButton(R.string.no, null);
-        builder.show();
-    }
-
-    void undeliveredMessageDialog(long date) {
-        String body;
-
-        if (date >= 0) {
-            body = getString(R.string.undelivered_msg_dialog_body,
-                    MessageUtils.formatTimeStampString(this, date));
-        } else {
-            // FIXME: we can not get sms retry time.
-            body = getString(R.string.undelivered_sms_dialog_body);
-        }
-
-        Toast.makeText(this, body, Toast.LENGTH_LONG).show();
-    }
-
-    private void startMsgListQuery() {
-        startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 100);
-    }
-
-    private void startMsgListQuery(final int token, int delay) {
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (FolderModeUtils.getMmsDirMode()) {
-            return;
-        }
-        /// @}
-        if (isRecipientsEditorVisible()) {
-            return;
-        }
-
-        final Uri conversationUri = mOpComposeExt.startMsgListQuery(
-                mConversation.getUri(), mConversation.getThreadId());
-
-        MmsLog.dpi(TAG, "startMsgListQuery, uri= " + conversationUri + " timeout = " + delay);
-        if (conversationUri == null) {
-            log("##### startMsgListQuery: conversationUri is null, bail!");
-            return;
-        }
-
-        final long threadId = mConversation.getThreadId();
-        if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            MmsLog.dpi(TAG, "startMsgListQuery for " + conversationUri + ", threadId=" + threadId);
-        }
-
-        try {
-            if (token == MESSAGE_LIST_QUERY_TOKEN) {
-                mBackgroundQueryHandler.postDelayed(mQueryMsgListRunnable, delay);
-                 return;
-            }
-
-            // Kick off the new query
-            /// M: @{
-            // mBackgroundQueryHandler.startQuery(
-            mBackgroundQueryHandler.postDelayed(new Runnable() {
-                public void run() {
-                    /// M: If no listener, no need query anymore @{
-                        MmsLog.d(TAG, "mListQueryRunnable, to query, "
-                                + "activity=" + ComposeMessageActivity.this);
-                        if (mMsgListAdapter.getOnDataSetChangedListener() == null) {
-                            MmsLog.d(TAG, "mListQueryRunnable, no listener");
-                            return;
-                        }
-                    /// @}
-                    ///M: add for ipmessage
-                    boolean queryed = mIpCompose.startMsgListQuery(mBackgroundQueryHandler,
-                            token, threadId, conversationUri, PROJECTION, null, null, null);
-                    if (queryed) {
-                        return;
-                    }
-                    mBackgroundQueryHandler.startQuery(
-                            token,
-                            threadId /* cookie */,
-                            conversationUri,
-                            PROJECTION,
-                            null, null, null);
-                }
-            }, delay);
-            /// @}
-        } catch (SQLiteException e) {
-            SqliteWrapper.checkSQLiteException(this, e);
-        }
-    }
-
-    private void initMessageList() {
-        if (mMsgListAdapter != null) {
-            return;
-        }
-
-        String highlightString = getIntent().getStringExtra("highlight");
-        Pattern highlight = highlightString == null
-            ? null
-        /// M: ALPS00619099, highlight all matched search string, not only on word border @ {
-            : Pattern.compile(Pattern.quote(highlightString), Pattern.CASE_INSENSITIVE);
-        /// @}
-
-        // Initialize the list adapter with a null cursor.
-        mMsgListAdapter = new MessageListAdapter(this, null, mMsgListView, true, highlight);
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (FolderModeUtils.getMmsDirMode()) {
-            mMsgListView.setVisibility(View.GONE);
-            return;
-        }
-        /// @}
-        mMsgListAdapter.setMsgListItemHandler(mMessageListItemHandler);
-        mMsgListView.setAdapter(mMsgListAdapter);
-        mMsgListView.setSelector(android.R.color.transparent);
-        mMsgListView.setItemsCanFocus(false);
-        mMsgListView.setVisibility(View.VISIBLE);
-        mMsgListView.setOnCreateContextMenuListener(mMsgListMenuCreateListener);
-        mMsgListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                MmsLog.d(MessageListItem.TAG_DIVIDER, "OnItemClickListener(): view = " + view);
-                if (view != null) {
-                    ((MessageListItem) view).onMessageListItemClick();
-                }
-            }
-        });
-        /// M: Code analyze 050, Add scroll listener and touch listener for MessageListView.@{
-        /**
-         * M: Adjust the velocity scale and friction of messages list view,
-         * and The below two values are just experience
-         * values. For density > 2 which usually on FHD devices with larger(1.5x)
-         * friction, set Velocity scale to 0.6 For
-         * density <= 2, still use Velocity scale 0.4
-         */
-        final float density = getResources().getDisplayMetrics().density;
-        final float DEFAULT_DENSITY = 2.0f;
-        final float FHD_VELOCITY_SCALE = 0.6f;
-        final float DEFAULT_VELOCITY_SCALE = 0.4f;
-        final float DEFAULT_FRICTION = 0.005f;
-        Log.d(TAG, "getDisplayMetrics().density: " + density);
-
-        mMsgListView.setVelocityScale(density > DEFAULT_DENSITY
-                ? FHD_VELOCITY_SCALE : DEFAULT_VELOCITY_SCALE);
-        mMsgListView.setFriction(DEFAULT_FRICTION);
-        mMsgListView.setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                hideInputMethod();
-                return false;
-            }
-        });
-        // add for ipmessage
-        mIpCompose.onIpInitMessageList(mMsgListView, mMsgListAdapter.mIpMessageListAdapter);
-    }
-
-    private void loadDraft() {
-        if (mWorkingMessage.isWorthSaving()) {
-            Log.w(TAG, "loadDraft() called with non-empty working message");
-            mWorkingMessage.checkDraftSmsMessage(mConversation);
-            return;
-        }
-
-        // add for ipmessage
-        if (mIpCompose.loadIpMessagDraft(mConversation.getThreadId())) {
-            return;
-        }
-
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            log("loadDraft() call WorkingMessage.loadDraft");
-        }
-
-        /// M:[Just Comment] 4.1 Code.  There may be a bug.
-        mWorkingMessage = WorkingMessage.loadDraft(this, mConversation,
-                new Runnable() {
-                    @Override
-                    public void run() {
-                        drawTopPanel(false);
-                        drawBottomPanel();
-                        updateSendButtonState();
-                    }
-                });
-//        if (mConversation != null && mConversation.getRecipients() != null
-//                && mConversation.getRecipients().size() > 20) {
-//            MmsLog.d(TAG, "register mDraftChangeObserver");
-//            mContentResolver.registerContentObserver(
-//                    Mms.CONTENT_URI, true, mDraftChangeObserver);
-//        }
-    }
-
-    private void saveDraft(boolean isStopping) {
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            LogTag.debug("saveDraft");
-        }
-
-        // add for ipmessage
-        mIpCompose.onIpSaveDraft(mConversation.getThreadId());
-        /// @}
-        // TODO: Do something better here.  Maybe make discard() legal
-        // to call twice and make isEmpty() return true if discarded
-        // so it is caught in the clause above this one?
-        if (mWorkingMessage.isDiscarded()) {
-            return;
-        }
-
-        if (!mWaitingForSubActivity && !mWorkingMessage.isWorthSaving() &&
-                (!isRecipientsEditorVisible() || recipientCount() == 0
-                /* M: ALPS01821584. discard when onStop */ || isStopping)) {
-            if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                log("not worth saving, discard WorkingMessage and bail");
-            }
-            mWorkingMessage.discard(false);
-            return;
-        }
-        /// M : Fix CR: ALPS00996195
-        /// group message, more than one recipients, no need to saveDraft,
-        /// is going to MultiDeleteActivity, just return. if contains draft, discard it @{
-        if (mIsStartMultiDeleteActivity) {
-            if (MmsPreferenceActivity.getIsGroupMmsEnabled(this) && !needSaveDraft()
-                && mConversation.getRecipients().size() > 1) {
-                Log.d("[Mms][Draft][ComposeMessageActivity]", "[saveDraft] group message & "
-                        + " no need save drat & mIsStartMultiDeleteActivity"
-                        + " true, then just return!");
-                if (mConversation.hasDraft()) {
-                    Log.d("[Mms][Draft][ComposeMessageActivity]",
-                            "[saveDraft] mConversation has draft, then delete it");
-                    mWorkingMessage.discard(false);
-                }
-                return;
-            }
-            /// M Fix CR ALPS01201355, which will save draft the contact contains email address.
-            /// when start multideleteactivity. if contains mms draft ,discard it @{
-            if (getRecipients().containsEmail() && !needSaveDraft()) {
-                Log.d("[Mms][Draft][ComposeMessageActivity]", "[saveDraft] contains email address"
-                    + ",no need to save draft, just return!!");
-                if (mConversation.hasDraft()) {
-                    Log.d("[Mms][Draft][ComposeMessageActivity]",
-                            "[saveDraft] mConversation has draft, then delete it");
-                    mWorkingMessage.discard(false);
-                }
-                return;
-            }
-            /// @}
-        }
-        /// @}
-
-        mOpComposeExt.saveDraft(mWorkingMessage.mOpWorkingMessageExt);
-
-        Log.d("[Mms][Draft][ComposeMessageActivity]", "[saveDraft] call workingmessage.saveDraft");
-        mWorkingMessage.saveDraft(isStopping);
-
-        if (mToastForDraftSave && MmsConfig.isSmsEnabled(this)) {
-            Toast.makeText(this, R.string.message_saved_as_draft,
-                    Toast.LENGTH_SHORT).show();
-        }
-    }
-
-    private boolean isPreparedForSending() {
-        /// M: Code analyze 029,Add sub card state as a ready condition. @{
-        /*
-        int recipientCount = recipientCount();
-
-        return recipientCount > 0 && recipientCount <= MmsConfig.getRecipientLimit() &&
-            (mWorkingMessage.hasAttachment() ||
-                    mWorkingMessage.hasText() ||
-                    mWorkingMessage.hasSubject());
-        */
-
-        if (isRecipientsEditorVisible()) {
-            String recipientText = mRecipientsEditor.getText() == null ?
-                    "" : mRecipientsEditor.getText().toString();
-
-            return mSubCount > 0 && !TextUtils.isEmpty(recipientText) && mIsSmsEnabled
-                    && (mWorkingMessage.hasAttachment() || mWorkingMessage.hasText()
-                            || mWorkingMessage.hasSubject());
-        } else {
-            return mSubCount > 0 && mIsSmsEnabled && (mWorkingMessage.hasAttachment()
-                    || mWorkingMessage.hasText()
-                            || mWorkingMessage.hasSubject());
-        }
-        /// @}
-    }
-
-    private int recipientCount() {
-        int recipientCount;
-
-        // To avoid creating a bunch of invalid Contacts when the recipients
-        // editor is in flux, we keep the recipients list empty.  So if the
-        // recipients editor is showing, see if there is anything in it rather
-        // than consulting the empty recipient list.
-        if (isRecipientsEditorVisible()) {
-            recipientCount = mRecipientsEditor.getRecipientCount();
-        } else {
-            recipientCount = getRecipients().size();
-        }
-        return recipientCount;
-    }
-
-    public void sendMessage(boolean bCheckEcmMode) {
-        if (mWorkingMessage.requiresMms() && (mWorkingMessage.hasSlideshow()
-                || mWorkingMessage.hasAttachment())) {
-            int messageSize = 0;
-            messageSize = mWorkingMessage.getCurrentMessageSize();
-            MmsLog.d(TAG, "Compose.sendMessage(): messageSize=" + messageSize);
-            if (messageSize > MmsConfig.getUserSetMmsSizeLimit(true)) {
-                MessageUtils.showErrorDialog(ComposeMessageActivity.this,
-                        R.string.exceed_message_size_limitation,
-                        R.string.exceed_message_size_limitation, 0, 0);
-                updateSendButtonState();
-                return;
-            }
-        }
-
-        if (bCheckEcmMode) {
-            // TODO: expose this in telephony layer for SDK build
-            int phoneId = SubscriptionManager.getPhoneId(mSelectedSubId);
-            String inEcm = TelephonyManager.getTelephonyProperty(phoneId,
-                    TelephonyProperties.PROPERTY_INECM_MODE, null);
-            //String inEcm = SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE);
-            if (Boolean.parseBoolean(inEcm)) {
-                try {
-                    startActivityForResult(
-                            new Intent(TelephonyIntents.ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS, null),
-                            REQUEST_CODE_ECM_EXIT_DIALOG);
-                    return;
-                } catch (ActivityNotFoundException e) {
-                    // continue to send message
-                    Log.e(TAG, "Cannot find EmergencyCallbackModeExitDialog", e);
-                }
-            }
-        }
-
-        if (mOpComposeExt.sendMessage(mWorkingMessage.mOpWorkingMessageExt, mSelectedSubId)) {
-            return;
-        }
-
-        /// M: Fix bug ALPS00407718
-        if (mExitOnSent) {
-            hideKeyboard();
-        }
-        /// M: Code analyze 011, use another method for performance.(update mDebugRecipients)@{
-        ContactList contactList = isRecipientsEditorVisible() ?
-                mRecipientsEditor.constructContactsFromInput(false) : getRecipients();
-        mDebugRecipients = contactList.serialize();
-        /// @}
-
-        if (!mSendingMessage) {
-            if (LogTag.SEVERE_WARNING) {
-                String sendingRecipients = mConversation.getRecipients().serialize();
-                if (!sendingRecipients.equals(mDebugRecipients)) {
-                    String workingRecipients = mWorkingMessage.getWorkingRecipients();
-                    if (!mDebugRecipients.equals(workingRecipients)) {
-                    }
-                }
-                sanityCheckConversation();
-            }
-
-            // send can change the recipients. Make sure we remove the listeners first and then add
-            // them back once the recipient list has settled.
-            removeRecipientsListeners();
-
-            /// M: If msg can be sent, AttachmentEditor can not be reponsed.
-            mClickCanResponse = false;
-            /// M:the method is extend to support gemini @{
-            mWorkingMessage.send(mDebugRecipients, mSelectedSubId);
-            MmsLog.d(TAG, "Compose.sendMessage(): after sendMessage. mConversation.ThreadId="
-                    + mConversation.getThreadId()
-                    + ", MessageCount=" + mConversation.getMessageCount());
-            /// @}
-            /** M:
-             *   If message count is 0, it should be a new message.
-             *   After tap send button, the sent message will have draft flag for a short time.
-             *   That means, the message count will be 0 for a short time.
-             *   If user tap home key in this short time, it will change the
-             *   conversation id to 0 in the method savedraft().
-             *   When the screen is back to Message Composer, it will
-             *   query database with thread(conversation) id 0.
-             *   So, it will query for nothing. The screen is always blank.
-             *   Fix this issue by force to set message count with 1.
-             */
-            if (mConversation.getMessageCount() == 0) {
-                mConversation.setMessageCount(1);
-            }
-            /// M: @{
-            mWaitingForSendMessage = true;
-            /// M: when tap fail icon, don't add recipients
-            isInitRecipientsEditor = false;
-            mMsgListView.setVisibility(View.VISIBLE);
-            /// @}
-
-            mSentMessage = true;
-            mSendingMessage = true;
-            addRecipientsListeners();
-
-            mScrollOnSend = true;   // in the next onQueryComplete, scroll the list to the end.
-            // M: reset mCutRecipients
-            mCutRecipients = null;
-        }
-        // But bail out if we are supposed to exit after the message is sent.
-        if (mExitOnSent) {
-            /// M: fix bug ALPS00722349, update thread after forward message, avoid conversation
-            /// draft state become abnormal.
-            boolean isChecked = mConversation.isChecked();
-            mConversation = Conversation.upDateThread(getApplicationContext(),
-                    mConversation.getThreadId(), false);
-            mConversation.setIsChecked(isChecked);
-            ///M: add for guarantee the message sent. @{
-            mUiHandler.postDelayed(new Runnable() {
-                @Override
-                public void run() {
-                    finish();
-                }
-            }, 150);
-            /// @}
-        }
-    }
-
-    private void resetMessage() {
-        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            log("resetMessage");
-        }
-
-        /// M: should hide RecipientsEditor before TextEditor requestFocus. To avoid do
-        /// afterTextChange after message sent.
-        hideRecipientEditor();
-        updateTitle(mConversation.getRecipients());
-
-        // Make the attachment editor hide its view.
-        mAttachmentEditor.hideView();
-//            mAttachmentEditorScrollView.setVisibility(View.GONE);
-        ///M: change the order between Editor.requestFocus & showSubjectEditor
-        /// for fix issue ALPS00569570 @{
-        // Focus to the text editor.
-        mTextEditor.requestFocus();
-
-        // Hide the subject editor.
-        showSubjectEditor(false);
-        /// @}
-
-        mOpComposeExt.resetMessage();
-
-        // We have to remove the text change listener while the text editor gets cleared and
-        // we subsequently turn the message back into SMS. When the listener is listening while
-        // doing the clearing, it's fighting to update its counts and itself try and turn
-        // the message one way or the other.
-        mTextEditor.removeTextChangedListener(mTextEditorWatcher);
-
-        // Clear the text box.
-        TextKeyListener.clear(mTextEditor.getText());
-
-        mWorkingMessage.clearConversation(mConversation, false);
-        mWorkingMessage = WorkingMessage.createEmpty(this);
-        mWorkingMessage.setConversation(mConversation);
-
-
-
-        if ((mMessageSubId == Settings.System.DEFAULT_SIM_SETTING_ALWAYS_ASK
-                || mMessageSubId == Settings.System.DEFAULT_SIM_NOT_SET)) {
-            mSelectedSubId = 0;
-        }
-
-        drawBottomPanel();
-
-        // "Or not", in this case.
-        updateSendButtonState();
-        // add for ipmessage
-        mIpCompose.onIpResetMessage();
-        // Our changes are done. Let the listener respond to text changes once again.
-        mTextEditor.removeTextChangedListener(mTextEditorWatcher);
-        mTextEditor.addTextChangedListener(mTextEditorWatcher);
-
-        // Close the soft on-screen keyboard if we're in landscape mode so the user can see the
-        // conversation.
-        ///M: but when the device was tablet, we can't hide the IME
-        boolean isTablet = getResources().getBoolean(R.bool.isTablet);
-        if (mIsLandscape && !isTablet) {
-            hideKeyboard();
-        }
-
-        mLastRecipientCount = 0;
-        mSendingMessage = false;
-        invalidateOptionsMenu();
-        /// M: update list, this must put after hideRecipientEditor(); to avoid a bug.
-        startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 0);
-        /// M: reset flags
-        mClickCanResponse = true;
-   }
-
-    private void hideKeyboard() {
-        MmsLog.d(TAG, "hideKeyboard()");
-        InputMethodManager inputMethodManager =
-            (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
-        inputMethodManager.hideSoftInputFromWindow(mTextEditor.getWindowToken(), 0);
-    }
-
-    public void updateSendButtonState() {
-        boolean enable = false;
-        if (Log.isLoggable(TAG, Log.VERBOSE)) {
-            MmsLog.v(TAG, "lzd updateSendButtonState(): isPreparedForSending = "
-                    + isPreparedForSending());
-        }
-        if (isPreparedForSending()) {
-            /// M: Code analyze 049, Update send button or attachment editor state.@{
-            MmsLog.i(TAG, "updateSendButtonState(): mSubCount = " + mSubCount
-                    + " hasSlideshow = " + mWorkingMessage.hasSlideshow());
-            if (mSubCount > 0) {
-                // When the type of attachment is slideshow, we should
-                // also hide the 'Send' button since the slideshow view
-                // already has a 'Send' button embedded.
-                if (!mWorkingMessage.hasSlideshow()) {
-                    enable = true;
-                } else {
-                    mAttachmentEditor.setCanSend(true);
-                }
-            }
-        } else {
-            // / @}
-            mAttachmentEditor.setCanSend(false);
-        }
-
-        boolean requiresMms = mWorkingMessage.requiresMms();
-
-        if (mOpComposeExt.updateSendButton(enable, mSubCount, requiresMms,
-                                           mWorkingMessage.hasSlideshow())) {
-            return;
-        }
-
-        View sendButton = showSmsOrMmsSendButton(requiresMms);
-        if (!requiresMms && (recipientCount() > MmsConfig.getSmsRecipientLimit())) {
-            enable = false;
-        }
-        if (!MmsConfig.isSmsEnabled(this)) {
-            enable = false;
-        }
-        if (MessageUtils.isUseSubSimulator()) {
-            enable = true;
-        }
-        if (sendButton != null) {
-            sendButton.setEnabled(enable);
-            sendButton.setFocusable(enable);
-        }
-    }
-
-    private long getMessageDate(Uri uri) {
-        if (uri != null) {
-            Cursor cursor = SqliteWrapper.query(this, mContentResolver,
-                    uri, new String[] { Mms.DATE }, null, null, null);
-            if (cursor != null) {
-                try {
-                    if ((cursor.getCount() == 1) && cursor.moveToFirst()) {
-                        return cursor.getLong(0) * 1000L;
-                    }
-                } finally {
-                    cursor.close();
-                }
-            }
-        }
-        return NO_DATE_FOR_DIALOG;
-    }
-
-/// M: @{
-//    private void initActivityState(Intent intent) {
-//        // If we have been passed a thread_id, use that to find our conversation.
-//        long threadId = intent.getLongExtra("thread_id", 0);
-//        if (threadId > 0) {
-//            if (LogTag.VERBOSE) log("get mConversation by threadId " + threadId);
-//            mConversation = Conversation.get(this, threadId, false);
-//        } else {
-//            Uri intentData = intent.getData();
-//            if (intentData != null) {
-//                // try to get a conversation based on the data URI passed to our intent.
-//                if (LogTag.VERBOSE) log("get mConversation by intentData " + intentData);
-//                mConversation = Conversation.get(this, intentData, false);
-//                mWorkingMessage.setText(getBody(intentData));
-//            } else {
-//                // special intent extra parameter to specify the address
-//                String address = intent.getStringExtra("address");
-//                if (!TextUtils.isEmpty(address)) {
-//                    if (LogTag.VERBOSE) log("get mConversation by address " + address);
-//                    mConversation = Conversation.get(this, ContactList.getByNumbers(address,
-//                            false /* don't block */, true /* replace number */), false);
-//                } else {
-//                    if (LogTag.VERBOSE) log("create new conversation");
-//                    mConversation = Conversation.createNew(this);
-//                }
-//            }
-//        }
-//        addRecipientsListeners();
-//
-//        mExitOnSent = intent.getBooleanExtra("exit_on_sent", false);
-//        if (intent.hasExtra("sms_body")) {
-//            mWorkingMessage.setText(intent.getStringExtra("sms_body"));
-//        }
-//        mWorkingMessage.setSubject(intent.getStringExtra("subject"), false);
-//    }
-    private void initActivityState(Bundle bundle) {
-        Intent intent = getIntent();
-        /// M: Code analyze 033, Save some useful information in order to restore the draft when
-        /// activity restarting.@{
-        mIsTooManyRecipients = false;
-        if (bundle != null) {
-            mCompressingImage = bundle.getBoolean("compressing_image", false);
-            String recipientsStr = bundle.getString("recipients");
-            int recipientCount = 0;
-            if (recipientsStr != null) {
-                recipientCount = recipientsStr.split(";").length;
-                mConversation = Conversation.get(getApplicationContext(),
-                    ContactList.getByNumbers(recipientsStr,
-                            false /* don't block */, true /* replace number */), false);
-            } else {
-                Long threadId = bundle.getLong("thread", 0);
-                mConversation = Conversation.get(getApplicationContext(), threadId, false);
-            }
-            // M: fix bug ALPS00352078
-            mWorkingMessage.setConversation(mConversation);
-
-            mExitOnSent = bundle.getBoolean(KEY_EXIT_ON_SENT, false);
-            mForwardMessageMode = bundle.getBoolean(KEY_FORWARDED_MESSAGE, false);
-
-            mWorkingMessage.readStateFromBundle(bundle);
-            /// M: Code analyze 010, Support dirtory mode. @{
-            if (FolderModeUtils.getMmsDirMode()) {
-                mExitOnSent = true;
-            }
-            /// @}
-            if (!mCompressingImage && mConversation.hasDraft()
-                    && mConversation.getMessageCount() == 0) {
-                if (!mWorkingMessage.requiresMms()) {
-                    Log.w(TAG, "delete sms draft");
-                    mWorkingMessage.asyncDeleteDraftSmsMessage(mConversation);
-                } else {
-                    if (mWorkingMessage.getSlideshow() != null
-                            && mWorkingMessage.getSlideshow().size() == 1
-                            && !mWorkingMessage.getSlideshow().get(0).hasAudio()
-                            && !mWorkingMessage.getSlideshow().get(0).hasImage()
-                            && !mWorkingMessage.getSlideshow().get(0).hasVideo()
-                            && mWorkingMessage.getSlideshow().sizeOfFilesAttach() == 0) {
-                        mWorkingMessage.asyncDeleteDraftMmsMessage(mConversation);
-                        mWorkingMessage.removeAllFileAttaches();
-                        mWorkingMessage.removeAttachment(false);
-                    }
-                }
-                mWorkingMessage.clearConversation(mConversation, true);
-            }
-            if (recipientCount > RECIPIENTS_LIMIT_FOR_SMS) {
-                mIsTooManyRecipients = true;
-            }
-            mCompressingImage = false;
-
-            mAppendAttachmentSign = bundle.getBoolean(KEY_APPEND_MESSAGE, true);
-            MmsLog.d(TAG, "initActivityState mAppendAttachmentSign : " + mAppendAttachmentSign);
-            /// @}
-            return;
-        }
-        /// M: Code analyze 019, Add vcard attachment.  @{
-        long[] contactsIds = VCardUtils.getContactsIds(
-                intent.getStringExtra("multi_export_contacts"));
-        /// @}
-        // If we have been passed a thread_id, use that to find our conversation.
-        long threadId = intent.getLongExtra("thread_id", 0);
-        if (threadId > 0) {
-            if (LogTag.VERBOSE) log("get mConversation by threadId " + threadId);
-            mConversation = Conversation.get(getApplicationContext(), threadId, false);
-        /// M: Code analyze 019, Add vcard attachment.  @{
-        } else if (contactsIds != null && contactsIds.length > 0) {
-            //addTextVCard(contactsIds);
-            addTextVCardAsync(contactsIds);
-            mConversation = Conversation.createNew(getApplicationContext());
-            return;
-        /// @}
-        } else {
-            Uri intentData = intent.getData();
-            /// M: Code analyze 034, If intent is SEND,just create a new empty thread,
-            /// otherwise Conversation.get() will throw exception.
-            String action = intent.getAction();
-            if (intentData != null && (TextUtils.isEmpty(action) ||
-                            !action.equals(Intent.ACTION_SEND))) {
-                /// M: group-contact send message
-                // try to get a conversation based on the data URI passed to our intent.
-                if (intentData.getPathSegments().size() < 2) {
-                    mConversation = mConversation.get(getApplicationContext(),
-                            ContactList.getByNumbers(
-                           getStringForMultipleRecipients(Conversation.getRecipients(intentData)),
-                                 false /* don't block */, true /* replace number */), false);
-                } else {
-                    mConversation = Conversation.get(getApplicationContext(), intentData, false);
-                }
-                /// @}
-                mWorkingMessage.setText(getBody(intentData));
-            } else {
-                // special intent extra parameter to specify the address
-                String address = intent.getStringExtra("address");
-                if (!TextUtils.isEmpty(address)) {
-                    if (LogTag.VERBOSE) log("get mConversation by address ");
-                    mConversation = Conversation.get(getApplicationContext(),
-                            ContactList.getByNumbers(address,
-                            false /* don't block */, true /* replace number */), false);
-                } else {
-                    if (LogTag.VERBOSE) log("create new conversation");
-                    mConversation = Conversation.createNew(getApplicationContext());
-                }
-            }
-        }
-        //addRecipientsListeners();
-        updateThreadIdIfRunning();
-
-        mExitOnSent = intent.getBooleanExtra(KEY_EXIT_ON_SENT, false);
-        mForwardMessageMode = intent.getBooleanExtra(KEY_FORWARDED_MESSAGE, false);
-        if (intent.hasExtra("sms_body")) {
-            /// M: Code analyze 017, Handle forwarded message.(see:forwardMessage()).
-            /// Forward sms message and set sms body.@{
-            String sms_body = intent.getStringExtra("sms_body");
-            /// M: Modify for ALPS00759207
-            mWorkingMessage.setText(sms_body);
-            /// @}
-        }
-        mWorkingMessage.setSubject(intent.getStringExtra("subject"), false);
-
-        /// M: Code analyze 010, Support dirtory mode. @{
-        if (FolderModeUtils.getMmsDirMode()) {
-            mExitOnSent = true;
-        }
-        /// @}
-        mOpComposeExt.initActivityState(intent);
-    }
-
-    private void initFocus() {
-        if (!mIsKeyboardOpen) {
-            return;
-        }
-
-        mOpComposeExt.initFocus();
-
-        // If the recipients editor is visible, there is nothing in it,
-        // and the text editor is not already focused, focus the
-        // recipients editor.
-        if (isRecipientsEditorVisible()
-                && TextUtils.isEmpty(mRecipientsEditor.getText())
-                && !mTextEditor.isFocused()) {
-            mRecipientsEditor.requestFocus();
-            return;
-        }
-
-        // If we decided not to focus the recipients editor, focus the text editor.
-        if (mSubjectTextEditor == null
-                || (mSubjectTextEditor != null && !mSubjectTextEditor.isFocused())) {
-            if ((mBottomPanel != null) && (mBottomPanel.getVisibility() == View.VISIBLE)) {
-                mTextEditor.requestFocus();
-            }
-        }
-    }
-
-    private final MessageListAdapter.OnDataSetChangedListener
-                    mDataSetChangedListener = new MessageListAdapter.OnDataSetChangedListener() {
-        @Override
-        public void onDataSetChanged(MessageListAdapter adapter) {
-            mPossiblePendingNotification = true;
-        }
-
-        @Override
-        public void onContentChanged(MessageListAdapter adapter) {
-        /// M: @{
-            if (mMsgListAdapter != null &&
-                mMsgListAdapter.getOnDataSetChangedListener() != null) {
-                MmsLog.d(TAG, "OnDataSetChangedListener is not cleared");
-                startMsgListQuery();
-            } else {
-                MmsLog.d(TAG, "OnDataSetChangedListener is cleared");
-            }
-        /// @}
-        }
-    };
-
-    private void checkPendingNotification() {
-        if (mPossiblePendingNotification && hasWindowFocus()) {
-            /// M: add for ip message, remove mark as read
-//            mConversation.markAsRead();
-            mPossiblePendingNotification = false;
-        }
-    }
-
-    /**
-     * smoothScrollToEnd will scroll the message list to the bottom if the list is already near
-     * the bottom. Typically this is called to smooth scroll a newly received message into view.
-     * It's also called when sending to scroll the list to the bottom, regardless of where it is,
-     * so the user can see the just sent message. This function is also called when the message
-     * list view changes size because the keyboard state changed or the compose message field grew.
-     *
-     * @param force always scroll to the bottom regardless of current list position
-     * @param listSizeChange the amount the message list view size has vertically changed
-     */
-    private void smoothScrollToEnd(boolean force, int listSizeChange) {
-        int lastItemVisible = mMsgListView.getLastVisiblePosition();
-        int lastItemInList = mMsgListAdapter.getCount() - 1;
-        if (lastItemVisible < 0 || lastItemInList < 0) {
-            if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                Log.v(TAG, "smoothScrollToEnd: lastItemVisible=" + lastItemVisible +
-                        ", lastItemInList=" + lastItemInList +
-                        ", mMsgListView not ready");
-            }
-            return;
-        }
-
-        View lastChildVisible =
-                mMsgListView.getChildAt(lastItemVisible - mMsgListView.getFirstVisiblePosition());
-        int lastVisibleItemBottom = 0;
-        int lastVisibleItemHeight = 0;
-        if (lastChildVisible != null) {
-            lastVisibleItemBottom = lastChildVisible.getBottom();
-            lastVisibleItemHeight = lastChildVisible.getHeight();
-        }
-
-        if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-            Log.v(TAG, "smoothScrollToEnd newPosition: " + lastItemInList +
-                    " mLastSmoothScrollPosition: " + mLastSmoothScrollPosition +
-                    " first: " + mMsgListView.getFirstVisiblePosition() +
-                    " lastItemVisible: " + lastItemVisible +
-                    " lastVisibleItemBottom: " + lastVisibleItemBottom +
-                    " lastVisibleItemBottom + listSizeChange: " +
-                    (lastVisibleItemBottom + listSizeChange) +
-                    " mMsgListView.getHeight() - mMsgListView.getPaddingBottom(): " +
-                    (mMsgListView.getHeight() - mMsgListView.getPaddingBottom()) +
-                    " listSizeChange: " + listSizeChange);
-        }
-        // Only scroll if the list if we're responding to a newly sent message (force == true) or
-        // the list is already scrolled to the end. This code also has to handle the case where
-        // the listview has changed size (from the keyboard coming up or down or the message entry
-        // field growing/shrinking) and it uses that grow/shrink factor in listSizeChange to
-        // compute whether the list was at the end before the resize took place.
-        // For example, when the keyboard comes up, listSizeChange will be negative, something
-        // like -524. The lastChild listitem's bottom value will be the old value before the
-        // keyboard became visible but the size of the list will have changed. The test below
-        // add listSizeChange to bottom to figure out if the old position was already scrolled
-        // to the bottom. We also scroll the list if the last item is taller than the size of the
-        // list. This happens when the keyboard is up and the last item is an mms with an
-        // attachment thumbnail, such as picture. In this situation, we want to scroll the list so
-        // the bottom of the thumbnail is visible and the top of the item is scroll off the screen.
-        int listHeight = mMsgListView.getHeight();
-        boolean lastItemTooTall = lastVisibleItemHeight > listHeight;
-        boolean willScroll = force ||
-                ((listSizeChange != 0 || lastItemInList != mLastSmoothScrollPosition) &&
-                lastVisibleItemBottom + listSizeChange <=
-                    listHeight - mMsgListView.getPaddingBottom());
-        if (willScroll || (lastItemTooTall && lastItemInList == lastItemVisible)) {
-            if (Math.abs(listSizeChange) > SMOOTH_SCROLL_THRESHOLD) {
-                // When the keyboard comes up, the window manager initiates a cross fade
-                // animation that conflicts with smooth scroll. Handle that case by jumping the
-                // list directly to the end.
-                if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                    Log.v(TAG, "keyboard state changed. setSelection=" + lastItemInList);
-                }
-                if (lastItemTooTall) {
-                    // If the height of the last item is taller than the whole height of the list,
-                    // we need to scroll that item so that its top is negative or above the top of
-                    // the list. That way, the bottom of the last item will be exposed above the
-                    // keyboard.
-                    mMsgListView.setSelectionFromTop(lastItemInList,
-                            listHeight - lastVisibleItemHeight);
-                } else {
-                    mMsgListView.setSelection(lastItemInList);
-                }
-            } else if (lastItemInList - lastItemVisible > MAX_ITEMS_TO_INVOKE_SCROLL_SHORTCUT) {
-                if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                    Log.v(TAG, "too many to scroll, setSelection=" + lastItemInList);
-                }
-                mMsgListView.setSelection(lastItemInList);
-            } else {
-                if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                    Log.v(TAG, "smooth scroll to " + lastItemInList);
-                }
-                if (lastItemTooTall) {
-                    // If the height of the last item is taller than the whole height of the list,
-                    // we need to scroll that item so that its top is negative or above the top of
-                    // the list. That way, the bottom of the last item will be exposed above the
-                    // keyboard. We should use smoothScrollToPositionFromTop here, but it doesn't
-                    // seem to work -- the list ends up scrolling to a random position.
-                    mMsgListView.setSelectionFromTop(lastItemInList,
-                            listHeight - lastVisibleItemHeight);
-                } else {
-                    mMsgListView.smoothScrollToPosition(lastItemInList);
-                }
-                mLastSmoothScrollPosition = lastItemInList;
-            }
-        }
-    }
-
-    private final class BackgroundQueryHandler extends ConversationQueryHandler {
-        public BackgroundQueryHandler(ContentResolver contentResolver) {
-            super(contentResolver);
-        }
-
-        @Override
-        protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
-            /// M: @{
-            MmsLog.d(TAG, "onQueryComplete, token=" + token + "activity="
-                    + ComposeMessageActivity.this);
-            /// @}
-            switch(token) {
-                case MESSAGE_LIST_QUERY_TOKEN:
-                    /// @}
-                    if (cursor == null) {
-                        MmsLog.w(TAG, "onQueryComplete, cursor is null.");
-                        return;
-                    }
-                    /// M: If adapter or listener has been cleared, just close this cursor@{
-                    if (mMsgListAdapter == null) {
-                        MmsLog.w(TAG, "onQueryComplete, mMsgListAdapter is null.");
-                        cursor.close();
-                        return;
-                    }
-                    if (mMsgListAdapter.getOnDataSetChangedListener() == null) {
-                        MmsLog.d(TAG, "OnDataSetChangedListener is cleared");
-                        cursor.close();
-                        return;
-                    }
-                    /// @}
-                    if (isRecipientsEditorVisible()) {
-                        MmsLog.d(TAG, "RecipientEditor visible, it means no messagelistItem!");
-                        return;
-                    }
-                    // check consistency between the query result and 'mConversation'
-                    long tid = (Long) cookie;
-
-                    if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                        log("##### onQueryComplete: msg history result for threadId " + tid);
-                    }
-                    if (tid != mConversation.getThreadId()) {
-                        log("onQueryComplete: msg history query result is for threadId " +
-                                tid + ", but mConversation has threadId " +
-                                mConversation.getThreadId() + " starting a new query");
-                        if (cursor != null) {
-                            cursor.close();
-                        }
-                        startMsgListQuery();
-                        return;
-                    }
-
-                    // check consistency b/t mConversation & mWorkingMessage.mConversation
-                    ComposeMessageActivity.this.sanityCheckConversation();
-
-                    int newSelectionPos = -1;
-                    long targetMsgId = getIntent().getLongExtra("select_id", -1);
-                    String targetMsgType = getIntent().getStringExtra("msg_type");
-                    if (targetMsgId != -1) {
-                      if (cursor != null) {
-                        cursor.moveToPosition(-1);
-                        while (cursor.moveToNext()) {
-                            long msgId = cursor.getLong(COLUMN_ID);
-                            String messageType = cursor.getString(COLUMN_MSG_TYPE);
-                            if (msgId == targetMsgId && messageType.equals(targetMsgType)) {
-                                newSelectionPos = cursor.getPosition();
-                                getIntent().putExtra("select_id", -1);
-                                break;
-                            }
-                          }
-                        }
-                    } else if (mSavedScrollPosition != -1) {
-                        // mSavedScrollPosition is set when this activity pauses. If equals maxint,
-                        // it means the message list was scrolled to the end. Meanwhile, messages
-                        // could have been received. When the activity resumes and we were
-                        // previously scrolled to the end, jump the list so any new messages are
-                        // visible.
-                        if (mSavedScrollPosition == Integer.MAX_VALUE) {
-                            int cnt = mMsgListAdapter.getCount();
-                            if (cnt > 0) {
-                                // Have to wait until the adapter is loaded before jumping to
-                                // the end.
-                                newSelectionPos = cnt - 1;
-                                mSavedScrollPosition = -1;
-                            }
-                        } else {
-                            // remember the saved scroll position before the activity is paused.
-                            // reset it after the message list query is done
-                            newSelectionPos = mSavedScrollPosition;
-                            mSavedScrollPosition = -1;
-                        }
-                    }
-                    /// M: Code analyze 047, Extra uri from message body and get number from uri.
-                    /// Then use this number to update contact cache. @{
-                    if (mNeedUpdateContactForMessageContent) {
-                        updateContactCache(cursor);
-                        mNeedUpdateContactForMessageContent = false;
-                    }
-                    /// @}
-
-                    mMsgListAdapter.changeCursor(cursor);
-
-                    if (newSelectionPos != -1) {
-                        /// M: remove bug ALPS00404266 patch, keep item top @{
-                        mMsgListView.setSelection(newSelectionPos);     // jump the list to the pos
-                        //View child = mMsgListView.getChildAt(newSelectionPos);
-                        //int top = 0;
-                        //if (child != null) {
-                        //    top = child.getTop();
-                        //}
-                       // mMsgListView.setSelectionFromTop(newSelectionPos, top);
-                        /// @}
-                    } else {
-                        /// M: google jb.mr1 patch, Conversation should scroll to the bottom
-                        /// when incoming received @{
-                        int count = mMsgListAdapter.getCount();
-                        long lastMsgId = 0;
-                        if (cursor != null && count > 0) {
-                            cursor.moveToLast();
-                            lastMsgId = cursor.getLong(COLUMN_ID);
-                        }
-                        // mScrollOnSend is set when we send a message. We always want to scroll
-                        // the message list to the end when we send a message, but have to wait
-                        // until the DB has changed. We also want to scroll the list when a
-                        // new message has arrived.
-                        smoothScrollToEnd(mScrollOnSend || lastMsgId != mLastMessageId, 0);
-                        mLastMessageId = lastMsgId;
-                        /// @}
-                        mScrollOnSend = false;
-                    }
-                    // Adjust the conversation's message count to match reality. The
-                    // conversation's message count is eventually used in
-                    // WorkingMessage.clearConversation to determine whether to delete
-                    // the conversation or not.
-                    if (mMsgListAdapter.getCount() == 0 && mWaitingForSendMessage) {
-                        mConversation.setMessageCount(1);
-                    } else {
-                        mConversation.setMessageCount(mMsgListAdapter.getCount());
-                    }
-                    updateThreadIdIfRunning();
-                    cursor.moveToPosition(-1);
-                    while (cursor.moveToNext()) {
-                        int read = cursor.getInt(MessageListAdapter.COLUMN_MMS_READ);
-                        read += cursor.getInt(MessageListAdapter.COLUMN_SMS_READ);
-                        if (read == 0) {
-                            mConversation.setHasUnreadMessages(true);
-                            break;
-                        }
-                    }
-                    MmsLog.d(TAG, "onQueryComplete(): Conversation.ThreadId="
-                            + mConversation.getThreadId()
-                            + ", MessageCount=" + mConversation.getMessageCount());
-
-                    // Once we have completed the query for the message history, if
-                    // there is nothing in the cursor and we are not composing a new
-                    // message, we must be editing a draft in a new conversation (unless
-                    // mSentMessage is true).
-                    // Show the recipients editor to give the user a chance to add
-                    // more people before the conversation begins.
-                    if (cursor != null && cursor.getCount() == 0
-                            && !isRecipientsEditorVisible() && !mSentMessage) {
-                        /// M: fix bug ALPS01098902, avoding checkObsoleteThreadId in this case
-                        if (mSubSelectDialog != null && mSubSelectDialog.isShowing()
-                                && mOldThreadID > 0 && mCutRecipients != null) {
-                            mIsSameConv = false;
-                        }
-                        initRecipientsEditor(null);
-                    }
-
-                    // FIXME: freshing layout changes the focused view to an unexpected
-                    // one, set it back to TextEditor forcely.
-                    if (mSubjectTextEditor == null || (mSubjectTextEditor != null
-                            && !mSubjectTextEditor.isFocused())) {
-                        mTextEditor.requestFocus();
-                    }
-
-                    invalidateOptionsMenu();    // some menu items depend on the adapter's count
-                    if (!mIsActivityStoped) {
-                        mConversation.blockMarkAsRead(false);
-                        mConversation.markAsRead();
-                    }
-                    return;
-
-                case MESSAGE_LIST_QUERY_AFTER_DELETE_TOKEN:
-                    // check consistency between the query result and 'mConversation'
-                    tid = (Long) cookie;
-
-                    if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                        log("## onQueryComplete (after delete): msg history result for threadId "
-                                + tid);
-                    }
-                    if (cursor == null) {
-                        return;
-                    }
-                    if (tid > 0 && cursor.getCount() == 0) {
-                        // We just deleted the last message and the thread will get deleted
-                        // by a trigger in the database. Clear the threadId so next time we
-                        // need the threadId a new thread will get created.
-                        log("##### MESSAGE_LIST_QUERY_AFTER_DELETE_TOKEN clearing thread id: "
-                                + tid);
-                        Conversation conv = Conversation.get(getApplicationContext(), tid,
-                                false);
-                        if (conv != null) {
-                            conv.clearThreadId();
-                            conv.setDraftState(false);
-                        }
-                    }
-                    cursor.close();
-                    break;
-                default:
-                    MmsLog.w(TAG, "unknown token.");
-                    break;
-            }
-        }
-
-        @Override
-        protected void onDeleteComplete(int token, Object cookie, int result) {
-            super.onDeleteComplete(token, cookie, result);
-            /// M: fix bug ALPS00351620; for requery searchactivity.
-            SearchActivity.setNeedRequery();
-            switch(token) {
-                case ConversationList.DELETE_CONVERSATION_TOKEN:
-                    /// M: @{
-                    /*
-                    mConversation.setMessageCount(0);
-                    // fall through
-                    */
-                    try {
-                        if (TelephonyManagerEx.getDefault().isTestIccCard(0)) {
-                            MmsLog.d(TAG, "All threads has been deleted, send notification..");
-                            SmsManager
-                                .getSmsManagerForSubscriptionId(
-                                   SmsReceiverService.sLastIncomingSmsSubId)
-                                       .getDefault().setSmsMemoryStatus(true);
-                        }
-                    } catch (Exception ex) {
-                        MmsLog.e(TAG, " " + ex.getMessage());
-                    }
-                    // Update the notification for new messages since they
-                    // may be deleted.
-                    MessagingNotification.nonBlockingUpdateNewMessageIndicator(
-                            ComposeMessageActivity.this, MessagingNotification.THREAD_NONE, false);
-                    // Update the notification for failed messages since they
-                    // may be deleted.
-                    updateSendFailedNotification();
-                    MessagingNotification.updateDownloadFailedNotification(
-                            ComposeMessageActivity.this);
-                    break;
-                    /// @}
-                case DELETE_MESSAGE_TOKEN:
-                    /// M: google jb.mr1 patch, Conversation should scroll to the bottom
-                    /// when incoming received @{
-                    if (cookie instanceof Boolean && ((Boolean) cookie).booleanValue()) {
-                        // If we just deleted the last message, reset the saved id.
-                        mLastMessageId = 0;
-                    }
-                    /// @}
-                    /// M: Code analyze 027,Add for deleting one message.@{
-                    MmsLog.d(TAG, "onDeleteComplete(): before update mConversation, ThreadId = "
-                            + mConversation.getThreadId());
-                    ContactList recipients = getRecipients();
-                    mConversation = Conversation.upDateThread(getApplicationContext(),
-                            mConversation.getThreadId(), false);
-                    mThreadCountManager.isFull(mThreadId, ComposeMessageActivity.this,
-                            ThreadCountManager.OP_FLAG_DECREASE);
-                    /// @}
-                    // Update the notification for new messages since they
-                    // may be deleted.
-                    MessagingNotification.nonBlockingUpdateNewMessageIndicator(
-                            ComposeMessageActivity.this, MessagingNotification.THREAD_NONE, false);
-                    // Update the notification for failed messages since they
-                    // may be deleted.
-                    updateSendFailedNotification();
-                    /// M: Code analyze 027,Add for deleting one message.@{
-                    MessagingNotification
-                        .updateDownloadFailedNotification(ComposeMessageActivity.this);
-                    MmsLog.d(TAG, "onDeleteComplete(): MessageCount = "
-                            + mConversation.getMessageCount() +
-                            ", ThreadId = " + mConversation.getThreadId());
-                    if (mIpCompose.onDeleteComplete(token)) {
-                        break;
-                    }
-                    if (mConversation.getMessageCount() <= 0
-                            || mConversation.getThreadId() <= 0L) {
-                        mMsgListAdapter.changeCursor(null);
-                        if (needSaveDraft() && (recipients != null)) {
-                            if (!isRecipientsEditorVisible()) {
-                                makeDraftEditable(recipients);
-                            }
-                        } else {
-                            /// M: fix bug for ConversationList select all performance,
-                            /// update selected threads array.@{
-                            ConversationListAdapter.removeSelectedState(mSelectedThreadId);
-                            /// @
-                            finish();
-                        }
-                    }
-                    /// @}
-                    break;
-            }
-            // If we're deleting the whole conversation, throw away
-            // our current working message and bail.
-            if (token == ConversationList.DELETE_CONVERSATION_TOKEN) {
-                ContactList recipients = mConversation.getRecipients();
-                mWorkingMessage.discard();
-
-                // Remove any recipients referenced by this single thread from the
-                // contacts cache. It's possible for two or more threads to reference
-                // the same contact. That's ok if we remove it. We'll recreate that contact
-                // when we init all Conversations below.
-                if (recipients != null) {
-                    for (Contact contact : recipients) {
-                        contact.removeFromCache();
-                    }
-                }
-
-                // Make sure the conversation cache reflects the threads in the DB.
-                Conversation.init(getApplicationContext());
-                finish();
-            } else if (token == DELETE_MESSAGE_TOKEN) {
-                /// M: Code analyze 027,Add for deleting one message.@{
-                // Check to see if we just deleted the last message
-                startMsgListQuery(MESSAGE_LIST_QUERY_AFTER_DELETE_TOKEN, 0);
-                /// @}
-            }
-        }
-    }
-
-    @Override
-    public void onUpdate(final Contact updated) {
-        /** M:
-         * In a bad case ANR will happen. When many contact is update, onUpdate will be
-         * invoked very frequently,and the code here will run many times. In mRecipientsEditor,
-         * if there are 100[can be more?] recipients,
-         * mRecipientsEditor.constructContactsFromInput is time cost.
-         * ANR may happen if process many this message consequently.
-         * so reduce the frequence, and touch event message have more changces to process.
-         */
-        if (isRecipientsEditorVisible()) {
-            return;
-        }
-        log("[CMA] onUpdate contact updated: " + updated);
-        if (mPrevRunnable != null) {
-            mMessageListItemHandler.removeCallbacks(mPrevRunnable);
-        }
-        mPrevRunnable = new Runnable() {
-            public void run() {
-                ContactList recipients = getRecipients();
-                if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                    MmsLog.vpi(TAG, "[CMA] onUpdate contact updated: " + updated);
-                    MmsLog.vpi(TAG, "[CMA] onUpdate recipients: " + recipients);
-                }
-                updateTitle(recipients);
-                /// M: Contact is modified, update the menu icon of contact.
-                invalidateOptionsMenu();
-
-                // The contact information for one (or more) of the recipients has changed.
-                // Rebuild the message list so each MessageItem will get the last contact info.
-                ComposeMessageActivity.this.mMsgListAdapter.notifyDataSetChanged();
-            }
-        };
-        /// M: Using an existing handler for the post, rather than conjuring up a new one.
-        mMessageListItemHandler.postDelayed(mPrevRunnable, UPDATE_DELAY);
-    }
-
-    private void addRecipientsListeners() {
-        Contact.addListener(this);
-    }
-
-    private void removeRecipientsListeners() {
-        Contact.removeListener(this);
-    }
-
-    public static Intent createIntent(Context context, long threadId) {
-        Intent intent = new Intent(context, ComposeMessageActivity.class);
-
-        if (threadId > 0) {
-            intent.setData(Conversation.getUri(threadId));
-        }
-
-        return intent;
-    }
-
-    private String getBody(Uri uri) {
-        if (uri == null) {
-            return null;
-        }
-        String urlStr = uri.getSchemeSpecificPart();
-        if (!urlStr.contains("?")) {
-            return null;
-        }
-        urlStr = urlStr.substring(urlStr.indexOf('?') + 1);
-        String[] params = urlStr.split("&");
-        for (String p : params) {
-            if (p.startsWith("body=")) {
-                try {
-                    return URLDecoder.decode(p.substring(5), "UTF-8");
-                } catch (UnsupportedEncodingException e) { }
-            }
-        }
-        return null;
-    }
-
-    private void updateThreadIdIfRunning() {
-        if (mIsRunning && mConversation != null) {
-            if (mConversation.getMessageCount() > 0) {
-                MessagingNotification.setCurrentlyDisplayedThreadId(mConversation.getThreadId());
-            } else {
-                MessagingNotification
-                    .setCurrentlyDisplayedThreadId(MessagingNotification.THREAD_NONE);
-            }
-        }
-        // If we're not running, but resume later, the current thread ID will be set in onResume()
-    }
-
-     //////////////////////////////////////////////////////////////////////////////////////
-     // MTK add
-
-     /// M: Code analyze 012, add for multi-delete @{
-     public static final int REQUEST_CODE_FOR_MULTIDELETE  = 110;
-     /// @}
-
-     /// M: Code analyze 025, Add video or audio attachment and check the attachment size.@{
-     public static final int MIN_SIZE_FOR_CAPTURE_VIDEO    = 1024 * 10;  // 10K
-     public static final int MIN_SIZE_FOR_RECORD_AUDIO = 1024 * 5; // 5K
-     // M: fix bug ALPS00354728
-     private boolean mAppendAttachmentSign = true;
-     /// @}
-
-     /// M: Code analyze 014, Add quick text. @{
-     private static final int MENU_ADD_QUICK_TEXT         = 8;
-     private AlertDialog mQuickTextDialog;
-     /// @}
-
-     /// M: Code analyze 015, Add text vcard. @{
-     private static final int MENU_ADD_TEXT_VCARD         = 9;
-     public static final int REQUEST_CODE_TEXT_VCARD       = 22;
-     /// @}
-
-     private static final int MENU_CALL_RECIPIENT_BY_VT  = 10;
-     /// M: Code analyze 016, Add for select text copy. @{
-     private static final int MENU_SELECT_TEXT             = 36;
-     /// @}
-
-     private static final String SIGN_CREATE_AFTER_KILL_BY_SYSTEM = "ForCreateAfterKilledBySystem";
-
-     /// M: Code analyze 017, Handle forwarded message.(see:forwardMessage())@{
-     public static final String SMS_ADDRESS = "sms_address";
-     public static final String SMS_BODY = "sms_body";
-     public static final String FORWARD_MESSAGE = "forwarded_message";
-     /// @}
-
-     // State variable indicating an image is being compressed, which may take a while.
-     private boolean mCompressingImage = false;
-     private int mToastCountForResizeImage = 0; // For indicate whether show toast message for
-                        //resize image or not. If mToastCountForResizeImage equals 0, show toast.
-     /// M: Code analyze 010, Support dirtory mode. @{
-     private int mHomeBox = 0;
-     /// @}
-     private Toast mExceedMessageSizeToast = null;
-
-     /// M: Code analyze 009,Show attachment dialog . @{
-     private SoloAlertDialog mSoloAlertDialog;
-     /// @}
-
-     /// M: Code analyze 047, Extra uri from message body and get number from uri.
-     /// Then use this number to update contact cache. @{
-     private boolean mNeedUpdateContactForMessageContent = true;
-     /// @}
-
-     private boolean  mDrawBottomPanel = false;
-
-     /// M: the member is only used by onUpdate
-     private static final long UPDATE_DELAY = 100L;
-
-     /// M: Code analyze 011, use another method for performance
-     ///(use this to limit the contact query count) @{
-     private static final int UPDATE_LIMIT_LANDSCAPE = 20;
-     private static final int UPDATE_LIMIT_PORTRAIT = 20;
-     /// @}
-
-     ///@ M:fix bug ALPS00871320 tablet has wide space to show more contact
-     private static final int UPDATE_LIMIT_LANDSCAPE_TABLET = 30;
-     private static final int UPDATE_LIMIT_PORTRAIT_TABLET = 30;
-
-     private int getLimitedContact() {
-        boolean isPortrait =
-            getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;
-        int updateLimit = 0;
-
-        boolean isTablet = getResources().getBoolean(R.bool.isTablet);
-        if (isPortrait) {
-            updateLimit = isTablet ? UPDATE_LIMIT_PORTRAIT_TABLET
-                    : UPDATE_LIMIT_PORTRAIT;
-        } else {
-            updateLimit = isTablet ? UPDATE_LIMIT_LANDSCAPE_TABLET
-                    : UPDATE_LIMIT_LANDSCAPE;
-        }
-        return updateLimit;
-     }
-
-     ///@
-     private Runnable mPrevRunnable;
-     private boolean mNeedSaveAsMms = false;
-
-     /// M: Code analyze 038, If the user is editing slideshow now.
-     /// Do not allow the activity finish but return directly when back key is entered. @{
-     private boolean mIsEditingSlideshow = false;
-     /// @}
-
-     /// M: Code analyze 026, If the two clicks are too close. @{
-     private long mAttachClickTime = -1;
-     private long mEditClickTime = -1;
-     /// @}
-
-     // mAudioUri will look like this: content://media/external/images/media
-     private static final String mAudioUri = Audio.Media.getContentUri("external").toString();
-
-     /// M: Code analyze 050, Add scroll listener and touch listener for MessageListView.@{
-     private static int CHANGE_SCROLL_LISTENER_MIN_CURSOR_COUNT = 100;
-     private MyScrollListener mScrollListener = new MyScrollListener(
-             CHANGE_SCROLL_LISTENER_MIN_CURSOR_COUNT, "MessageList_Scroll_Tread");
-     /// @}
-
-     /// M: Code analyze 018, Add ringtone for sound attachment.  @{
-     public static final int REQUEST_CODE_ATTACH_RINGTONE  = 20;
-     /// @}
-
-     /// M: Code analyze 019, Add vcard attachment.  @{
-     public static final int REQUEST_CODE_ATTACH_VCARD       = 21;
-     /// @}
-
-     /// M: Code analyze 020, Add vcalendar attachment.  @{
-     public static final int REQUEST_CODE_ATTACH_VCALENDAR = 25;
-     /// @}
-
-     /// M: Code analyze 021, Copy all valid parts of the attachment(pdu) to SD card.
-     /// This opeartor will be removed to a separate activity.    @{
-     public static final int REQUEST_CODE_MULTI_SAVE       = 23;
-     /// @}
-
-     /// M: Code analyze 022, Add bookmark. @{
-     private static final int MENU_ADD_TO_BOOKMARK         = 35;
-     private ArrayList<String> mURLs = new ArrayList<String>();
-     /// @}
-
-     /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-     private static final int MENU_SAVE_MESSAGE_TO_SUB     = 32;
-     private static final int SUB_SELECT_FOR_SEND_MSG                     = 1;
-     private static final int SUB_SELECT_FOR_SAVE_MSG_TO_SUB             = 2;
-     private static final int MSG_QUIT_SAVE_MESSAGE_THREAD                 = 100;
-     private static final int MSG_SAVE_MESSAGE_TO_SUB                     = 102;
-     private static final int MSG_SAVE_MESSAGE_TO_SUB_AFTER_SELECT_SUB     = 104;
-     private static final int MSG_SAVE_MESSAGE_TO_SUB_SUCCEED             = 106;
-     private static final int MSG_SAVE_MESSAGE_TO_SUB_FAILED_GENERIC     = 108;
-     private static final int MSG_SAVE_MESSAGE_TO_SUB_FAILED_SUB_FULL     = 110;
-
-     private static final String SELECT_TYPE    = "Select_type";
-     private int mSubCount; //The count of current sub cards.  0/1/2
-    private List<SubscriptionInfo> mSubInfoList;
-     private Handler mSaveMsgHandler = null;
-     private Thread mSaveMsgThread = null;
-     private AlertDialog mSubSelectDialog;
-     private int mMessageSubId;
-    private int mAssociatedSubId;
-    private int mSelectedSubId;
-     /// @}
-
-     /// M: Code analyze 006, Control Sub indicator on status bar. @{
-     private StatusBarManager mStatusBarManager;
-     private ComponentName mComponentName;
-     /// @}
-
-     /// M: Code analyze 056,Now,the sms recipient limit is different from mms.
-     /// We can set limit for sms or mms individually. @{
-     private static final int RECIPIENTS_LIMIT_FOR_SMS     = MmsConfig.getSmsRecipientLimit();
-     /// @}
-     private boolean mIsTooManyRecipients;     // Whether the recipients are too many
-
-     /// M: Code analyze 046, Whether the recipientedit control has been initialized. @{
-     private boolean isInitRecipientsEditor = true; // true, init Recip Editor and add recipient;
-                                                   // false, init Recip Editor, but recipient
-     /// @}
-
-     private boolean mWaitingForSendMessage;
-
-     /// M: Code analyze 023, Delete the char value of '\r' . @{
-     private static final String STR_RN = "\\r\\n"; // for "\r\n"
-     private static final String STR_CN = "\n"; // the char value of '\n'
-     /// @}
-     public static boolean mDestroy = false;
-
-     /// M: Code analyze 027,Add for deleting one message.@{
-     private ThreadCountManager mThreadCountManager = ThreadCountManager.getInstance();
-     private Long mThreadId = -1L;
-     /// @}
-
-     /// M: Code analyze 002,  If a new ComposeMessageActivity is created, kill old one
-     private static WeakReference<ComposeMessageActivity> sCompose = null;
-     /// @}
-
-     private static String sTextEditorText;
-     private long mLastThreadIdFromNotification;
-
-     private boolean mSendButtonCanResponse = true;    // can click send button
-     private static final long RESUME_BUTTON_INTERVAL = 1000;
-     private static final int MSG_RESUME_SEND_BUTTON  = 112;
-
-     /// M: Code analyze 024, If the click operator can be responsed. @{
-     boolean mClickCanResponse = true;           // can click button or some view items
-     /// @}
-
-     /// M: Code analyze 013, Get contacts from Contact app . @{
-     // handle NullPointerException in onActivityResult() for pick up recipients
-     private boolean mIsRecipientHasIntentNotHandle = false;
-     private Intent mIntent = null;
-     private boolean misPickContatct = false;
-     /// @}
-
-     /// M: Code analyze 004, Set max height for text editor. @{
-     private HeightChangedLinearLayout mHeightChangedLinearLayout;
-     private static final int mReferencedTextEditorTwoLinesHeight = 65;
-     private static final int mReferencedTextEditorThreeLinesHeight = 110;
-     private static final int mReferencedTextEditorFourLinesHeight    = 140;
-     private static final int mReferencedTextEditorSevenLinesHeight = 224;
-     private static final int mReferencedAttachmentEditorHeight     = 266;
-     private static final int mReferencedMaxHeight                    = 800;
-     private int mCurrentMaxHeight                                    = 800;
-     /// @}
-
-     /// M: Code analyze 042, If you discard the draft message manually.@{
-     private boolean mHasDiscardWorkingMessage = false;
-     /// @}
-
-    /// M: fix bug ALPS00572383, delay show "suggested" on the SelectSubDialog @{
-    private final HashMap<Integer, Integer> mHashSub = new HashMap<Integer, Integer>();
-    private static final int MSG_SELECT_SUB_DIALOG_SHOW = 500;
-    private int mAssociatedSubQueryDone;
-    private int mSelectSubType;
-    /// @}
-
-    private static final int MSG_DISMISS_CONTACT_PICK_DIALOG = 9009;
-    /// M:
-    private Handler mUiHandler = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-
-            if (mOpComposeExt.handleUiMessage(msg, mSubCount, mSelectedSubId)) {
-                return;
-            }
-
-            switch (msg.what) {
-            case MSG_SAVE_MESSAGE_TO_SUB_SUCCEED:
-                Toast.makeText(ComposeMessageActivity.this,
-                        R.string.save_message_to_sim_successful, Toast.LENGTH_SHORT).show();
-                // M: fix for bug ALPS01468873
-                //sendBroadcast(new Intent(ManageSimMessages.ACTION_NOTIFY_SIMMESSAGE_UPDATE));
-                break;
-
-            case MSG_SAVE_MESSAGE_TO_SUB_FAILED_GENERIC:
-                Toast.makeText(ComposeMessageActivity.this,
-                        R.string.save_message_to_sim_unsuccessful, Toast.LENGTH_SHORT).show();
-                break;
-
-            case MSG_SAVE_MESSAGE_TO_SUB_FAILED_SUB_FULL:
-                int slotId = -1;
-                if (mSubCount == 1) {
-                    slotId = mSubInfoList.get(0).getSimSlotIndex();
-                } else {
-                    if (mSelectedSubId > 0) {
-                        SubscriptionInfo subInfo = SubscriptionManager.from(
-                                MmsApp.getApplication()).getActiveSubscriptionInfo(mSelectedSubId);
-                        if (subInfo != null) {
-                            slotId = subInfo.getSimSlotIndex();
-                        }
-                    }
-                }
-                Toast.makeText(ComposeMessageActivity.this,
-                        getString(R.string.save_message_to_sim_unsuccessful) + ". "
-                        + (getString(R.string.sim_full_title)), Toast.LENGTH_SHORT).show();
-                /// @}
-                break;
-            /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-            case MSG_SAVE_MESSAGE_TO_SUB: //multi sub cards
-                String type = (String) msg.obj;
-                long msgId = msg.arg1;
-                saveMessageToSub(type, msgId);
-                break;
-            /// @}
-            case MSG_RESUME_SEND_BUTTON:
-                mSendButtonCanResponse = true;
-                break;
-            case MSG_SELECT_SUB_DIALOG_SHOW:
-                /// M: fix bug ALPS00572383, delay show "suggested" on the SelectSimDialog @{
-                mUiHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        int position = -1;
-                        if (mHashSub != null && mSelectSubType == SUB_SELECT_FOR_SEND_MSG) {
-                            for (int i = 0; i < mHashSub.size(); i++) {
-                                if (mHashSub != null
-                                        && mHashSub.get(i) == mAssociatedSubQueryDone) {
-                                    position = i;
-                                    break;
-                                }
-                            }
-
-                            if (position != -1 && mSubSelectDialog != null
-                                                        && mSubSelectDialog.isShowing()) {
-                                ListView listView = mSubSelectDialog.getListView();
-                                if (listView != null) {
-                                    View view = listView.getChildAt(position);
-                                    if (view != null) {
-                                       TextView textView =
-                                           (TextView) view.findViewById(R.id.sim_suggested);
-                                       if (textView != null) {
-                                           textView.setText(getString(R.string.suggested));
-                                       }
-                                    }
-                                }
-                                mHashSub.clear();
-                            }
-                        }
-                    }
-                });
-                break;
-                /// @}
-            case MSG_DISMISS_CONTACT_PICK_DIALOG:
-                mUiHandler.removeCallbacks(mContactPickRunnable);
-                if (mContactPickDialog != null && mContactPickDialog.isShowing()) {
-                    mContactPickDialog.dismiss();
-                }
-                mContactPickDialog = null;
-                break;
-            default:
-                MmsLog.w(TAG, "inUIHandler msg unhandled.");
-                break;
-            }
-        }
-    };
-
-    /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-    private final class SaveMsgThread extends Thread {
-        private String msgType = null;
-        private long msgId = 0;
-        public SaveMsgThread(String type, long id) {
-            msgType = type;
-            msgId = id;
-        }
-        public void run() {
-            Looper.prepare();
-            if (null != Looper.myLooper()) {
-                mSaveMsgHandler = new SaveMsgHandler(Looper.myLooper());
-            }
-            Message msg = mSaveMsgHandler.obtainMessage(MSG_SAVE_MESSAGE_TO_SUB);
-            msg.arg1 = (int) msgId;
-            msg.obj = msgType;
-            if (mSubCount > 1) { // multi sub cards
-                mUiHandler.sendMessage(msg);
-            } else {
-                mSaveMsgHandler.sendMessage(msg); //single sub card
-            }
-            Looper.loop();
-        }
-    }
-
-    private final class SaveMsgHandler extends Handler {
-        public SaveMsgHandler(Looper looper) {
-            super(looper);
-        }
-
-        @Override
-        public void handleMessage(Message msg) {
-            switch (msg.what) {
-                case MSG_QUIT_SAVE_MESSAGE_THREAD: {
-                    MmsLog.i(MmsApp.TXN_TAG, "exit save message thread");
-                    getLooper().quit();
-                    break;
-                }
-
-                case MSG_SAVE_MESSAGE_TO_SUB: { //single sub card
-                    String type = (String) msg.obj;
-                    long msgId = msg.arg1;
-                    //saveMessageTo(type, msgId);
-                    getMessageAndSaveToSub(type, msgId);
-                    break;
-                }
-
-                case MSG_SAVE_MESSAGE_TO_SUB_AFTER_SELECT_SUB: {
-                    Intent it = (Intent) msg.obj;
-                    getMessageAndSaveToSub(it);
-                    break;
-                }
-
-                default:
-                    break;
-            }
-        }
-    }
-
-    private void saveMessageToSub(String msgType, long msgId) { //multi sub cards exist
-        MmsLog.d(MmsApp.TXN_TAG, "save message to sub, message type:" + msgType
-                + "; message id:" + msgId + "; sub count:" + mSubCount);
-
-        Intent intent = new Intent();
-        intent.putExtra("message_type", msgType);
-        intent.putExtra("message_id", msgId);
-        intent.putExtra(SELECT_TYPE, SUB_SELECT_FOR_SAVE_MSG_TO_SUB);
-        mSelectSubType = SUB_SELECT_FOR_SAVE_MSG_TO_SUB;
-        showSubSelectedDialog(intent);
-    }
-
-    private void getMessageAndSaveToSub(Intent intent) {
-        MmsLog.i(MmsApp.TXN_TAG,
-                "get message and save to sub, selected sub id = " + mSelectedSubId);
-        String msgType = intent.getStringExtra("message_type");
-        long msgId = intent.getLongExtra("message_id", 0);
-        if (msgType == null) {
-            //mSaveMsgHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SIM_FAILED_GENERIC);
-            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SUB_FAILED_GENERIC);
-            return;
-        }
-        getMessageAndSaveToSub(msgType, msgId);
-    }
-
-    private void getMessageAndSaveToSub(String msgType, long msgId) {
-        int result = 0;
-        ///M: ALPS00726802, get the orignal position when long click this item
-        Cursor cursor = mMsgListAdapter.getCursor();
-        if (mClickedItemPosition >= 0 && mClickedItemPosition < cursor.getCount()) {
-            cursor.moveToPosition(mClickedItemPosition);
-        }
-        MessageItem msgItem = getMessageItem(msgType, msgId, true);
-        if (msgItem == null || msgItem.mBody == null) {
-            MmsLog.e(MmsApp.TXN_TAG, "getMessageAndSaveToSub, can not get Message Item.");
-            return;
-        }
-
-        String scAddress = null;
-
-        ArrayList<String> messages = null;
-        messages = SmsManager.getDefault().divideMessage(msgItem.mBody);
-
-        int smsStatus = 0;
-        long timeStamp = 0;
-        if (msgItem.isReceivedMessage()) {
-            smsStatus = SmsManager.STATUS_ON_ICC_READ;
-            timeStamp = msgItem.mSmsDate;
-            scAddress = msgItem.getServiceCenter();
-        } else if (msgItem.isSentMessage()) {
-            smsStatus = SmsManager.STATUS_ON_ICC_SENT;
-        } else if (msgItem.isFailedMessage()) {
-            smsStatus = SmsManager.STATUS_ON_ICC_UNSENT;
-        } else {
-            MmsLog.w(MmsApp.TXN_TAG, "Unknown sms status");
-        }
-        int subId = -1;
-        if (mSubCount == 1) {
-            mSelectedSubId = (int) mSubInfoList.get(0).getSubscriptionId();
-        }
-        subId = mSelectedSubId;
-        if (scAddress == null) {
-                scAddress = TelephonyManagerEx.getDefault().getScAddress(subId);
-        }
-
-        MmsLog.dpi(MmsApp.TXN_TAG, "\t subId\t= " + subId
-                + "\t scAddress\t= " + scAddress
-                + "\t Address\t= " + msgItem.mAddress
-                + "\t msgBody\t= " + msgItem.mBody
-                + "\t smsStatus\t= " + smsStatus
-                + "\t timeStamp\t= " + timeStamp
-                + "\t messages size\t= " + messages.size());
-
-        /// M: add for ALPS01844319, check SIM whether locked first, return fail if locked. @{
-        TelephonyManager telephony =
-            (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
-        int simState = telephony.getSimState(SubscriptionManager.getSlotId(subId));
-        MmsLog.d(MmsApp.TXN_TAG, "\t simState \t= " + simState);
-        // set result as fail if SIM locked.
-        if (simState == TelephonyManager.SIM_STATE_PIN_REQUIRED) {
-            result = SmsManager.RESULT_ERROR_GENERIC_FAILURE;
-        } else {
-            result = SmsManager.getSmsManagerForSubscriptionId(subId).copyTextMessageToIccCard(
-                    scAddress, msgItem.mAddress, messages, smsStatus, timeStamp);
-        }
-        /// @}
-        MmsLog.d(MmsApp.TXN_TAG, "\t result\t= " + result);
-
-        result = mOpComposeExt.getMessageAndSaveToSub(
-                mConversation.getRecipients().getNumbers(),
-                scAddress, messages, smsStatus, timeStamp, subId, result);
-
-        if (result == SmsManager.RESULT_ERROR_SUCCESS) {
-            MmsLog.d(MmsApp.TXN_TAG, "save message to sub succeed.");
-            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SUB_SUCCEED);
-        } else if (result == SmsManager.RESULT_ERROR_SIM_MEM_FULL) {
-            MmsLog.w(MmsApp.TXN_TAG, "save message to sub failed: sub memory full.");
-            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SUB_FAILED_SUB_FULL);
-        } else {
-            MmsLog.w(MmsApp.TXN_TAG, "save message to sub failed: generic error.");
-            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SUB_FAILED_GENERIC);
-        }
-        mSaveMsgHandler.sendEmptyMessageDelayed(MSG_QUIT_SAVE_MESSAGE_THREAD, 5000);
-    }
-
-    Runnable mGetSubInfoRunnable = new Runnable() {
-        public void run() {
-            getSubInfoList();
-            mOpComposeExt.getSubInfoRunnable(mWorkingMessage.hasSlideshow());
-
-        }
-    };
-
-     private void getSubInfoList() {
-        mSubInfoList = SubscriptionManager.from(this).getActiveSubscriptionInfoList();
-        mSubCount = (mSubInfoList != null && !mSubInfoList.isEmpty()) ? mSubInfoList.size() : 0;
-        MmsLog.i(TAG, "ComposeMessageActivity.getSubInfoList(): mSubCount = " + mSubCount);
-    }
-
-     private void subSelection() {
-        if (mIpCompose.subSelection()) {
-            return;
-        }
-        int selectedSubId = mOpComposeExt.subSelection();
-        if (selectedSubId != 0) {
-            mSelectedSubId = selectedSubId;
-            return;
-        }
-        if (mSubCount == 1) {
-            mSelectedSubId = (int) mSubInfoList.get(0).getSubscriptionId();
-            confirmSendMessageIfNeeded();
-        } else if (mSubCount > 1) { // multi sub cards exist.
-            Intent intent = new Intent();
-            mSelectSubType = SUB_SELECT_FOR_SEND_MSG;
-            intent.putExtra(SELECT_TYPE, SUB_SELECT_FOR_SEND_MSG);
-            // getContactSIM
-            if (isRecipientsEditorVisible()) {
-                if (mRecipientsEditor.getRecipientCount() == 1/*isOnlyOneRecipient()*/) {
-                    mAssociatedSubId = getContactSub(mRecipientsEditor.getNumbers().get(0));
-                } else {
-                    mAssociatedSubId = -1;
-                }
-            } else {
-                if (getRecipients().size() == 1/*isOnlyOneRecipient()*/) {
-                    mAssociatedSubId = getContactSub(getRecipients().get(0).getNumber());
-                } else {
-                    mAssociatedSubId = -1;
-                }
-            }
-/*
-  * Op18 : Dual Send button is shown in compose screen .
-  * This setting is not saved along with subscriptionManager.getDefaultSmsSubId()
-  * So ,  check its value in plugin , if false handle default else plugin will handle send message
-
-*/
-    MmsLog.d(TAG, "mAssociatedSubId = " + mAssociatedSubId);
-
-           if (mAssociatedSubId == -1 && mOpComposeExt.sendMessageForDualSendButton() == false) {
-
-                // getDefaultSIM()
-                mMessageSubId = SubscriptionManager.getDefaultSmsSubscriptionId();
-                MmsLog.d(TAG, "mMessageSubId = " + mMessageSubId);
-                if (mMessageSubId == DefaultSmsSimSettings.ASK_USER_SUB_ID
-                        || mOpComposeExt.subSelectionDialog(mMessageSubId)) {
-                    // always ask, show SIM selection dialog
-                    showSubSelectedDialog(intent);
-                    updateSendButtonState();
-                } else if (mMessageSubId == Settings.System.DEFAULT_SIM_NOT_SET) {
-                    /*
-                     * not set default Sub:
-                     * if recipients are morn than 2,or there is no associated Sub,
-                     * show SIM selection dialog
-                     * else send message via associated SIM
-                     */
-                    if (mAssociatedSubId == -1) {
-                        showSubSelectedDialog(intent);
-                        updateSendButtonState();
-                    } else {
-                        mSelectedSubId = mAssociatedSubId;
-                        confirmSendMessageIfNeeded();
-                    }
-                } else {
-                    /*
-                     * default SIM:
-                     * if recipients are morn than 2,or there is no associated SIM,
-                     * send message via default SIM
-                     * else show SIM selection dialog
-                     */
-                    boolean isAssociatedSubExsit = false;
-                    List<SubscriptionInfo> subinfoList
-                        = SubscriptionManager.from(this).getActiveSubscriptionInfoList();
-                    int subCount = 0;
-                    if (subinfoList != null) {
-                        subCount = subinfoList.size();
-                    }
-                    for (int slotId = 0; slotId < subCount; slotId++) {
-                        SubscriptionInfo subInfo = subinfoList.get(slotId);
-                        if (subInfo != null) {
-                            int subId = subInfo.getSubscriptionId();
-                            isAssociatedSubExsit = (subId == mAssociatedSubId ? true : false);
-                            if (isAssociatedSubExsit) {
-                                break;
-                            }
-                        }
-                    }
-                    if ((mAssociatedSubId == -1 || (mMessageSubId == mAssociatedSubId)
-                            || !isAssociatedSubExsit)
-                            && MessageUtils.isSmsSubIdActive(this, mMessageSubId)) {
-                        mSelectedSubId = (int) mMessageSubId;
-                        confirmSendMessageIfNeeded();
-                    } else {
-                        showSubSelectedDialog(intent);
-                        updateSendButtonState();
-                    }
-                }
-            }
-        }
-    }
-
-    @Override
-    public void onDialogClick(int subId, Intent intent) {
-        mSelectedSubId = (int) subId;
-        if (intent.getIntExtra(SELECT_TYPE, -1) == SUB_SELECT_FOR_SEND_MSG) {
-            confirmSendMessageIfNeeded();
-            mIsOneSubSelected = true;
-        } else if (intent.getIntExtra(SELECT_TYPE, -1) == SUB_SELECT_FOR_SAVE_MSG_TO_SUB) {
-            // getMessageAndSaveToSim(it);
-            Message msg = mSaveMsgHandler.obtainMessage(MSG_SAVE_MESSAGE_TO_SUB_AFTER_SELECT_SUB);
-            msg.obj = intent;
-            // mSaveMsgHandler.sendMessageDelayed(msg, 60);
-            mSaveMsgHandler.sendMessage(msg);
-        }
-    }
-
-    @Override
-    public void onCancelClick() {
-
-    }
-
-    @Override
-    public void onDialogDismiss() {
-        if (isRecipientsEditorVisible() && mCutRecipients != null) {
-            mRecipientsEditor.removeChipChangedListener(mChipWatcher);
-            mRecipientsEditor.populate(new ContactList());
-            mRecipientsEditor.addChipChangedListener(mChipWatcher);
-            mRecipientsEditor.populate(mCutRecipients);
-            mCutRecipients = null;
-            // / M : Fix CR ALPS01009525
-            // / which will a empty thread in the widget that send group message
-            // from contact @{
-            if (mOldThreadID > 0) {
-                Conversation.asyncDeleteObsoleteThreadID(mBackgroundQueryHandler, mOldThreadID);
-            }
-            // / @}
-        } else if (mCutRecipients != null) {
-            if (mConversation != null) {
-                Log.d(TAG,
-                        "onDismiss, mark old thread draft status to false: "
-                                + mConversation.getThreadId());
-                mConversation.setDraftState(false);
-            }
-            mWorkingMessage.syncWorkingRecipients();
-            Conversation conv = mWorkingMessage.getConversation();
-            long threadId = 0L;
-            if (conv != null) {
-                conv.ensureThreadId();
-                threadId = conv.getThreadId();
-            }
-            // / M: fix bug ALPS00595715 @{
-            mWorkingMessage.saveDraft(false);
-            if (mIsOneSubSelected) {
-                startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 0);
-                mIsOneSubSelected = false;
-            } else {
-                startActivity(createIntent(ComposeMessageActivity.this, threadId));
-            }
-            // /@}
-            // / M: fix bug ALPS00595715 @{
-            if (mOldThreadID > 0 && mOldThreadID != threadId) {
-                mIsSameConv = false;
-                MmsLog.d(TAG, "onDismiss not same thread");
-            }
-            mCutRecipients = null;
-        }
-    }
-
-    private boolean mIsOneSubSelected = false;
-
-    private void showSubSelectedDialog(Intent intent) {
-        mIsOneSubSelected = false;
-        SubSelectDialog subSelectDialog = new SubSelectDialog(this, this);
-
-        String str = null;
-
-        str = mOpComposeExt.showSubSelectedDialog(str);
-
-        mSubSelectDialog = subSelectDialog.showSubSelectedDialog(true, str, intent);
-
-        /// M: fix bug ALPS00572383, delay show "suggested" on the SelectSubDialog @{
-        if (mAssociatedSubQueryDone != -1) {
-            mUiHandler.sendEmptyMessage(MSG_SELECT_SUB_DIALOG_SHOW);
-        }
-        /// @}
-    }
-    /// @}
-    /// M: Code analyze 003,  Set or get max mms size.
-    private void initMessageSettings() {
-        MessageUtils.setMmsLimitSize(this);
-    }
-    /// @}
-
-    private void showConfirmDialog(Uri uri, boolean append, int type, int messageId) {
-        if (isFinishing()) {
-            return;
-        }
-
-        final Uri mRestrictedMidea = uri;
-        final boolean mRestrictedAppend = append;
-        final int mRestrictedType = type;
-
-        new AlertDialog.Builder(ComposeMessageActivity.this)
-        .setTitle(R.string.unsupport_media_type)
-        .setIconAttribute(android.R.attr.alertDialogIcon)
-        .setMessage(messageId)
-        .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
-            public final void onClick(DialogInterface dialog, int which) {
-                    /// M: disable when non-default sms
-                    if (!mIsSmsEnabled) {
-                        Toast.makeText(ComposeMessageActivity.this,
-                                R.string.compose_disabled_toast, Toast.LENGTH_SHORT).show();
-                        return;
-                    }
-                    if (mRestrictedMidea == null || mRestrictedType == WorkingMessage.TEXT
-                        || mWorkingMessage.isDiscarded()) {
-                        return;
-                    }
-                    getAsyncDialog().runAsync(new Runnable() {
-                        public void run() {
-                            /// M: fix bug ALPS01258201, show progessDialog
-                            runOnUiThread(new Runnable() {
-                                public void run() {
-                                    Log.d(TAG, "reCreate and show ProgressDialog");
-                                    getAsyncDialog().reCreateProgressDialog(
-                                            R.string.adding_attachments_title);
-                                    getAsyncDialog().resetShowProgressDialog();
-                                }
-                            });
-                            int createMode = WorkingMessage.sCreationMode;
-                            WorkingMessage.sCreationMode = 0;
-                            int result = mWorkingMessage.setAttachment(mRestrictedType,
-                                    mRestrictedMidea, mRestrictedAppend);
-                            if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                                MmsLog.vpi(TAG, "Restricted Midea: dataUri=" + mRestrictedMidea);
-                            }
-                            if (mRestrictedType == WorkingMessage.IMAGE
-                                && (result == WorkingMessage.IMAGE_TOO_LARGE
-                                        || result == WorkingMessage.MESSAGE_SIZE_EXCEEDED)) {
-                                MmsLog.dpi(TAG, "showConfirmDialog: resize image "
-                                        + mRestrictedMidea);
-                                MessageUtils.resizeImage(ComposeMessageActivity.this,
-                                        mRestrictedMidea, mAttachmentEditorHandler,
-                                        mResizeImageCallback, mRestrictedAppend,
-                                    true);
-                                WorkingMessage.sCreationMode = createMode;
-                                dismissProgressDialog();
-                                return;
-                            }
-                            WorkingMessage.sCreationMode = createMode;
-                            int typeId = R.string.type_picture;
-                            if (mRestrictedType == WorkingMessage.AUDIO) {
-                                typeId = R.string.type_audio;
-                            } else if (mRestrictedType == WorkingMessage.VIDEO) {
-                                typeId = R.string.type_video;
-                            }
-                            handleAddAttachmentError(result, typeId);
-                            /// M: fix bug ALPS00726611, must save draft when click on WARNING_TYPE
-                            if (result == WorkingMessage.OK) {
-                                if (mWorkingMessage.saveAsMms(false) != null) {
-                                    mHasDiscardWorkingMessage = true;
-                                }
-                            }
-                            dismissProgressDialog();
-                        }
-                    }, new ShowRunnable(), R.string.adding_attachments_title);
-                    Log.d(TAG, "Composer add mAsyncTaskNum = " + (++mAsyncTaskNum));
-            }
-        })
-        .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
-            public final void onClick(DialogInterface dialog, int which) {
-                mWorkingMessage.removeFakeMmsForDraft();
-                updateSendButtonState();
-            }
-        })
-        .setOnCancelListener(new DialogInterface.OnCancelListener() {
-            public void onCancel(DialogInterface arg0) {
-                mWorkingMessage.removeFakeMmsForDraft();
-                updateSendButtonState();
-            }
-        })
-        .show();
-    }
-
-     /// M: Code analyze 067, Add audio attachment. @{
-    private void addAudio(final Uri uri, final boolean append) {
-        mNeedSaveAsMms = false;
-        if (uri != null) {
-            mNeedSaveAsMms = true;
-            int result = WorkingMessage.OK;
-            try {
-                if (append) {
-                    mWorkingMessage.checkSizeBeforeAppend();
-                }
-            } catch (ExceedMessageSizeException e) {
-                result = WorkingMessage.MESSAGE_SIZE_EXCEEDED;
-                handleAddAttachmentError(result, R.string.type_audio);
-                mNeedSaveAsMms = false;
-                return;
-            }
-            result = mWorkingMessage.setAttachment(WorkingMessage.AUDIO, uri, append);
-            if (result == WorkingMessage.WARNING_TYPE) {
-                mNeedSaveAsMms = false;
-                runOnUiThread(new Runnable() {
-                    public void run() {
-                        showConfirmDialog(uri, append,
-                                WorkingMessage.AUDIO, R.string.confirm_restricted_audio);
-                    }
-                });
-            } else {
-                handleAddAttachmentError(result, R.string.type_audio);
-                if (result != WorkingMessage.OK) {
-                    mNeedSaveAsMms = false;
-                }
-            }
-        }
-    }
-    /// @}
-
-    /// M: Code analyze 015, Add text vcard. @{
-    private void addTextVCardAsync(final long[] contactsIds) {
-        MmsLog.i(TAG, "compose.addTextVCardAsync(): contactsIds.length() = " + contactsIds.length);
-        getAsyncDialog().runAsync(new Runnable() {
-            public void run() {
-                //addTextVCard(contactsIds);
-               String textVCard = TextUtils.isEmpty(mTextEditor.getText()) ? "" : "\n";
-               VCardAttachment tvc = new VCardAttachment(ComposeMessageActivity.this);
-               final String textString = tvc.getTextVCardString(contactsIds, textVCard);
-               runOnUiThread(new Runnable() {
-               public void run() {
-                   insertText(mTextEditor, textString);
-               }
-
-             });
-           }
-        }, null, R.string.menu_insert_text_vcard); // the str is ok for reuse[or use a new string].
-    }
-    /// @}
-
-    private void addFileAttachment(String type, Uri uri, boolean append) {
-        if (!addFileAttachment(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, uri, append)) {
-            if (!addFileAttachment(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, uri, append)) {
-                if (!addFileAttachment(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
-                        uri, append)) {
-                    MmsLog.i(TAG, "This file is not in media store(audio, video or image)," +
-                            "attemp to add it like file uri");
-                    addAttachment(type, (Uri) uri, append);
-                }
-            }
-        }
-    }
-
-    private boolean addFileAttachment(Uri mediaStoreUri, Uri uri, boolean append) {
-        String path = uri.getPath();
-        if (path != null) {
-            Cursor c = getContentResolver().query(mediaStoreUri,
-                    new String[] {MediaStore.MediaColumns._ID, Audio.Media.MIME_TYPE},
-                    MediaStore.MediaColumns.DATA + "=?",
-                    new String[] {path}, null);
-            if (c != null) {
-                try {
-                    if (c.moveToFirst()) {
-                        Uri contentUri = Uri.withAppendedPath(mediaStoreUri, c.getString(0));
-                        MmsLog.ipi(TAG, "Get id in MediaStore:" + c.getString(0)
-                                + " Get content type in MediaStore:" + c.getString(1)
-                                + " Get uri in MediaStore:" + contentUri);
-                        String contentType = c.getString(1);
-                        addAttachment(contentType, contentUri, append);
-                        return true;
-                    } else {
-                        MmsLog.ipi(TAG, "MediaStore:" + mediaStoreUri.toString()
-                                + " has not this file");
-                    }
-                } finally {
-                    c.close();
-                }
-            }
-        }
-        return false;
-    }
-
-    private boolean isHasRecipientCount() {
-        int recipientCount = recipientCount();
-        return (recipientCount > 0 && recipientCount < RECIPIENTS_LIMIT_FOR_SMS);
-    }
-
-    private String getResourcesString(int id) {
-        Resources r = getResources();
-        return r.getString(id);
-    }
-
-    /// M: Code analyze 030, Check condition before sending message.@{
-    public void checkConditionsAndSendMessage(final boolean bCheckEcmMode) {
-        // check pin
-        if (mSelectedSubId <= 0) {
-            mSelectedSubId = SubscriptionManager.getDefaultSubscriptionId();
-        }
-        // add CellConnMgr feature
-        if (showWfcSendButtonPopUp()) {
-            updateSendButtonState(true);
-            return;
-        }
-        final CellConnMgr cellConnMgr = new CellConnMgr(getApplicationContext());
-        final int state = cellConnMgr.getCurrentState(mSelectedSubId, CellConnMgr.STATE_FLIGHT_MODE
-                | CellConnMgr.STATE_SIM_LOCKED | CellConnMgr.STATE_RADIO_OFF);
-        MmsLog.d(TAG, "CellConnMgr, state is " + state);
-        ///M: WFC: Do not show pop-up, if wfc is OFF @ {
-        if (!TelephonyManagerEx.getDefault().isWifiCallingEnabled(mSelectedSubId) &&
-            (((state & CellConnMgr.STATE_FLIGHT_MODE) == CellConnMgr.STATE_FLIGHT_MODE ) ||
-            ((state & CellConnMgr.STATE_RADIO_OFF) == CellConnMgr.STATE_RADIO_OFF ) ||
-            ((state & (CellConnMgr.STATE_FLIGHT_MODE | CellConnMgr.STATE_RADIO_OFF))
-                == (CellConnMgr.STATE_FLIGHT_MODE | CellConnMgr.STATE_RADIO_OFF))))  {
-            final ArrayList<String> stringArray =
-                cellConnMgr.getStringUsingState(mSelectedSubId, state);
-            MmsLog.d(TAG, "CellConnMgr, stringArray length is " + stringArray.size());
-            if (stringArray.size() == 4) {
-                AlertDialog.Builder builder = new AlertDialog.Builder(this);
-                builder.setTitle(stringArray.get(0));
-                builder.setMessage(stringArray.get(1));
-                builder.setPositiveButton(android.R.string.ok,
-                        new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int which) {
-                        dialog.dismiss();
-                        mTextEditor.requestFocus();
-                        updateSendButtonState(true);
-                    }
-                });
-                mPlaneModeDialog = builder.show();
-                mPlaneModeDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
-                    @Override
-                    public void onDismiss(DialogInterface dialog) {
-                        dialog.dismiss();
-                        mPlaneModeDialog = null;
-                        updateSendButtonState(true);
-                    }
-                });
-            }
-        } else if ((state & CellConnMgr.STATE_SIM_LOCKED) == CellConnMgr.STATE_SIM_LOCKED) {
-            final ArrayList<String> stringArray =
-                cellConnMgr.getStringUsingState(mSelectedSubId, state);
-            MmsLog.d(TAG, "CellConnMgr, stringArray length is " + stringArray.size());
-            if (stringArray.size() == 4) {
-                AlertDialog.Builder builder = new AlertDialog.Builder(this);
-                builder.setTitle(stringArray.get(0));
-                builder.setCancelable(true);
-                builder.setMessage(stringArray.get(1));
-                builder.setPositiveButton(stringArray.get(2),
-                        new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int which) {
-                            cellConnMgr.handleRequest(mSelectedSubId, state);
-                            mTextEditor.requestFocus();
-                            updateSendButtonState(true);
-                    }
-                });
-                builder.setNegativeButton(stringArray.get(3),
-                        new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int which) {
-                            dialog.dismiss();
-                            mTextEditor.requestFocus();
-                            updateSendButtonState(true);
-                    }
-                });
-                builder.show();
-            }
-        } else {
-            if (!mOpComposeExt.checkConditionsAndSendMessage(mWorkingMessage.requiresMms(),
-                    bCheckEcmMode)) {
-                checkBeforeSendMessage(bCheckEcmMode);
-            }
-        }
-   }
-   /// @}
-
-    /// M: Code analyze 049, Update send button or attachment editor state.@{
-    private void updateSendButtonState(final boolean enabled) {
-        if (!mWorkingMessage.hasSlideshow()) {
-            View sendButton = showSmsOrMmsSendButton(mWorkingMessage.requiresMms());
-            if (mOpComposeExt.updateSendButtonState(mWorkingMessage.requiresMms(),
-                    recipientCount(), MmsConfig.getSmsRecipientLimit(), mSubCount)) {
-                return;
-            }
-            sendButton.setEnabled(enabled);
-            sendButton.setFocusable(enabled);
-        } else {
-            mAttachmentEditor.setCanSend(enabled && (mSubCount > 0));
-        }
-    }
-    /// @}
-
-    private void insertText(EditText edit, String insertText) {
-        int where = edit.getSelectionStart();
-
-        if (where == -1) {
-            edit.append(insertText);
-        } else {
-            edit.getText().insert(where, insertText);
-        }
-    }
-
-    /**
-     * This filter will constrain edits not to make the length of the text
-     * greater than the specified length.
-     */
-    class TextLengthFilter extends InputFilter.LengthFilter {
-        public TextLengthFilter(int max) {
-            super(max);
-            mMaxLength = max;
-            mExceedMessageSizeToast = Toast.makeText(ComposeMessageActivity.this,
-                    R.string.exceed_editor_size_limitation,
-                    Toast.LENGTH_SHORT);
-        }
-
-        public CharSequence filter(CharSequence source, int start, int end,
-                                   Spanned dest, int dstart, int dend) {
-            MmsLog.dpi(TAG, "TextLengthFilter source = " + source +
-                    " start = " + start + " end = " + end + " dstart = "
-                    + dstart + " dend = " + dend + " dest length = " + dest.length());
-            int keep = mMaxLength - (dest.length() - (dend - dstart));
-            if (keep < (end - start)) {
-                mExceedMessageSizeToast.show();
-                mInputMethodManager.restartInput(
-                        ComposeMessageActivity.this.getWindow().getCurrentFocus());
-            }
-            return super.filter(source, start, end, dest, dstart, dend);
-            /*
-            if (keep <= 0) {
-                return "";
-            } else if (keep >= end - start) {
-                return null; // keep original
-            } else {
-                return source.subSequence(start, start + keep);
-            }
-            */
-        }
-
-        private int mMaxLength;
-    }
-
-    /// M: Code analyze 051, Hide input keyboard.@{
-    private void hideInputMethod() {
-        MmsLog.d(TAG, "hideInputMethod()");
-        if (this.getWindow() != null && this.getWindow().getCurrentFocus() != null) {
-            mInputMethodManager
-                .hideSoftInputFromWindow(this.getWindow().getCurrentFocus().getWindowToken(), 0);
-        }
-    }
-    /// @}
-
-    // toast there are too many recipients.
-    private void toastTooManyRecipients(int recipientCount) {
-        final String tooManyRecipients = getString(R.string.too_many_recipients,
-                recipientCount, RECIPIENTS_LIMIT_FOR_SMS);
-        mUiHandler.postDelayed(new Runnable() {
-            @Override
-            public void run() {
-                Toast.makeText(ComposeMessageActivity.this,
-                        tooManyRecipients, Toast.LENGTH_LONG).show();
-            }
-        }, 1000);
-    }
-
-    /// M: Code analyze 013, Get contacts from Contact app . @{
-    private void addContacts(int pickCount, int requestCode) {
-        /// M: @{
-        /*Intent intent = new Intent("android.intent.action.CONTACTSMULTICHOICE");
-          intent.setType(Phone.CONTENT_ITEM_TYPE);
-          intent.putExtra("request_email", true);
-          intent.putExtra("pick_count", pickCount);
-          misPickContatct = true;
-          startActivityForResult(intent, REQUEST_CODE_PICK_CONTACT);*/
-
-        /// M: fix bug ALPS00444752, set true to disable to Show ContactPicker
-        mShowingContactPicker = true;
-        misPickContatct = true;
-        Intent intent = new Intent(MessageUtils.ACTION_CONTACT_SELECTION);
-        intent.setType(Phone.CONTENT_TYPE);
-
-        if (mOpComposeExt.addContacts(intent, pickCount, requestCode)) {
-            return;
-        }
-        try {
-            startActivityForResult(intent, requestCode);
-        } catch (ActivityNotFoundException e) {
-            mShowingContactPicker = false;
-            misPickContatct = false;
-            Toast.makeText(this, this.getString(R.string.no_application_response),
-                    Toast.LENGTH_SHORT).show();
-            MmsLog.e(TAG, e.getMessage());
-        }
-        /// @}
-    }
-
-    private int getContactSub(final String num) {
-        class Int {
-            private int value = -1;
-            public void  set(int n) {
-                value = n;
-            }
-            public int get() {
-                return value;
-            }
-        }
-        final Int subID = new Int();
-        final Object dbQueryLock = new Object();
-        final Context mContextTemp = this.getApplicationContext();
-        // query the db in another thread.
-        new Thread(new Runnable() {
-            public void run() {
-                int subId = -1;
-                String number = num;
-                String formatNumber = MessageUtils.formatNumber(number, mContextTemp);
-                String TrimFormatNumber = formatNumber;
-                if (formatNumber != null) {
-                    TrimFormatNumber = formatNumber.replace(" ", "");
-                }
-                Cursor associateSubCursor = ComposeMessageActivity.this.getContentResolver().query(
-                    Data.CONTENT_URI,
-                    new String[]{ContactsContract.Data.SIM_ASSOCIATION_ID},
-                    Data.MIMETYPE + "='" + CommonDataKinds.Phone.CONTENT_ITEM_TYPE
-                    + "' AND (" + Data.DATA1 + "=?" +
-                    " OR " + Data.DATA1 + "=?" +
-                    " OR " + Data.DATA4 + "=?" +
-                    ") AND (" + ContactsContract.Data.SIM_ASSOCIATION_ID + "!= -1)",
-                    new String[]{number, formatNumber, TrimFormatNumber},
-                    null
-                );
-
-                if ((null != associateSubCursor) && (associateSubCursor.getCount() > 0)) {
-                    associateSubCursor.moveToFirst();
-                    // Get only one record is OK
-                    subId = (Integer) associateSubCursor.getInt(0);
-                } else {
-                    subId = -1;
-                }
-                if (associateSubCursor != null) {
-                    associateSubCursor.close();
-                }
-                synchronized (dbQueryLock) {
-                    MmsLog.d(MmsApp.TXN_TAG, "before notify");
-                    subID.set(subId);
-                    dbQueryLock.notify();
-                    /// M: fix bug ALPS00572383, delay show "suggested" on the SelectSimDialog @{
-                    mAssociatedSubQueryDone = subId;
-                }
-                /// @}
-            }
-        }).start();
-        // change UI thread wait from 500ms to 1000ms at most, for CR ALPS00721717
-        synchronized (dbQueryLock) {
-            try {
-                MmsLog.d(MmsApp.TXN_TAG, "before wait");
-                dbQueryLock.wait(1000);
-            } catch (InterruptedException e) {
-                //time out
-            }
-            MmsLog.d(MmsApp.TXN_TAG, "subID = " + subID.get());
-            return subID.get();
-        }
-    }
-
-    private void checkRecipientsCount() {
-        //if (isRecipientsEditorVisible()) {
-        //mRecipientsEditor.structLastRecipient();
-        //}
-//        hideInputMethod();
-        if (mIpCompose.onIpCheckRecipientsCount()) {
-            return;
-        }
-        if (!MessageUtils.allowSafeDraft(this, MmsConfig.getDeviceStorageFullStatus(), true,
-                TOAST_TYPE_FOR_SEND_MSG)) {
-            updateSendButtonState();
-            return;
-        }
-        final int mmsLimitCount = MmsConfig.getMmsRecipientLimit();
-        String message = "";
-        if (recipientCount() > mmsLimitCount) {
-            message = getString(R.string.max_recipients_message, mmsLimitCount);
-        }
-        boolean isRecipientsEditorEmpty = isRecipientsEditorVisible()
-                && "".equals(mRecipientsEditor.getText().toString().replaceAll(";", "")
-                        .replaceAll(",", "").trim());
-        boolean isConversationRecipientEmpty = !isRecipientsEditorVisible()
-                && "".equals(mConversation.getRecipients().serialize().replaceAll(";", "")
-                        .replaceAll(",", ""));
-
-        message = mOpComposeExt.checkRecipientsCount(message,
-                mWorkingMessage.requiresMms(), recipientCount(),
-                mmsLimitCount, isRecipientsEditorEmpty, isConversationRecipientEmpty, getIntent(),
-                mMsgListAdapter, mSubInfoList, isRecipientsEditorVisible());
-
-        if (mWorkingMessage.requiresMms() && (recipientCount() > mmsLimitCount)) {
-            message = "";
-            if (recipientCount() > mmsLimitCount) {
-                message = getString(R.string.max_recipients_message, mmsLimitCount);
-            }
-
-            AlertDialog.Builder builder = new AlertDialog.Builder(this);
-            builder.setTitle(R.string.max_recipients_title);
-            builder.setIconAttribute(android.R.attr.alertDialogIcon);
-            builder.setCancelable(true);
-            builder.setMessage(message);
-            builder.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
-                public void onClick(DialogInterface dialog, int which) {
-                    runOnUiThread(new Runnable() {
-                        public void run() {
-                            /*
-                             * If entering an existing thread, #mRecipientsEditor
-                             * never gets initialized.
-                             * So, when mRecipientsEditor is not visible, it might be null.
-                             */
-                            List<String> recipientsList;
-                            if (isRecipientsEditorVisible()) {
-                                recipientsList = mRecipientsEditor.getNumbers();
-                            } else {
-                                recipientsList = new ArrayList<String>(
-                                        Arrays.asList(getRecipients().getNumbers()));
-                            }
-                            List<String> newRecipientsList = new ArrayList<String>();
-
-                            if (recipientCount() > mmsLimitCount * 2) {
-                                for (int i = 0; i < mmsLimitCount; i++) {
-                                    newRecipientsList.add(recipientsList.get(i));
-                                }
-                                mWorkingMessage.setWorkingRecipients(newRecipientsList);
-                            } else {
-                                for (int i = recipientCount() - 1; i >= mmsLimitCount; i--) {
-                                    recipientsList.remove(i);
-                                }
-                                mWorkingMessage.setWorkingRecipients(recipientsList);
-                                /// M: fix bug ALPS00432629
-                                newRecipientsList = recipientsList;
-                            }
-                            subSelection();
-
-                            /// M: fix bug ALPS00432629, update title
-                            /// when recipientsList cut to 20 @{
-                            ContactList list = ContactList.getByNumbers(newRecipientsList, false);
-                            mCutRecipients = list;
-                        }
-                    });
-                }
-            });
-            builder.setNegativeButton(R.string.no, null);
-            builder.show();
-            updateSendButtonState();
-        } else {
-            /** M:
-             * fix CR ALPS00069541
-             * if the message copy from sub card with unknown recipient
-             * the recipient will be ""
-             */
-            if ((isRecipientsEditorVisible() && isRecipientsEditorEmpty)
-                    || (!isRecipientsEditorVisible() && isConversationRecipientEmpty)) {
-                new AlertDialog.Builder(this)
-                        .setIconAttribute(android.R.attr.alertDialogIcon)
-                        .setTitle(R.string.cannot_send_message)
-                        .setMessage(R.string.cannot_send_message_reason)
-                        .setPositiveButton(R.string.yes, new CancelSendingListener())
-                        .show();
-            } else {
-                /// M: reply message with the card directly if
-                /// only one card related in conversation
-                subSelection();
-            }
-        }
-    }
-
-    /// M: Code analyze 002,  If a new ComposeMessageActivity is created, kill old one
-    public static Activity getComposeContext() {
-        return sCompose == null ? null : sCompose.get();
-    }
-    /// @}
-
-   @Override
-    public void onShutDown() {
-       /// M: fix bug ALPS01539513
-       if (mWorkingMessage != null && mWorkingMessage.requiresMms()
-               && mWorkingMessage.getSlideshow() != null
-               && !mWorkingMessage.getSlideshow().needUpdate()) {
-           Log.d(TAG, "onShutDown return");
-           return;
-       }
-       /// M: don't save draft again if Compose is finished.
-       if (!this.isFinishing()) {
-           saveDraft(false);
-       }
-       /// @}
-    }
-
-    /*
-    this function is add for read report
-    */
-    private final int READ_REPORT_DISABLED                      = 0;
-    private final int READ_REPORT_SINGLE_MODE_ENABLED           = 1;
-    private final int READ_REPORT_GEMINI_MODE_ENABLED           = 2;
-
-    private void checkAndSendReadReport() {
-        final Context ct = ComposeMessageActivity.this;
-        final long threadId = mConversation.getThreadId();
-        MmsLog.d(MmsApp.TXN_TAG, "checkAndSendReadReport,threadId:" + threadId);
-        new Thread(new Runnable() {
-            public void run() {
-                SharedPreferences prefs =
-                    PreferenceManager.getDefaultSharedPreferences(ComposeMessageActivity.this);
-                int rrAllowed = READ_REPORT_DISABLED;
-                /// @}
-                // / M: [ALPS00465911] [3G Gemini+]JE when Message -> settings
-                // -> cell center -> back to idle @{
-                int[] totalSubIds = SubscriptionManager.from(
-                        ComposeMessageActivity.this).getActiveSubscriptionIdList();
-                MmsLog.d(MmsApp.TXN_TAG, "checkAndSendReadReport,totalSubIds = "
-                        + totalSubIds.length);
-                // / @}
-                rrAllowed = READ_REPORT_GEMINI_MODE_ENABLED;
-
-                MmsLog.d(MmsApp.TXN_TAG, "rrAllowed=" + rrAllowed);
-                // if read report is off, mark the mms read report status readed.
-                if (rrAllowed == READ_REPORT_DISABLED) {
-                    ContentValues values = new ContentValues(1);
-                    String where =
-                        Mms.THREAD_ID + " = " + threadId + " and " + Mms.READ_REPORT + " = 128";
-                    // update uri inbox is not used, must indicate here.
-                    where += " and " + Mms.MESSAGE_BOX + " = " + Mms.MESSAGE_BOX_INBOX;
-                    values.put(Mms.READ_REPORT,
-                            PduHeaders.READ_STATUS__DELETED_WITHOUT_BEING_READ);
-                    SqliteWrapper.update(ct, ct.getContentResolver(), Mms.Inbox.CONTENT_URI,
-                                        values,
-                                        where,
-                                        null);
-                    return;
-                }
-                if (rrAllowed > READ_REPORT_DISABLED) {
-                    StringBuilder suffix = new StringBuilder();
-                    switch (rrAllowed) {
-                        case READ_REPORT_SINGLE_MODE_ENABLED:
-                            // nothing to do in single card mode
-                            break;
-                        case READ_REPORT_GEMINI_MODE_ENABLED:
-                            boolean isAppendAnd = true;
-                            for (int subId : totalSubIds) {
-                                if (prefs.getBoolean(Long.toString(subId) + "_"
-                                        + MmsPreferenceActivity.READ_REPORT_AUTO_REPLY, false)) {
-                                    MmsLog.e(MmsApp.TXN_TAG, "readReport supported on subId: "
-                                            + subId);
-                                    // slot i has card and read report on
-                                    if (isAppendAnd) {
-                                        suffix.append(
-                                                Telephony.Mms.SUBSCRIPTION_ID + " = " + subId);
-                                        isAppendAnd = false;
-                                    } else {
-                                        suffix.append(" or " + Telephony.Mms.SUBSCRIPTION_ID
-                                                + " = " + subId);
-                                    }
-                                } else {
-                                    MmsLog.e(MmsApp.TXN_TAG,
-                                            "mark subId" + subId + " card readed");
-                                    markReadReportProcessed(ct, threadId, subId);
-                                }
-                            }
-                            if (!TextUtils.isEmpty(suffix.toString())) {
-                                suffix.insert(0, " and (");
-                                suffix.append(") ");
-                            }
-                            break;
-                        default:
-                            MmsLog.e(MmsApp.TXN_TAG, "impossible value for rrAllowed.");
-                            break;
-                        }
-                    boolean networkOk = true;
-                    int airplaneMode = Settings.System.getInt(ct.getContentResolver(),
-                            Settings.System.AIRPLANE_MODE_ON, 0);
-                    //network not ok.next time will try.
-                    if ((networkOk != true) || (airplaneMode == 1)) {
-                        MmsLog.d(MmsApp.TXN_TAG, "networkok:"
-                                + networkOk + ",airplaneMode:" + airplaneMode);
-                        return;
-                    }
-                    Cursor cs = null;
-                    try {
-                        String where = Mms.THREAD_ID + " = " + threadId
-                        + " and " + Mms.READ_REPORT + " = 128" + suffix.toString();
-                        cs = SqliteWrapper.query(ct, ct.getContentResolver(),
-                                Mms.Inbox.CONTENT_URI,
-                                new String[]{Mms._ID, Telephony.Mms.SUBSCRIPTION_ID},
-                                where, null, null);
-                        if (cs != null) {
-                            final int count = cs.getCount();
-                            if (count > 0) {
-                                //mark the ones need send read report status to pending as 130.
-                                ContentValues values = new ContentValues(1);
-                                values.put(Mms.READ_REPORT,
-                                        PduHeaders.READ_STATUS__DELETED_WITHOUT_BEING_READ);
-                                // update uri inbox is not used, must indicate here.
-                                where += " and " + Mms.MESSAGE_BOX + " = " + Mms.MESSAGE_BOX_INBOX;
-                                SqliteWrapper.update(ct, ct.getContentResolver(),
-                                        Mms.Inbox.CONTENT_URI, values, where, null);
-                                //show a toast.
-                                runOnUiThread(new Runnable() {
-                                    public void run() {
-                                        Toast.makeText(ComposeMessageActivity.this,
-                                                    ct.getResources().getQuantityString(
-                                                            R.plurals.read_report_toast_msg,
-                                                            count, count),
-                                                    Toast.LENGTH_SHORT).show();
-                                    }
-                                });
-                            }
-                            startSendReadReport(cs);
-                        }
-                    } catch (Exception e) {
-                        MmsLog.e(MmsApp.TXN_TAG,
-                                "exception happend when scan read report!:" + e.getMessage());
-                    } finally {
-                        if (cs != null) {
-                            cs.close();
-                        }
-                    }
-                }
-            }
-
-            private void markReadReportProcessed(Context ct, long threadId, int subId) {
-                ContentValues values = new ContentValues(1);
-                values.put(Mms.READ_REPORT, PduHeaders.READ_STATUS__DELETED_WITHOUT_BEING_READ);
-                String where = Mms.THREAD_ID + " = " + threadId
-                        + " and " + Mms.READ_REPORT + " = 128"
-                        + " and " + Telephony.Mms.SUBSCRIPTION_ID + " = " + subId;
-                // update uri inbox is not used, must indicate here.
-                where += " and " + Mms.MESSAGE_BOX + " = " + Mms.MESSAGE_BOX_INBOX;
-                SqliteWrapper.update(ct, ct.getContentResolver(), Mms.Inbox.CONTENT_URI,
-                                    values,
-                                    where,
-                                    null);
-            }
-
-            private void startSendReadReport(final Cursor cursor) {
-                cursor.moveToPosition(-1);
-                while (cursor.moveToNext()) {
-                    MmsLog.d(MmsApp.TXN_TAG, "send an intent for read report.");
-                    long msgId = cursor.getLong(0);
-                    Intent rrIntent = new Intent(ct, TransactionService.class);
-                    rrIntent.putExtra(TransactionBundle.URI, Mms.Inbox.CONTENT_URI + "/" + msgId);
-                    rrIntent.putExtra(TransactionBundle.TRANSACTION_TYPE,
-                            Transaction.READREC_TRANSACTION);
-
-                    int subId = cursor.getInt(1);
-                    MmsLog.d(MmsApp.TXN_TAG, "subId:" + subId);
-                    rrIntent.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId);
-
-                    ct.startService(rrIntent);
-                }
-            }
-        }).start();
-    }
-
-    /**
-     * Remove the number which is the same as any one before;
-     * When the count of recipients over the limit, make a
-     * toast and remove the recipients over the limit.
-     * @param recipientsString the numbers slipt by ','.
-     * @return recipientsString the numbers slipt by ',' after modified.
-     */
-    private String getStringForMultipleRecipients(String recipientsString) {
-        recipientsString = recipientsString.replaceAll(",", ";");
-        String[] recipients_all = recipientsString.split(";");
-        List<String> recipientsList = new ArrayList<String>();
-        for (String recipient : recipients_all) {
-            recipientsList.add(recipient);
-        }
-
-        Set<String> recipientsSet = new HashSet<String>();
-        recipientsSet.addAll(recipientsList);
-
-        if (recipientsSet.size() > RECIPIENTS_LIMIT_FOR_SMS) {
-            toastTooManyRecipients(recipients_all.length);
-        }
-
-        recipientsList.clear();
-        recipientsList.addAll(recipientsSet);
-
-        recipientsString = "";
-        int count = recipientsList.size() > RECIPIENTS_LIMIT_FOR_SMS
-                ? RECIPIENTS_LIMIT_FOR_SMS : recipientsList.size();
-        StringBuffer buf = new StringBuffer();
-        buf.append(recipientsString);
-        for (int i = 0; i < count; i++) {
-            if (i == (count - 1)) {
-                buf.append(recipientsList.get(i));
-            } else {
-                buf.append(recipientsList.get(i) + ";");
-            }
-        }
-        recipientsString = buf.toString();
-        return recipientsString;
-    }
-
-    /**
-     * Get Conversation.
-     * * Notice: This function is also called by operator plugin(OP01). When modify this function,
-     * please notify operator team.
-     *
-     * @return Conversation
-     */
-    public Conversation getConversation() {
-        return mConversation;
-    }
-
-    /// M: Code analyze 014, Add quick text. @{
-    private void showQuickTextDialog() {
-        mQuickTextDialog = null;
-        //if (mQuickTextDialog == null) {
-            List<String> quickTextsList = new ArrayList<String>();
-
-            /// M: new feature, add default quick text when frist "insert quick text" @{
-            if (MmsConfig.getInitQuickText()) {
-                String[] defaultQuickTexts =
-                    getResources().getStringArray(R.array.default_quick_texts);
-                for (int i = 0; i < defaultQuickTexts.length; i++) {
-                    quickTextsList.add(defaultQuickTexts[i]);
-                }
-            } else {
-                // add user's quick text
-                if (MmsConfig.getQuicktexts().size() == 0) {
-                    MmsConfig.updateAllQuicktexts();
-                }
-                quickTextsList = MmsConfig.getQuicktexts();
-            }
-            /// @}
-
-            List<Map<String, ?>> entries = new ArrayList<Map<String, ?>>();
-            for (String text : quickTextsList) {
-                HashMap<String, Object> entry = new HashMap<String, Object>();
-                entry.put("text", text);
-                entries.add(entry);
-            }
-
-            final SimpleAdapter qtAdapter = new SimpleAdapter(this, entries,
-                    R.layout.quick_text_list_item,
-                    new String[] {"text"}, new int[] {R.id.quick_text});
-
-            AlertDialog.Builder qtBuilder = new AlertDialog.Builder(this);
-
-            qtBuilder.setTitle(getString(R.string.select_quick_text));
-            qtBuilder.setCancelable(true);
-            qtBuilder.setAdapter(qtAdapter, new DialogInterface.OnClickListener() {
-                @SuppressWarnings("unchecked")
-                public final void onClick(DialogInterface dialog, int which) {
-                    HashMap<String, Object> item =
-                        (HashMap<String, Object>) qtAdapter.getItem(which);
-                    if (mSubjectTextEditor != null && mSubjectTextEditor.isFocused()) {
-                        insertText(mSubjectTextEditor, (String) item.get("text"));
-                    } else {
-                        insertText(mTextEditor, (String) item.get("text"));
-                    }
-                    dialog.dismiss();
-                }
-            });
-            mQuickTextDialog = qtBuilder.create();
-        //}
-        mQuickTextDialog.show();
-    }
-    /// @}
-
-    /// M: Code analyze 006, Control Sub indicator on status bar. @{
-    @Override
-    public void onSubInforChanged() {
-        MmsLog.i(MmsApp.LOG_TAG, "onSubInforChanged(): Composer");
-        mMessageSubId = (int) Settings.System.getLong(getContentResolver(),
-                Settings.System.SMS_SIM_SETTING,
-                Settings.System.DEFAULT_SIM_NOT_SET);
-        mSelectedSubId = (int) mMessageSubId;
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                mOpComposeExt.onSubInforChanged();
-                updateSendButtonState();
-            }
-        });
-    }
-    /// @}
-
-    /// M: Code analyze 004, Set max height for text editor. @{
-    private final HeightChangedLinearLayout.LayoutSizeChangedListener mLayoutSizeChangedListener =
-            new HeightChangedLinearLayout.LayoutSizeChangedListener() {
-        private int mMaxHeight = 0;
-        @Override
-        public void onLayoutSizeChanged(int w, int h, int oldw, int oldh) {
-            /// M: fix bug ALPS00419856, set TextEditor Height = four when unlock screen @{
-            if (h - oldh > SOFT_KEY_BOARD_MIN_HEIGHT) {
-                mIsSoftKeyBoardShow = false;
-            } else {
-                mIsSoftKeyBoardShow = true;
-            }
-            /// @}
-            mMaxHeight = (h > mMaxHeight) ? h : mMaxHeight;
-            if (h == oldh || mTextEditor == null || mTextEditor.getVisibility() == View.GONE) {
-                return;
-            }
-            MmsLog.d(TAG, "onLayoutSizeChanged(): mIsLandscape = " + mIsLandscape);
-
-            boolean resultIp = mIpCompose.onIpLayoutSizeChanged(mIsSoftKeyBoardShow);
-            boolean resultOp = mOpComposeExt.onLayoutSizeChanged(mIsSoftKeyBoardShow);
-            if (!mIsLandscape) {
-                if (h > oldh && !resultIp && !resultOp) {
-                    updateTextEditorHeightInFullScreen();
-                } else {
-                    mUiHandler.postDelayed(new Runnable() {
-                        public void run() {
-                            MmsLog.d(TAG, "onLayoutSizeChanged(): mTextEditor.setMaxHeight: "
-                                    + mReferencedTextEditorThreeLinesHeight);
-                            mTextEditor.setMaxHeight(mReferencedTextEditorThreeLinesHeight
-                                    * mCurrentMaxHeight / mReferencedMaxHeight);
-                        }
-                    }, 100);
-                }
-            }
-        }
-    };
-
-    private void updateTextEditorHeightInFullScreen() {
-        if (mIsLandscape || mTextEditor == null || mTextEditor.getVisibility() == View.GONE) {
-            return;
-        }
-        mUiHandler.postDelayed(new Runnable() {
-            public void run() {
-                updateFullScreenTextEditorHeight();
-            }
-        }, 100);
-    }
-
-    private void updateFullScreenTextEditorHeight() {
-        boolean resultIp = mIpCompose.updateIpFullScreenTextEditorHeight();
-        boolean resultOp = mOpComposeExt.updateFullScreenTextEditorHeight();
-        if (mAttachmentEditor.getVisibility() == View.VISIBLE
-                && mAttachmentEditor.getHeight() > 0
-                && !mWorkingMessage.hasSlideshow()) {
-            MmsLog.d(TAG, "updateTextEditorHeight(): mTextEditor.setMaxHeight: "
-                    + (mReferencedTextEditorSevenLinesHeight
-                            * mCurrentMaxHeight / mReferencedMaxHeight));
-            if (mIsLandscape) {
-                mTextEditor.setMaxHeight(
-                        mReferencedTextEditorTwoLinesHeight
-                        * mCurrentMaxHeight / mReferencedMaxHeight);
-            } else {
-                if (mIsSoftKeyBoardShow) {
-                    mTextEditor.setMaxHeight(mReferencedTextEditorFourLinesHeight
-                            * mCurrentMaxHeight / mReferencedMaxHeight);
-                } else {
-                    mTextEditor.setMaxHeight(mReferencedTextEditorSevenLinesHeight
-                            * mCurrentMaxHeight / mReferencedMaxHeight);
-                }
-            }
-        } else {
-            /// M: fix bug ALPS00419856, set TextEditor Height = four when unlock screen @{
-            if (mIsSoftKeyBoardShow && !mIsLandscape) {
-                if (Log.isLoggable(TAG, Log.VERBOSE)) {
-                    MmsLog.v(TAG, "updateFullScreenTextEditorHeight() updateTextEditorHeight()" +
-                            ": mTextEditor.setMaxHeight: " + (mReferencedTextEditorFourLinesHeight
-                                * mCurrentMaxHeight / mReferencedMaxHeight));
-                }
-                mTextEditor.setMaxHeight(mReferencedTextEditorFourLinesHeight
-                        * mCurrentMaxHeight / mReferencedMaxHeight);
-            /// @}
-            } else if (!mIsSoftKeyBoardShow && !mIsLandscape) {
-                if (Log.isLoggable(TAG, Log.VERBOSE)) {
-                    MmsLog.v(TAG, "updateTextEditorHeight(): mTextEditor.setMaxHeight: "
-                    + ((mReferencedTextEditorSevenLinesHeight + mReferencedAttachmentEditorHeight)
-                                * mCurrentMaxHeight / mReferencedMaxHeight));
-                }
-                if (!resultIp && !resultOp) {
-                    mTextEditor.setMaxHeight(
-                            (mReferencedTextEditorSevenLinesHeight
-                                    + mReferencedAttachmentEditorHeight)
-                                    * mCurrentMaxHeight / mReferencedMaxHeight);
-                }
-            } else {
-                if (Log.isLoggable(TAG, Log.VERBOSE)) {
-                    MmsLog.v(TAG, "updateTextEditorHeight(): mTextEditor.setMaxHeight: "
-                        + (mReferencedTextEditorTwoLinesHeight * mCurrentMaxHeight
-                                / mReferencedMaxHeight));
-                }
-                mTextEditor.setMaxHeight(mReferencedTextEditorTwoLinesHeight * mCurrentMaxHeight
-                            / mReferencedMaxHeight);
-            }
-        }
-    }
-    /// @}
-
-   @Override
-    public void startActivity(Intent intent) {
-        try {
-            super.startActivity(intent);
-        } catch (ActivityNotFoundException e) {
-            Intent mChooserIntent = Intent.createChooser(intent, null);
-            super.startActivity(mChooserIntent);
-        }
-    }
-
-    /**
-     * Simple cache to prevent having to load the same PduBody again and again for the same uri.
-     */
-
-    private boolean needSaveDraft() {
-        return ((!isRecipientsEditorVisible())
-                    || (mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms())))
-                && !mWorkingMessage.isDiscarded() && (mWorkingMessage.isWorthSaving());
-    }
-
-    public void onPreMmsSent() {
-        startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, 0);
-    }
-
-    private boolean checkSlideCount(boolean append) {
-        String mMsg = this.getString(R.string.cannot_add_slide_anymore);
-        Toast mToast = Toast.makeText(this, mMsg, Toast.LENGTH_SHORT);
-        int mSlideCount = 0;
-        SlideshowModel slideShow = mWorkingMessage.getSlideshow();
-        if (slideShow != null) {
-            mSlideCount = slideShow.size();
-        }
-        if (mSlideCount >= SlideshowEditor.MAX_SLIDE_NUM && append) {
-            mToast.show();
-            return false;
-        }
-        return true;
-    }
-
-    /// M: Code analyze 009,Show attachment dialog . @{
-    private class SoloAlertDialog extends AlertDialog {
-        private AlertDialog mAlertDialog;
-
-        private SoloAlertDialog(Context context) {
-            super(context);
-        }
-
-        public boolean needShow() {
-            return mAlertDialog == null || !mAlertDialog.isShowing();
-        }
-
-        public void show(final boolean append) {
-            if (!needShow()) {
-                return;
-            }
-
-            AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
-            builder.setIcon(R.drawable.ic_dialog_attach);
-            builder.setTitle(R.string.add_attachment);
-
-            // if (mAttachmentTypeSelectorAdapter == null) {
-            // add for vcard, if there is a real slideshow, hide vCard
-            int mode = AttachmentTypeSelectorAdapter.MODE_WITH_SLIDESHOW;
-            if (mWorkingMessage.hasSlideshow()) {
-                mode |= AttachmentTypeSelectorAdapter.MODE_WITHOUT_FILE_ATTACHMENT;
-            } else {
-                mode |= AttachmentTypeSelectorAdapter.MODE_WITH_FILE_ATTACHMENT;
-            }
-            if (MessageUtils.isVCalendarAvailable(ComposeMessageActivity.this)) {
-                mode |= AttachmentTypeSelectorAdapter.MODE_WITH_VCALENDAR;
-            }
-            mAttachmentTypeSelectorAdapter = new AttachmentTypeSelectorAdapter(getContext(), mode);
-            // }
-            builder.setAdapter(mAttachmentTypeSelectorAdapter,
-                    new DialogInterface.OnClickListener() {
-                        public void onClick(DialogInterface dialog, int which) {
-                            addAttachment(
-                                    mAttachmentTypeSelectorAdapter.buttonToCommand(which), append);
-                            dialog.dismiss();
-                        }
-                    });
-            mAlertDialog = builder.show();
-        }
-
-        public void dismiss() {
-            if (mAlertDialog != null && mAlertDialog.isShowing()) {
-                mAlertDialog.dismiss();
-            }
-            super.dismiss();
-        }
-    }
-    /// @}
-
-    private void waitForCompressing() {
-        synchronized (ComposeMessageActivity.this) {
-            while (mCompressingImage) {
-                try {
-                    wait();
-                } catch (InterruptedException e) {
-                    MmsLog.e(TAG, "intterrupted exception e ", e);
-                }
-            }
-        }
-    }
-
-    private void notifyCompressingDone() {
-        synchronized (ComposeMessageActivity.this) {
-            mCompressingImage = false;
-            notify();
-        }
-    }
-
-    private boolean mCompressingVCardFinished = false;
-
-    /// M: change return value to int. if attachFile.length is 0,will
-    /// return WorkingMessage.UNKNOWN_ERROR
-    /// The return value will be used in asyncAttachVCardByContactsId
-    /// to judge wether need to saveAsMms or not
-    private int setFileAttachment(final String fileName, final int type, final boolean append) {
-        final File attachFile = getFileStreamPath(fileName);
-        MmsLog.d(TAG, "setFileAttachment(): attachFile.exists()?=" + attachFile.exists() +
-                        ", attachFile.length()=" + attachFile.length());
-        final Resources res = getResources();
-        if (attachFile.exists() && attachFile.length() > 0) {
-            Uri attachUri = Uri.fromFile(attachFile);
-            int result = WorkingMessage.OK;
-            try {
-                if (append) {
-                    mWorkingMessage.checkSizeBeforeAppend();
-                }
-            } catch (ExceedMessageSizeException e) {
-                result = WorkingMessage.MESSAGE_SIZE_EXCEEDED;
-                handleAddAttachmentError(result, R.string.type_common_file);
-                return result;
-            }
-            result = mWorkingMessage.setAttachment(type, attachUri, append);
-            handleAddAttachmentError(result, R.string.type_common_file);
-            mCompressingVCardFinished = true;
-            return result;
-        } else {
-            mUiHandler.post(new Runnable() {
-                public void run() {
-                    Toast.makeText(ComposeMessageActivity.this,
-                            res.getString(R.string.failed_to_add_media, fileName),
-                            Toast.LENGTH_SHORT).show();
-                }
-            });
-            return WorkingMessage.UNKNOWN_ERROR;
-        }
-    }
-
-    public void setCompressingVCardFinished(boolean compressingVCardFinished) {
-        mCompressingVCardFinished = compressingVCardFinished;
-    }
-
-    private void asyncAttachVCalendar(final Uri eventUri) {
-        if (eventUri == null) {
-            return;
-        }
-        getAsyncDialog().runAsync(new Runnable() {
-            public void run() {
-                attachVCalendar(eventUri);
-                /// call saveAsMms to save the draft @{
-                mWorkingMessage.saveAsMms(false);
-                /// @}
-            }
-        }, null, R.string.adding_attachments_title);
-    }
-
-    private void attachVCalendar(Uri eventUri) {
-        if (eventUri == null) {
-            Log.w(TAG, "attachVCalendar, oops uri is null");
-            return;
-        }
-        int result = WorkingMessage.OK;
-
-        /// M: OP01
-        if (!mOpComposeExt.attachVCalendar(mAppendAttachmentSign,
-                WorkingMessage.VCALENDAR, eventUri, R.string.type_common_file)) {
-            result = mWorkingMessage.setAttachment(WorkingMessage.VCALENDAR, eventUri, false);
-            handleAddAttachmentError(result, R.string.type_common_file);
-        }
-        /// @}
-    }
-
-    /// M: Code analyze 019, Add vcard attachment.  @{
-    private void asyncAttachVCardByContactsId(final Intent data) {
-        if (data == null) {
-            return;
-        }
-        getAsyncDialog().runAsyncInThreadPool(new Runnable() {
-            public void run() {
-                long[] contactsId =
-                    data.getLongArrayExtra("com.mediatek.contacts.list.pickcontactsresult");
-                VCardAttachment va = new VCardAttachment(ComposeMessageActivity.this);
-                int result = WorkingMessage.OK;
-                String fileName = va.getVCardFileNameByContactsId(contactsId);
-                /// M: add for attachmentEnhance Modify ALPS00474719 @{
-                if (mOpComposeExt.asyncAttachVCardByContactsId(mAppendAttachmentSign)) {
-                    // add vcard and OP01
-                    result = setFileAttachment(fileName, WorkingMessage.VCARD, true);
-                } else {
-                    // replace or Not OP01
-                    result = setFileAttachment(fileName, WorkingMessage.VCARD, false);
-                }
-
-                /// Fix CR : ALPS00970618
-                /// Fix CR : ALPS01035223 Add VCard with 1000 contacts cause exceed message
-                /// limitation the result should be OK, that saveAsMms or there will be errors @{
-                if (result == WorkingMessage.OK) {
-                    Log.d("[Mms][Composer]", "asyncAttachVCardByContactsId result is ok");
-                    /// Fix CR ALPS01011718 @{
-                    if (mCompressingVCardFinished && mWorkingMessage.isDiscarded()) {
-                        mWorkingMessage.unDiscard();
-                    }
-                    /// @}
-                    mWorkingMessage.saveAsMms(false);
-                }
-                /// @}
-                VCardUtils.deleteVCardTempFile(getApplicationContext(), fileName);
-            }
-        }, null, R.string.adding_attachments_title);
-    }
-    /// @}
-
-    /// M: Code analyze 047, Extra uri from message body and get number from uri.
-    /// Then use this number to update contact cache. @{
-    private void updateContactCache(Cursor cursor) {
-        if (cursor != null) {
-            Set<SpannableString> msgs = new HashSet<SpannableString>();
-            while (cursor.moveToNext()) {
-                String smsBody = cursor.getString(MessageListAdapter.COLUMN_SMS_BODY);
-
-                if (smsBody == null) {
-                    continue;
-                }
-
-                SpannableString msg = new SpannableString(smsBody);
-                msgs.add(msg);
-            }
-            // update the contact cache in an async thread to avoid ANR
-            updateContactCacheAsync(msgs);
-        }
-    }
-
-    private void updateContactCacheAsync(final Set<SpannableString> msgs) {
-        for (SpannableString msg : msgs) {
-            Linkify.addLinks(msg, Linkify.ALL);
-        }
-        new Thread(new Runnable() {
-            public void run() {
-                Set<String> uriSet = new HashSet<String>();
-                for (SpannableString msg : msgs) {
-                    List<String> uris = MessageUtils.extractUris(msg.getSpans(0, msg.length(),
-                        URLSpan.class));
-                    for (String uri : uris) {
-                        uriSet.add(uri);
-                    }
-                }
-                for (String uri : uriSet) {
-                    String[] body = uri.toLowerCase().split("tel:");
-                    if (body.length > 1) {
-                        Contact.get(body[1].trim(), false);
-                    }
-                }
-            }
-        }).start();
-    }
-    /// @}
-
-    /// M: Code analyze 036, Change text size if adjust font size.@{
-    public void setTextSize(float size) {
-        if (mTextEditor != null) {
-            mTextEditor.setTextSize(size);
-        }
-        if (mMsgListAdapter != null) {
-            mMsgListAdapter.setTextSize(size);
-        }
-
-        if (mMsgListView != null && mMsgListView.getVisibility() == View.VISIBLE) {
-            int count = mMsgListView.getChildCount();
-            for (int i = 0; i < count; i++) {
-                MessageListItem item =  (MessageListItem) mMsgListView.getChildAt(i);
-                if (item != null) {
-                    item.setBodyTextSize(size);
-                }
-            }
-        }
-    }
-    /// @}
-
-    public boolean  dispatchTouchEvent(MotionEvent ev) {
-        boolean ret = false;
-        /// M: Code analyze 001, Plugin opeartor. @{
-        if (mOpComposeExt != null) {
-            ret = mOpComposeExt.dispatchTouchEvent(ev);
-        }
-        /// @}
-
-        if (!ret) {
-            ret = super.dispatchTouchEvent(ev);
-        }
-        return ret;
-    }
-
-    private void showKeyBoard(boolean isShow) {
-        if (isShow && mIsSmsEnabled) {
-            mTextEditor.requestFocus();
-            mInputMethodManager.showSoftInput(mTextEditor, 0);
-            mIsKeyboardOpen = true;
-        } else {
-            hideInputMethod();
-        }
-    }
-
-    private long genThreadIdFromContacts(Intent data) {
-        final long[] contactsId = data
-                .getLongArrayExtra("com.mediatek.contacts.list.pickdataresult");
-        if (contactsId == null || contactsId.length <= 0) {
-            Log.d(TAG, "[genThreadIdFromContacts] get recipients from contacts is null");
-            return 0;
-        }
-        final ContactList aList = new ContactList();
-        final ContactList list = new ContactList();
-        ContactList selected = ContactList.blockingGetByIds(contactsId);
-        List<String> selectedNumbers = Arrays.asList(selected.getProtosomaitcNumbers());
-        final List<String> numbers = Arrays.asList(mConversation.getRecipients()
-                .getProtosomaitcNumbers());
-        String selectedNumberAfterFormat = "";
-        if (numbers.size() > 0) {
-            for (String number : numbers) {
-                if (!number.trim().equals("")) {
-                    Contact c = Contact.get(number, false);
-                    aList.add(c);
-                }
-            }
-            // / M: format existing numbers(remove "-" and " ")
-            List<String> formatedNumbers = Arrays.asList(aList.getNumbers(true));
-            for (String selectedNumber : selectedNumbers) {
-                selectedNumberAfterFormat = MessageUtils.parseMmsAddress(selectedNumber);
-                if (selectedNumberAfterFormat != null
-                        && !selectedNumberAfterFormat.trim().equals("")
-                        && !formatedNumbers.contains(selectedNumberAfterFormat)) {
-                    Contact c = Contact.get(selectedNumber, false);
-                    list.add(c);
-                }
-            }
-            aList.addAll(list);
-        }
-        if (aList == null || aList.size() <= 0) {
-            return 0;
-        }
-        long id = Conversation.getOrCreateThreadId(getApplicationContext(), aList);
-        return id;
-    }
-
-    private boolean mIsStartMultiDeleteActivity = false;
-
-    private void updateTextEditorHint() {
-        // add for ipmessage
-        if (mIpCompose.onIpUpdateTextEditorHint()) {
-            return;
-        }
-        if (mIsSmsEnabled) {
-            mTextEditor.setHint(R.string.ipmsg_sms_hint);
-        } else {
-            mTextEditor.setHint(R.string.sending_disabled_not_default_app);
-        }
-        mTextEditor.setFilters(new InputFilter[] {
-            new TextLengthFilter(MmsConfig.getMaxTextLimit())
-        });
-        updateCounter(mWorkingMessage.getText(), 0, 0, 0);
-    }
-
-    private String formatLastOnlineTime(int time) {
-        return MessageUtils.formatTimeStampString(this, (long) (time * 1000L), true);
-    }
-
-    private void checkBeforeSendMessage(boolean bCheckEcmMode) {
-        boolean needSendIpMessage =
-            mIpCompose.checkIpMessageBeforeSendMessage(mSelectedSubId, bCheckEcmMode);
-        if (!needSendIpMessage) {
-            sendMessage(bCheckEcmMode);
-        }
-    }
-
-    /// M:added for bug ALPS00317889
-    private boolean mShowDialogForMultiImage = false;
-
-    /// M: show contact detail or create new contact. @{
-    private static final int MENU_SHOW_CONTACT          = 121;
-    private static final int MENU_CREATE_CONTACT        = 122;
-    private QuickContactBadge mQuickContact;
-    /// @}
-
-    /// M: fix bug ALPS00414023, update sub state dynamically. @{
-    private BroadcastReceiver mSubReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            String action = intent.getAction();
-            mOpComposeExt.onReceive(action, mGetSubInfoRunnable);
-
-            if (action != null && action.equals(TelephonyIntents.ACTION_SUBINFO_RECORD_UPDATED)) {
-                    /// M: fix bug ALPS00429274, dismiss Dialog when SUB_CHANGED @{
-                    if (mSubSelectDialog != null && mSubSelectDialog.isShowing()) {
-                        mSubSelectDialog.dismiss();
-                    }
-                    /// @}
-                    /// M: Fix Bug: ALPS00503002 ;
-                    getSubInfoList();
-                    updateSendButtonState();
-                    mMsgListAdapter.notifyDataSetChanged();
-            } else if (action != null
-                    && (action.equals(TelephonyIntents.ACTION_DEFAULT_SMS_SUBSCRIPTION_CHANGED)
-                        || action.equals(TelephonyIntents.ACTION_SUBINFO_CONTENT_CHANGE))) {
-                mGetSubInfoRunnable.run();
-            }
-        }
-    };
-
-    private void saveAsMms(boolean notify) {
-        if (!MessageUtils.allowSafeDraft(this, MmsConfig.getDeviceStorageFullStatus(), false,
-                TOAST_TYPE_FOR_SAVE_DRAFT)) {
-            return;
-        }
-        if (mNeedSaveAsMms) {
-            mNeedSaveAsMms = false;
-            if (mWorkingMessage.saveAsMms(notify) != null) {
-                mHasDiscardWorkingMessage = true;
-            }
-        }
-    }
-
-    /// M: after delete the last message of one thread,
-    /// don't finish this activity if have draft. @{
-    private void makeDraftEditable(ContactList recipients) {
-        if (!mConversation.getRecipients().equals(recipients)) {
-            mConversation.setRecipients(recipients);
-            MmsLog.d(TAG, "makeDraftEditable, do not equal");
-        } else {
-            MmsLog.d(TAG, "makeDraftEditable, equal");
-            mWorkingMessage.asyncDeleteDraftSmsMessage(mConversation);
-            mConversation.clearThreadId();
-        }
-        mWorkingMessage.setConversation(mConversation);
-        updateThreadIdIfRunning();
-        invalidateOptionsMenu();
-        hideRecipientEditor();
-        initRecipientsEditor(null);
-        isInitRecipientsEditor = true;
-    }
-    /// @}
-
-    private static final int CELL_PROGRESS_DIALOG = 1;
-
-    @Override
-    protected Dialog onCreateDialog(int id) {
-        //add for ipmessage
-        Dialog dlg = mIpCompose.onIpCreateDialog(id);
-        if (dlg != null) {
-            return dlg;
-        }
-
-        ProgressDialog dialog = null;
-        if (id == CELL_PROGRESS_DIALOG) {
-            dialog = new ProgressDialog(ComposeMessageActivity.this);
-            // mProgressDialog.setTitle(getText(titleResId));
-            dialog.setMessage(getString(R.string.sum_search_networks));
-            dialog.setIndeterminate(true);
-            dialog.setCancelable(false);
-            dialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
-            // / M: fix bug ALPS00451836, remove FLAG_DISMISS_KEYGUARD flags
-            if (getWindow() != null) {
-                getWindow().clearFlags(
-                        WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD
-                                | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
-            }
-        }
-        return dialog;
-    }
-
-    /// M: fix bug ALPS00941735, set Obsolete ThreadId and except it when ConversationList query
-    long mOldThreadID = -1;
-
-    boolean mIsCheckObsolete = false;
-
-    boolean mIsSameConv = true;
-
-    private void checkObsoleteThreadId() {
-        if (isRecipientsEditorVisible()) {
-            List<String> numbers =  mRecipientsEditor.getNumbers();
-            if (numbers != null && numbers.size() > 0) {
-                if (mOldThreadID > 0 && mIsCheckObsolete
-                    && mIsSameConv && !mWorkingMessage.isDiscarded()
-                    && !FolderModeUtils.getMmsDirMode()) {
-                    mIsCheckObsolete = false;
-                    mWorkingMessage.syncWorkingRecipients();
-                    long newThreadId = mWorkingMessage.getConversation().ensureThreadId();
-                    if (mOldThreadID != newThreadId) {
-                        DraftManager.sEditingThread.add(mOldThreadID);
-                        MmsLog.d(TAG, "new recipent list != old, old Obsolete thread id = "
-                            + mOldThreadID);
-                    }
-                }
-            }
-        }
-    }
-
-    /*
-     * M: reload working message when working message is not correct.
-     */
-    private void reloadWorkingMessage() {
-        if (mTempMmsUri == null) {
-            return;
-        }
-        WorkingMessage newMessage = WorkingMessage.load(this, mTempMmsUri);
-
-        if (newMessage != null) {
-            if (newMessage.hasMediaAttachments()) {
-                newMessage.removeAllFileAttaches();
-            }
-            boolean isMmsBefore = mWorkingMessage.requiresMms();
-            newMessage.setSubject(mWorkingMessage.getSubject(), false);
-
-            mWorkingMessage = newMessage;
-            updateThreadIdIfRunning();
-
-            boolean isMmsAfter = mWorkingMessage.requiresMms();
-            if (!isMmsAfter && !isMmsBefore) {
-                mWorkingMessage.setForceUpdateThreadId(true);
-            }
-        }
-    }
-
-    /**
-     * M: For Just not send length required mms with Slot one.<br>
-     * This function:check the mms is whether legnth required mms.
-     *
-     * @return
-     */
-    public boolean isLengthRequiredMms() {
-        MmsLog.d(TAG, "isLengthRequiredMms Checked");
-        if (mWorkingMessage == null) {
-            return false;
-        }
-        if (!mWorkingMessage.requiresMms()) {
-            return false;
-        }
-        if (mWorkingMessage.hasSubject()) {
-            return false;
-        }
-        if (mWorkingMessage.hasAttachedFiles()) {
-            return false;
-        }
-        if (mWorkingMessage.hasAttachment()) {
-            return false;
-        }
-        if ((mWorkingMessage.getState() & 1) > 0) {
-            return false;
-        }
-        SlideshowModel ssm = mWorkingMessage.getSlideshow();
-        if (ssm != null && ssm.size() != 1) {
-            return false;
-        } else if (ssm != null && ssm.get(0) != null && !ssm.get(0).hasText()) {
-            return false;
-        }
-        int slotId = SubscriptionManager.from(MmsApp.getApplication())
-                .getActiveSubscriptionInfo(mSelectedSubId).getSimSlotIndex();
-        if (slotId != 0) {
-            return false;
-        }
-        if (!TelephonyManager.getDefault().isNetworkRoaming(mSelectedSubId)) {
-            return false;
-        }
-        if (ssm == null && mWorkingMessage.hasText()) {
-            return true;
-        }
-        return true;
-    }
-
-    /**
-     * M: For Just not send length required mms with Slot one.<br>
-     */
-    public void confirmForChangeMmsToSms() {
-        if (!isLengthRequiredMms()) {
-            MmsLog.d(TAG, "isLengthRequiredMms Checked false");
-            mOpComposeExt.setConfirmMmsToSms(false);
-            confirmSendMessageIfNeeded();
-            return;
-        }
-        MmsLog.d(TAG, "isLengthRequiredMms Checked true");
-        new AlertDialog.Builder(this)
-            .setTitle("")
-            .setIconAttribute(android.R.attr.alertDialogIcon)
-            .setPositiveButton(R.string.yes, new OnClickListener() {
-                @Override
-                public void onClick(DialogInterface arg0, int arg1) {
-                    mOpComposeExt.setConfirmMmsToSms(false);
-                    mWorkingMessage.setLengthRequiresMms(false, false);
-                    confirmSendMessageIfNeeded();
-                }
-            }).setNegativeButton(R.string.no, new OnClickListener() {
-                @Override
-                public void onClick(DialogInterface arg0, int arg1) {
-                    mOpComposeExt.setConfirmMmsToSms(true);
-                    mWorkingMessage.setLengthRequiresMms(true, false);
-                    updateSendButtonState();
-                }
-            }).setCancelable(true).show();
-    }
-
-    /// M: Whether attachment is being added or not. @{
-    private boolean mWaitingAttachment = false;
-    public boolean isWaitingAttachment() {
-        return mWaitingAttachment;
-    }
-
-    public void setWaitingAttachment(boolean waitingAttachment) {
-        mWaitingAttachment = waitingAttachment;
-    }
-    /// @}
-
-    /// M: add for CMCC feature fix ALPS01317511 @{
-    public boolean isWorthSaving() {
-        boolean ret = false;
-        if (mWorkingMessage != null) {
-            ret = mWorkingMessage.isWorthSaving();
-        }
-        MmsLog.d(TAG, "isWorthSaving: ret = " + ret);
-        return ret;
-    }
-
-    public boolean hasValidRecipient() {
-        boolean ret = true;
-        if (isRecipientsEditorVisible()
-                && !mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms())) {
-            ret = false;
-        }
-        MmsLog.d(TAG, "hasValidRecipient: ret = " + ret);
-        return ret;
-    }
-    /// @}
-
-
-    private void stopDraftService() {
-        if (FeatureOption.MTK_GMO_ROM_OPTIMIZE) {
-            MmsLog.d(TAG, "stop Draft Service");
-            stopService(new Intent(this, DraftService.class));
-        }
-    }
-
-    /**
-     * Get Ip conversation for ip plugin.
-     * Notice: This function is also called by operator plugin(OP01). When modify this function,
-     * please notify operator team.
-     *
-     * @return IIpConversationExt
-     */
-    public IIpConversationExt getIpConversation() {
-        return mConversation.mIpConv;
-    }
-
-    /*
-     * M: ALPS01956117. If image is compressing after onStop,
-     * async save draft operation should be delayed.
-     */
-    private boolean mNeedSaveDraftAfterStop = false;
-
-    public class ComposeActivityCallback implements IComposeActivityCallback {
-
-        public void convertIpMessageToMmsOrSms(int type, boolean isAppend, String path,
-                String text, int subId) {
-            switch (type) {
-                case IpMessageUtils.IpMessageType.TEXT:
-                    mWorkingMessage.setText(text);
-                    break;
-                case IpMessageUtils.IpMessageType.PICTURE:
-                    if (!TextUtils.isEmpty(text)) {
-                        mWorkingMessage.setText(text);
-                        if (mTextEditor != null && mTextEditor.getVisibility() == View.VISIBLE) {
-                            mTextEditor.setText(text);
-                        }
-                    }
-                    File imageFile = new File(path);
-                    Uri imageUri = Uri.fromFile(imageFile);
-                    addImage(imageUri, isAppend);
-                    saveAsMms(true);
-                    break;
-                case IpMessageUtils.IpMessageType.VOICE:
-                    if (!TextUtils.isEmpty(text)) {
-                        mWorkingMessage.setText(text);
-                        if (mTextEditor != null && mTextEditor.getVisibility() == View.VISIBLE) {
-                            mTextEditor.setText(text);
-                        }
-                    }
-                    File voiceFile = new File(path);
-                    Uri voiceUri = Uri.fromFile(voiceFile);
-                    addAudio(voiceUri, isAppend);
-                    saveAsMms(true);
-                    break;
-                case IpMessageUtils.IpMessageType.VCARD:
-                    File vCardFile = new File(path);
-                    Uri vCardUri = Uri.fromFile(vCardFile);
-                    VCardAttachment va = new VCardAttachment(ComposeMessageActivity.this);
-                    String fileName = va.getVCardFileNameByUri(vCardUri);
-                    setFileAttachment(fileName, WorkingMessage.VCARD, false);
-                    saveAsMms(true);
-                    VCardUtils.deleteVCardTempFile(getApplicationContext(), fileName);
-                    break;
-                case IpMessageUtils.IpMessageType.VIDEO:
-                    if (!TextUtils.isEmpty(text)) {
-                        mWorkingMessage.setText(text);
-                        if (mTextEditor != null && mTextEditor.getVisibility() == View.VISIBLE) {
-                            mTextEditor.setText(text);
-                        }
-                    }
-                    File videoFile = new File(path);
-                    Uri videoUri = Uri.fromFile(videoFile);
-                    addVideo(videoUri, isAppend);
-                    saveAsMms(true);
-                    break;
-                case IpMessageUtils.IpMessageType.CALENDAR:
-                    File vCalendarFile = new File(path);
-                    Uri vCalendarUri = Uri.fromFile(vCalendarFile);
-                    attachVCalendar(vCalendarUri);
-                    saveAsMms(true);
-                    break;
-                default:
-                    break;
-            }
-            if (subId > 0) {
-                mSelectedSubId = subId;
-            }
-        }
-
-        public long getCurrentThreadId() {
-            return mConversation.getThreadId();
-        }
-
-        public void deleteDraftSmsMessage() {
-            mWorkingMessage.asyncDeleteDraftSmsMessage(mConversation);
-        }
-
-        @Override
-        public String getRecipientsEditorInfo() {
-            if (mRecipientsEditor != null && isRecipientsEditorVisible()) {
-                if (mRecipientsEditor.getNumbers().size() == 1) {
-                    return mRecipientsEditor.getNumbers().get(0);
-                }
-            }
-            return null;
-        }
-
-        @Override
-        public List<String> getRecipientsEditorInfoList() {
-            if (mRecipientsEditor != null && isRecipientsEditorVisible()) {
-                return mRecipientsEditor.getNumbers();
-            }
-            return null;
-        }
-
-        @Override
-        public String[] getConversationInfo() {
-            if (mConversation != null && mConversation.getRecipients() != null) {
-                return mConversation.getRecipients().getNumbers();
-            }
-            return null;
-        }
-
-        public IIpConversationExt getIpConversation() {
-            return mConversation.mIpConv;
-        }
-
-        public void callbackCheckConditionsAndSendMessage(boolean bCheckEcmMode) {
-            checkConditionsAndSendMessage(true);
-        }
-
-        public void callbackUpdateSendButtonState() {
-            updateSendButtonState();
-        }
-
-        public void callbackUpdateButtonState(boolean canResponse) {
-            mSendButtonCanResponse = canResponse;
-        }
-
-        public void callbackSendMessage(boolean bCheckEcmMode) {
-            sendMessage(bCheckEcmMode);
-        }
-
-        public void asyncDeleteDraftSmsMessage() {
-            mWorkingMessage.asyncDeleteDraftSmsMessage(mConversation);
-        }
-
-        public void addIpContacts(int pickCount, int requestCode) {
-            addContacts(pickCount, requestCode);
-        }
-
-        public long genIpThreadIdFromContacts(Intent data) {
-            return genThreadIdFromContacts(data);
-        }
-
-        public void asyncUpdateIpThreadMuteIcon() {
-            asyncUpdateThreadMuteIcon();
-        }
-
-        public void setIpOnlineDividerString(String onLine) {
-            mMsgListAdapter.setOnlineDividerString(onLine);
-        }
-
-        public void updateIpOnlineDividerTime() {
-            mMsgListAdapter.updateOnlineDividerTime();
-        }
-
-        public void notifyIpDataSetChanged() {
-            mMsgListAdapter.notifyDataSetChanged();
-        }
-
-        public void invalidateIpOptionsMenu() {
-            invalidateOptionsMenu();
-        }
-
-        public View showIpOrMmsSendButton(boolean isMms) {
-            return showSmsOrMmsSendButton(isMms);
-        }
-
-        public void setClearIpCacheFlag(boolean clearCacheFlag) {
-            mMsgListAdapter.setClearCacheFlag(clearCacheFlag);
-        }
-
-        public void setIpDraftState(boolean hasDraft) {
-            mConversation.setDraftState(hasDraft);
-        }
-
-        public void runIpAsyncInThreadPool(final Runnable backgroundTask,
-                final Runnable postExecuteTask, final int dialogStringId) {
-            mAsyncDialog.runAsyncInThreadPool(backgroundTask, postExecuteTask, dialogStringId);
-        }
-
-        public void syncIpWorkingRecipients() {
-            mWorkingMessage.syncWorkingRecipients();
-        }
-
-        public void guaranteeIpThreadId() {
-            mConversation.guaranteeThreadId();
-        }
-
-        public void onPreIpMessageSent() {
-            onPreMessageSent();
-        }
-
-        public void resetIpMessage() {
-            resetMessage();
-        }
-
-        public void onIpMessageSent() {
-            onMessageSent();
-        }
-
-        public void onIpClick(View view) {
-            onClick(view);
-        }
-
-        public boolean isIpSubjectEditorVisible() {
-            return isSubjectEditorVisible();
-        }
-
-        public void showIpSubjectEditor(boolean isShow) {
-            showSubjectEditor(isShow);
-        }
-
-        public void drawIpBottomPanel() {
-            drawBottomPanel();
-        }
-
-        public void hideIpSharePanel() {
-        }
-
-        public void addIpAttachment(int commonAttachmentType, boolean append) {
-            if (append) {
-                addAttachment(commonAttachmentType, append);
-            } else {
-                addAttachment(commonAttachmentType, !mWorkingMessage.hasAttachedFiles());
-            }
-        }
-
-        public void enableShareButton(boolean enable) {
-        }
-
-        public void resetSharePanel() {
-        }
-
-        public IWorkingMessageCallback getWorkingMessage() {
-            return mWorkingMessage;
-        }
-
-        public void hideIpRecipientEditor() {
-            hideRecipientEditor();
-        }
-
-        public void onIpSubSelection() {
-            subSelection();
-        }
-
-        public boolean isIpRecipientEditorVisible() {
-            return isRecipientsEditorVisible();
-        }
-
-        public void updateIpTitle() {
-            updateTitle(mConversation.getRecipients());
-        }
-
-        public void hideIpInputMethod() {
-            hideInputMethod();
-        }
-
-        public void showAddAttachmentDialog(final boolean append) {
-            ComposeMessageActivity.this.showAddAttachmentDialog(append);
-        }
-
-        public boolean checkSizeBeforeAppend() {
-            try {
-                mWorkingMessage.checkSizeBeforeAppend();
-            } catch (ExceedMessageSizeException e) {
-                int result = WorkingMessage.MESSAGE_SIZE_EXCEEDED;
-                handleAddAttachmentError(result, R.string.type_common_file);
-                return false;
-            }
-            return true;
-        }
-
-        public int setAttachment(int type, Uri uri, boolean append) {
-            return mWorkingMessage.setAttachment(type, uri, append);
-        }
-
-        public void handleAddAttachmentError(int result, int mediaTypeStringId) {
-            ComposeMessageActivity.this.handleAddAttachmentError(result, mediaTypeStringId);
-        }
-
-        public void checkRecipientsCountCallback() {
-            checkRecipientsCount();
-        }
-
-        public void confirmForChangeMmsToSmsCallback() {
-            confirmForChangeMmsToSms();
-        }
-
-        public void goToConversationListCallback() {
-            goToConversationList();
-        }
-
-        public void setHomeBox(int box) {
-            mHomeBox = box;
-        }
-
-        public void setHadToSlideShowEditor(boolean hadToSlideShowEditor) {
-            mHadToSlideShowEditor = hadToSlideShowEditor;
-        }
-
-        public void setWorkingMessage(IWorkingMessageCallback workingMessage) {
-            mWorkingMessage = (WorkingMessage) workingMessage;
-        }
-
-        public void updateThreadIdIfRunningCallback() {
-            updateThreadIdIfRunning();
-        }
-
-        public void drawTopPanelCallback(boolean showSubjectEditor) {
-            drawTopPanel(showSubjectEditor);
-        }
-
-        public void processNewIntentCallback(Intent intent) {
-            processNewIntent(intent);
-        }
-
-        public void updateCounterCallback(CharSequence text, int start, int before, int count) {
-            updateCounter(text, start, before, count);
-        }
-
-        public boolean isPreparedForSendingCallback() {
-            return isPreparedForSending();
-        }
-
-        public void setIsPickContatct(boolean isPickContatct) {
-            misPickContatct = isPickContatct;
-        }
-
-        public void updateSendButtonStateCallback(boolean enabled) {
-            updateSendButtonState(enabled);
-        }
-
-        public void updateTextEditorHintCallback() {
-            updateTextEditorHint();
-        }
-
-        public void setSendButtonCanResponse(boolean sendButtonCanResponse) {
-            mSendButtonCanResponse = sendButtonCanResponse;
-        }
-
-        public boolean getSendButtonCanResponse() {
-            return mSendButtonCanResponse;
-        }
-
-        public void callbackCheckBeforeSendMessage(boolean bCheckEcmMode) {
-            checkBeforeSendMessage(bCheckEcmMode);
-        }
-
-        public boolean isHasRecipientCountCallback() {
-            return isHasRecipientCount();
-        }
-
-        public void requestRecipientsEditorFocus() {
-            if (isRecipientsEditorVisible()) {
-                mRecipientsEditor.requestFocus();
-            }
-        }
-
-        public CharSequence getTextEditorText() {
-            return mTextEditor.getText();
-        }
-
-        public void hideOrShowTopPanelCallback() {
-            hideOrShowTopPanel();
-        }
-
-        public boolean getIsSmsEnabled() {
-            return mIsSmsEnabled;
-        }
-
-        public OnCreateContextMenuListener getOnCreateContextMenuListener() {
-            return mRecipientsMenuCreateListener;
-        }
-
-        public String getNumbersFromIntentCallback(Intent intent) {
-            return getNumbersFromIntent(intent);
-        }
-
-        public void confirmSendMessageIfNeededCallback() {
-            confirmSendMessageIfNeeded();
-        }
-
-        public void setSubIdCallback(int subId) {
-            setSubId(subId);
-        }
-
-        public void updateFullScreenTextEditorHeightCallback() {
-            updateFullScreenTextEditorHeight();
-        }
-
-        public void showKeyBoardCallback(boolean isShow) {
-            showKeyBoard(isShow);
-        }
-
-        public void setTextEditorMaxHeight(int linesHeight) {
-            mTextEditor.setMaxHeight(linesHeight * mCurrentMaxHeight / mReferencedMaxHeight);
-        }
-
-        public void unpreparedForSendingAlertCallback() {
-            unpreparedForSendingAlert();
-        }
-
-        public boolean showWfcSendButtonPopUpCallback() {
-            return showWfcSendButtonPopUp();
-        }
-    }
-
-    public void setCanResponse(boolean canResponse) {
-        mClickCanResponse = canResponse;
-    }
-
-    ///M: WFC: Show pop-up @ {
-    private boolean showWfcSendButtonPopUp() {
-        MmsLog.d(TAG, "showWfcSendButtonPopUp mSelectedSubId: " + mSelectedSubId);
-        if (MessagingNotification.doShowWfcPopup(mSelectedSubId, getApplicationContext())) {
-            new AlertDialog.Builder(this)
-                .setCancelable(false)
-                .setTitle(R.string.wfc_no_cellular_network)
-                .setMessage(R.string.wfc_connect_to_available_wifi)
-                .setPositiveButton(R.string.OK, new OnClickListener() {
-                    public void onClick(DialogInterface dialog, int whichButton) {
-                        dialog.dismiss();
-                    }
-            }).show();
-            return true;
-        }
-        return false;
-    }
-   /// @}
-
-    @Override
-    public void onRequestPermissionsResult(
-            final int requestCode, final String permissions[], final int[] grantResults) {
-        Log.d(TAG, " onRequestPermissionsResult Activity Count: "
-                + PermissionCheckUtil.sPermissionsActivityStarted);
-        PermissionCheckUtil.setPermissionActivityCount(false);
-        if (isAllPermissionGranted()) {
-            mNeedRequestPermissins = false;
-            if (DraftCache.getInstance() == null) {
-                MmsApp.getApplication().onRequestPermissionsResult();
-            }
-
-            //onCreate begin
-            mForwardingMessage = false;
-
-            /// M: If cell dialog is showed before, do not show it. @{
-            if (mSavedInstanceState != null
-                    && mSavedInstanceState.getBoolean("cell_dialog_showing", false)) {
-                MmsLog.d(TAG, "cell progress dialog is showed before, do not show it now");
-                mSavedInstanceState.putBundle("android:savedDialogs", null);
-            }
-            /// @}
-
-            // add for ipmessage
-            mIpCompose = IpMessageUtils.getIpMessagePlugin(this).getIpComposeActivity();
-            // add for op plugin
-            mOpComposeExt = OpMessageUtils.getOpMessagePlugin().getOpComposeExt();
-
-            mMessageSubId = (int) Settings.System.getLong(getContentResolver(),
-                    Settings.System.SMS_SIM_SETTING, Settings.System.DEFAULT_SIM_NOT_SET);
-
-            mInputMethodManager =
-                (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
-
-            /// M: Code analyze 002,  If a new ComposeMessageActivity is created, kill old one
-            Activity compose = sCompose == null ? null : sCompose.get();
-            /// M Fix CR : ALPS01275735, which has mms draft for conversation A, enter it.
-            /// change recipients froam A to B, then come a B notification , click the notification,
-            /// enter the thread A, it will show wrong composer UI.
-            /// because conversation from cache is the same. @{
-            if (compose != null && compose instanceof ComposeMessageActivity) {
-                Intent in = this.getIntent();
-                /// M : Fix issue ALPS01767850 @{
-                if (in.getBooleanExtra("from_notification", false)) {
-                    boolean b = ((ComposeMessageActivity) compose).hasValidRecipient();
-                    if (b) {
-                        mLastThreadIdFromNotification
-                                = ((ComposeMessageActivity) compose)
-                                    .mConversation.ensureThreadId();
-                        if (!((ComposeMessageActivity) compose).mWorkingMessage.hasAttachment()) {
-                            sTextEditorText
-                                    = ((ComposeMessageActivity) compose)
-                                            .mWorkingMessage.getText().toString();
-                        } else {
-                            sTextEditorText = null;
-                        }
-                    }
-                }
-                /// @}
-                long thid = in.getLongExtra("thread_id_from_notification", -1);
-                if (((ComposeMessageActivity) compose).mConversation != null) {
-                    if (thid == ((ComposeMessageActivity) compose).mConversation.getThreadId()) {
-                        ((ComposeMessageActivity) compose).mConversation.clearThreadId();
-                    }
-                }
-            }
-            /// @}
-
-            if (compose != null && !compose.isFinishing() && mSavedInstanceState == null) {
-                MmsLog.d(TAG, "onCreate finish old compose");
-                compose.finish();
-            }
-            sCompose = null;
-            sCompose = new WeakReference(this);
-            /// @}
-            /// M: Code analyze 003,  Set or get max mms size.
-            initMessageSettings();
-            /// @}
-            resetConfiguration(getResources().getConfiguration());
-            /// M: Code analyze 004, Set max height for text editor. @{
-            WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
-            if (mIsLandscape) {
-                mCurrentMaxHeight = windowManager.getDefaultDisplay().getWidth();
-            } else {
-                mCurrentMaxHeight = windowManager.getDefaultDisplay().getHeight();
-            }
-            MmsLog.d(TAG, "onCreate(): mCurrentMaxHeight = " + mCurrentMaxHeight);
-            /// @}
-            setContentView(R.layout.compose_message_activity);
-            setProgressBarVisibility(false);
-
-            mIpCompose.onIpComposeActivityCreate(this, mIpComposeCallback, mHandler, mUiHandler,
-                    (ImageButton) findViewById(R.id.send_button_sms),
-                    (TextView) findViewById(R.id.ip_message_typing_status),
-                    (TextView) findViewById(R.id.ipmsg_joyn_stranger_remind),
-                    findViewById(R.id.bottom_panel), mSavedInstanceState,
-                    (ImageButton) findViewById(R.id.share_button),
-                    (LinearLayout) findViewById(R.id.panel_container),
-                    (EditText) findViewById(R.id.embedded_text_editor));
-
-            /// M: add for update sub state dynamically. @{
-            IntentFilter intentFilter =
-                new IntentFilter(TelephonyIntents.ACTION_SUBINFO_RECORD_UPDATED);
-            mOpComposeExt.onCreate(mIpComposeCallback, getIntent(), intentFilter, compose, this,
-                    mSavedInstanceState, mUiHandler, (ImageButton) findViewById(R.id.share_button),
-                    (LinearLayout) findViewById(R.id.panel_container),
-                    (EditText) findViewById(R.id.embedded_text_editor));
-            /// @}
-
-            /// M: Code analyze 005, Set input mode. @{
-            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
-            /// @}
-
-            // Initialize members for UI elements.
-            initResourceRefs();
-            /// M: Code analyze 006, Control Sub indicator on status bar. @{
-            mStatusBarManager = (StatusBarManager) getSystemService(Context.STATUS_BAR_SERVICE);
-            mComponentName = getComponentName();
-            /// @}
-
-            /// M: Code analyze 007, Get information from Sub or save message to Sub. @{
-            mSubCount = 0;
-            /// @}
-
-            mContentResolver = getContentResolver();
-            mBackgroundQueryHandler = new BackgroundQueryHandler(mContentResolver);
-
-            initialize(mSavedInstanceState, 0, true);
-
-            if (TRACE) {
-                android.os.Debug.startMethodTracing("compose");
-            }
-            /// M: Code analyze 008,unkown . @{
-            mDestroy = false;
-
-            /// @}
-            /// M: Code analyze 009,Show attachment dialog . @{
-            mSoloAlertDialog = new SoloAlertDialog(this);
-            /// @}
-            /// M: Code analyze 007, Get information from Sub or
-            /// save message to Sub.(Get all Sub info) @{
-            mGetSubInfoRunnable.run();
-            /// @} for ALPS00475359 end
-
-            this.registerReceiver(mSubReceiver, intentFilter);
-            /// @}
-
-            //onStart begin
-            mIsActivityStoped = false;
-            boolean isSmsEnabled = MmsConfig.isSmsEnabled(this);
-            if (isSmsEnabled != mIsSmsEnabled) {
-                mIsSmsEnabled = isSmsEnabled;
-                invalidateOptionsMenu();
-            }
-            /// M Fix CR : ALPS01257113, when sub select dialog
-            /// showed in default sms. after change to
-            /// non-default sms, dismiss the sub select dialog @{
-            if (!mIsSmsEnabled) {
-                if (mSubSelectDialog != null && mSubSelectDialog.isShowing()) {
-                    mSubSelectDialog.dismiss();
-                }
-            }
-            /// @}
-
-            /// M: Code analyze 036, Change text size if adjust font size.@{
-            float textSize =
-                MessageUtils.getPreferenceValueFloat(this, SettingListActivity.TEXT_SIZE, 18);
-            setTextSize(textSize);
-            /// @}
-
-            /// M: Code analyze 013, Get contacts from Contact app . @{
-            misPickContatct = false;
-            /// @}
-            // M:for ALPS01065027,just for compose messagelist in scrolling
-            mMsgListView.setOnScrollListener(mScrollListener);
-            mScrollListener.setIsNeedRefresh(true);
-            mScrollListener.setThreadId(mConversation.getThreadId(), ComposeMessageActivity.this);
-            initFocus();
-
-            // Register a BroadcastReceiver to listen on HTTP I/O process.
-            registerReceiver(mHttpProgressReceiver, mHttpProgressFilter);
-            mOpComposeExt.onStart(this, this);
-            loadMessageContent();
-
-            // Update the fasttrack info in case any of the recipients' contact info changed
-            // while we were paused. This can happen, for example, if a user changes or adds
-            // an avatar associated with a contact.
-            /// M: @{
-            if (mConversation.getThreadId() == 0) {
-                mWorkingMessage.syncWorkingRecipients();
-            }
-            /// @}
-
-            if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
-                MmsLog.vpi(TAG, "onStart: update title, mConversation=" + mConversation.toString());
-            }
-
-            ActionBar actionBar = getActionBar();
-            /// M: Add log. @{
-            if (actionBar == null) {
-                MmsLog.e(TAG, "ACTION BAR is null, window feature FEATURE_ACTION_BAR: "
-                        + getWindow().hasFeature(Window.FEATURE_ACTION_BAR)
-                        + ", feature FEATURE_NO_TITLE: "
-                        + getWindow().hasFeature(Window.FEATURE_NO_TITLE));
-            } else {
-                actionBar.setDisplayHomeAsUpEnabled(true);
-            }
-            /// @}
-
-            /// M: Code analyze 047, Extra uri from message body and get number from uri.
-            /// Then use this number to update contact cache. @{
-            mNeedUpdateContactForMessageContent = true;
-            /// @}
-
-            /// M: Code analyze 001, Plugin opeartor. @{
-            new MmsDialogNotifyUtils(this).closeMsgDialog();
-            /// @}
-
-            if (isRecipientsEditorVisible() && mIsSmsEnabled &&
-                    getResources().getConfiguration().orientation
-                        != Configuration.ORIENTATION_LANDSCAPE) {
-                getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
-                        WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
-            }
-            ///M: WFC: Show notification ticker @ {
-            if (ImsManager.isWfcEnabledByPlatform(getApplicationContext())) {
-//                MessagingNotification.showWfcNotification(getApplicationContext());
-            }
-            /// @}
-            if (mMsgListAdapter != null) {
-                mMsgListAdapter.setOnDataSetChangedListener(mDataSetChangedListener);
-            }
-            addRecipientsListeners();
-        } else {
-            finish();
-        }
-    }
-
-    private boolean requestAllPermissions() {
-        ArrayList<String> missingList;
-        if (CtaUtils.isCtaSupported()) {
-            if (CtaUtils.isEmailMmsSupported()) {
-                missingList = PermissionCheckUtil.getMissingPermissions(this,
-                        PermissionCheckUtil.ALL_CTA_PERMISSIONS);
-            } else {
-                missingList = PermissionCheckUtil.getMissingPermissions(this,
-                        PermissionCheckUtil.ALL_CTA_PERMISSIONS_NO_SEND_MMS);
-            }
-        } else {
-            missingList = PermissionCheckUtil.getMissingPermissions(this,
-                    PermissionCheckUtil.ALL_PERMISSIONS);
-        }
-
-        if (missingList.size() == 0) {
-            Log.d(TAG, " requestAllPermissions all permissions granted");
-            return false;
-        }
-
-        final String[] missingArray = new String[missingList.size()];
-        missingList.toArray(missingArray);
-        Log.d(TAG, " requestAllPermissions all permissions start!");
-        PermissionCheckUtil.setPermissionActivityCount(true);
-        requestPermissions(missingArray,
-                PermissionCheckUtil.REQUIRED_PERMISSIONS_REQUEST_CODE);
-        return true;
-    }
-
-    private boolean isAllPermissionGranted() {
-        String[] permissions;
-        if (CtaUtils.isCtaSupported()) {
-            if (CtaUtils.isEmailMmsSupported()) {
-                permissions = PermissionCheckUtil.ALL_CTA_PERMISSIONS;
-            } else {
-                permissions = PermissionCheckUtil.ALL_CTA_PERMISSIONS_NO_SEND_MMS;
-            }
-        } else {
-            permissions = PermissionCheckUtil.ALL_PERMISSIONS;
-        }
-
-        for (int i = 0; i < permissions.length; i++) {
-            if (!PermissionCheckUtil.hasPermission(this, permissions[i])) {
-                // Show toast
-                if (PermissionCheckUtil.isRequiredPermission(permissions[i])
-                        || PermissionCheckUtil.isNeverGrantedPermission(this, permissions[i])) {
-                    if (!PermissionCheckUtil.isPermissionChecking()) {
-                        PermissionCheckUtil.showNoPermissionsToast(this);
-                    }
-                }
-                Log.d(TAG, "isAllPermissionGranted return false");
-                return false;
-            }
-        }
-
-        Log.d(TAG, "isAllPermissionGranted return true");
-        return true;
-    }
-
-    @Override
-    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
-        if (mOpComposeExt != null) {
-            mOpComposeExt.onMultiWindowModeChanged(isInMultiWindowMode);
-        }
-    }
-
-}
Index: vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/MmsConfig.java
===================================================================
--- vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/MmsConfig.java	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/src/com/android/mms/MmsConfig.java	(revision 3018)
@@ -1,753 +0,0 @@
-/*
-* Copyright (C) 2014 MediaTek Inc.
-* Modification based on code covered by the mentioned copyright
-* and/or permission notice(s).
-*/
-/*
- * Copyright (C) 2009 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.mms;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.res.XmlResourceParser;
-import android.database.Cursor;
-import android.os.Bundle;
-import android.preference.PreferenceManager;
-import android.provider.Telephony;
-import android.telephony.SubscriptionManager;
-import android.util.Log;
-
-import com.android.internal.telephony.TelephonyProperties;
-import com.android.mms.util.FeatureOption;
-
-import com.mediatek.custom.CustomProperties;
-import com.mediatek.ipmsg.util.IpMessageUtils;
-import com.mediatek.mms.ext.IOpMmsConfigExt;
-import com.mediatek.mms.ipmessage.IMmsConfigExt;
-import com.mediatek.opmsg.util.OpMessageUtils;
-import com.mediatek.telephony.TelephonyManagerEx;
-
-import org.xmlpull.v1.XmlPullParser;
-import org.xmlpull.v1.XmlPullParserException;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-public class MmsConfig {
-    private static final String TAG = "MmsConfig";
-    private static final boolean DEBUG = true;
-    private static final boolean LOCAL_LOGV = false;
-
-    private static final String DEFAULT_HTTP_KEY_X_WAP_PROFILE = "x-wap-profile";
-    private static final String DEFAULT_USER_AGENT = "Android-Mms/2.0";
-
-    /// KK migration, for default MMS function. @{
-    private static final String MMS_APP_PACKAGE = "com.android.mms";
-
-    private static final String SMS_PROMO_DISMISSED_KEY = "sms_promo_dismissed_key";
-    ///@}
-    private static final int MAX_IMAGE_HEIGHT = 480;
-    private static final int MAX_IMAGE_WIDTH  = 640;
-
-    /**
-     * Whether to hide MMS functionality from the user (i.e. SMS only).
-     */
-    private static boolean mTransIdEnabled = false;
-    private static int mMmsEnabled = 1;                         // default to true
-    private static int mMaxMessageSize = 300 * 1024;            // default to 300k max size
-    private static String mUserAgent = DEFAULT_USER_AGENT;
-    private static String mUaProfTagName = DEFAULT_HTTP_KEY_X_WAP_PROFILE;
-    private static String mUaProfUrl = null;
-    private static String mHttpParams = null;
-    private static String mHttpParamsLine1Key = null;
-    private static String mEmailGateway = null;
-    private static int mMaxImageHeight = MAX_IMAGE_HEIGHT;      // default value
-    private static int mMaxImageWidth = MAX_IMAGE_WIDTH;        // default value
-    private static int mRecipientLimit = Integer.MAX_VALUE;     // default value
-    private static int mDefaultSMSMessagesPerThread = 10000;    // default value
-    private static int mDefaultMMSMessagesPerThread = 1000;     // default value
-    private static int mMinMessageCountPerThread = 2;           // default value
-    private static int mMaxMessageCountPerThread = 10000;        // default value
-    private static int mMinimumSlideElementDuration = 7;        // default to 7 sec
-    private static boolean mNotifyWapMMSC = false;
-    private static boolean mAllowAttachAudio = true;
-
-    // This flag is somewhat confusing. If mEnableMultipartSMS is true, long sms messages are
-    // always sent as multi-part sms messages, with no checked limit on the number of segments.
-    // If mEnableMultipartSMS is false, then mSmsToMmsTextThreshold is used to determine the
-    // limit of the number of sms segments before turning the long sms message into an mms
-    // message. For example, if mSmsToMmsTextThreshold is 4, then a long sms message with three
-    // or fewer segments will be sent as a multi-part sms. When the user types more characters
-    // to cause the message to be 4 segments or more, the send button will show the MMS tag to
-    // indicate the message will be sent as an mms.
-    private static boolean mEnableMultipartSMS = true;
-
-    private static boolean mEnableSlideDuration = true;
-    private static boolean mEnableMMSReadReports = true;        // key: "enableMMSReadReports"
-    private static boolean mEnableSMSDeliveryReports = true;    // key: "enableSMSDeliveryReports"
-    private static boolean mEnableMMSDeliveryReports = true;    // key: "enableMMSDeliveryReports"
-    private static int mMaxTextLength = -1;
-
-    // This is the max amount of storage multiplied by mMaxMessageSize that we
-    // allow of unsent messages before blocking the user from sending any more
-    // MMS's.
-    private static int mMaxSizeScaleForPendingMmsAllowed = 4;       // default value
-
-    // Email gateway alias support, including the master switch and different rules
-    private static boolean mAliasEnabled = false;
-    private static int mAliasRuleMinChars = 2;
-    private static int mAliasRuleMaxChars = 48;
-
-    private static int mMaxSubjectLength = 40;  // maximum number of characters allowed for mms
-                                                // subject
-
-    /// M: google jb.mr1 patch, group mms
-    // If mEnableGroupMms is true, a message with multiple recipients, regardless of contents,
-    // will be sent as a single MMS message with multiple "TO" fields set for each recipient.
-    // If mEnableGroupMms is false, the group MMS setting/preference will be hidden in the settings
-    // activity.
-    private static boolean mEnableGroupMms = true;
-
-    private static final int RECIPIENTS_LIMIT = 50;
-
-    /// M: Mms size limit, default 300K.
-    private static int mUserSetMmsSizeLimit = 300;
-    /// M: Receive Mms size limit for 2G network
-    private static int mReceiveMmsSizeLimitFor2G = 200;
-    /// M: Receive Mms size limit for TD network
-    private static int mReceiveMmsSizeLimitForTD = 400;
-
-    /// M: default value
-    private static int mMaxRestrictedImageHeight = 1200;
-    private static int mMaxRestrictedImageWidth = 1600;
-    private static int mSmsRecipientLimit = 100;
-
-    private static boolean mDeviceStorageFull = false;
-
-    private static IOpMmsConfigExt mOpConfigExt = null;
-
-    // / M: Add for get max text size from ip message
-    private static Context mContext;
-
-    /// Add for support Auto Test.
-    public static boolean sIsRunTestCase = false;
-    public static boolean sIsDefaultSMSInTestCase = false;
-    /// @}
-
-    private static List<Integer> allQuickTextIds = new ArrayList<Integer>();
-    private static List<String> allQuickTexts = new ArrayList<String>();
-    public static IMmsConfigExt mIpConfig;
-
-    private static int sSmsToMmsTextThreshold = 6;
-    private static int sSmsToMmsTextThresholdForCT = 7;
-
-    private static void initPlugin(Context context) {
-        mOpConfigExt = OpMessageUtils.getOpMessagePlugin().getOpMmsConfigExt();
-        mIpConfig = IpMessageUtils.getIpMessagePlugin(context).getIpConfig();
-    }
-
-    public static void init(Context context) {
-        if (LOCAL_LOGV) {
-            Log.v(TAG, "MmsConfig.init()");
-        }
-        // Always put the mnc/mcc in the log so we can tell which mms_config.xml was loaded.
-        Log.d(TAG, "mnc/mcc: " +
-                android.os.SystemProperties.get(TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC));
-
-        mContext = context;
-        // initialize the operator plugin
-        initPlugin(context);
-
-        loadMmsSettings(context);
-
-        // add for ipmessage
-        mIpConfig.onIpInit(context);
-    }
-
-    /// KK migration, for default MMS function. @{
-    public static boolean isSmsEnabled(Context context) {
-        /// Add for support Auto Test.
-        if (sIsRunTestCase) {
-            return sIsDefaultSMSInTestCase;
-        }
-        /// @}
-        String defaultSmsApplication = Telephony.Sms.getDefaultSmsPackage(context);
-
-        if (defaultSmsApplication != null && defaultSmsApplication.equals(MMS_APP_PACKAGE)) {
-            return true;
-        }
-        return false;
-    }
-
-    public static boolean isSmsPromoDismissed(Context context) {
-        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
-        return preferences.getBoolean(SMS_PROMO_DISMISSED_KEY, false);
-    }
-
-    public static void setSmsPromoDismissed(Context context) {
-        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
-        SharedPreferences.Editor editor = preferences.edit();
-        editor.putBoolean(SMS_PROMO_DISMISSED_KEY, true);
-        editor.apply();
-    }
-
-    public static Intent getRequestDefaultSmsAppActivity() {
-        final Intent intent = new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
-        intent.putExtra(Telephony.Sms.Intents.EXTRA_PACKAGE_NAME, MMS_APP_PACKAGE);
-        return intent;
-    }
-    ///@}
-
-    public static int getSmsToMmsTextThresholdForC2K(Context context) {
-        if (hasUSIMInserted(context)) {
-            Log.d(TAG, "get getSmsToMmsTextThresholdForC2K" + sSmsToMmsTextThresholdForCT);
-            return sSmsToMmsTextThresholdForCT;
-        }
-        return sSmsToMmsTextThreshold;
-    }
-
-    /**
-     * M: For OM Version: check whethor has usim card.
-     * @param context the context.
-     * @return ture: has usim; false: not.
-     */
-    private static boolean hasUSIMInserted(Context context) {
-        if (context == null) {
-            return false;
-        }
-        int[] ids = SubscriptionManager.from(context).getActiveSubscriptionIdList();
-        if (ids != null && ids.length > 0) {
-            for (int subId : ids) {
-                if (isUSimType(subId)) {
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-
-    /**
-     * M: For EVDO: check the sim is whether UIM or not.
-     *
-     * @param subId the sim's sub id.
-     * @return true: UIM; false: not UIM.
-     */
-    private static boolean isUSimType(int subId) {
-        String phoneType = TelephonyManagerEx.getDefault().getIccCardType(subId);
-        if (phoneType == null) {
-            Log.d(TAG, "[isUIMType]: phoneType = null");
-            return false;
-        }
-        Log.d(TAG, "[isUIMType]: phoneType = " + phoneType);
-        return phoneType.equalsIgnoreCase("CSIM") || phoneType.equalsIgnoreCase("UIM")
-                || phoneType.equalsIgnoreCase("RUIM");
-    }
-
-    public static boolean getMmsEnabled() {
-        return mMmsEnabled == 1 ? true : false;
-    }
-
-    public static int getMaxMessageSize() {
-        if (LOCAL_LOGV) {
-            Log.v(TAG, "MmsConfig.getMaxMessageSize(): " + mMaxMessageSize);
-        }
-        return mMaxMessageSize;
-    }
-
-    /**
-     * This function returns the value of "enabledTransID" present in mms_config file.
-     * In case of single segment wap push message, this "enabledTransID" indicates whether
-     * TransactionID should be appended to URI or not.
-     */
-    public static boolean getTransIdEnabled() {
-        return mTransIdEnabled;
-    }
-
-    public static String getUserAgent() {
-        /// M: @{
-        String value = CustomProperties.getString(
-                CustomProperties.MODULE_MMS,
-                CustomProperties.USER_AGENT,
-                mUserAgent);
-        /// @}
-        return value;
-    }
-
-    public static String getUaProfTagName() {
-        return mUaProfTagName;
-    }
-
-    public static String getUaProfUrl() {
-        /// M: @{
-        String value = CustomProperties.getString(
-                CustomProperties.MODULE_MMS,
-                CustomProperties.UAPROF_URL,
-                mUaProfUrl);
-        /// @}
-        return value;
-    }
-
-    public static String getHttpParams() {
-        return mHttpParams;
-    }
-
-    public static String getHttpParamsLine1Key() {
-        return mHttpParamsLine1Key;
-    }
-
-    public static String getEmailGateway() {
-        return mEmailGateway;
-    }
-
-    public static int getMaxImageHeight() {
-        return mMaxImageHeight;
-    }
-
-    public static int getMaxImageWidth() {
-        return mMaxImageWidth;
-    }
-
-    public static int getRecipientLimit() {
-        return mRecipientLimit;
-    }
-
-    public static int getDefaultSMSMessagesPerThread() {
-        return mDefaultSMSMessagesPerThread;
-    }
-
-    public static int getDefaultMMSMessagesPerThread() {
-        return mDefaultMMSMessagesPerThread;
-    }
-
-    public static int getMinMessageCountPerThread() {
-        return mMinMessageCountPerThread;
-    }
-
-    public static int getMaxMessageCountPerThread() {
-        return mMaxMessageCountPerThread;
-    }
-
-    public static int getMinimumSlideElementDuration() {
-        return mMinimumSlideElementDuration;
-    }
-
-    public static boolean getMultipartSmsEnabled() {
-        return mEnableMultipartSMS;
-    }
-
-    public static boolean getSlideDurationEnabled() {
-        return mEnableSlideDuration;
-    }
-
-    public static boolean getMMSReadReportsEnabled() {
-        return mEnableMMSReadReports;
-    }
-
-    public static boolean getSMSDeliveryReportsEnabled() {
-        return mEnableSMSDeliveryReports;
-    }
-
-    public static boolean getMMSDeliveryReportsEnabled() {
-        return mEnableMMSDeliveryReports;
-    }
-
-    public static boolean getNotifyWapMMSC() {
-        return mNotifyWapMMSC;
-    }
-
-    public static int getMaxSizeScaleForPendingMmsAllowed() {
-        return mMaxSizeScaleForPendingMmsAllowed;
-    }
-
-    public static boolean isAliasEnabled() {
-        return mAliasEnabled;
-    }
-
-    public static int getAliasMinChars() {
-        return mAliasRuleMinChars;
-    }
-
-    public static int getAliasMaxChars() {
-        return mAliasRuleMaxChars;
-    }
-
-    public static boolean getAllowAttachAudio() {
-        return mAllowAttachAudio;
-    }
-
-    public static int getMaxSubjectLength() {
-        return mMaxSubjectLength;
-    }
-
-    /// M: google jb.mr1 patch, group mms
-    public static boolean getGroupMmsEnabled() {
-        return mEnableGroupMms;
-    }
-
-    public static final void beginDocument(XmlPullParser parser, String firstElementName)
-            throws XmlPullParserException, IOException
-    {
-        int type;
-        while ((type = parser.next()) != parser.START_TAG
-                   && type != parser.END_DOCUMENT) {
-            ;
-        }
-
-        if (type != parser.START_TAG) {
-            throw new XmlPullParserException("No start tag found");
-        }
-
-        if (!parser.getName().equals(firstElementName)) {
-            throw new XmlPullParserException("Unexpected start tag: found " + parser.getName() +
-                    ", expected " + firstElementName);
-        }
-    }
-
-    public static final void nextElement(XmlPullParser parser)
-            throws XmlPullParserException, IOException
-    {
-        int type;
-        while ((type = parser.next()) != parser.START_TAG
-                   && type != parser.END_DOCUMENT) {
-            ;
-        }
-    }
-
-    /// M:
-    /**
-     * Notes:for CMCC customization,whether to enable SL automatically lanuch.
-     * default set false
-     */
-    private static boolean mSlAutoLanuchEnabled = false;
-    public static boolean getSlAutoLanuchEnabled() {
-        return mSlAutoLanuchEnabled;
-    }
-
-    public static void setDeviceStorageFullStatus(boolean bFull) {
-        mDeviceStorageFull = bFull;
-    }
-
-    public static boolean getDeviceStorageFullStatus() {
-        return mDeviceStorageFull;
-    }
-
-    /// M: new feature, init defualt quick text @{
-    public static void setInitQuickText(boolean init) {
-        SharedPreferences sp =
-            PreferenceManager.getDefaultSharedPreferences(MmsApp.getApplication());
-        SharedPreferences.Editor editor = sp.edit();
-        editor.putBoolean("InitQuickText", init);
-        editor.commit();
-    }
-
-    public static boolean getInitQuickText() {
-        SharedPreferences sp =
-            PreferenceManager.getDefaultSharedPreferences(MmsApp.getApplication());
-        boolean isFristInit = sp.getBoolean("InitQuickText", true);
-        return isFristInit;
-    }
-    /// @}
-
-    public static List<String> getQuicktexts() {
-        return allQuickTexts;
-    }
-
-    public static List<Integer> getQuicktextsId() {
-        return allQuickTextIds;
-    }
-
-    public static int updateAllQuicktexts() {
-        Cursor cursor = mContext.getContentResolver().query(Telephony.MmsSms.CONTENT_URI_QUICKTEXT,
-                null, null, null, null);
-        allQuickTextIds.clear();
-        allQuickTexts.clear();
-        String[] defaultTexts = mContext.getResources().getStringArray(R.array.default_quick_texts);
-        int maxId = defaultTexts.length;
-        if (cursor != null) {
-            try {
-                while (cursor.moveToNext()) {
-                    int qtId = cursor.getInt(0);
-                    allQuickTextIds.add(qtId);
-                    String qtText = cursor.getString(1);
-                    if (qtText != null && !qtText.isEmpty()) {
-                        allQuickTexts.add(qtText);
-                    } else {
-                        allQuickTexts.add(defaultTexts[qtId - 1]);
-                    }
-                    if (qtId > maxId) {
-                        maxId = qtId;
-                    }
-                }
-            } finally {
-                cursor.close();
-            }
-        }
-        return maxId;
-    }
-
-    public static int getUserSetMmsSizeLimit(boolean isBytes) {
-        if (true == isBytes) {
-            return mUserSetMmsSizeLimit * 1024;
-        } else {
-            return mUserSetMmsSizeLimit;
-        }
-    }
-
-    public static void setUserSetMmsSizeLimit(int limit) {
-        mUserSetMmsSizeLimit = limit;
-    }
-
-    public static int getMaxRestrictedImageHeight() {
-        return mMaxRestrictedImageHeight;
-    }
-
-    public static int getMaxRestrictedImageWidth() {
-        return mMaxRestrictedImageWidth;
-    }
-
-    public static int getSmsRecipientLimit() {
-        return mSmsRecipientLimit;
-    }
-
-    public static int getReceiveMmsLimitFor2G() {
-        return mReceiveMmsSizeLimitFor2G;
-    }
-
-    public static int getReceiveMmsLimitForTD() {
-        return mReceiveMmsSizeLimitForTD;
-    }
-
-    /// APARTODO
-//    public static boolean getSIMSmsAtSettingEnabled() {
-//        return mMmsFeatureManagerPlugin.isFeatureEnabled(
-//    IMmsFeatureManagerExt.SHOW_SIM_SMS_ENTRY_IN_SETTINGS);
-//    }
-
-    public static int getPluginMenuIDBase() {
-        return 0x100;
-    }
-
-    private static boolean sSlot1SimExist = true;
-    private static boolean sSlot2SimExist = true;
-    private static int sSlot1RetryCounter = 0;
-    private static int sSlot2RetryCounter = 0;
-    private static final int MAX_RETRY_COUNT = 3;
-    private static long sSim1Id = -1;
-    private static long sSim2Id = -1;
-
-   /* private static void loadSimInfo(Context context) {
-        /// M: sim1 info maybe not loaded yet, load it.
-        if (sSim1Id <= 0 && sSlot1SimExist) {
-            sSim1Id = EncapsulatedSimInfoManager.getIdBySlot(context, PhoneConstants.SIM_ID_1);
-            sSlot1RetryCounter++;
-            /// M: if we tried 3 times and still can't get valid simId , we think the slot is empty.
-            if (sSlot1RetryCounter == MAX_RETRY_COUNT && sSim1Id <= 0) {
-                sSlot1SimExist = false;
-            }
-        }
-        /// M: sim2 info maybe not loaded yet, load it.
-        if (sSim2Id <= 0 && sSlot2SimExist) {
-            sSim2Id = EncapsulatedSimInfoManager.getIdBySlot(context, PhoneConstants.SIM_ID_2);
-            sSlot2RetryCounter++;
-            /// M: if we tried 3 times and still can't get valid simId , we think the slot is empty.
-            if (sSlot2RetryCounter == MAX_RETRY_COUNT && sSim2Id <= 0) {
-                sSlot2SimExist = false;
-            }
-        }
-    }*/
-
-    public static int getMmsRetryPromptIndex() {
-        return mOpConfigExt.getMmsRetryPromptIndex();
-    }
-
-    /// M: this method is changed to use plugin
-    public static int getSmsToMmsTextThreshold() {
-        int limitSmsCount = mOpConfigExt.getSmsToMmsTextThreshold();
-        if (limitSmsCount > 0) {
-            return limitSmsCount;
-        }
-        // Operator Plugin
-        if (FeatureOption.MTK_C2K_SUPPORT) {
-            return getSmsToMmsTextThresholdForC2K(mContext);
-        }
-        return sSmsToMmsTextThreshold;
-    }
-
-    /// M: change this to plugin
-    public static int getMaxTextLimit() {
-        // add for ipmessage
-        if (mIpConfig.getMaxTextLimit(mContext) != 0) {
-            return mIpConfig.getMaxTextLimit(mContext);
-        }
-        return mOpConfigExt.getMaxTextLimit();
-    }
-
-    private static void loadMmsSettings(Context context) {
-        XmlResourceParser parser = context.getResources().getXml(R.xml.mms_config);
-
-        try {
-            beginDocument(parser, "mms_config");
-
-            while (true) {
-                nextElement(parser);
-                String tag = parser.getName();
-                if (tag == null) {
-                    break;
-                }
-                String name = parser.getAttributeName(0);
-                String value = parser.getAttributeValue(0);
-                String text = null;
-                if (parser.next() == XmlPullParser.TEXT) {
-                    text = parser.getText();
-                }
-
-                if (DEBUG) {
-                    Log.v(TAG, "tag: " + tag + " value: " + value + " - " +
-                            text);
-                }
-                if ("name".equalsIgnoreCase(name)) {
-                    if ("bool".equals(tag)) {
-                        // bool config tags go here
-                        if ("enabledMMS".equalsIgnoreCase(value)) {
-                            mMmsEnabled = "true".equalsIgnoreCase(text) ? 1 : 0;
-                        } else if ("enabledTransID".equalsIgnoreCase(value)) {
-                            mTransIdEnabled = "true".equalsIgnoreCase(text);
-                        } else if ("enabledNotifyWapMMSC".equalsIgnoreCase(value)) {
-                            mNotifyWapMMSC = "true".equalsIgnoreCase(text);
-                        } else if ("aliasEnabled".equalsIgnoreCase(value)) {
-                            mAliasEnabled = "true".equalsIgnoreCase(text);
-                        } else if ("allowAttachAudio".equalsIgnoreCase(value)) {
-                            mAllowAttachAudio = "true".equalsIgnoreCase(text);
-                        } else if ("enableMultipartSMS".equalsIgnoreCase(value)) {
-                            mEnableMultipartSMS = "true".equalsIgnoreCase(text);
-                        } else if ("enableSlideDuration".equalsIgnoreCase(value)) {
-                            mEnableSlideDuration = "true".equalsIgnoreCase(text);
-                        } else if ("enableMMSReadReports".equalsIgnoreCase(value)) {
-                            mEnableMMSReadReports = "true".equalsIgnoreCase(text);
-                        } else if ("enableSMSDeliveryReports".equalsIgnoreCase(value)) {
-                            mEnableSMSDeliveryReports = "true".equalsIgnoreCase(text);
-                        } else if ("enableMMSDeliveryReports".equalsIgnoreCase(value)) {
-                            mEnableMMSDeliveryReports = "true".equalsIgnoreCase(text);
-                        /// M: google jb.mr1 patch, group mms
-                        } else if ("enableGroupMms".equalsIgnoreCase(value)) {
-                            mEnableGroupMms = "true".equalsIgnoreCase(text);
-                        }
-                    } else if ("int".equals(tag)) {
-                        // int config tags go here
-                        if ("maxMessageSize".equalsIgnoreCase(value)) {
-                            mMaxMessageSize = Integer.parseInt(text);
-                        } else if ("maxImageHeight".equalsIgnoreCase(value)) {
-                            mMaxImageHeight = Integer.parseInt(text);
-                        } else if ("maxImageWidth".equalsIgnoreCase(value)) {
-                            mMaxImageWidth = Integer.parseInt(text);
-                        }
-                        /// M: @{
-                        else if ("maxRestrictedImageHeight".equalsIgnoreCase(value)) {
-                            mMaxRestrictedImageHeight = Integer.parseInt(text);
-                        } else if ("maxRestrictedImageWidth".equalsIgnoreCase(value)) {
-                            mMaxRestrictedImageWidth = Integer.parseInt(text);
-                        }
-                        /// @}
-                        else if ("defaultSMSMessagesPerThread".equalsIgnoreCase(value)) {
-                            mDefaultSMSMessagesPerThread = Integer.parseInt(text);
-                        } else if ("defaultMMSMessagesPerThread".equalsIgnoreCase(value)) {
-                            mDefaultMMSMessagesPerThread = Integer.parseInt(text);
-                        } else if ("minMessageCountPerThread".equalsIgnoreCase(value)) {
-                            mMinMessageCountPerThread = Integer.parseInt(text);
-                        } else if ("maxMessageCountPerThread".equalsIgnoreCase(value)) {
-                            mMaxMessageCountPerThread = Integer.parseInt(text);
-                        }
-                        else if ("smsToMmsTextThreshold".equalsIgnoreCase(value)) {
-                            /// M: Operator Plugin
-                            mOpConfigExt.setSmsToMmsTextThreshold(Integer.parseInt(text));
-                        }
-                        else if ("recipientLimit".equalsIgnoreCase(value)) {
-                            /// M: Operator Plugin
-                            mOpConfigExt.setMmsRecipientLimit(Integer.parseInt(text));
-                        } else if ("httpSocketTimeout".equalsIgnoreCase(value)) {
-                            mOpConfigExt.setHttpSocketTimeout(Integer.parseInt(text));
-                        } else if ("minimumSlideElementDuration".equalsIgnoreCase(value)) {
-                            mMinimumSlideElementDuration = Integer.parseInt(text);
-                        } else if ("maxSizeScaleForPendingMmsAllowed".equalsIgnoreCase(value)) {
-                            mMaxSizeScaleForPendingMmsAllowed = Integer.parseInt(text);
-                        } else if ("aliasMinChars".equalsIgnoreCase(value)) {
-                            mAliasRuleMinChars = Integer.parseInt(text);
-                        } else if ("aliasMaxChars".equalsIgnoreCase(value)) {
-                            mAliasRuleMaxChars = Integer.parseInt(text);
-                        } else if ("maxMessageTextSize".equalsIgnoreCase(value)) {
-                            /// M: Operator Plugin
-                            mOpConfigExt.setMaxTextLimit(Integer.parseInt(text));
-                        } else if ("maxSubjectLength".equalsIgnoreCase(value)) {
-                            mMaxSubjectLength = Integer.parseInt(text);
-                        }
-                    } else if ("string".equals(tag)) {
-                        // string config tags go here
-                        if ("userAgent".equalsIgnoreCase(value)) {
-                            mUserAgent = text;
-                        } else if ("uaProfTagName".equalsIgnoreCase(value)) {
-                            mUaProfTagName = text;
-                        } else if ("uaProfUrl".equalsIgnoreCase(value)) {
-                            mUaProfUrl = text;
-                        } else if ("httpParams".equalsIgnoreCase(value)) {
-                            mHttpParams = text;
-                        } else if ("httpParamsLine1Key".equalsIgnoreCase(value)) {
-                            mHttpParamsLine1Key = text;
-                        } else if ("emailGatewayNumber".equalsIgnoreCase(value)) {
-                            mEmailGateway = text;
-                        }
-                    }
-                }
-            }
-        } catch (XmlPullParserException e) {
-            Log.e(TAG, "loadMmsSettings caught ", e);
-        } catch (NumberFormatException e) {
-            Log.e(TAG, "loadMmsSettings caught ", e);
-        } catch (IOException e) {
-            Log.e(TAG, "loadMmsSettings caught ", e);
-        } finally {
-            parser.close();
-        }
-
-        String errorStr = null;
-
-        if (getMmsEnabled() && mUaProfUrl == null) {
-            errorStr = "uaProfUrl";
-        }
-
-        if (errorStr != null) {
-            String err =
-                String.format("MmsConfig.loadMmsSettings mms_config.xml missing %s setting",
-                        errorStr);
-            Log.e(TAG, err);
-        }
-    }
-
-    /// M: change this method to plugin
-    public static int getMmsRecipientLimit() {
-        return mOpConfigExt.getMmsRecipientLimit();
-    }
-
-
-    /// M: Add MmsService configure param @{
-    public static Bundle getMmsServiceConfig() {
-        // Operator Plugin
-        return mOpConfigExt.getMmsServiceConfig();
-    }
-    /// @}
-}
Index: vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/SmsPreferenceActivity.java
===================================================================
--- vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/SmsPreferenceActivity.java	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/src/com/mediatek/setting/SmsPreferenceActivity.java	(revision 3018)
@@ -1,627 +0,0 @@
-/*
- * Copyright (C) 2007-2008 Esmertec AG.
- * Copyright (C) 2007-2008 The Android Open Source Project
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.mediatek.setting;
-
-import android.app.ActionBar;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.content.DialogInterface;
-import android.content.DialogInterface.OnClickListener;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.preference.CheckBoxPreference;
-import android.preference.ListPreference;
-import android.preference.Preference;
-import android.preference.PreferenceActivity;
-import android.preference.PreferenceCategory;
-import android.preference.PreferenceManager;
-import android.preference.PreferenceScreen;
-import android.telephony.SubscriptionInfo;
-import android.text.InputFilter;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.inputmethod.EditorInfo;
-import android.widget.EditText;
-import android.widget.Toast;
-import android.provider.Telephony;
-
-import com.android.internal.telephony.PhoneConstants;
-import com.android.mms.MmsConfig;
-import com.android.mms.R;
-import com.android.mms.ui.MessageUtils;
-import com.android.mms.ui.SmsTemplateEditActivity;
-import com.android.mms.util.MmsLog;
-
-import com.mediatek.mms.ext.IOpSmsPreferenceActivityExt;
-import com.mediatek.opmsg.util.OpMessageUtils;
-import com.mediatek.setting.SimStateMonitor.SimStateListener;
-import com.mediatek.simmessage.ManageSimMessages;
-import com.mediatek.telephony.TelephonyManagerEx;
-import android.provider.Settings.System;
-import android.provider.Settings;
-
-
-import java.util.List;
-/**
- * With this activity, users can set preferences for MMS and SMS and can access
- * and manipulate SMS messages stored on the SIM.
- */
-public class SmsPreferenceActivity extends PreferenceActivity implements
-        Preference.OnPreferenceChangeListener, SimStateListener {
-    private static final String TAG = "SmsPreferenceActivity";
-
-    private static final boolean DEBUG = false;
-
-    public static final String SMS_DELIVERY_REPORT_MODE = "pref_key_sms_delivery_reports";
-
-    public static final String SMS_QUICK_TEXT_EDITOR = "pref_key_quick_text_editor";
-
-    public static final String SMS_SERVICE_CENTER = "pref_key_sms_service_center";
-
-    public static final String SMS_MANAGE_SIM_MESSAGES = "pref_key_manage_sim_messages";
-
-    public static final String SMS_SAVE_LOCATION = "pref_key_sms_save_location";
-
-    public static final String SMS_INPUT_MODE = "pref_key_sms_input_mode";
-
-    public static final String SMS_SETTINGS = "pref_key_sms_settings";
-
-    public static final String PREFERENCE_KEY = "PREFERENCE_KEY";
-
-    public static final String PREFERENCE_TITLE_ID = "PREFERENCE_TITLE";
-
-    public static final String SETTING_SAVE_LOCATION = "Phone";
-
-    // / M: fix bug ALPS00437648, restoreDefaultPreferences in tablet
-    public static final String SETTING_SAVE_LOCATION_TABLET = "Device";
-
-    private static final String MMS_PREFERENCE = "com.android.mms_preferences";
-
-    public static final String SDCARD_DIR_PATH = "//sdcard//message//";
-
-    // Menu entries
-    private static final int MENU_RESTORE_DEFAULTS = 1;
-
-    private static final int MAX_EDITABLE_LENGTH = 20;
-
-    private Preference mSmsQuickTextEditorPref;
-
-    private Preference mManageSimPref;
-
-    private Preference mSmsServiceCenterPref;
-
-    // MTK_OP01_PROTECT_END
-    // all preferences need change key for single sim card
-    private CheckBoxPreference mSmsDeliveryReport;
-
-    private CheckBoxPreference mSmsForwardWithSender;
-
-    // all preferences need change key for multiple sim card
-    private Preference mSmsDeliveryReportMultiSim;
-
-    private Preference mSmsServiceCenterPrefMultiSim;
-
-    private Preference mManageSimPrefMultiSim;
-
-    private Preference mSmsSaveLoactionMultiSim;
-
-    private ListPreference mSmsLocation;
-
-    private ListPreference mSmsInputMode;
-
-    private static final String LOCATION_PHONE = "Phone";
-
-    private static final String LOCATION_SIM = "Sim";
-
-    private EditText mNumberText;
-
-    private AlertDialog mNumberTextDialog;
-
-    // / M: fix bug ALPS00455172, add tablet "device" support
-    private static final String DEVICE_TYPE = "pref_key_device_type";
-
-    ///M: plug-in for Op
-    private IOpSmsPreferenceActivityExt mOpSmsPreferenceActivityExt;
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        // / KK migration, for default MMS function. @{
-        boolean isSmsEnabled = MmsConfig.isSmsEnabled(this);
-        MmsLog.d(TAG, "onResume sms enable? " + isSmsEnabled);
-        if (!isSmsEnabled) {
-            finish();
-            return;
-        }
-        // / @}
-        setListPrefSummary();
-    }
-
-    private void setListPrefSummary() {
-        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this);
-        // / M: fix bug ALPS00455172, add tablet "device" support
-        SharedPreferences.Editor editor = sp.edit();
-        if (!getResources().getBoolean(R.bool.isTablet)) {
-            editor.putString(DEVICE_TYPE, "Phone");
-        } else {
-            editor.putString(DEVICE_TYPE, "Device");
-        }
-        editor.commit();
-
-        // For mSmsLocation;
-        String saveLocation = "Phone";
-
-        List<SubscriptionInfo> subInfos = SimStateMonitor.getInstance().getSubInfoList();
-        if (subInfos != null && subInfos.size() == 1) {
-            int subId = subInfos.get(0).getSubscriptionId();
-            saveLocation = sp.getString((Long.toString(subId) + "_" + SMS_SAVE_LOCATION), "Phone");
-        }
-
-        if (getResources().getBoolean(R.bool.isTablet)) {
-            // /@ M: fix bug ALPS00823808, avoid empty of the sms stroe lactaion
-            // at the first time.
-            if ("Phone".equals(saveLocation)) {
-                saveLocation = "Device";
-            }
-            mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, saveLocation,
-                    R.array.pref_tablet_sms_save_location_choices,
-                    R.array.pref_tablet_sms_save_location_values));
-            // /@
-        } else {
-            mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, saveLocation,
-                    R.array.pref_sms_save_location_choices,
-                    R.array.pref_sms_save_location_values));
-        }
-    }
-
-    @Override
-    protected void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-        MmsLog.d(TAG, "onCreate");
-        mOpSmsPreferenceActivityExt = OpMessageUtils.getOpMessagePlugin()
-                .getOpSmsPreferenceActivityExt();
-        mOpSmsPreferenceActivityExt.onCreate(this);
-        ActionBar actionBar = getActionBar();
-        actionBar.setTitle(getResources().getString(R.string.actionbar_sms_setting));
-        actionBar.setDisplayHomeAsUpEnabled(true);
-        setMessagePreferences();
-        SimStateMonitor.getInstance().addListener(this);
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        SimStateMonitor.getInstance().removeListener(this);
-    }
-
-    private void setMessagePreferences() {
-        MmsLog.dpi(TAG, "setMessagePreferences SubInfoList :"
-                + SimStateMonitor.getInstance().getSubInfoList()
-                + " SubCount is :" + SimStateMonitor.getInstance().getSubCount());
-
-        if (SimStateMonitor.getInstance().getSubCount() <= 1) {
-            addPreferencesFromResource(R.xml.smspreferences);
-        } else {
-            addPreferencesFromResource(R.xml.smsmulticardpreferences);
-        }
-        mSmsLocation = (ListPreference) findPreference(SMS_SAVE_LOCATION);
-        mSmsLocation.setOnPreferenceChangeListener(this);
-        mSmsQuickTextEditorPref = findPreference(SMS_QUICK_TEXT_EDITOR);
-        ///M: do not show sim messages when sim is off. @{
-        PreferenceCategory smsCategory = (PreferenceCategory) findPreference(SMS_SETTINGS);
-        mManageSimPref = findPreference(SMS_MANAGE_SIM_MESSAGES);
-        if (!MessageUtils.isSimMessageAccessable(this)) {
-            // If there is no SIM, this item will be disabled and can not be
-            // accessed.
-            mManageSimPref.setEnabled(false);
-        }
-        /// @}
-
-        if (SimStateMonitor.getInstance().getSubCount() <= 1) {
-            mSmsServiceCenterPref = findPreference(SMS_SERVICE_CENTER);
-			
-
-            // MTK_OP02_PROTECT_END
-            if (SimStateMonitor.getInstance().getSubCount() == 0) {
-                mSmsDeliveryReport = (CheckBoxPreference) findPreference(SMS_DELIVERY_REPORT_MODE);
-                mSmsDeliveryReport.setEnabled(false);
-                mSmsServiceCenterPref.setEnabled(false);
-                // / M: fix bug ALPS00455172, add tablet "device" support
-                if (!getResources().getBoolean(R.bool.isTablet)) {
-                    mSmsLocation.setValue("Phone");
-                } else {
-                    mSmsLocation.setValue("Device");
-                }
-                mSmsLocation.setEnabled(false);
-            } else {
-                MmsLog.d(TAG, "single sim");
-                changeSingleCardKeyToSimRelated();
-            }
-        } else {
-            setMultiCardPreference();
-        }
-
-        addSmsInputModePreference();
-        mOpSmsPreferenceActivityExt.setMessagePreferences(SmsPreferenceActivity.this, smsCategory,
-                SimStateMonitor.getInstance().getSubCount());
-
-    }
-
-    // add input mode setting for op03 request, if not remove it.
-    private void addSmsInputModePreference() {
-        if (!mOpSmsPreferenceActivityExt.addSmsInputModePreference(this)) {
-            PreferenceCategory smsCategory
-                    = (PreferenceCategory) findPreference("pref_key_sms_settings");
-            mSmsInputMode = (ListPreference) findPreference(SMS_INPUT_MODE);
-            if (mSmsInputMode != null) {
-                //smsCategory.removePreference(mSmsInputMode);
-                mSmsInputMode.setOnPreferenceChangeListener(this);
-            }
-        }
-    }
-
-    private void changeSingleCardKeyToSimRelated() {
-        // get to know which one
-        if (SimStateMonitor.getInstance().getSubCount() == 0) {
-            return;
-        }
-        SubscriptionInfo singleCardInfo = null;
-        singleCardInfo = SimStateMonitor.getInstance().getSubInfoList().get(0);
-
-        if (singleCardInfo == null) {
-            return;
-        }
-        int subId = singleCardInfo.getSubscriptionId();
-        MmsLog.d(TAG, "changeSingleCardKeyToSimRelated Got simId = " + subId);
-        // translate all key to SIM-related key;
-        mSmsDeliveryReport = (CheckBoxPreference) findPreference(SMS_DELIVERY_REPORT_MODE);
-        mSmsServiceCenterPref = findPreference(SMS_SERVICE_CENTER);
-		int isAirplaneMode=Settings.System.getInt(getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0);
-		if(isAirplaneMode == 1){
-			mSmsServiceCenterPref.setEnabled(false);
-		}else{
-			mSmsServiceCenterPref.setEnabled(true);
-		}
-        mManageSimPref = findPreference(SMS_MANAGE_SIM_MESSAGES);
-
-        mManageSimPrefMultiSim = null;
-        PreferenceCategory smsCategory
-                = (PreferenceCategory) findPreference("pref_key_sms_settings");
-
-        mSmsLocation = (ListPreference) findPreference(SMS_SAVE_LOCATION);
-        mSmsLocation.setKey(Long.toString(subId) + "_" + SMS_SAVE_LOCATION);
-        SharedPreferences spr = getSharedPreferences("com.android.mms_preferences",
-                MODE_PRIVATE);
-        // /M fix bug ALPS00837998;
-        if (!getResources().getBoolean(R.bool.isTablet)) {
-            mSmsLocation.setValue(spr.getString((Long.toString(subId) + "_" + SMS_SAVE_LOCATION),
-                    "Phone"));
-        } else {
-            mSmsLocation.setValue(spr.getString((Long.toString(subId) + "_" + SMS_SAVE_LOCATION),
-                    "Device"));
-        }
-        // /@
-
-        // MTK_OP02_PROTECT_END
-
-        // get the stored value
-        SharedPreferences sp = getSharedPreferences(MMS_PREFERENCE, MODE_PRIVATE);
-        if (mSmsDeliveryReport != null) {
-            mSmsDeliveryReport.setKey(Long.toString(subId) + "_" + SMS_DELIVERY_REPORT_MODE);
-            mSmsDeliveryReport.setChecked(sp.getBoolean(mSmsDeliveryReport.getKey(), false));
-        }
-
-        mOpSmsPreferenceActivityExt.changeSingleCardKeyToSimRelated();
-    }
-
-    private void setMultiCardPreference() {
-        mSmsDeliveryReportMultiSim = findPreference(SMS_DELIVERY_REPORT_MODE);
-        mSmsServiceCenterPrefMultiSim = findPreference(SMS_SERVICE_CENTER);
-		int isAirplaneMode=Settings.System.getInt(getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0);
-		if(isAirplaneMode == 1){
-			mSmsServiceCenterPrefMultiSim.setEnabled(false);
-		}else{
-			mSmsServiceCenterPrefMultiSim.setEnabled(true);
-		}
-        mManageSimPrefMultiSim = findPreference(SMS_MANAGE_SIM_MESSAGES);
-
-        mManageSimPref = null;
-        PreferenceCategory smsCategory = (PreferenceCategory) findPreference(SMS_SETTINGS);
-
-        if (mSmsLocation != null) {
-            smsCategory.removePreference(mSmsLocation);
-            Preference saveLocationMultiSim = new Preference(this);
-            saveLocationMultiSim.setKey(SMS_SAVE_LOCATION);
-            saveLocationMultiSim.setTitle(R.string.sms_save_location);
-            saveLocationMultiSim.setSummary(R.string.sms_save_location);
-            smsCategory.addPreference(saveLocationMultiSim);
-            mSmsSaveLoactionMultiSim = findPreference(SMS_SAVE_LOCATION);
-        }
-
-        mSmsDeliveryReportMultiSim.setKey(SMS_DELIVERY_REPORT_MODE);
-        mOpSmsPreferenceActivityExt.setMultiCardPreference();
-    }
-
-    public boolean onCreateOptionsMenu(Menu menu) {
-        super.onCreateOptionsMenu(menu);
-        menu.clear();
-        menu.add(0, MENU_RESTORE_DEFAULTS, 0, R.string.restore_default);
-        return true;
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case android.R.id.home:
-                // The user clicked on the Messaging icon in the action bar.
-                // Take them back from
-                // wherever they came from
-                finish();
-                return true;
-            case MENU_RESTORE_DEFAULTS:
-                restoreDefaultPreferences();
-                return true;
-            default:
-                break;
-        }
-        return false;
-    }
-
-    @Override
-    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,
-            Preference preference) {
-        if (preference == mManageSimPref) {
-            if (SimStateMonitor.getInstance().getSubCount() != 0) {
-                int subId = SimStateMonitor
-                        .getInstance().getSubInfoList().get(0).getSubscriptionId();
-                MmsLog.d(TAG, "slotId is : " + subId);
-                if (subId != -1) {
-                    Intent it = new Intent();
-                    it.setClass(this, ManageSimMessages.class);
-                    it.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId);
-                    startActivity(it);
-                }
-            }
-        } else if (preference == mSmsQuickTextEditorPref) {
-            Intent intent = new Intent();
-            intent.setClass(this, SmsTemplateEditActivity.class);
-            startActivity(intent);
-        } else if (preference == mSmsDeliveryReportMultiSim) {
-            Intent it = new Intent();
-            it.setClass(this, SubSelectActivity.class);
-            it.putExtra(PREFERENCE_KEY, preference.getKey());
-            it.putExtra(PREFERENCE_TITLE_ID, R.string.pref_title_sms_delivery_reports);
-            startActivity(it);
-        } else if (preference == mSmsServiceCenterPref) {
-            if (SimStateMonitor.getInstance().getSubCount() == 0) {
-                MmsLog.d(TAG, "there is no sim card");
-                return true;
-            }
-            new Thread(new Runnable() {
-                public void run() {
-                    int id = SimStateMonitor.getInstance().getSubInfoList()
-                            .get(0).getSubscriptionId();
-
-                    final Bundle result = TelephonyManagerEx.getDefault()
-                            .getScAddressWithErroCode(id);
-                    runOnUiThread(new Runnable() {
-                        public void run() {
-                            if (result != null && result.getByte(
-                                    TelephonyManagerEx.GET_SC_ADDRESS_KEY_RESULT)
-                                            == TelephonyManagerEx.ERROR_CODE_NO_ERROR) {
-                                // Means Success to get SC Address
-                                AlertDialog.Builder dialog = new AlertDialog.Builder(
-                                        SmsPreferenceActivity.this);
-                                mNumberText = new EditText(dialog.getContext());
-                                mNumberText.setHint(R.string.type_to_compose_text_enter_to_send);
-                                mNumberText.computeScroll();
-                                mNumberText.setFilters(new InputFilter[] {
-                                        new InputFilter.LengthFilter(MAX_EDITABLE_LENGTH) });
-                                //mNumberText.setInputType(
-                                //        EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_CLASS_PHONE);
-                                mNumberText.setInputType(EditorInfo.TYPE_NULL);
-                                String gotScNumber = (String) result.getCharSequence(
-                                        TelephonyManagerEx.GET_SC_ADDRESS_KEY_ADDRESS);
-                                MmsLog.d(TAG, "gotScNumber is: " + gotScNumber);
-
-                                mNumberText.setText(gotScNumber);
-                                mNumberText.setTextColor(R.color.black);
-                                mNumberTextDialog = dialog.setIcon(
-                                        R.drawable.ic_dialog_info_holo_light).setTitle(
-                                        R.string.sms_service_center).setView(mNumberText)
-                                        .setPositiveButton(R.string.OK,
-                                                new PositiveButtonListener()).setNegativeButton(
-                                                        R.string.Cancel,
-                                                        new NegativeButtonListener()).show();
-                            } else if (result != null && result.getByte(
-                                    TelephonyManagerEx.GET_SC_ADDRESS_KEY_RESULT)
-                                            == TelephonyManagerEx.ERROR_CODE_NO_SUPPORT_SC_ADDR) {
-                                Toast.makeText(getApplicationContext(),
-                                        getString(R.string.cdma_not_support),
-                                        Toast.LENGTH_SHORT).show();
-                                MmsLog.dpi(TAG, "getScAddress not support error: " + result);
-                            } else {
-                                MmsLog.dpi(TAG, "getScAddress error: " + result);
-                                showToast(R.string.sms_not_ready);
-                            }
-                        }
-                    });
-                }
-            }).start();
-
-        } else if (preference == mSmsServiceCenterPrefMultiSim
-                || preference == mManageSimPrefMultiSim
-                || (preference == mSmsSaveLoactionMultiSim
-                        && SimStateMonitor.getInstance().getSubCount() > 1)) {
-            Intent it = new Intent();
-            it.setClass(this, SubSelectActivity.class);
-            it.putExtra(PREFERENCE_KEY, preference.getKey());
-            if (preference == mSmsServiceCenterPrefMultiSim) {
-                it.putExtra(PREFERENCE_TITLE_ID, R.string.sms_service_center);
-            } else if (preference == mManageSimPrefMultiSim) {
-                it.putExtra(PREFERENCE_TITLE_ID, R.string.pref_title_manage_sim_messages);
-            } else if (preference == mSmsSaveLoactionMultiSim) {
-                it.putExtra(PREFERENCE_TITLE_ID, R.string.sms_save_location);
-            }
-            startActivity(it);
-        }
-        mOpSmsPreferenceActivityExt.onPreferenceTreeClick(preferenceScreen, preference);
-        return super.onPreferenceTreeClick(preferenceScreen, preference);
-    }
-
-    // / M: added for bug ALPS00314789 begin
-    private boolean isValidAddr(String address) {
-        boolean ret = true;
-        if (address.isEmpty()) {
-            return ret;
-        }
-        if (address.charAt(0) == '+') {
-            for (int i = 1, count = address.length(); i < count; i++) {
-                if (address.charAt(i) < '0' || address.charAt(i) > '9') {
-                    ret = false;
-                    break;
-                }
-            }
-        } else {
-            for (int i = 0, count = address.length(); i < count; i++) {
-                if (address.charAt(i) < '0' || address.charAt(i) > '9') {
-                    ret = false;
-                    break;
-                }
-            }
-        }
-        return ret;
-    }
-
-    // / M: added for bug ALPS00314789 end
-    private class PositiveButtonListener implements OnClickListener {
-        public void onClick(DialogInterface dialog, int which) {
-            // write to the SIM Card.
-            // / M: added for bug ALPS00314789 begin
-            if (!isValidAddr(mNumberText.getText().toString())) {
-                String num = mNumberText.getText().toString();
-                String strUnSpFormat = getResources().getString(R.string.unsupported_media_format,
-                        "");
-                Toast.makeText(getApplicationContext(), strUnSpFormat, Toast.LENGTH_SHORT).show();
-                return;
-            }
-            // / M: added for bug ALPS00314789 end
-            final int subId;
-            subId = SimStateMonitor.getInstance().getSubInfoList().get(0).getSubscriptionId();
-            new Thread(new Runnable() {
-                public void run() {
-                    TelephonyManagerEx.getDefault().setScAddress(
-                            subId, mNumberText.getText().toString());
-                }
-            }).start();
-        }
-    }
-
-    private class NegativeButtonListener implements OnClickListener {
-        public void onClick(DialogInterface dialog, int which) {
-            // cancel
-            dialog.dismiss();
-        }
-    }
-
-    private void restoreDefaultPreferences() {
-        SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(
-                SmsPreferenceActivity.this).edit();
-        int subCount = SimStateMonitor.getInstance().getSubCount();
-        if (subCount > 0) {
-            for (int i = 0; i < subCount; i++) {
-                int subId = SimStateMonitor.getInstance().getSubInfoList().get(i)
-                        .getSubscriptionId();
-                editor.putBoolean(Long.toString(subId) + "_" + SMS_DELIVERY_REPORT_MODE, false);
-                // / M: fix bug ALPS00437648, restoreDefaultPreferences
-                // in tablet
-                if (!getResources().getBoolean(R.bool.isTablet)) {
-                    editor.putString(Long.toString(subId) + "_" + SMS_SAVE_LOCATION,
-                            SETTING_SAVE_LOCATION);
-                } else {
-                    editor.putString(Long.toString(subId) + "_" + SMS_SAVE_LOCATION,
-                            SETTING_SAVE_LOCATION_TABLET);
-                }
-            }
-        }
-
-        int count = getContentResolver().delete(Telephony.MmsSms.CONTENT_URI_QUICKTEXT, "_id!=-1" , null);
-        int allId = MmsConfig.updateAllQuicktexts();
-        MmsConfig.setInitQuickText(true);
-
-        mOpSmsPreferenceActivityExt.restoreDefaultPreferences(this, editor);
-        editor.putString(SMS_INPUT_MODE, "Automatic"); // Add this
-        editor.apply();
-        setPreferenceScreen(null);
-        setMessagePreferences();
-        setListPrefSummary();
-    }
-
-    @Override
-    public boolean onPreferenceChange(Preference preference, Object arg1) {
-        if (mOpSmsPreferenceActivityExt.onPreferenceChange(preference, arg1)) {
-            return true;
-        }
-
-        final String key = preference.getKey();
-        if (SMS_INPUT_MODE.equals(key)) {
-            MmsLog.d(TAG, "Input Mode Changed");
-            mSmsInputMode.setValue((String) arg1);
-        } else if (preference == mSmsLocation && !(SimStateMonitor.getInstance().getSubCount() > 1)) {
-            if (!getResources().getBoolean(R.bool.isTablet)) {
-                mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, (String) arg1,
-                        R.array.pref_sms_save_location_choices,
-                        R.array.pref_sms_save_location_values));
-            } else {
-                mSmsLocation.setSummary(MessageUtils.getVisualTextName(this, (String) arg1,
-                        R.array.pref_tablet_sms_save_location_choices,
-                        R.array.pref_tablet_sms_save_location_values));
-            }
-        }
-
-        return true;
-    }
-
-    private void showToast(int id) {
-        Toast t = Toast.makeText(getApplicationContext(), getString(id), Toast.LENGTH_SHORT);
-        t.show();
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        MmsLog.d(TAG, "onConfigurationChanged: newConfig = " + newConfig + ",this = " + this);
-        super.onConfigurationChanged(newConfig);
-        // for Migration change,maybe need check
-        (this.getListView()).clearScrapViewsIfNeeded();
-    }
-
-    @Override
-    public void onSimStateChanged() {
-        MmsLog.d(TAG, "onSimStateChanged");
-        Dialog locationDialog = mSmsLocation.getDialog();
-        if (mNumberTextDialog != null && mNumberTextDialog.isShowing()) {
-            mNumberTextDialog.dismiss();
-        }
-        if (locationDialog != null && locationDialog.isShowing()) {
-            locationDialog.dismiss();
-        }
-        setPreferenceScreen(null);
-        setMessagePreferences();
-        setListPrefSummary();
-    }
-
-}
Index: vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/res/values/config.xml
===================================================================
--- vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/res/values/config.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/res/values/config.xml	(revision 3018)
@@ -1,18 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2011 The Android Open Source Project Licensed under the
-    Apache License, Version 2.0 (the "License"); you may not use this file
-    except in compliance with the License. You may obtain a copy of the
-    License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by
-    applicable law or agreed to in writing, software distributed under the
-    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-    CONDITIONS OF ANY KIND, either express or implied. See the License for
-    the specific language governing permissions and limitations under the
-    License.
--->
-<resources
-    xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <bool name="isTablet">false</bool>
-    <bool name="isWVGAScreen">false</bool>
-	<bool name="def_mms_cb_popup_and_toneAlert_vibrate_for_919_921_chile">true</bool>
-</resources>
Index: vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpComposeExt.java
===================================================================
--- vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpComposeExt.java	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpComposeExt.java	(revision 3018)
@@ -1,502 +0,0 @@
-/* Copyright Statement:
- *
- * This software/firmware and related documentation ("MediaTek Software") are
- * protected under relevant copyright laws. The information contained herein
- * is confidential and proprietary to MediaTek Inc. and/or its licensors.
- * Without the prior written permission of MediaTek inc. and/or its licensors,
- * any reproduction, modification, use or disclosure of MediaTek Software,
- * and information contained herein, in whole or in part, shall be strictly prohibited.
- *
- * MediaTek Inc. (C) 2012. All rights reserved.
- *
- * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
- * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
- * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
- * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
- * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
- * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
- * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
- * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
- * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
- * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
- * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
- * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
- * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
- * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
- * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
- * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
- *
- * The following software/firmware and/or related documentation ("MediaTek Software")
- * have been modified by MediaTek Inc. All revisions are subject to any receiver's
- * applicable license agreements with MediaTek Inc.
- */
-
-package com.mediatek.mms.ext;
-
-import android.app.Activity;
-import android.content.AsyncQueryHandler;
-import android.content.Context;
-import android.content.ContextWrapper;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-import android.telephony.SubscriptionInfo;
-import android.util.Log;
-import android.view.ContextMenu;
-import android.view.ContextMenu.ContextMenuInfo;
-import android.view.KeyEvent;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.EditText;
-import android.widget.ImageButton;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.google.android.mms.pdu.PduBody;
-
-import com.mediatek.mms.callback.IComposeActivityCallback;
-import com.mediatek.mms.callback.IMessageItemCallback;
-import com.mediatek.mms.callback.IMessageListAdapterCallback;
-import com.mediatek.mms.callback.IRecipientsEditorCallback;
-import com.mediatek.mms.callback.ISlideshowModelCallback;
-import com.mediatek.mms.callback.ITextSizeAdjustHost;
-import com.mediatek.mms.callback.IWorkingMessageCallback;
-
-import java.util.ArrayList;
-import java.util.List;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-
-import android.telephony.SmsMessage;
-
-
-public class DefaultOpComposeExt extends ContextWrapper implements IOpComposeExt {
-    private static final String TAG = "Mms/MmsComposeImpl";
-
-    public DefaultOpComposeExt(Context context) {
-        super(context);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item, IOpWorkingMessageExt workingMessageExt,
-            InputMethodManager inputMethodManager) {
-        return false;
-    }
-
-    @Override
-    public void showSubjectEditor(EditText subjectEditor) {
-        return;
-    }
-
-    @Override
-    public void setConfirmMmsToSms(boolean needConfirm) {
-    }
-
-    public void addCallAndContactMenuItems(Context context, ContextMenu menu, int menuId,
-            ArrayList<String> urls, IMessageItemCallback msgItem) {
-        Log.d(TAG, "addCallAndContactMenuItems addMmsUrlToBookMark");
-        return;
-    }
-
-    @Override
-    public int getMessageAndSaveToSub(String[] numbers, String scAddress,
-            ArrayList<String> messages, int smsStatus,
-            long timeStamp, int subId, int srcResult) {
-        return srcResult;
-    }
-
-    @Override
-    public boolean asyncAttachVCardByContactsId(boolean append) {
-        return false;
-    }
-
-    @Override
-    public boolean processNewIntent(Intent intent) {
-        return false;
-    }
-
-    @Override
-    public boolean subSelectionDialog(int subId) {
-        return false;
-    }
-
-    @Override
-    public void editSlideshow(boolean hadToSlideShowEditor) {
-
-    }
-
-    @Override
-    public boolean onNewIntent(final Intent intent, boolean hadToSlideShowEditor, Uri tempMmsUri,
-            final IWorkingMessageCallback workingMessage, Object activity,
-            IRecipientsEditorCallback recipientsEditor, final int box) {
-        return false;
-    }
-
-    @Override
-    public boolean showMessageDetails(String timeStamp) {
-        return false;
-    }
-
-    @Override
-    public boolean updateCounter(CharSequence text, TextView textCounter,
-            IWorkingMessageCallback workingMessageCallback) {
-        return false;
-    }
-
-    @Override
-    public boolean updateCounterUiRun(TextView textEditor, int remainingInCurrentMessage,
-            int msgCount, IWorkingMessageCallback workingMessageCallback) {
-        return false;
-    }
-
-    @Override
-    public boolean onDeleteMessageListenerClick(AsyncQueryHandler backQueryHandler, long msgId,
-            long timeStamp) {
-        return false;
-    }
-
-    @Override
-    public boolean confirmSendMessageIfNeeded(boolean isRecipientsEditorVisible,
-            boolean hasInvalidRecipient) {
-        return false;
-    }
-
-    @Override
-    public boolean onCreateContextMenu(boolean isSmsEnabled, boolean isSms, int subCount,
-            boolean isSending, MenuItem.OnMenuItemClickListener l, ContextMenu menu, View v,
-            ContextMenuInfo menuInfo, long messageGroupId, int messagesCount) {
-        return false;
-    }
-
-    @Override
-    public boolean forwardMessage(Context context, IMessageItemCallback msgItem,
-            String nameAndNumber, Intent intent) {
-        return false;
-    }
-
-    @Override
-    public void editMmsMessageItem(IOpWorkingMessageExt opWorkingMessageExt) {
-    }
-
-    @Override
-    public boolean lockMessage(Context context, Uri uri, long msgId, long timeStamp, boolean lock) {
-        return false;
-    }
-
-    @Override
-    public String updateTitle(int cnt, String number, String subTitle) {
-        return subTitle;
-    }
-
-    @Override
-    public void initRecipientsEditor(Bundle bundle, View recipientsCcEditor) {
-    }
-
-    @Override
-    public void onStart(ITextSizeAdjustHost host, Activity activity) {
-
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-    }
-
-    @Override
-    public void onResume(int subCount, String text, boolean isSmsEnabled,
-            View recipientsEditor, View subjectTextEditor) {
-    }
-
-    @Override
-    public boolean onProtocolChanged(boolean isMms, CharSequence text) {
-        return false;
-    }
-
-    @Override
-    public boolean onPrepareOptionsMenu(Menu menu, boolean isSmsEnabled,
-            boolean isRecipientsEditorVisible, int contactsSize, long threadId) {
-        return false;
-    }
-
-    @Override
-    public void drawBottomPanel(boolean hasSlideshow, boolean isUpdateAttachEditor,
-            boolean isSmsEnabled) {
-    }
-
-    @Override
-    public boolean onClick(View v, ImageButton recipientsPicker) {
-        return false;
-    }
-
-    @Override
-    public boolean dispatchTouchEvent(MotionEvent ev) {
-        return false;
-    }
-
-    @Override
-    public void initResourceRefs(LinearLayout buttonWithCounter, TextView textCounter,
-                                 IOpAttachmentEditorExt attachmentEditor) {
-    }
-
-    @Override
-    public Uri startMsgListQuery(Uri conversationUri, long threadId) {
-        return conversationUri;
-    }
-
-    @Override
-    public void saveDraft(IOpWorkingMessageExt opWorkingMessageExt) {
-    }
-
-    @Override
-    public boolean sendMessage(IOpWorkingMessageExt opWorkingMessageExt, int subId) {
-        return false;
-    }
-
-    @Override
-    public void resetMessage() {
-    }
-
-    @Override
-    public boolean updateSendButtonState(boolean requiresMms, int recipientCount,
-            int smsRecipientLimit, int subCount) {
-        return false;
-    }
-
-    @Override
-    public boolean initFocus() {
-        return false;
-    }
-
-    @Override
-    public boolean handleUiMessage(Message msg, int subCount, int selectedSubId) {
-        return false;
-    }
-
-    @Override
-    public String showSubSelectedDialog(String src) {
-        return src;
-    }
-
-    public boolean addContacts(Intent intent, int pickCount, int requestCode) {
-        return false;
-    }
-
-    @Override
-    public void onSubInforChanged() {
-    }
-
-    @Override
-    public boolean onReceive(String action, Runnable getSubInfoRunnable) {
-        return false;
-    }
-
-    @Override
-    public void getSubInfoRunnable(boolean hasSlideshow) {
-    }
-
-    @Override
-    public boolean attachVCalendar(
-            boolean append,
-            int type,
-            Uri uri,
-            int mediaTypeStringId) {
-        return false;
-    }
-
-    @Override
-    public String checkRecipientsCount(String message, boolean requiresMms,
-            int recipientCount, int mmsLimitCount, boolean isRecipientsEditorEmpty,
-            boolean isConversationRecipientEmpty, Intent intent,
-            IMessageListAdapterCallback msgListAdapter,
-            List<SubscriptionInfo> subInfoList,
-            boolean isRecipientsEditorVisible) {
-        return message;
-    }
-
-
-    @Override
-    public void drawTopPanel(boolean isRecipientsEditorVisible,
-            IOpWorkingMessageExt opWorkingMessageExt) {
-        // TODO Auto-generated method stub
-
-    }
-
-    @Override
-    public boolean handleAttachmentEditorHandlerMessage(Message msg, boolean sendButtonCanResponse,
-            IWorkingMessageCallback opWorkingMessageCallback, ISlideshowModelCallback slideshow,
-            boolean compressingImage) {
-        return false;
-    }
-
-    @Override
-    public boolean haveSomethingToCopyToSDCard(Context context, PduBody body) {
-        return false;
-    }
-
-    @Override
-    public boolean onActivityResult(int requestCode, Intent data,
-            IOpWorkingMessageExt newOpWorkingMessageExt,
-            IOpWorkingMessageExt opWorkingMessageExt) {
-        return false;
-    }
-
-    @Override
-    public void onCreate(IComposeActivityCallback ipComposeActivityCallback, Intent intent,
-            IntentFilter intentFilter, Activity oldCompose, Activity compose,
-            Bundle savedInstanceState, Handler uiHandler, ImageButton shareButton,
-            LinearLayout panel,  EditText textEditor) {
-    }
-
-    @Override
-    public boolean onMenuItemClick(MenuItem item, IOpMessageItemExt opMessageItemExt,
-            Intent intentMultiSave, Intent deliveryIntent) {
-        return false;
-    }
-
-    @Override
-    public Uri onQueryMsgListRun(Uri uriSrc, long threadId) {
-        return uriSrc;
-    }
-
-    @Override
-    public int getSmsEncodingType(int encodingType, Context context) {
-    	int type = SmsMessage.ENCODING_UNKNOWN;
-    	SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-    	String encodingTypeStr = null;
-    	encodingTypeStr = prefs.getString("pref_key_sms_input_mode", "Automatic");
-    	if ("Unicode".equals(encodingTypeStr)) {
-            type = SmsMessage.ENCODING_16BIT;
-    	} else if ("GSM alphabet".equals(encodingTypeStr)) {
-            type = SmsMessage.ENCODING_7BIT;
-    	}
-    	return type;
-        //return encodingType;
-    }
-    
-    public static int getSmsEncodingTypes(int encodingType, Context context) {
-    	int type = SmsMessage.ENCODING_UNKNOWN;
-    	SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-    	String encodingTypeStr = null;
-    	encodingTypeStr = prefs.getString("pref_key_sms_input_mode", "Automatic");
-    	if ("Unicode".equals(encodingTypeStr)) {
-            type = SmsMessage.ENCODING_16BIT;
-    	} else if ("GSM alphabet".equals(encodingTypeStr)) {
-            type = SmsMessage.ENCODING_7BIT;
-    	}
-    	return type;
-        //return encodingType;
-    }
-
-    @Override
-    public boolean checkConditionsAndSendMessage(boolean isMms, final boolean bcheckMode) {
-        return false;
-    }
-
-    @Override
-    public void onDiscardDraftListenerClick() {
-    }
-
-    @Override
-    public boolean hideOrShowTopPanel(View topPanel) {
-        return false;
-    }
-
-    @Override
-    public void initActivityState(Intent intent) {
-    }
-
-    @Override
-    public int subSelection() {
-        return 0;
-    }
-
-    @Override
-    public boolean onMessageListItemHandler(Message msg, String timestamp) {
-        return false;
-    }
-
-    @Override
-    public void chipOnCreateContextMenu(ContextMenu menu) {
-    }
-
-    @Override
-    public boolean updateSendButton(boolean enabled, int subCount, boolean requiresMms,
-                                boolean hasSlideshow) {
-        return false;
-    }
-
-    @Override
-    public void onConfigurationChanged() {
-    }
-
-    @Override
-    public boolean onKeyDown(int keyCode, KeyEvent event) {
-        return false;
-    }
-
-    @Override
-    public boolean onLayoutSizeChanged(boolean isSoftKeyBoardShow) {
-        return false;
-    }
-
-    @Override
-    public void onRecipientsEditorFocusChange(boolean hasFocus) {
-    }
-
-    @Override
-    public void onRecipientsEditorTouch() {
-    }
-
-    @Override
-    public void onSubjectTextEditorFocusChange(boolean hasFocus) {
-    }
-
-    @Override
-    public void onSubjectTextEditorTouch() {
-    }
-
-    @Override
-    public void onTextEditorTouch() {
-    }
-
-    @Override
-    public void resetConfiguration(boolean isLandscapeOld,
-            boolean isLandscapeNew, boolean isSoftKeyBoardShow) {
-    }
-
-    @Override
-    public boolean updateFullScreenTextEditorHeight() {
-        return false;
-    }
-
-    @Override
-    public boolean onInitialize(Intent intent, IOpWorkingMessageExt opWorkingMessageExt) {
-        return false;
-    }
-
-    @Override
-    public void onDestroy() {
-    }
-
-    @Override
-    public boolean sendMessageForDualSendButton() {
-       return false;
-    }
-
-    @Override
-    public void initResourceRefsOnResume(LinearLayout buttonWithCounter, TextView textCounter,
-                                 IOpAttachmentEditorExt attachmentEditor) {
-    }
-
-    @Override
-    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
-    }
-
-}
Index: vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpSmsSingleRecipientSenderExt.java
===================================================================
--- vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpSmsSingleRecipientSenderExt.java	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Mms/ext/src/com/mediatek/mms/ext/DefaultOpSmsSingleRecipientSenderExt.java	(revision 3018)
@@ -1,29 +0,0 @@
-package com.mediatek.mms.ext;
-
-import android.app.PendingIntent;
-import android.content.Context;
-
-import java.util.ArrayList;
-
-
-public class DefaultOpSmsSingleRecipientSenderExt implements IOpSmsSingleRecipientSenderExt {
-
-    @Override
-    public boolean sendMessage(Context context, int subId, String dest, String serviceCenter,
-            ArrayList<String> messages, ArrayList<PendingIntent> sentIntents,
-            ArrayList<PendingIntent> deliveryIntents) {
-        return false;
-    }
-
-    @Override
-    public boolean sendOpMessage(Context context, int subId,
-            ArrayList<PendingIntent> deliveryIntents) {
-        return false;
-    }
-
-    @Override
-    public int sendMessagePrepare(Context context, int codingType) {
-    	return DefaultOpComposeExt.getSmsEncodingTypes(codingType, context); // Add this
-        //return codingType;
-    }
-}
Index: vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Settings/src/com/android/settings/ApnPreference.java
===================================================================
--- vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Settings/src/com/android/settings/ApnPreference.java	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Settings/src/com/android/settings/ApnPreference.java	(revision 3018)
@@ -1,159 +0,0 @@
-/*
- * Copyright (C) 2009 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.settings;
-
-import android.content.ContentUris;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.provider.Telephony;
-import android.support.v7.preference.Preference;
-import android.support.v7.preference.PreferenceViewHolder;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.CompoundButton;
-import android.widget.RadioButton;
-import android.widget.RelativeLayout;
-
-public class ApnPreference extends Preference implements
-        CompoundButton.OnCheckedChangeListener, OnClickListener {
-    final static String TAG = "ApnPreference";
-
-    public ApnPreference(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
-    public ApnPreference(Context context, AttributeSet attrs) {
-        this(context, attrs, R.attr.apnPreferenceStyle);
-    }
-
-    public ApnPreference(Context context) {
-        this(context, null);
-    }
-
-    private static String mSelectedKey = null;
-    private static CompoundButton mCurrentChecked = null;
-    private boolean mProtectFromCheckedChange = false;
-    private boolean mSelectable = true;
-
-    @Override
-    public void onBindViewHolder(PreferenceViewHolder view) {
-        super.onBindViewHolder(view);
-
-        View widget = view.findViewById(R.id.apn_radiobutton);
-        if ((widget != null) && widget instanceof RadioButton) {
-            RadioButton rb = (RadioButton) widget;
-            if (mSelectable) {
-                rb.setOnCheckedChangeListener(this);
-
-                boolean isChecked = getKey().equals(mSelectedKey);
-                if (isChecked) {
-                    mCurrentChecked = rb;
-                    mSelectedKey = getKey();
-                }
-
-                mProtectFromCheckedChange = true;
-                rb.setChecked(isChecked);
-                mProtectFromCheckedChange = false;
-                rb.setVisibility(View.VISIBLE);
-            } else {
-                rb.setVisibility(View.GONE);
-            }
-        }
-
-        View textLayout = view.findViewById(R.id.text_layout);
-        if ((textLayout != null) && textLayout instanceof RelativeLayout) {
-            textLayout.setOnClickListener(this);
-        }
-    }
-
-    public boolean isChecked() {
-        return getKey().equals(mSelectedKey);
-    }
-
-    public void setChecked() {
-        mSelectedKey = getKey();
-    }
-
-    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-        Log.i(TAG, "ID: " + getKey() + " :" + isChecked);
-        if (mProtectFromCheckedChange) {
-            return;
-        }
-
-        if (isChecked) {
-            if (mCurrentChecked != null) {
-                mCurrentChecked.setChecked(false);
-            }
-            mCurrentChecked = buttonView;
-            mSelectedKey = getKey();
-            callChangeListener(mSelectedKey);
-        } else {
-            mCurrentChecked = null;
-            mSelectedKey = null;
-        }
-    }
-
-    public void onClick(android.view.View v) {
-        if ((v != null) && (R.id.text_layout == v.getId())) {
-            Context context = getContext();
-            if (context != null) {
-                int pos = Integer.parseInt(getKey());
-                Uri url = ContentUris.withAppendedId(Telephony.Carriers.CONTENT_URI, pos);
-                /// M: for [Read Only APN]
-                // context.startActivity(new Intent(Intent.ACTION_EDIT, url));
-                Intent intent = new Intent(Intent.ACTION_EDIT, url);
-                intent.putExtra("readOnly", !mEditable);
-                intent.putExtra("sub_id", mSubId);
-                context.startActivity(intent);
-                /// @}
-            }
-        }
-    }
-
-    public void setSelectable(boolean selectable) {
-        mSelectable = selectable;
-    }
-
-    public boolean getSelectable() {
-        return mSelectable;
-    }
-
-    ///----------------------------------------MTK------------------------------------------------
-    private int mSubId;
-    private boolean mEditable;
-
-    public int getSubId() {
-        return mSubId;
-    }
-
-    public void setSubId(int subId) {
-        mSubId = subId;
-    }
-
-    /**
-     * M: for [Read Only APN]
-     * set whether the APN is editable, as some preset Apn can be be edited
-     * @param isEditable
-     */
-    public void setApnEditable(boolean isEditable) {
-        Log.d(TAG, "setApnEditable " + isEditable);
-        mEditable = isEditable;
-    }
-}
Index: vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Settings/src/com/android/settings/ApnSettings.java
===================================================================
--- vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Settings/src/com/android/settings/ApnSettings.java	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/mediatek/proprietary/packages/apps/Settings/src/com/android/settings/ApnSettings.java	(revision 3018)
@@ -1,820 +0,0 @@
-/*
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.settings;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.BroadcastReceiver;
-import android.content.ContentResolver;
-import android.content.ContentUris;
-import android.content.ContentValues;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.database.Cursor;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.HandlerThread;
-import android.os.Looper;
-import android.os.Message;
-import android.os.PersistableBundle;
-import android.os.UserHandle;
-import android.os.UserManager;
-import android.provider.Settings;
-import android.provider.Telephony;
-import android.support.v7.preference.Preference;
-import android.support.v7.preference.PreferenceGroup;
-import android.support.v7.preference.PreferenceScreen;
-import android.telephony.CarrierConfigManager;
-import android.telephony.SubscriptionInfo;
-import android.telephony.SubscriptionManager;
-import android.telephony.TelephonyManager;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.MotionEvent;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.android.internal.logging.MetricsProto.MetricsEvent;
-import com.android.internal.telephony.PhoneConstants;
-import com.android.internal.telephony.TelephonyIntents;
-import com.android.internal.telephony.dataconnection.ApnSetting;
-import com.android.internal.telephony.uicc.IccRecords;
-import com.android.internal.telephony.uicc.UiccController;
-import com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
-import com.mediatek.settings.UtilsExt;
-import com.mediatek.settings.cdma.CdmaApnSetting;
-import com.mediatek.settings.cdma.CdmaUtils;
-import com.mediatek.settings.FeatureOption;
-import com.mediatek.settings.ext.IApnSettingsExt;
-import com.mediatek.settings.ext.IRcseOnlyApnExt;
-import com.mediatek.settings.ext.IRcseOnlyApnExt.OnRcseOnlyApnStateChangedListener;
-import com.mediatek.settings.sim.SimHotSwapHandler;
-import com.mediatek.settings.sim.TelephonyUtils;
-import com.mediatek.settings.sim.SimHotSwapHandler.OnSimHotSwapListener;
-
-
-import java.util.ArrayList;
-
-public class ApnSettings extends RestrictedSettingsFragment implements
-        Preference.OnPreferenceChangeListener {
-    static final String TAG = "ApnSettings";
-
-    public static final String EXTRA_POSITION = "position";
-    public static final String RESTORE_CARRIERS_URI =
-        "content://telephony/carriers/restore";
-    public static final String PREFERRED_APN_URI =
-        "content://telephony/carriers/preferapn";
-
-    public static final String APN_ID = "apn_id";
-    public static final String SUB_ID = "sub_id";
-    public static final String MVNO_TYPE = "mvno_type";
-    public static final String MVNO_MATCH_DATA = "mvno_match_data";
-
-    private static final int ID_INDEX = 0;
-    private static final int NAME_INDEX = 1;
-    private static final int APN_INDEX = 2;
-    private static final int TYPES_INDEX = 3;
-    private static final int MVNO_TYPE_INDEX = 4;
-    private static final int MVNO_MATCH_DATA_INDEX = 5;
-    /// M: check source type, some types are not editable
-    private static final int SOURCE_TYPE_INDEX = 6;
-
-    private static final int MENU_NEW = Menu.FIRST;
-    private static final int MENU_RESTORE = Menu.FIRST + 1;
-
-    private static final int EVENT_RESTORE_DEFAULTAPN_START = 1;
-    private static final int EVENT_RESTORE_DEFAULTAPN_COMPLETE = 2;
-
-    private static final int DIALOG_RESTORE_DEFAULTAPN = 1001;
-
-    private static final Uri DEFAULTAPN_URI = Uri.parse(RESTORE_CARRIERS_URI);
-    private static final Uri PREFERAPN_URI = Uri.parse(PREFERRED_APN_URI);
-
-    private static boolean mRestoreDefaultApnMode;
-
-    private UserManager mUserManager;
-    private RestoreApnUiHandler mRestoreApnUiHandler;
-    private RestoreApnProcessHandler mRestoreApnProcessHandler;
-    private HandlerThread mRestoreDefaultApnThread;
-    private SubscriptionInfo mSubscriptionInfo;
-    private UiccController mUiccController;
-    private String mMvnoType;
-    private String mMvnoMatchData;
-
-    private String mSelectedKey;
-
-    private IntentFilter mMobileStateFilter;
-
-    private boolean mUnavailable;
-
-    private boolean mHideImsApn;
-    private boolean mAllowAddingApns;
-    private boolean mRestoreOngoing = false;
-
-    public ApnSettings() {
-        super(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS);
-    }
-
-    private final BroadcastReceiver mMobileStateReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (intent.getAction().equals(
-                    TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED)) {
-                PhoneConstants.DataState state = getMobileDataState(intent);
-                Log.d(TAG, "onReceive ACTION_ANY_DATA_CONNECTION_STATE_CHANGED,state = " + state);
-                switch (state) {
-                case CONNECTED:
-                    if (!mRestoreDefaultApnMode) {
-                        fillList();
-                    } else {
-                        /// M: for ALPS02326359, should not show dialog here
-                        // showDialog(DIALOG_RESTORE_DEFAULTAPN);
-                    }
-                    break;
-                }
-                /// M: disable screen when MMS in transaction
-                updateScreenForDataStateChange(context, intent);
-            } else if (Intent.ACTION_AIRPLANE_MODE_CHANGED.equals(intent.getAction())) {
-                /// M: Update the screen enable status, if airplane mode change
-                updateScreenEnableState(context);
-            }
-        }
-    };
-
-    private static PhoneConstants.DataState getMobileDataState(Intent intent) {
-        String str = intent.getStringExtra(PhoneConstants.STATE_KEY);
-        if (str != null) {
-            return Enum.valueOf(PhoneConstants.DataState.class, str);
-        } else {
-            return PhoneConstants.DataState.DISCONNECTED;
-        }
-    }
-
-    @Override
-    protected int getMetricsCategory() {
-        return MetricsEvent.APN;
-    }
-
-    @Override
-    public void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-        final Activity activity = getActivity();
-        final int subId = activity.getIntent().getIntExtra(SUB_ID,
-                SubscriptionManager.INVALID_SUBSCRIPTION_ID);
-
-        mMobileStateFilter = new IntentFilter(
-                TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
-        /// M: for Airplane mode check
-        mMobileStateFilter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
-
-        setIfOnlyAvailableForAdmins(true);
-
-        mSubscriptionInfo = SubscriptionManager.from(activity).getActiveSubscriptionInfo(subId);
-        mUiccController = UiccController.getInstance();
-
-        /// M: @{
-        if (mSubscriptionInfo == null) {
-            Log.d(TAG, "onCreate()... Invalid subId: " + subId);
-            getActivity().finish();
-        }
-        /// @}
-
-        /// M: for [SIM Hot Swap] @{
-        mSimHotSwapHandler = new SimHotSwapHandler(getActivity().getApplicationContext());
-        mSimHotSwapHandler.registerOnSimHotSwap(new OnSimHotSwapListener() {
-            @Override
-            public void onSimHotSwap() {
-                Log.d(TAG, "onSimHotSwap, finish activity");
-                if (getActivity() != null) {
-                    getActivity().finish();
-                }
-            }
-        });
-        /// @}
-
-        /// M: for plug-in @{
-        mApnExt = UtilsExt.getApnSettingsPlugin(activity);
-        mApnExt.initTetherField(this);
-
-        mRcseApnExt = UtilsExt.getRcseApnPlugin(activity);
-        mRcseApnExt.onCreate(new OnRcseOnlyApnStateChangedListener() {
-            @Override
-            public void OnRcseOnlyApnStateChanged() {
-                Log.d(TAG, "OnRcseOnlyApnStateChanged()");
-                fillList();
-            }
-        }, subId);
-        /// @}
-
-        CarrierConfigManager configManager = (CarrierConfigManager)
-                getSystemService(Context.CARRIER_CONFIG_SERVICE);
-        PersistableBundle b = configManager.getConfig();
-        mHideImsApn = b.getBoolean(CarrierConfigManager.KEY_HIDE_IMS_APN_BOOL);
-        mAllowAddingApns = b.getBoolean(CarrierConfigManager.KEY_ALLOW_ADDING_APNS_BOOL);
-        mUserManager = UserManager.get(activity);
-    }
-
-    @Override
-    public void onActivityCreated(Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-
-        getEmptyTextView().setText(R.string.apn_settings_not_available);
-        mUnavailable = isUiRestricted();
-        setHasOptionsMenu(!mUnavailable);
-        if (mUnavailable) {
-            setPreferenceScreen(new PreferenceScreen(getPrefContext(), null));
-            getPreferenceScreen().removeAll();
-            return;
-        }
-
-        addPreferencesFromResource(R.xml.apn_settings);
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-
-        if (mUnavailable) {
-            return;
-        }
-
-        getActivity().registerReceiver(mMobileStateReceiver, mMobileStateFilter);
-
-        if (!mRestoreDefaultApnMode) {
-            fillList();
-            /// M: In case dialog not dismiss as activity is in background, so when resume back,
-            // need to remove the dialog @{
-            removeDialog(DIALOG_RESTORE_DEFAULTAPN);
-            /// @}
-        }
-
-        /// M: for plug-in
-        mApnExt.updateTetherState();
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-
-        if (mUnavailable) {
-            return;
-        }
-
-        getActivity().unregisterReceiver(mMobileStateReceiver);
-
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-
-        if (mRestoreDefaultApnThread != null) {
-            mRestoreDefaultApnThread.quit();
-        }
-
-        /// M: for [SIM Hot Swap] @{
-        if (mSimHotSwapHandler != null) {
-            mSimHotSwapHandler.unregisterOnSimHotSwap();
-        }
-        /// @}
-
-        /// M: for plug-in @{
-        mApnExt.onDestroy();
-        mRcseApnExt.onDestory();
-        /// @}
-    }
-
-    @Override
-    public EnforcedAdmin getRestrictionEnforcedAdmin() {
-        final UserHandle user = UserHandle.of(mUserManager.getUserHandle());
-        if (mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS, user)
-                && !mUserManager.hasBaseUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,
-                        user)) {
-            return EnforcedAdmin.MULTIPLE_ENFORCED_ADMIN;
-        }
-        return null;
-    }
-
-    private void fillList() {
-        final TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
-        String mccmnc = mSubscriptionInfo == null ? ""
-            : tm.getSimOperator(mSubscriptionInfo.getSubscriptionId());
-
-        /// M: for plug-in @{
-        // use mcc&mnc in IMPI to query apn.
-        Log.d(TAG, "before plugin, mccmnc = " + mccmnc);
-        mccmnc = mApnExt.getOperatorNumericFromImpi(mccmnc,
-                SubscriptionManager.getPhoneId(mSubscriptionInfo.getSubscriptionId()));
-        /// @}
-
-        Log.d(TAG, "mccmnc = " + mccmnc);
-
-        String where = "numeric=\"" + mccmnc + "\"";
-        /// M: for [C2K APN Customization] @{
-        if (mSubscriptionInfo != null) {
-            int subId = mSubscriptionInfo.getSubscriptionId();
-            if (CdmaUtils.isSupportCdma(subId)) {
-                where = CdmaApnSetting.customizeQuerySelectionforCdma(where, mccmnc, subId);
-            }
-        }
-        /// @}
-
-        where += " AND NOT (type='ia' AND (apn=\"\" OR apn IS NULL)) AND user_visible!=0";
-
-        /// M: for VoLTE, do not show ims apn for non-VoLTE project @{
-        /*
-        if (mHideImsApn) {
-            where.append(" AND NOT (type='ims')");
-        }
-        */
-        if (!FeatureOption.MTK_VOLTE_SUPPORT || mHideImsApn) {
-            where += " AND NOT (type='ims' OR type='ia,ims')";
-        }
-        /// @}
-
-        /// M: for plug-in
-        where = mApnExt.getFillListQuery(where, mccmnc);
-
-        Log.d(TAG, "fillList where: " + where);
-
-        /// M: for CU default APN set.
-        /*
-        Cursor cursor = getContentResolver().query(Telephony.Carriers.CONTENT_URI, new String[] {
-                "_id", "name", "apn", "type", "mvno_type", "mvno_match_data"}, where.toString(),
-                null, Telephony.Carriers.DEFAULT_SORT_ORDER);
-        */
-        String order = mApnExt.getApnSortOrder(Telephony.Carriers.DEFAULT_SORT_ORDER);
-        Log.d(TAG, "fillList sort: " + order);
-        Cursor cursor = getContentResolver().query(
-                Telephony.Carriers.CONTENT_URI,
-                new String[] { "_id", "name", "apn", "type", "mvno_type", "mvno_match_data",
-                        "sourcetype" }, where, null, order);
-        /// @}
-
-        if (cursor != null) {
-            Log.d(TAG, "fillList, cursor count: " + cursor.getCount());
-            IccRecords r = null;
-            if (mUiccController != null && mSubscriptionInfo != null) {
-                r = mUiccController.getIccRecords(SubscriptionManager.getPhoneId(
-                        mSubscriptionInfo.getSubscriptionId()), UiccController.APP_FAM_3GPP);
-            }
-            PreferenceGroup apnList = (PreferenceGroup) findPreference("apn_list");
-            apnList.removeAll();
-
-            /// M: for plug-in, use Preference instead ApnPreference for the
-            // convenience of plug-in side
-            ArrayList<Preference> mnoApnList = new ArrayList<Preference>();
-            ArrayList<Preference> mvnoApnList = new ArrayList<Preference>();
-            ArrayList<Preference> mnoMmsApnList = new ArrayList<Preference>();
-            ArrayList<Preference> mvnoMmsApnList = new ArrayList<Preference>();
-
-            mSelectedKey = getSelectedApnKey();
-            cursor.moveToFirst();
-
-            while (!cursor.isAfterLast()) {
-                String name = cursor.getString(NAME_INDEX);
-                String apn = cursor.getString(APN_INDEX);
-                String key = cursor.getString(ID_INDEX);
-                String type = cursor.getString(TYPES_INDEX);
-                String mvnoType = cursor.getString(MVNO_TYPE_INDEX);
-                String mvnoMatchData = cursor.getString(MVNO_MATCH_DATA_INDEX);
-                /// M: check source type, some types are not editable
-                int sourcetype = cursor.getInt(SOURCE_TYPE_INDEX);
-
-                /// M: skip specific APN type
-                if(shouldSkipApn(type)) {
-                    cursor.moveToNext();
-                    continue;
-                }
-
-                /// M: for plug-in
-                name = mApnExt.updateApnName(name, sourcetype);
-
-                ApnPreference pref = new ApnPreference(getPrefContext());
-
-                pref.setKey(key);
-                pref.setTitle(name);
-                pref.setSummary(apn);
-                pref.setPersistent(false);
-                pref.setOnPreferenceChangeListener(this);
-                
-                boolean isEditable = mApnExt.isAllowEditPresetApn(type, apn, mccmnc, sourcetype);
-                Log.d(TAG, "apn name = " + name + ", sourcetype = " + sourcetype + ", isEditable = " + isEditable);
-
-                /// M: for [Read Only APN]
-                pref.setApnEditable(mApnExt.isAllowEditPresetApn(type, apn, mccmnc, sourcetype));
-                if (sourcetype == 1) {
-                	pref.setApnEditable(true);
-                }
-                pref.setSubId(mSubscriptionInfo == null ? null : mSubscriptionInfo
-                        .getSubscriptionId());
-
-                /// M: for ALPS02500557, do not select emergency APN
-                boolean selectable = ((type == null) || (!type.equals("mms")
-                        && !type.equals("ia") && !type.equals("ims")&& !type.equals("emergency")))
-                        /// M: for plug-in
-                        && mApnExt.isSelectable(type);
-                pref.setSelectable(selectable);
-                Log.d(TAG, "mSelectedKey = " + mSelectedKey + " key = " + key + " name = " + name +
-                        " selectable=" + selectable);
-                if (selectable) {
-                    /// M: select prefer APN later, as the apn list are not solid now @{
-                    /*
-                    if ((mSelectedKey != null) && mSelectedKey.equals(key)) {
-                        pref.setChecked();
-                    }
-                    */
-                    /// @}
-                    addApnToList(pref, mnoApnList, mvnoApnList, r, mvnoType, mvnoMatchData);
-                    /// M: For CT feature,when apns-conf.xml add type extra value "supl",
-                    //     selectable maybe ture when 46011 mms, so need this method.
-                    mApnExt.customizeUnselectableApn(type, mvnoType, mvnoMatchData, mnoApnList, mvnoApnList,
-                            mSubscriptionInfo == null ? null : mSubscriptionInfo
-                                    .getSubscriptionId());
-                } else {
-                    addApnToList(pref, mnoMmsApnList, mvnoMmsApnList, r, mvnoType, mvnoMatchData);
-                    /// M: for plug-in
-                    mApnExt.customizeUnselectableApn(type, mvnoType, mvnoMatchData, mnoMmsApnList, mvnoMmsApnList,
-                            mSubscriptionInfo == null ? null : mSubscriptionInfo
-                                    .getSubscriptionId());
-                }
-                cursor.moveToNext();
-            }
-            cursor.close();
-
-            if (!mvnoApnList.isEmpty()) {
-                mnoApnList = mvnoApnList;
-                mnoMmsApnList = mvnoMmsApnList;
-
-                // Also save the mvno info
-            }
-
-            for (Preference preference : mnoApnList) {
-                apnList.addPreference(preference);
-            }
-            for (Preference preference : mnoMmsApnList) {
-                apnList.addPreference(preference);
-            }
-
-            /// M: always set a prefer APN
-            setPreferApnChecked(mnoApnList);
-
-            /// M: update screen enable state according to airplane mode, SIM radio status, etc.
-            updateScreenEnableState(getActivity());
-        }
-    }
-
-    private void addApnToList(ApnPreference pref, ArrayList<Preference> mnoList,
-                              ArrayList<Preference> mvnoList, IccRecords r, String mvnoType,
-                              String mvnoMatchData) {
-        Log.d(TAG, "mvnoType = " + mvnoType + ", mvnoMatchData = " + mvnoMatchData);
-        if (r != null && !TextUtils.isEmpty(mvnoType) && !TextUtils.isEmpty(mvnoMatchData)) {
-            if (ApnSetting.mvnoMatches(r, mvnoType, mvnoMatchData)) {
-                mvnoList.add(pref);
-                // Since adding to mvno list, save mvno info
-                mMvnoType = mvnoType;
-                mMvnoMatchData = mvnoMatchData;
-                Log.d(TAG, "mvnoMatches...");
-            }
-        } else {
-            mnoList.add(pref);
-        }
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        if (!mUnavailable) {
-            if (mAllowAddingApns && !mRestoreOngoing) {
-                menu.add(0, MENU_NEW, 0,
-                        getResources().getString(R.string.menu_new))
-                        .setIcon(android.R.drawable.ic_menu_add)
-                        .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
-            }
-            menu.add(0, MENU_RESTORE, 0,
-                    getResources().getString(R.string.menu_restore))
-                    .setIcon(android.R.drawable.ic_menu_upload);
-        }
-
-        /// M: for plug-in
-        mApnExt.updateMenu(menu, MENU_NEW, MENU_RESTORE,
-                TelephonyManager.getDefault().getSimOperator(
-                mSubscriptionInfo != null ? mSubscriptionInfo.getSubscriptionId()
-                        : SubscriptionManager.INVALID_SUBSCRIPTION_ID));
-        super.onCreateOptionsMenu(menu, inflater);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-        case MENU_NEW:
-            addNewApn();
-            return true;
-
-        case MENU_RESTORE:
-            restoreDefaultApn();
-            return true;
-        }
-        return super.onOptionsItemSelected(item);
-    }
-
-    private void addNewApn() {
-        if(!mRestoreOngoing) {
-            Log.d(TAG, "addNewApn...");
-            Intent intent = new Intent(Intent.ACTION_INSERT, Telephony.Carriers.CONTENT_URI);
-            int subId = mSubscriptionInfo != null ? mSubscriptionInfo.getSubscriptionId()
-                : SubscriptionManager.INVALID_SUBSCRIPTION_ID;
-            intent.putExtra(SUB_ID, subId);
-            if (!TextUtils.isEmpty(mMvnoType) && !TextUtils.isEmpty(mMvnoMatchData)) {
-                intent.putExtra(MVNO_TYPE, mMvnoType);
-                intent.putExtra(MVNO_MATCH_DATA, mMvnoMatchData);
-            }
-
-            /// M: for plug-in
-            mApnExt.addApnTypeExtra(intent);
-
-            startActivity(intent);
-        }
-    }
-
-    @Override
-    public boolean onPreferenceTreeClick(Preference preference) {
-        int pos = Integer.parseInt(preference.getKey());
-        Uri url = ContentUris.withAppendedId(Telephony.Carriers.CONTENT_URI, pos);
-        Intent intent = new Intent(Intent.ACTION_EDIT, url);
-        Log.d(TAG, "put subid = " + mSubscriptionInfo.getSubscriptionId());
-        intent.putExtra("sub_id", mSubscriptionInfo.getSubscriptionId());
-        startActivity(intent);
-        return true;
-    }
-
-    public boolean onPreferenceChange(Preference preference, Object newValue) {
-        Log.d(TAG, "onPreferenceChange(): Preference - " + preference
-                + ", newValue - " + newValue + ", newValue type - "
-                + newValue.getClass());
-        if (newValue instanceof String) {
-            setSelectedApnKey((String) newValue);
-        }
-
-        return true;
-    }
-
-    private void setSelectedApnKey(String key) {
-        mSelectedKey = key;
-        ContentResolver resolver = getContentResolver();
-
-        ContentValues values = new ContentValues();
-        values.put(APN_ID, mSelectedKey);
-
-        /// M: add sub id for prefer APN
-        // resolver.update(PREFERAPN_URI, values, null, null);
-        resolver.update(getPreferApnUri(mSubscriptionInfo.getSubscriptionId()), values,
-                null, null);
-    }
-
-    private String getSelectedApnKey() {
-        String key = null;
-
-        /// M: add sub id for prefer APN @{
-        /*
-        Cursor cursor = getContentResolver().query(PREFERAPN_URI, new String[] {"_id"},
-                null, null, Telephony.Carriers.DEFAULT_SORT_ORDER);
-                */
-        int subId = mSubscriptionInfo.getSubscriptionId();
-        Cursor cursor = getContentResolver().query(getPreferApnUri(subId), new String[] { "_id" },
-                null, null, Telephony.Carriers.DEFAULT_SORT_ORDER);
-        /// @}
-        if (cursor.getCount() > 0) {
-            cursor.moveToFirst();
-            key = cursor.getString(ID_INDEX);
-        }
-        cursor.close();
-        Log.d(TAG,"getSelectedApnKey(), key = " + key);
-        return key;
-    }
-
-    private boolean restoreDefaultApn() {
-        Log.d(TAG, "restoreDefaultApn...");
-        showDialog(DIALOG_RESTORE_DEFAULTAPN);
-        mRestoreDefaultApnMode = true;
-
-        if (mRestoreApnUiHandler == null) {
-            mRestoreApnUiHandler = new RestoreApnUiHandler();
-        }
-
-        if (mRestoreApnProcessHandler == null ||
-            mRestoreDefaultApnThread == null) {
-            mRestoreDefaultApnThread = new HandlerThread(
-                    "Restore default APN Handler: Process Thread");
-            mRestoreDefaultApnThread.start();
-            mRestoreApnProcessHandler = new RestoreApnProcessHandler(
-                    mRestoreDefaultApnThread.getLooper(), mRestoreApnUiHandler);
-        }
-
-        mRestoreApnProcessHandler
-                .sendEmptyMessage(EVENT_RESTORE_DEFAULTAPN_START);
-        return true;
-    }
-
-    private class RestoreApnUiHandler extends Handler {
-        @Override
-        public void handleMessage(Message msg) {
-            switch (msg.what) {
-                case EVENT_RESTORE_DEFAULTAPN_COMPLETE:
-                    Log.d(TAG, "restore APN complete~~");
-                    Activity activity = getActivity();
-                    if (activity == null) {
-                        mRestoreDefaultApnMode = false;
-                        return;
-                    }
-                    fillList();
-                    updateScreenEnableState(activity);
-                    mRestoreDefaultApnMode = false;
-                    removeDialog(DIALOG_RESTORE_DEFAULTAPN);
-                    Toast.makeText(
-                        activity,
-                        getResources().getString(
-                                R.string.restore_default_apn_completed),
-                        Toast.LENGTH_LONG).show();
-                    mRestoreOngoing = false;
-                    break;
-            }
-        }
-    }
-
-    private class RestoreApnProcessHandler extends Handler {
-        private Handler mRestoreApnUiHandler;
-
-        public RestoreApnProcessHandler(Looper looper, Handler restoreApnUiHandler) {
-            super(looper);
-            this.mRestoreApnUiHandler = restoreApnUiHandler;
-        }
-
-        @Override
-        public void handleMessage(Message msg) {
-            switch (msg.what) {
-                case EVENT_RESTORE_DEFAULTAPN_START:
-                    Log.d(TAG, "restore APN start~~");
-                    ContentResolver resolver = getContentResolver();
-                    /// M: add sub id for APN
-                    // resolver.delete(DEFAULTAPN_URI, null, null);
-                    resolver.delete(
-                            getDefaultApnUri(mSubscriptionInfo.getSubscriptionId()), null, null);
-                    mRestoreApnUiHandler
-                        .sendEmptyMessage(EVENT_RESTORE_DEFAULTAPN_COMPLETE);
-                    mRestoreOngoing = true;
-                    break;
-            }
-        }
-    }
-
-    @Override
-    public Dialog onCreateDialog(int id) {
-        if (id == DIALOG_RESTORE_DEFAULTAPN) {
-            ProgressDialog dialog = new ProgressDialog(getActivity()) {
-                public boolean onTouchEvent(MotionEvent event) {
-                    return true;
-                }
-            };
-            dialog.setMessage(getResources().getString(R.string.restore_default_apn));
-            dialog.setCancelable(false);
-            return dialog;
-        }
-        return null;
-    }
-
-    ///---------------------------------------MTK-------------------------------------------------
-    /// M: for [SIM Hot Swap]
-    private SimHotSwapHandler mSimHotSwapHandler;
-
-    private IApnSettingsExt mApnExt;
-    private IRcseOnlyApnExt mRcseApnExt;
-
-    private void updateScreenForDataStateChange(Context context, Intent intent) {
-        String apnType  = intent.getStringExtra(PhoneConstants.DATA_APN_TYPE_KEY);
-        Log.d(TAG, "Receiver,send MMS status, get type = " + apnType);
-        if (PhoneConstants.APN_TYPE_MMS.equals(apnType)) {
-            getPreferenceScreen().setEnabled(
-                    !isMmsInTransaction(context)
-                            /// M: for plug-in @{
-                            && mApnExt.getScreenEnableState(mSubscriptionInfo
-                                    .getSubscriptionId(), getActivity()));
-                            /// @}
-        }
-    }
-
-    private void updateScreenEnableState(Context context) {
-        int subId = mSubscriptionInfo.getSubscriptionId();
-        boolean simReady = TelephonyManager.SIM_STATE_READY == TelephonyManager.getDefault()
-                .getSimState(SubscriptionManager.getSlotId(subId));
-        boolean airplaneModeEnabled = android.provider.Settings.System.getInt(context
-                .getContentResolver(), android.provider.Settings.System.AIRPLANE_MODE_ON, -1) == 1;
-
-        boolean enable = !airplaneModeEnabled && simReady;
-        Log.d(TAG, "updateScreenEnableState(), subId = " + subId + " ,airplaneModeEnabled = "
-                + airplaneModeEnabled + " ,simReady = " + simReady);
-        getPreferenceScreen().setEnabled(
-                          /// M: for plug-in
-                enable && mApnExt.getScreenEnableState(subId, getActivity()));
-        if (getActivity() != null) {
-            getActivity().invalidateOptionsMenu();
-        }
-    }
-
-    private boolean isMmsInTransaction(Context context) {
-        boolean isMmsInTransaction = false;
-        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(
-                Context.CONNECTIVITY_SERVICE);
-        if (cm != null) {
-            NetworkInfo networkInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE_MMS);
-            if (networkInfo != null) {
-                NetworkInfo.State state = networkInfo.getState();
-                Log.d(TAG, "mms state = " + state);
-                isMmsInTransaction = (state == NetworkInfo.State.CONNECTING
-                    || state == NetworkInfo.State.CONNECTED);
-            }
-        }
-        return isMmsInTransaction;
-    }
-
-    public boolean shouldSkipApn(String type) {
-        /// M: for plug-in
-        return "cmmail".equals(type) || !mRcseApnExt.isRcseOnlyApnEnabled(type);
-    }
-
-    @Override
-    public void onPrepareOptionsMenu(Menu menu) {
-        int size = menu.size();
-        boolean isAirplaneModeOn = TelephonyUtils.isAirplaneModeOn(getActivity());
-        Log.d(TAG,"onPrepareOptionsMenu isAirplaneModeOn = " + isAirplaneModeOn);
-        // When airplane mode on need to disable options menu
-        for (int i = 0;i< size;i++) {
-            menu.getItem(i).setEnabled(!isAirplaneModeOn);
-        }
-        super.onPrepareOptionsMenu(menu);
-    }
-
-    private Uri getPreferApnUri(int subId) {
-        Uri preferredUri = Uri.withAppendedPath(Uri.parse(PREFERRED_APN_URI), "/subId/" + subId);
-        Log.d(TAG, "getPreferredApnUri: " + preferredUri);
-        /// M: for plug-in
-        preferredUri = mApnExt.getPreferCarrierUri(preferredUri, subId);
-        return preferredUri;
-    }
-
-    private Uri getDefaultApnUri(int subId) {
-        return Uri.withAppendedPath(DEFAULTAPN_URI, "/subId/" + subId);
-    }
-
-    // compare prefer apn and set preference checked state
-    private void setPreferApnChecked(ArrayList<Preference> apnList) {
-        if (apnList == null || apnList.isEmpty()) {
-            return;
-        }
-
-        String selectedKey = null;
-        if (mSelectedKey != null) {
-            for (Preference pref : apnList) {
-                if (mSelectedKey.equals(pref.getKey())) {
-                    ((ApnPreference) pref).setChecked();
-                    selectedKey = mSelectedKey;
-                }
-            }
-        }
-
-        // can't find prefer APN in the list, reset to the first one
-        if (selectedKey == null && apnList.get(0) != null) {
-            ((ApnPreference) apnList.get(0)).setChecked();
-            selectedKey = apnList.get(0).getKey();
-        }
-
-        // save the new APN
-        if (selectedKey != null && selectedKey != mSelectedKey) {
-            setSelectedApnKey(selectedKey);
-            mSelectedKey = selectedKey;
-        }
-
-        Log.d(TAG, "setPreferApnChecked, APN = " + mSelectedKey);
-    }
-}
Index: vendor/branch/5058A_Claro/vendor/mediatek/proprietary/external/EccList/ecc_list.xml
===================================================================
--- vendor/branch/5058A_Claro/vendor/mediatek/proprietary/external/EccList/ecc_list.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/mediatek/proprietary/external/EccList/ecc_list.xml	(revision 3018)
@@ -1,110 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<EccTable>
-    <!--
-        The attribute definition for tag EccEntry:
-        - Ecc: the emergnecy number
-        - Category: the service category (From 3GPP TS24.008)
-            - Bit 1 (1): Police
-            - Bit 2 (2): Ambulance
-            - Bit 3 (4): Fire Brigade
-            - Bit 4 (8): Marine Guard
-            - Bit 5 (16): Mountain Rescue
-            - Bit 6 (32): Manually initiated eCall
-            - Bit 7 (64): Automatically initiated eCall
-            - Bit 8 (128): is spare and set to "0"
-        - Condition: there are following values:
-            - 0: ecc only when no sim
-            - 1: ecc always
-            - 2: MMI will show ecc but send to nw as normal call
-        - Plmn: ecc for specific operator
-                format: xxx xx (for specific mnc) or xxx FFF (for all mnc under same mcc)
-
-        NOTICE: Please list operator specific emergency numbers before common emergency numbers
-                defined by 3GPP spec 22.101
-    -->
-
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "730 01" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "730 02" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "730 03" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "730 08" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "730 09" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "730 10" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "716 06" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "716 10" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "716 17" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "716 15" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "740 00" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "740 02" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "740 01" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "736 01" />
-    <EccEntry Ecc="911" Category="0" Condition="1" Plmn = "736 03" />
-    
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "730 01" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "730 02" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "730 03" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "730 08" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "730 09" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "730 10" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "716 06" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "716 17" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "716 10" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "716 15" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "740 00" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "740 02" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "740 01" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "736 01" />
-    <EccEntry Ecc="112" Category="0" Condition="1" Plmn = "736 03" />
-    
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "730 01" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "730 02" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "730 03" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "730 08" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "730 09" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "730 10" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "716 06" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "716 10" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "716 17" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "716 15" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "740 00" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "740 02" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "740 01" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "736 01" />
-    <EccEntry Ecc="133" Category="0" Condition="1" Plmn = "736 03" />
-    
-    
-    <!-- Add for China CTA -->
-    <EccEntry Ecc="110" Category="0" Condition="2" Plmn = "460 FFF" />
-    <EccEntry Ecc="119" Category="0" Condition="2" Plmn = "460 FFF" />
-    <EccEntry Ecc="120" Category="0" Condition="2" Plmn = "460 FFF" />
-    <EccEntry Ecc="122" Category="0" Condition="2" Plmn = "460 FFF" />
-
-    <!-- Add for Malaysis Digi operator -->
-    <EccEntry Ecc="999" Category="0" Condition="1" Plmn = "502 FFF" />
-
-    <!-- Add for Thailand TrueMove operator (520 00/04) -->
-    <EccEntry Ecc="112" Category="1" Condition="1" Plmn = "520 00" />
-    <EccEntry Ecc="191" Category="1" Condition="1" Plmn = "520 00" />
-    <EccEntry Ecc="911" Category="1" Condition="1" Plmn = "520 00" />
-    <EccEntry Ecc="199" Category="4" Condition="1" Plmn = "520 00" />
-    <EccEntry Ecc="1669" Category="2" Condition="1" Plmn = "520 00" />
-    <EccEntry Ecc="112" Category="1" Condition="1" Plmn = "520 04" />
-    <EccEntry Ecc="191" Category="1" Condition="1" Plmn = "520 04" />
-    <EccEntry Ecc="911" Category="1" Condition="1" Plmn = "520 04" />
-    <EccEntry Ecc="199" Category="4" Condition="1" Plmn = "520 04" />
-    <EccEntry Ecc="1669" Category="2" Condition="1" Plmn = "520 04" />
-
-    <!-- Add for Taiwan APTG operator (466 05) -->
-    <EccEntry Ecc="110" Category="1" Condition="1" Plmn = "466 05" />
-    <EccEntry Ecc="112" Category="4" Condition="1" Plmn = "466 05" />
-    <EccEntry Ecc="119" Category="2" Condition="1" Plmn = "466 05" />
-
-    <!-- 3GPP 22.101 -->
-    <EccEntry Ecc="112" Category="0" Condition="1" />
-    <EccEntry Ecc="911" Category="0" Condition="1" />
-    <EccEntry Ecc="000" Category="0" Condition="0" />
-    <EccEntry Ecc="08" Category="0" Condition="0" />
-    <EccEntry Ecc="110" Category="0" Condition="0" />
-    <EccEntry Ecc="118" Category="0" Condition="0" />
-    <EccEntry Ecc="119" Category="0" Condition="0" />
-    <EccEntry Ecc="999" Category="0" Condition="0" />
-</EccTable>
Index: vendor/branch/5058A_Claro/vendor/mediatek/proprietary/custom/aus6739_66_n1/cgen/cfgdefault/CFG_WIFI_Default.h
===================================================================
--- vendor/branch/5058A_Claro/vendor/mediatek/proprietary/custom/aus6739_66_n1/cgen/cfgdefault/CFG_WIFI_Default.h	(revision 3017)
+++ vendor/branch/5058A_Claro/vendor/mediatek/proprietary/custom/aus6739_66_n1/cgen/cfgdefault/CFG_WIFI_Default.h	(revision 3018)
@@ -1,335 +0,0 @@
-/*****************************************************************************
-*  Copyright Statement:
-*  --------------------
-*  This software is protected by Copyright and the information contained
-*  herein is confidential. The software may not be copied and the information
-*  contained herein may not be used or disclosed except with the written
-*  permission of MediaTek Inc. (C) 2008
-*
-*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
-*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
-*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
-*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
-*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
-*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
-*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
-*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
-*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
-*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
-*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
-*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
-*
-*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
-*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
-*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
-*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
-*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
-*
-*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
-*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
-*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
-*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
-*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
-*
-*****************************************************************************/
-
-
-/*******************************************************************************
- *
- * Filename:
- * ---------
- *   cfg_wifi_default.h
- *
- * Project:
- * --------
- *   DUMA
- *
- * Description:
- * ------------
- *    give the default MT5921 config data.
- *
- * Author:
- * -------
- *   Renbang (MTK80150) 06/08/2009
- *
- *------------------------------------------------------------------------------
- * $Revision:$
- * $Modtime:$
- * $Log:$
- *
- * 09 26 2011 cp.wu
- * [ALPS00070736] MT6573�W���� Wifi �w��ƻݨD
- * update default value for regularity domain fields.
- *
- * 05 31 2011 cp.wu
- * [ALPS00050349] [Need Patch] [Volunteer Patch][MT6620 Wi-Fi][Driver] Add band edge tx power control to Wi-Fi NVRAM
- * adjust default TX power to 20dB(CCK) and 18dB(OFDM/HT20).
- *
- * 05 26 2011 cp.wu
- * [ALPS00050349] [Need Patch] [Volunteer Patch][MT6620 Wi-Fi][Driver] Add band edge tx power control to Wi-Fi NVRAM
- * update Wi-Fi NVRAM definition for band edge tx power control.
- *
- * 04 19 2011 cp.wu
- * [ALPS00041285] [Need Patch] [Volunteer Patch][MT6620 Wi-Fi] Merge MT6620 Wi-Fi into mt6575_evb project
- * 1. update init.rc for normal boot/meta/factory for MT6620 Wi-Fi related part.
- * 2. update NVRAM structure definition and default value for MT6620 Wi-Fi
- *
- * 11 05 2010 renbang.jiang
- * [ALPS00134025] [Wi-Fi] move Wi-Fi NVRAM definition source file to project folder from common folder
- * .
- *
- * 11 05 2010 renbang.jiang
- * [ALPS00134025] [Wi-Fi] move Wi-Fi NVRAM definition source file to project folder from common folder
- * .
- *
- * 07 10 2010 renbang.jiang
- * [ALPS00121785][Need Patch] [Volunteer Patch] use NVRAM to save Wi-Fi custom data 
- * .
- *
- *    mtk80150
- * [DUMA00131389] [wifi] enable MT5921 NVRAM
- * Enable Daisy Chain in default setting
- *
- * Jul 9 2009 mtk80306
- * [DUMA00122953] optimize nvram and change meta clean boot flag.
- * 
- * 
- *
- *******************************************************************************/
-
-
-
-#ifndef _CFG_WIFI_D_H
-#define _CFG_WIFI_D_H
-
-#if !defined(MT6628)
-#define MT6628
-#endif
-
-#include "../cfgfileinc/CFG_Wifi_File.h"
-#include "../inc/wifi_custom.h"
-// the default value of Wi-Fi nvram file
-
-#if defined(MT6628)
-WIFI_CFG_PARAM_STRUCT stWifiCfgDefault =
-{
-	0x010D, /* Own Version For MT6628*/
-	0x0000, /* Peer Version */
-	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* MAC ADDRESS */
-	{ 0x55, 0x53 }, /* COUNTRY CODE */
-	{ 0x26, 0x26, { 0x00, 0x00 }, /*cTxPwr2G4Cck*/ /*cTxPwr2G4Dsss*/
-	  0x22, 0x22, 0x22, 0x22, 0x21, 0x21, /*cTxPwr2G4OFDM*/
-    0x22, 0x22, 0x22, 0x20, 0x20, 0x20, /*cTxPwr2G4HT20*/
-	  0x21, 0x21, 0x21, 0x1E, 0x1E, 0x1E, /*cTxPwr2G4HT40*/
-    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, /*cTxPwr5GOFDM*/
-	  0x22, 0x22, 0x22, 0x20, 0x20, 0x20, /*cTxPwr5GHT20*/
-    0x22, 0x22, 0x22, 0x20, 0x20, 0x20 }, /*cTxPwr5GHT40*/ /* TX_PWR_PARAM_T */
-	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x18, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* aucEFUSE */
-	0x01, // TX_PWR_PARAM_T is VALID
-	0x01, // 5G band is supported
-	0x01, // 2.4GHz band edge power enabled
-	0x26, // cBandEdgeMaxPwrCCK
-	0x1E, // cBandEdgeMaxPwrOFDM20
-	0x1A, // cBandEdgeMaxPwrOFDM40
-	0x00, // ucRegChannelListMap
-	0x00, // ucRegChannelListIndex
-	{ 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	  0x00, 0x00, 0x00, 0x00}, /* aucRegSubbandInfo */
-	0x00, // ucDefaultTestMode
-	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x04, 0x00, 0x00, 0x00, 0x00 }, /* aucReserved2 */
-
-  0x0001, /* Own Version */
-	0x0000, /* Peer Version */
-	0x0, /* uc2G4BwFixed20M */
-	0x0, /* uc5GBwFixed20M */
-	0x1, /* ucEnable5GBand */
-	0x0, /* aucPReTailReserved */
-	{ 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }	/* aucTailReserved */
-};
-
-#elif defined(MT5931)
-WIFI_CFG_PARAM_STRUCT stWifiCfgDefault =
-{
-	0x0104, /* Own Version For MT5931*/
-	0x0000, /* Peer Version */
-	/*{*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 /*}*/, /* MAC ADDRESS */
-	/*{*/ 0x00, 0x00 /*}*/, /* COUNTRY CODE */
-	/*{*/ 0x26, 0x26, /*{*/ 0x00, 0x00 /*}*/,
-	  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, /*cTxPwr2G4OFDM*/
-      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, /*cTxPwr2G4HT20*/
-	  0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, /*cTxPwr2G4HT40*/
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*cTxPwr5GOFDM*/
-	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*cTxPwr5GHT20*/
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 /*}*/, /*cTxPwr5GHT40*/ /* TX_PWR_PARAM_T */
-    /*{*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 /*}*/, /* aucEFUSE */
-	  0x01, // TX_PWR_PARAM_T is VALID
-	  0x00, // 5G band is unsupported
-	  0x00, // 2.4GHz band edge power disabled
-	  0x26, // cBandEdgeMaxPwrCCK
-	  0x20, // cBandEdgeMaxPwrOFDM20
-	  0x1C, // cBandEdgeMaxPwrOFDM40
-  /*{*/ 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00 /*}*/,	/* aucReserved2 */
-  	
-    0x0001, /* Own Version */
-	  0x0000, /* Peer Version */
-		0x0,
-		0x0,
-		0x0,
-		0x0,
-  /*{*/ 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*},*/	/* aucTailReserved */
-};
-#else // for 6620
-WIFI_CFG_PARAM_STRUCT stWifiCfgDefault =
-{
-	0x0103, /* Own Version */
-	0x0000, /* Peer Version */
-	/*{*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 /*}*/, /* MAC ADDRESS */
-	/*{*/ 0x00, 0x00 /*}*/, /* COUNTRY CODE */
-	/*{*/ 0x28, /*{*/ 0x00, 0x00, 0x00 /*}*/,
-	  0x24, 0x24, 0x24, 0x24,
-	  0x24, 0x24, 0x24, 0x24,
-	  0x24, 0x24, 0x24, 0x24,
-	  0x20, 0x20, 0x20, 0x20,
-	  0x20, 0x20, 0x1A, 0x1A,
-	  0x1A, 0x1A, 0x1A, 0x1A,
-	  0x1A, 0x1A, 0x1A, 0x1A,
-	  0x1A, 0x1A, 0x1A, 0x1A,
-	  0x1A, 0x1A, 0x1A, 0x1A /*}*/, /* TX_PWR_PARAM_T */
-    /*{*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 /*}*/, /* aucEFUSE */
-	  0x01, // TX_PWR_PARAM_T is VALID
-	  0x00, // 5G band is unsupported
-	  0x00, // 2.4GHz band edge power disabled
-	  0x00,
-	  0x00,
-	  0x00,
-      0x00,
-      0x00,
-  /*{*/ 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00 /*}*/,
-
-  /*{*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 /*}*/, /* aucReserved2 */
-    
-    0x0001, /* Own Version */
-	  0x0000, /* Peer Version */
-		0x0,
-		0x0,
-		0x0,
-		0x0,
-  /*{*/ 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*},*/	/* aucTailReserved */
-};
-#endif
-
-
-WIFI_CUSTOM_PARAM_STRUCT stWifiCustomDefault =
-{
-    0x0, // Reserved
-};
-
-
-#endif
Index: vendor/branch/5058A_Claro/packages/apps/Dialer/InCallUI/src/com/android/incallui/CallButtonFragment.java
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Dialer/InCallUI/src/com/android/incallui/CallButtonFragment.java	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Dialer/InCallUI/src/com/android/incallui/CallButtonFragment.java	(revision 3018)
@@ -1,1154 +0,0 @@
-/*
- * Copyright (C) 2013 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License
- */
-
-package com.android.incallui;
-import static com.android.incallui.CallButtonFragment.Buttons.*;
-
-import android.content.Context;
-import android.content.res.ColorStateList;
-import android.content.res.Resources;
-import android.graphics.drawable.Drawable;
-import android.graphics.drawable.GradientDrawable;
-import android.graphics.drawable.LayerDrawable;
-import android.graphics.drawable.RippleDrawable;
-import android.graphics.drawable.StateListDrawable;
-import android.os.Bundle;
-import android.telecom.CallAudioState;
-import android.util.SparseIntArray;
-import android.view.ContextThemeWrapper;
-import android.view.HapticFeedbackConstants;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.CompoundButton;
-import android.widget.ImageButton;
-import android.widget.PopupMenu;
-import android.widget.Toast;
-import android.widget.PopupMenu.OnDismissListener;
-import android.widget.PopupMenu.OnMenuItemClickListener;
-
-import com.android.contacts.common.util.MaterialColorMapUtils.MaterialPalette;
-import com.android.dialer.R;
-
-/// M: add for plug in. @{
-import com.mediatek.incallui.ext.ExtensionManager;
-import com.mediatek.incallui.ext.IRCSeCallButtonExt;
-/// @}
-/// M: add for phone record. @{
-import com.mediatek.incallui.recorder.PhoneRecorderUtils;
-/// @}
-
-/**
- * Fragment for call control buttons
- */
-public class CallButtonFragment
-        extends BaseFragment<CallButtonPresenter, CallButtonPresenter.CallButtonUi>
-        implements CallButtonPresenter.CallButtonUi, OnMenuItemClickListener, OnDismissListener,
-        View.OnClickListener {
-
-    private int mButtonMaxVisible;
-    // The button is currently visible in the UI
-    private static final int BUTTON_VISIBLE = 1;
-    // The button is hidden in the UI
-    private static final int BUTTON_HIDDEN = 2;
-    // The button has been collapsed into the overflow menu
-    private static final int BUTTON_MENU = 3;
-
-    public interface Buttons {
-
-        public static final int BUTTON_AUDIO = 0;
-        public static final int BUTTON_MUTE = 1;
-        public static final int BUTTON_DIALPAD = 2;
-        public static final int BUTTON_HOLD = 3;
-        public static final int BUTTON_SWAP = 4;
-        public static final int BUTTON_UPGRADE_TO_VIDEO = 5;
-        public static final int BUTTON_SWITCH_CAMERA = 6;
-        public static final int BUTTON_DOWNGRADE_TO_AUDIO = 7;
-        /// M: [Hide and Downgrade button] @{
-        public static final int BUTTON_HIDE_LOCAL_VIDEO = 8;
-        /// @}
-        public static final int BUTTON_ADD_CALL = 9;
-        public static final int BUTTON_MERGE = 10;
-        public static final int BUTTON_PAUSE_VIDEO = 11;
-        public static final int BUTTON_MANAGE_VIDEO_CONFERENCE = 12;
-        /// M: [Voice Record]
-        public static final int BUTTON_SWITCH_VOICE_RECORD = 13;
-        /// M: add other feature. @{
-        public static final int BUTTON_SET_ECT = 14;
-        public static final int BUTTON_HANGUP_ALL_CALLS = 15;
-        public static final int BUTTON_HANGUP_ALL_HOLD_CALLS = 16;
-        public static final int BUTTON_HANGUP_ACTIVE_AND_ANSWER_WAITING = 17;
-        /// @}
-        /// M: add for blind ECT feature
-        public static final int BUTTON_BLIND_ECT = 18;
-        ///M:[add for cancel button]
-        public static final int BUTTON_CANCEL_UPGRADE = 19;
-        public static final int BUTTON_COUNT = 20;
-    }
-
-    private SparseIntArray mButtonVisibilityMap = new SparseIntArray(BUTTON_COUNT);
-
-    private CompoundButton mAudioButton;
-    private CompoundButton mMuteButton;
-    private CompoundButton mShowDialpadButton;
-    private CompoundButton mHoldButton;
-    private ImageButton mSwapButton;
-    private ImageButton mChangeToVideoButton;
-    private ImageButton mChangeToVoiceButton;
-    /// M: [Hide button] @{
-    private CompoundButton mHideOrShowLocalVideoButton;
-    /// @}
-    private CompoundButton mSwitchCameraButton;
-    private ImageButton mAddCallButton;
-    private ImageButton mMergeButton;
-    private CompoundButton mPauseVideoButton;
-    private ImageButton mOverflowButton;
-    private ImageButton mManageVideoCallConferenceButton;
-
-    private PopupMenu mAudioModePopup;
-    private boolean mAudioModePopupVisible;
-    private PopupMenu mOverflowPopup;
-
-    /// M: add for plug in. @{
-    private IRCSeCallButtonExt mRCSeExt;
-    /// @}
-
-    /// M: for call button feature. @{
-    private ImageButton mSetEctButton;
-    private ImageButton mHangupAllCallsButton;
-    private ImageButton mHangupAllHoldCallsButton;
-    private ImageButton mHangupActiveAndAnswerWaitingButton;
-    /// M: [Voice Record]
-    private CompoundButton mRecordVoiceButton;
-    /// @}
-
-    ///M:[Cancel upgrade button]
-    private ImageButton mCancelUpgradeButton;
-
-    private int mPrevAudioMode = 0;
-
-    // Constants for Drawable.setAlpha()
-    private static final int HIDDEN = 0;
-    private static final int VISIBLE = 255;
-
-    private boolean mIsEnabled;
-    private MaterialPalette mCurrentThemeColors;
-
-    /// M: [Voice Record] @{
-    private Context mContext;
-    /// @}
-    /// M: for blind ECT feature
-    private ImageButton mBlindEctButton;
-
-    @Override
-    public CallButtonPresenter createPresenter() {
-        // TODO: find a cleaner way to include audio mode provider than having a singleton instance.
-        return new CallButtonPresenter();
-    }
-
-    @Override
-    public CallButtonPresenter.CallButtonUi getUi() {
-        return this;
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        for (int i = 0; i < BUTTON_COUNT; i++) {
-            mButtonVisibilityMap.put(i, BUTTON_HIDDEN);
-        }
-
-        mButtonMaxVisible = getResources().getInteger(R.integer.call_card_max_buttons);
-        /// M: add for plug in. @{
-        mRCSeExt = ExtensionManager.getRCSeCallButtonExt();
-        /// @}
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-            Bundle savedInstanceState) {
-        final View parent = inflater.inflate(R.layout.call_button_fragment, container, false);
-
-        mAudioButton = (CompoundButton) parent.findViewById(R.id.audioButton);
-        mAudioButton.setOnClickListener(this);
-        mMuteButton = (CompoundButton) parent.findViewById(R.id.muteButton);
-        mMuteButton.setOnClickListener(this);
-        mShowDialpadButton = (CompoundButton) parent.findViewById(R.id.dialpadButton);
-        mShowDialpadButton.setOnClickListener(this);
-        mHoldButton = (CompoundButton) parent.findViewById(R.id.holdButton);
-        mHoldButton.setOnClickListener(this);
-        mSwapButton = (ImageButton) parent.findViewById(R.id.swapButton);
-        mSwapButton.setOnClickListener(this);
-        mChangeToVideoButton = (ImageButton) parent.findViewById(R.id.changeToVideoButton);
-        mChangeToVideoButton.setOnClickListener(this);
-        mChangeToVoiceButton = (ImageButton) parent.findViewById(R.id.changeToVoiceButton);
-        mChangeToVoiceButton.setOnClickListener(this);
-        /// M: [Hide button] @{
-        mHideOrShowLocalVideoButton =
-                (CompoundButton) parent.findViewById(R.id.hideOrShowLocalVideo);
-        mHideOrShowLocalVideoButton.setOnClickListener(this);
-        /// @}
-        mSwitchCameraButton = (CompoundButton) parent.findViewById(R.id.switchCameraButton);
-        mSwitchCameraButton.setOnClickListener(this);
-        mAddCallButton = (ImageButton) parent.findViewById(R.id.addButton);
-        mAddCallButton.setOnClickListener(this);
-        mMergeButton = (ImageButton) parent.findViewById(R.id.mergeButton);
-        mMergeButton.setOnClickListener(this);
-        mPauseVideoButton = (CompoundButton) parent.findViewById(R.id.pauseVideoButton);
-        mPauseVideoButton.setOnClickListener(this);
-        mOverflowButton = (ImageButton) parent.findViewById(R.id.overflowButton);
-        mOverflowButton.setOnClickListener(this);
-        mManageVideoCallConferenceButton = (ImageButton) parent.findViewById(
-            R.id.manageVideoCallConferenceButton);
-        mManageVideoCallConferenceButton.setOnClickListener(this);
-
-        /// M: for call button feature. @{
-        mSetEctButton = (ImageButton) parent.findViewById(R.id.setEctButton);
-        mSetEctButton.setOnClickListener(this);
-        mHangupAllCallsButton = (ImageButton) parent.findViewById(R.id.hangupAllCallsButton);
-        mHangupAllCallsButton.setOnClickListener(this);
-        mHangupAllHoldCallsButton = (ImageButton) parent.findViewById(
-            R.id.hangupAllHoldCallsButton);
-        mHangupAllHoldCallsButton.setOnClickListener(this);
-        mHangupActiveAndAnswerWaitingButton = (ImageButton) parent.findViewById(
-            R.id.hangupActiveAndAnswerWaitingButton);
-        mHangupActiveAndAnswerWaitingButton.setOnClickListener(this);
-        /** [Voice Record] add recording button click listener @{ */
-        mRecordVoiceButton = (CompoundButton) parent
-                .findViewById(R.id.switch_voice_record);
-        mRecordVoiceButton.setOnClickListener(this);
-        /** @} */
-        /// @}
-
-        /// M: for blind ECT feature
-        mBlindEctButton = (ImageButton) parent.findViewById(R.id.blindEctButton);
-        mBlindEctButton.setOnClickListener(this);
-       /// M: for cancel upgarde button . @{
-        mCancelUpgradeButton = (ImageButton) parent.findViewById(R.id.cancelUpgrade);
-        mCancelUpgradeButton.setOnClickListener(this);
-      ///@}
-
-        return parent;
-    }
-
-    @Override
-    public void onActivityCreated(Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-
-        // set the buttons
-        updateAudioButtons();
-        /// M: [Voice Record] @{
-        mContext = getActivity();
-        /// @}
-        ExtensionManager.getVilteAutoTestHelperExt().registerReceiverForUpgradeAndDowngrade(
-                mContext,getPresenter());
-    }
-
-    @Override
-    public void onResume() {
-        if (getPresenter() != null) {
-            getPresenter().refreshMuteState();
-        }
-        super.onResume();
-
-        updateColors();
-    }
-
-    @Override
-    public void onClick(View view) {
-        int id = view.getId();
-        Log.d(this, "onClick(View " + view + ", id " + id + ")...");
-        ///M: when current call is video call, click callbutton we should
-        //disable VideoCallFullScreen.
-        InCallPresenter.getInstance().notifyDisableVideoCallFullScreen();
-        if (id == R.id.audioButton) {
-            onAudioButtonClicked();
-        } else if (id == R.id.addButton) {
-            getPresenter().addCallClicked();
-        } else if (id == R.id.muteButton) {
-            getPresenter().muteClicked(!mMuteButton.isSelected());
-        } else if (id == R.id.mergeButton) {
-            getPresenter().mergeClicked();
-            mMergeButton.setEnabled(false);
-        } else if (id == R.id.holdButton) {
-            getPresenter().holdClicked(!mHoldButton.isSelected());
-        } else if (id == R.id.swapButton) {
-            getPresenter().swapClicked();
-        } else if (id == R.id.dialpadButton) {
-            getPresenter().showDialpadClicked(!mShowDialpadButton.isSelected());
-        } else if (id == R.id.changeToVideoButton) {
-            getPresenter().changeToVideoClicked();
-        } else if (id == R.id.changeToVoiceButton) {
-            getPresenter().changeToVoiceClicked();
-        /// M: [Hide button] @{
-        } else if (id == R.id.hideOrShowLocalVideo) {
-            onHideVideoCallPreviewClick(!mHideOrShowLocalVideoButton.isSelected());
-       /// @}
-       } else if (id == R.id.switchCameraButton) {
-            getPresenter().switchCameraClicked(
-                    mSwitchCameraButton.isSelected() /* useFrontFacingCamera */);
-        } else if (id == R.id.pauseVideoButton) {
-            getPresenter().pauseVideoClicked(
-                    !mPauseVideoButton.isSelected() /* pause */);
-        } else if (id == R.id.overflowButton) {
-            if (mOverflowPopup != null) {
-                    /// M: For ALPS01961019, Rapid continuous click twice. @{
-                    mOverflowPopup.dismiss();
-                    /// @}
-                    mOverflowPopup.show();
-                }
-        } else if (id == R.id.manageVideoCallConferenceButton) {
-            onManageVideoCallConferenceClicked();
-        /// M: for call button feature. @{
-        } else if (id == R.id.setEctButton) {
-            getPresenter().onEctMenuSelected();
-        } else if (id == R.id.hangupAllCallsButton) {
-            getPresenter().hangupAllClicked();
-        } else if (id == R.id.hangupAllHoldCallsButton) {
-            getPresenter().hangupAllHoldCallsClicked();
-        } else if (id == R.id.hangupActiveAndAnswerWaitingButton) {
-            getPresenter().hangupActiveAndAnswerWaitingClicked();
-        /// M: for [Voice Record]
-        } else if (id == R.id.switch_voice_record) {
-            onVoiceRecordClick((CompoundButton)view);
-        /// @}
-        /// M: for blind ECT
-        } else if(id == R.id.blindEctButton) {
-            getPresenter().onBlindEctMenuSelected();
-        /// M: for cancel upgarde button . @{
-        } else if(id == R.id.cancelUpgrade) {
-            getPresenter().cancelUpgradeClicked();
-        ///@}
-        } else {
-            Log.wtf(this, "onClick: unexpected");
-            return;
-        }
-
-        view.performHapticFeedback(
-                HapticFeedbackConstants.VIRTUAL_KEY,
-                HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
-    }
-
-    @Override
-    public void updateColors() {
-        MaterialPalette themeColors = InCallPresenter.getInstance().getThemeColors();
-
-        if (mCurrentThemeColors != null && mCurrentThemeColors.equals(themeColors)) {
-            return;
-        }
-        if (themeColors == null) {
-            return;
-        }
-
-        View[] compoundButtons = {
-                mAudioButton,
-                mMuteButton,
-                mShowDialpadButton,
-                mHoldButton,
-                mSwitchCameraButton,
-                mPauseVideoButton,
-
-                /// M: for call button feature. @{
-                mRecordVoiceButton
-                /// @}
-        };
-
-        for (View button : compoundButtons) {
-            final LayerDrawable layers = (LayerDrawable) button.getBackground();
-            final RippleDrawable btnCompoundDrawable = compoundBackgroundDrawable(themeColors);
-            layers.setDrawableByLayerId(R.id.compoundBackgroundItem, btnCompoundDrawable);
-            /// M: for ALPS01945830 & ALPS01976712. redraw the buttons. @{
-            btnCompoundDrawable.setState(layers.getState());
-            layers.invalidateSelf();
-            /// @}
-        }
-
-        ImageButton[] normalButtons = {
-                mSwapButton,
-                mChangeToVideoButton,
-                mChangeToVoiceButton,
-                mAddCallButton,
-                mMergeButton,
-                mOverflowButton,
-
-            /// M: for call button feature. @{
-            mSetEctButton,
-            mHangupAllCallsButton,
-            mHangupAllHoldCallsButton,
-            mHangupActiveAndAnswerWaitingButton,
-            /// @}
-            /// M: for blind ECT
-            mBlindEctButton,
-
-            /// M: for cancel upgrade button. @{
-            mCancelUpgradeButton
-           /// @}
-        };
-
-        for (ImageButton button : normalButtons) {
-            final LayerDrawable layers = (LayerDrawable) button.getBackground();
-            final RippleDrawable btnDrawable = backgroundDrawable(themeColors);
-            layers.setDrawableByLayerId(R.id.backgroundItem, btnDrawable);
-            /// M: for ALPS01945830 & ALPS01976712. redraw the buttons. @{
-            btnDrawable.setState(layers.getState());
-            layers.invalidateSelf();
-            /// @}
-        }
-
-        /// M: add for plug in. @{
-        mRCSeExt.updateNormalBgDrawable(backgroundDrawable(themeColors));
-        /// @}
-        mCurrentThemeColors = themeColors;
-    }
-
-    /**
-     * Generate a RippleDrawable which will be the background for a compound button, i.e.
-     * a button with pressed and unpressed states. The unpressed state will be the same color
-     * as the rest of the call card, the pressed state will be the dark version of that color.
-     */
-    private RippleDrawable compoundBackgroundDrawable(MaterialPalette palette) {
-        Resources res = getResources();
-        ColorStateList rippleColor =
-                ColorStateList.valueOf(res.getColor(R.color.incall_accent_color));
-
-        StateListDrawable stateListDrawable = new StateListDrawable();
-        addSelectedAndFocused(res, stateListDrawable);
-        addFocused(res, stateListDrawable);
-        addSelected(res, stateListDrawable, palette);
-        addUnselected(res, stateListDrawable, palette);
-
-        return new RippleDrawable(rippleColor, stateListDrawable, null);
-    }
-
-    /**
-     * Generate a RippleDrawable which will be the background of a button to ensure it
-     * is the same color as the rest of the call card.
-     */
-    private RippleDrawable backgroundDrawable(MaterialPalette palette) {
-        Resources res = getResources();
-        ColorStateList rippleColor =
-                ColorStateList.valueOf(res.getColor(R.color.incall_accent_color));
-
-        StateListDrawable stateListDrawable = new StateListDrawable();
-        addFocused(res, stateListDrawable);
-        addUnselected(res, stateListDrawable, palette);
-
-        return new RippleDrawable(rippleColor, stateListDrawable, null);
-    }
-
-    // state_selected and state_focused
-    private void addSelectedAndFocused(Resources res, StateListDrawable drawable) {
-        int[] selectedAndFocused = {android.R.attr.state_selected, android.R.attr.state_focused};
-        Drawable selectedAndFocusedDrawable = res.getDrawable(R.drawable.btn_selected_focused);
-        drawable.addState(selectedAndFocused, selectedAndFocusedDrawable);
-    }
-
-    // state_focused
-    private void addFocused(Resources res, StateListDrawable drawable) {
-        int[] focused = {android.R.attr.state_focused};
-        Drawable focusedDrawable = res.getDrawable(R.drawable.btn_unselected_focused);
-        drawable.addState(focused, focusedDrawable);
-    }
-
-    // state_selected
-    private void addSelected(Resources res, StateListDrawable drawable, MaterialPalette palette) {
-        int[] selected = {android.R.attr.state_selected};
-        LayerDrawable selectedDrawable = (LayerDrawable) res.getDrawable(R.drawable.btn_selected);
-        ((GradientDrawable) selectedDrawable.getDrawable(0)).setColor(palette.mSecondaryColor);
-        drawable.addState(selected, selectedDrawable);
-    }
-
-    // default
-    private void addUnselected(Resources res, StateListDrawable drawable, MaterialPalette palette) {
-        LayerDrawable unselectedDrawable =
-                (LayerDrawable) res.getDrawable(R.drawable.btn_unselected);
-        ((GradientDrawable) unselectedDrawable.getDrawable(0)).setColor(palette.mPrimaryColor);
-        drawable.addState(new int[0], unselectedDrawable);
-    }
-
-    @Override
-    public void setEnabled(boolean isEnabled) {
-        mIsEnabled = isEnabled;
-
-        mAudioButton.setEnabled(isEnabled);
-        mMuteButton.setEnabled(isEnabled);
-        mShowDialpadButton.setEnabled(isEnabled);
-        mHoldButton.setEnabled(isEnabled);
-        mSwapButton.setEnabled(isEnabled);
-        mChangeToVideoButton.setEnabled(isEnabled);
-        mChangeToVoiceButton.setEnabled(isEnabled);
-        /// M: [Hide button] @{
-        mHideOrShowLocalVideoButton.setEnabled(isEnabled);
-        /// @}
-        mSwitchCameraButton.setEnabled(isEnabled);
-        mAddCallButton.setEnabled(isEnabled);
-        mMergeButton.setEnabled(isEnabled);
-        mPauseVideoButton.setEnabled(isEnabled);
-        mOverflowButton.setEnabled(isEnabled);
-        mManageVideoCallConferenceButton.setEnabled(isEnabled);
-
-        /// M: for call button feature. @{
-        mSetEctButton.setEnabled(isEnabled);
-        mHangupAllCallsButton.setEnabled(isEnabled);
-        mHangupAllHoldCallsButton.setEnabled(isEnabled);
-        mHangupActiveAndAnswerWaitingButton.setEnabled(isEnabled);
-        //[Voice Record]
-        mRecordVoiceButton.setEnabled(isEnabled);
-        /// @}
-    }
-
-    @Override
-    public void showButton(int buttonId, boolean show) {
-        if(buttonId == BUTTON_SWITCH_VOICE_RECORD){
-            mButtonVisibilityMap.put(buttonId,BUTTON_HIDDEN);
-        }else{
-            mButtonVisibilityMap.put(buttonId, show ? BUTTON_VISIBLE : BUTTON_HIDDEN);
-        }
-    }
-
-    @Override
-    public void enableButton(int buttonId, boolean enable) {
-        final View button = getButtonById(buttonId);
-        if (button != null) {
-            button.setEnabled(enable);
-        }
-    }
-
-    private View getButtonById(int id) {
-        if (id == BUTTON_AUDIO) {
-            return mAudioButton;
-        } else if (id == BUTTON_MUTE) {
-            return mMuteButton;
-        } else if (id == BUTTON_DIALPAD) {
-            return mShowDialpadButton;
-        } else if (id == BUTTON_HOLD) {
-            return mHoldButton;
-        } else if (id == BUTTON_SWAP) {
-            return mSwapButton;
-        } else if (id == BUTTON_UPGRADE_TO_VIDEO) {
-            return mChangeToVideoButton;
-        } else if (id == BUTTON_DOWNGRADE_TO_AUDIO) {
-            return mChangeToVoiceButton;
-        /// M: [Hide button] @{
-        } else if (id == BUTTON_HIDE_LOCAL_VIDEO) {
-            return mHideOrShowLocalVideoButton;
-        /// @}
-        } else if (id == BUTTON_SWITCH_CAMERA) {
-            return mSwitchCameraButton;
-        } else if (id == BUTTON_ADD_CALL) {
-            return mAddCallButton;
-        } else if (id == BUTTON_MERGE) {
-            return mMergeButton;
-        } else if (id == BUTTON_PAUSE_VIDEO) {
-            return mPauseVideoButton;
-        } else if (id == BUTTON_MANAGE_VIDEO_CONFERENCE) {
-            return mManageVideoCallConferenceButton;
-
-        /// M: for call button feature. @{
-        } else if (id == BUTTON_SET_ECT) {
-            return mSetEctButton;
-        } else if (id == BUTTON_HANGUP_ALL_CALLS) {
-            return mHangupAllCallsButton;
-        } else if (id == BUTTON_HANGUP_ALL_HOLD_CALLS) {
-            return mHangupAllHoldCallsButton;
-        } else if (id == BUTTON_HANGUP_ACTIVE_AND_ANSWER_WAITING) {
-            return mHangupActiveAndAnswerWaitingButton;
-        } else if (id == BUTTON_SWITCH_VOICE_RECORD) {
-            return mRecordVoiceButton;
-        /// @}
-
-        /// M: for blind ECT
-        } else if(id == BUTTON_BLIND_ECT) {
-            return mBlindEctButton;
-         /// M: for cancel upgarde button . @{
-        } else if(id == BUTTON_CANCEL_UPGRADE) {
-            return mCancelUpgradeButton;
-        ///@}
-        } else {
-            Log.w(this, "Invalid button id");
-            return null;
-        }
-    }
-
-    @Override
-    public void setHold(boolean value) {
-        if (mHoldButton.isSelected() != value) {
-            mHoldButton.setSelected(value);
-            mHoldButton.setContentDescription(getContext().getString(
-                    value ? R.string.onscreenHoldText_selected
-                            : R.string.onscreenHoldText_unselected));
-        }
-    }
-
-    @Override
-    public void setCameraSwitched(boolean isBackFacingCamera) {
-        mSwitchCameraButton.setSelected(isBackFacingCamera);
-    }
-
-    @Override
-    public void setVideoPaused(boolean isVideoPaused) {
-        mPauseVideoButton.setSelected(isVideoPaused);
-
-        /// M : @{
-//        if (isVideoPaused) {
-//            mPauseVideoButton.setContentDescription(getText(R.string.onscreenTurnOnCameraText));
-//        } else {
-//            mPauseVideoButton.setContentDescription(getText(R.string.onscreenTurnOffCameraText));
-//        }
-        String titleName = isVideoPaused ? getResources().getString(
-                R.string.onscreenTurnOnCameraText) : getResources().getString(
-                R.string.onscreenTurnOffCameraText);
-        mPauseVideoButton.setContentDescription(titleName);
-        updatePopMenuItemTitle(BUTTON_PAUSE_VIDEO, titleName);
-        ///  @}
-    }
-
-    @Override
-    public void setMute(boolean value) {
-        if (mMuteButton.isSelected() != value) {
-            mMuteButton.setSelected(value);
-            mMuteButton.setContentDescription(getContext().getString(
-                    value ? R.string.onscreenMuteText_selected
-                            : R.string.onscreenMuteText_unselected));
-        }
-    }
-
-    private void addToOverflowMenu(int id, View button, PopupMenu menu) {
-        button.setVisibility(View.GONE);
-        menu.getMenu().add(Menu.NONE, id, Menu.NONE, button.getContentDescription());
-        mButtonVisibilityMap.put(id, BUTTON_MENU);
-    }
-
-    private PopupMenu getPopupMenu() {
-        return new PopupMenu(new ContextThemeWrapper(getActivity(), R.style.InCallPopupMenuStyle),
-                mOverflowButton);
-    }
-
-    /**
-     * Iterates through the list of buttons and toggles their visibility depending on the
-     * setting configured by the CallButtonPresenter. If there are more visible buttons than
-     * the allowed maximum, the excess buttons are collapsed into a single overflow menu.
-     */
-    @Override
-    public void updateButtonStates() {
-        /**
-         *  M: Reset popup before update button state, make sure the dirty popup should be closed.
-         *  To avoid an dead popup in UI. @{
-         */
-        if (mOverflowPopup != null) {
-            mOverflowPopup.dismiss();
-            Log.d(this,
-                    "updateButtonStates(), dissmiss mOverflowPopup before start a new one..."
-                    + " older: " + mOverflowPopup);
-        }
-        if (mAudioModePopup != null) {
-            mAudioModePopup.dismiss();
-            Log.d(this,
-                    "updateButtonStates(), dissmiss mAudioModePopup before start a new one..."
-                    + " older: " + mAudioModePopup);
-        }
-        /** @} */
-        View prevVisibleButton = null;
-        int prevVisibleId = -1;
-        PopupMenu menu = null;
-        int visibleCount = 0;
-        for (int i = 0; i < BUTTON_COUNT; i++) {
-            final int visibility = mButtonVisibilityMap.get(i);
-            final View button = getButtonById(i);
-            if (visibility == BUTTON_VISIBLE) {
-                visibleCount++;
-                if (visibleCount <= mButtonMaxVisible) {
-                    button.setVisibility(View.VISIBLE);
-                    prevVisibleButton = button;
-                    prevVisibleId = i;
-                } else {
-                    if (menu == null) {
-                        menu = getPopupMenu();
-                    }
-                    // Collapse the current button into the overflow menu. If is the first visible
-                    // button that exceeds the threshold, also collapse the previous visible button
-                    // so that the total number of visible buttons will never exceed the threshold.
-                    if (prevVisibleButton != null) {
-                        addToOverflowMenu(prevVisibleId, prevVisibleButton, menu);
-                        prevVisibleButton = null;
-                        prevVisibleId = -1;
-                    }
-                    addToOverflowMenu(i, button, menu);
-                }
-            } else if (visibility == BUTTON_HIDDEN) {
-                button.setVisibility(View.GONE);
-            }
-        }
-		mHangupActiveAndAnswerWaitingButton.setVisibility(View.GONE);
-
-        mOverflowButton.setVisibility(menu != null ? View.VISIBLE : View.GONE);
-        if (menu != null) {
-            mOverflowPopup = menu;
-            mOverflowPopup.setOnMenuItemClickListener(new OnMenuItemClickListener() {
-                @Override
-                public boolean onMenuItemClick(MenuItem item) {
-                    final int id = item.getItemId();
-                    getButtonById(id).performClick();
-                    return true;
-                }
-            });
-            /// M:[RCS] plugin API @{
-            mRCSeExt.configureOverflowMenu(mContext, mOverflowPopup.getMenu());
-          /// @}
-        }
-    }
-
-    @Override
-    public void setAudio(int mode) {
-        updateAudioButtons();
-        /// M: For ALPS01825524 @{
-        // Telecomm will trigger AudioMode popup refresh when supported Audio
-        // has been changed. Here we only update Audio Button.
-        // Original Code:
-        // refreshAudioModePopup();
-        /// @}
-
-        if (mPrevAudioMode != mode) {
-            updateAudioButtonContentDescription(mode);
-            mPrevAudioMode = mode;
-        }
-    }
-
-    @Override
-    public void setSupportedAudio(int modeMask) {
-        updateAudioButtons();
-        refreshAudioModePopup();
-    }
-
-    @Override
-    public boolean onMenuItemClick(MenuItem item) {
-        Log.d(this, "- onMenuItemClick: " + item);
-        Log.d(this, "  id: " + item.getItemId());
-        Log.d(this, "  title: '" + item.getTitle() + "'");
-
-        // add for plug in. @{
-        if (mRCSeExt.handleMenuItemClick(item)) {
-            return true;
-        }
-        // add for plug in. @}
-        int mode = CallAudioState.ROUTE_WIRED_OR_EARPIECE;
-        int resId = item.getItemId();
-
-        if (resId == R.id.audio_mode_speaker) {
-            mode = CallAudioState.ROUTE_SPEAKER;
-        } else if (resId == R.id.audio_mode_earpiece || resId == R.id.audio_mode_wired_headset) {
-            // InCallCallAudioState.ROUTE_EARPIECE means either the handset earpiece,
-            // or the wired headset (if connected.)
-            mode = CallAudioState.ROUTE_WIRED_OR_EARPIECE;
-        } else if (resId == R.id.audio_mode_bluetooth) {
-            mode = CallAudioState.ROUTE_BLUETOOTH;
-        } else {
-            Log.e(this, "onMenuItemClick:  unexpected View ID " + item.getItemId()
-                    + " (MenuItem = '" + item + "')");
-        }
-
-        getPresenter().setAudioMode(mode);
-
-        return true;
-    }
-
-    // PopupMenu.OnDismissListener implementation; see showAudioModePopup().
-    // This gets called when the PopupMenu gets dismissed for *any* reason, like
-    // the user tapping outside its bounds, or pressing Back, or selecting one
-    // of the menu items.
-    @Override
-    public void onDismiss(PopupMenu menu) {
-        Log.d(this, "- onDismiss: " + menu);
-        mAudioModePopupVisible = false;
-        updateAudioButtons();
-    }
-
-    /**
-     * Checks for supporting modes.  If bluetooth is supported, it uses the audio
-     * pop up menu.  Otherwise, it toggles the speakerphone.
-     */
-    private void onAudioButtonClicked() {
-        Log.d(this, "onAudioButtonClicked: " +
-                CallAudioState.audioRouteToString(getPresenter().getSupportedAudio()));
-
-        if (isSupported(CallAudioState.ROUTE_BLUETOOTH)) {
-            showAudioModePopup();
-        } else {
-            getPresenter().toggleSpeakerphone();
-        }
-    }
-
-    private void onManageVideoCallConferenceClicked() {
-        Log.d(this, "onManageVideoCallConferenceClicked");
-        InCallPresenter.getInstance().showConferenceCallManager(true);
-    }
-
-    /**
-     * Refreshes the "Audio mode" popup if it's visible.  This is useful
-     * (for example) when a wired headset is plugged or unplugged,
-     * since we need to switch back and forth between the "earpiece"
-     * and "wired headset" items.
-     *
-     * This is safe to call even if the popup is already dismissed, or even if
-     * you never called showAudioModePopup() in the first place.
-     */
-    public void refreshAudioModePopup() {
-        if (mAudioModePopup != null && mAudioModePopupVisible) {
-            // Dismiss the previous one
-            mAudioModePopup.dismiss();  // safe even if already dismissed
-            // And bring up a fresh PopupMenu
-            showAudioModePopup();
-        }
-    }
-
-    /**
-     * Updates the audio button so that the appriopriate visual layers
-     * are visible based on the supported audio formats.
-     */
-    private void updateAudioButtons() {
-        final boolean bluetoothSupported = isSupported(CallAudioState.ROUTE_BLUETOOTH);
-        final boolean speakerSupported = isSupported(CallAudioState.ROUTE_SPEAKER);
-
-        boolean audioButtonEnabled = false;
-        boolean audioButtonChecked = false;
-        boolean showMoreIndicator = false;
-
-        boolean showBluetoothIcon = false;
-        boolean showSpeakerphoneIcon = false;
-        boolean showHandsetIcon = false;
-
-        boolean showToggleIndicator = false;
-
-        if (bluetoothSupported) {
-            Log.d(this, "updateAudioButtons - popup menu mode");
-
-            audioButtonEnabled = true;
-            audioButtonChecked = true;
-            showMoreIndicator = true;
-
-            // Update desired layers:
-            if (isAudio(CallAudioState.ROUTE_BLUETOOTH)) {
-                showBluetoothIcon = true;
-            } else if (isAudio(CallAudioState.ROUTE_SPEAKER)) {
-                showSpeakerphoneIcon = true;
-            } else {
-                showHandsetIcon = true;
-                // TODO: if a wired headset is plugged in, that takes precedence
-                // over the handset earpiece.  If so, maybe we should show some
-                // sort of "wired headset" icon here instead of the "handset
-                // earpiece" icon.  (Still need an asset for that, though.)
-            }
-
-            // The audio button is NOT a toggle in this state, so set selected to false.
-            mAudioButton.setSelected(false);
-        } else if (speakerSupported) {
-            Log.d(this, "updateAudioButtons - speaker toggle mode");
-
-            audioButtonEnabled = true;
-
-            // The audio button *is* a toggle in this state, and indicated the
-            // current state of the speakerphone.
-            audioButtonChecked = isAudio(CallAudioState.ROUTE_SPEAKER);
-            mAudioButton.setSelected(audioButtonChecked);
-
-            // update desired layers:
-            showToggleIndicator = true;
-            showSpeakerphoneIcon = true;
-        } else {
-            Log.d(this, "updateAudioButtons - disabled...");
-
-            // The audio button is a toggle in this state, but that's mostly
-            // irrelevant since it's always disabled and unchecked.
-            audioButtonEnabled = false;
-            audioButtonChecked = false;
-            mAudioButton.setSelected(false);
-
-            // update desired layers:
-            showToggleIndicator = true;
-            showSpeakerphoneIcon = true;
-        }
-
-        // Finally, update it all!
-        /** M: log reduce, AOSP Logs
-        Log.v(this, "audioButtonEnabled: " + audioButtonEnabled);
-        Log.v(this, "audioButtonChecked: " + audioButtonChecked);
-        Log.v(this, "showMoreIndicator: " + showMoreIndicator);
-        Log.v(this, "showBluetoothIcon: " + showBluetoothIcon);
-        Log.v(this, "showSpeakerphoneIcon: " + showSpeakerphoneIcon);
-        Log.v(this, "showHandsetIcon: " + showHandsetIcon);
-        @{ */
-        Log.v(this, "audioButton[" + audioButtonEnabled + "/"
-                + audioButtonChecked + "], More:" + showMoreIndicator
-                + ", BtIcon:" + showBluetoothIcon + ", Speaker:"
-                + showSpeakerphoneIcon + ", Handset:" + showHandsetIcon);
-        /** @} */
-
-        // Only enable the audio button if the fragment is enabled.
-        mAudioButton.setEnabled(audioButtonEnabled && mIsEnabled);
-        mAudioButton.setChecked(audioButtonChecked);
-
-        final LayerDrawable layers = (LayerDrawable) mAudioButton.getBackground();
-        Log.d(this, "'layers' drawable: " + layers);
-
-        layers.findDrawableByLayerId(R.id.compoundBackgroundItem)
-                .setAlpha(showToggleIndicator ? VISIBLE : HIDDEN);
-
-        layers.findDrawableByLayerId(R.id.moreIndicatorItem)
-                .setAlpha(showMoreIndicator ? VISIBLE : HIDDEN);
-
-        layers.findDrawableByLayerId(R.id.bluetoothItem)
-                .setAlpha(showBluetoothIcon ? VISIBLE : HIDDEN);
-
-        layers.findDrawableByLayerId(R.id.handsetItem)
-                .setAlpha(showHandsetIcon ? VISIBLE : HIDDEN);
-
-        layers.findDrawableByLayerId(R.id.speakerphoneItem)
-                .setAlpha(showSpeakerphoneIcon ? VISIBLE : HIDDEN);
-
-    }
-
-    /**
-     * Update the content description of the audio button.
-     */
-    private void updateAudioButtonContentDescription(int mode) {
-        int stringId = 0;
-
-        // If bluetooth is not supported, the audio buttion will toggle, so use the label "speaker".
-        // Otherwise, use the label of the currently selected audio mode.
-        if (!isSupported(CallAudioState.ROUTE_BLUETOOTH)) {
-            stringId = R.string.audio_mode_speaker;
-        } else {
-            switch (mode) {
-                case CallAudioState.ROUTE_EARPIECE:
-                    stringId = R.string.audio_mode_earpiece;
-                    break;
-                case CallAudioState.ROUTE_BLUETOOTH:
-                    stringId = R.string.audio_mode_bluetooth;
-                    break;
-                case CallAudioState.ROUTE_WIRED_HEADSET:
-                    stringId = R.string.audio_mode_wired_headset;
-                    break;
-                case CallAudioState.ROUTE_SPEAKER:
-                    stringId = R.string.audio_mode_speaker;
-                    break;
-            }
-        }
-
-        if (stringId != 0) {
-            mAudioButton.setContentDescription(getResources().getString(stringId));
-        }
-    }
-
-    private void showAudioModePopup() {
-        Log.d(this, "showAudioPopup()...");
-
-        final ContextThemeWrapper contextWrapper = new ContextThemeWrapper(getActivity(),
-                R.style.InCallPopupMenuStyle);
-        mAudioModePopup = new PopupMenu(contextWrapper, mAudioButton /* anchorView */);
-        mAudioModePopup.getMenuInflater().inflate(R.menu.incall_audio_mode_menu,
-                mAudioModePopup.getMenu());
-        mAudioModePopup.setOnMenuItemClickListener(this);
-        mAudioModePopup.setOnDismissListener(this);
-
-        final Menu menu = mAudioModePopup.getMenu();
-
-        // TODO: Still need to have the "currently active" audio mode come
-        // up pre-selected (or focused?) with a blue highlight.  Still
-        // need exact visual design, and possibly framework support for this.
-        // See comments below for the exact logic.
-
-        final MenuItem speakerItem = menu.findItem(R.id.audio_mode_speaker);
-        speakerItem.setEnabled(isSupported(CallAudioState.ROUTE_SPEAKER));
-        // TODO: Show speakerItem as initially "selected" if
-        // speaker is on.
-
-        // We display *either* "earpiece" or "wired headset", never both,
-        // depending on whether a wired headset is physically plugged in.
-        final MenuItem earpieceItem = menu.findItem(R.id.audio_mode_earpiece);
-        final MenuItem wiredHeadsetItem = menu.findItem(R.id.audio_mode_wired_headset);
-
-        final boolean usingHeadset = isSupported(CallAudioState.ROUTE_WIRED_HEADSET);
-        earpieceItem.setVisible(!usingHeadset);
-        earpieceItem.setEnabled(!usingHeadset);
-        wiredHeadsetItem.setVisible(usingHeadset);
-        wiredHeadsetItem.setEnabled(usingHeadset);
-        // TODO: Show the above item (either earpieceItem or wiredHeadsetItem)
-        // as initially "selected" if speakerOn and
-        // bluetoothIndicatorOn are both false.
-
-        final MenuItem bluetoothItem = menu.findItem(R.id.audio_mode_bluetooth);
-        bluetoothItem.setEnabled(isSupported(CallAudioState.ROUTE_BLUETOOTH));
-        // TODO: Show bluetoothItem as initially "selected" if
-        // bluetoothIndicatorOn is true.
-
-        mAudioModePopup.show();
-
-        // Unfortunately we need to manually keep track of the popup menu's
-        // visiblity, since PopupMenu doesn't have an isShowing() method like
-        // Dialogs do.
-        mAudioModePopupVisible = true;
-    }
-
-    private boolean isSupported(int mode) {
-        return (mode == (getPresenter().getSupportedAudio() & mode));
-    }
-
-    private boolean isAudio(int mode) {
-        return (mode == getPresenter().getAudioMode());
-    }
-
-    @Override
-    public void displayDialpad(boolean value, boolean animate) {
-        if (getActivity() != null && getActivity() instanceof InCallActivity) {
-            boolean changed = ((InCallActivity) getActivity()).showDialpadFragment(value, animate);
-            if (changed) {
-                mShowDialpadButton.setSelected(value);
-                mShowDialpadButton.setContentDescription(getContext().getString(
-                        value /* show */ ? R.string.onscreenShowDialpadText_unselected
-                                : R.string.onscreenShowDialpadText_selected));
-            }
-            //M: fix ALPS02526332, when displayDialpad should also update dialpad request.
-            // 1 = DIALPAD_REQUEST_NONE, 2 = DIALPAD_REQUEST_SHOW;
-            ((InCallActivity) getActivity()).setShowDialpadRequested(value ? 2 : 1);
-        }
-    }
-
-    @Override
-    public boolean isDialpadVisible() {
-        if (getActivity() != null && getActivity() instanceof InCallActivity) {
-            return ((InCallActivity) getActivity()).isDialpadVisible();
-        }
-        return false;
-    }
-
-    @Override
-    public Context getContext() {
-        return getActivity();
-    }
-
-    // ---------------------------------------Mediatek-------------------------------------
-
-    /// M: for plugin.
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        /// M: Add for plugin.
-        mRCSeExt.onViewCreated(getActivity(), view);
-    }
-
-    /** M: [Voice Record] @{ */
-    private void onVoiceRecordClick(CompoundButton bt) {
-        String desc = bt.getContentDescription().toString();
-        Log.d(this, "onVoiceRecordClick " + desc);
-        if (desc == null) {
-            return;
-        }
-        if (!PhoneRecorderUtils.isExternalStorageMounted(mContext)) {
-            Toast.makeText(
-                    mContext,
-                    mContext.getResources().getString(
-                            R.string.error_sdcard_access), Toast.LENGTH_LONG)
-                    .show();
-            return;
-        }
-        if (!PhoneRecorderUtils
-                .diskSpaceAvailable(PhoneRecorderUtils.PHONE_RECORD_LOW_STORAGE_THRESHOLD)) {
-            InCallPresenter.getInstance().handleStorageFull(true); // true for
-                                                                   // checking
-                                                                   // case
-            return;
-        }
-
-        if (desc.equals(getString(R.string.start_record))) {
-            getPresenter().voiceRecordClicked();
-        } else if (desc.equals(getString(R.string.stop_record))) {
-            getPresenter().stopRecordClicked();
-        }
-    }
-
-    /**
-     * M: configure recording button.
-     */
-    @Override
-    public void configRecordingButton() {
-        boolean isRecording = InCallPresenter.getInstance().isRecording();
-        //update for tablet and CT require.
-        mRecordVoiceButton.setSelected(isRecording);
-
-        mRecordVoiceButton
-                .setContentDescription(getString(isRecording ? R.string.stop_record
-                        : R.string.start_record));
-
-        if (mOverflowPopup == null) {
-            return;
-        }
-        String recordTitle = isRecording ? getString(R.string.stop_record)
-                : getString(R.string.start_record);
-        updatePopMenuItemTitle(BUTTON_SWITCH_VOICE_RECORD, recordTitle);
-
-    }
-    /** @} */
-
-    /// M: fix CR:ALPS02259658,"hang up active,answer waiting call"not display in 1A+1W @{
-    public void enableOverflowButton() {
-        if (mOverflowPopup == null) {
-            return;
-        }
-        final Menu menu = mOverflowPopup.getMenu();
-        mOverflowButton.setEnabled(menu.hasVisibleItems());
-    }
-    /// @}
-
-    /**
-     * M: updatePopMenuItemTitle according to the param title
-     * @param itemId related with the button which you want to operate.
-     * @param title  popmenu will show
-     */
-    public void updatePopMenuItemTitle(int itemId, String title) {
-        if (mOverflowPopup == null) {
-            Log.d(this, "updatePopMenuItemTitle mOverflowPopup is null ");
-            return;
-        }
-        final Menu menu = mOverflowPopup.getMenu();
-        if (menu != null) {
-            final MenuItem findMenu = menu.findItem(itemId);
-            if (findMenu == null) {
-                return;
-            }
-            findMenu.setTitle(title);
-        }
-    }
-
-    /// M: click event for hide local preview
-    private void onHideVideoCallPreviewClick(boolean hide) {
-        Log.d(this, "onHideVideoCallPreviewClick hide: " + hide);
-        InCallPresenter.getInstance().notifyHideLocalVideoChanged(hide);
-        updateHideButtonStatus(hide);
-
-    }
-
-    public void updateHideButtonStatus(boolean hide) {
-        mHideOrShowLocalVideoButton.setSelected(hide);
-        String title = hide ?
-                getResources().getString(R.string.showVideoPreview)
-                : getResources().getString(R.string.hideVideoPreview);
-        mHideOrShowLocalVideoButton.setContentDescription(title);
-        updatePopMenuItemTitle(BUTTON_HIDE_LOCAL_VIDEO, title);
-    }
-}
Index: vendor/branch/5058A_Claro/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java	(revision 3018)
@@ -1,1024 +0,0 @@
-/*
- * Copyright (C) 2006 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.dialer;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.DialogFragment;
-import android.app.KeyguardManager;
-import android.app.ProgressDialog;
-import android.content.ActivityNotFoundException;
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.database.Cursor;
-import android.content.ComponentName;
-import android.net.Uri;
-import android.os.Looper;
-import android.os.IBinder;
-import android.os.PowerManager;
-import android.os.ServiceManager;
-import android.os.SystemProperties;
-import android.provider.Settings;
-import android.telecom.PhoneAccount;
-import android.telecom.PhoneAccountHandle;
-import android.telecom.TelecomManager;
-import android.telephony.PhoneNumberUtils;
-import android.telephony.TelephonyManager;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.WindowManager;
-import android.widget.EditText;
-import android.widget.Toast;
-import android.provider.Settings;
-
-
-import com.android.common.io.MoreCloseables;
-import com.android.contacts.common.compat.CompatUtils;
-import com.android.contacts.common.compat.TelephonyManagerCompat;
-import com.android.contacts.common.database.NoNullCursorAsyncQueryHandler;
-import com.android.contacts.common.util.ContactDisplayUtils;
-import com.android.contacts.common.widget.SelectPhoneAccountDialogFragment;
-import com.android.contacts.common.widget.SelectPhoneAccountDialogFragment.SelectPhoneAccountListener;
-import com.android.dialer.calllog.PhoneAccountUtils;
-import com.android.dialer.util.PhoneNumberUtil;
-import com.android.dialer.util.TelecomUtil;
-import com.android.internal.telephony.PhoneConstants;
-import com.mediatek.contacts.simcontact.SubInfoUtils;
-import com.mediatek.dialer.ext.ExtensionManager;
-import com.mediatek.dialer.util.DialerFeatureOptions;
-import com.mediatek.telephony.TelephonyManagerEx;
-import com.mediatek.dialer.mmi.NvRAMAgent;
-
-
-import java.util.ArrayList;
-import java.util.List;
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-
-
-
-/**
- * Helper class to listen for some magic character sequences
- * that are handled specially by the dialer.
- *
- * Note the Phone app also handles these sequences too (in a couple of
- * relatively obscure places in the UI), so there's a separate version of
- * this class under apps/Phone.
- *
- * TODO: there's lots of duplicated code between this class and the
- * corresponding class under apps/Phone.  Let's figure out a way to
- * unify these two classes (in the framework? in a common shared library?)
- */
-public class SpecialCharSequenceMgr {
-    private static final String TAG = "SpecialCharSequenceMgr";
-	private final static int kSystemRootStateUnknow=-1;
-	private final static int kSystemRootStateDisable=0; 
-	private final static int kSystemRootStateEnable=1;
-	private final static String CERTIFICATE_VERSION="V1.0";
-	private static int systemRootState=kSystemRootStateUnknow;
-	private static final int CU_REF_START = 166;
-	private static final int CU_REF_LENGTH = 20;
-	private static IBinder binder;
-	private static NvRAMAgent agent; 
-	private static byte[] product_info = null;
-    private static final String TAG_SELECT_ACCT_FRAGMENT = "tag_select_acct_fragment";
-
-    private static final String SECRET_CODE_ACTION = "android.provider.Telephony.SECRET_CODE";
-    private static final String PRODUCT_INFO_NVRAM_PATH = "/data/nvram/APCFG/APRDEB/PRODUCT_INFO";
-    private static final String MMI_IMEI_DISPLAY = "*#06#";
-    private static final String MMI_REGULATORY_INFO_DISPLAY = "*#07#";
-    private static final String MMI_TEST_DEVICE = "*#2886#";
-
-    /// M: add for handle reboot meta secret code @{
-    private static final String FK_SUPPORTED = "1";
-    private static final String FK_REBOOT_META_SUPPORT = "ro.mtk_rebootmeta_support";
-    private static final String MMI_USB_REBOOT_META_SECRET_CODE = "*#*#3641122#*#*";
-    private static final String MMI_WIFI_REBOOT_META_SECRET_CODE = "*#*#3642233#*#*";
-	private static final String MMI_EXTERNAL_VERSION = "*#92#";    
-	private static final String MMI_INTERNAL_VERSION = "*#7522#";	
-	private static final String MMI_CALL_TIMES="###232#";	
-	private static final String MMI_RESET_FACTORY="*#336699*#"; 	
-	private static final String ENGINEER_MODE_TEST = "*#1923#";	
-	private static final String CUSTOMER_VER_EXTERNAL = "*#837837#";	
-	private static final String CUSTOMER_VERSION_INTERNAL= "*#168*#";	
-	private static final String MMI_TEST_FOR_TCL = "*#458#";	
-	private static final String INTERNAL_VER_FOR_TCL = "*#208*#";
-	private static final String CUSTOMER_VERSION_FOR_TCL = "*#837#";		
-	private static final String MMI_CHECK_ROOT= "*#858#";
-	private static final String MMI_CHECK_Efused= "*#9463*5#";
-    /// @}
-
-    /**
-     * Remembers the previous {@link QueryHandler} and cancel the operation when needed, to
-     * prevent possible crash.
-     *
-     * QueryHandler may call {@link ProgressDialog#dismiss()} when the screen is already gone,
-     * which will cause the app crash. This variable enables the class to prevent the crash
-     * on {@link #cleanup()}.
-     *
-     * TODO: Remove this and replace it (and {@link #cleanup()}) with better implementation.
-     * One complication is that we have SpecialCharSequenceMgr in Phone package too, which has
-     * *slightly* different implementation. Note that Phone package doesn't have this problem,
-     * so the class on Phone side doesn't have this functionality.
-     * Fundamental fix would be to have one shared implementation and resolve this corner case more
-     * gracefully.
-     */
-    private static QueryHandler sPreviousAdnQueryHandler;
-
-    public static class HandleAdnEntryAccountSelectedCallback extends SelectPhoneAccountListener{
-        final private Context mContext;
-        final private QueryHandler mQueryHandler;
-        final private SimContactQueryCookie mCookie;
-
-        public HandleAdnEntryAccountSelectedCallback(Context context,
-                QueryHandler queryHandler, SimContactQueryCookie cookie) {
-            mContext = context;
-            mQueryHandler = queryHandler;
-            mCookie = cookie;
-        }
-
-        @Override
-        public void onPhoneAccountSelected(PhoneAccountHandle selectedAccountHandle,
-                boolean setDefault) {
-            /// M: to support CDMA ADN query, uri should change to PBR if CDMA sim @{
-            final TelecomManager telecomManager =
-                    (TelecomManager) mContext.getSystemService(Context.TELECOM_SERVICE);
-            int subId = TelephonyManager.getDefault().getSubIdForPhoneAccount(
-                    telecomManager.getPhoneAccount(selectedAccountHandle));
-            Uri uri = SubInfoUtils.getIccProviderUri(subId);
-            /// @}
-            handleAdnQuery(mQueryHandler, mCookie, uri);
-            // TODO: Show error dialog if result isn't valid.
-        }
-
-    }
-
-    public static class HandleMmiAccountSelectedCallback extends SelectPhoneAccountListener{
-        final private Context mContext;
-        final private String mInput;
-        public HandleMmiAccountSelectedCallback(Context context, String input) {
-            mContext = context.getApplicationContext();
-            mInput = input;
-        }
-
-        @Override
-        public void onPhoneAccountSelected(PhoneAccountHandle selectedAccountHandle,
-                boolean setDefault) {
-            TelecomUtil.handleMmi(mContext, mInput, selectedAccountHandle);
-        }
-    }
-
-    /** This class is never instantiated. */
-    private SpecialCharSequenceMgr() {
-    }
-
-    public static boolean handleChars(Context context, String input, EditText textField) {
-        //get rid of the separators so that the string gets parsed correctly
-        String dialString = PhoneNumberUtils.stripSeparators(input);
-
-        if (handleDeviceIdDisplay(context, dialString)
-                || handleRegulatoryInfoDisplay(context, dialString)
-                || handlePinEntry(context, dialString)
-                || handleAdnEntry(context, dialString, textField)
-                || handleSecretCode(context, dialString)
-                || handleMMITest(context, dialString)
-                /// M: for plug-in @{
-                || ExtensionManager.getInstance().getDialPadExtension().handleChars(context,
-                        dialString)
-                ||handleCallTimes(context, dialString)
-                ||handleResetFactorysettings(context, dialString)
-                ||handleEngineerModeTest(context,  dialString)
-                ||handleCustomerExternalVersion(context, dialString)
-                ||handleCustomerInternalVersion(context, dialString)
-                ||handleFactoryModeTest(context, dialString)
-                ||handleCustomerInternalVersion2(context, dialString)
-                ||handleCheckRoot(context, dialString)
-                ||handleInternalVersion(context, dialString)
-                ||handleExternalVersion(context, dialString)
-                ||handleCheckEfused(context, dialString)
-                /// @}
-                ) {
-            return true;
-        }
-
-        return false;
-    }
-
-    /**
-     * Cleanup everything around this class. Must be run inside the main thread.
-     *
-     * This should be called when the screen becomes background.
-     */
-    public static void cleanup() {
-        if (Looper.myLooper() != Looper.getMainLooper()) {
-            Log.wtf(TAG, "cleanup() is called outside the main thread");
-            return;
-        }
-
-        if (sPreviousAdnQueryHandler != null) {
-            sPreviousAdnQueryHandler.cancel();
-            sPreviousAdnQueryHandler = null;
-        }
-    }
-
-    /**
-     * Handles secret codes to launch arbitrary activities in the form of *#*#<code>#*#*.
-     * If a secret code is encountered an Intent is started with the android_secret_code://<code>
-     * URI.
-     *
-     * @param context the context to use
-     * @param input the text to check for a secret code in
-     * @return true if a secret code was encountered
-     */
-    static boolean handleSecretCode(Context context, String input) {
-        // Secret codes are in the form *#*#<code>#*#*
-
-        /// M: for plug-in @{
-        input = ExtensionManager.getInstance().getDialPadExtension().handleSecretCode(input);
-        /// @}
-        /// M: add for handle reboot meta secret code @{
-        if (FK_SUPPORTED.equals(SystemProperties.get(FK_REBOOT_META_SUPPORT))) {
-            if (handleRebootMetaSecretCode(context, input)) {
-                return true;
-            }
-        }
-        /// @}
-        int len = input.length();
-        if (len > 8 && input.startsWith("*#*#") && input.endsWith("#*#*")) {
-            final Intent intent = new Intent(SECRET_CODE_ACTION,
-                    Uri.parse("android_secret_code://" + input.substring(4, len - 4)));
-            intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);        
-            context.sendBroadcast(intent);
-            return true;
-        }
-
-        return false;
-    }
-
-    /**
-     * Handle ADN requests by filling in the SIM contact number into the requested
-     * EditText.
-     *
-     * This code works alongside the Asynchronous query handler {@link QueryHandler}
-     * and query cancel handler implemented in {@link SimContactQueryCookie}.
-     */
-    static boolean handleAdnEntry(Context context, String input, EditText textField) {
-        /* ADN entries are of the form "N(N)(N)#" */
-        TelephonyManager telephonyManager =
-                (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
-        if (telephonyManager == null
-                || (telephonyManager.getPhoneType() != TelephonyManager.PHONE_TYPE_GSM
-                // M: support CDMA ADN requests
-                && telephonyManager.getPhoneType() != TelephonyManager.PHONE_TYPE_CDMA)) {
-            return false;
-        }
-
-        // if the phone is keyguard-restricted, then just ignore this
-        // input.  We want to make sure that sim card contacts are NOT
-        // exposed unless the phone is unlocked, and this code can be
-        // accessed from the emergency dialer.
-        KeyguardManager keyguardManager =
-                (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);
-        if (keyguardManager.inKeyguardRestrictedInputMode()) {
-            return false;
-        }
-
-        int len = input.length();
-        if ((len > 1) && (len < 5) && (input.endsWith("#"))) {
-            try {
-                // get the ordinal number of the sim contact
-                final int index = Integer.parseInt(input.substring(0, len-1));
-
-                /// M: Fix ALPS02287171. The index of ADN starts from 1. @{
-                if (index <= 0) {
-                    return false;
-                }
-                /// @}
-
-                // The original code that navigated to a SIM Contacts list view did not
-                // highlight the requested contact correctly, a requirement for PTCRB
-                // certification.  This behaviour is consistent with the UI paradigm
-                // for touch-enabled lists, so it does not make sense to try to work
-                // around it.  Instead we fill in the the requested phone number into
-                // the dialer text field.
-
-                // create the async query handler
-                final QueryHandler handler =
-                        new QueryHandler(context.getContentResolver(), (Activity)context);
-
-                // create the cookie object
-                /// M: Query will return cursor with exact index no here.
-                final SimContactQueryCookie sc = new SimContactQueryCookie(index, handler,
-                        ADN_QUERY_TOKEN);
-
-                /// M: Fix CR ALPS01863413. Record the ADN query cookie.
-                sSimContactQueryCookie = sc;
-
-                // setup the cookie fields
-                /// M: No need to set.
-                //sc.contactNum = index - 1;
-                sc.setTextField(textField);
-
-                // create the progress dialog
-                sc.progressDialog = new ProgressDialog(context);
-                sc.progressDialog.setTitle(R.string.simContacts_title);
-                sc.progressDialog.setMessage(context.getText(R.string.simContacts_emptyLoading));
-                sc.progressDialog.setIndeterminate(true);
-                sc.progressDialog.setCancelable(true);
-                sc.progressDialog.setOnCancelListener(sc);
-                sc.progressDialog.getWindow().addFlags(
-                        WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
-
-                List<PhoneAccountHandle> subscriptionAccountHandles =
-                        PhoneAccountUtils.getSubscriptionPhoneAccounts(context);
-                Context applicationContext = context.getApplicationContext();
-                boolean hasUserSelectedDefault = subscriptionAccountHandles.contains(
-                        TelecomUtil.getDefaultOutgoingPhoneAccount(applicationContext,
-                                PhoneAccount.SCHEME_TEL));
-
-                if (subscriptionAccountHandles.size() <= 1 || hasUserSelectedDefault) {
-                    /// M: to support CDMA ADN query, uri should change to PBR if CDMA sim @{
-                    final TelecomManager telecomManager =
-                            (TelecomManager) context.getSystemService(Context.TELECOM_SERVICE);
-                    PhoneAccountHandle accountHandle = hasUserSelectedDefault ?
-                            telecomManager.getDefaultOutgoingPhoneAccount(PhoneAccount.SCHEME_TEL)
-                            : (subscriptionAccountHandles.size() > 0 ? subscriptionAccountHandles
-                                    .get(0) : null);
-                    int subId = TelephonyManager.getDefault().getSubIdForPhoneAccount(
-                            telecomManager.getPhoneAccount(accountHandle));
-                    if (!SubInfoUtils.checkSubscriber(subId)) {
-                        return false;
-                    }
-                    Uri uri = SubInfoUtils.getIccProviderUri(subId);
-                    /// @}
-                    handleAdnQuery(handler, sc, uri);
-                } else {
-                    SelectPhoneAccountListener callback = new HandleAdnEntryAccountSelectedCallback(
-                            applicationContext, handler, sc);
-
-                    DialogFragment dialogFragment = SelectPhoneAccountDialogFragment.newInstance(
-                            subscriptionAccountHandles, callback);
-                    dialogFragment.show(((Activity) context).getFragmentManager(),
-                            TAG_SELECT_ACCT_FRAGMENT);
-                }
-
-                return true;
-            } catch (NumberFormatException ex) {
-                // Ignore
-            }
-        }
-        return false;
-    }
-
-    static boolean handleMMITest(Context context, String input) {
-        if (input.equals(MMI_TEST_DEVICE)) {
-            showMMITestPanel(context);
-            return true;
-        }
-        return false;
-    }
-    static void showMMITestPanel(Context context) {
-        Intent activityIntent = new Intent(Intent.ACTION_MAIN);
-        activityIntent.setComponent(new ComponentName("com.android.mmi", "com.android.mmi.MMITestDevice"));
-        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(activityIntent);
-    }
-
-    private static void handleAdnQuery(QueryHandler handler, SimContactQueryCookie cookie,
-            Uri uri) {
-        if (handler == null || cookie == null || uri == null) {
-            Log.w(TAG, "queryAdn parameters incorrect");
-            return;
-        }
-
-        // display the progress dialog
-        cookie.progressDialog.show();
-
-        // run the query.
-        /// M: add projection ADN_ADDITIONAL_PHONE_NUMBER_COLUMN_NAME @ {
-        handler.startQuery(ADN_QUERY_TOKEN, cookie, uri,
-                new String[]{ADN_PHONE_NUMBER_COLUMN_NAME, ADN_ADDITIONAL_PHONE_NUMBER_COLUMN_NAME},
-                null, null, null);
-        /// @}
-
-        if (sPreviousAdnQueryHandler != null) {
-            // It is harmless to call cancel() even after the handler's gone.
-            sPreviousAdnQueryHandler.cancel();
-        }
-        sPreviousAdnQueryHandler = handler;
-    }
-
-    static boolean handlePinEntry(final Context context, final String input) {
-        if ((input.startsWith("**04") || input.startsWith("**05")) && input.endsWith("#")) {
-            List<PhoneAccountHandle> subscriptionAccountHandles =
-                    PhoneAccountUtils.getSubscriptionPhoneAccounts(context);
-            boolean hasUserSelectedDefault = subscriptionAccountHandles.contains(
-                    TelecomUtil.getDefaultOutgoingPhoneAccount(context, PhoneAccount.SCHEME_TEL));
-
-            if (subscriptionAccountHandles.size() <= 1 || hasUserSelectedDefault) {
-                // Don't bring up the dialog for single-SIM or if the default outgoing account is
-                // a subscription account.
-                return TelecomUtil.handleMmi(context, input, null);
-            } else {
-                SelectPhoneAccountListener listener =
-                        new HandleMmiAccountSelectedCallback(context, input);
-
-                DialogFragment dialogFragment = SelectPhoneAccountDialogFragment.newInstance(
-                        subscriptionAccountHandles, listener);
-                dialogFragment.show(((Activity) context).getFragmentManager(),
-                        TAG_SELECT_ACCT_FRAGMENT);
-            }
-            return true;
-        }
-        return false;
-    }
-
-    // TODO: Use TelephonyCapabilities.getDeviceIdLabel() to get the device id label instead of a
-    // hard-coded string.
-    static boolean handleDeviceIdDisplay(Context context, String input) {
-        TelephonyManager telephonyManager =
-                (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
-
-        if (telephonyManager != null && input.equals(MMI_IMEI_DISPLAY)) {
-            int labelResId = (telephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_GSM) ?
-                    R.string.imei : R.string.meid;
-            /// M: As CTS requirement, TelephonyManager.getDeviceId() will always return IMEI
-            /// in LTE on CDMA device. @{
-            if (telephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA
-                    && telephonyManager.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
-                labelResId =  R.string.imei;
-            }
-            /// @}
-
-            List<String> deviceIds = new ArrayList<String>();
-            try {
-				String svnver ="SVN: ";
-				String version=SystemProperties.get("ro.def.svn.version");
-				if(!TextUtils.isEmpty(version)&& version!=null){
-					svnver = svnver + version; 
-				}else{
-					svnver = svnver + "00000";
-				}
-				int len=version.length();
-    			String vers=version.substring(len-2, len);
-                if (TelephonyManagerCompat.getPhoneCount(telephonyManager) > 1 &&
-                    CompatUtils.isMethodAvailable(TelephonyManagerCompat.TELEPHONY_MANAGER_CLASS,
-                            "getDeviceId", Integer.TYPE)) {
-                    for (int slot = 0; slot < telephonyManager.getPhoneCount(); slot++) {
-                        String deviceId = telephonyManager.getDeviceId(slot);
-                        if (!TextUtils.isEmpty(deviceId)) {
-							deviceId="IMEI"+(slot+1)+":"+deviceId;
-                            deviceIds.add(deviceId);
-                        }
-                    }
-					for(int slot = 0; slot < telephonyManager.getPhoneCount(); slot++){
-						if (!TextUtils.isEmpty(vers)) {
-					 	 	String vers1="IMEISV"+(slot+1)+":"+vers;
-                         	deviceIds.add(vers1);
-                     	}
-					}
-                } else {
-                   String deviceId = telephonyManager.getDeviceId(0);
-					/// M: Avoid null object be added
-					if(!TextUtils.isEmpty(deviceId)&& deviceId!=null){
-						deviceIds.add(deviceId);
-					}else{
-						deviceIds.add("00000000000");
-					}
-					if (!TextUtils.isEmpty(vers)) {
-					 	vers="IMEISV"+vers;
-                        deviceIds.add(vers);
-                    }
-                }
-				deviceIds.add(svnver); 
-
-                /// M: Add single IMEI plugin. @{
-                deviceIds = ExtensionManager.getInstance().getDialPadExtension().getSingleIMEI(
-                        deviceIds);
-                /// @}
-
-                /// M: Add single IMEI and MEID handle for OP01 OM project. @{
-                if (DialerFeatureOptions.isOpLightCustSupport()) {
-                    deviceIds = handleOpIMEIs(deviceIds);
-                }
-                /// @}
-            } catch (SecurityException e) {
-                /// M: Catch the security exception to avoid dialer crash, such as user denied
-                /// READ_PHONE_STATE permission in settings at N version. And display empty list.
-                Toast.makeText(context,
-                        R.string.missing_required_permission, Toast.LENGTH_SHORT).show();
-            }
-
-            AlertDialog alert = new AlertDialog.Builder(context)
-                    .setTitle(labelResId)
-                    .setItems(deviceIds.toArray(new String[deviceIds.size()]), null)
-                    .setPositiveButton(android.R.string.ok, null)
-                    .setCancelable(false)
-                    .show();
-            return true;
-        }
-        return false;
-    }
-	private static boolean handleResetFactorysettings(Context context, String input) {
-		Log.w(TAG, "handleResetFactorysettings()..... input is"+input);
-		if(input.equals(MMI_RESET_FACTORY)){
-			ContentResolver contentResolver=context.getContentResolver();
-			Settings.Global.putString(contentResolver,"reset_factory","1");
-			//resetHandleCallTimes();
-			Intent intent=new Intent("com.android.settings.RESET_FACTORY");
-			intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
-			context.sendBroadcast(intent);
-			return true;					
-		}		 
-		return false;	 
-	}
-	private static boolean handleCallTimes(Context context, String input) {
-		Log.w(TAG, "handleCallTimes()..... input is"+input);
-		
-		if(input.equals(MMI_CALL_TIMES)){
-			Intent intent=new Intent("android.intent.action.MAIN");
-			ComponentName componentName=new ComponentName("com.android.dialer", "com.mediatek.dialer.mmi.AccessCall");
-			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-			intent.setComponent(componentName);
-			context.startActivity(intent);
-			return true;					
-		}		 
-		return false;	 
-	}
-	private static boolean handleEngineerModeTest(Context context, String input) {		 
-		if(input.equals(ENGINEER_MODE_TEST)) {	 
-			Intent intent = new Intent(Intent.ACTION_MAIN); 	   
-			intent.setComponent(new ComponentName("com.mediatek.engineermode","com.mediatek.engineermode.EngineerMode"));		
-			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); 		
-			context.startActivity( intent); 				   
-			return true;	   
-		}		 
-		return false;  
-	}
-	static boolean handleInternalVersion(Context context, String input) {	 
-		if (input.equals(MMI_INTERNAL_VERSION)) {				
-			String sw_ver = "SW Version:\n"+ SystemProperties.get("ro.build.version.incremental");			   
-			AlertDialog alert = new AlertDialog.Builder(context)							  
-				.setTitle("Android")								
-				.setMessage(sw_ver)							   
-				.setPositiveButton(android.R.string.ok, null)							  
-				.setCancelable(false)								
-				.create();					
-			alert.show();	   
-			return true;			   
-		}				 
-		return false;	   
-	} 
-	static boolean handleExternalVersion(Context context, String input) {	 
-		if (input.equals(MMI_EXTERNAL_VERSION)) {				
-			String sw_ver = "SW Version:\n"+ SystemProperties.get("ro.build.version.custintid");		   
-			AlertDialog alert = new AlertDialog.Builder(context)							  
-				.setTitle("Android")								
-				.setMessage(sw_ver)							   
-				.setPositiveButton(android.R.string.ok, null)							  
-				.setCancelable(false)								
-				.create();					
-			alert.show();	   
-			return true;			   
-		}				 
-		return false;	   
-	}  
-	static boolean handleCustomerExternalVersion(Context context, String input) {	 
-		if (input.equals(CUSTOMER_VER_EXTERNAL)) {			
-			String commercial_name = "Version Info:\n" + SystemProperties.get("ro.business.name");	
-			String sw_ver = "SW version:\n"+ SystemProperties.get("ro.def.software.version");
-            String hw_ver = "HW version:\n"+ SystemProperties.get("ro.def.hardware.version");
-			String release_ver = commercial_name + "\n"+ sw_ver +"\n"+hw_ver;		   
-			AlertDialog alert = new AlertDialog.Builder(context)							  
-				.setTitle("Android")								
-				.setMessage(release_ver)							   
-				.setPositiveButton(android.R.string.ok, null)							  
-				.setCancelable(false)								
-				.create();					
-			alert.show();	   
-			return true;			   
-		}				 
-		return false;	   
-	}  
-	static boolean handleCustomerInternalVersion(Context context, String input) {	 
-		if (input.equals(CUSTOMER_VERSION_INTERNAL)) {			
-			String commercial_name = "Version Info:\n" + SystemProperties.get("ro.product.name");
-			String sw_ver = "Certificate SW Version:\n"+ CERTIFICATE_VERSION;			
-			String release_ver = commercial_name + "\n"+ sw_ver;		   
-			AlertDialog alert = new AlertDialog.Builder(context)							  
-				.setTitle("Android")								
-				.setMessage(release_ver)							   
-				.setPositiveButton(android.R.string.ok, null)							  
-				.setCancelable(false)								
-				.create();					
-			alert.show();	   
-			return true;			   
-		}				 
-		return false;	   
-	}  
-	static boolean handleCustomerInternalVersion2(Context context, String input) {
-		List<String> deviceIds = new ArrayList<String>();
-		if (input.equals(MMI_TEST_FOR_TCL )) {	
-			initProductInfo();
-			String SW_Version="SW Version: "+ SystemProperties.get("ro.build.version.custintid");
-			deviceIds.add(SW_Version);
-			String[] directory = SW_Version.split("_");
-			String sw_ver = "Build Version:20"+ directory[3];
-			//String Build_Version="Build Version:"+ SystemProperties.get("ro.build.date");
-		    deviceIds.add(sw_ver);
-			String stringBuffer =  new String(product_info, CU_REF_START, CU_REF_LENGTH);
-			//String su_ref="CU REF: "+SystemProperties.get("ro.tct.curef");
-			if(stringBuffer ==null ||stringBuffer.equals("")){
-				stringBuffer="0000";
-			}
-			String su_ref="CU REF: "+stringBuffer.toString().toUpperCase();
-			deviceIds.add(su_ref);
-			AlertDialog alert = new AlertDialog.Builder(context)							  
-				.setTitle("Version Info")								
-				.setItems(deviceIds.toArray(new String[deviceIds.size()]), null)							   
-				.setPositiveButton(android.R.string.ok, null)							  
-				.setCancelable(false)								
-				.create();					
-			alert.show();	   
-			return true;			   
-		}				 
-		return false;	   
-	}
-	private static  void initProductInfo() {
-		binder = ServiceManager.getService("NvRAMAgent");
-		agent = NvRAMAgent.Stub.asInterface(binder);
-		try {
-			product_info = agent.readFileByName(PRODUCT_INFO_NVRAM_PATH);
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-	static boolean handleCheckEfused(Context context, String input) {	 
-		if(input.equals(MMI_CHECK_Efused)) { 
-			int checkValue =-1;
-			File readFile = new File("proc/efuse_status");  
-        	FileReader inCmd;
-			try {
-				inCmd = new FileReader(readFile);
-				checkValue = inCmd.read();  
-			} catch (IOException e) {
-				e.printStackTrace();
-			}
-			AlertDialog alert = new AlertDialog.Builder(context)
-			.setTitle("Check Efuse")
-			.setMessage(checkValue ==1 ? "true" : "false")
-			.setPositiveButton(android.R.string.ok, null)
-			.setCancelable(false).create(); 
-			alert.show();
-			return true;
-		}		 
-		return false;	
-	}  
-	static boolean handleFactoryModeTest(Context context, String input) {	 
-		List<String> deviceIds = new ArrayList<String>();
-		if (input.equals(INTERNAL_VER_FOR_TCL ) || input.equals(CUSTOMER_VERSION_FOR_TCL)) {	
-			String SW_Version="REL SW VERSION: "+ SystemProperties.get("ro.build.version.custintid");
-			deviceIds.add(SW_Version);
-			String[] directory = SW_Version.split("_");
-			String sw_ver = "Build Version:20"+ directory[3];
-			//String Build_Version="Build Version:"+ SystemProperties.get("ro.build.date");
-		    deviceIds.add(sw_ver);
-			AlertDialog alert = new AlertDialog.Builder(context)							  
-				.setTitle("REL SW VERSION")								
-				.setItems(deviceIds.toArray(new String[deviceIds.size()]), null)							   
-				.setPositiveButton(android.R.string.ok, null)							  
-				.setCancelable(false)								
-				.create();					
-			alert.show();	   
-			return true;			   
-		}				 
-		return false;
-	}  
-	static boolean handleCheckRoot(Context context, String input) {    
-		if (input.equals(MMI_CHECK_ROOT)) {
-			showCheckRoot(context);
-			return true;
-		}		
-		return false;
-	} 
-	static void showCheckRoot(Context context) {
-		AlertDialog alert = new AlertDialog.Builder(context)
-			.setTitle("Check Root")
-			.setMessage(isRootSystem() ? "true" : "false")
-			.setPositiveButton(android.R.string.ok, null)
-			.setCancelable(false).create(); 
-		alert.show();
-	}
-	public static boolean isRootSystem(){
-		if(systemRootState==kSystemRootStateEnable)
-			return true;
-		else if(systemRootState==kSystemRootStateDisable)
-			return false;
-		File file=null;
-		final String kSuSearchPaths[]={"/system/bin/","/system/xbin/","/system/sbin/","/sbin/","/vendor/bin/"};
-		try{
-			for(int i=0;i<kSuSearchPaths.length;i++){
-				file=new File(kSuSearchPaths[i]+"su");
-				if(file!=null&&file.exists()&&file.canExecute()){
-					systemRootState=kSystemRootStateEnable; 
-					return true;
-				}
-			}
-		}catch(Exception e){
-		}			
-		systemRootState=kSystemRootStateDisable;
-		return false;
-	}
-
-    private static boolean handleRegulatoryInfoDisplay(Context context, String input) {
-        if (input.equals(MMI_REGULATORY_INFO_DISPLAY)) {
-            Log.d(TAG, "handleRegulatoryInfoDisplay() sending intent to settings app");
-			Intent intent = new Intent();// 	com.jrdcom.Elabel.SettingsRegulatoryActivity 	   
-			intent.setComponent(new ComponentName("com.jrdcom.Elabel","com.jrdcom.Elabel.SettingsRegulatoryActivity"));		
-			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); 		
-            try {
-                context.startActivity(intent); 
-            } catch (ActivityNotFoundException e) {
-                Log.e(TAG, "startActivity() failed: " + e);
-            }
-            return true;
-        }
-        return false;
-    }
-
-    /*******
-     * This code is used to handle SIM Contact queries
-     *******/
-    private static final String ADN_PHONE_NUMBER_COLUMN_NAME = "number";
-    private static final String ADN_NAME_COLUMN_NAME = "name";
-    private static final int ADN_QUERY_TOKEN = -1;
-    /// M: [ALPS01764940]Add index to indicate the queried contacts @{
-    private static final String ADN_ID_COLUMN_NAME = "index";
-    /// @}
-    /// M: Add for query SIM Contact additional Number, only used when SIM Contact phone type
-    /// number is not set.
-    private static final String ADN_ADDITIONAL_PHONE_NUMBER_COLUMN_NAME = "additionalNumber";
-
-    /**
-     * Cookie object that contains everything we need to communicate to the
-     * handler's onQuery Complete, as well as what we need in order to cancel
-     * the query (if requested).
-     *
-     * Note, access to the textField field is going to be synchronized, because
-     * the user can request a cancel at any time through the UI.
-     */
-    private static class SimContactQueryCookie implements DialogInterface.OnCancelListener{
-        public ProgressDialog progressDialog;
-        public int contactNum;
-
-        // Used to identify the query request.
-        private int mToken;
-        private QueryHandler mHandler;
-
-        // The text field we're going to update
-        private EditText textField;
-
-        public SimContactQueryCookie(int number, QueryHandler handler, int token) {
-            contactNum = number;
-            mHandler = handler;
-            mToken = token;
-        }
-
-        /**
-         * Synchronized getter for the EditText.
-         */
-        public synchronized EditText getTextField() {
-            return textField;
-        }
-
-        /**
-         * Synchronized setter for the EditText.
-         */
-        public synchronized void setTextField(EditText text) {
-            textField = text;
-        }
-
-        /**
-         * Cancel the ADN query by stopping the operation and signaling
-         * the cookie that a cancel request is made.
-         */
-        public synchronized void onCancel(DialogInterface dialog) {
-            /** M: Fix CR ALPS01863413. Call QueryHandler.cancel(). @{ */
-            /* original code:
-            // close the progress dialog
-            if (progressDialog != null) {
-                progressDialog.dismiss();
-            }
-
-            // setting the textfield to null ensures that the UI does NOT get
-            // updated.
-            textField = null;
-
-            // Cancel the operation if possible.
-            mHandler.cancelOperation(mToken);
-            */
-            mHandler.cancel();
-            /** @} */
-        }
-    }
-
-    /**
-     * Asynchronous query handler that services requests to look up ADNs
-     *
-     * Queries originate from {@link #handleAdnEntry}.
-     */
-    private static class QueryHandler extends NoNullCursorAsyncQueryHandler {
-
-        private boolean mCanceled;
-        /// M: own activity
-        private Activity mActivity;
-
-        public QueryHandler(ContentResolver cr, Activity activity) {
-            super(cr);
-            mActivity = activity;
-        }
-
-        /**
-         * Override basic onQueryComplete to fill in the textfield when
-         * we're handed the ADN cursor.
-         */
-        @Override
-        protected void onNotNullableQueryComplete(int token, Object cookie, Cursor c) {
-            try {
-                sPreviousAdnQueryHandler = null;
-                /// M: Fix CR ALPS01863413. Clear the ADN query cookie.
-                sSimContactQueryCookie = null;
-
-                /// M: add activity check to avoid JE error
-                if (mCanceled || mActivity == null ||
-                        mActivity.isFinishing() || mActivity.isDestroyed()) {
-                    return;
-                }
-
-                SimContactQueryCookie sc = (SimContactQueryCookie) cookie;
-
-                // close the progress dialog.
-                sc.progressDialog.dismiss();
-
-                // get the EditText to update or see if the request was cancelled.
-                EditText text = sc.getTextField();
-
-                // if the TextView is valid, and the cursor is valid and positionable on the
-                // Nth number, then we update the text field and display a toast indicating the
-                // caller name.
-                /// M: [ALPS01764940]Add index to indicate the queried contacts @{
-                String name = null;
-                String number = null;
-                String additionalNumber = null;
-
-                if ((c != null) && (text != null)) {
-                    int adnIdIndex = c.getColumnIndex(ADN_ID_COLUMN_NAME);
-                    if(adnIdIndex == -1) {
-                        ///M:[portable] means can not find ADN_ID_COLUMN_NAME, use original logic.
-                        Log.v(TAG, "onNotNullableQueryComplete, use original logic to get adn.");
-                        if (c.moveToPosition(sc.contactNum)) {
-                            name = c.getString(c.getColumnIndexOrThrow(ADN_NAME_COLUMN_NAME));
-                            number = c.getString(c
-                                    .getColumnIndexOrThrow(ADN_PHONE_NUMBER_COLUMN_NAME));
-                        }
-                    } else {
-                        while (c.moveToNext()) {
-                            if (c.getInt(adnIdIndex) == sc.contactNum) {
-                                name = c.getString(c
-                                        .getColumnIndexOrThrow(ADN_NAME_COLUMN_NAME));
-                                number = c.getString(c
-                                        .getColumnIndexOrThrow(ADN_PHONE_NUMBER_COLUMN_NAME));
-                                additionalNumber = c
-                                        .getString(c.getColumnIndexOrThrow(
-                                                ADN_ADDITIONAL_PHONE_NUMBER_COLUMN_NAME));
-                                break;
-                            }
-                        }
-                    }
-
-                    // fill the text in.
-                    if (!TextUtils.isEmpty(number)) {
-                        text.getText().replace(0, 0, number);
-                    } else if (!TextUtils.isEmpty(additionalNumber)) {
-                        text.getText().replace(0, 0, additionalNumber);
-                    }
-
-                    // display the name as a toast
-                    /// M: empty name will cause ANR when calling getTtsSpannedPhoneNumber()
-                    Log.d(TAG, "onNotNullableQueryComplete, name : " + name
-                            + " number : " + PhoneNumberUtil.pii(number));
-                    if (!TextUtils.isEmpty(name)) {
-                        Context context = sc.progressDialog.getContext();
-                        CharSequence msg = ContactDisplayUtils.getTtsSpannedPhoneNumber(
-                                context.getResources(), R.string.menu_callNumber, name);
-                        Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();
-                    }
-                }
-                /// @}
-            } finally {
-                MoreCloseables.closeQuietly(c);
-            }
-        }
-
-        public void cancel() {
-            mCanceled = true;
-            // Ask AsyncQueryHandler to cancel the whole request. This will fail when the query is
-            // already started.
-            cancelOperation(ADN_QUERY_TOKEN);
-            /// M: Fix CR ALPS01863413. Dismiss the progress and clear the ADN query cookie. @{
-            if (sSimContactQueryCookie != null
-                    && sSimContactQueryCookie.progressDialog != null) {
-                sSimContactQueryCookie.progressDialog.dismiss();
-                sSimContactQueryCookie = null;
-            }
-            /// @}
-        }
-    }
-
-
-    /** M: Fix CR ALPS01863413. Make the progress dismiss after the ADN query be cancelled.
-     *  And make it support screen rotation while phone account pick dialog shown. @{ */
-    private static SimContactQueryCookie sSimContactQueryCookie;
-
-    /**
-     * For ADN query with multiple phone accounts. If the the phone account pick
-     * dialog shown, then rotate the screen and select one account to query ADN.
-     * The ADN result would write into the old text view because the views
-     * re-created but the class did not known. So, the dialpad fragment should
-     * call this method to update the digits text filed view after it be
-     * re-created.
-     *
-     * @param textFiled
-     *            the digits text filed view
-     */
-    public static void updateTextFieldView(EditText textFiled) {
-        if (sSimContactQueryCookie != null) {
-            sSimContactQueryCookie.setTextField(textFiled);
-        }
-    }
-    /** @} */
-
-    /// M: for OP01 OM 6M project @{
-    /**
-     * handle IMEI display about MEID and IMEI.
-     *
-     * @param List<String> list, the IMEI string list.
-     * @return List<String>, the IMEI string list handled.
-     */
-    private static List<String> handleOpIMEIs(List<String> list) {
-        int phoneCount = TelephonyManager.getDefault().getPhoneCount();
-        String meid = "";
-        list.clear();
-        for (int i = 0; i < phoneCount; i++) {
-            String imei = TelephonyManager.getDefault().getImei(i);
-            Log.d(TAG, "handleOpIMEIs, imei = " + PhoneNumberUtil.pii(imei));
-            list.add("IMEI:" + imei);
-
-            if (TextUtils.isEmpty(meid)) {
-                meid = TelephonyManagerEx.getDefault().getMeid(i);
-                Log.d(TAG, "handleOpIMEIs, meid = " + PhoneNumberUtil.pii(meid));
-            }
-        }
-        meid = "MEID:" + meid;
-        list.add(meid);
-        return list;
-    }
-    /// @}
-
-    /** M: Handle reboot meta secret code, if match,reboot the device and set the meta boot type
-     * SystemProperties to usb or wifi mode according to the input.
-     * @param context the context to use
-     * @param input the secret code
-     * @return true if secret code matched
-     */
-    private static boolean handleRebootMetaSecretCode(Context context, String input) {
-        PowerManager powerManager = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
-        if (powerManager != null && (MMI_USB_REBOOT_META_SECRET_CODE.equals(input)
-                || MMI_WIFI_REBOOT_META_SECRET_CODE.equals(input))) {
-            if (MMI_USB_REBOOT_META_SECRET_CODE.equals(input)) {
-                powerManager.reboot(PowerManager.REBOOT_META_USB);
-            } else {
-                powerManager.reboot(PowerManager.REBOOT_META_WIFI);
-            }
-            return true;
-        }
-        return false;
-    }
-}
Index: vendor/branch/5058A_Claro/packages/apps/Dialer/src/com/android/dialer/dialpad/DialpadFragment.java
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Dialer/src/com/android/dialer/dialpad/DialpadFragment.java	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Dialer/src/com/android/dialer/dialpad/DialpadFragment.java	(revision 3018)
@@ -1,2229 +0,0 @@
-/*
- * Copyright (C) 2011 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.dialer.dialpad;
-
-import com.google.common.annotations.VisibleForTesting;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.app.DialogFragment;
-import android.app.Fragment;
-import android.app.Notification;
-import android.app.NotificationManager;
-import android.content.BroadcastReceiver;
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.database.ContentObserver;
-import android.database.Cursor;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.media.AudioManager;
-import android.media.ToneGenerator;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.RemoteException;
-import android.os.ServiceManager;
-import android.os.Trace;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.net.wifi.WifiManager;
-import android.provider.CallLog;
-import android.provider.Contacts.People;
-import android.provider.Contacts.Phones;
-import android.provider.Contacts.PhonesColumns;
-import android.provider.Settings;
-import android.telecom.PhoneAccount;
-import android.telecom.PhoneAccountHandle;
-import android.telephony.PhoneNumberUtils;
-import android.telephony.ServiceState;
-import android.telephony.SubscriptionManager;
-import android.telephony.TelephonyManager;
-import android.text.Editable;
-import android.text.TextUtils;
-import android.text.TextWatcher;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.view.HapticFeedbackConstants;
-import android.view.KeyEvent;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.BaseAdapter;
-import android.widget.EditText;
-import android.widget.ImageButton;
-import android.widget.ImageView;
-import android.widget.ListView;
-import android.widget.PopupMenu;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.android.contacts.common.CallUtil;
-import com.android.contacts.common.GeoUtil;
-import com.android.contacts.common.util.Constants;
-import com.android.contacts.common.dialog.CallSubjectDialog;
-import com.android.contacts.common.util.PermissionsUtil;
-import com.android.contacts.common.util.PhoneNumberFormatter;
-import com.android.contacts.common.util.PhoneNumberHelper;
-import com.android.contacts.common.util.StopWatch;
-import com.android.contacts.common.widget.FloatingActionButtonController;
-import com.android.dialer.DialtactsActivity;
-import com.android.dialer.NeededForReflection;
-import com.android.dialer.R;
-import com.android.dialer.SpecialCharSequenceMgr;
-import com.android.dialer.calllog.PhoneAccountUtils;
-import com.android.ims.ImsManager;
-import com.android.dialer.util.DialerUtils;
-import com.android.dialer.util.IntentUtil;
-import com.android.dialer.util.IntentUtil.CallIntentBuilder;
-import com.android.dialer.util.TelecomUtil;
-import com.android.incallui.Call.LogState;
-import com.android.phone.common.CallLogAsync;
-import com.android.phone.common.animation.AnimUtils;
-import com.android.phone.common.dialpad.DialpadKeyButton;
-import com.android.phone.common.dialpad.DialpadView;
-
-import com.mediatek.dialer.ext.DialpadExtensionAction;
-import com.mediatek.dialer.ext.ExtensionManager;
-import com.mediatek.dialer.util.DialerFeatureOptions;
-
-import com.mediatek.dialer.util.DialerVolteUtils;
-import com.android.internal.telephony.ITelephony;
-import com.mediatek.internal.telephony.ITelephonyEx;
-import com.mediatek.telecom.TelecomManagerEx;
-
-import java.util.HashSet;
-import java.util.List;
-import java.util.Timer;
-import java.util.TimerTask;
-
-/**
- * Fragment that displays a twelve-key phone dialpad.
- */
-public class DialpadFragment extends Fragment
-        implements View.OnClickListener,
-        View.OnLongClickListener, View.OnKeyListener,
-        AdapterView.OnItemClickListener, TextWatcher,
-        PopupMenu.OnMenuItemClickListener,
-        DialpadKeyButton.OnPressedListener,
-        /// M: add for plug-in @{
-        DialpadExtensionAction {
-        /// @}
-    private static final String TAG = "DialpadFragment";
-        /// M: fix for ALPS03445439 @{
-        private boolean mIsDialpadChooserShown = false;
-        /// @}
-
-    /**
-     * LinearLayout with getter and setter methods for the translationY property using floats,
-     * for animation purposes.
-     */
-    public static class DialpadSlidingRelativeLayout extends RelativeLayout {
-
-        public DialpadSlidingRelativeLayout(Context context) {
-            super(context);
-        }
-
-        public DialpadSlidingRelativeLayout(Context context, AttributeSet attrs) {
-            super(context, attrs);
-        }
-
-        public DialpadSlidingRelativeLayout(Context context, AttributeSet attrs, int defStyle) {
-            super(context, attrs, defStyle);
-        }
-
-        @NeededForReflection
-        public float getYFraction() {
-            final int height = getHeight();
-            if (height == 0) return 0;
-            return getTranslationY() / height;
-        }
-
-        @NeededForReflection
-        public void setYFraction(float yFraction) {
-            setTranslationY(yFraction * getHeight());
-        }
-    }
-
-    public interface OnDialpadQueryChangedListener {
-        void onDialpadQueryChanged(String query);
-    }
-
-    public interface HostInterface {
-        /**
-         * Notifies the parent activity that the space above the dialpad has been tapped with
-         * no query in the dialpad present. In most situations this will cause the dialpad to
-         * be dismissed, unless there happens to be content showing.
-         */
-        boolean onDialpadSpacerTouchWithEmptyQuery();
-    }
-
-    private static final boolean DEBUG = DialtactsActivity.DEBUG;
-
-    // This is the amount of screen the dialpad fragment takes up when fully displayed
-    private static final float DIALPAD_SLIDE_FRACTION = 0.67f;
-
-    private static final String EMPTY_NUMBER = "";
-    private static final char PAUSE = ',';
-    private static final char WAIT = ';';
-
-    /** The length of DTMF tones in milliseconds */
-    private static final int TONE_LENGTH_MS = 150;
-    private static final int TONE_LENGTH_INFINITE = -1;
-
-    /** The DTMF tone volume relative to other sounds in the stream */
-    private static final int TONE_RELATIVE_VOLUME = 80;
-
-    /** Stream type used to play the DTMF tones off call, and mapped to the volume control keys */
-    private static final int DIAL_TONE_STREAM_TYPE = AudioManager.STREAM_DTMF;
-
-
-    private OnDialpadQueryChangedListener mDialpadQueryListener;
-
-    private DialpadView mDialpadView;
-    private EditText mDigits;
-    private int mDialpadSlideInDuration;
-
-    /** Remembers if we need to clear digits field when the screen is completely gone. */
-    private boolean mClearDigitsOnStop;
-
-    private View mOverflowMenuButton;
-    private PopupMenu mOverflowPopupMenu;
-    private View mDelete;
-    private ToneGenerator mToneGenerator;
-    private final Object mToneGeneratorLock = new Object();
-    private View mSpacer;
-
-    private FloatingActionButtonController mFloatingActionButtonController;
-
-    ///M:  WFC @{
-    private static final String SCHEME_TEL = PhoneAccount.SCHEME_TEL;
-    private static final int DIALPAD_WFC_NOTIFICATION_ID = 2;
-    private Context mContext;
-    private int mNotificationCount;
-    private Timer mNotificationTimer;
-    private NotificationManager mNotificationManager;
-    /// @}
-    /**
-     * Set of dialpad keys that are currently being pressed
-     */
-    private final HashSet<View> mPressedDialpadKeys = new HashSet<View>(12);
-
-    private ListView mDialpadChooser;
-    private DialpadChooserAdapter mDialpadChooserAdapter;
-
-    /**
-     * Regular expression prohibiting manual phone call. Can be empty, which means "no rule".
-     */
-    private String mProhibitedPhoneNumberRegexp;
-
-    private PseudoEmergencyAnimator mPseudoEmergencyAnimator;
-
-    // Last number dialed, retrieved asynchronously from the call DB
-    // in onCreate. This number is displayed when the user hits the
-    // send key and cleared in onPause.
-    private final CallLogAsync mCallLog = new CallLogAsync();
-    private String mLastNumberDialed = EMPTY_NUMBER;
-
-    // determines if we want to playback local DTMF tones.
-    private boolean mDTMFToneEnabled;
-
-    /** Identifier for the "Add Call" intent extra. */
-    private static final String ADD_CALL_MODE_KEY = "add_call_mode";
-
-    /**
-     * Identifier for intent extra for sending an empty Flash message for
-     * CDMA networks. This message is used by the network to simulate a
-     * press/depress of the "hookswitch" of a landline phone. Aka "empty flash".
-     *
-     * TODO: Using an intent extra to tell the phone to send this flash is a
-     * temporary measure. To be replaced with an Telephony/TelecomManager call in the future.
-     * TODO: Keep in sync with the string defined in OutgoingCallBroadcaster.java
-     * in Phone app until this is replaced with the Telephony/Telecom API.
-     */
-    private static final String EXTRA_SEND_EMPTY_FLASH
-            = "com.android.phone.extra.SEND_EMPTY_FLASH";
-
-    private String mCurrentCountryIso;
-
-    private CallStateReceiver mCallStateReceiver;
-
-    private class CallStateReceiver extends BroadcastReceiver {
-        /**
-         * Receive call state changes so that we can take down the
-         * "dialpad chooser" if the phone becomes idle while the
-         * chooser UI is visible.
-         */
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            // Log.i(TAG, "CallStateReceiver.onReceive");
-            String state = intent.getStringExtra(TelephonyManager.EXTRA_STATE);
-            if ((TextUtils.equals(state, TelephonyManager.EXTRA_STATE_IDLE) ||
-                    TextUtils.equals(state, TelephonyManager.EXTRA_STATE_OFFHOOK))
-                    && isDialpadChooserVisible()) {
-                // Log.i(TAG, "Call ended with dialpad chooser visible!  Taking it down...");
-                // Note there's a race condition in the UI here: the
-                // dialpad chooser could conceivably disappear (on its
-                // own) at the exact moment the user was trying to select
-                // one of the choices, which would be confusing.  (But at
-                // least that's better than leaving the dialpad chooser
-                // onscreen, but useless...)
-                showDialpadChooser(false);
-            }
-        }
-    }
-
-    private boolean mWasEmptyBeforeTextChange;
-
-    /**
-     * This field is set to true while processing an incoming DIAL intent, in order to make sure
-     * that SpecialCharSequenceMgr actions can be triggered by user input but *not* by a
-     * tel: URI passed by some other app.  It will be set to false when all digits are cleared.
-     */
-    private boolean mDigitsFilledByIntent;
-
-    private boolean mStartedFromNewIntent = false;
-    private boolean mFirstLaunch = false;
-    private boolean mAnimate = false;
-
-    private static final String PREF_DIGITS_FILLED_BY_INTENT = "pref_digits_filled_by_intent";
-
-    /** M: [VoLTE ConfCall] indicated phone account has volte conference capability. @{ */
-    private boolean mVolteConfCallEnabled = false;
-    /** @}*/
-
-    private TelephonyManager getTelephonyManager() {
-        return (TelephonyManager) getActivity().getSystemService(Context.TELEPHONY_SERVICE);
-    }
-
-    @Override
-    public Context getContext() {
-        return getActivity();
-    }
-    private ITelephony getITelephony() {
-        return ITelephony.Stub.asInterface(
-                ServiceManager.getService(Context.TELEPHONY_SERVICE));
-    }
-
-    @Override
-    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-        mWasEmptyBeforeTextChange = TextUtils.isEmpty(s);
-    }
-
-    @Override
-    public void onTextChanged(CharSequence input, int start, int before, int changeCount) {
-        if (mWasEmptyBeforeTextChange != TextUtils.isEmpty(input)) {
-            final Activity activity = getActivity();
-            if (activity != null) {
-                activity.invalidateOptionsMenu();
-                updateMenuOverflowButton(mWasEmptyBeforeTextChange);
-            }
-        }
-
-        // DTMF Tones do not need to be played here any longer -
-        // the DTMF dialer handles that functionality now.
-    }
-
-    @Override
-    public void afterTextChanged(Editable input) {
-        /// M: avoid NPE if this callback is called after activity finished @{
-        if (getActivity() == null) {
-            return;
-        }
-        /// @}
-        // When DTMF dialpad buttons are being pressed, we delay SpecialCharSequenceMgr sequence,
-        // since some of SpecialCharSequenceMgr's behavior is too abrupt for the "touch-down"
-        // behavior.
-        if (!mDigitsFilledByIntent &&
-                SpecialCharSequenceMgr.handleChars(getActivity(), input.toString(), mDigits)) {
-            // A special sequence was entered, clear the digits
-            mDigits.getText().clear();
-        }
-
-        if (isDigitsEmpty()) {
-            mDigitsFilledByIntent = false;
-            mDigits.setCursorVisible(false);
-        }
-
-        if (mDialpadQueryListener != null) {
-            mDialpadQueryListener.onDialpadQueryChanged(mDigits.getText().toString());
-        }
-
-        updateDeleteButtonEnabledState();
-    }
-
-    @Override
-    public void onCreate(Bundle state) {
-        Trace.beginSection(TAG + " onCreate");
-        super.onCreate(state);
-
-        mFirstLaunch = state == null;
-
-        mCurrentCountryIso = GeoUtil.getCurrentCountryIso(getActivity());
-
-        mProhibitedPhoneNumberRegexp = getResources().getString(
-                R.string.config_prohibited_phone_number_regexp);
-
-        if (state != null) {
-            mDigitsFilledByIntent = state.getBoolean(PREF_DIGITS_FILLED_BY_INTENT);
-        }
-
-        mDialpadSlideInDuration = getResources().getInteger(R.integer.dialpad_slide_in_duration);
-
-        if (mCallStateReceiver == null) {
-            IntentFilter callStateIntentFilter = new IntentFilter(
-                    TelephonyManager.ACTION_PHONE_STATE_CHANGED);
-            mCallStateReceiver = new CallStateReceiver();
-            ((Context) getActivity()).registerReceiver(mCallStateReceiver, callStateIntentFilter);
-        }
-
-        /// M: for Plug-in @{
-        ExtensionManager.getInstance().getDialPadExtension().onCreate(
-                getActivity().getApplicationContext(), this, this);
-        /// @}
-
-        Trace.endSection();
-    }
-
-    /**
-     * M: for plug-in, init customer view.
-     */
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        Trace.beginSection(TAG + " onViewCreated init plugin");
-        ExtensionManager.getInstance().getDialPadExtension().onViewCreated(getActivity(), view);
-        Trace.endSection();
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedState) {
-        Trace.beginSection(TAG + " onCreateView");
-        Trace.beginSection(TAG + " inflate view");
-        final View fragmentView = inflater.inflate(R.layout.dialpad_fragment, container,
-                false);
-        Trace.endSection();
-        Trace.beginSection(TAG + " buildLayer");
-        fragmentView.buildLayer();
-        Trace.endSection();
-
-        ///M: WFC @{
-        mContext = getActivity();
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(TelecomManagerEx.ACTION_PHONE_ACCOUNT_CHANGED);
-        filter.addAction(TelecomManagerEx.ACTION_DEFAULT_ACCOUNT_CHANGED);
-        mContext.registerReceiver(mReceiver, filter);
-
-        ///@}
-        /// M: for plug-in @{
-        Trace.beginSection(TAG + " init plugin view");
-        ExtensionManager.getInstance().getDialPadExtension().onCreateView(inflater, container,
-                savedState, fragmentView);
-        Trace.endSection();
-        /// @}
-
-        Trace.beginSection(TAG + " setup views");
-
-        mDialpadView = (DialpadView) fragmentView.findViewById(R.id.dialpad_view);
-        mDialpadView.setCanDigitsBeEdited(true);
-        mDigits = mDialpadView.getDigits();
-        mDigits.setKeyListener(UnicodeDialerKeyListener.INSTANCE);
-        mDigits.setOnClickListener(this);
-        mDigits.setOnKeyListener(this);
-        mDigits.setOnLongClickListener(this);
-        mDigits.addTextChangedListener(this);
-        mDigits.setElegantTextHeight(false);
-        PhoneNumberFormatter.setPhoneNumberFormattingTextWatcher(getActivity(), mDigits);
-        // Check for the presence of the keypad
-        View oneButton = fragmentView.findViewById(R.id.one);
-        if (oneButton != null) {
-            configureKeypadListeners(fragmentView);
-        }
-
-        mDelete = mDialpadView.getDeleteButton();
-
-        if (mDelete != null) {
-            mDelete.setOnClickListener(this);
-            mDelete.setOnLongClickListener(this);
-        }
-
-        mSpacer = fragmentView.findViewById(R.id.spacer);
-        mSpacer.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                if (isDigitsEmpty()) {
-                    if (getActivity() != null) {
-                        return ((HostInterface) getActivity()).onDialpadSpacerTouchWithEmptyQuery();
-                    }
-                    return true;
-                }
-                return false;
-            }
-        });
-
-        mDigits.setCursorVisible(false);
-
-        // Set up the "dialpad chooser" UI; see showDialpadChooser().
-        mDialpadChooser = (ListView) fragmentView.findViewById(R.id.dialpadChooser);
-        mDialpadChooser.setOnItemClickListener(this);
-
-        final View floatingActionButtonContainer =
-                fragmentView.findViewById(R.id.dialpad_floating_action_button_container);
-        final ImageButton floatingActionButton =
-                (ImageButton) fragmentView.findViewById(R.id.dialpad_floating_action_button);
-
-        /// M: Need to check if floatingActionButton is null. because in CT
-        // project, OP09 plugin will modify Dialpad layout and floatingActionButton
-        // will be null in that case. @{
-        if (null != floatingActionButton) {
-            floatingActionButton.setOnClickListener(this);
-            mFloatingActionButtonController = new FloatingActionButtonController(getActivity(),
-                    floatingActionButtonContainer, floatingActionButton);
-        }
-        /// @}
-
-        /// M: Fix CR ALPS01863413. Update text field view for ADN query.
-        SpecialCharSequenceMgr.updateTextFieldView(mDigits);
-
-        Trace.endSection();
-        Trace.endSection();
-        return fragmentView;
-    }
-
-    ///M: WFC @{
-   /* *
-      * Update the dialer icon based on WFC is registered or not.
-      *
-      */
-    private void updateWfcUI() {
-        final View floatingActionButton =
-                (ImageButton) getView().findViewById(R.id.dialpad_floating_action_button);
-        if (floatingActionButton != null) {
-            ImageView dialIcon = (ImageView) floatingActionButton;
-            PhoneAccountHandle defaultAccountHandle =
-                    TelecomUtil.getDefaultOutgoingPhoneAccount(getActivity(), SCHEME_TEL);
-            Log.d(TAG, "[WFC] defaultAccountHandle: " + defaultAccountHandle);
-            if (defaultAccountHandle != null) {
-                PhoneAccount phoneAccount = TelecomUtil.getPhoneAccount(getActivity(),
-                        defaultAccountHandle);
-                Log.d(TAG, "[WFC] Phone Account: " + phoneAccount);
-                if (phoneAccount != null){
-                  boolean wfcCapability = phoneAccount.hasCapabilities(
-                                                PhoneAccount.CAPABILITY_WIFI_CALLING);
-                  Log.d(TAG, "[WFC] WFC Capability: " + wfcCapability);
-                  if(wfcCapability){
-                      dialIcon.setImageDrawable(getResources()
-                              .getDrawable(R.drawable.mtk_fab_ic_wfc));
-                      Log.d(TAG, "[WFC] Dial Icon is changed to WFC dial icon");
-                  } else {
-                      dialIcon.setImageDrawable(getResources()
-                              .getDrawable(R.drawable.fab_ic_call));
-                  }
-                } else {
-                    dialIcon.setImageDrawable(getResources()
-                                           .getDrawable(R.drawable.fab_ic_call));
-                }
-            } else {
-                dialIcon.setImageDrawable(getResources().getDrawable(R.drawable.fab_ic_call));
-            }
-        }
-    }
-
-    private BroadcastReceiver mReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            String action = intent.getAction();
-            if (TelecomManagerEx.ACTION_PHONE_ACCOUNT_CHANGED.equals(action)
-                    || TelecomManagerEx.ACTION_DEFAULT_ACCOUNT_CHANGED.equals(action)) {
-                Log.i(TAG, "[WFC] Intent recived is " + intent.getAction());
-                updateWfcUI();
-            }
-        }
-    };
-    ///@}
-    private boolean isLayoutReady() {
-        return mDigits != null;
-    }
-
-    @VisibleForTesting
-    public EditText getDigitsWidget() {
-        return mDigits;
-    }
-
-    /**
-     * @return true when {@link #mDigits} is actually filled by the Intent.
-     */
-    private boolean fillDigitsIfNecessary(Intent intent) {
-        // Only fills digits from an intent if it is a new intent.
-        // Otherwise falls back to the previously used number.
-        if (!mFirstLaunch && !mStartedFromNewIntent) {
-            return false;
-        }
-
-        final String action = intent.getAction();
-        if (Intent.ACTION_DIAL.equals(action) || Intent.ACTION_VIEW.equals(action)) {
-            Uri uri = intent.getData();
-            if (uri != null) {
-                if (PhoneAccount.SCHEME_TEL.equals(uri.getScheme())) {
-                    // Put the requested number into the input area
-                    String data = uri.getSchemeSpecificPart();
-                    // Remember it is filled via Intent.
-                    mDigitsFilledByIntent = true;
-                    final String converted = PhoneNumberUtils.convertKeypadLettersToDigits(
-                            PhoneNumberUtils.replaceUnicodeDigits(data));
-                    setFormattedDigits(converted, null);
-                    return true;
-                } else {
-                    if (!PermissionsUtil.hasContactsPermissions(getActivity())) {
-                        return false;
-                    }
-                    String type = intent.getType();
-                    if (People.CONTENT_ITEM_TYPE.equals(type)
-                            || Phones.CONTENT_ITEM_TYPE.equals(type)) {
-                        // Query the phone number
-                        Cursor c = getActivity().getContentResolver().query(intent.getData(),
-                                new String[] {PhonesColumns.NUMBER, PhonesColumns.NUMBER_KEY},
-                                null, null, null);
-                        if (c != null) {
-                            try {
-                                if (c.moveToFirst()) {
-                                    // Remember it is filled via Intent.
-                                    mDigitsFilledByIntent = true;
-                                    // Put the number into the input area
-                                    setFormattedDigits(c.getString(0), c.getString(1));
-                                    return true;
-                                }
-                            } finally {
-                                c.close();
-                            }
-                        }
-                    }
-                }
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Determines whether an add call operation is requested.
-     *
-     * @param intent The intent.
-     * @return {@literal true} if add call operation was requested.  {@literal false} otherwise.
-     */
-    public static boolean isAddCallMode(Intent intent) {
-        if (intent == null) {
-            return false;
-        }
-        final String action = intent.getAction();
-        if (Intent.ACTION_DIAL.equals(action) || Intent.ACTION_VIEW.equals(action)) {
-            // see if we are "adding a call" from the InCallScreen; false by default.
-            return intent.getBooleanExtra(ADD_CALL_MODE_KEY, false);
-        } else {
-            return false;
-        }
-    }
-
-    /**
-     * Checks the given Intent and changes dialpad's UI state. For example, if the Intent requires
-     * the screen to enter "Add Call" mode, this method will show correct UI for the mode.
-     */
-    private void configureScreenFromIntent(Activity parent) {
-        // If we were not invoked with a DIAL intent,
-        if (!(parent instanceof DialtactsActivity)) {
-            setStartedFromNewIntent(false);
-            return;
-        }
-        // See if we were invoked with a DIAL intent. If we were, fill in the appropriate
-        // digits in the dialer field.
-        Intent intent = parent.getIntent();
-
-        if (!isLayoutReady()) {
-            // This happens typically when parent's Activity#onNewIntent() is called while
-            // Fragment#onCreateView() isn't called yet, and thus we cannot configure Views at
-            // this point. onViewCreate() should call this method after preparing layouts, so
-            // just ignore this call now.
-            Log.i(TAG,
-                    "Screen configuration is requested before onCreateView() is called. Ignored");
-            return;
-        }
-
-        boolean needToShowDialpadChooser = false;
-
-        // Be sure *not* to show the dialpad chooser if this is an
-        // explicit "Add call" action, though.
-        final boolean isAddCallMode = isAddCallMode(intent);
-        if (!isAddCallMode) {
-
-            // Don't show the chooser when called via onNewIntent() and phone number is present.
-            // i.e. User clicks a telephone link from gmail for example.
-            // In this case, we want to show the dialpad with the phone number.
-            final boolean digitsFilled = fillDigitsIfNecessary(intent);
-            if (!(mStartedFromNewIntent && digitsFilled)) {
-
-                final String action = intent.getAction();
-                if (Intent.ACTION_DIAL.equals(action) || Intent.ACTION_VIEW.equals(action)
-                        || Intent.ACTION_MAIN.equals(action)) {
-                    // If there's already an active call, bring up an intermediate UI to
-                    // make the user confirm what they really want to do.
-                    if (isPhoneInUse()) {
-                        needToShowDialpadChooser = true;
-                    }
-                }
-
-            }
-        }
-        showDialpadChooser(needToShowDialpadChooser);
-        setStartedFromNewIntent(false);
-    }
-
-    public void setStartedFromNewIntent(boolean value) {
-        mStartedFromNewIntent = value;
-    }
-
-    public void clearCallRateInformation() {
-        setCallRateInformation(null, null);
-    }
-
-    public void setCallRateInformation(String countryName, String displayRate) {
-        mDialpadView.setCallRateInformation(countryName, displayRate);
-    }
-
-    /**
-     * Sets formatted digits to digits field.
-     */
-    private void setFormattedDigits(String data, String normalizedNumber) {
-        final String formatted = getFormattedDigits(data, normalizedNumber, mCurrentCountryIso);
-        if (!TextUtils.isEmpty(formatted)) {
-            Editable digits = mDigits.getText();
-            digits.replace(0, digits.length(), formatted);
-            // for some reason this isn't getting called in the digits.replace call above..
-            // but in any case, this will make sure the background drawable looks right
-            afterTextChanged(digits);
-        }
-    }
-
-    /**
-     * Format the provided string of digits into one that represents a properly formatted phone
-     * number.
-     *
-     * @param dialString String of characters to format
-     * @param normalizedNumber the E164 format number whose country code is used if the given
-     *         phoneNumber doesn't have the country code.
-     * @param countryIso The country code representing the format to use if the provided normalized
-     *         number is null or invalid.
-     * @return the provided string of digits as a formatted phone number, retaining any
-     *         post-dial portion of the string.
-     */
-    @VisibleForTesting
-    static String getFormattedDigits(String dialString, String normalizedNumber, String countryIso) {
-        String number = PhoneNumberUtils.extractNetworkPortion(dialString);
-        // Also retrieve the post dial portion of the provided data, so that the entire dial
-        // string can be reconstituted later.
-        final String postDial = PhoneNumberUtils.extractPostDialPortion(dialString);
-
-        if (TextUtils.isEmpty(number)) {
-            return postDial;
-        }
-
-        number = PhoneNumberUtils.formatNumber(number, normalizedNumber, countryIso);
-
-        if (TextUtils.isEmpty(postDial)) {
-            return number;
-        }
-
-        return number.concat(postDial);
-    }
-
-    private void configureKeypadListeners(View fragmentView) {
-        final int[] buttonIds = new int[] {R.id.one, R.id.two, R.id.three, R.id.four, R.id.five,
-                R.id.six, R.id.seven, R.id.eight, R.id.nine, R.id.star, R.id.zero, R.id.pound};
-
-        DialpadKeyButton dialpadKey;
-
-        for (int i = 0; i < buttonIds.length; i++) {
-            dialpadKey = (DialpadKeyButton) fragmentView.findViewById(buttonIds[i]);
-            dialpadKey.setOnPressedListener(this);
-        }
-
-        // Long-pressing one button will initiate Voicemail.
-        final DialpadKeyButton one = (DialpadKeyButton) fragmentView.findViewById(R.id.one);
-        one.setOnLongClickListener(this);
-
-        // Long-pressing zero button will enter '+' instead.
-        final DialpadKeyButton zero = (DialpadKeyButton) fragmentView.findViewById(R.id.zero);
-        zero.setOnLongClickListener(this);
-    }
-
-    @Override
-    public void onStart() {
-        Trace.beginSection(TAG + " onStart");
-        super.onStart();
-        // if the mToneGenerator creation fails, just continue without it.  It is
-        // a local audio signal, and is not as important as the dtmf tone itself.
-        final long start = System.currentTimeMillis();
-        synchronized (mToneGeneratorLock) {
-            if (mToneGenerator == null) {
-                try {
-                    mToneGenerator = new ToneGenerator(DIAL_TONE_STREAM_TYPE, TONE_RELATIVE_VOLUME);
-                } catch (RuntimeException e) {
-                    Log.w(TAG, "Exception caught while creating local tone generator: " + e);
-                    mToneGenerator = null;
-                }
-            }
-        }
-        final long total = System.currentTimeMillis() - start;
-        if (total > 50) {
-            Log.i(TAG, "Time for ToneGenerator creation: " + total);
-        }
-        Trace.endSection();
-    };
-
-    @Override
-    public void onResume() {
-        Trace.beginSection(TAG + " onResume");
-        super.onResume();
-
-        /// M: [VoLTE ConfCall] initialize value about conference call capability.
-        mVolteConfCallEnabled = supportOneKeyConference(getActivity());
-        Log.d(TAG, "onResume mVolteConfCallEnabled = " + mVolteConfCallEnabled);
-
-        final DialtactsActivity activity = (DialtactsActivity) getActivity();
-        mDialpadQueryListener = activity;
-
-        final StopWatch stopWatch = StopWatch.start("Dialpad.onResume");
-
-        // Query the last dialed number. Do it first because hitting
-        // the DB is 'slow'. This call is asynchronous.
-        queryLastOutgoingCall();
-
-        stopWatch.lap("qloc");
-
-        final ContentResolver contentResolver = activity.getContentResolver();
-
-        /// M: [ALPS01858019] add listener to observer CallLog changes
-        contentResolver.registerContentObserver(CallLog.CONTENT_URI, true, mCallLogObserver);
-
-        // retrieve the DTMF tone play back setting.
-        mDTMFToneEnabled = Settings.System.getInt(contentResolver,
-                Settings.System.DTMF_TONE_WHEN_DIALING, 1) == 1;
-
-        stopWatch.lap("dtwd");
-
-        stopWatch.lap("hptc");
-
-        mPressedDialpadKeys.clear();
-
-        configureScreenFromIntent(getActivity());
-
-        stopWatch.lap("fdin");
-
-        if (!isPhoneInUse()) {
-            // A sanity-check: the "dialpad chooser" UI should not be visible if the phone is idle.
-            showDialpadChooser(false);
-        }
-
-        ///M: WFC @{
-        updateWfcUI();
-        ///@}
-        stopWatch.lap("hnt");
-
-        updateDeleteButtonEnabledState();
-
-        stopWatch.lap("bes");
-
-        stopWatch.stopAndLog(TAG, 50);
-
-        // Populate the overflow menu in onResume instead of onCreate, so that if the SMS activity
-        // is disabled while Dialer is paused, the "Send a text message" option can be correctly
-        // removed when resumed.
-        mOverflowMenuButton = mDialpadView.getOverflowMenuButton();
-        mOverflowPopupMenu = buildOptionsMenu(mOverflowMenuButton);
-        mOverflowMenuButton.setOnTouchListener(mOverflowPopupMenu.getDragToOpenListener());
-        mOverflowMenuButton.setOnClickListener(this);
-        mOverflowMenuButton.setVisibility(isDigitsEmpty() ? View.INVISIBLE : View.VISIBLE);
-        /** M: [VoLTE ConfCall] Always show overflow menu button for conf call. @{ */
-        if (mVolteConfCallEnabled) {
-            mOverflowMenuButton.setVisibility(View.VISIBLE);
-            mOverflowMenuButton.setAlpha(1);
-        }
-        /** @} */
-
-        if (mFirstLaunch) {
-            // The onHiddenChanged callback does not get called the first time the fragment is
-            // attached, so call it ourselves here.
-            onHiddenChanged(false);
-        }
-
-        /// M: for Plug-in @{
-        ExtensionManager.getInstance().getDialPadExtension().onResume();
-        /// @}
-
-        mFirstLaunch = false;
-        Trace.endSection();
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-
-        // M: dismiss popup menu, in case of memory leak @{
-        if(mOverflowPopupMenu != null) {
-            mOverflowPopupMenu.dismiss();
-        }
-        // @}
-        // Make sure we don't leave this activity with a tone still playing.
-        stopTone();
-        mPressedDialpadKeys.clear();
-
-        // TODO: I wonder if we should not check if the AsyncTask that
-        // lookup the last dialed number has completed.
-        mLastNumberDialed = EMPTY_NUMBER;  // Since we are going to query again, free stale number.
-
-        SpecialCharSequenceMgr.cleanup();
-
-        /// M: [ALPS01858019] add unregister the call log observer.
-        getActivity().getContentResolver().unregisterContentObserver(mCallLogObserver);
-    }
-
-    @Override
-    public void onStop() {
-        super.onStop();
-
-        synchronized (mToneGeneratorLock) {
-            if (mToneGenerator != null) {
-                mToneGenerator.release();
-                mToneGenerator = null;
-            }
-        }
-
-        if (mClearDigitsOnStop) {
-            mClearDigitsOnStop = false;
-            clearDialpad();
-        }
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        outState.putBoolean(PREF_DIGITS_FILLED_BY_INTENT, mDigitsFilledByIntent);
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        if (mPseudoEmergencyAnimator != null) {
-            mPseudoEmergencyAnimator.destroy();
-            mPseudoEmergencyAnimator = null;
-        }
-        ((Context) getActivity()).unregisterReceiver(mCallStateReceiver);
-        /// M: for plug-in. @{
-        ExtensionManager.getInstance().getDialPadExtension().onDestroy();
-        /// @}
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-        ///M: WFC @{
-        mContext.unregisterReceiver(mReceiver);
-        ///@}
-    }
-    private void keyPressed(int keyCode) {
-        if (getView() == null || getView().getTranslationY() != 0) {
-            return;
-        }
-        switch (keyCode) {
-            case KeyEvent.KEYCODE_1:
-                playTone(ToneGenerator.TONE_DTMF_1, TONE_LENGTH_INFINITE);
-                break;
-            case KeyEvent.KEYCODE_2:
-                playTone(ToneGenerator.TONE_DTMF_2, TONE_LENGTH_INFINITE);
-                break;
-            case KeyEvent.KEYCODE_3:
-                playTone(ToneGenerator.TONE_DTMF_3, TONE_LENGTH_INFINITE);
-                break;
-            case KeyEvent.KEYCODE_4:
-                playTone(ToneGenerator.TONE_DTMF_4, TONE_LENGTH_INFINITE);
-                break;
-            case KeyEvent.KEYCODE_5:
-                playTone(ToneGenerator.TONE_DTMF_5, TONE_LENGTH_INFINITE);
-                break;
-            case KeyEvent.KEYCODE_6:
-                playTone(ToneGenerator.TONE_DTMF_6, TONE_LENGTH_INFINITE);
-                break;
-            case KeyEvent.KEYCODE_7:
-                playTone(ToneGenerator.TONE_DTMF_7, TONE_LENGTH_INFINITE);
-                break;
-            case KeyEvent.KEYCODE_8:
-                playTone(ToneGenerator.TONE_DTMF_8, TONE_LENGTH_INFINITE);
-                break;
-            case KeyEvent.KEYCODE_9:
-                playTone(ToneGenerator.TONE_DTMF_9, TONE_LENGTH_INFINITE);
-                break;
-            case KeyEvent.KEYCODE_0:
-                playTone(ToneGenerator.TONE_DTMF_0, TONE_LENGTH_INFINITE);
-                break;
-            case KeyEvent.KEYCODE_POUND:
-                playTone(ToneGenerator.TONE_DTMF_P, TONE_LENGTH_INFINITE);
-                break;
-            case KeyEvent.KEYCODE_STAR:
-                playTone(ToneGenerator.TONE_DTMF_S, TONE_LENGTH_INFINITE);
-                break;
-            default:
-                break;
-        }
-
-        getView().performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
-        KeyEvent event = new KeyEvent(KeyEvent.ACTION_DOWN, keyCode);
-        mDigits.onKeyDown(keyCode, event);
-
-        // If the cursor is at the end of the text we hide it.
-        final int length = mDigits.length();
-        if (length == mDigits.getSelectionStart() && length == mDigits.getSelectionEnd()) {
-            mDigits.setCursorVisible(false);
-        }
-    }
-
-    @Override
-    public boolean onKey(View view, int keyCode, KeyEvent event) {
-        if (view.getId() == R.id.digits) {
-            if (keyCode == KeyEvent.KEYCODE_ENTER) {
-                handleDialButtonPressed();
-                return true;
-            }
-
-        }
-        return false;
-    }
-
-    /**
-     * When a key is pressed, we start playing DTMF tone, do vibration, and enter the digit
-     * immediately. When a key is released, we stop the tone. Note that the "key press" event will
-     * be delivered by the system with certain amount of delay, it won't be synced with user's
-     * actual "touch-down" behavior.
-     */
-    @Override
-    public void onPressed(View view, boolean pressed) {
-        /** M: Prevent the event if dialpad is not shown. @{ */
-        if (pressed && getActivity() != null
-                && !((DialtactsActivity)getActivity()).isDialpadShown()) {
-            Log.d(TAG, "onPressed but dialpad is not shown, skip !!!");
-            return;
-        }
-        /** @} */
-        if (DEBUG) Log.d(TAG, "onPressed(). view: " + view + ", pressed: " + pressed);
-        if (pressed) {
-            int resId = view.getId();
-            if (resId == R.id.one) {
-                keyPressed(KeyEvent.KEYCODE_1);
-            } else if (resId == R.id.two) {
-                keyPressed(KeyEvent.KEYCODE_2);
-            } else if (resId == R.id.three) {
-                keyPressed(KeyEvent.KEYCODE_3);
-            } else if (resId == R.id.four) {
-                keyPressed(KeyEvent.KEYCODE_4);
-            } else if (resId == R.id.five) {
-                keyPressed(KeyEvent.KEYCODE_5);
-            } else if (resId == R.id.six) {
-                keyPressed(KeyEvent.KEYCODE_6);
-            } else if (resId == R.id.seven) {
-                keyPressed(KeyEvent.KEYCODE_7);
-            } else if (resId == R.id.eight) {
-                keyPressed(KeyEvent.KEYCODE_8);
-            } else if (resId == R.id.nine) {
-                keyPressed(KeyEvent.KEYCODE_9);
-            } else if (resId == R.id.zero) {
-                keyPressed(KeyEvent.KEYCODE_0);
-            } else if (resId == R.id.pound) {
-                keyPressed(KeyEvent.KEYCODE_POUND);
-            } else if (resId == R.id.star) {
-                keyPressed(KeyEvent.KEYCODE_STAR);
-            } else {
-                Log.wtf(TAG, "Unexpected onTouch(ACTION_DOWN) event from: " + view);
-            }
-            mPressedDialpadKeys.add(view);
-        } else {
-            mPressedDialpadKeys.remove(view);
-            if (mPressedDialpadKeys.isEmpty()) {
-                stopTone();
-            }
-        }
-    }
-
-    /**
-     * Called by the containing Activity to tell this Fragment to build an overflow options
-     * menu for display by the container when appropriate.
-     *
-     * @param invoker the View that invoked the options menu, to act as an anchor location.
-     */
-    private PopupMenu buildOptionsMenu(View invoker) {
-        final PopupMenu popupMenu = new PopupMenu(getActivity(), invoker) {
-            @Override
-            public void show() {
-                final Menu menu = getMenu();
-
-                boolean enable = !isDigitsEmpty();
-                for (int i = 0; i < menu.size(); i++) {
-                    MenuItem item = menu.getItem(i);
-                    /// M: [VoLTE ConfCall] Change visible to hide some menu instead of setEnable()
-                    item.setVisible(enable);
-                    if (item.getItemId() == R.id.menu_call_with_note) {
-                        item.setVisible(CallUtil.isCallWithSubjectSupported(getContext()));
-                    }
-                }
-                /** M: [IP Dial] Check whether to show button @{ */
-                //menu.findItem(R.id.menu_ip_dial).setVisible(
-                //        DialerFeatureOptions.isIpPrefixSupport() && enable
-                //       && !PhoneNumberHelper.isUriNumber(mDigits.getText().toString()));
-                menu.findItem(R.id.menu_ip_dial).setVisible(false);
-                /** @} */
-                /** M: [VoLTE ConfCall] Show conference call menu for volte. @{ */
-                mVolteConfCallEnabled = supportOneKeyConference(getActivity());
-                boolean visible = mVolteConfCallEnabled;
-                Log.d(TAG, "buildOptionsMenu, mVolteConfCallEnabled = " + mVolteConfCallEnabled);
-                menu.findItem(R.id.menu_volte_conf_call).setVisible(visible);
-                /** @} */
-
-                super.show();
-            }
-        };
-        popupMenu.inflate(R.menu.dialpad_options);
-        popupMenu.setOnMenuItemClickListener(this);
-        return popupMenu;
-    }
-
-    @Override
-    public void onClick(View view) {
-        /** M: Prevent the event if dialpad is not shown. @{ */
-        if (getActivity() != null
-                && !((DialtactsActivity)getActivity()).isDialpadShown()) {
-            Log.d(TAG, "onClick but dialpad is not shown, skip !!!");
-            return;
-        }
-        /** @} */
-        int resId = view.getId();
-        if (resId == R.id.dialpad_floating_action_button) {
-            view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
-            handleDialButtonPressed();
-        } else if (resId == R.id.deleteButton) {
-            keyPressed(KeyEvent.KEYCODE_DEL);
-        } else if (resId == R.id.digits) {
-            if (!isDigitsEmpty()) {
-                mDigits.setCursorVisible(true);
-            }
-        } else if (resId == R.id.dialpad_overflow) {
-            /// M: for plug-in @{
-            ExtensionManager.getInstance().getDialPadExtension().constructPopupMenu(
-                    mOverflowPopupMenu, mOverflowMenuButton, mOverflowPopupMenu.getMenu());
-            /// @}
-            mOverflowPopupMenu.show();
-        } else {
-            Log.wtf(TAG, "Unexpected onClick() event from: " + view);
-            return;
-        }
-    }
-
-    @Override
-    public boolean onLongClick(View view) {
-        final Editable digits = mDigits.getText();
-        final int id = view.getId();
-        if (id == R.id.deleteButton) {
-            digits.clear();
-            return true;
-        } else if (id == R.id.one) {
-            if (isDigitsEmpty() || TextUtils.equals(mDigits.getText(), "1")) {
-                // We'll try to initiate voicemail and thus we want to remove irrelevant string.
-                removePreviousDigitIfPossible('1');
-
-                List<PhoneAccountHandle> subscriptionAccountHandles =
-                        PhoneAccountUtils.getSubscriptionPhoneAccounts(getActivity());
-                boolean hasUserSelectedDefault = subscriptionAccountHandles.contains(
-                        TelecomUtil.getDefaultOutgoingPhoneAccount(getActivity(),
-                                PhoneAccount.SCHEME_VOICEMAIL));
-                boolean needsAccountDisambiguation = subscriptionAccountHandles.size() > 1
-                        && !hasUserSelectedDefault;
-
-                if (needsAccountDisambiguation || isVoicemailAvailable()) {
-                    // On a multi-SIM phone, if the user has not selected a default
-                    // subscription, initiate a call to voicemail so they can select an account
-                    // from the "Call with" dialog.
-                    callVoicemail();
-                } else if (getActivity() != null) {
-                    // Voicemail is unavailable maybe because Airplane mode is turned on.
-                    // Check the current status and show the most appropriate error message.
-                    final boolean isAirplaneModeOn =
-                            Settings.System.getInt(getActivity().getContentResolver(),
-                                    Settings.System.AIRPLANE_MODE_ON, 0) != 0;
-                    if (isAirplaneModeOn) {
-                        DialogFragment dialogFragment = ErrorDialogFragment.newInstance(
-                                R.string.dialog_voicemail_airplane_mode_message);
-                        dialogFragment.show(getFragmentManager(),
-                                "voicemail_request_during_airplane_mode");
-                    } else {
-                        DialogFragment dialogFragment = ErrorDialogFragment.newInstance(
-                                R.string.dialog_voicemail_not_ready_message);
-                        dialogFragment.show(getFragmentManager(), "voicemail_not_ready");
-                    }
-                }
-                return true;
-            }
-            return false;
-        } else if (id == R.id.zero) {
-            if (mPressedDialpadKeys.contains(view)) {
-                // If the zero key is currently pressed, then the long press occurred by touch
-                // (and not via other means like certain accessibility input methods).
-                // Remove the '0' that was input when the key was first pressed.
-                removePreviousDigitIfPossible('0');
-            }
-            keyPressed(KeyEvent.KEYCODE_PLUS);
-            stopTone();
-            mPressedDialpadKeys.remove(view);
-            return true;
-        } else if (id == R.id.digits) {
-            mDigits.setCursorVisible(true);
-            return false;
-        }
-        return false;
-    }
-
-    /**
-     * Remove the digit just before the current position of the cursor, iff the following conditions
-     *  are true:
-     * 1) The cursor is not positioned at index 0.
-     * 2) The digit before the current cursor position matches the current digit.
-     *
-     * @param digit to remove from the digits view.
-     */
-    private void removePreviousDigitIfPossible(char digit) {
-        final int currentPosition = mDigits.getSelectionStart();
-        if (currentPosition > 0 && digit == mDigits.getText().charAt(currentPosition - 1)) {
-            mDigits.setSelection(currentPosition);
-            mDigits.getText().delete(currentPosition - 1, currentPosition);
-        }
-    }
-
-    public void callVoicemail() {
-        DialerUtils.startActivityWithErrorToast(getActivity(),
-                new CallIntentBuilder(CallUtil.getVoicemailUri())
-                        .setCallInitiationType(LogState.INITIATION_DIALPAD)
-                        .build());
-        hideAndClearDialpad(false);
-    }
-
-    private void hideAndClearDialpad(boolean animate) {
-        /// M: Avoid type Incompatible and NPE error @{
-        if (getActivity() instanceof DialtactsActivity) {
-            ((DialtactsActivity) getActivity()).hideDialpadFragment(animate, true);
-        }
-        /// @}
-    }
-
-    public static class ErrorDialogFragment extends DialogFragment {
-        private int mTitleResId;
-        private int mMessageResId;
-
-        private static final String ARG_TITLE_RES_ID = "argTitleResId";
-        private static final String ARG_MESSAGE_RES_ID = "argMessageResId";
-
-        public static ErrorDialogFragment newInstance(int messageResId) {
-            return newInstance(0, messageResId);
-        }
-
-        public static ErrorDialogFragment newInstance(int titleResId, int messageResId) {
-            final ErrorDialogFragment fragment = new ErrorDialogFragment();
-            final Bundle args = new Bundle();
-            args.putInt(ARG_TITLE_RES_ID, titleResId);
-            args.putInt(ARG_MESSAGE_RES_ID, messageResId);
-            fragment.setArguments(args);
-            return fragment;
-        }
-
-        @Override
-        public void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-            mTitleResId = getArguments().getInt(ARG_TITLE_RES_ID);
-            mMessageResId = getArguments().getInt(ARG_MESSAGE_RES_ID);
-        }
-
-        @Override
-        public Dialog onCreateDialog(Bundle savedInstanceState) {
-            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
-            if (mTitleResId != 0) {
-                builder.setTitle(mTitleResId);
-            }
-            if (mMessageResId != 0) {
-                builder.setMessage(mMessageResId);
-            }
-            builder.setPositiveButton(android.R.string.ok,
-                    new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                dismiss();
-                            }
-                    });
-            return builder.create();
-        }
-    }
-
-    /**
-     * In most cases, when the dial button is pressed, there is a
-     * number in digits area. Pack it in the intent, start the
-     * outgoing call broadcast as a separate task and finish this
-     * activity.
-     *
-     * When there is no digit and the phone is CDMA and off hook,
-     * we're sending a blank flash for CDMA. CDMA networks use Flash
-     * messages when special processing needs to be done, mainly for
-     * 3-way or call waiting scenarios. Presumably, here we're in a
-     * special 3-way scenario where the network needs a blank flash
-     * before being able to add the new participant.  (This is not the
-     * case with all 3-way calls, just certain CDMA infrastructures.)
-     *
-     * Otherwise, there is no digit, display the last dialed
-     * number. Don't finish since the user may want to edit it. The
-     * user needs to press the dial button again, to dial it (general
-     * case described above).
-     */
-    private void handleDialButtonPressed() {
-        /// M: [IP Dial] add IP dial
-        handleDialButtonPressed(Constants.DIAL_NUMBER_INTENT_NORMAL);
-    }
-
-    private void handleDialButtonPressed(int type) {
-        if (isDigitsEmpty()) { // No number entered.
-            handleDialButtonClickWithEmptyDigits();
-        } else {
-            final String number = mDigits.getText().toString();
-
-            // "persist.radio.otaspdial" is a temporary hack needed for one carrier's automated
-            // test equipment.
-            // TODO: clean it up.
-            if (number != null
-                    && !TextUtils.isEmpty(mProhibitedPhoneNumberRegexp)
-                    && number.matches(mProhibitedPhoneNumberRegexp)) {
-                Log.i(TAG, "The phone number is prohibited explicitly by a rule.");
-                if (getActivity() != null) {
-                    DialogFragment dialogFragment = ErrorDialogFragment.newInstance(
-                            R.string.dialog_phone_call_prohibited_message);
-                    dialogFragment.show(getFragmentManager(), "phone_prohibited_dialog");
-                }
-
-                // Clear the digits just in case.
-                clearDialpad();
-            } else {
-                final Intent intent;
-                /** M: [IP Dial] check the type of call @{ */
-                if (type != Constants.DIAL_NUMBER_INTENT_NORMAL) {
-                    intent = IntentUtil.getCallIntent(IntentUtil.getCallUri(number),
-                            LogState.INITIATION_DIALPAD, type);
-                } else {
-                    intent = new CallIntentBuilder(number).
-                            setCallInitiationType(LogState.INITIATION_DIALPAD)
-                            .build();
-                }
-                /** @} */
-                DialerUtils.startActivityWithErrorToast(getActivity(), intent);
-                hideAndClearDialpad(false);
-
-            }
-        }
-    }
-
-    public void clearDialpad() {
-        if (mDigits != null) {
-            mDigits.getText().clear();
-        }
-    }
-
-    public void handleDialButtonClickWithEmptyDigits() {
-        /// M:refactor CDMA phone is in call check
-        if (isCdmaInCall()) {
-            // TODO: Move this logic into services/Telephony
-            //
-            // This is really CDMA specific. On GSM is it possible
-            // to be off hook and wanted to add a 3rd party using
-            // the redial feature.
-            startActivity(newFlashIntent());
-        } else {
-            if (!TextUtils.isEmpty(mLastNumberDialed)) {
-                // Recall the last number dialed.
-                mDigits.setText(mLastNumberDialed);
-
-                // ...and move the cursor to the end of the digits string,
-                // so you'll be able to delete digits using the Delete
-                // button (just as if you had typed the number manually.)
-                //
-                // Note we use mDigits.getText().length() here, not
-                // mLastNumberDialed.length(), since the EditText widget now
-                // contains a *formatted* version of mLastNumberDialed (due to
-                // mTextWatcher) and its length may have changed.
-                mDigits.setSelection(mDigits.getText().length());
-            } else {
-                // There's no "last number dialed" or the
-                // background query is still running. There's
-                // nothing useful for the Dial button to do in
-                // this case.  Note: with a soft dial button, this
-                // can never happens since the dial button is
-                // disabled under these conditons.
-                playTone(ToneGenerator.TONE_PROP_NACK);
-            }
-        }
-    }
-
-    /**
-     * Plays the specified tone for TONE_LENGTH_MS milliseconds.
-     */
-    private void playTone(int tone) {
-        playTone(tone, TONE_LENGTH_MS);
-    }
-
-    /**
-     * Play the specified tone for the specified milliseconds
-     *
-     * The tone is played locally, using the audio stream for phone calls.
-     * Tones are played only if the "Audible touch tones" user preference
-     * is checked, and are NOT played if the device is in silent mode.
-     *
-     * The tone length can be -1, meaning "keep playing the tone." If the caller does so, it should
-     * call stopTone() afterward.
-     *
-     * @param tone a tone code from {@link ToneGenerator}
-     * @param durationMs tone length.
-     */
-    private void playTone(int tone, int durationMs) {
-        // if local tone playback is disabled, just return.
-        if (!mDTMFToneEnabled) {
-            return;
-        }
-
-        // Also do nothing if the phone is in silent mode.
-        // We need to re-check the ringer mode for *every* playTone()
-        // call, rather than keeping a local flag that's updated in
-        // onResume(), since it's possible to toggle silent mode without
-        // leaving the current activity (via the ENDCALL-longpress menu.)
-        AudioManager audioManager =
-                (AudioManager) getActivity().getSystemService(Context.AUDIO_SERVICE);
-        int ringerMode = audioManager.getRingerMode();
-        if ((ringerMode == AudioManager.RINGER_MODE_SILENT)
-            || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
-            return;
-        }
-
-        synchronized (mToneGeneratorLock) {
-            if (mToneGenerator == null) {
-                Log.w(TAG, "playTone: mToneGenerator == null, tone: " + tone);
-                return;
-            }
-
-            // Start the new tone (will stop any playing tone)
-            mToneGenerator.startTone(tone, durationMs);
-        }
-    }
-
-    /**
-     * Stop the tone if it is played.
-     */
-    private void stopTone() {
-        // if local tone playback is disabled, just return.
-        if (!mDTMFToneEnabled) {
-            return;
-        }
-        synchronized (mToneGeneratorLock) {
-            if (mToneGenerator == null) {
-                Log.w(TAG, "stopTone: mToneGenerator == null");
-                return;
-            }
-            mToneGenerator.stopTone();
-        }
-    }
-
-    /**
-     * Brings up the "dialpad chooser" UI in place of the usual Dialer
-     * elements (the textfield/button and the dialpad underneath).
-     *
-     * We show this UI if the user brings up the Dialer while a call is
-     * already in progress, since there's a good chance we got here
-     * accidentally (and the user really wanted the in-call dialpad instead).
-     * So in this situation we display an intermediate UI that lets the user
-     * explicitly choose between the in-call dialpad ("Use touch tone
-     * keypad") and the regular Dialer ("Add call").  (Or, the option "Return
-     * to call in progress" just goes back to the in-call UI with no dialpad
-     * at all.)
-     *
-     * @param enabled If true, show the "dialpad chooser" instead
-     *                of the regular Dialer UI
-     */
-    private void showDialpadChooser(boolean enabled) {
-        if (getActivity() == null) {
-            return;
-        }
-        // Check if onCreateView() is already called by checking one of View objects.
-        if (!isLayoutReady()) {
-            return;
-        }
-
-        if (enabled) {
-            Log.d(TAG, "Showing dialpad chooser!");
-            if (mDialpadView != null) {
-                mDialpadView.setVisibility(View.GONE);
-            }
-
-            /// M: Need to check if floatingActionButton is null. because in CT
-            // project, OP09 plugin will modify Dialpad layout and floatingActionButton
-            // will be null in that case. @{
-            if (null != mFloatingActionButtonController) {
-                mFloatingActionButtonController.setVisible(false);
-            }
-            /// @}
-
-            mDialpadChooser.setVisibility(View.VISIBLE);
-
-            // Instantiate the DialpadChooserAdapter and hook it up to the
-            // ListView.  We do this only once.
-            if (mDialpadChooserAdapter == null) {
-                mDialpadChooserAdapter = new DialpadChooserAdapter(getActivity());
-            }
-            mDialpadChooser.setAdapter(mDialpadChooserAdapter);
-            /// M: fix for ALPS03445439 @{
-            if (getActivity() instanceof DialtactsActivity) {
-                ((DialtactsActivity) getActivity()).onDialpadShown();
-            }
-            mIsDialpadChooserShown = true;
-            /// @}
-        } else {
-            Log.d(TAG, "Displaying normal Dialer UI.");
-            if (mDialpadView != null) {
-                mDialpadView.setVisibility(View.VISIBLE);
-            } else {
-                mDigits.setVisibility(View.VISIBLE);
-            }
-
-            /**
-             * M: If the scaleOut() of FloatingActionButtonController be called
-             * at previous, the floating button and container would all be set
-             * to GONE. But the setVisible() method only set the floating
-             * container to visible. So that the floating button is GONE yet.
-             * So, it should call the scaleIn() to make sure all of them be set
-             * to visible. @{
-             */
-            /*
-             * mFloatingActionButtonController.setVisible(true);
-             */
-
-            /// M: Need to check if floatingActionButton is null. because in CT
-            // project, OP09 plugin will modify Dialpad layout and floatingActionButton
-            // will be null in that case. @{
-            if (null != mFloatingActionButtonController) {
-                mFloatingActionButtonController.scaleIn(0);
-            }
-            /// @}
-
-            /** @} */
-            mDialpadChooser.setVisibility(View.GONE);
-            //if (getActivity() instanceof DialtactsActivity) {
-            //    ((DialtactsActivity) getActivity()).onDialpadShown();
-            //}
-            /// M: fix for ALPS03445439 @{
-            mIsDialpadChooserShown = false;
-            /// @}
-        }
-
-        /// M: for plug-in @{
-        ExtensionManager.getInstance().getDialPadExtension().showDialpadChooser(enabled);
-        /// @}
-    }
-
-    /**
-     * @return true if we're currently showing the "dialpad chooser" UI.
-     */
-    private boolean isDialpadChooserVisible() {
-        return mDialpadChooser.getVisibility() == View.VISIBLE;
-    }
-
-    /**
-     * Simple list adapter, binding to an icon + text label
-     * for each item in the "dialpad chooser" list.
-     */
-    private static class DialpadChooserAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-
-        // Simple struct for a single "choice" item.
-        static class ChoiceItem {
-            String text;
-            Bitmap icon;
-            int id;
-
-            public ChoiceItem(String s, Bitmap b, int i) {
-                text = s;
-                icon = b;
-                id = i;
-            }
-        }
-
-        // IDs for the possible "choices":
-        static final int DIALPAD_CHOICE_USE_DTMF_DIALPAD = 101;
-        static final int DIALPAD_CHOICE_RETURN_TO_CALL = 102;
-        static final int DIALPAD_CHOICE_ADD_NEW_CALL = 103;
-
-        private static final int NUM_ITEMS = 3;
-        private ChoiceItem mChoiceItems[] = new ChoiceItem[NUM_ITEMS];
-
-        public DialpadChooserAdapter(Context context) {
-            // Cache the LayoutInflate to avoid asking for a new one each time.
-            mInflater = LayoutInflater.from(context);
-
-            // Initialize the possible choices.
-            // TODO: could this be specified entirely in XML?
-
-            // - "Use touch tone keypad"
-            mChoiceItems[0] = new ChoiceItem(
-                    context.getString(R.string.dialer_useDtmfDialpad),
-                    BitmapFactory.decodeResource(context.getResources(),
-                                                 R.drawable.ic_dialer_fork_tt_keypad),
-                    DIALPAD_CHOICE_USE_DTMF_DIALPAD);
-
-            // - "Return to call in progress"
-            mChoiceItems[1] = new ChoiceItem(
-                    context.getString(R.string.dialer_returnToInCallScreen),
-                    BitmapFactory.decodeResource(context.getResources(),
-                                                 R.drawable.ic_dialer_fork_current_call),
-                    DIALPAD_CHOICE_RETURN_TO_CALL);
-
-            // - "Add call"
-            mChoiceItems[2] = new ChoiceItem(
-                    context.getString(R.string.dialer_addAnotherCall),
-                    BitmapFactory.decodeResource(context.getResources(),
-                                                 R.drawable.ic_dialer_fork_add_call),
-                    DIALPAD_CHOICE_ADD_NEW_CALL);
-        }
-
-        @Override
-        public int getCount() {
-            return NUM_ITEMS;
-        }
-
-        /**
-         * Return the ChoiceItem for a given position.
-         */
-        @Override
-        public Object getItem(int position) {
-            return mChoiceItems[position];
-        }
-
-        /**
-         * Return a unique ID for each possible choice.
-         */
-        @Override
-        public long getItemId(int position) {
-            return position;
-        }
-
-        /**
-         * Make a view for each row.
-         */
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            // When convertView is non-null, we can reuse it (there's no need
-            // to reinflate it.)
-            if (convertView == null) {
-                convertView = mInflater.inflate(R.layout.dialpad_chooser_list_item, null);
-            }
-
-            TextView text = (TextView) convertView.findViewById(R.id.text);
-            text.setText(mChoiceItems[position].text);
-
-            ImageView icon = (ImageView) convertView.findViewById(R.id.icon);
-            icon.setImageBitmap(mChoiceItems[position].icon);
-
-            return convertView;
-        }
-    }
-
-    /**
-     * Handle clicks from the dialpad chooser.
-     */
-    @Override
-    public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
-        DialpadChooserAdapter.ChoiceItem item =
-                (DialpadChooserAdapter.ChoiceItem) parent.getItemAtPosition(position);
-        int itemId = item.id;
-        if (itemId == DialpadChooserAdapter.DIALPAD_CHOICE_USE_DTMF_DIALPAD) {// Log.i(TAG, "DIALPAD_CHOICE_USE_DTMF_DIALPAD");
-            // Fire off an intent to go back to the in-call UI
-            // with the dialpad visible.
-            returnToInCallScreen(true);
-        } else if (itemId == DialpadChooserAdapter.DIALPAD_CHOICE_RETURN_TO_CALL) {// Log.i(TAG, "DIALPAD_CHOICE_RETURN_TO_CALL");
-            // Fire off an intent to go back to the in-call UI
-            // (with the dialpad hidden).
-            returnToInCallScreen(false);
-        } else if (itemId == DialpadChooserAdapter.DIALPAD_CHOICE_ADD_NEW_CALL) {// Log.i(TAG, "DIALPAD_CHOICE_ADD_NEW_CALL");
-            // Ok, guess the user really did want to be here (in the
-            // regular Dialer) after all.  Bring back the normal Dialer UI.
-            showDialpadChooser(false);
-        } else {
-            Log.w(TAG, "onItemClick: unexpected itemId: " + itemId);
-        }
-    }
-
-    /**
-     * Returns to the in-call UI (where there's presumably a call in
-     * progress) in response to the user selecting "use touch tone keypad"
-     * or "return to call" from the dialpad chooser.
-     */
-    private void returnToInCallScreen(boolean showDialpad) {
-        TelecomUtil.showInCallScreen(getActivity(), showDialpad);
-
-        // Finally, finish() ourselves so that we don't stay on the
-        // activity stack.
-        // Note that we do this whether or not the showCallScreenWithDialpad()
-        // call above had any effect or not!  (That call is a no-op if the
-        // phone is idle, which can happen if the current call ends while
-        // the dialpad chooser is up.  In this case we can't show the
-        // InCallScreen, and there's no point staying here in the Dialer,
-        // so we just take the user back where he came from...)
-        getActivity().finish();
-    }
-
-    /**
-     * @return true if the phone is "in use", meaning that at least one line
-     *              is active (ie. off hook or ringing or dialing, or on hold).
-     */
-    private boolean isPhoneInUse() {
-        final Context context = getActivity();
-        if (context != null) {
-            return TelecomUtil.isInCall(context);
-        }
-        return false;
-    }
-
-    /**
-     * @return true if the phone is a CDMA phone type
-     */
-    private boolean phoneIsCdma() {
-        return getTelephonyManager().getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA;
-    }
-
-    @Override
-    public boolean onMenuItemClick(MenuItem item) {
-        int resId = item.getItemId();
-        if (resId == R.id.menu_2s_pause) {
-            updateDialString(PAUSE);
-            return true;
-        } else if (resId == R.id.menu_add_wait) {
-            updateDialString(WAIT);
-            return true;
-        /** M: [IP Dial] click IP dial on popup menu @{ */
-        } else if (resId == R.id.menu_ip_dial) {
-            return onIpDialMenuItemSelected();
-        /** @} */
-        /** M: [VoLTE ConfCall] handle conference call menu. @{ */
-        } else if (resId == R.id.menu_volte_conf_call) {
-            Activity activity = getActivity();
-            if (activity != null) {
-                DialerVolteUtils.handleMenuVolteConfCall(activity);
-            }
-            return true;
-        /** @} */
-        } else if (resId == R.id.menu_call_with_note) {
-            CallSubjectDialog.start(getActivity(), mDigits.getText().toString());
-            hideAndClearDialpad(false);
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-    /**
-     * Updates the dial string (mDigits) after inserting a Pause character (,)
-     * or Wait character (;).
-     */
-    private void updateDialString(char newDigit) {
-        if (newDigit != WAIT && newDigit != PAUSE) {
-            throw new IllegalArgumentException(
-                    "Not expected for anything other than PAUSE & WAIT");
-        }
-
-        int selectionStart;
-        int selectionEnd;
-
-        // SpannableStringBuilder editable_text = new SpannableStringBuilder(mDigits.getText());
-        int anchor = mDigits.getSelectionStart();
-        int point = mDigits.getSelectionEnd();
-
-        selectionStart = Math.min(anchor, point);
-        selectionEnd = Math.max(anchor, point);
-
-        if (selectionStart == -1) {
-            selectionStart = selectionEnd = mDigits.length();
-        }
-
-        Editable digits = mDigits.getText();
-
-        if (canAddDigit(digits, selectionStart, selectionEnd, newDigit)) {
-            digits.replace(selectionStart, selectionEnd, Character.toString(newDigit));
-
-            if (selectionStart != selectionEnd) {
-              // Unselect: back to a regular cursor, just pass the character inserted.
-              mDigits.setSelection(selectionStart + 1);
-            }
-        }
-    }
-
-    /**
-     * Update the enabledness of the "Dial" and "Backspace" buttons if applicable.
-     */
-    private void updateDeleteButtonEnabledState() {
-        if (getActivity() == null) {
-            return;
-        }
-        final boolean digitsNotEmpty = !isDigitsEmpty();
-        mDelete.setEnabled(digitsNotEmpty);
-    }
-
-    /**
-     * Handle transitions for the menu button depending on the state of the digits edit text.
-     * Transition out when going from digits to no digits and transition in when the first digit
-     * is pressed.
-     * @param transitionIn True if transitioning in, False if transitioning out
-     */
-    private void updateMenuOverflowButton(boolean transitionIn) {
-        /** M: [VoLTE ConfCall] Always show overflow menu button for conf call. @{ */
-        if (mVolteConfCallEnabled) {
-            return;
-        }
-        /** @} */
-        mOverflowMenuButton = mDialpadView.getOverflowMenuButton();
-        if (transitionIn) {
-            AnimUtils.fadeIn(mOverflowMenuButton, AnimUtils.DEFAULT_DURATION);
-        } else {
-            AnimUtils.fadeOut(mOverflowMenuButton, AnimUtils.DEFAULT_DURATION);
-        }
-    }
-
-    /**
-     * Check if voicemail is enabled/accessible.
-     *
-     * @return true if voicemail is enabled and accessible. Note that this can be false
-     * "temporarily" after the app boot.
-     */
-    private boolean isVoicemailAvailable() {
-        try {
-            PhoneAccountHandle defaultUserSelectedAccount =
-                    TelecomUtil.getDefaultOutgoingPhoneAccount(getActivity(),
-                            PhoneAccount.SCHEME_VOICEMAIL);
-            if (defaultUserSelectedAccount == null) {
-                // In a single-SIM phone, there is no default outgoing phone account selected by
-                // the user, so just call TelephonyManager#getVoicemailNumber directly.
-                return !TextUtils.isEmpty(getTelephonyManager().getVoiceMailNumber());
-            } else {
-                return !TextUtils.isEmpty(TelecomUtil.getVoicemailNumber(getActivity(),
-                        defaultUserSelectedAccount));
-            }
-        } catch (SecurityException se) {
-            // Possibly no READ_PHONE_STATE privilege.
-            Log.w(TAG, "SecurityException is thrown. Maybe privilege isn't sufficient.");
-        }
-        return false;
-    }
-
-    /**
-     * Returns true of the newDigit parameter can be added at the current selection
-     * point, otherwise returns false.
-     * Only prevents input of WAIT and PAUSE digits at an unsupported position.
-     * Fails early if start == -1 or start is larger than end.
-     */
-    @VisibleForTesting
-    /* package */ static boolean canAddDigit(CharSequence digits, int start, int end,
-                                             char newDigit) {
-        if(newDigit != WAIT && newDigit != PAUSE) {
-            throw new IllegalArgumentException(
-                    "Should not be called for anything other than PAUSE & WAIT");
-        }
-
-        // False if no selection, or selection is reversed (end < start)
-        if (start == -1 || end < start) {
-            return false;
-        }
-
-        // unsupported selection-out-of-bounds state
-        if (start > digits.length() || end > digits.length()) return false;
-
-        // Special digit cannot be the first digit
-        if (start == 0) return false;
-
-        if (newDigit == WAIT) {
-            // preceding char is ';' (WAIT)
-            if (digits.charAt(start - 1) == WAIT) return false;
-
-            // next char is ';' (WAIT)
-            if ((digits.length() > end) && (digits.charAt(end) == WAIT)) return false;
-        }
-
-        return true;
-    }
-
-    /**
-     * @return true if the widget with the phone number digits is empty.
-     */
-    private boolean isDigitsEmpty() {
-        return mDigits.length() == 0;
-    }
-
-    /**
-     * Starts the asyn query to get the last dialed/outgoing
-     * number. When the background query finishes, mLastNumberDialed
-     * is set to the last dialed number or an empty string if none
-     * exists yet.
-     */
-    private void queryLastOutgoingCall() {
-        mLastNumberDialed = EMPTY_NUMBER;
-        if (!PermissionsUtil.hasPhonePermissions(getActivity())) {
-            return;
-        }
-        CallLogAsync.GetLastOutgoingCallArgs lastCallArgs =
-                new CallLogAsync.GetLastOutgoingCallArgs(
-                    getActivity(),
-                    new CallLogAsync.OnLastOutgoingCallComplete() {
-                        @Override
-                        public void lastOutgoingCall(String number) {
-                            // TODO: Filter out emergency numbers if
-                            // the carrier does not want redial for
-                            // these.
-                            // If the fragment has already been detached since the last time
-                            // we called queryLastOutgoingCall in onResume there is no point
-                            // doing anything here.
-                            if (getActivity() == null) return;
-                            mLastNumberDialed = number;
-                            updateDeleteButtonEnabledState();
-                        }
-                    });
-        mCallLog.getLastOutgoingCall(lastCallArgs);
-    }
-
-    private Intent newFlashIntent() {
-        final Intent intent = new CallIntentBuilder(EMPTY_NUMBER).build();
-        intent.putExtra(EXTRA_SEND_EMPTY_FLASH, true);
-        return intent;
-    }
-
-    @Override
-    public void onHiddenChanged(boolean hidden) {
-        super.onHiddenChanged(hidden);
-        final DialtactsActivity activity = (DialtactsActivity) getActivity();
-        final DialpadView dialpadView = (DialpadView) getView().findViewById(R.id.dialpad_view);
-        if (activity == null) return;
-        if (!hidden && !isDialpadChooserVisible()) {
-            if (mAnimate) {
-                dialpadView.animateShow();
-            }
-
-            /// M: [VoLTE ConfCall] initialize value about conference call capability. @{
-            mVolteConfCallEnabled = supportOneKeyConference(getActivity());
-            Log.d(TAG, "onHiddenChanged false mVolteConfCallEnabled = " + mVolteConfCallEnabled);
-            // Always show overflow menu button for conf call, otherwise hide it.
-            if (mOverflowMenuButton != null) {
-                if (mVolteConfCallEnabled) {
-                    mOverflowMenuButton.setVisibility(View.VISIBLE);
-                    mOverflowMenuButton.setAlpha(1);
-                } else if (isDigitsEmpty()) {
-                    mOverflowMenuButton.setVisibility(View.INVISIBLE);
-                }
-            }
-            /// @}
-
-            /// M: Need to check if floatingActionButton is null. because in CT
-            // project, OP09 plugin will modify Dialpad layout and floatingActionButton
-            // will be null in that case. @{
-            if (null != mFloatingActionButtonController) {
-                mFloatingActionButtonController.setVisible(false);
-                mFloatingActionButtonController.scaleIn(mAnimate ? mDialpadSlideInDuration : 0);
-            }
-            /// @}
-
-            /// M: for Plug-in @{
-            ExtensionManager.getInstance().
-                    getDialPadExtension().onHiddenChanged(
-                            true, mAnimate ? mDialpadSlideInDuration : 0);
-            /// @}
-            activity.onDialpadShown();
-            mDigits.requestFocus();
-        }
-
-        /// M: Need to check if floatingActionButton is null. because in CT
-        // project, OP09 plugin will modify Dialpad layout and floatingActionButton
-        // will be null in that case. @{
-        if (hidden && null != mFloatingActionButtonController) {
-            if (mAnimate) {
-                mFloatingActionButtonController.scaleOut();
-            } else {
-                mFloatingActionButtonController.setVisible(false);
-            }
-        }
-        /// @}
-
-        /// M: for Plug-in @{
-        if (hidden && mAnimate) {
-            ExtensionManager.getInstance().
-                    getDialPadExtension().onHiddenChanged(false, 0);
-        }
-        /// @}
-    }
-
-    public void setAnimate(boolean value) {
-        mAnimate = value;
-    }
-
-    public boolean getAnimate() {
-        return mAnimate;
-    }
-
-    public void setYFraction(float yFraction) {
-        ((DialpadSlidingRelativeLayout) getView()).setYFraction(yFraction);
-    }
-
-    public int getDialpadHeight() {
-        if (mDialpadView == null) {
-            return 0;
-        }
-        /// M: fix for ALPS03445439 @{
-        if (mIsDialpadChooserShown && mDialpadChooser != null) {
-            return mDialpadChooser.getHeight();
-        }
-        ///@}
-        return mDialpadView.getHeight();
-    }
-
-    public void process_quote_emergency_unquote(String query) {
-        if (PseudoEmergencyAnimator.PSEUDO_EMERGENCY_NUMBER.equals(query)) {
-            if (mPseudoEmergencyAnimator == null) {
-                mPseudoEmergencyAnimator = new PseudoEmergencyAnimator(
-                        new PseudoEmergencyAnimator.ViewProvider() {
-                            @Override
-                            public View getView() {
-                                return DialpadFragment.this.getView();
-                            }
-                        });
-            }
-            mPseudoEmergencyAnimator.start();
-        } else {
-            if (mPseudoEmergencyAnimator != null) {
-                mPseudoEmergencyAnimator.end();
-            }
-        }
-    }
-
-    /** M: [IP Dial] add IP dial @{ */
-    protected boolean onIpDialMenuItemSelected() {
-        handleDialButtonPressed(Constants.DIAL_NUMBER_INTENT_IP);
-        return true;
-    }
-    /** @} */
-
-    /**
-     * M: add for plug-in.
-     */
-    @Override
-    public void doCallOptionHandle(Intent intent) {
-        DialerUtils.startActivityWithErrorToast(getActivity(), intent);
-        hideAndClearDialpad(false);
-    }
-
-   /**
-    * Shows WFC related notification on status bar when open DialpadFragment
-    *
-    */
-    public void showWfcNotification() {
-        Log.i(TAG, "[WFC]showWfcNotification ");
-        String wfcText = null;
-        String wfcTextSummary = null;
-        int wfcIcon = 0;
-        final int TIMER_COUNT = 2;
-        PhoneAccountHandle defaultAccountHandle =
-            TelecomUtil.getDefaultOutgoingPhoneAccount(getActivity(), SCHEME_TEL);
-        boolean isWfcEnabled = ( (TelephonyManager)mContext
-                .getSystemService(Context.TELEPHONY_SERVICE)).isWifiCallingAvailable();
-        if (isWfcEnabled) {
-            wfcText = mContext.getResources().getString(R.string.calls_over_wifi);
-            wfcIcon = com.mediatek.internal.R.drawable.wfc_notify_registration_success;
-            wfcTextSummary = mContext.getResources()
-                    .getString(R.string.wfc_notification_summary);
-        } else if (isSimPresent(mContext) && !isRatPresent(mContext)) {
-            Log.i(TAG, "[WFC]!isRatPresent(mContext) ");
-            wfcText = mContext.getResources().getString(R.string.connect_to_wifi);
-            wfcIcon = com.mediatek.internal.R.drawable.wfc_notify_registration_error;
-            wfcTextSummary = mContext.getResources()
-                    .getString(R.string.wfc_notification_summary_fail);
-        }
-        if (wfcText != null) {
-            Log.i(TAG, "[WFC]wfc_text " + wfcText);
-            mNotificationTimer = new Timer();
-            mNotificationManager =
-                    (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
-            mNotificationTimer.schedule(new TimerTask() {
-                @Override
-                public void run() {
-                    mNotificationCount ++;
-                    Log.i(TAG, "[WFC]count:" + mNotificationCount);
-                    if (mNotificationCount == TIMER_COUNT) {
-                        Log.i(TAG, "[WFC]Canceling notification on time expire mNotiCount"
-                                + mNotificationCount);
-                        stopWfcNotification();
-                    }
-                 }
-             }, 100, 100);
-            Notification noti = new Notification.Builder(mContext)
-                    .setContentTitle(wfcText)
-                    .setContentText(mContext.getResources()
-                            .getString(R.string.wfc_notification_summary))
-                    .setSmallIcon(wfcIcon)
-                    .setTicker(wfcText)
-                    .setOngoing(true)
-                    .build();
-            Log.i(TAG, "[WFC]Showing WFC notification");
-            mNotificationManager.notify(DIALPAD_WFC_NOTIFICATION_ID, noti);
-        } else {
-            return;
-        }
-    }
-
-
-   /**
-    * Removes the notification from status bar shown for WFC
-    *
-    */
-    public void stopWfcNotification() {
-        Log.i(TAG, "[WFC]canceling notification on stopNotification");
-        if (mNotificationTimer != null) {
-            mNotificationTimer.cancel();
-        };
-        mNotificationCount = 0;
-        if (mNotificationManager != null) {
-            mNotificationManager.cancel(DIALPAD_WFC_NOTIFICATION_ID);
-        }
-    }
-
-   /**
-    * Checks whether SIM is present or not
-    *
-    * @param context
-    */
-    private boolean isSimPresent(Context context) {
-        boolean ret = false;
-        int[] subs =
-                SubscriptionManager.from(context).getActiveSubscriptionIdList();
-        if (subs.length == 0) {
-            ret =  false;
-        } else {
-             ret = true;
-        }
-        Log.i(TAG, "[WFC]isSimPresent ret " + ret);
-        return ret;
-    }
-
-   /**
-    * Checks whether any of RAT present: 2G/3G/LTE/Wi-Fi
-    *
-    *@param context
-    */
-    private boolean isRatPresent(Context context) {
-        Log.i(TAG, "[WFC]isRatPresent");
-        int cellularState = ServiceState.STATE_IN_SERVICE;
-        ITelephonyEx telephonyEx = ITelephonyEx.Stub.asInterface(
-                ServiceManager.getService(Context.TELEPHONY_SERVICE_EX));
-        Bundle bundle = null;
-        try {
-            bundle = telephonyEx
-                    .getServiceState(SubscriptionManager.getDefaultVoiceSubscriptionId());
-        } catch (RemoteException e) {
-            e.printStackTrace();
-        }
-        if (bundle != null) {
-            cellularState = ServiceState.newFromBundle(bundle).getState();
-        }
-        Log.i(TAG, "[wfc]cellularState:" + cellularState);
-        WifiManager wifiManager =
-                (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
-        ConnectivityManager cm =
-                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
-        NetworkInfo wifi =
-                cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
-        if (wifi == null && cellularState != ServiceState.STATE_IN_SERVICE) {
-             Log.i(TAG, "[wfc]wifi=null,and cellularState != ServiceState.STATE_IN_SERVICE");
-             return false;
-        } else if (wifi == null && cellularState == ServiceState.STATE_IN_SERVICE) {
-            Log.i(TAG, "[wfc]wifi=null,but cellularState != ServiceState.STATE_IN_SERVICE");
-            return true;
-        }
-        Log.i(TAG, "[wfc]wifi state:" + wifiManager.getWifiState());
-        Log.i(TAG, "[wfc]wifi connected:" + wifi.isConnected());
-        if ((wifiManager.getWifiState() == WifiManager.WIFI_STATE_DISABLED
-                || (wifiManager.getWifiState() == WifiManager.WIFI_STATE_ENABLED
-                && !wifi.isConnected())) && cellularState != ServiceState.STATE_IN_SERVICE) {
-            Log.i(TAG, "[wfc]No RAT present");
-            return false;
-        } else {
-            Log.i(TAG, "[wfc]RAT present");
-            return true;
-        }
-    }
-    ///@}
-
-    /** M: [ALPS01858019] add listener observer CallLog changes. @{ */
-    private ContentObserver mCallLogObserver = new ContentObserver(new Handler()) {
-        public void onChange(boolean selfChange) {
-            if (DialpadFragment.this.isAdded()) {
-                Log.d(TAG, "Observered the CallLog changes. queryLastOutgoingCall");
-                queryLastOutgoingCall();
-            }
-        };
-    };
-    /** @} */
-
-    /** M: add for check CDMA phone is in call or not. @{ */
-    private boolean isCdmaInCall() {
-        for (int subId : SubscriptionManager.from(mContext).getActiveSubscriptionIdList()) {
-            if ((TelephonyManager.from(mContext).getCallState(subId)
-                    != TelephonyManager.CALL_STATE_IDLE)
-                    && (TelephonyManager.from(mContext).getCurrentPhoneType(subId)
-                    == TelephonyManager.PHONE_TYPE_CDMA)) {
-                Log.d(TAG, "Cdma In Call");
-                return true;
-            }
-        }
-        return false;
-    }
-    /** @} */
-
-    /**
-     * M: Checking whether the volte conference is supported or not.
-     * @param context
-     * @return ture if volte conference is supported
-     */
-    private boolean supportOneKeyConference(Context context) {
-        // We have to requery contacts numbers from provider now.
-        // Which requires contacts permissions.
-        final boolean hasContactsPermission =
-                PermissionsUtil.hasContactsPermissions(context);
-        return DialerVolteUtils.isVolteConfCallEnable(context) && hasContactsPermission;
-    }
-}
Index: vendor/branch/5058A_Claro/packages/apps/Settings/src/com/android/settings/DateTimeSettings.java
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Settings/src/com/android/settings/DateTimeSettings.java	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Settings/src/com/android/settings/DateTimeSettings.java	(revision 3018)
@@ -1,570 +0,0 @@
-/*
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.settings;
-
-import android.app.Activity;
-import android.app.AlarmManager;
-import android.app.AlertDialog;
-import android.app.DatePickerDialog;
-import android.app.DatePickerDialog.OnDateSetListener;
-import android.app.Dialog;
-import android.app.TimePickerDialog;
-import android.app.TimePickerDialog.OnTimeSetListener;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.DialogInterface.OnCancelListener;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.location.LocationManager;
-import android.os.Bundle;
-import android.os.UserManager;
-import android.provider.SearchIndexableResource;
-import android.provider.Settings;
-import android.provider.Settings.SettingNotFoundException;
-import android.support.v14.preference.SwitchPreference;
-import android.support.v7.preference.Preference;
-import android.support.v7.preference.Preference.OnPreferenceChangeListener;
-import android.text.format.DateFormat;
-import android.util.Log;
-import android.widget.DatePicker;
-import android.widget.TimePicker;
-import com.android.internal.logging.MetricsProto.MetricsEvent;
-import com.android.settings.dashboard.SummaryLoader;
-import com.android.settings.search.BaseSearchIndexProvider;
-import com.android.settings.search.Indexable;
-import com.android.settingslib.RestrictedLockUtils;
-import com.android.settingslib.RestrictedSwitchPreference;
-import com.android.settingslib.datetime.ZoneGetter;
-
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.List;
-import java.text.SimpleDateFormat;
-
-import com.mediatek.settingslib.RestrictedListPreference;
-import static com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
-
-public class DateTimeSettings extends SettingsPreferenceFragment
-        implements OnTimeSetListener, OnDateSetListener, OnPreferenceChangeListener, Indexable,
-        DialogInterface.OnClickListener, OnCancelListener {
-
-    private static final String TAG = "DateTimeSettings";
-
-    private static final String HOURS_12 = "12";
-    private static final String HOURS_24 = "24";
-
-    // Used for showing the current date format, which looks like "12/31/2010", "2010/12/13", etc.
-    // The date value is dummy (independent of actual date).
-    private Calendar mDummyDate;
-
-    /// M: modify as MTK add GPS time Sync feature
-    private static final String KEY_AUTO_TIME = "auto_time_list";
-    private static final String KEY_AUTO_TIME_ZONE = "auto_zone";
-    private static final String KEY_AUTO_TIME_DEF = "auto_time";
-
-    private static final int DIALOG_DATEPICKER = 0;
-    private static final int DIALOG_TIMEPICKER = 1;
-    
-    // have we been launched from the setup wizard?
-    protected static final String EXTRA_IS_FIRST_RUN = "firstRun";
-
-    // Minimum time is Nov 5, 2007, 0:00.
-    private static final long MIN_DATE = 1194220800000L;
-
-    /// M: modify as MTK add GPS time Sync feature
-    /// M: private RestrictedSwitchPreference mAutoTimePref;
-    private RestrictedListPreference mAutoTimePref;
-    private RestrictedSwitchPreference mAutoTimePrefDef;
-
-    private Preference mTimePref;
-    private Preference mTime24Pref;
-    private SwitchPreference mAutoTimeZonePref;
-    private Preference mTimeZone;
-    private Preference mDatePref;
-    private LocationManager mLocationManager = null;
-
-    /// M: add for GPS time sync feature @{
-    private static final int DIALOG_GPS_CONFIRM = 2;
-    private static final int AUTO_TIME_NETWORK_INDEX = 0;
-    private static final int AUTO_TIME_GPS_INDEX = 1;
-    private static final int AUTO_TIME_OFF_INDEX = 2;
-    /// @}
-
-    @Override
-    protected int getMetricsCategory() {
-        return MetricsEvent.DATE_TIME;
-    }
-
-    @Override
-    public void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-
-        addPreferencesFromResource(R.xml.date_time_prefs);
-
-        initUI();
-    }
-
-    private void initUI() {
-        boolean autoTimeEnabled = getAutoState(Settings.Global.AUTO_TIME);
-        boolean autoTimeZoneEnabled = getAutoState(Settings.Global.AUTO_TIME_ZONE);
-        mLocationManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);
-        mAutoTimePrefDef = null;
-        mAutoTimePref = null;
-        if (null == mLocationManager.getProvider(LocationManager.GPS_PROVIDER)) {
-            /// M: use google SwitchPerference instead of MTK RestrictedListPreference
-            mAutoTimePrefDef = (RestrictedSwitchPreference) findPreference(KEY_AUTO_TIME_DEF);
-            mAutoTimePrefDef.setOnPreferenceChangeListener(this);
-            EnforcedAdmin admin = RestrictedLockUtils.checkIfAutoTimeRequired(getActivity());
-            mAutoTimePrefDef.setDisabledByAdmin(admin);
-            mAutoTimePrefDef.setChecked(autoTimeEnabled);
-            mAutoTimePref = (RestrictedListPreference) findPreference(KEY_AUTO_TIME);
-            getPreferenceScreen().removePreference(mAutoTimePref);
-        } else {
-            /// M: MTK use RestrictedListPreference instead of google SwitchPerference
-            mAutoTimePref = (RestrictedListPreference) findPreference(KEY_AUTO_TIME);
-            mAutoTimePref.setOnPreferenceChangeListener(this);
-            EnforcedAdmin admin = RestrictedLockUtils.checkIfAutoTimeRequired(getActivity());
-            mAutoTimePref.setDisabledByAdmin(admin);
-            mAutoTimePrefDef = (RestrictedSwitchPreference) findPreference(KEY_AUTO_TIME_DEF);
-            getPreferenceScreen().removePreference(mAutoTimePrefDef);
-        }
-
-        Intent intent = getActivity().getIntent();
-        boolean isFirstRun = intent.getBooleanExtra(EXTRA_IS_FIRST_RUN, false);
-        boolean autoTimeGpsEnabled = getAutoState(Settings.System.AUTO_TIME_GPS);
-        mDummyDate = Calendar.getInstance();
-        if (null != mLocationManager.getProvider(LocationManager.GPS_PROVIDER)) {
-            /// M: MTK use RestrictedListPreference instead of google SwitchPerference @{
-            // If device admin requires auto time device policy manager will set
-            // Settings.Global.AUTO_TIME to true. Note that this app listens to that change.
-            int index = 0;
-            if (autoTimeEnabled) {
-                index = AUTO_TIME_NETWORK_INDEX;
-            } else if (autoTimeGpsEnabled) {
-                index = AUTO_TIME_GPS_INDEX;
-            } else {
-                index = AUTO_TIME_OFF_INDEX;
-            }
-            mAutoTimePref.setValueIndex(index);
-            mAutoTimePref.setSummary(mAutoTimePref.getEntries()[index]);
-            /// @}
-        }
-
-        mAutoTimeZonePref = (SwitchPreference) findPreference(KEY_AUTO_TIME_ZONE);
-        mAutoTimeZonePref.setOnPreferenceChangeListener(this);
-        // Override auto-timezone if it's a wifi-only device or if we're still in setup wizard.
-        // TODO: Remove the wifiOnly test when auto-timezone is implemented based on wifi-location.
-        if (Utils.isWifiOnly(getActivity()) || isFirstRun) {
-            getPreferenceScreen().removePreference(mAutoTimeZonePref);
-            autoTimeZoneEnabled = false;
-        }
-        mAutoTimeZonePref.setChecked(autoTimeZoneEnabled);
-
-        mTimePref = findPreference("time");
-        mTime24Pref = findPreference("24 hour");
-        mTimeZone = findPreference("timezone");
-        mDatePref = findPreference("date");
-        if (isFirstRun) {
-            getPreferenceScreen().removePreference(mTime24Pref);
-        }
-
-        /// M: modify as MTK add GPS time Sync feature
-        boolean autoEnabled = autoTimeEnabled || autoTimeGpsEnabled;
-        mTimePref.setEnabled(!autoEnabled);
-        mDatePref.setEnabled(!autoEnabled);
-        mTimeZone.setEnabled(!autoTimeZoneEnabled);
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-
-        ((SwitchPreference)mTime24Pref).setChecked(is24Hour());
-
-        // Register for time ticks and other reasons for time change
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(Intent.ACTION_TIME_TICK);
-        filter.addAction(Intent.ACTION_TIME_CHANGED);
-        filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
-        getActivity().registerReceiver(mIntentReceiver, filter, null, null);
-
-        updateTimeAndDateDisplay(getActivity());
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        getActivity().unregisterReceiver(mIntentReceiver);
-    }
-
-    public void updateTimeAndDateDisplay(Context context) {
-        final Calendar now = Calendar.getInstance();
-        mDummyDate.setTimeZone(now.getTimeZone());
-        // We use December 31st because it's unambiguous when demonstrating the date format.
-        // We use 13:00 so we can demonstrate the 12/24 hour options.
-        mDummyDate.set(now.get(Calendar.YEAR), 11, 31, 13, 0, 0);
-        Date dummyDate = mDummyDate.getTime();
-        //mDatePref.setSummary(DateFormat.getLongDateFormat(context).format(now.getTime()));
-        mDatePref.setSummary(dateToStrLong(now.getTime()));
-        mTimePref.setSummary(DateFormat.getTimeFormat(getActivity()).format(now.getTime()));
-        mTimeZone.setSummary(ZoneGetter.getTimeZoneOffsetAndName(now.getTimeZone(), now.getTime()));
-        mTime24Pref.setSummary(DateFormat.getTimeFormat(getActivity()).format(dummyDate));
-    }
-    public static String dateToStrLong(Date dateDate) {  
-        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/YYYY");  
-        String dateString = formatter.format(dateDate);  
-        return dateString;  
-    }
-
-    @Override
-    public void onDateSet(DatePicker view, int year, int month, int day) {
-        final Activity activity = getActivity();
-        if (activity != null) {
-            setDate(activity, year, month, day);
-            updateTimeAndDateDisplay(activity);
-        }
-    }
-
-    @Override
-    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
-        final Activity activity = getActivity();
-        if (activity != null) {
-            setTime(activity, hourOfDay, minute);
-            updateTimeAndDateDisplay(activity);
-        }
-
-        // We don't need to call timeUpdated() here because the TIME_CHANGED
-        // broadcast is sent by the AlarmManager as a side effect of setting the
-        // SystemClock time.
-    }
-
-    @Override
-    public boolean onPreferenceChange(Preference preference, Object newValue) {
-        if (preference.getKey().equals(KEY_AUTO_TIME_DEF)) {
-            boolean autoEnabled = (Boolean) newValue;
-            Settings.Global.putInt(getContentResolver(), Settings.Global.AUTO_TIME,
-                     autoEnabled ? 1 : 0);
-            mTimePref.setEnabled(!autoEnabled);
-            mDatePref.setEnabled(!autoEnabled);
-        } else if (preference.getKey().equals(KEY_AUTO_TIME)) {
-            /// M: modify as MTK add GPS time Sync feature @{
-            int index = Integer.parseInt(newValue.toString());
-            boolean autoEnabled = true;
-            if (index == AUTO_TIME_NETWORK_INDEX) {
-                Settings.Global.putInt(getContentResolver(),
-                        Settings.Global.AUTO_TIME, 1);
-                Settings.Global.putInt(getContentResolver(),
-                        Settings.System.AUTO_TIME_GPS, 0);
-            } else if (index == AUTO_TIME_GPS_INDEX) {
-                // showDialog(DIALOG_GPS_CONFIRM);
-                // setOnCancelListener(this);
-                Settings.Global.putInt(getContentResolver(),
-                        Settings.Global.AUTO_TIME, 0);
-                Settings.Global.putInt(getContentResolver(),
-                        Settings.System.AUTO_TIME_GPS, 1);
-            } else {
-                Settings.Global.putInt(getContentResolver(), Settings.Global.AUTO_TIME, 0);
-                Settings.Global.putInt(getContentResolver(), Settings.System.AUTO_TIME_GPS, 0);
-                autoEnabled = false;
-            }
-            mAutoTimePref.setSummary(mAutoTimePref.getEntries()[index]);
-            /// @}
-            mTimePref.setEnabled(!autoEnabled);
-            mDatePref.setEnabled(!autoEnabled);
-        } else if (preference.getKey().equals(KEY_AUTO_TIME_ZONE)) {
-            boolean autoZoneEnabled = (Boolean) newValue;
-            Settings.Global.putInt(
-                    getContentResolver(), Settings.Global.AUTO_TIME_ZONE, autoZoneEnabled ? 1 : 0);
-            mTimeZone.setEnabled(!autoZoneEnabled);
-        }
-        return true;
-    }
-
-    @Override
-    public Dialog onCreateDialog(int id) {
-        final Calendar calendar = Calendar.getInstance();
-        switch (id) {
-        case DIALOG_DATEPICKER:
-            DatePickerDialog d = new DatePickerDialog(
-                    getActivity(),
-                    this,
-                    calendar.get(Calendar.YEAR),
-                    calendar.get(Calendar.MONTH),
-                    calendar.get(Calendar.DAY_OF_MONTH));
-            configureDatePicker(d.getDatePicker());
-            return d;
-        case DIALOG_TIMEPICKER:
-            return new TimePickerDialog(
-                    getActivity(),
-                    this,
-                    calendar.get(Calendar.HOUR_OF_DAY),
-                    calendar.get(Calendar.MINUTE),
-                    DateFormat.is24HourFormat(getActivity()));
-        /// M: modify as MTK add GPS time Sync feature @{
-        case DIALOG_GPS_CONFIRM:
-            int msg;
-            if (Settings.Secure.isLocationProviderEnabled(getContentResolver(),
-                    LocationManager.GPS_PROVIDER)) {
-                msg = R.string.gps_time_sync_attention_gps_on;
-            } else {
-                msg = R.string.gps_time_sync_attention_gps_off;
-            }
-            return new AlertDialog.Builder(getActivity()).setMessage(
-                    getActivity().getResources().getString(msg)).setTitle(
-                    R.string.proxy_error).setIcon(
-                    android.R.drawable.ic_dialog_alert).setPositiveButton(
-                    android.R.string.yes, this).setNegativeButton(
-                    android.R.string.no, this).create();
-        /// @}
-        default:
-            throw new IllegalArgumentException();
-        }
-    }
-
-    static void configureDatePicker(DatePicker datePicker) {
-        // The system clock can't represent dates outside this range.
-        Calendar t = Calendar.getInstance();
-        t.clear();
-        t.set(1970, Calendar.JANUARY, 1);
-        datePicker.setMinDate(t.getTimeInMillis());
-        t.clear();
-        t.set(2037, Calendar.DECEMBER, 31);
-        datePicker.setMaxDate(t.getTimeInMillis());
-    }
-
-    /*
-    @Override
-    public void onPrepareDialog(int id, Dialog d) {
-        switch (id) {
-        case DIALOG_DATEPICKER: {
-            DatePickerDialog datePicker = (DatePickerDialog)d;
-            final Calendar calendar = Calendar.getInstance();
-            datePicker.updateDate(
-                    calendar.get(Calendar.YEAR),
-                    calendar.get(Calendar.MONTH),
-                    calendar.get(Calendar.DAY_OF_MONTH));
-            break;
-        }
-        case DIALOG_TIMEPICKER: {
-            TimePickerDialog timePicker = (TimePickerDialog)d;
-            final Calendar calendar = Calendar.getInstance();
-            timePicker.updateTime(
-                    calendar.get(Calendar.HOUR_OF_DAY),
-                    calendar.get(Calendar.MINUTE));
-            break;
-        }
-        default:
-            break;
-        }
-    }
-    */
-    @Override
-    public boolean onPreferenceTreeClick(Preference preference) {
-        if (preference == mDatePref) {
-            showDialog(DIALOG_DATEPICKER);
-        } else if (preference == mTimePref) {
-            // The 24-hour mode may have changed, so recreate the dialog
-            removeDialog(DIALOG_TIMEPICKER);
-            showDialog(DIALOG_TIMEPICKER);
-        } else if (preference == mTime24Pref) {
-            final boolean is24Hour = ((SwitchPreference)mTime24Pref).isChecked();
-            
-            Intent mPfeceCgIntent=new Intent();
-            mPfeceCgIntent.setAction("com.android.settings.mTime24prefChange");  
-            mPfeceCgIntent.putExtra("24prefFlag",is24Hour+""); 
-            getActivity().sendBroadcast(mPfeceCgIntent);
-            
-            set24Hour(is24Hour);
-            updateTimeAndDateDisplay(getActivity());
-            timeUpdated(is24Hour);
-        }
-        return super.onPreferenceTreeClick(preference);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode,
-            Intent data) {
-        updateTimeAndDateDisplay(getActivity());
-    }
-
-    private void timeUpdated(boolean is24Hour) {
-        Intent timeChanged = new Intent(Intent.ACTION_TIME_CHANGED);
-        timeChanged.putExtra(Intent.EXTRA_TIME_PREF_24_HOUR_FORMAT, is24Hour);
-        getActivity().sendBroadcast(timeChanged);
-    }
-
-    /*  Get & Set values from the system settings  */
-
-    private boolean is24Hour() {
-        return DateFormat.is24HourFormat(getActivity());
-    }
-
-    private void set24Hour(boolean is24Hour) {
-        Settings.System.putString(getContentResolver(),
-                Settings.System.TIME_12_24,
-                is24Hour? HOURS_24 : HOURS_12);
-    }
-
-    private boolean getAutoState(String name) {
-        try {
-            return Settings.Global.getInt(getContentResolver(), name) > 0;
-        } catch (SettingNotFoundException snfe) {
-            return false;
-        }
-    }
-
-    /* package */ static void setDate(Context context, int year, int month, int day) {
-        Calendar c = Calendar.getInstance();
-
-        c.set(Calendar.YEAR, year);
-        c.set(Calendar.MONTH, month);
-        c.set(Calendar.DAY_OF_MONTH, day);
-        long when = Math.max(c.getTimeInMillis(), MIN_DATE);
-
-        if (when / 1000 < Integer.MAX_VALUE) {
-            ((AlarmManager) context.getSystemService(Context.ALARM_SERVICE)).setTime(when);
-        }
-    }
-
-    /* package */ static void setTime(Context context, int hourOfDay, int minute) {
-        Calendar c = Calendar.getInstance();
-
-        c.set(Calendar.HOUR_OF_DAY, hourOfDay);
-        c.set(Calendar.MINUTE, minute);
-        c.set(Calendar.SECOND, 0);
-        c.set(Calendar.MILLISECOND, 0);
-        long when = Math.max(c.getTimeInMillis(), MIN_DATE);
-
-        if (when / 1000 < Integer.MAX_VALUE) {
-            ((AlarmManager) context.getSystemService(Context.ALARM_SERVICE)).setTime(when);
-        }
-    }
-
-    private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            final Activity activity = getActivity();
-            if (activity != null) {
-                updateTimeAndDateDisplay(activity);
-            }
-        }
-    };
-
-    private static class SummaryProvider implements SummaryLoader.SummaryProvider {
-
-        private final Context mContext;
-        private final SummaryLoader mSummaryLoader;
-
-        public SummaryProvider(Context context, SummaryLoader summaryLoader) {
-            mContext = context;
-            mSummaryLoader = summaryLoader;
-        }
-
-        @Override
-        public void setListening(boolean listening) {
-            if (listening) {
-                final Calendar now = Calendar.getInstance();
-                mSummaryLoader.setSummary(this, ZoneGetter.getTimeZoneOffsetAndName(
-                        now.getTimeZone(), now.getTime()));
-            }
-        }
-    }
-
-    public static final SummaryLoader.SummaryProviderFactory SUMMARY_PROVIDER_FACTORY
-            = new SummaryLoader.SummaryProviderFactory() {
-        @Override
-        public SummaryLoader.SummaryProvider createSummaryProvider(Activity activity,
-                                                                   SummaryLoader summaryLoader) {
-            return new SummaryProvider(activity, summaryLoader);
-        }
-    };
-
-    public static final Indexable.SearchIndexProvider SEARCH_INDEX_DATA_PROVIDER =
-            new DateTimeSearchIndexProvider();
-
-    private static class DateTimeSearchIndexProvider extends BaseSearchIndexProvider {
-
-        @Override
-        public List<SearchIndexableResource> getXmlResourcesToIndex(
-                Context context, boolean enabled) {
-            List<SearchIndexableResource> result = new ArrayList<>();
-            // Remove data/time settings from search in demo mode
-            if (UserManager.isDeviceInDemoMode(context)) {
-                return result;
-            }
-
-            SearchIndexableResource sir = new SearchIndexableResource(context);
-            sir.xmlResId = R.xml.date_time_prefs;
-            result.add(sir);
-
-            return result;
-        }
-    }
-
-    /// M: modify as MTK add GPS time Sync feature @{
-    @Override
-    public void onClick(DialogInterface dialog, int which) {
-        if (which == DialogInterface.BUTTON_POSITIVE) {
-            Log.d(TAG, "Enable GPS time sync");
-            boolean gpsEnabled = Settings.Secure.isLocationProviderEnabled(
-                    getContentResolver(), LocationManager.GPS_PROVIDER);
-            if (!gpsEnabled) {
-                Settings.Secure.setLocationProviderEnabled(
-                        getContentResolver(), LocationManager.GPS_PROVIDER,
-                        true);
-            }
-            Settings.Global.putInt(getContentResolver(),
-                    Settings.Global.AUTO_TIME, 0);
-            Settings.Global.putInt(getContentResolver(),
-                    Settings.System.AUTO_TIME_GPS, 1);
-            mAutoTimePref.setValueIndex(AUTO_TIME_GPS_INDEX);
-            mAutoTimePref.setSummary(mAutoTimePref.getEntries()[AUTO_TIME_GPS_INDEX]);
-        } else if (which == DialogInterface.BUTTON_NEGATIVE) {
-            Log.d(TAG, "DialogInterface.BUTTON_NEGATIVE");
-            reSetAutoTimePref();
-        }
-    }
-
-    private void reSetAutoTimePref() {
-        Log.d(TAG, "reset AutoTimePref as cancel the selection");
-        boolean autoTimeEnabled = getAutoState(Settings.Global.AUTO_TIME);
-        boolean autoTimeGpsEnabled = getAutoState(Settings.System.AUTO_TIME_GPS);
-        int index = 0;
-        if (autoTimeEnabled) {
-            index = AUTO_TIME_NETWORK_INDEX;
-        } else if (autoTimeGpsEnabled) {
-            index = AUTO_TIME_GPS_INDEX;
-        } else {
-            index = AUTO_TIME_OFF_INDEX;
-        }
-        mAutoTimePref.setValueIndex(index);
-        mAutoTimePref.setSummary(mAutoTimePref.getEntries()[index]);
-        boolean autoEnabled = autoTimeEnabled || autoTimeGpsEnabled;
-        Log.d(TAG, "reset AutoTimePref as cancel the selection autoEnabled: " + autoEnabled);
-        mTimePref.setEnabled(!autoEnabled);
-        mDatePref.setEnabled(!autoEnabled);
-    }
-
-    @Override
-    public void onCancel(DialogInterface arg0) {
-        Log.d(TAG, "onCancel Dialog");
-        reSetAutoTimePref();
-    }
-    /// @}
-}
Index: vendor/branch/5058A_Claro/packages/apps/Email/UnifiedEmail/res/values/strings.xml
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Email/UnifiedEmail/res/values/strings.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Email/UnifiedEmail/res/values/strings.xml	(revision 3018)
@@ -1,1171 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-     Copyright (C) 2011 Google Inc.
-     Licensed to The Android Open Source Project.
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <!-- Names of packages and authorities that are common to all apps
-    and read from resources -->
-
-    <!-- Layout tests strings -->
-    <string name="mock_content_provider" translatable="false">Mock Content Provider</string>
-    <string name="conversation_content_provider" translatable="false">Conversation Content Provider</string>
-    <string name="account_cache_provider" translatable="false">Account Cache Provider</string>
-
-    <string name="app_name" translatable="false">Unified Email</string>
-
-    <!-- Compose -->
-    <!-- Shown in Compose; the sender of the message [CHAR LIMIT=10] -->
-    <string name="from">From</string>
-    <!-- Shown in Compose; the recipient(s) of the message [CHAR LIMIT=10] -->
-    <string name="to">To</string>
-    <!-- Shown in Compose; the cc recipient(s) of the message [CHAR LIMIT=10] -->
-    <string name="cc">Cc</string>
-    <!-- Shown in Compose; the bcc recipient(s) of the message [CHAR LIMIT=10] -->
-    <string name="bcc">Bcc</string>
-    <!-- Shown in Compose; the subject of the message [CHAR LIMIT=100] -->
-    <string name="subject_hint">Subject</string>
-    <!-- Shown in Compose; the body of the message [CHAR LIMIT=100] -->
-    <string name="body_hint">Compose email</string>
-    <!--  Compose screen button. Add an attachment to this message [CHAR LIMIT=20] -->
-    <string name="add_file_attachment">Attach file</string>
-    <!--  Compose screen button. Add a photo attachment to this message [CHAR LIMIT=20] -->
-    <string name="add_photo_attachment">Attach picture</string>
-    <!-- Stub string for attaching from a service. Sub-apps should override this. -->
-    <!-- The actual string value doesn't matter, it should never appear. -->
-    <string name="attach_from_service_stub1" translatable="false"></string>
-    <!-- Button name: save this message as draft [CHAR LIMIT=25]-->
-    <string name="save_draft">Save draft</string>
-    <!--  Button name: discard this message [CHAR LIMIT=15] -->
-    <string name="discard">Discard</string>
-    <!-- The possible ways to reply to a message [CHAR LIMIT=15] -->
-    <string name="compose">Compose</string>
-    <!-- The action bar title for the default compose mode [CHAR LIMIT=10] -->
-    <string name="compose_title">Compose</string>
-    <!-- The possible ways to reply to a message [CHAR LIMIT=15] -->
-    <string-array name="compose_modes">
-        <!-- Reply -->
-        <item>Reply</item>
-        <!-- Reply all -->
-        <item>Reply all</item>
-        <!-- Forward -->
-        <item>Forward</item>
-    </string-array>
-        <!-- Formatting string for the subject when it contains a reply or forward identifier. Do not translate.-->
-    <string name="formatted_subject" translatable="false"><xliff:g id="prefix">%1$s</xliff:g> <xliff:g id="subject">%2$s</xliff:g></string>
-    <!-- Compose screen, prefixed to the subject of a message when replying to it (if not already present). Do not translate. -->
-    <string name="reply_subject_label" translatable="false">Re:</string>
-    <!-- Compose screen, Prefix to forwarded message subject. Do not translate. -->
-    <string name="forward_subject_label" translatable="false">Fwd:</string>
-    <!-- Compose screen, displayed at the top of a message being replied to. Please preserve the HTML entities (surrounded by & and ;).  The two %s strings will be replaced by 1) the date 2) the person who wrote the email being responded to. [CHAR LIMIT=1000]-->
-    <string name="reply_attribution">On <xliff:g id="date">%s</xliff:g>, <xliff:g id="person">%s</xliff:g> wrote:</string>
-    <!-- Compose screen, displayed at the top of a message being forwarded. Please preserve the HTML entities (surrounded by & and ;). [CHAR LIMIT=1000] -->
-    <string name="forward_attribution">---------- Forwarded message ----------&lt;br&gt;From: <xliff:g id="from">%1$s</xliff:g>&lt;br&gt;Date: <xliff:g id="date">%2$s</xliff:g>&lt;br&gt;Subject: <xliff:g id="subject">%3$s</xliff:g>&lt;br&gt;To: <xliff:g id="to">%4$s</xliff:g>&lt;br&gt;</string>
-    <!-- Compose screen, displayed at the top of a message being forwarded. [CHAR LIMIT=100]-->
-    <string name="forward_attribution_no_headers">---------- Forwarded message ----------</string>
-    <!-- Compose screen, displayed at the top of a message being forwarded if there are any email addresses in the CC list. Please preserve the HTML entities (surrounded by & and ;). [CHAR LIMIT=1000]-->
-    <string name="cc_attribution">Cc: <xliff:g id="cc">%1$s</xliff:g>&lt;br&gt;</string>
-    <!-- Dialog text: select the type of an attachment while composing [CHAR LIMIT=100]-->
-    <string name="select_attachment_type">Choose type of attachment</string>
-    <!-- Toast, attachment too large for single file [CHAR LIMIT=100] -->
-    <string name="too_large_to_attach_single">Can\'t attach file over <xliff:g id="maxSize">%1$s</xliff:g>.</string>
-    <!-- Toast, attachment too large for multiple files [CHAR LIMIT=100] -->
-    <string name="too_large_to_attach_multiple">One or more files not attached. Limit <xliff:g id="maxSize">%1$s</xliff:g>.</string>
-    <!-- Toast, attachment too large when existing attachments exist [CHAR LIMIT=100] -->
-    <string name="too_large_to_attach_additional">File not attached. <xliff:g id="maxSize">%1$s</xliff:g> limit reached.</string>
-    <!-- Toast, problem attaching file [CHAR LIMIT=100] -->
-    <string name="generic_attachment_problem">Couldn\'t attach file.</string>
-    <!-- Toast, cannot attach the provided file because the calling context doesn't have the permission [CHAR LIMIT=100] -->
-    <string name="attachment_permission_denied">Permission denied for the attachment.</string>
-    <!-- Displayed for one second after trying to send with no recipients in To field [CHAR LIMIT=200]-->
-    <string name="recipient_needed">Add at least one recipient.</string>
-    <!-- Messages for send confirmation dialog [CHAR LIMIT=100]-->
-    <string name="confirm_send_message_with_no_subject">There\'s no text in the message subject.</string>
-    <string name="confirm_send_message_with_no_body">There\'s no text in the message body.</string>
-    <string name="confirm_send_message">Send this message?</string>
-    <!-- Displayed for one second after discarding draft message [CHAR LIMIT=50]-->
-    <string name="message_discarded">Message discarded.</string>
-    <!-- Formatting string for the user's signaure. [CHAR LIMIT=10] -->
-    <string name="signature">\n\n<xliff:g id="signature">%s</xliff:g></string>
-    <!--  Shown in the from dropdown in front of custom from addresses. [CHAR LIMIT=15] -->
-    <string name="custom_from_account_label">Send mail as:</string>
-
-    <!-- Menu item: send this message -->
-    <string name="send">Send</string>
-    <!-- Menu item: mark this conversation as read -->
-    <string name="mark_read">Mark read</string>
-    <!-- Menu item: mark this conversation as unread -->
-    <string name="mark_unread">Mark unread</string>
-    <!-- Menu item: toggle read/unread for menus that contain both read and unread options -->
-    <string name="toggle_read_unread">Toggle read unread</string>
-    <!--  Menu item: mute this conversation -->
-    <string name="mute">Mute</string>
-    <!-- Menu item: add a star to this conversation -->
-    <string name="add_star">Add star</string>
-    <!-- Menu item: remove the star from this conversation -->
-    <string name="remove_star">Remove star</string>
-    <!-- Remove the folder from this conversation [CHAR LIMIT = 30]-->
-    <string name="remove_folder">Remove from <xliff:g id="folderName">%1$s</xliff:g></string>
-    <!-- Menu item: archive this conversation -->
-    <string name="archive">Archive</string>
-    <!-- Menu item: report this conversation as spam [CHAR LIMIT = 30] -->
-    <string name="report_spam">Report spam</string>
-    <!-- Menu item: report this conversation not as spam [CHAR LIMIT = 30] -->
-    <string name="mark_not_spam">Report not spam</string>
-    <!-- Menu item: report this conversation as phishing [CHAR LIMIT = 30] -->
-    <string name="report_phishing">Report phishing</string>
-    <!-- Menu item: delete this conversation -->
-    <string name="delete">Delete</string>
-    <!-- Menu item: discard the drafts in this conversation [CHAR LIMIT = 30] -->
-    <string name="discard_drafts">Discard drafts</string>
-    <!-- Menu item: discard the failed messages in this conversation [CHAR LIMIT = 30] -->
-    <string name="discard_failed">Discard failed</string>
-    <!-- Menu item: refresh the inbox -->
-    <string name="refresh">Refresh</string>
-    <!-- Menu item: reply to this message -->
-    <string name="reply">Reply</string>
-    <!-- Menu item: reply to all recipients in this message [CHAR LIMIT=18] -->
-    <string name="reply_all">Reply all</string>
-    <!-- Menu item: resume a draft message [CHAR LIMIT=12] -->
-    <string name="resume_draft">Edit</string>
-    <!-- Menu item: forward this message -->
-    <string name="forward">Forward</string>
-    <!-- Menu item: compose a new email -->
-    <string name="menu_compose">Compose</string>
-    <!-- Menu item: change the folders for this conversation. -->
-    <string name="menu_change_folders">Change folders</string>
-    <!-- Menu item: moves to folders for selected conversation(s). [CHAR LIMIT = 30] -->
-    <string name="menu_move_to">Move to</string>
-    <!-- Menu item move_to state for displaying as an action or in overflow -->
-    <!-- 0 corresponds to SHOW_AS_ACTION_NEVER -->
-    <string name="menu_move_to_state" translatable="false">0</string>
-    <!-- Menu item: moves current or selected conversation(s) to Inbox. [CHAR LIMIT = 30] -->
-    <string name="menu_move_to_inbox">Move to Inbox</string>
-    <!-- Menu item: manages the folders for this account. [CHAR LIMIT = 30] -->
-    <string name="menu_manage_folders">Folder settings</string>
-    <!-- Menu item: report an email was not readable or poorly rendered -->
-    <string name="report_rendering_problem" translatable="false">Looks bad</string>
-    <!-- Menu item: report an email's readability has improved -->
-    <string name="report_rendering_improvement" translatable="false">Looks good</string>
-    <!-- Temporary text used for reporting rendering issues Googlers see in testing -->
-    <string name="report_rendering_problem_desc" translatable="false">
-        This message looks bad.
-    </string>
-    <!-- Temporary text used for reporting rendering improvements Googlers see in testing -->
-    <string name="report_rendering_improvement_desc" translatable="false">
-        This message looks good.
-    </string>
-    <!-- Menu item text to show the original version of an email conversation, before message manipulation [CHAR LIMIT=25] -->
-    <string name="menu_show_original">Revert auto-sizing</string>
-    <!-- Menu item: launch the Settings activity -->
-    <string name="menu_settings">Settings</string>
-    <!-- Menu item: search through the Gmail inbox -->
-    <string name="menu_search">Search</string>
-    <!-- Menu item: toggle drawer -->
-    <string name="menu_toggle_drawer">Toggle drawer</string>
-    <!-- Title of the drawer, indicating what it is used for, which is navigation of the app -->
-    <string name="drawer_title">Navigation</string>
-
-    <!--  Menu item: shown in conversation menu. Tap this to move to mark conversation as important [CHAR LIMIT=30] -->
-    <string name="mark_important">Mark important</string>
-    <!--  Menu item: shown in conversation menu. Tap this to move to mark conversation as not important [CHAR LIMIT=30] -->
-    <string name="mark_not_important">Mark not important</string>
-
-    <!-- Compose screen, menu item: add Cc/Bcc fields -->
-    <string name="add_cc_label">Add Cc/Bcc</string>
-    <!-- Compose screen, menu item: add Bcc field [CHAR_LIMIT=20]-->
-    <string name="add_bcc_label">Add Bcc</string>
-    <!-- Compose screen, Prefix to quoted text in forwarded/replied message [CHAR LIMIT=50]-->
-    <string name="quoted_text">Include quoted text</string>
-    <!-- Compose screen, Prefix to quoted text in forwarded/replied message; folder for the quoted text area. [CHAR LIMIT=25] -->
-    <string name="quoted_text_label">Quote text</string>
-    <!--  Button for including inline responses. [CHAR LIMIT=25] -->
-    <string name="respond_inline">Respond inline</string>
-    <!-- Format string for email addresses -->
-    <string name="formatted_email_address" translatable="false">&lt;<xliff:g id="email">%1$s</xliff:g>&gt;</string>
-
-    <!-- Attachments -->
-    <!-- Size unit, displayed in a button next to an attachment [CHAR LIMIT=5]-->
-    <string name="bytes"><xliff:g id="count">%s</xliff:g>&#160;B</string>
-    <!-- Size unit, displayed in a button next to an attachment [CHAR LIMIT=5] -->
-    <string name="kilobytes"><xliff:g id="count">%s</xliff:g>&#160;KB</string>
-    <!-- Size unit, displayed in a button next to an attachment  [CHAR LIMIT=5]-->
-    <string name="megabytes"><xliff:g id="count">%s</xliff:g>&#160;MB</string>
-    <!-- Attachment description for image files [CHAR LIMIT=30] -->
-    <string name="attachment_image">Image</string>
-    <!-- Attachment description for video files [CHAR LIMIT=30] -->
-    <string name="attachment_video">Video</string>
-    <!-- Attachment description for audio files [CHAR LIMIT=30] -->
-    <string name="attachment_audio">Audio</string>
-    <!-- Attachment description for text files [CHAR LIMIT=30] -->
-    <string name="attachment_text">Text</string>
-    <!-- Attachment description for .doc files [CHAR LIMIT=30] -->
-    <string name="attachment_application_msword">Document</string>
-    <!-- Attachment description for .ppt files [CHAR LIMIT=30] -->
-    <string name="attachment_application_vnd_ms_powerpoint">Presentation</string>
-    <!-- Attachment description for .pdf files [CHAR LIMIT=30] -->
-    <string name="attachment_application_vnd_ms_excel">Spreadsheet</string>
-    <!-- Attachment description for .pdf files [CHAR LIMIT=30] -->
-    <string name="attachment_application_pdf">PDF</string>
-    <!-- Attachment description for unknown files [CHAR LIMIT=30]-->
-    <string name="attachment_unknown"><xliff:g id="attachmentExtension">%s</xliff:g> File</string>
-    <!-- Read email screen, button name. Preview an attachment by Gview. [CHAR LIMIT=18] -->
-    <string name="preview_attachment">Preview</string>
-    <!-- Read email screen, button name. Save an attachment to sd card. [CHAR LIMIT=10] -->
-    <string name="save_attachment">Save</string>
-    <!-- Read email screen, button name. Redownload an attachment [CHAR LIMIT=20]-->
-    <string name="download_again">Download again</string>
-    <!-- A supplemental option on attachments for apps to override. This string intentionally blank here. [CHAR LIMIT=20] -->
-    <string name="attachment_extra_option1" translatable="false"></string>
-    <!-- Remove this attachment [CHAR LIMIT=50] -->
-    <string name="remove_attachment_desc">Remove attachment <xliff:g id="attachmentName">%s</xliff:g></string>
-    <!-- Dialog box title [CHAR LIMIT=30] -->
-    <string name="more_info_attachment">Info</string>
-    <!-- Dialog box message, displayed when we could not view an attachment. [CHAR LIMIT=200]-->
-    <string name="no_application_found">No app can open this attachment for viewing.</string>
-    <!-- Dialog box title. [CHAR LIMIT=30] -->
-    <string name="fetching_attachment">Fetching attachment</string>
-    <!-- Dialog box message. [CHAR LIMIT=80] -->
-    <string name="please_wait">Please wait\u2026</string>
-    <!-- Displayed in the conversation view, next to a file's size and type. Status of a saved attachment. [CHAR LIMIT=20]-->
-    <string name="saved">Saved,&#160;<xliff:g id="size">%s</xliff:g></string>
-    <!-- Displayed in the conversation view. Status of a failed attachment. [CHAR LIMIT=50]-->
-    <string name="download_failed">Couldn\'t download. Touch to retry.</string>
-    <!-- Photo view screen, button name. Save all attachments to sd card. [CHAR LIMIT=17] -->
-    <string name="menu_photo_save_all">Save all</string>
-    <!-- Photo view screen, button name. Share attachment. [CHAR LIMIT=10] -->
-    <string name="menu_photo_share">Share</string>
-    <!-- Photo view screen, button name. Share all attachments. [CHAR LIMIT=20] -->
-    <string name="menu_photo_share_all">Share all</string>
-    <!-- Photo view screen, button name. Print photo. [CHAR LIMIT=20] -->
-    <string name="menu_photo_print">Print</string>
-    <!-- Displayed in the action bar as a subtitle. Save in progress. [CHAR LIMIT=15] -->
-    <string name="saving">Saving&#8230;</string>
-
-    <!-- Webview Context Menu Strings -->
-    <!-- Title of dialog for choosing which activity to share a link with. [CHAR LIMIT=50]-->
-    <string name="choosertitle_sharevia">Share via</string>
-    <!-- Menu item to open a link  [CHAR LIMIT=50]-->
-    <string name="contextmenu_openlink">Open in Browser</string>
-    <!-- Menu item to copy the selection  [CHAR LIMIT=50]-->
-    <string name="contextmenu_copy">Copy</string>
-    <!-- Menu item to copy a link  [CHAR LIMIT=50]-->
-    <string name="contextmenu_copylink">Copy link URL</string>
-    <!-- Menu item to view an image  [CHAR LIMIT=50]-->
-    <string name="contextmenu_view_image">View image</string>
-    <!-- Menu item to dial a number  [CHAR LIMIT=50]-->
-    <string name="contextmenu_dial_dot">Dial\u2026</string>
-    <!-- Menu item to send an SMS  [CHAR LIMIT=50]-->
-    <string name="contextmenu_sms_dot">SMS\u2026</string>
-    <!-- Menu item to add a contact  [CHAR LIMIT=50]-->
-    <string name="contextmenu_add_contact">Add contact</string>
-    <!-- Menu item to send an email [CHAR LIMIT=50] -->
-    <string name="contextmenu_send_mail">Send email</string>
-    <!-- Menu item to show a map  [CHAR LIMIT=50]-->
-    <string name="contextmenu_map">Map</string>
-    <!-- Menu item to share link  [CHAR LIMIT=50]-->
-    <string name="contextmenu_sharelink">Share link</string>
-
-    <!-- Browse list item strings -->
-    <!-- Formatting string for the content description field of a conversation list item when device is in accessibility mode. [CHAR LIMIT=250] -->
-    <string name="content_description"><xliff:g id="toHeader">%1$s</xliff:g><xliff:g id="participant">%2$s</xliff:g> about <xliff:g id="subject">%3$s</xliff:g>, <xliff:g id="snippet">%4$s</xliff:g> on <xliff:g id="date">%5$s</xliff:g>, <xliff:g id="readstate">%6$s</xliff:g></string>
-    <!-- Formatting string for the content description field of a conversation list item when device is in accessibility mode and the message was received today. [CHAR LIMI=250] -->
-    <string name="content_description_today"><xliff:g id="toHeader">%1$s</xliff:g><xliff:g id="participant">%2$s</xliff:g> about <xliff:g id="subject">%3$s</xliff:g>, <xliff:g id="snippet">%4$s</xliff:g> at <xliff:g id="time">%5$s</xliff:g>, <xliff:g id="readstate">%6$s</xliff:g></string>
-    <!-- Formatting string for the content description field of a conversation list item when device is in accessibility mode. [CHAR LIMIT=250] -->
-    <string name="content_description_with_folders"><xliff:g id="toHeader">%1$s</xliff:g><xliff:g id="participant">%2$s</xliff:g> about <xliff:g id="subject">%3$s</xliff:g>, <xliff:g id="snippet">%4$s</xliff:g> on <xliff:g id="date">%5$s</xliff:g>, <xliff:g id="readstate">%6$s</xliff:g>, labels: <xliff:g id="folders">%7$s</xliff:g></string>
-    <!-- Formatting string for the content description field of a conversation list item when device is in accessibility mode and the message was received today. [CHAR LIMI=250] -->
-    <string name="content_description_today_with_folders"><xliff:g id="toHeader">%1$s</xliff:g><xliff:g id="participant">%2$s</xliff:g> about <xliff:g id="subject">%3$s</xliff:g>, <xliff:g id="snippet">%4$s</xliff:g> at <xliff:g id="time">%5$s</xliff:g>, <xliff:g id="readstate">%6$s</xliff:g>, labels: <xliff:g id="folders">%7$s</xliff:g></string>
-    <!-- String used in content description field of a conversation list item when device is in accessibility mode and the conversation was read [CHAR LIMIT=250] -->
-    <string name="read_string">conversation read</string>
-    <!-- String used in content description field of a conversation list item when device is in accessibility mode and the conversation was not read [CHAR LIMIT=250] -->
-    <string name="unread_string">conversation unread</string>
-    <!-- Formatting string. If the subject contains the tag of a mailing-list (text surrounded with
-    return the subject with that tag ellipsized, e.g. "[android-gmail-team] Hello" -> "[andr...] Hello" [CHAR LIMIT=100] -->
-    <string name="filtered_tag"> [<xliff:g id="tag">%1$s</xliff:g>]<xliff:g id="subject">%2$s</xliff:g></string>
-    <!-- Displayed in conversation list item in the form of "badge subject" [CHAR LIMIT=7] -->
-    <string name="badge_and_subject"><xliff:g>%1$s</xliff:g> <xliff:g>%2$s</xliff:g></string>
-    <!-- Displayed in browse list item when the list item is a draft message instead of showing the subject [CHAR LIMIT=100] -->
-    <plurals name="draft">
-        <!-- Title of the screen when there is exactly one draft -->
-        <item quantity="one">Draft</item>
-        <!-- Title of the screen when there are more than one draft -->
-        <item quantity="other">Drafts</item>
-    </plurals>
-    <!-- Message displayed in a browse list item for one second when message is being sent [CHAR LIMIT=20]-->
-    <string name="sending">Sending\u2026</string>
-    <!-- Message displayed in the outgoing message list item when the message failed to sent and is being retried [CHAR LIMIT=20] -->
-    <string name="message_retrying">Retrying\u2026</string>
-    <!-- Message displayed in the outgoing message list item when the message failed to send [CHAR LIMIT=20] -->
-    <string name="message_failed">Failed</string>
-    <!-- Message displayed in a browse list item for one second after a send failed [CHAR LIMIT=26]-->
-    <string name="send_failed">Message wasn\'t sent.</string>
-    <!-- String used to represent "me" when used as an object pronoun. This string is used when
-         showing the list of recipients of a message [CHAR LIMIT=15] -->
-    <string name="me_object_pronoun">me</string>
-    <!-- String used to represent "me"/"I" when used as an subject pronoun. This string is use when
-         showing the list of senders for a conversation list item. [CHAR LIMIT=15] -->
-    <string name="me_subject_pronoun">me</string>
-
-    <plurals name="confirm_delete_conversation">
-        <!-- Dialog message to confirm deletion of one conversation -->
-        <item quantity="one">Delete this conversation?</item>
-        <!-- Dialog message to confirm deletion of several conversations -->
-        <item quantity="other">Delete these <xliff:g id="count">%1$d</xliff:g> conversations?</item>
-    </plurals>
-    <plurals name="confirm_archive_conversation">
-        <!-- Dialog message to confirm archival of one conversation -->
-        <item quantity="one">Archive this conversation?</item>
-        <!-- Dialog message to confirm archival of several conversations -->
-        <item quantity="other">Archive these <xliff:g id="count">%1$d</xliff:g> conversations?</item>
-    </plurals>
-    <plurals name="confirm_discard_drafts_conversation">
-        <!-- Dialog message to confirm discarding a single draft message [CHAR LIMIT=50] -->
-        <item quantity="one">Discard this message?</item>
-        <!-- Dialog message to confirm discarding many draft messages [CHAR LIMIT=50] -->
-        <item quantity="other">Discard these <xliff:g id="count">%1$d</xliff:g> messages?</item>
-    </plurals>
-
-    <!-- Dialog text: confirm discard -->
-    <string name="confirm_discard_text">Discard this message?</string>
-
-    <!-- Conversation list shared between the Activity and Widget -->
-    <!-- Displayed in the middle of the screen when conversations are being loaded [CHAR LIMIT 100]-->
-    <string name="loading_conversations">Loading\u2026</string>
-    <!-- Displayed in the middle of the screen when an inbox is empty [CHAR LIMIT 100]-->
-    <string name="empty_inbox">You\'re all done! Please enjoy your day.</string>
-    <!-- Displayed in the middle of the screen when a search returns no results [CHAR LIMIT 100]-->
-    <string name="empty_search">Whoops! We didn\'t find anything for \"<xliff:g id="search_query">%1$s</xliff:g>\".</string>
-    <!-- Displayed in the middle of the screen when the spam folder is empty [CHAR LIMIT 100]-->
-    <string name="empty_spam_folder">Hooray, no spam here!</string>
-    <!-- Displayed in the middle of the screen when the trash folder is empty [CHAR LIMIT 100]-->
-    <string name="empty_trash_folder">No trash here. Thanks for recycling!</string>
-    <!-- Displayed in the middle of the screen when a folder is empty [CHAR LIMIT 100]-->
-    <string name="empty_folder">There is no mail here.</string>
-    <!-- Displayed in the middle of the screen when a folder is loading [CHAR LIMIT 100]-->
-    <string name="getting_messages">Getting your messages</string>
-
-    <!-- Undo bar strings -->
-    <!-- Menu item: undo latest action [CHAR LIMIT=12]-->
-    <string name="undo">Undo</string>
-
-    <plurals name="conversation_unstarred">
-        <item quantity="one">Unstarring <xliff:g id="count">%1$d</xliff:g> conversation</item>
-        <item quantity="other">Unstarring <xliff:g id="count">%1$d</xliff:g> conversations</item>
-    </plurals>
-
-    <!-- The following are shown as a toast after the operation has completed --><skip />
-    <plurals name="conversation_muted">
-        <!-- Displayed while muting one conversation -->
-        <item quantity="one">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> muted</item>
-        <!-- Displayed while muting several conversations -->
-        <item quantity="other">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> muted</item>
-    </plurals>
-
-    <plurals name="conversation_spammed">
-        <!-- Displayed while reporting one conversation as spam -->
-        <item quantity="one">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> reported as spam</item>
-        <!-- Displayed while reporting several conversations as spam -->
-        <item quantity="other">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> reported as spam</item>
-    </plurals>
-
-    <plurals name="conversation_not_spam">
-        <!-- Displayed while reporting one conversation as not spam -->
-        <item quantity="one">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> reported as not spam</item>
-        <!-- Displayed while reporting several conversations as not spam -->
-        <item quantity="other">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> reported as not spam</item>
-    </plurals>
-
-    <plurals name="conversation_not_important">
-        <!-- Displayed while reporting one conversation as not important in the important folder -->
-        <item quantity="one">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> marked not important</item>
-        <!-- Displayed while reporting several conversations as not important in the important folder -->
-        <item quantity="other">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> marked not important</item>
-    </plurals>
-
-    <plurals name="conversation_phished">
-        <!-- Displayed while reporting one conversation as phishing -->
-        <item quantity="one">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> reported as phishing</item>
-        <!-- Displayed while reporting several conversations as phishing -->
-        <item quantity="other">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> reported as phishing</item>
-    </plurals>
-
-    <plurals name="conversation_archived">
-        <!-- Displayed while archiving one conversation -->
-        <item quantity="one">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> archived</item>
-        <!-- Displayed while archiving multiple conversations -->
-        <item quantity="other">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> archived</item>
-    </plurals>
-
-    <plurals name="conversation_deleted">
-        <!-- Displayed while deleting one conversation -->
-        <item quantity="one">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> deleted</item>
-        <!-- Displayed while deleting multiple conversations -->
-        <item quantity="other">&lt;b><xliff:g id="count">%1$d</xliff:g>&lt;/b> deleted</item>
-    </plurals>
-    <!-- Displayed when swiping away a single conversation to delete it [CHAR LIMIT=80] -->
-    <string name="deleted">Deleted</string>
-    <!-- Displayed when swiping away a single conversation to archive it [CHAR LIMIT=80] -->
-    <string name="archived">Archived</string>
-    <!-- Displayed when swiping away a single conversation to remove the currently displayed folder [CHAR LIMIT=80] -->
-    <string name="folder_removed">Removed from <xliff:g id="folderName">%1$s</xliff:g></string>
-
-    <plurals name="conversation_folder_changed">
-        <!-- Displayed while adding and removing folders to a single conversation. [CHAR LIMIT=100] -->
-        <item quantity="one">Changed folder</item>
-        <!-- Displayed while adding and removing folders to multiple conversations. [CHAR LIMIT=100] -->
-        <item quantity="other">Changed folders</item>
-    </plurals>
-
-    <!-- Displayed after moving a conversation to a different folder. [CHAR LIMIT=100] -->
-    <string name="conversation_folder_moved">Moved to <xliff:g id="folderName">%1$s</xliff:g></string>
-
-    <!-- Search Results: Text for header that is shown above search results [CHAR LIMIT=30] -->
-    <string name="search_results_header">Results</string>
-    <!-- Toast shown when the user taps the search hard key when viewing an account that does not support search [CHAR LIMIT=100] -->
-    <string name="search_unsupported">Search is not supported on this account.</string>
-    <!-- Accessibility description for the search suggestion item [CHAR LIMIT=100] -->
-    <string name="search_suggestion_desc">Suggestion: <xliff:g id="suggestion">%s</xliff:g></string>
-
-    <!-- Conversation view -->
-    <!--  Text anchor for control to add / change labels on a conversation when
-          viewing it. [CHAR LIMIT=40] -->
-    <string name="add_label">Add folder</string>
-
-    <!-- New Message notification text that appears over conversation view on incoming messages. [CHAR LIMIT=40] -->
-    <plurals name="new_incoming_messages">
-        <item quantity="one"><xliff:g id="count">%1$d</xliff:g> new message</item>
-        <item quantity="other"><xliff:g id="count">%1$d</xliff:g> new messages</item>
-    </plurals>
-
-    <!-- Conversation message header strings -->
-    <!--  Text for showing the date and expanding recipient details in a message when viewing it. [CHAR LIMIT=40] -->
-    <string name="date_and_view_details"><xliff:g id="date">%1$s</xliff:g> &lt;a href=\'http://www.example.com\'>View details&lt;/a></string>
-    <!--  Text for collapsing recipient details in a message when viewing it. [CHAR LIMIT=40] -->
-    <string name="hide_details">Hide details</string>
-    <!-- Shown to display the recipient(s) of the message [CHAR LIMIT=10] -->
-    <string name="to_message_header">to <xliff:g id="recipients">%1$s</xliff:g></string>
-    <!-- Shown to display the bcc recipient(s) of the message [CHAR LIMIT=10] -->
-    <string name="bcc_header_for_recipient_summary">bcc:\u0020</string>
-    <!--  Icon name for showing sender contact information. [CHAR LIMIT=100] -->
-    <string name="contact_info_string">Show contact information for <xliff:g id="name">%1$s</xliff:g></string>
-    <!--  Icon name for showing sender contact information when we cannot get sender info. [CHAR LIMIT=100] -->
-    <string name="contact_info_string_default">Show contact information</string>
-    <!-- Used for accessibility purposes when a conversation has several previously read
-         messages that are collapsed into a single touch target. Tapping on this touch target
-         expands these messages. [CHAR LIMIT=UNLIMITED] -->
-    <plurals name="show_messages_read">
-        <item quantity="other">Expand <xliff:g id="count" example="4">%1$d</xliff:g> older messages</item>
-    </plurals>
-    <!-- Used for accessibility purposes when a conversation has several previously read
-         messages that are collapsed into a single touch target to announce that the messages
-         have been expanded. [CHAR LIMIT=UNLIMITED] -->
-    <plurals name="super_collapsed_block_accessibility_announcement">
-        <item quantity="other">Expanded <xliff:g id="count" example="4">%1$d</xliff:g> older messages</item>
-    </plurals>
-    <!-- Shown to display the from address of the message [CHAR LIMIT=10] -->
-    <string name="from_heading">From:</string>
-    <!-- Shown to display the reply to address of the message [CHAR LIMIT=20] -->
-    <string name="replyto_heading">Reply-to:</string>
-    <!-- Shown to display the to recipient(s) of the message [CHAR LIMIT=10] -->
-    <string name="to_heading">To:\u0020</string>
-    <!-- Shown to display the to recipient(s) of the message [CHAR LIMIT=10] -->
-    <string name="to_heading_no_space">To:</string>
-    <!-- Shown to display the cc recipient(s) of the message [CHAR LIMIT=10] -->
-    <string name="cc_heading">Cc:</string>
-    <!-- Shown to display the bcc recipient(s) of the message [CHAR LIMIT=10] -->
-    <string name="bcc_heading">Bcc:</string>
-    <!-- Shown to display the date of the message [CHAR LIMIT=10] -->
-    <string name="date_heading">Date:</string>
-    <!-- Displayed above an HTML message to show the images in that message [CHAR LIMIT=40] -->
-    <string name="show_images">Show pictures</string>
-    <!-- Displayed above an HTML message to always show images in messages from that sender [CHAR LIMIT=40] -->
-    <string name="always_show_images">Always show pictures from this sender</string>
-    <!-- Shown in a toast to acknowledge always showing images for a sender [CHAR LIMIT=100] -->
-    <string name="always_show_images_toast">Pictures from this sender will be shown automatically.</string>
-    <!-- Display format of an email recipient, displayed in expanded message details [CHAR LIMIT=10] -->
-    <string name="address_display_format"><xliff:g id="name">%1$s</xliff:g> <xliff:g id="email">%2$s</xliff:g></string>
-    <!-- Display format of an email sender if the message has a via domain set, displayed in expanded message details [CHAR LIMIT=15] -->
-    <string name="address_display_format_with_via_domain"><xliff:g id="name">%1$s</xliff:g> <xliff:g id="email">%2$s</xliff:g> via <xliff:g id="via_domain">%3$s</xliff:g></string>
-    <!-- Displayed for one second after user saves message as draft [CHAR LIMIT=50]-->
-    <string name="message_saved">Message saved as draft.</string>
-    <!-- Displayed for one second while message is being sent [CHAR LIMIT=50]-->
-    <string name="sending_message">Sending message\u2026</string>
-    <!-- Displayed for one second after trying to send with invalid recipients [CHAR LIMIT=50]-->
-    <string name="invalid_recipient">The address <xliff:g id="wrongemail" example="foo@@gmail..com">%s</xliff:g> is invalid.</string>
-    <!-- Shown in HTML to allow the user to see quoted text; should match Gmail web UI. [CHAR LIMIT=50] -->
-    <string name="show_elided">Show quoted text</string>
-    <!-- Shown in HTML to allow the user to hide quoted text; should match Gmail web UI. 25BC is Unicode for a downward-pointing triangle. [CHAR LIMIT=50] -->
-    <string name="hide_elided">\u25BC Hide quoted text</string>
-    <!-- Shown as a heading in message view when a message contains a calendar invite [CHAR LIMIT=30]-->
-    <string name="message_invite_title">Calendar invite</string>
-    <!-- Shown as a button label in message view to launch calendar to see this invite [CHAR LIMIT=40]-->
-    <string name="message_invite_calendar_view">View in Calendar</string>
-    <!-- Shown as a text label in message view describing the choices of whether to attend an invite [CHAR LIMIT=20]-->
-    <string name="message_invite_label_attending">Going?</string>
-    <!-- Shown as a button label in message view to accept a calendar invite [CHAR LIMIT=20]-->
-    <string name="message_invite_accept">Yes</string>
-    <!-- Shown as a button label in message view to give a tentative response to a calendar invite [CHAR LIMIT=20]-->
-    <string name="message_invite_tentative">Maybe</string>
-    <!-- Shown as a button label in message view to decline a calendar invite [CHAR LIMIT=20]-->
-    <string name="message_invite_decline">No</string>
-
-    <!-- An enumeration comma for separating items in lists. [CHAR LIMIT=2] -->
-    <string name="enumeration_comma">,\u0020</string>
-
-    <!-- Button name, displayed in dialogs [CHAR LIMIT=20]-->
-    <string name="send_anyway">Send anyway</string>
-    <!-- Button name, displayed in dialogs [CHAR LIMIT=10] -->
-    <string name="ok">OK</string>
-    <!-- Button name, displayed in dialogs [CHAR LIMIT=10] -->
-    <string name="done">Done</string>
-    <!-- Button name, displayed in dialogs [CHAR LIMIT=10] -->
-    <string name="cancel">Cancel</string>
-    <!-- Button name, displayed in dialogs [CHAR LIMIT=10] -->
-    <string name="clear">Clear</string>
-    <!-- Button name, used as part of a multi-step process [CHAR LIMIT=10] -->
-    <string name="next">Next</string>
-    <!-- Button name, used as part of a multi-step process [CHAR LIMIT=10] -->
-    <string name="previous">Previous</string>
-
-    <!-- Sync status errors. Please do not change the order [CHAR LIMIT=100] -->
-    <string-array name="sync_status">
-        <item>Success</item>
-        <item>No connection</item>
-        <item>Couldn\'t sign in</item>
-        <item>Security error</item>
-        <item>Couldn\'t sync</item>
-        <item>Internal Error</item>
-        <item>Server Error</item>
-    </string-array>
-
-    <!-- Widget strings -->
-    <!-- Displayed when user adds a new widget. Tapping on the widget in this
-          mode will bring user to the account selection screen [CHAR LIMIT=35] -->
-    <string name="tap_to_configure">Touch to set up</string>
-
-    <!-- Displayed within a widget that was setup for a non-synced folder [CHAR LIMIT=60] -->
-    <string name="non_synced_folder_description">To view conversations, sync this folder.</string>
-
-    <!-- Displayed within a widget that was setup for a non-synced folder.  This is the text of the
-         button that will allow the user to configure sync for the folder [CHAR LIMIT=35] -->
-    <string name="tap_to_configure_folder_sync">Sync Folder</string>
-
-    <!-- Displayed in widget when unread count > 99. [CHAR LIMIT=4] -->
-    <string name="widget_large_unread_count">%d+</string>
-
-    <!-- Displayed when there are >99 unseen messages, see:unseen_count [CHAR LIMIT=3] -->
-    <string name="large_unseen_count"><xliff:g id="count" example="99">%d</xliff:g>+ new</string>
-
-    <!-- Displayed when there are unseen messages [CHAR LIMIT=3] [BACKUP_MESSAGE_ID: 3377106103106345367] -->
-    <string name="unseen_count"><xliff:g id="count" example="4">%d</xliff:g> new</string>
-
-    <plurals name="actionbar_unread_messages">
-        <!-- String for the actionbar subtitle when messages are unread [CHAR LIMIT=30] -->
-        <item quantity="other"><xliff:g id="count" example="4">%1$d</xliff:g> unread</item>
-    </plurals>
-
-    <!-- Displayed at the end of the conversation list in the widget. Tapping on this will open the default Inbox. [CHAR LIMIT=35] -->
-    <string name="view_more_conversations">View more conversations</string>
-
-    <!-- Displayed while we load a conversation. [CHAR LIMIT=100] -->
-    <string name="loading_conversation">Loading\u2026</string>
-
-    <!-- Name of the Mailboxes activity [CHAR LIMIT=30] -->
-    <string name="activity_mailbox_selection">Choose account</string>
-
-    <!-- Name of the Folders activity [CHAR LIMIT=30] -->
-    <string name="activity_folder_selection">Choose folder</string>
-
-    <!-- Name of the Folder shortcut widget. Should use "Email" to refer to the app. [CHAR LIMIT=30] -->
-    <string name="folder_shortcut_widget_label">Email folder</string>
-
-    <!-- Folder selection dialog -->
-    <!-- Title for change folders dialog [CHAR LIMIT=30] -->
-    <string name="change_folders_selection_dialog_title">Change folders</string>
-    <!-- Title for move to dialog [CHAR LIMIT=30] -->
-    <string name="move_to_selection_dialog_title">Move to</string>
-
-    <!-- Search -->
-    <!-- Title of the search dialog -->
-    <string name="search_title" translatable="false">Unified Email</string>
-    <!-- Shown in light gray in the Search box when no text has been entered [CHAR LIMIT=20]-->
-    <string name="search_hint">Search</string>
-    <!-- Search Results: Text for status of the search when the results are completely loaded [CHAR LIMIT=10] -->
-    <string name="search_results_loaded"><xliff:g id="searchCount">%1$d</xliff:g></string>
-    <!-- Voice search is not supported on this device [CHAR LIMIT=100] -->
-    <string name="voice_search_not_supported">Voice search is not supported on this device.</string>
-    <!-- Description of the back button [CHAR LIMIT=100] -->
-    <string name="search_back_desc">Close search</string>
-    <!-- Description of the voice icon [CHAR LIMIT=100] -->
-    <string name="search_voice_desc">Start voice search</string>
-    <!-- Description of the clear icon (clears the current input text in the search bar) [CHAR LIMIT=100] -->
-    <string name="search_clear_desc">Clear search text</string>
-
-    <!-- Shown in conversation list footer when application cannot make a connection [CHAR LIMIT=20]-->
-    <string name="network_error">No connection</string>
-    <!-- Button at bottom of conversation list screen if last attempt to load conversations failed [CHAR LIMIT=20]-->
-    <string name="retry">Retry</string>
-    <!-- Button at bottom of conversation list screen if the folder for which contents are being shown supports loading more on demand [CHAR LIMIT=20]-->
-    <string name="load_more">Load more</string>
-
-    <!-- Text for dummy attachments to load the actual attachment. This is not an ideal string, but it's too late to add a new string and get it translated -->
-    <string name="load_attachment">@string/load_more</string>
-
-    <!-- Shortcut strings -->
-    <!-- Title for shortcut naming dialog [CHAR LIMIT=100]-->
-    <string name="shortcut_name_title">Name folder shortcut</string>
-
-    <!-- Wait fragment strings -->
-    <!-- Displayed in title bar during the initial sync  [CHAR LIMIT=40] -->
-    <string name="wait_for_sync_title">Waiting for sync</string>
-    <!-- Title for the screen displayed during the initial sync [CHAR LIMIT=100]  -->
-    <string name="not_synced_title">Account not synced</string>
-    <!-- Displayed in the middle of the screen during the initial sync [CHAR LIMIT=300]-->
-    <string name="wait_for_manual_sync_body">This account isn\'t set up to sync automatically.\nTouch <b>Sync Now</b> to sync mail once, or <b>Change Sync Settings</b> to set up this account to sync mail automatically.</string>
-    <!-- Displayed at the bottom of the screen during the initial sync. If pressed will sync users mail for the selected account. [CHAR LIMIT=12]  -->
-    <string name="manual_sync">Sync now</string>
-    <!-- Displayed at the bottom of the screen during the initial sync. If pressed will open sync setting screen for accounts. [CHAR LIMIT=30]  -->
-    <string name="change_sync_settings">Change sync settings</string>
-
-    <!-- Displayed when we could not load a photo in the photo viewer. [CHAR LIMIT=30] -->
-    <string name="photo_load_failed">Couldn\'t load image</string>
-
-    <!--  The move message / change labels action can't be taken because the selected messages
-        come from different accounts -->
-    <string name="cant_move_or_change_labels">Can\'t move because selection contains multiple
-        accounts.</string>
-
-    <!-- Format string used when displaying a summary in a message summary in list notification that was triggered by several new conversations.
-         Extra space between sender and subject is intentional.  [CHAR LIMIT=120] -->
-    <string name="multiple_new_message_notification_item"><b><xliff:g id="sender">%1$s</xliff:g></b>\u0020\u0020\u0020<xliff:g id="subject">%2$s</xliff:g></string>
-
-    <!-- Format string used when displaying the big text of a notification that was triggered by a single new conversation. [CHAR LIMIT=120] -->
-    <string name="single_new_message_notification_big_text"><xliff:g id="subject">%1$s</xliff:g>\n<xliff:g id="snippet">%2$s</xliff:g></string>
-
-    <!-- Displayed in a message subheading. Ignore the current spam warning. [CHAR LIMIT=30] -->
-    <string name="ignore_spam_warning">Ignore, I trust this message</string>
-
-    <!-- Displayed in the message heading. Shown if the message was sent via another domain. [CHAR LIMIT=10] -->
-    <string name="via_domain">via <xliff:g id="viaDomain">%1$s</xliff:g></string>
-
-    <!-- Button text for the button to click to have the user sign in again or adjust their credentials. [CHAR LIMIT=20]-->
-    <string name="signin">Sign-in</string>
-    <!-- Button text for the button to click for more information. [CHAR LIMIT=20]-->
-    <string name="info">Info</string>
-    <!-- Button text for the button to click to report feedback. [CHAR LIMIT=20]-->
-    <string name="report">Report</string>
-    <!-- Button text for the button to click to show newly received messages in the active thread. [CHAR LIMIT=20]-->
-    <string name="show">Show</string>
-    <!-- Dialog title when a sync error occurs. [CHAR LIMIT=50]-->
-    <string name="sync_error">Couldn\'t sync.</string>
-    <!-- Dialog title when a sync error occurs. [CHAR LIMIT=100]-->
-    <string name="sync_error_message">Your device doesn\'t have enough storage space to sync.</string>
-    <!-- Button text for the button to click to go to the manage storage settings screen. [CHAR LIMIT=20]-->
-    <string name="storage">Storage</string>
-
-    <string translatable="false" name="hierarchical_folder_parent_top"><xliff:g id="topLevelParent">%1$s</xliff:g>\u2215<xliff:g id="parent">%2$s</xliff:g>\u2215</string>
-    <string translatable="false" name="hierarchical_folder_parent_top_ellip"><xliff:g id="topLevelParent">%1$s</xliff:g>\u2215\u2026\u2215<xliff:g id="parent">%2$s</xliff:g>\u2215</string>
-    <string translatable="false" name="hierarchical_folder_top"><xliff:g id="topLevelParent">%1$s</xliff:g>\u2215</string>
-
-    <!-- Token used as a divider between senders -->
-    <string name="senders_split_token">,\u00A0</string>
-    <string name="draft_count_format">\u00A0(<xliff:g id="count">%1$s</xliff:g>)</string>
-
-    <!-- Token to replace senders that are not visible -->
-    <string translatable="false" name="senders_elided">..</string>
-    <!-- Token used to space out elided senders that are not visible -->
-    <string translatable="false" name="elided_padding_token">\u00A0</string>
-    <!-- Token used to space out message count, draft text, and senders -->
-    <string translatable="false" name="message_count_spacer">\u00A0\u00A0</string>
-
-    <string translatable="false" name="quote_begin">&lt;div class=\"quote\"&gt;</string>
-
-    <!-- String used in the FolderListFragment to mark the start of user-defined folders -->
-    <string name="all_folders_heading">All folders</string>
-    <!-- String used in the FolderListFragment to mark the start of recent folders -->
-    <string name="recent_folders_heading">Recent folders</string>
-
-    <!-- Dialog title when showing message header details in a popup window. [CHAR LIMIT=100]-->
-    <string name="message_details_title">Message details</string>
-
-    <!-- General preference: Label of the setting for the direction to move to
-         when deleting the current message.
-         Options contain "newer message","older message", etc. [CHAR LIMIT=32] -->
-    <string name="preference_advance_to_title">Auto-advance</string>
-
-    <!-- The auto-advance modes -->
-    <string-array name="prefEntries_autoAdvance">
-        <!-- Newer conversation -->
-        <item>Newer</item>
-        <!-- Older conversation -->
-        <item>Older</item>
-        <!-- Conversation list -->
-        <item>Conversation list</item>
-    </string-array>
-
-    <!-- Description for each auto-advance option to display after the user has picked one -->
-    <!-- The entries here must correspond to the entries in prefEntries_autoAdvance [CHAR LIMIT=60] -->
-    <string-array name="prefSummaries_autoAdvance">
-        <!-- Newer conversation -->
-        <item>Show newer conversation after you delete</item>
-        <!-- Older conversation -->
-        <item>Show older conversation after you delete</item>
-        <!-- Conversation list -->
-        <item>Show conversation list after you delete</item>
-    </string-array>
-
-    <!-- Dialog title for the auto-advance list -->
-    <string name="prefDialogTitle_autoAdvance">Advance to</string>
-
-    <!-- TODO: these pref keys that are never user visible should probably be
-    moved to a donttranslate file -->
-    <!-- The default auto-advance mode -->
-    <string translatable="false" name="prefDefault_autoAdvance">list</string>
-
-    <!-- The auto-advance mode values -->
-    <string-array translatable="false" name="prefValues_autoAdvance">
-        <item>newer</item>
-        <item>older</item>
-        <item>list</item>
-    </string-array>
-
-    <!-- Settings screen, title of "Restore default for "Show pictures"" [CHAR LIMIT=1000]-->
-    <string name="clear_display_images_whitelist_title">Clear picture approvals</string>
-
-    <!-- Settings screen, title of dialog shown to confirm action when user taps
-    "Clear picture approvals" in preferences [CHAR LIMIT=200]-->
-    <string name="clear_display_images_whitelist_dialog_title">Clear picture approvals?</string>
-    <!-- Settings screen, message of dialog shown to confirm action when tapping
-    "Clear picture approvals" [CHAR LIMIT=1000]-->
-    <string name="clear_display_images_whitelist_dialog_message">Stop displaying inline images from senders you previously allowed.</string>
-
-    <!-- Message shown in toast when the user taps "Restore default for "Show pictures"" in Gmail general preferences. [CHAR LIMIT=50] -->
-    <string name="sender_whitelist_cleared">Pictures won\'t be shown automatically.</string>
-
-    <!-- Settings screen, name of the setting that lets the user choose their signature [CHAR LIMIT=50] -->
-    <string name="preferences_signature_title">Signature</string>
-    <!-- Settings screen, title of the dialog that lets the user configure their signature [CHAR LIMIT=50] -->
-    <string name="preferences_signature_dialog_title">Signature</string>
-    <!-- Settings screen, setting summary text when no signature set [CHAR LIMIT=100] -->
-    <string name="preferences_signature_summary_not_set">Not set</string>
-
-    <!-- Notification action for replying to a message. [CHAR LIMIT=20] -->
-    <string name="notification_action_reply">Reply</string>
-    <!-- Notification action for replying-all to a message. [CHAR LIMIT=20] -->
-    <string name="notification_action_reply_all">Reply all</string>
-    <!-- Notification action for archiving a message. [CHAR LIMIT=20] -->
-    <string name="notification_action_archive">Archive</string>
-    <!-- Notification action for removing a label from a message. [CHAR LIMIT=20] -->
-    <string name="notification_action_remove_label">Remove label</string>
-    <!-- Notification action for deleting a message. [CHAR LIMIT=20] -->
-    <string name="notification_action_delete">Delete</string>
-
-    <!-- Notification undo text after archiving a message. [CHAR LIMIT=30] -->
-    <string name="notification_action_undo_archive">Archived</string>
-    <!-- Notification undo text after removing a label from a message. [CHAR LIMIT=30] -->
-    <string name="notification_action_undo_remove_label">Label Removed</string>
-    <!-- Notification undo text after deleting a message. [CHAR LIMIT=30] -->
-    <string name="notification_action_undo_delete">Deleted</string>
-
-    <!-- Regex that specifies veiled addresses. These are all empty because this is disabled currently. -->
-    <string name="veiled_address"/>
-    <!-- String to be shown instead of a veiled addresses. [CHAR LIMIT=50] -->
-    <string name="veiled_alternate_text"/>
-    <!-- String to be shown instead of a veiled addresses. [CHAR LIMIT=50] -->
-    <string name="veiled_alternate_text_unknown_person"/>
-    <!-- Summary string to be shown instead of a veiled recipient. [CHAR LIMIT=50] -->
-    <string name="veiled_summary_unknown_person"/>
-
-    <!-- Notification ticker text for per-label notification [CHAR LIMIT=30]-->
-    <string name="label_notification_ticker">"<xliff:g id="label">%s</xliff:g>: <xliff:g id="notification">%s</xliff:g>"</string>
-
-    <!-- Notification message to the user upon new messages for a conversation. [CHAR LIMIT=120] -->
-    <plurals name="new_messages">
-        <item quantity="one"><xliff:g id="count">%1$d</xliff:g> new message</item>
-        <item quantity="other"><xliff:g id="count">%1$d</xliff:g> new messages</item>
-    </plurals>
-
-    <!-- Format string used when displaying the title of a notification that was triggered by a single new conversation. [CHAR LIMIT=120] -->
-    <string name="single_new_message_notification_title"><xliff:g id="sender">%1$s</xliff:g>: <xliff:g id="subject">%2$s</xliff:g></string>
-
-    <!-- Settings screen, what to display for Ringtone when the user chooses "silent" [CHAR LIMIT=100]-->
-    <string name="silent_ringtone">Silent</string>
-
-    <!-- Settings screen, preference name for archive vs. delete [CHAR LIMIT=50] -->
-    <string name="preference_removal_action_title">Default action</string>
-    <!-- Options to select from for whether to have archive or delete as the remove action [CHAR LIMIT=50] -->
-    <string-array name="prefEntries_removal_action">
-        <item>Archive</item>
-        <item>Delete</item>
-    </string-array>
-    <!-- Description of currently selected option of whether to use archive or delete as remove action [CHAR LIMIT=200] -->
-    <string-array name="prefSummaries_removal_action_summary">
-        <item>Archive</item>
-        <item>Delete</item>
-    </string-array>
-    <string-array translatable="false" name="prefValues_removal_action">
-        <item>archive</item>
-        <item>delete</item>
-    </string-array>
-    <!-- Dialog title for the choosing whether to use archive or delete as remove action [CHAR LIMIT=150] -->
-    <string name="prefDialogTitle_removal_action">Default action</string>
-    <!-- The default value -->
-    <string translatable="false" name="prefDefault_removal_action">archive</string>
-
-    <!--  Settings screen, Reply to all default setting title  [CHAR LIMIT=30] -->
-    <string name="preferences_default_reply_all_title">Reply all</string>
-    <!--  Settings screen, Reply to all default setting summary [CHAR LIMIT=70] -->
-    <string name="preferences_default_reply_all_summary_impl">Use as default for message replies</string>
-    <!--  DO NOT TRANSLATE THE BELOW STRING - In order to allow overriding of this for K tablets (but not pre-K tablets), we use an indirection with the actual string defined above. -->
-    <string name="preferences_default_reply_all_summary" translatable="false">@string/preferences_default_reply_all_summary_impl</string>
-
-    <!-- Preference name for swipe actions preference [CHAR LIMIT=100]-->
-    <string name="preference_swipe_title">Swipe actions</string>
-    <!-- Preference description swiping in conversation list option [CHAR LIMIT=100] -->
-    <string name="preference_swipe_description">In conversation list</string>
-
-    <!-- Preference name for whether to display sender images in conversation list [CHAR LIMIT=100] -->
-    <string name="preference_sender_image_title">Sender image</string>
-    <!-- Preference description for whether to display sender image option [CHAR LIMIT=200] -->
-    <string name="preference_sender_image_description">Show beside name in conversation list</string>
-
-    <!-- Conversation list screen overflow menu in trash folder [CHAR LIMIT=50]  -->
-    <string name="empty_trash">Empty Trash</string>
-
-    <!-- Conversation list screen overflow menu in spam folder [CHAR LIMIT=50]  -->
-    <string name="empty_spam">Empty Spam</string>
-
-    <!-- Dialog title for empty trash confirmation dialog [CHAR LIMIT=100] -->
-    <string name="empty_trash_dialog_title">Empty Trash?</string>
-
-    <!-- Dialog title for empty spam confirmation dialog [CHAR LIMIT=100] -->
-    <string name="empty_spam_dialog_title">Empty Spam?</string>
-
-    <!-- Dialog message for empty folder confirmation dialog [CHAR LIMIT=300] -->
-    <plurals name="empty_folder_dialog_message">
-        <item quantity="one"><xliff:g id="count">%1$d</xliff:g> message will be permanently deleted.</item>
-        <item quantity="other"><xliff:g id="count">%1$d</xliff:g> messages will be permanently deleted.</item>
-    </plurals>
-
-    <!-- Strings used for accessibility for the items that toggles the drawer action  -->
-    <string name="drawer_open">Open navigation drawer</string>
-    <string name="drawer_close">Close navigation drawer</string>
-
-    <string name="conversation_photo_welcome_text">Touch a sender image to select that conversation.</string>
-
-    <string name="long_press_to_select_tip">Touch &amp; hold to select one conversation, then touch to select more.</string>
-
-    <!-- Content description for the folder icon for nested folders. -->
-    <string name="folder_icon_desc">Folder icon</string>
-
-    <!--  Button, "Add account" in the preference screen [CHAR LIMIT=30] -->
-    <string name="add_account">Add account</string>
-
-    <!-- Content Provider Authority for Eml Attachments -->
-    <string name="eml_attachment_provider" translatable="false">com.android.mail.provider.eml.attachment</string>
-
-    <!-- Content description for the "X" image icon for dismissing a tip. This is used for spoken description of the icon when touch explore is enabled. [CHAR LIMIT=50] -->
-    <string name="dismiss_tip_hover_text">Dismiss tip</string>
-
-    <!-- Tip for letting user know that their device auto-sync setting
-        is turned off, in case they are wondering why they are not
-        receiving any new mail. [CHAR LIMIT=250] -->
-    <string name="auto_sync_off">Auto-sync is off. Touch to turn on.</string>
-
-    <!-- Tip for letting user know that their account level sync setting
-        is turned off, in case they are wondering why they are not
-        receiving any new mail. Then prompts the user to enable sync in Gmail's
-        account settings. [CHAR LIMIT=250] -->
-    <string name="account_sync_off">Account sync is off. Turn on in &lt;a href=\'http://www.example.com\'>Account\u00A0settings.&lt;/a></string>
-
-    <!-- Hint text that there are X number of unsent messages users
-    Outbox. [CHAR LIMIT=250] -->
-    <string name="unsent_messages_in_outbox"><xliff:g id="number">%1$s</xliff:g>
-    unsent in <xliff:g id="outbox">%2$s</xliff:g></string>
-
-    <!-- Title of dialog to turn auto-sync on [CHAR LIMIT=100] -->
-    <string name="turn_auto_sync_on_dialog_title">Turn auto-sync on?</string>
-
-    <!-- Text of dialog to turn auto-sync on [CHAR LIMIT=500] -->
-    <string name="turn_auto_sync_on_dialog_body">Changes you make to
-    all apps and accounts, not just Gmail, will be synchronized
-    between the web, your other devices, and your <xliff:g
-    id="phone_or_tablet">%1$s</xliff:g>.</string>
-
-    <!-- Phone (vs. tablet) for describing this device [CHAR LIMIT=30] -->
-    <string name="phone">phone</string>
-
-    <!-- Tablet (vs. phone) for describing this device [CHAR LIMIT=30] -->
-    <string name="tablet">tablet</string>
-
-    <!-- Confirm button text for dialog to turn auto-sync on [CHAR
-         LIMIT=30] -->
-    <string name="turn_auto_sync_on_dialog_confirm_btn">Turn on</string>
-
-    <!-- Button in conversation list to show more folders [CHAR LIMIT=50] -->
-    <string name="show_n_more_folders">Show <xliff:g id="number">%1$s</xliff:g> folders</string>
-    <!-- Button in conversation list to hide folders [CHAR LIMIT=50] -->
-    <string name="hide_folders">Hide folders</string>
-
-    <!-- Menu item text to that when clicked will allow a user to print an email message. [CHAR LIMIT=25] -->
-    <string name="print">Print</string>
-    <!-- Menu item text to that when clicked will allow a user to print an email conversation. [CHAR LIMIT=25] -->
-    <string name="print_all">Print all</string>
-    <!-- Number of messages in a conversation [CHAR LIMIT=30]-->
-    <plurals name="num_messages">
-        <item quantity="one"><xliff:g id="count">%1$d</xliff:g> message</item>
-        <item quantity="other"><xliff:g id="count">%1$d</xliff:g> messages</item>
-    </plurals>
-
-    <!-- Display format of an email recipient, displayed in printed message details [CHAR LIMIT=10] -->
-    <string name="address_print_display_format" translatable="false"><xliff:g id="name">%1$s</xliff:g> &amp;lt;<xliff:g id="email">%2$s</xliff:g>&amp;gt;</string>
-    <!-- Shown to display the date of the message [CHAR LIMIT=50] -->
-    <string name="date_message_received_print"><xliff:g id="day_and_date">%1$s</xliff:g> at <xliff:g id="time">%2$s</xliff:g></string>
-    <!-- Shown to display the to recipient(s) of the message if the message is a draft [CHAR LIMIT=20] -->
-    <string name="draft_to_heading">Draft To:</string>
-
-    <!-- Shown to display in the message header if the message is a draft and there are no "to" addresses in the draft [CHAR LIMIT=10] -->
-    <string name="draft_heading">Draft</string>
-    <!-- Shown to inform the user that the quoted text for this message has been hidden. [CHAR LIMIT=50] -->
-    <string name="quoted_text_hidden_print">Quoted text hidden</string>
-    <!-- Number of attachments in a message [CHAR LIMIT=30]-->
-    <plurals name="num_attachments">
-        <item quantity="one"><xliff:g id="count">%1$d</xliff:g> attachment</item>
-        <item quantity="other"><xliff:g id="count">%1$d</xliff:g> attachments</item>
-    </plurals>
-
-    <!-- Provider name for widgets -->
-    <string name="widget_provider" translatable="false">com.android.mail.widget.WidgetProvider</string>
-
-    <string name="print_job_name" translatable="false">Unified Email - <xliff:g id="subject">%1$s</xliff:g></string>
-    <!-- Title to display when an email has no subject. [CHAR LIMIT=50]-->
-    <string name="no_subject">(no subject)</string>
-
-    <!-- Action bar title for the screen to set a vacation responder (out-of-office) message. [CHAR LIMIT=50] -->
-    <string name="vacation_responder">Vacation responder</string>
-    <!-- Account preference: Title of the setting to set a vacation responder (out-of-office) message. [CHAR LIMIT=50]-->
-    <string name="preferences_vacation_responder_title">Vacation responder</string>
-    <!-- Shown in vacation responder; the body of the message [CHAR LIMIT=100] -->
-    <string name="vacation_responder_body_hint_text">Message</string>
-    <!-- Shown in vacation responder; accompanies a checkbox that, if checked, causes vacation responses to be sent to people in the user's contacts [CHAR LIMIT=75] -->
-    <string name="send_to_contacts_text">Send only to my Contacts</string>
-    <!-- Shown in vacation responder; accompanies a checkbox that, if checked, causes vacation responses to be sent to people in the user's corporate domain [CHAR LIMIT=75] -->
-    <string name="send_to_domain_text">Send only to <xliff:g id="domain">%1$s</xliff:g></string>
-    <!-- Title text for the button to be pressed if the user wishes to change the start date of the vacation responder. [CHAR LIMIT=25]-->
-    <string name="pick_start_date_title">Starts</string>
-    <!-- Title text for the button to be pressed if the user wishes to change the end date of the vacation responder.
-            This text should include a note that this field is optional to set. [CHAR LIMIT=25]-->
-    <string name="pick_end_date_title">Ends (Optional)</string>
-    <!-- Shown to display that an end date in the vacation responder has not been set. [CHAR LIMIT=25]-->
-    <string name="date_not_set">Not set</string>
-    <!-- Title text for the dialog that appears when the user wishes to change the end date of the vacation responder.
-            This text should include a note that this field is optional to set. [CHAR LIMIT=35]-->
-    <string name="set_end_date_dialog_title">End date (optional)</string>
-    <!-- Shown as an option in a dialog to set a custom end date for a vacation responder message.  [CHAR LIMIT=30] -->
-    <string name="custom_date">Custom</string>
-    <!-- Shown as an option in a dialog to set no end date for a vacation responder message. [CHAR LIMIT=30]-->
-    <string name="date_none">None</string>
-    <!-- Asks the user whether they wish to discard changes. [CHAR LIMIT=50]-->
-    <string name="discard_changes">Discard changes?</string>
-    <!-- Toast, vacation responder changes were saved. [CHAR LIMIT=100]-->
-    <string name="vacation_responder_changes_saved">Vacation responder changes saved</string>
-    <!-- Toast, vacation responder changes were discarded. [CHAR LIMIT=100]-->
-    <string name="vacation_responder_changes_discarded">Vacation responder changes discarded</string>
-    <!-- Account preference: Subtitle of the setting to set a vacation responder (out-of-office) message
-            when the vacation responder is off. [CHAR LIMIT=50]-->
-    <string name="vacation_responder_off">Off</string>
-    <!-- Account preference: Subtitle of the setting to set a vacation responder (out-of-office) message
-            when the vacation responder is on but does not have an end date set (only a start date). [CHAR LIMIT=50]-->
-    <string name="vacation_responder_on">On, from <xliff:g id="date">%1$s</xliff:g></string>
-    <!-- Account preference: Subtitle of the setting to set a vacation responder (out-of-office) message
-            when the vacation responder is on and has both a start and end date set. [CHAR LIMIT=50]-->
-    <string name="vacation_responder_on_with_end_date">On, from <xliff:g id="start-date">%1$s</xliff:g> to <xliff:g id="end-date">%2$s</xliff:g></string>
-    <!-- Informs the user that both the subject and body of the vacation responder are empty
-         when they try to enable the responder. [CHAR LIMIT=50]-->
-    <string name="vacation_responder_empty_subject_and_body_warning">Add a subject or message</string>
-
-    <!-- Content description for the attach button that appears in compose for tablet layouts.
-         This is not to be confused with the menu items, this is an actual button in the layout.
-         On v18 and below devices, this button is used to attach photos only and so the text
-         is for adding a photo attachment. On v19, it is used to attach an arbitrary file
-         and so this string is overridden to use the "attach file" text. The drawable used
-         for this button is overridden similarly. -->
-    <string name="attach_file_content_description" translatable="false">@string/add_photo_attachment</string>
-
-    <!-- Displayed below a message that has been truncated to show the full message. [CHAR LIMIT=50] -->
-    <string name="view_entire_message">View entire message</string>
-
-    <!-- Toast text for error loading an eml file -->
-    <string name="eml_loader_error_toast">Can\'t open this file</string>
-
-    <!-- String tag identifying the drawer pullout view -->
-    <string name="drawer_pullout_tag" translatable="false">drawer_pullout</string>
-
-    <!-- Menu item that displays the help page. [CHAR LIMIT=50]-->
-    <string name="help_and_info">Help</string>
-
-    <!-- Menu item that displays the help page. [CHAR LIMIT=50]-->
-    <string name="help_and_feedback">Help &amp; feedback</string>
-
-    <!-- URI to display the help content; this must be overlayed -->
-    <string name="help_uri" translatable="false"></string>
-
-    <!-- Solicit feedback string in about screen [CHAR LIMIT=50]-->
-    <string name="feedback">Send feedback</string>
-
-    <!-- Copyright text [CHAR LIMIT=50] -->
-    <string name="copyright">&#169;<xliff:g id="year" example="2010">%1$d</xliff:g> Google Inc.</string>
-
-    <!-- Version text [CHAR LIMIT=50] -->
-    <string name="version"><xliff:g id="app_name" example="Email">%1$s</xliff:g> version <xliff:g id="version" example="2.2.1">%2$s</xliff:g></string>
-
-    <!-- Menu item: view a webpage about this application [CHAR LIMIT=50]; this MUST be overlayed -->
-    <string name="view_app_page"></string>
-
-    <!-- URL to a webpage about this application; this MUST be overlayed -->
-    <string name="app_url" translatable="false"></string>
-
-    <!-- Menu item: print... [CHAR LIMIT=25] -->
-    <string name="print_dialog">Print\u2026</string>
-
-    <!-- Menu item: copyright information [CHAR LIMIT=25] -->
-    <string name="copyright_information">Copyright information</string>
-
-    <!-- Menu item: privacy policy [CHAR LIMIT=25] -->
-    <string name="privacy_policy">Privacy policy</string>
-
-    <!-- URI to display the privacy; this must be overlayed -->
-    <string name="privacy_policy_uri" translatable="false"></string>
-
-    <!-- Menu item: open source licenses [CHAR LIMIT=25] -->
-    <string name="open_source_licenses">Open source licenses</string>
-
-    <!-- Activity class name for showing a full message url.
-         Empty by default since this should be overridden by implementing apps. -->
-    <string name="full_message_activity" translatable="false"></string>
-
-    <!-- One of the default canned responses used when replying to an email on a wearable device [CHAR LIMIT=30] -->
-    <string name="reply_choice_yes">Yes</string>
-    <!-- One of the default canned responses used when replying to an email on a wearable device [CHAR LIMIT=30] -->
-    <string name="reply_choice_no">No</string>
-    <!-- One of the default canned responses used when replying to an email on a wearable device [CHAR LIMIT=30] -->
-    <string name="reply_choice_ok">OK</string>
-    <!-- One of the default canned responses used when replying to an email on a wearable device [CHAR LIMIT=30] -->
-    <string name="reply_choice_hehe">Hehe</string>
-    <!-- One of the default canned responses used when replying to an email on a wearable device [CHAR LIMIT=30] -->
-    <string name="reply_choice_thanks">Thanks</string>
-    <!-- One of the default canned responses used when replying to an email on a wearable device [CHAR LIMIT=30] -->
-    <string name="reply_choice_i_agree">I agree</string>
-    <!-- One of the default canned responses used when replying to an email on a wearable device [CHAR LIMIT=30] -->
-    <string name="reply_choice_nice">Nice</string>
-    <!-- One of the default canned responses used when replying to an email on a wearable device [CHAR LIMIT=30] -->
-    <string name="reply_on_my_way">On my way</string>
-    <!-- One of the default canned responses used when replying to an email on a wearable device [CHAR LIMIT=30] -->
-    <string name="reply_choice_later">OK, let me get back to you</string>
-    <!-- One of the default canned responses used when replying to an email on a wearable device [CHAR LIMIT=30] -->
-    <string name="reply_choice_smiling_face">:)</string>
-    <!-- One of the default canned responses used when replying to an email on a wearable device [CHAR LIMIT=30] -->
-    <string name="reply_choice_frowning_face">:(</string>
-
-    <array name="reply_choices">
-        <item>@string/reply_choice_yes</item>
-        <item>@string/reply_choice_no</item>
-        <item>@string/reply_choice_ok</item>
-        <item>@string/reply_choice_hehe</item>
-        <item>@string/reply_choice_thanks</item>
-        <item>@string/reply_choice_i_agree</item>
-        <item>@string/reply_choice_nice</item>
-        <item>@string/reply_on_my_way</item>
-        <item>@string/reply_choice_later</item>
-        <item>@string/reply_choice_smiling_face</item>
-        <item>@string/reply_choice_frowning_face</item>
-    </array>
-
-    <!-- Settings screen, heading for grouping action confirmation related  settings together [CHAR LIMIT=100] -->
-    <string name="preference_header_action_confirmations">Action Confirmations</string>
-    <!--  Settings screen, confirm on action option title [CHAR LIMIT=150] -->
-    <string name="preference_confirm_before_delete_title">Confirm before deleting</string>
-    <!--  Settings screen, confirm on action option title [CHAR LIMIT=150] -->
-    <string name="preference_confirm_before_archive_title">Confirm before archiving</string>
-    <!--  Settings screen, confirm on action option title [CHAR LIMIT=150] -->
-    <string name="preference_confirm_before_send_title">Confirm before sending</string>
-
-    <!--  Settings screen, Conversation mode setting titile  [CHAR LIMIT=30] -->
-    <string name="preferences_conversation_mode_title">Auto-fit messages</string>
-    <!--  Settings screen, Conversation mode setting summary [CHAR LIMIT=70] -->
-    <string name="preferences_conversation_mode_summary">Shrink messages to fit the screen</string>
-
-    <!--  Settings screen, disable snap headers setting title  [CHAR LIMIT=30] -->
-    <string name="preferences_disable_snap_headers_title">Message actions</string>
-
-    <!-- The snap header summaries -->
-    <string-array name="prefSummaries_snapHeader">
-        <item>Always show message actions at the top of the screen</item>
-        <item>Only show message actions at the top of the screen when rotated to portrait</item>
-        <item>Don\'t show message actions outside the message header</item>
-    </string-array>
-
-    <!-- The snap header modes -->
-    <string-array name="prefEntries_snapHeader">
-        <item>Always show</item>
-        <item>Only show in portrait</item>
-        <item>Don\'t show</item>
-    </string-array>
-
-    <!-- The snap header values -->
-    <string-array translatable="false" name="prefValues_snapHeader">
-        <item>always</item>
-        <item>portrait</item>
-        <item>never</item>
-    </string-array>
-
-    <!-- Settings screen, title of "Clear search history" menu item -->
-    <string name="clear_history_title">Clear search history</string>
-    <!-- Message shown in toast when the user taps "clear search history" in general preferences. [CHAR LIMIT=50] -->
-    <string name="search_history_cleared">Search history cleared.</string>
-    <!-- Settings screen, title of dialog shown to confirm action when user taps
-    "Clear search history" in preferences [CHAR LIMIT=200]-->
-    <string name="clear_history_dialog_title">Clear search history?</string>
-    <!-- Settings screen, message of dialog shown to confirm action when user taps
-    "Clear search history" in preferences [CHAR LIMIT=1000]-->
-    <string name="clear_history_dialog_message">All the searches you\'ve previously performed will be removed.</string>
-
-    <!-- Settings screen, preference item to launch into Settings [CHAR LIMIT=50] -->
-    <string name="manage_accounts_menu_item">Manage Accounts</string>
-
-    <!-- Settings screen, main title of the screen, big font [CHAR LIMIT=50]-->
-    <string name="general_preferences_title">General settings</string>
-
-    <!-- Settings screen title -->
-    <!-- Name of the Settings activity -->
-    <string name="activity_preferences">Settings</string>
-
-    <!-- Content description for the action menu overflow button. [CHAR LIMIT=NONE] -->
-    <string name="overflow_description">More options</string>
-
-    <string name="user_agent_format" translatable="false">%1$s AndroidUnifiedEmail/%2$s</string>
-
-    <!-- Text when there is a security hold on an account that needs to be accepted. The email address param takes the for "abc@xyz.com" -->
-    <string name="security_hold_required_text">Security update required for <xliff:g id="email_address">%1$s</xliff:g></string>
-
-    <!-- Text to go to the dialog to accept the security hold -->
-    <string name="update_security_text">update now</string>
-    <!-- Shown when user submits a form. [CHAR LIMIT=40] -->
-    <string name="forms_are_disabled">Forms are disabled in Gmail</string>
-
-    <!-- activity name of the photoviewer -->
-    <string name="photo_view_activity" translatable="false">com.android.mail.photo.MailPhotoViewActivity</string>
-    <string name="preferences_signature_content" msgid="4801741764511807065">"Sent from my Alcatel A3A PLUS"</string>
-</resources>
Index: vendor/branch/5058A_Claro/packages/apps/Email/UnifiedEmail/res/values-es/strings.xml
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Email/UnifiedEmail/res/values-es/strings.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Email/UnifiedEmail/res/values-es/strings.xml	(revision 3018)
@@ -1,485 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- 
-     Copyright (C) 2011 Google Inc.
-     Licensed to The Android Open Source Project.
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
- -->
-
-<resources xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string name="from" msgid="5159056500059912358">"De"</string>
-    <string name="to" msgid="3971614275716830581">"Para"</string>
-    <string name="cc" msgid="8768828862207919684">"Cc"</string>
-    <string name="bcc" msgid="519303553518479171">"Cco"</string>
-    <string name="subject_hint" msgid="2136470287303571827">"Asunto"</string>
-    <string name="body_hint" msgid="6478994981747057817">"Escribe tu correo"</string>
-    <string name="add_file_attachment" msgid="2604880054248593993">"Adjuntar archivo"</string>
-    <string name="add_photo_attachment" msgid="7163589794940909528">"Adjuntar imagen"</string>
-    <string name="save_draft" msgid="2669523480789672118">"Guardar borrador"</string>
-    <string name="discard" msgid="4905982179911608430">"Descartar"</string>
-    <string name="compose" msgid="2602861958391035523">"Redactar"</string>
-    <string name="compose_title" msgid="5673376086133995913">"Redactar"</string>
-  <string-array name="compose_modes">
-    <item msgid="9000553538766397816">"Responder"</item>
-    <item msgid="2767793214788399009">"Responder a todos"</item>
-    <item msgid="2758162027982270607">"Reenviar"</item>
-  </string-array>
-    <string name="reply_attribution" msgid="1114972798797833259">"El <xliff:g id="DATE">%s</xliff:g>, <xliff:g id="PERSON">%s</xliff:g> escribió:"</string>
-    <string name="forward_attribution" msgid="597850048345475752">"---------- Mensaje reenviado ----------&lt;br&gt;De: <xliff:g id="FROM">%1$s</xliff:g>&lt;br&gt;Fecha: <xliff:g id="DATE">%2$s</xliff:g>&lt;br&gt;Asunto: <xliff:g id="SUBJECT">%3$s</xliff:g>&lt;br&gt;Para: <xliff:g id="TO">%4$s</xliff:g>&lt;br&gt;"</string>
-    <string name="forward_attribution_no_headers" msgid="1828826576779486239">"---------- Mensaje reenviado ----------"</string>
-    <string name="cc_attribution" msgid="2928584226469388899">"Cc: <xliff:g id="CC">%1$s</xliff:g> &lt;br&gt;"</string>
-    <string name="select_attachment_type" msgid="353236686616663062">"Selecciona el tipo de archivo adjunto."</string>
-    <string name="too_large_to_attach_single" msgid="2669897137966512530">"No puedes adjuntar archivos superiores a <xliff:g id="MAXSIZE">%1$s</xliff:g>."</string>
-    <string name="too_large_to_attach_multiple" msgid="1620163295709036343">"Uno o varios archivos no se han adjuntado (límite de <xliff:g id="MAXSIZE">%1$s</xliff:g>)."</string>
-    <string name="too_large_to_attach_additional" msgid="4964155563465970480">"No se ha adjuntado el archivo. Se ha alcanzado el límite de <xliff:g id="MAXSIZE">%1$s</xliff:g>."</string>
-    <string name="generic_attachment_problem" msgid="4683974765387240723">"No se ha podido adjuntar el archivo."</string>
-    <string name="attachment_permission_denied" msgid="2274397783497640486">"Se ha denegado el permiso para el archivo adjunto."</string>
-    <string name="recipient_needed" msgid="319816879398937214">"Añade al menos un destinatario."</string>
-    <string name="confirm_send_message_with_no_subject" msgid="1442628074022609987">"El asunto del mensaje está vacío."</string>
-    <string name="confirm_send_message_with_no_body" msgid="3329355318700201516">"El cuerpo del mensaje está vacío."</string>
-    <string name="confirm_send_message" msgid="6211518590166222735">"¿Quieres enviar este mensaje?"</string>
-    <string name="message_discarded" msgid="6792661321962262024">"Mensaje descartado"</string>
-    <string name="signature" msgid="3172144541947408374">\n\n"<xliff:g id="SIGNATURE">%s</xliff:g>"</string>
-    <string name="custom_from_account_label" msgid="5042317430007736322">"Enviar como:"</string>
-    <string name="send" msgid="4269810089682120826">"Enviar"</string>
-    <string name="mark_read" msgid="579388143288052493">"Marcar como leída"</string>
-    <string name="mark_unread" msgid="6245060538061533191">"Marcar como no leída"</string>
-    <string name="toggle_read_unread" msgid="1006469736520919028">"Alternar entre leídos y no leídos"</string>
-    <string name="mute" msgid="9164839998562321569">"Silenciar"</string>
-    <string name="add_star" msgid="3275117671153616270">"Destacar"</string>
-    <string name="remove_star" msgid="9126690774161840733">"No destacar"</string>
-    <string name="remove_folder" msgid="2379905457788576297">"Eliminar de <xliff:g id="FOLDERNAME">%1$s</xliff:g>"</string>
-    <string name="archive" msgid="5978663590021719939">"Archivar"</string>
-    <string name="report_spam" msgid="4106897677959987340">"Marcar como spam"</string>
-    <string name="mark_not_spam" msgid="8617774236231366651">"Informar de que no es spam"</string>
-    <string name="report_phishing" msgid="8454666464488413739">"Denunciar suplantación identidad"</string>
-    <string name="delete" msgid="6784262386780496958">"Eliminar"</string>
-    <string name="discard_drafts" msgid="5881484193628472105">"Descartar borradores"</string>
-    <string name="discard_failed" msgid="7520780769812210279">"No se ha podido descartar"</string>
-    <string name="refresh" msgid="1533748989749277511">"Actualizar"</string>
-    <string name="reply" msgid="8337757482824207118">"Responder"</string>
-    <string name="reply_all" msgid="5366796103758360957">"Responder a todos"</string>
-    <string name="resume_draft" msgid="1272723181782570649">"Editar"</string>
-    <string name="forward" msgid="4397585145490426320">"Reenviar"</string>
-    <string name="menu_compose" msgid="4575025207594709432">"Redactar"</string>
-    <string name="menu_change_folders" msgid="2194946192901276625">"Cambiar carpetas"</string>
-    <string name="menu_move_to" msgid="7948877550284452830">"Mover a"</string>
-    <string name="menu_move_to_inbox" msgid="258554178236001444">"Mover a bandeja de entrada"</string>
-    <string name="menu_manage_folders" msgid="8486398523679534519">"Ajustes de carpeta"</string>
-    <string name="menu_show_original" msgid="2330398228979616661">"Volver al tamaño original"</string>
-    <string name="menu_settings" msgid="7993485401501778040">"Ajustes"</string>
-    <string name="menu_search" msgid="1949652467806052768">"Buscar"</string>
-    <string name="menu_toggle_drawer" msgid="8653049392208282481">"Alternar panel"</string>
-    <string name="drawer_title" msgid="3766219846644975778">"Navegación"</string>
-    <string name="mark_important" msgid="8781680450177768820">"Marcar como importante"</string>
-    <string name="mark_not_important" msgid="3342258155408116917">"Marcar como no importante"</string>
-    <string name="add_cc_label" msgid="2249679001141195213">"Añadir Cc/Cco"</string>
-    <string name="add_bcc_label" msgid="963745641238037813">"Añadir Cco"</string>
-    <string name="quoted_text" msgid="977782904293216533">"Incluir texto citado"</string>
-    <string name="quoted_text_label" msgid="2296807722849923934">"Citar texto"</string>
-    <string name="respond_inline" msgid="6609746292081928078">"Responder entre líneas"</string>
-    <string name="bytes" msgid="651011686747499628">"<xliff:g id="COUNT">%s</xliff:g> B"</string>
-    <string name="kilobytes" msgid="1523463964465770347">"<xliff:g id="COUNT">%s</xliff:g> KB"</string>
-    <string name="megabytes" msgid="4309397368708773323">"<xliff:g id="COUNT">%s</xliff:g> MB"</string>
-    <string name="attachment_image" msgid="6375306026208274564">"Imagen"</string>
-    <string name="attachment_video" msgid="7119476472603939848">"Vídeo"</string>
-    <string name="attachment_audio" msgid="7097658089301809284">"Audio"</string>
-    <string name="attachment_text" msgid="3485853714965922173">"SMS"</string>
-    <string name="attachment_application_msword" msgid="2110108876623152162">"Documento"</string>
-    <string name="attachment_application_vnd_ms_powerpoint" msgid="425353008963359230">"Presentación"</string>
-    <string name="attachment_application_vnd_ms_excel" msgid="5585781311136609103">"Hoja de cálculo"</string>
-    <string name="attachment_application_pdf" msgid="4207340200944655970">"PDF"</string>
-    <string name="attachment_unknown" msgid="3360536730101083926">"Archivo <xliff:g id="ATTACHMENTEXTENSION">%s</xliff:g>"</string>
-    <string name="preview_attachment" msgid="6265457626086113833">"Vista previa"</string>
-    <string name="save_attachment" msgid="375685179032130033">"Guardar"</string>
-    <string name="download_again" msgid="8195787340878328119">"Volver a descargar"</string>
-    <string name="remove_attachment_desc" msgid="1478445871170879140">"Eliminar el archivo adjunto <xliff:g id="ATTACHMENTNAME">%s</xliff:g>"</string>
-    <string name="more_info_attachment" msgid="2899691682394864507">"Información"</string>
-    <string name="no_application_found" msgid="7309485680354949680">"Ninguna aplicación puede abrir este archivo adjunto."</string>
-    <string name="fetching_attachment" msgid="2286628490159574159">"Extrayendo archivo adjunto..."</string>
-    <string name="please_wait" msgid="3953824147776128899">"Espera, por favor..."</string>
-    <string name="saved" msgid="161536102236967534">"Guardado, <xliff:g id="SIZE">%s</xliff:g>"</string>
-    <string name="download_failed" msgid="3878373998269062395">"Error, toca para reintentar"</string>
-    <string name="menu_photo_save_all" msgid="2742869476474613396">"Guardar todo"</string>
-    <string name="menu_photo_share" msgid="6410980274832639330">"Compartir"</string>
-    <string name="menu_photo_share_all" msgid="3049053252719665320">"Compartir todo"</string>
-    <string name="menu_photo_print" msgid="3084679038179342333">"Imprimir"</string>
-    <string name="saving" msgid="6274238733828387433">"Guardando..."</string>
-    <string name="choosertitle_sharevia" msgid="3539537264873337959">"Compartir a través de"</string>
-    <string name="contextmenu_openlink" msgid="6952228183947135362">"Abrir en el navegador"</string>
-    <string name="contextmenu_copy" msgid="2584243784216385180">"Copiar"</string>
-    <string name="contextmenu_copylink" msgid="8659897702269320063">"Copiar URL de enlace"</string>
-    <string name="contextmenu_view_image" msgid="1031172763893491000">"Ver imagen"</string>
-    <string name="contextmenu_dial_dot" msgid="8881095692316726628">"Marcar..."</string>
-    <string name="contextmenu_sms_dot" msgid="5319737001771622657">"SMS..."</string>
-    <string name="contextmenu_add_contact" msgid="2310064151427072475">"Añadir contacto"</string>
-    <string name="contextmenu_send_mail" msgid="3834654593200105396">"Enviar correo"</string>
-    <string name="contextmenu_map" msgid="5118951927399465521">"Mapa"</string>
-    <string name="contextmenu_sharelink" msgid="8670940060477758709">"Compartir enlace"</string>
-    <string name="content_description" msgid="854320355052962069">"<xliff:g id="TOHEADER">%1$s</xliff:g><xliff:g id="PARTICIPANT">%2$s</xliff:g> sobre <xliff:g id="SUBJECT">%3$s</xliff:g>, <xliff:g id="SNIPPET">%4$s</xliff:g> el <xliff:g id="DATE">%5$s</xliff:g>, <xliff:g id="READSTATE">%6$s</xliff:g>"</string>
-    <string name="content_description_today" msgid="1634422834354116955">"<xliff:g id="TOHEADER">%1$s</xliff:g><xliff:g id="PARTICIPANT">%2$s</xliff:g> sobre <xliff:g id="SUBJECT">%3$s</xliff:g>, <xliff:g id="SNIPPET">%4$s</xliff:g> a las <xliff:g id="TIME">%5$s</xliff:g>, <xliff:g id="READSTATE">%6$s</xliff:g>"</string>
-    <string name="content_description_with_folders" msgid="482368474097191879">"<xliff:g id="TOHEADER">%1$s</xliff:g><xliff:g id="PARTICIPANT">%2$s</xliff:g> sobre <xliff:g id="SUBJECT">%3$s</xliff:g>, <xliff:g id="SNIPPET">%4$s</xliff:g> el <xliff:g id="DATE">%5$s</xliff:g>, <xliff:g id="READSTATE">%6$s</xliff:g>, etiquetas: <xliff:g id="FOLDERS">%7$s</xliff:g>"</string>
-    <string name="content_description_today_with_folders" msgid="860548626146933495">"<xliff:g id="TOHEADER">%1$s</xliff:g><xliff:g id="PARTICIPANT">%2$s</xliff:g> sobre <xliff:g id="SUBJECT">%3$s</xliff:g>, <xliff:g id="SNIPPET">%4$s</xliff:g> a las <xliff:g id="TIME">%5$s</xliff:g>, <xliff:g id="READSTATE">%6$s</xliff:g>, etiquetas: <xliff:g id="FOLDERS">%7$s</xliff:g>"</string>
-    <string name="read_string" msgid="5495929677508576520">"conversación leída"</string>
-    <string name="unread_string" msgid="7342558841698083381">"conversación no leída"</string>
-    <string name="filtered_tag" msgid="721666921386074505">"[<xliff:g id="TAG">%1$s</xliff:g>]<xliff:g id="SUBJECT">%2$s</xliff:g>"</string>
-    <string name="badge_and_subject" msgid="3979372269373936750">"<xliff:g id="ID_1">%1$s</xliff:g> <xliff:g id="ID_2">%2$s</xliff:g>"</string>
-  <plurals name="draft">
-    <item quantity="one" msgid="6717535677167943402">"Borrador"</item>
-    <item quantity="other" msgid="1335781147509740039">"Borradores"</item>
-  </plurals>
-    <string name="sending" msgid="5600034886763930499">"Enviando..."</string>
-    <string name="message_retrying" msgid="5335188121407261331">"Reintentando..."</string>
-    <string name="message_failed" msgid="7887650587384601790">"Error"</string>
-    <string name="send_failed" msgid="2186285547449865010">"No se ha enviado el mensaje."</string>
-    <string name="me_object_pronoun" msgid="4674452244417913816">"yo"</string>
-    <string name="me_subject_pronoun" msgid="7479328865714008288">"yo"</string>
-  <plurals name="confirm_delete_conversation">
-    <item quantity="one" msgid="7605755011865575440">"¿Eliminar esta conversación?"</item>
-    <item quantity="other" msgid="1585660381208712562">"¿Eliminar estas <xliff:g id="COUNT">%1$d</xliff:g> conversaciones?"</item>
-  </plurals>
-  <plurals name="confirm_archive_conversation">
-    <item quantity="one" msgid="9105551557653306945">"¿Archivar esta conversación?"</item>
-    <item quantity="other" msgid="2001972798185641108">"¿Archivar estas <xliff:g id="COUNT">%1$d</xliff:g> conversaciones?"</item>
-  </plurals>
-  <plurals name="confirm_discard_drafts_conversation">
-    <item quantity="one" msgid="2030421499893210789">"¿Quieres descartar este mensaje?"</item>
-    <item quantity="other" msgid="782234447471532005">"¿Quieres descartar estos <xliff:g id="COUNT">%1$d</xliff:g> mensajes?"</item>
-  </plurals>
-    <string name="confirm_discard_text" msgid="5172680524418848519">"¿Quieres descartar este mensaje?"</string>
-    <string name="loading_conversations" msgid="7255732786298655246">"Cargando…"</string>
-    <string name="empty_inbox" msgid="5901734942362315228">"¡Ya has terminado! Disfruta del día."</string>
-    <string name="empty_search" msgid="8564899353449880818">"¡Vaya! No hemos encontrado nada para \"<xliff:g id="SEARCH_QUERY">%1$s</xliff:g>\"."</string>
-    <string name="empty_spam_folder" msgid="3288985543286122800">"Enhorabuena, no tienes spam."</string>
-    <string name="empty_trash_folder" msgid="378119063015945020">"La papelera está vacía. Gracias por reciclar."</string>
-    <string name="empty_folder" msgid="3227552635613553855">"No hay correo en esta carpeta."</string>
-    <string name="getting_messages" msgid="8403333791332403244">"Obteniendo tus mensajes"</string>
-    <string name="undo" msgid="8256285267701059609">"Deshacer"</string>
-  <plurals name="conversation_unstarred">
-    <item quantity="one" msgid="1701235480675303125">"<xliff:g id="COUNT">%1$d</xliff:g> conversación sin destacar"</item>
-    <item quantity="other" msgid="1154441830432477256">"<xliff:g id="COUNT">%1$d</xliff:g> conversaciones sin destacar"</item>
-  </plurals>
-  <plurals name="conversation_muted">
-    <item quantity="one" msgid="3622533556738049499">"Se ha silenciado <xliff:g id="COUNT">%1$d</xliff:g> conversación"</item>
-    <item quantity="other" msgid="4559007262578295280">"Se han silenciado <xliff:g id="COUNT">%1$d</xliff:g> conversaciones"</item>
-  </plurals>
-  <plurals name="conversation_spammed">
-    <item quantity="one" msgid="1749550834135461470">"Se ha informado de &lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; conversación como spam"</item>
-    <item quantity="other" msgid="664292592683692920">"Se ha informado de &lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; conversaciones como spam"</item>
-  </plurals>
-  <plurals name="conversation_not_spam">
-    <item quantity="one" msgid="3680479171846552641">"Se ha informado de que &lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; conversación no es spam"</item>
-    <item quantity="other" msgid="6351739502184556635">"Se ha informado de que &lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; conversaciones no son spam"</item>
-  </plurals>
-  <plurals name="conversation_not_important">
-    <item quantity="one" msgid="7432667428974709669">"Se ha marcado <xliff:g id="COUNT">%1$d</xliff:g> conversación como no importante"</item>
-    <item quantity="other" msgid="4823331037057239763">"Se han marcado <xliff:g id="COUNT">%1$d</xliff:g> conversaciones como no importantes"</item>
-  </plurals>
-  <plurals name="conversation_phished">
-    <item quantity="one" msgid="3511804715065046338">"Se ha denunciado &lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; conversación por suplantación de identidad"</item>
-    <item quantity="other" msgid="8400382886585779414">"Se han denunciado &lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; conversaciones por suplantación de identidad"</item>
-  </plurals>
-  <plurals name="conversation_archived">
-    <item quantity="one" msgid="4859172326053399351">"Se ha archivado <xliff:g id="COUNT">%1$d</xliff:g> conversación"</item>
-    <item quantity="other" msgid="8520761617935818623">"Se han archivado <xliff:g id="COUNT">%1$d</xliff:g> conversaciones"</item>
-  </plurals>
-  <plurals name="conversation_deleted">
-    <item quantity="one" msgid="4819167474123685161">"Se ha eliminado <xliff:g id="COUNT">%1$d</xliff:g> conversación"</item>
-    <item quantity="other" msgid="6287534453625638257">"Se han eliminado <xliff:g id="COUNT">%1$d</xliff:g> conversaciones"</item>
-  </plurals>
-    <string name="deleted" msgid="7378013910782008375">"Eliminada"</string>
-    <string name="archived" msgid="6283673603512713022">"Archivada"</string>
-    <string name="folder_removed" msgid="5656281444688183676">"Eliminado de <xliff:g id="FOLDERNAME">%1$s</xliff:g>"</string>
-  <plurals name="conversation_folder_changed">
-    <item quantity="one" msgid="7787126147584620603">"Se ha cambiado la carpeta"</item>
-    <item quantity="other" msgid="6307772984911017972">"Se han cambiado las carpetas"</item>
-  </plurals>
-    <string name="conversation_folder_moved" msgid="6475872337373081683">"Movida a <xliff:g id="FOLDERNAME">%1$s</xliff:g>"</string>
-    <string name="search_results_header" msgid="1529438451150580188">"Resultados"</string>
-    <string name="search_unsupported" msgid="2873920566477359177">"Esta cuenta no admite la función de búsqueda."</string>
-    <string name="search_suggestion_desc" msgid="4165491276003825492">"Sugerencia: <xliff:g id="SUGGESTION">%s</xliff:g>"</string>
-    <string name="add_label" msgid="3285338046038610902">"Añadir carpeta"</string>
-  <plurals name="new_incoming_messages">
-    <item quantity="one" msgid="1532079301006372605">"<xliff:g id="COUNT">%1$d</xliff:g> mensaje nuevo"</item>
-    <item quantity="other" msgid="4085982174357328926">"<xliff:g id="COUNT">%1$d</xliff:g> mensajes nuevos"</item>
-  </plurals>
-    <string name="date_and_view_details" msgid="2952994746916149969">"<xliff:g id="DATE">%1$s</xliff:g> &lt;a href=\'http://www.example.com\'&gt;Detalles&lt;/a&gt;"</string>
-    <string name="hide_details" msgid="8018801050702453314">"Ocultar detalles"</string>
-    <string name="to_message_header" msgid="3954385178027011919">"para <xliff:g id="RECIPIENTS">%1$s</xliff:g>"</string>
-    <string name="bcc_header_for_recipient_summary" msgid="1834716758549842454">"Cco: "</string>
-    <string name="contact_info_string" msgid="6484930184867405276">"Mostrar información de contacto de <xliff:g id="NAME">%1$s</xliff:g>"</string>
-    <string name="contact_info_string_default" msgid="6204228921864816351">"Mostrar información de contacto"</string>
-  <plurals name="show_messages_read">
-    <item quantity="other" msgid="8094857552036574099">"Expandir <xliff:g id="COUNT">%1$d</xliff:g> mensajes anteriores"</item>
-  </plurals>
-  <plurals name="super_collapsed_block_accessibility_announcement">
-    <item quantity="other" msgid="2016326586162784420">"Se han expandido <xliff:g id="COUNT">%1$d</xliff:g> mensajes anteriores"</item>
-  </plurals>
-    <string name="from_heading" msgid="48290556829713090">"De:"</string>
-    <string name="replyto_heading" msgid="8275255318292059079">"Responder a:"</string>
-    <string name="to_heading" msgid="3495203282540398336">"Para: "</string>
-    <string name="to_heading_no_space" msgid="679167047628308670">"Para:"</string>
-    <string name="cc_heading" msgid="5603892257866345823">"Cc:"</string>
-    <string name="bcc_heading" msgid="1482186590756218269">"Cco:"</string>
-    <string name="date_heading" msgid="4213063948406397168">"Fecha:"</string>
-    <string name="show_images" msgid="436044894053204084">"Mostrar imágenes"</string>
-    <string name="always_show_images" msgid="556087529413707819">"Mostrar siempre imágenes de este remitente"</string>
-    <string name="always_show_images_toast" msgid="3763157294047555051">"Las imágenes de este remitente se mostrarán automáticamente."</string>
-    <string name="address_display_format" msgid="2098008376913966177">"<xliff:g id="NAME">%1$s</xliff:g> <xliff:g id="EMAIL">%2$s</xliff:g>"</string>
-    <string name="address_display_format_with_via_domain" msgid="8108294635074750048">"<xliff:g id="NAME">%1$s</xliff:g> <xliff:g id="EMAIL">%2$s</xliff:g> a través de <xliff:g id="VIA_DOMAIN">%3$s</xliff:g>"</string>
-    <string name="message_saved" msgid="3291655042310241793">"Mensaje guardado como borrador"</string>
-    <string name="sending_message" msgid="2487846954946637084">"Enviando mensaje..."</string>
-    <string name="invalid_recipient" msgid="9157434699389936584">"La dirección <xliff:g id="WRONGEMAIL">%s</xliff:g> no es válida."</string>
-    <string name="show_elided" msgid="3456154624105704327">"Mostrar texto citado"</string>
-    <string name="hide_elided" msgid="5768235486834692733">"▼ Ocultar texto citado"</string>
-    <string name="message_invite_title" msgid="5985161025144867256">"Invitación de calendario"</string>
-    <string name="message_invite_calendar_view" msgid="9181966650840809197">"Ver en calendario"</string>
-    <string name="message_invite_label_attending" msgid="4194264767870003397">"¿Asistirás?"</string>
-    <string name="message_invite_accept" msgid="8002758842580134835">"Sí"</string>
-    <string name="message_invite_tentative" msgid="3199418731566655887">"Quizás"</string>
-    <string name="message_invite_decline" msgid="6331040872447290777">"No"</string>
-    <string name="enumeration_comma" msgid="2848850136844740850">", "</string>
-    <string name="send_anyway" msgid="2727576121007079643">"Enviar igualmente"</string>
-    <string name="ok" msgid="6178802457914802336">"Aceptar"</string>
-    <string name="done" msgid="344354738335270292">"Listo"</string>
-    <string name="cancel" msgid="4831678293149626190">"Cancelar"</string>
-    <string name="clear" msgid="765949970989448022">"Borrar"</string>
-    <string name="next" msgid="2662478712866255138">"Siguiente"</string>
-    <string name="previous" msgid="8985379053279804274">"Anterior"</string>
-  <string-array name="sync_status">
-    <item msgid="4600303222943450797">"Sin errores"</item>
-    <item msgid="2835492307658712596">"Sin conexión"</item>
-    <item msgid="5932644761344898987">"Error al iniciar sesión"</item>
-    <item msgid="7335227237106118306">"Error de seguridad"</item>
-    <item msgid="8148525741623865182">"No se ha podido sincronizar"</item>
-    <item msgid="8026148967150231130">"Error interno"</item>
-    <item msgid="5442620760791553027">"Error del servidor"</item>
-  </string-array>
-    <string name="tap_to_configure" msgid="137172348280050643">"Tocar para configurar"</string>
-    <string name="non_synced_folder_description" msgid="3044618511909304701">"Para ver conversaciones, sincroniza esta carpeta."</string>
-    <string name="tap_to_configure_folder_sync" msgid="3280434399275638071">"Sincronizar carpeta"</string>
-    <string name="widget_large_unread_count" msgid="8699435859096455837">"%d+"</string>
-    <string name="large_unseen_count" msgid="3055042669246912518">"+<xliff:g id="COUNT">%d</xliff:g>"</string>
-    <string name="unseen_count" msgid="5509898665569695288">"<xliff:g id="COUNT">%d</xliff:g> nuevos"</string>
-  <plurals name="actionbar_unread_messages">
-    <item quantity="other" msgid="3863201473731766006">"<xliff:g id="COUNT">%1$d</xliff:g> no leídos"</item>
-  </plurals>
-    <string name="view_more_conversations" msgid="8377920000247101901">"Ver más conversaciones"</string>
-    <string name="loading_conversation" msgid="7931600025861500397">"Cargando..."</string>
-    <string name="activity_mailbox_selection" msgid="7489813868539767701">"Seleccionar cuenta"</string>
-    <string name="activity_folder_selection" msgid="8375243281001234750">"Seleccionar carpeta"</string>
-    <string name="folder_shortcut_widget_label" msgid="6466292659577092915">"Carpeta de correo"</string>
-    <string name="change_folders_selection_dialog_title" msgid="9174464298613273814">"Cambiar carpetas"</string>
-    <string name="move_to_selection_dialog_title" msgid="4052506464467083621">"Mover a"</string>
-    <string name="search_hint" msgid="7060626585689391003">"Buscar"</string>
-    <!-- no translation found for search_results_loaded (1784879343458807514) -->
-    <skip />
-    <string name="voice_search_not_supported" msgid="8493517060419469738">"Este dispositivo no es compatible con la búsqueda por voz."</string>
-    <string name="search_back_desc" msgid="8038224690392783652">"Cerrar la búsqueda"</string>
-    <string name="search_voice_desc" msgid="9103854398344077204">"Iniciar búsqueda por voz"</string>
-    <string name="search_clear_desc" msgid="3044261775183044862">"Borrar el texto de la búsqueda"</string>
-    <string name="network_error" msgid="5931164247644972255">"Sin conexión"</string>
-    <string name="retry" msgid="916102442074217293">"Reintentar"</string>
-    <string name="load_more" msgid="8702691358453560575">"Cargar más"</string>
-    <!-- no translation found for load_attachment (3894318473827290350) -->
-    <skip />
-    <string name="shortcut_name_title" msgid="1562534040126088628">"Asignar nombre a acceso directo de carpeta"</string>
-    <string name="wait_for_sync_title" msgid="4577632826912823075">"Esperando para sincronizar..."</string>
-    <string name="not_synced_title" msgid="3600180500934086346">"Cuenta no sincronizada"</string>
-    <string name="wait_for_manual_sync_body" msgid="2823149409451003378">"Esta cuenta no está configurada para sincronizarse de forma automática.\nToca "<b>"Sincronizar ahora"</b>" para sincronizar el correo una vez o selecciona "<b>"Cambiar ajustes de sincronización"</b>" para configurar la sincronización automática del correo en esta cuenta."</string>
-    <string name="manual_sync" msgid="2271479734895537848">"Sincronizar ahora"</string>
-    <string name="change_sync_settings" msgid="3615852118397055361">"Cambiar ajustes de sincronización"</string>
-    <string name="photo_load_failed" msgid="577471721679146999">"Error al cargar la imagen"</string>
-    <string name="cant_move_or_change_labels" msgid="4155490583610926755">"No se puede mover porque la selección contiene varias cuentas."</string>
-    <string name="multiple_new_message_notification_item" msgid="1386588046275174918"><b>"<xliff:g id="SENDER">%1$s</xliff:g>"</b>"   <xliff:g id="SUBJECT">%2$s</xliff:g>"</string>
-    <string name="single_new_message_notification_big_text" msgid="2170154732664242904">"<xliff:g id="SUBJECT">%1$s</xliff:g>\n<xliff:g id="SNIPPET">%2$s</xliff:g>"</string>
-    <string name="ignore_spam_warning" msgid="8760314545535838430">"Ignorar. Confío en el mensaje."</string>
-    <string name="via_domain" msgid="537951148511529082">"vía <xliff:g id="VIADOMAIN">%1$s</xliff:g>"</string>
-    <string name="signin" msgid="4699091478139791244">"Iniciar sesión"</string>
-    <string name="info" msgid="1357564480946178121">"Información"</string>
-    <string name="report" msgid="4318141326014579036">"Informar"</string>
-    <string name="show" msgid="2874876876336599985">"Mostrar"</string>
-    <string name="sync_error" msgid="1795794969006241678">"Error al sincronizar"</string>
-    <string name="sync_error_message" msgid="4182644657243736635">"No hay suficiente espacio en el dispositivo para sincronizar tu correo"</string>
-    <string name="storage" msgid="4783683938444150638">"Almacenamiento"</string>
-    <string name="senders_split_token" msgid="6549228851819460081">", "</string>
-    <string name="draft_count_format" msgid="9122583199850209286">" (<xliff:g id="COUNT">%1$s</xliff:g>)"</string>
-    <string name="all_folders_heading" msgid="9023770187629170967">"Todas las carpetas"</string>
-    <string name="recent_folders_heading" msgid="8943134955788867702">"Carpetas recientes"</string>
-    <string name="message_details_title" msgid="60771875776494764">"Detalles del mensaje"</string>
-    <string name="preference_advance_to_title" msgid="6385669491239514630">"Avance automático"</string>
-  <string-array name="prefEntries_autoAdvance">
-    <item msgid="1505450878799459652">"Más reciente"</item>
-    <item msgid="8000986144872247139">"Más antigua"</item>
-    <item msgid="8015001161633421314">"Lista de conversaciones"</item>
-  </string-array>
-  <string-array name="prefSummaries_autoAdvance">
-    <item msgid="8221665977497655719">"Mostrar conversación más reciente después de eliminar"</item>
-    <item msgid="1721869262893378141">"Mostrar conversación más antigua después de eliminar"</item>
-    <item msgid="880913657385630195">"Mostrar lista de conversaciones después de eliminar"</item>
-  </string-array>
-    <string name="prefDialogTitle_autoAdvance" msgid="5459235590885640678">"Ir a"</string>
-    <string name="clear_display_images_whitelist_title" msgid="2012677202404471778">"Borrar aprobaciones de imágenes"</string>
-    <string name="clear_display_images_whitelist_dialog_title" msgid="1942692501166848471">"¿Borrar aprobaciones de imágenes?"</string>
-    <string name="clear_display_images_whitelist_dialog_message" msgid="3952553078559373729">"Ya no se mostrarán imágenes de remitentes que se hayan permitido anteriormente."</string>
-    <string name="sender_whitelist_cleared" msgid="2490984995927904030">"Las imágenes de los mensajes no se mostrarán automáticamente."</string>
-    <string name="preferences_signature_title" msgid="2318034745474929902">"Firma"</string>
-    <string name="preferences_signature_dialog_title" msgid="4801741764511807064">"Firma"</string>
-    <string name="preferences_signature_summary_not_set" msgid="3776614319388053784">"Sin configurar"</string>
-    <string name="notification_action_reply" msgid="8378725460102575919">"Responder"</string>
-    <string name="notification_action_reply_all" msgid="5693469099941000037">"Responder a todos"</string>
-    <string name="notification_action_archive" msgid="2884874164831039047">"Archivar"</string>
-    <string name="notification_action_remove_label" msgid="3714785653186750981">"Eliminar etiqueta"</string>
-    <string name="notification_action_delete" msgid="3201627482564624132">"Eliminar"</string>
-    <string name="notification_action_undo_archive" msgid="600186958134073582">"Archivado"</string>
-    <string name="notification_action_undo_remove_label" msgid="8341924850540100690">"Etiqueta eliminada"</string>
-    <string name="notification_action_undo_delete" msgid="6915612337413587103">"Eliminado"</string>
-    <string name="veiled_address" msgid="2670378260196977266"></string>
-    <string name="veiled_alternate_text" msgid="6343564357099807582"></string>
-    <string name="veiled_alternate_text_unknown_person" msgid="6728323554307952217"></string>
-    <string name="veiled_summary_unknown_person" msgid="2122359944161241551"></string>
-    <string name="label_notification_ticker" msgid="323232821061341014">"<xliff:g id="LABEL">%s</xliff:g>: <xliff:g id="NOTIFICATION">%s</xliff:g>"</string>
-  <plurals name="new_messages">
-    <item quantity="one" msgid="3446656407520493241">"<xliff:g id="COUNT">%1$d</xliff:g> mensaje nuevo"</item>
-    <item quantity="other" msgid="3531683811183204615">"<xliff:g id="COUNT">%1$d</xliff:g> mensajes nuevos"</item>
-  </plurals>
-    <string name="single_new_message_notification_title" msgid="7954710563222504868">"<xliff:g id="SENDER">%1$s</xliff:g>: <xliff:g id="SUBJECT">%2$s</xliff:g>"</string>
-    <string name="silent_ringtone" msgid="1570794756474381886">"Silencio"</string>
-    <string name="preference_removal_action_title" msgid="3128186577060329884">"Acción predeterminada"</string>
-  <string-array name="prefEntries_removal_action">
-    <item msgid="7381624742404593351">"Archivar"</item>
-    <item msgid="2567465476369142505">"Eliminar"</item>
-  </string-array>
-  <string-array name="prefSummaries_removal_action_summary">
-    <item msgid="4080896545573973751">"Archivar"</item>
-    <item msgid="6088164268501960435">"Eliminar"</item>
-  </string-array>
-    <string name="prefDialogTitle_removal_action" msgid="7914272565548361304">"Acción predeterminada"</string>
-    <string name="preferences_default_reply_all_title" msgid="7255858488369635327">"Responder a todos"</string>
-    <string name="preferences_default_reply_all_summary_impl" msgid="895581085692979709">"Usar como opción predeterminada para responder mensajes"</string>
-    <string name="preference_swipe_title" msgid="2073613840893904205">"Acciones al deslizar el dedo"</string>
-    <string name="preference_swipe_description" msgid="3036560323237015010">"En la lista de conversaciones"</string>
-    <string name="preference_sender_image_title" msgid="7890813537985591865">"Imagen del remitente"</string>
-    <string name="preference_sender_image_description" msgid="3586817690132199889">"Mostrar junto al nombre en la lista de conversaciones"</string>
-    <string name="empty_trash" msgid="3385937024924728399">"Vaciar papelera"</string>
-    <string name="empty_spam" msgid="2911988289997281371">"Vaciar carpeta de spam"</string>
-    <string name="empty_trash_dialog_title" msgid="2104898489663621508">"¿Vaciar papelera?"</string>
-    <string name="empty_spam_dialog_title" msgid="1130319045917820569">"¿Vaciar carpeta de spam?"</string>
-  <plurals name="empty_folder_dialog_message">
-    <item quantity="one" msgid="3315412388217832914">"<xliff:g id="COUNT">%1$d</xliff:g> mensaje se eliminará de forma permanente."</item>
-    <item quantity="other" msgid="263840304486020101">"<xliff:g id="COUNT">%1$d</xliff:g> mensajes se eliminarán de forma permanente."</item>
-  </plurals>
-    <string name="drawer_open" msgid="2285557278907103851">"Abrir control de navegación"</string>
-    <string name="drawer_close" msgid="2065829742127544297">"Cerrar control de navegación"</string>
-    <string name="conversation_photo_welcome_text" msgid="836483155429003787">"Toca la imagen de un remitente para seleccionar esa conversación."</string>
-    <string name="long_press_to_select_tip" msgid="1660881999120625177">"Mantén pulsada una conversación para seleccionarla y, a continuación, toca otras conversaciones para seleccionarlas."</string>
-    <string name="folder_icon_desc" msgid="6272938864914794739">"Icono de carpeta"</string>
-    <string name="add_account" msgid="5905863370226612377">"Añadir cuenta"</string>
-    <string name="dismiss_tip_hover_text" msgid="5400049020835024519">"Ignorar sugerencia"</string>
-    <string name="auto_sync_off" msgid="3691189864057581214">"La sincronización automática está desactivada. Toca para activarla."</string>
-    <string name="account_sync_off" msgid="5720018952998097061">"La sincronización de la cuenta está desactivada. Actívala en &lt;a href=\'http://www.example.com\'&gt;Ajustes de la cuenta.&lt;/a&gt;"</string>
-    <string name="unsent_messages_in_outbox" msgid="146722891559469589">"<xliff:g id="NUMBER">%1$s</xliff:g> sin enviar en <xliff:g id="OUTBOX">%2$s</xliff:g>"</string>
-    <string name="turn_auto_sync_on_dialog_title" msgid="543412762396502297">"¿Quieres activar la sincronización automática?"</string>
-    <string name="turn_auto_sync_on_dialog_body" msgid="614939812938149398">"Los cambios que realices en todas las aplicaciones y cuentas, no solo en Gmail, se sincronizarán en la Web, otros de tus dispositivos y tu <xliff:g id="PHONE_OR_TABLET">%1$s</xliff:g>."</string>
-    <string name="phone" msgid="4142617042507912053">"teléfono"</string>
-    <string name="tablet" msgid="4593581125469224791">"tablet"</string>
-    <string name="turn_auto_sync_on_dialog_confirm_btn" msgid="7239160845196929866">"Activar"</string>
-    <string name="show_n_more_folders" msgid="1005879825500056552">"Mostrar <xliff:g id="NUMBER">%1$s</xliff:g> carpetas"</string>
-    <string name="hide_folders" msgid="7618891933409521283">"Ocultar carpetas"</string>
-    <string name="print" msgid="7987949243936577207">"Imprimir"</string>
-    <string name="print_all" msgid="4011022762279519941">"Imprimir todo"</string>
-  <plurals name="num_messages">
-    <item quantity="one" msgid="8071234386915191851">"<xliff:g id="COUNT">%1$d</xliff:g> mensaje"</item>
-    <item quantity="other" msgid="962415099931188360">"<xliff:g id="COUNT">%1$d</xliff:g> mensajes"</item>
-  </plurals>
-    <string name="date_message_received_print" msgid="4168417403884350040">"<xliff:g id="DAY_AND_DATE">%1$s</xliff:g> a las <xliff:g id="TIME">%2$s</xliff:g>"</string>
-    <string name="draft_to_heading" msgid="7370121943946205024">"Borrador para:"</string>
-    <string name="draft_heading" msgid="7032951343184552800">"Borrador"</string>
-    <string name="quoted_text_hidden_print" msgid="5256754205675159141">"El texto citado está oculto"</string>
-  <plurals name="num_attachments">
-    <item quantity="one" msgid="5494465717267988888">"<xliff:g id="COUNT">%1$d</xliff:g> adjunto"</item>
-    <item quantity="other" msgid="5422167728480739361">"<xliff:g id="COUNT">%1$d</xliff:g> adjuntos"</item>
-  </plurals>
-    <string name="no_subject" msgid="5622708348540036959">"(sin asunto)"</string>
-    <string name="vacation_responder" msgid="5570132559074523806">"Respuesta automática"</string>
-    <string name="preferences_vacation_responder_title" msgid="2268482117730576123">"Respuesta automática"</string>
-    <string name="vacation_responder_body_hint_text" msgid="9087613123105158494">"Mensaje"</string>
-    <string name="send_to_contacts_text" msgid="124432913980620545">"Enviar solo a mis contactos"</string>
-    <string name="send_to_domain_text" msgid="5064559546745918393">"Enviar solo a <xliff:g id="DOMAIN">%1$s</xliff:g>"</string>
-    <string name="pick_start_date_title" msgid="2274665037355224165">"Inicio"</string>
-    <string name="pick_end_date_title" msgid="733396083649496600">"Fin (opcional)"</string>
-    <string name="date_not_set" msgid="3251555782945051904">"Sin configurar"</string>
-    <string name="set_end_date_dialog_title" msgid="7543009262788808443">"Fecha de finalización (opcional)"</string>
-    <string name="custom_date" msgid="5794846334232367838">"Personalizar"</string>
-    <string name="date_none" msgid="1061426502665431412">"Ninguna"</string>
-    <string name="discard_changes" msgid="5699760550972324746">"¿Quieres descartar los cambios?"</string>
-    <string name="vacation_responder_changes_saved" msgid="91448817268121249">"Cambios de respuesta automática guardados"</string>
-    <string name="vacation_responder_changes_discarded" msgid="21756037735539983">"Cambios de respuesta automática descartados"</string>
-    <string name="vacation_responder_off" msgid="4429909341193366667">"No"</string>
-    <string name="vacation_responder_on" msgid="4913238379320882449">"Sí (a partir de <xliff:g id="DATE">%1$s</xliff:g>)"</string>
-    <string name="vacation_responder_on_with_end_date" msgid="4360941815371475955">"Sí (del <xliff:g id="START_DATE">%1$s</xliff:g> al <xliff:g id="END_DATE">%2$s</xliff:g>)"</string>
-    <string name="vacation_responder_empty_subject_and_body_warning" msgid="6233629618520852439">"Añadir un asunto o mensaje"</string>
-    <string name="view_entire_message" msgid="823281796655014454">"Ver todo el mensaje"</string>
-    <string name="eml_loader_error_toast" msgid="6577383216635400167">"No se puede abrir el archivo"</string>
-    <string name="help_and_info" msgid="3708286489943154681">"Ayuda"</string>
-    <string name="help_and_feedback" msgid="7211458338163287670">"Ayuda y sugerencias"</string>
-    <string name="feedback" msgid="204247008751740034">"Enviar sugerencias"</string>
-    <string name="copyright" msgid="3121335168340432582">"©<xliff:g id="YEAR">%1$d</xliff:g> Google Inc."</string>
-    <string name="version" msgid="1161745345056656547">"<xliff:g id="APP_NAME">%1$s</xliff:g> versión <xliff:g id="VERSION">%2$s</xliff:g>"</string>
-    <string name="view_app_page" msgid="3241990517052398927"></string>
-    <string name="print_dialog" msgid="8895536548487605661">"Imprimir..."</string>
-    <string name="copyright_information" msgid="971422874488783312">"Información de copyright"</string>
-    <string name="privacy_policy" msgid="212094623396418302">"Política de privacidad"</string>
-    <string name="open_source_licenses" msgid="8643615555920977752">"Licencias software libre"</string>
-    <string name="reply_choice_yes" msgid="3327633032975373220">"Sí"</string>
-    <string name="reply_choice_no" msgid="7068775605915475207">"No"</string>
-    <string name="reply_choice_ok" msgid="7881073621845053152">"Vale"</string>
-    <string name="reply_choice_hehe" msgid="6054314968043050748">"Je, je"</string>
-    <string name="reply_choice_thanks" msgid="4978961954288364694">"Gracias"</string>
-    <string name="reply_choice_i_agree" msgid="2496652737796884298">"Estoy de acuerdo"</string>
-    <string name="reply_choice_nice" msgid="4465894941302838676">"Genial"</string>
-    <string name="reply_on_my_way" msgid="5645003971107444269">"Voy de camino"</string>
-    <string name="reply_choice_later" msgid="4629219072859486413">"Vale, te llamo luego"</string>
-    <string name="reply_choice_smiling_face" msgid="1772253938506548631">":)"</string>
-    <string name="reply_choice_frowning_face" msgid="6260338807944002651">":("</string>
-    <string name="preference_header_action_confirmations" msgid="3922674681156121948">"Confirmaciones de acciones"</string>
-    <string name="preference_confirm_before_delete_title" msgid="7563587174619033835">"Confirmar antes de eliminar"</string>
-    <string name="preference_confirm_before_archive_title" msgid="7318645995655875718">"Confirmar antes de archivar"</string>
-    <string name="preference_confirm_before_send_title" msgid="4136585783513077039">"Confirmar antes de enviar"</string>
-    <string name="preferences_conversation_mode_title" msgid="389352009651720838">"Ajuste mensajes automático"</string>
-    <string name="preferences_conversation_mode_summary" msgid="5730999743867653106">"Adaptar mensajes al tamaño de la pantalla"</string>
-    <string name="preferences_disable_snap_headers_title" msgid="7257824136988429629">"Acciones de mensajes"</string>
-  <string-array name="prefSummaries_snapHeader">
-    <item msgid="43373293784193461">"Mostrar siempre acciones de mensajes en la parte superior de la pantalla"</item>
-    <item msgid="1765271305989996747">"Mostrar solo acciones de mensajes en la parte superior de la pantalla en modo vertical"</item>
-    <item msgid="6311113076575333488">"No mostrar acciones de mensajes fuera del encabezado del mensaje"</item>
-  </string-array>
-  <string-array name="prefEntries_snapHeader">
-    <item msgid="6906986566816683587">"Mostrar siempre"</item>
-    <item msgid="113299655708990672">"Mostrar solo en modo vertical"</item>
-    <item msgid="4403750311175924065">"No mostrar"</item>
-  </string-array>
-    <string name="clear_history_title" msgid="5536216295725760357">"Borrar historial de búsqueda"</string>
-    <string name="search_history_cleared" msgid="1461946302763342640">"Se ha borrado el historial de búsqueda."</string>
-    <string name="clear_history_dialog_title" msgid="3503603389704365385">"¿Borrar historial de búsqueda?"</string>
-    <string name="clear_history_dialog_message" msgid="5202922561632407778">"Se eliminarán todas las búsquedas que hayas hecho."</string>
-    <string name="manage_accounts_menu_item" msgid="4734660452395086786">"Administrar cuentas"</string>
-    <string name="general_preferences_title" msgid="4212138728220418162">"Ajustes generales"</string>
-    <string name="activity_preferences" msgid="8966077432517613292">"Ajustes"</string>
-    <string name="overflow_description" msgid="7886090597023240426">"Más opciones"</string>
-    <string name="security_hold_required_text" msgid="6619955920101834286">"<xliff:g id="EMAIL_ADDRESS">%1$s</xliff:g> tiene pendiente una actualización de seguridad"</string>
-    <string name="update_security_text" msgid="3527335757205741077">"actualizar ahora"</string>
-    <string name="forms_are_disabled" msgid="2876312737118986789">"Formularios inhabilitados en Gmail"</string>
-    <string name="preferences_signature_content" msgid="4801741764511807065">"Enviado desde mi Alcatel A3A PLUS de Movistar"</string>
-</resources>
Index: vendor/branch/5058A_Claro/packages/apps/Email/UnifiedEmail/res/values-es-rUS/strings.xml
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Email/UnifiedEmail/res/values-es-rUS/strings.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Email/UnifiedEmail/res/values-es-rUS/strings.xml	(revision 3018)
@@ -1,485 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- 
-     Copyright (C) 2011 Google Inc.
-     Licensed to The Android Open Source Project.
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
- -->
-
-<resources xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string name="from" msgid="5159056500059912358">"De"</string>
-    <string name="to" msgid="3971614275716830581">"Para"</string>
-    <string name="cc" msgid="8768828862207919684">"CC"</string>
-    <string name="bcc" msgid="519303553518479171">"CCO"</string>
-    <string name="subject_hint" msgid="2136470287303571827">"Asunto"</string>
-    <string name="body_hint" msgid="6478994981747057817">"Redactar un correo"</string>
-    <string name="add_file_attachment" msgid="2604880054248593993">"Adjuntar un archivo"</string>
-    <string name="add_photo_attachment" msgid="7163589794940909528">"Adjuntar imagen"</string>
-    <string name="save_draft" msgid="2669523480789672118">"Guardar como borrador"</string>
-    <string name="discard" msgid="4905982179911608430">"Descartar"</string>
-    <string name="compose" msgid="2602861958391035523">"Redactar"</string>
-    <string name="compose_title" msgid="5673376086133995913">"Redactar"</string>
-  <string-array name="compose_modes">
-    <item msgid="9000553538766397816">"Responder"</item>
-    <item msgid="2767793214788399009">"Responder a todos"</item>
-    <item msgid="2758162027982270607">"Reenviar"</item>
-  </string-array>
-    <string name="reply_attribution" msgid="1114972798797833259">"El <xliff:g id="DATE">%s</xliff:g>, <xliff:g id="PERSON">%s</xliff:g> escribió:"</string>
-    <string name="forward_attribution" msgid="597850048345475752">"---------- Mensaje reenviado ----------&lt;br&gt;De: <xliff:g id="FROM">%1$s</xliff:g>&lt;br&gt;Fecha: <xliff:g id="DATE">%2$s</xliff:g>&lt;br&gt;Asunto: <xliff:g id="SUBJECT">%3$s</xliff:g>&lt;br&gt;Para: <xliff:g id="TO">%4$s</xliff:g>&lt;br&gt;"</string>
-    <string name="forward_attribution_no_headers" msgid="1828826576779486239">"---------- Mensaje reenviado ----------"</string>
-    <string name="cc_attribution" msgid="2928584226469388899">"Cc: <xliff:g id="CC">%1$s</xliff:g>&lt;br&gt;"</string>
-    <string name="select_attachment_type" msgid="353236686616663062">"Elegir el tipo de archivo adjunto"</string>
-    <string name="too_large_to_attach_single" msgid="2669897137966512530">"No se puede adjuntar un archivo que supere el límite de <xliff:g id="MAXSIZE">%1$s</xliff:g>."</string>
-    <string name="too_large_to_attach_multiple" msgid="1620163295709036343">"No se adjuntaron uno o varios archivos. Se alcanzó el límite de <xliff:g id="MAXSIZE">%1$s</xliff:g>."</string>
-    <string name="too_large_to_attach_additional" msgid="4964155563465970480">"No se adjuntó el archivo. Se alcanzó el límite de <xliff:g id="MAXSIZE">%1$s</xliff:g>."</string>
-    <string name="generic_attachment_problem" msgid="4683974765387240723">"No se pudo adjuntar el archivo."</string>
-    <string name="attachment_permission_denied" msgid="2274397783497640486">"Se denegó el permiso para el archivo adjunto."</string>
-    <string name="recipient_needed" msgid="319816879398937214">"Agrega al menos un destinatario."</string>
-    <string name="confirm_send_message_with_no_subject" msgid="1442628074022609987">"El asunto del mensaje está vacío."</string>
-    <string name="confirm_send_message_with_no_body" msgid="3329355318700201516">"El cuerpo del mensaje está vacío."</string>
-    <string name="confirm_send_message" msgid="6211518590166222735">"¿Deseas enviar este mensaje?"</string>
-    <string name="message_discarded" msgid="6792661321962262024">"Mensaje descartado"</string>
-    <string name="signature" msgid="3172144541947408374">\n\n"<xliff:g id="SIGNATURE">%s</xliff:g>"</string>
-    <string name="custom_from_account_label" msgid="5042317430007736322">"Correo como:"</string>
-    <string name="send" msgid="4269810089682120826">"Enviar"</string>
-    <string name="mark_read" msgid="579388143288052493">"Marcar como leída"</string>
-    <string name="mark_unread" msgid="6245060538061533191">"Marcar como no leída"</string>
-    <string name="toggle_read_unread" msgid="1006469736520919028">"Alternar entre leídos y no leídos"</string>
-    <string name="mute" msgid="9164839998562321569">"Silenciar"</string>
-    <string name="add_star" msgid="3275117671153616270">"Destacar"</string>
-    <string name="remove_star" msgid="9126690774161840733">"Eliminar estrella"</string>
-    <string name="remove_folder" msgid="2379905457788576297">"Eliminar de <xliff:g id="FOLDERNAME">%1$s</xliff:g>"</string>
-    <string name="archive" msgid="5978663590021719939">"Archivar"</string>
-    <string name="report_spam" msgid="4106897677959987340">"Notificar spam"</string>
-    <string name="mark_not_spam" msgid="8617774236231366651">"Informar que no es spam"</string>
-    <string name="report_phishing" msgid="8454666464488413739">"Denunciar suplant. identidad"</string>
-    <string name="delete" msgid="6784262386780496958">"Eliminar"</string>
-    <string name="discard_drafts" msgid="5881484193628472105">"Descartar borradores"</string>
-    <string name="discard_failed" msgid="7520780769812210279">"Error al descartar"</string>
-    <string name="refresh" msgid="1533748989749277511">"Actualizar"</string>
-    <string name="reply" msgid="8337757482824207118">"Responder"</string>
-    <string name="reply_all" msgid="5366796103758360957">"Responder a todos"</string>
-    <string name="resume_draft" msgid="1272723181782570649">"Editar"</string>
-    <string name="forward" msgid="4397585145490426320">"Reenviar"</string>
-    <string name="menu_compose" msgid="4575025207594709432">"Redactar"</string>
-    <string name="menu_change_folders" msgid="2194946192901276625">"Cambiar carpetas"</string>
-    <string name="menu_move_to" msgid="7948877550284452830">"Mover a"</string>
-    <string name="menu_move_to_inbox" msgid="258554178236001444">"Mover a la bandeja de entrada"</string>
-    <string name="menu_manage_folders" msgid="8486398523679534519">"Configuración de carpetas"</string>
-    <string name="menu_show_original" msgid="2330398228979616661">"Volver a tamaño automát."</string>
-    <string name="menu_settings" msgid="7993485401501778040">"Configuración"</string>
-    <string name="menu_search" msgid="1949652467806052768">"Buscar"</string>
-    <string name="menu_toggle_drawer" msgid="8653049392208282481">"Activar o desactivar panel"</string>
-    <string name="drawer_title" msgid="3766219846644975778">"Navegación"</string>
-    <string name="mark_important" msgid="8781680450177768820">"Marcar como importante"</string>
-    <string name="mark_not_important" msgid="3342258155408116917">"Marcar como no importante"</string>
-    <string name="add_cc_label" msgid="2249679001141195213">"Agregar CC/CCO"</string>
-    <string name="add_bcc_label" msgid="963745641238037813">"Agregar CCO"</string>
-    <string name="quoted_text" msgid="977782904293216533">"Incluir el texto citado"</string>
-    <string name="quoted_text_label" msgid="2296807722849923934">"Citar texto"</string>
-    <string name="respond_inline" msgid="6609746292081928078">"Responder en línea"</string>
-    <string name="bytes" msgid="651011686747499628">"<xliff:g id="COUNT">%s</xliff:g> B"</string>
-    <string name="kilobytes" msgid="1523463964465770347">"<xliff:g id="COUNT">%s</xliff:g> KB"</string>
-    <string name="megabytes" msgid="4309397368708773323">"<xliff:g id="COUNT">%s</xliff:g> MB"</string>
-    <string name="attachment_image" msgid="6375306026208274564">"Imagen"</string>
-    <string name="attachment_video" msgid="7119476472603939848">"Video"</string>
-    <string name="attachment_audio" msgid="7097658089301809284">"Audio"</string>
-    <string name="attachment_text" msgid="3485853714965922173">"Texto"</string>
-    <string name="attachment_application_msword" msgid="2110108876623152162">"Documento"</string>
-    <string name="attachment_application_vnd_ms_powerpoint" msgid="425353008963359230">"Presentación"</string>
-    <string name="attachment_application_vnd_ms_excel" msgid="5585781311136609103">"Hoja de cálculo"</string>
-    <string name="attachment_application_pdf" msgid="4207340200944655970">"PDF"</string>
-    <string name="attachment_unknown" msgid="3360536730101083926">"Archivo <xliff:g id="ATTACHMENTEXTENSION">%s</xliff:g>"</string>
-    <string name="preview_attachment" msgid="6265457626086113833">"Vista prev"</string>
-    <string name="save_attachment" msgid="375685179032130033">"Guardar"</string>
-    <string name="download_again" msgid="8195787340878328119">"Volver a descargar"</string>
-    <string name="remove_attachment_desc" msgid="1478445871170879140">"Eliminar el archivo adjunto <xliff:g id="ATTACHMENTNAME">%s</xliff:g>"</string>
-    <string name="more_info_attachment" msgid="2899691682394864507">"Info"</string>
-    <string name="no_application_found" msgid="7309485680354949680">"Ninguna aplicación puede abrir este archivo adjunto para su visualización."</string>
-    <string name="fetching_attachment" msgid="2286628490159574159">"Obteniendo el archivo adjunto"</string>
-    <string name="please_wait" msgid="3953824147776128899">"Aguarda…"</string>
-    <string name="saved" msgid="161536102236967534">"Guardado, <xliff:g id="SIZE">%s</xliff:g>"</string>
-    <string name="download_failed" msgid="3878373998269062395">"Error; toca y reintenta."</string>
-    <string name="menu_photo_save_all" msgid="2742869476474613396">"Guardar todo"</string>
-    <string name="menu_photo_share" msgid="6410980274832639330">"Compartir"</string>
-    <string name="menu_photo_share_all" msgid="3049053252719665320">"Compartir todo"</string>
-    <string name="menu_photo_print" msgid="3084679038179342333">"Imprimir"</string>
-    <string name="saving" msgid="6274238733828387433">"Guardando..."</string>
-    <string name="choosertitle_sharevia" msgid="3539537264873337959">"Compartir mediante"</string>
-    <string name="contextmenu_openlink" msgid="6952228183947135362">"Abrir en el navegador"</string>
-    <string name="contextmenu_copy" msgid="2584243784216385180">"Copiar"</string>
-    <string name="contextmenu_copylink" msgid="8659897702269320063">"Copiar URL del vínculo"</string>
-    <string name="contextmenu_view_image" msgid="1031172763893491000">"Ver imagen"</string>
-    <string name="contextmenu_dial_dot" msgid="8881095692316726628">"Marcar..."</string>
-    <string name="contextmenu_sms_dot" msgid="5319737001771622657">"SMS..."</string>
-    <string name="contextmenu_add_contact" msgid="2310064151427072475">"Agregar contacto"</string>
-    <string name="contextmenu_send_mail" msgid="3834654593200105396">"Enviar correo"</string>
-    <string name="contextmenu_map" msgid="5118951927399465521">"Mapa"</string>
-    <string name="contextmenu_sharelink" msgid="8670940060477758709">"Compartir vínculo"</string>
-    <string name="content_description" msgid="854320355052962069">"<xliff:g id="TOHEADER">%1$s</xliff:g><xliff:g id="PARTICIPANT">%2$s</xliff:g> sobre <xliff:g id="SUBJECT">%3$s</xliff:g>, <xliff:g id="SNIPPET">%4$s</xliff:g> el <xliff:g id="DATE">%5$s</xliff:g>, <xliff:g id="READSTATE">%6$s</xliff:g>"</string>
-    <string name="content_description_today" msgid="1634422834354116955">"<xliff:g id="TOHEADER">%1$s</xliff:g><xliff:g id="PARTICIPANT">%2$s</xliff:g> sobre <xliff:g id="SUBJECT">%3$s</xliff:g>, <xliff:g id="SNIPPET">%4$s</xliff:g> a la hora <xliff:g id="TIME">%5$s</xliff:g>, <xliff:g id="READSTATE">%6$s</xliff:g>"</string>
-    <string name="content_description_with_folders" msgid="482368474097191879">"<xliff:g id="TOHEADER">%1$s</xliff:g><xliff:g id="PARTICIPANT">%2$s</xliff:g> sobre <xliff:g id="SUBJECT">%3$s</xliff:g>, <xliff:g id="SNIPPET">%4$s</xliff:g> el <xliff:g id="DATE">%5$s</xliff:g>, <xliff:g id="READSTATE">%6$s</xliff:g>, etiquetas: <xliff:g id="FOLDERS">%7$s</xliff:g>"</string>
-    <string name="content_description_today_with_folders" msgid="860548626146933495">"<xliff:g id="TOHEADER">%1$s</xliff:g><xliff:g id="PARTICIPANT">%2$s</xliff:g> sobre <xliff:g id="SUBJECT">%3$s</xliff:g>, <xliff:g id="SNIPPET">%4$s</xliff:g> a la(s) <xliff:g id="TIME">%5$s</xliff:g>, <xliff:g id="READSTATE">%6$s</xliff:g>, etiquetas: <xliff:g id="FOLDERS">%7$s</xliff:g>"</string>
-    <string name="read_string" msgid="5495929677508576520">"conversación leída"</string>
-    <string name="unread_string" msgid="7342558841698083381">"conversación no leída"</string>
-    <string name="filtered_tag" msgid="721666921386074505">"[<xliff:g id="TAG">%1$s</xliff:g>]<xliff:g id="SUBJECT">%2$s</xliff:g>"</string>
-    <string name="badge_and_subject" msgid="3979372269373936750">"<xliff:g id="ID_1">%1$s</xliff:g> <xliff:g id="ID_2">%2$s</xliff:g>"</string>
-  <plurals name="draft">
-    <item quantity="one" msgid="6717535677167943402">"Borrador"</item>
-    <item quantity="other" msgid="1335781147509740039">"Borradores"</item>
-  </plurals>
-    <string name="sending" msgid="5600034886763930499">"Enviando..."</string>
-    <string name="message_retrying" msgid="5335188121407261331">"Reintentando…"</string>
-    <string name="message_failed" msgid="7887650587384601790">"Error al enviar"</string>
-    <string name="send_failed" msgid="2186285547449865010">"No se envió el mensaje."</string>
-    <string name="me_object_pronoun" msgid="4674452244417913816">"mí"</string>
-    <string name="me_subject_pronoun" msgid="7479328865714008288">"yo"</string>
-  <plurals name="confirm_delete_conversation">
-    <item quantity="one" msgid="7605755011865575440">"¿Deseas eliminar esta conversación?"</item>
-    <item quantity="other" msgid="1585660381208712562">"¿Deseas eliminar estas <xliff:g id="COUNT">%1$d</xliff:g> conversaciones?"</item>
-  </plurals>
-  <plurals name="confirm_archive_conversation">
-    <item quantity="one" msgid="9105551557653306945">"¿Deseas archivar esta conversación?"</item>
-    <item quantity="other" msgid="2001972798185641108">"¿Deseas archivar estas <xliff:g id="COUNT">%1$d</xliff:g> conversaciones?"</item>
-  </plurals>
-  <plurals name="confirm_discard_drafts_conversation">
-    <item quantity="one" msgid="2030421499893210789">"¿Quieres descartar este mensaje?"</item>
-    <item quantity="other" msgid="782234447471532005">"¿Quieres descartar estos <xliff:g id="COUNT">%1$d</xliff:g> mensajes?"</item>
-  </plurals>
-    <string name="confirm_discard_text" msgid="5172680524418848519">"¿Quieres descartar este mensaje?"</string>
-    <string name="loading_conversations" msgid="7255732786298655246">"Cargando…"</string>
-    <string name="empty_inbox" msgid="5901734942362315228">"No tienes nada pendiente. Que tengas un buen día."</string>
-    <string name="empty_search" msgid="8564899353449880818">"No se encontraron resultados para \"<xliff:g id="SEARCH_QUERY">%1$s</xliff:g>\"."</string>
-    <string name="empty_spam_folder" msgid="3288985543286122800">"¡Hurra! No hay spam."</string>
-    <string name="empty_trash_folder" msgid="378119063015945020">"La Papelera está vacía. Gracias por reciclar."</string>
-    <string name="empty_folder" msgid="3227552635613553855">"No hay correo en esta carpeta."</string>
-    <string name="getting_messages" msgid="8403333791332403244">"Cargando mensajes"</string>
-    <string name="undo" msgid="8256285267701059609">"Deshacer"</string>
-  <plurals name="conversation_unstarred">
-    <item quantity="one" msgid="1701235480675303125">"Quitando estrella de <xliff:g id="COUNT">%1$d</xliff:g> conversación"</item>
-    <item quantity="other" msgid="1154441830432477256">"Quitando estrella de <xliff:g id="COUNT">%1$d</xliff:g> conversaciones"</item>
-  </plurals>
-  <plurals name="conversation_muted">
-    <item quantity="one" msgid="3622533556738049499">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; silenciada"</item>
-    <item quantity="other" msgid="4559007262578295280">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; silenciadas"</item>
-  </plurals>
-  <plurals name="conversation_spammed">
-    <item quantity="one" msgid="1749550834135461470">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; informada como spam"</item>
-    <item quantity="other" msgid="664292592683692920">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; informadas como spam"</item>
-  </plurals>
-  <plurals name="conversation_not_spam">
-    <item quantity="one" msgid="3680479171846552641">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; no es spam"</item>
-    <item quantity="other" msgid="6351739502184556635">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; no son spam"</item>
-  </plurals>
-  <plurals name="conversation_not_important">
-    <item quantity="one" msgid="7432667428974709669">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; marcada como no importante"</item>
-    <item quantity="other" msgid="4823331037057239763">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; marcadas como no importantes"</item>
-  </plurals>
-  <plurals name="conversation_phished">
-    <item quantity="one" msgid="3511804715065046338">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; marcada como suplantación de identidad"</item>
-    <item quantity="other" msgid="8400382886585779414">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; marcadas como suplantaciones de identidad"</item>
-  </plurals>
-  <plurals name="conversation_archived">
-    <item quantity="one" msgid="4859172326053399351">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; archivada"</item>
-    <item quantity="other" msgid="8520761617935818623">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; archivadas"</item>
-  </plurals>
-  <plurals name="conversation_deleted">
-    <item quantity="one" msgid="4819167474123685161">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; eliminada"</item>
-    <item quantity="other" msgid="6287534453625638257">"&lt;b&gt;<xliff:g id="COUNT">%1$d</xliff:g>&lt;/b&gt; eliminadas"</item>
-  </plurals>
-    <string name="deleted" msgid="7378013910782008375">"Eliminada"</string>
-    <string name="archived" msgid="6283673603512713022">"Archivada"</string>
-    <string name="folder_removed" msgid="5656281444688183676">"Eliminada de <xliff:g id="FOLDERNAME">%1$s</xliff:g>"</string>
-  <plurals name="conversation_folder_changed">
-    <item quantity="one" msgid="7787126147584620603">"Carpeta modificada"</item>
-    <item quantity="other" msgid="6307772984911017972">"Carpetas modificadas"</item>
-  </plurals>
-    <string name="conversation_folder_moved" msgid="6475872337373081683">"Enviada a <xliff:g id="FOLDERNAME">%1$s</xliff:g>"</string>
-    <string name="search_results_header" msgid="1529438451150580188">"Resultados"</string>
-    <string name="search_unsupported" msgid="2873920566477359177">"Esta cuenta no admite la función de búsqueda."</string>
-    <string name="search_suggestion_desc" msgid="4165491276003825492">"Sugerencia: <xliff:g id="SUGGESTION">%s</xliff:g>"</string>
-    <string name="add_label" msgid="3285338046038610902">"Agregar carpeta"</string>
-  <plurals name="new_incoming_messages">
-    <item quantity="one" msgid="1532079301006372605">"<xliff:g id="COUNT">%1$d</xliff:g> mensaje nuevo"</item>
-    <item quantity="other" msgid="4085982174357328926">"<xliff:g id="COUNT">%1$d</xliff:g> mensajes nuevos"</item>
-  </plurals>
-    <string name="date_and_view_details" msgid="2952994746916149969">"<xliff:g id="DATE">%1$s</xliff:g> &lt;a href=\'http://www.example.com\'&gt;Ver detalles&lt;/a&gt;"</string>
-    <string name="hide_details" msgid="8018801050702453314">"Ocultar detalles"</string>
-    <string name="to_message_header" msgid="3954385178027011919">"para <xliff:g id="RECIPIENTS">%1$s</xliff:g>"</string>
-    <string name="bcc_header_for_recipient_summary" msgid="1834716758549842454">"Cco: "</string>
-    <string name="contact_info_string" msgid="6484930184867405276">"Mostrar la información de contacto de <xliff:g id="NAME">%1$s</xliff:g>"</string>
-    <string name="contact_info_string_default" msgid="6204228921864816351">"Mostrar la información de contacto"</string>
-  <plurals name="show_messages_read">
-    <item quantity="other" msgid="8094857552036574099">"Expandir <xliff:g id="COUNT">%1$d</xliff:g> mensajes antiguos"</item>
-  </plurals>
-  <plurals name="super_collapsed_block_accessibility_announcement">
-    <item quantity="other" msgid="2016326586162784420">"Se expandieron <xliff:g id="COUNT">%1$d</xliff:g> mensajes antiguos."</item>
-  </plurals>
-    <string name="from_heading" msgid="48290556829713090">"De:"</string>
-    <string name="replyto_heading" msgid="8275255318292059079">"Responder a:"</string>
-    <string name="to_heading" msgid="3495203282540398336">"Para: "</string>
-    <string name="to_heading_no_space" msgid="679167047628308670">"Para:"</string>
-    <string name="cc_heading" msgid="5603892257866345823">"CC:"</string>
-    <string name="bcc_heading" msgid="1482186590756218269">"CCO:"</string>
-    <string name="date_heading" msgid="4213063948406397168">"Fecha:"</string>
-    <string name="show_images" msgid="436044894053204084">"Ver imágenes"</string>
-    <string name="always_show_images" msgid="556087529413707819">"Mostrar siempre las imágenes de este remitente"</string>
-    <string name="always_show_images_toast" msgid="3763157294047555051">"Las imágenes de este remitente se mostrarán automáticamente."</string>
-    <string name="address_display_format" msgid="2098008376913966177">"<xliff:g id="NAME">%1$s</xliff:g> <xliff:g id="EMAIL">%2$s</xliff:g>"</string>
-    <string name="address_display_format_with_via_domain" msgid="8108294635074750048">"<xliff:g id="NAME">%1$s</xliff:g> <xliff:g id="EMAIL">%2$s</xliff:g> a través de <xliff:g id="VIA_DOMAIN">%3$s</xliff:g>"</string>
-    <string name="message_saved" msgid="3291655042310241793">"Mensaje guardado como borrador"</string>
-    <string name="sending_message" msgid="2487846954946637084">"Enviando mensaje…"</string>
-    <string name="invalid_recipient" msgid="9157434699389936584">"La dirección <xliff:g id="WRONGEMAIL">%s</xliff:g> no es válida."</string>
-    <string name="show_elided" msgid="3456154624105704327">"Mostrar texto citado"</string>
-    <string name="hide_elided" msgid="5768235486834692733">"▼ Ocultar el texto citado"</string>
-    <string name="message_invite_title" msgid="5985161025144867256">"Invitación de calendario"</string>
-    <string name="message_invite_calendar_view" msgid="9181966650840809197">"Ver en calendario"</string>
-    <string name="message_invite_label_attending" msgid="4194264767870003397">"¿Asistirás?"</string>
-    <string name="message_invite_accept" msgid="8002758842580134835">"SÍ"</string>
-    <string name="message_invite_tentative" msgid="3199418731566655887">"Quizás"</string>
-    <string name="message_invite_decline" msgid="6331040872447290777">"No"</string>
-    <string name="enumeration_comma" msgid="2848850136844740850">", "</string>
-    <string name="send_anyway" msgid="2727576121007079643">"Enviar igualmente"</string>
-    <string name="ok" msgid="6178802457914802336">"Aceptar"</string>
-    <string name="done" msgid="344354738335270292">"Listo"</string>
-    <string name="cancel" msgid="4831678293149626190">"Cancelar"</string>
-    <string name="clear" msgid="765949970989448022">"Borrar"</string>
-    <string name="next" msgid="2662478712866255138">"Siguiente"</string>
-    <string name="previous" msgid="8985379053279804274">"Anterior"</string>
-  <string-array name="sync_status">
-    <item msgid="4600303222943450797">"La acción se realizó correctamente."</item>
-    <item msgid="2835492307658712596">"Sin conexión"</item>
-    <item msgid="5932644761344898987">"No se pudo acceder."</item>
-    <item msgid="7335227237106118306">"Error de seguridad"</item>
-    <item msgid="8148525741623865182">"No se pudo sincronizar."</item>
-    <item msgid="8026148967150231130">"Error interno"</item>
-    <item msgid="5442620760791553027">"Error de servidor"</item>
-  </string-array>
-    <string name="tap_to_configure" msgid="137172348280050643">"Toca para configurarlo"</string>
-    <string name="non_synced_folder_description" msgid="3044618511909304701">"Para ver conversaciones, sincroniza esta carpeta."</string>
-    <string name="tap_to_configure_folder_sync" msgid="3280434399275638071">"Sincronizar carpeta"</string>
-    <string name="widget_large_unread_count" msgid="8699435859096455837">"%d+"</string>
-    <string name="large_unseen_count" msgid="3055042669246912518">"<xliff:g id="COUNT">%d</xliff:g> más"</string>
-    <string name="unseen_count" msgid="5509898665569695288">"<xliff:g id="COUNT">%d</xliff:g> nuevos"</string>
-  <plurals name="actionbar_unread_messages">
-    <item quantity="other" msgid="3863201473731766006">"<xliff:g id="COUNT">%1$d</xliff:g> mensaje(s) sin leer"</item>
-  </plurals>
-    <string name="view_more_conversations" msgid="8377920000247101901">"Ver más conversaciones"</string>
-    <string name="loading_conversation" msgid="7931600025861500397">"Cargando…"</string>
-    <string name="activity_mailbox_selection" msgid="7489813868539767701">"Seleccionar cuenta"</string>
-    <string name="activity_folder_selection" msgid="8375243281001234750">"Seleccionar carpeta"</string>
-    <string name="folder_shortcut_widget_label" msgid="6466292659577092915">"Carpeta de correo electrónico"</string>
-    <string name="change_folders_selection_dialog_title" msgid="9174464298613273814">"Cambiar carpetas"</string>
-    <string name="move_to_selection_dialog_title" msgid="4052506464467083621">"Mover a"</string>
-    <string name="search_hint" msgid="7060626585689391003">"Buscar"</string>
-    <!-- no translation found for search_results_loaded (1784879343458807514) -->
-    <skip />
-    <string name="voice_search_not_supported" msgid="8493517060419469738">"El dispositivo no admite la búsqueda por voz."</string>
-    <string name="search_back_desc" msgid="8038224690392783652">"Cerrar la búsqueda"</string>
-    <string name="search_voice_desc" msgid="9103854398344077204">"Iniciar búsqueda por voz"</string>
-    <string name="search_clear_desc" msgid="3044261775183044862">"Borrar el texto de la búsqueda"</string>
-    <string name="network_error" msgid="5931164247644972255">"Sin conexión"</string>
-    <string name="retry" msgid="916102442074217293">"Volver a intentar"</string>
-    <string name="load_more" msgid="8702691358453560575">"Realizar más cargas"</string>
-    <!-- no translation found for load_attachment (3894318473827290350) -->
-    <skip />
-    <string name="shortcut_name_title" msgid="1562534040126088628">"Definir el nombre del acceso directo a la carpeta"</string>
-    <string name="wait_for_sync_title" msgid="4577632826912823075">"Esperando para sincronizar"</string>
-    <string name="not_synced_title" msgid="3600180500934086346">"Cuenta no sincronizada"</string>
-    <string name="wait_for_manual_sync_body" msgid="2823149409451003378">"Esta cuenta no está configurada para sincronizar el correo automáticamente.\nToca "<b>"Sincronizar ahora"</b>" para sincronizar el correo una vez o "<b>"Cambiar la configuración de sincronización"</b>" para que esta cuenta sincronice el correo automáticamente."</string>
-    <string name="manual_sync" msgid="2271479734895537848">"Sincr. ahora"</string>
-    <string name="change_sync_settings" msgid="3615852118397055361">"Cambiar conf. de sinc."</string>
-    <string name="photo_load_failed" msgid="577471721679146999">"No se pudo cargar la imagen."</string>
-    <string name="cant_move_or_change_labels" msgid="4155490583610926755">"No se puede mover porque la selección contiene varias cuentas."</string>
-    <string name="multiple_new_message_notification_item" msgid="1386588046275174918"><b>"<xliff:g id="SENDER">%1$s</xliff:g>"</b>"   <xliff:g id="SUBJECT">%2$s</xliff:g>"</string>
-    <string name="single_new_message_notification_big_text" msgid="2170154732664242904">"<xliff:g id="SUBJECT">%1$s</xliff:g>\n<xliff:g id="SNIPPET">%2$s</xliff:g>"</string>
-    <string name="ignore_spam_warning" msgid="8760314545535838430">"Ignorar; confío en este mensaje."</string>
-    <string name="via_domain" msgid="537951148511529082">"por <xliff:g id="VIADOMAIN">%1$s</xliff:g>"</string>
-    <string name="signin" msgid="4699091478139791244">"Acceder"</string>
-    <string name="info" msgid="1357564480946178121">"Información"</string>
-    <string name="report" msgid="4318141326014579036">"Informar"</string>
-    <string name="show" msgid="2874876876336599985">"Mostrar"</string>
-    <string name="sync_error" msgid="1795794969006241678">"No se pudo establecer la sincronización."</string>
-    <string name="sync_error_message" msgid="4182644657243736635">"Tu dispositivo no tiene suficiente espacio de almacenamiento para establecer la sincronización."</string>
-    <string name="storage" msgid="4783683938444150638">"Almacenamiento"</string>
-    <string name="senders_split_token" msgid="6549228851819460081">", "</string>
-    <string name="draft_count_format" msgid="9122583199850209286">" (<xliff:g id="COUNT">%1$s</xliff:g>)"</string>
-    <string name="all_folders_heading" msgid="9023770187629170967">"Todas las carpetas"</string>
-    <string name="recent_folders_heading" msgid="8943134955788867702">"Carpetas recientes"</string>
-    <string name="message_details_title" msgid="60771875776494764">"Detalles del mensaje"</string>
-    <string name="preference_advance_to_title" msgid="6385669491239514630">"Avance automático"</string>
-  <string-array name="prefEntries_autoAdvance">
-    <item msgid="1505450878799459652">"Más reciente"</item>
-    <item msgid="8000986144872247139">"Más antigua"</item>
-    <item msgid="8015001161633421314">"Lista de conversaciones"</item>
-  </string-array>
-  <string-array name="prefSummaries_autoAdvance">
-    <item msgid="8221665977497655719">"Mostrar la conversación más reciente luego de la eliminación"</item>
-    <item msgid="1721869262893378141">"Mostrar la conversación más antigua luego de la eliminación"</item>
-    <item msgid="880913657385630195">"Mostrar la lista de conversaciones luego de la eliminación"</item>
-  </string-array>
-    <string name="prefDialogTitle_autoAdvance" msgid="5459235590885640678">"Avanzar a"</string>
-    <string name="clear_display_images_whitelist_title" msgid="2012677202404471778">"Borrar aprobaciones de imágenes"</string>
-    <string name="clear_display_images_whitelist_dialog_title" msgid="1942692501166848471">"¿Borrar aprobaciones de imágenes?"</string>
-    <string name="clear_display_images_whitelist_dialog_message" msgid="3952553078559373729">"Dejar de mostrar imágenes intercaladas de remitentes que permitiste anteriormente"</string>
-    <string name="sender_whitelist_cleared" msgid="2490984995927904030">"Las imágenes no se mostrarán automáticamente."</string>
-    <string name="preferences_signature_title" msgid="2318034745474929902">"Firma"</string>
-    <string name="preferences_signature_dialog_title" msgid="4801741764511807064">"Firma"</string>
-    <string name="preferences_signature_summary_not_set" msgid="3776614319388053784">"Sin establecer"</string>
-    <string name="notification_action_reply" msgid="8378725460102575919">"Responder"</string>
-    <string name="notification_action_reply_all" msgid="5693469099941000037">"Responder a todos"</string>
-    <string name="notification_action_archive" msgid="2884874164831039047">"Archivar"</string>
-    <string name="notification_action_remove_label" msgid="3714785653186750981">"Eliminar etiqueta"</string>
-    <string name="notification_action_delete" msgid="3201627482564624132">"Eliminar"</string>
-    <string name="notification_action_undo_archive" msgid="600186958134073582">"Archivado"</string>
-    <string name="notification_action_undo_remove_label" msgid="8341924850540100690">"Etiqueta eliminada"</string>
-    <string name="notification_action_undo_delete" msgid="6915612337413587103">"Eliminado"</string>
-    <string name="veiled_address" msgid="2670378260196977266"></string>
-    <string name="veiled_alternate_text" msgid="6343564357099807582"></string>
-    <string name="veiled_alternate_text_unknown_person" msgid="6728323554307952217"></string>
-    <string name="veiled_summary_unknown_person" msgid="2122359944161241551"></string>
-    <string name="label_notification_ticker" msgid="323232821061341014">"<xliff:g id="LABEL">%s</xliff:g>: <xliff:g id="NOTIFICATION">%s</xliff:g>"</string>
-  <plurals name="new_messages">
-    <item quantity="one" msgid="3446656407520493241">"<xliff:g id="COUNT">%1$d</xliff:g> mensaje nuevo"</item>
-    <item quantity="other" msgid="3531683811183204615">"<xliff:g id="COUNT">%1$d</xliff:g> mensajes nuevos"</item>
-  </plurals>
-    <string name="single_new_message_notification_title" msgid="7954710563222504868">"<xliff:g id="SENDER">%1$s</xliff:g>: <xliff:g id="SUBJECT">%2$s</xliff:g>"</string>
-    <string name="silent_ringtone" msgid="1570794756474381886">"Silencio"</string>
-    <string name="preference_removal_action_title" msgid="3128186577060329884">"Acción predeterminada"</string>
-  <string-array name="prefEntries_removal_action">
-    <item msgid="7381624742404593351">"Archivar"</item>
-    <item msgid="2567465476369142505">"Eliminar"</item>
-  </string-array>
-  <string-array name="prefSummaries_removal_action_summary">
-    <item msgid="4080896545573973751">"Archivar"</item>
-    <item msgid="6088164268501960435">"Eliminar"</item>
-  </string-array>
-    <string name="prefDialogTitle_removal_action" msgid="7914272565548361304">"Acción predeterminada"</string>
-    <string name="preferences_default_reply_all_title" msgid="7255858488369635327">"Responder a todos"</string>
-    <string name="preferences_default_reply_all_summary_impl" msgid="895581085692979709">"Usar como opción predeterminada para responder mensajes"</string>
-    <string name="preference_swipe_title" msgid="2073613840893904205">"Acciones al deslizar"</string>
-    <string name="preference_swipe_description" msgid="3036560323237015010">"En lista de conversaciones"</string>
-    <string name="preference_sender_image_title" msgid="7890813537985591865">"Imagen del remitente"</string>
-    <string name="preference_sender_image_description" msgid="3586817690132199889">"Mostrar al lado del nombre en la lista de conversaciones"</string>
-    <string name="empty_trash" msgid="3385937024924728399">"Vaciar papelera"</string>
-    <string name="empty_spam" msgid="2911988289997281371">"Vaciar Spam"</string>
-    <string name="empty_trash_dialog_title" msgid="2104898489663621508">"¿Vaciar papelera?"</string>
-    <string name="empty_spam_dialog_title" msgid="1130319045917820569">"¿Vaciar carpeta de spam?"</string>
-  <plurals name="empty_folder_dialog_message">
-    <item quantity="one" msgid="3315412388217832914">"<xliff:g id="COUNT">%1$d</xliff:g> mensaje se eliminará de forma permanente."</item>
-    <item quantity="other" msgid="263840304486020101">"<xliff:g id="COUNT">%1$d</xliff:g> mensajes se eliminarán de forma permanente."</item>
-  </plurals>
-    <string name="drawer_open" msgid="2285557278907103851">"Abrir panel de navegación"</string>
-    <string name="drawer_close" msgid="2065829742127544297">"Cerrar panel de navegación"</string>
-    <string name="conversation_photo_welcome_text" msgid="836483155429003787">"Toca la imagen de un remitente para seleccionar esa conversación."</string>
-    <string name="long_press_to_select_tip" msgid="1660881999120625177">"Toca y mantén presionada una conversación para seleccionarla. Luego, toca otras conversaciones para seleccionarlas."</string>
-    <string name="folder_icon_desc" msgid="6272938864914794739">"Ícono de carpeta"</string>
-    <string name="add_account" msgid="5905863370226612377">"Agregar cuenta"</string>
-    <string name="dismiss_tip_hover_text" msgid="5400049020835024519">"Descartar sugerencia"</string>
-    <string name="auto_sync_off" msgid="3691189864057581214">"La sincronización automática está desactivada. Toca para activarla."</string>
-    <string name="account_sync_off" msgid="5720018952998097061">"La sincronización de la cuenta está desactivada. Para activarla, ve a la href=\'http://www.example.com\'&gt;Configuración de la cuenta.&lt;/a&gt;"</string>
-    <string name="unsent_messages_in_outbox" msgid="146722891559469589">"<xliff:g id="NUMBER">%1$s</xliff:g> sin enviar en <xliff:g id="OUTBOX">%2$s</xliff:g>"</string>
-    <string name="turn_auto_sync_on_dialog_title" msgid="543412762396502297">"¿Activar la sincronización automática?"</string>
-    <string name="turn_auto_sync_on_dialog_body" msgid="614939812938149398">"Los cambios que realices en todas las aplicaciones y cuentas, no solo en Gmail, se sincronizarán con la Web, con otros dispositivos que tengas y con tu <xliff:g id="PHONE_OR_TABLET">%1$s</xliff:g>."</string>
-    <string name="phone" msgid="4142617042507912053">"teléfono"</string>
-    <string name="tablet" msgid="4593581125469224791">"tablet"</string>
-    <string name="turn_auto_sync_on_dialog_confirm_btn" msgid="7239160845196929866">"Activar"</string>
-    <string name="show_n_more_folders" msgid="1005879825500056552">"Mostrar <xliff:g id="NUMBER">%1$s</xliff:g> carpetas"</string>
-    <string name="hide_folders" msgid="7618891933409521283">"Ocultar carpetas"</string>
-    <string name="print" msgid="7987949243936577207">"Imprimir"</string>
-    <string name="print_all" msgid="4011022762279519941">"Imprimir todo"</string>
-  <plurals name="num_messages">
-    <item quantity="one" msgid="8071234386915191851">"<xliff:g id="COUNT">%1$d</xliff:g> mensaje"</item>
-    <item quantity="other" msgid="962415099931188360">"<xliff:g id="COUNT">%1$d</xliff:g> mensajes"</item>
-  </plurals>
-    <string name="date_message_received_print" msgid="4168417403884350040">"<xliff:g id="DAY_AND_DATE">%1$s</xliff:g>, <xliff:g id="TIME">%2$s</xliff:g>"</string>
-    <string name="draft_to_heading" msgid="7370121943946205024">"Borrador para:"</string>
-    <string name="draft_heading" msgid="7032951343184552800">"Borrador"</string>
-    <string name="quoted_text_hidden_print" msgid="5256754205675159141">"Texto citado oculto"</string>
-  <plurals name="num_attachments">
-    <item quantity="one" msgid="5494465717267988888">"<xliff:g id="COUNT">%1$d</xliff:g> archivo adjunto"</item>
-    <item quantity="other" msgid="5422167728480739361">"<xliff:g id="COUNT">%1$d</xliff:g> archivos adjuntos"</item>
-  </plurals>
-    <string name="no_subject" msgid="5622708348540036959">"(sin asunto)"</string>
-    <string name="vacation_responder" msgid="5570132559074523806">"Respuesta automática"</string>
-    <string name="preferences_vacation_responder_title" msgid="2268482117730576123">"Respuesta automática"</string>
-    <string name="vacation_responder_body_hint_text" msgid="9087613123105158494">"Mensaje"</string>
-    <string name="send_to_contacts_text" msgid="124432913980620545">"Enviar solo a mis contactos"</string>
-    <string name="send_to_domain_text" msgid="5064559546745918393">"Enviar solo a <xliff:g id="DOMAIN">%1$s</xliff:g>"</string>
-    <string name="pick_start_date_title" msgid="2274665037355224165">"Inicio"</string>
-    <string name="pick_end_date_title" msgid="733396083649496600">"Fin (opcional)"</string>
-    <string name="date_not_set" msgid="3251555782945051904">"Sin establecer"</string>
-    <string name="set_end_date_dialog_title" msgid="7543009262788808443">"Fecha de finalización (opcional)"</string>
-    <string name="custom_date" msgid="5794846334232367838">"Personalizar"</string>
-    <string name="date_none" msgid="1061426502665431412">"Ninguna"</string>
-    <string name="discard_changes" msgid="5699760550972324746">"¿Deseas descartar los cambios?"</string>
-    <string name="vacation_responder_changes_saved" msgid="91448817268121249">"Cambios de respuesta automática guardados"</string>
-    <string name="vacation_responder_changes_discarded" msgid="21756037735539983">"Cambios de respuesta automática descartados"</string>
-    <string name="vacation_responder_off" msgid="4429909341193366667">"Desactivada"</string>
-    <string name="vacation_responder_on" msgid="4913238379320882449">"Activada, desde el <xliff:g id="DATE">%1$s</xliff:g>"</string>
-    <string name="vacation_responder_on_with_end_date" msgid="4360941815371475955">"Activada, desde el <xliff:g id="START_DATE">%1$s</xliff:g> hasta el <xliff:g id="END_DATE">%2$s</xliff:g>"</string>
-    <string name="vacation_responder_empty_subject_and_body_warning" msgid="6233629618520852439">"Agrega un asunto o mensaje."</string>
-    <string name="view_entire_message" msgid="823281796655014454">"Ver mensaje completo"</string>
-    <string name="eml_loader_error_toast" msgid="6577383216635400167">"No se puede abrir este archivo."</string>
-    <string name="help_and_info" msgid="3708286489943154681">"Ayuda"</string>
-    <string name="help_and_feedback" msgid="7211458338163287670">"Ayuda y comentarios"</string>
-    <string name="feedback" msgid="204247008751740034">"Enviar comentario"</string>
-    <string name="copyright" msgid="3121335168340432582">"©<xliff:g id="YEAR">%1$d</xliff:g> Google Inc."</string>
-    <string name="version" msgid="1161745345056656547">"<xliff:g id="APP_NAME">%1$s</xliff:g> versión <xliff:g id="VERSION">%2$s</xliff:g>"</string>
-    <string name="view_app_page" msgid="3241990517052398927"></string>
-    <string name="print_dialog" msgid="8895536548487605661">"Imprimir…"</string>
-    <string name="copyright_information" msgid="971422874488783312">"Información de copyright"</string>
-    <string name="privacy_policy" msgid="212094623396418302">"Política de privacidad"</string>
-    <string name="open_source_licenses" msgid="8643615555920977752">"Licencias código abierto"</string>
-    <string name="reply_choice_yes" msgid="3327633032975373220">"Sí"</string>
-    <string name="reply_choice_no" msgid="7068775605915475207">"No"</string>
-    <string name="reply_choice_ok" msgid="7881073621845053152">"Aceptar"</string>
-    <string name="reply_choice_hehe" msgid="6054314968043050748">"Je, je"</string>
-    <string name="reply_choice_thanks" msgid="4978961954288364694">"Gracias"</string>
-    <string name="reply_choice_i_agree" msgid="2496652737796884298">"Sí, de acuerdo"</string>
-    <string name="reply_choice_nice" msgid="4465894941302838676">"Genial"</string>
-    <string name="reply_on_my_way" msgid="5645003971107444269">"Estoy en camino."</string>
-    <string name="reply_choice_later" msgid="4629219072859486413">"De acuerdo, luego te llamo."</string>
-    <string name="reply_choice_smiling_face" msgid="1772253938506548631">":)"</string>
-    <string name="reply_choice_frowning_face" msgid="6260338807944002651">":("</string>
-    <string name="preference_header_action_confirmations" msgid="3922674681156121948">"Confirmaciones de acción"</string>
-    <string name="preference_confirm_before_delete_title" msgid="7563587174619033835">"Confirmar antes de eliminar"</string>
-    <string name="preference_confirm_before_archive_title" msgid="7318645995655875718">"Confirmar antes de archivar"</string>
-    <string name="preference_confirm_before_send_title" msgid="4136585783513077039">"Confirmar antes de enviar"</string>
-    <string name="preferences_conversation_mode_title" msgid="389352009651720838">"Ajuste automático de mensajes"</string>
-    <string name="preferences_conversation_mode_summary" msgid="5730999743867653106">"Reducir los mensajes para que se ajusten a la pantalla"</string>
-    <string name="preferences_disable_snap_headers_title" msgid="7257824136988429629">"Acciones de mensajes"</string>
-  <string-array name="prefSummaries_snapHeader">
-    <item msgid="43373293784193461">"Mostrar siempre las acciones de los mensajes en la parte superior de la pantalla"</item>
-    <item msgid="1765271305989996747">"Mostrar las acciones de los mensajes solo en la parte superior de la pantalla cuando se la rota a la posición vertical"</item>
-    <item msgid="6311113076575333488">"No mostrar acciones de mensajes fuera del encabezado del mensaje"</item>
-  </string-array>
-  <string-array name="prefEntries_snapHeader">
-    <item msgid="6906986566816683587">"Mostrar siempre"</item>
-    <item msgid="113299655708990672">"Mostrar solo en posición vertical"</item>
-    <item msgid="4403750311175924065">"No mostrar"</item>
-  </string-array>
-    <string name="clear_history_title" msgid="5536216295725760357">"Eliminar historial de búsquedas"</string>
-    <string name="search_history_cleared" msgid="1461946302763342640">"Se eliminó el historial de búsquedas."</string>
-    <string name="clear_history_dialog_title" msgid="3503603389704365385">"¿Quieres eliminar el historial de búsquedas?"</string>
-    <string name="clear_history_dialog_message" msgid="5202922561632407778">"Se eliminarán todas las búsquedas que realizaste."</string>
-    <string name="manage_accounts_menu_item" msgid="4734660452395086786">"Administrar cuentas"</string>
-    <string name="general_preferences_title" msgid="4212138728220418162">"Configuración general"</string>
-    <string name="activity_preferences" msgid="8966077432517613292">"Configuración"</string>
-    <string name="overflow_description" msgid="7886090597023240426">"Más opciones"</string>
-    <string name="security_hold_required_text" msgid="6619955920101834286">"Actualización de seguridad necesaria para <xliff:g id="EMAIL_ADDRESS">%1$s</xliff:g>"</string>
-    <string name="update_security_text" msgid="3527335757205741077">"actualizar ahora"</string>
-    <string name="forms_are_disabled" msgid="2876312737118986789">"Formularios inhabilitados en Gmail"</string>    
-    <string name="preferences_signature_content" msgid="4801741764511807065">"Enviado desde mi Alcatel A3A PLUS de Movistar"</string> 
-</resources>
Index: vendor/branch/5058A_Claro/packages/apps/Email/src/com/android/email/activity/setup/AccountSettingsFragment.java
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Email/src/com/android/email/activity/setup/AccountSettingsFragment.java	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Email/src/com/android/email/activity/setup/AccountSettingsFragment.java	(revision 3018)
@@ -1,1152 +0,0 @@
-/*
-* Copyright (C) 2014 MediaTek Inc.
-* Modification based on code covered by the mentioned copyright
-* and/or permission notice(s).
-*/
-/*
- * Copyright (C) 2010 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.email.activity.setup;
-
-import android.app.Activity;
-import android.app.FragmentManager;
-import android.app.FragmentTransaction;
-import android.app.LoaderManager;
-import android.content.ContentResolver;
-import android.content.ContentValues;
-import android.content.Context;
-import android.content.Intent;
-import android.content.Loader;
-import android.content.res.Resources;
-import android.database.Cursor;
-import android.media.Ringtone;
-import android.media.RingtoneManager;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Vibrator;
-import android.os.SystemProperties;
-
-import android.preference.CheckBoxPreference;
-import android.preference.EditTextPreference;
-import android.preference.ListPreference;
-import android.preference.Preference;
-import android.preference.PreferenceActivity;
-import android.preference.PreferenceCategory;
-import android.preference.Preference.OnPreferenceClickListener;
-import android.preference.PreferenceScreen;
-import android.provider.CalendarContract;
-import android.provider.ContactsContract;
-import android.provider.Settings;
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-
-import com.android.email.R;
-import com.android.email.SecurityPolicy;
-import com.android.email.provider.EmailProvider;
-import com.android.email.provider.FolderPickerActivity;
-import com.android.email.service.EmailServiceUtils;
-import com.android.email.service.EmailServiceUtils.EmailServiceInfo;
-import com.android.emailcommon.provider.Account;
-import com.android.emailcommon.provider.EmailContent;
-import com.android.emailcommon.provider.EmailContent.AccountColumns;
-import com.android.emailcommon.provider.Mailbox;
-import com.android.emailcommon.provider.Policy;
-import com.android.mail.preferences.AccountPreferences;
-import com.android.mail.preferences.FolderPreferences;
-import com.android.mail.providers.Folder;
-import com.android.mail.providers.UIProvider;
-import com.android.mail.ui.MailAsyncTaskLoader;
-import com.android.mail.ui.settings.MailAccountPrefsFragment;
-import com.android.mail.ui.settings.SettingsUtils;
-import com.android.mail.utils.ContentProviderTask.UpdateTask;
-import com.android.mail.utils.LogUtils;
-import com.android.mail.utils.NotificationUtils;
-import com.android.mail.utils.Utils;
-import com.mediatek.email.outofoffice.OofGetWaitingFragment;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Map;
-
-import android.accounts.AccountManager;
-
-/**
- * Fragment containing the main logic for account settings.  This also calls out to other
- * fragments for server settings.
- *
- * TODO: Can we defer calling addPreferencesFromResource() until after we load the account?  This
- *       could reduce flicker.
- */
-public class AccountSettingsFragment extends MailAccountPrefsFragment
-        implements Preference.OnPreferenceChangeListener {
-
-    private static final String ARG_ACCOUNT_ID = "account_id";
-
-    public static final String PREFERENCE_DESCRIPTION = "account_description";
-    private static final String PREFERENCE_NAME = "account_name";
-    private static final String PREFERENCE_SIGNATURE = "account_signature";
-    private static final String PREFERENCE_QUICK_RESPONSES = "account_quick_responses";
-    private static final String PREFERENCE_FREQUENCY = "account_check_frequency";
-    private static final String PREFERENCE_SYNC_WINDOW = "account_sync_window";
-    private static final String PREFERENCE_SYNC_SETTINGS = "account_sync_settings";
-    private static final String PREFERENCE_SYNC_EMAIL = "account_sync_email";
-    private static final String PREFERENCE_SYNC_CONTACTS = "account_sync_contacts";
-    private static final String PREFERENCE_SYNC_CALENDAR = "account_sync_calendar";
-    private static final String PREFERENCE_BACKGROUND_ATTACHMENTS =
-            "account_background_attachments";
-    private static final String PREFERENCE_CATEGORY_DATA_USAGE = "data_usage";
-    private static final String PREFERENCE_CATEGORY_NOTIFICATIONS = "account_notifications";
-    private static final String PREFERENCE_CATEGORY_SERVER = "account_servers";
-    private static final String PREFERENCE_CATEGORY_POLICIES = "account_policies";
-    @SuppressWarnings("unused") // temporarily unused pending policy UI
-    private static final String PREFERENCE_POLICIES_ENFORCED = "policies_enforced";
-    @SuppressWarnings("unused") // temporarily unused pending policy UI
-    private static final String PREFERENCE_POLICIES_UNSUPPORTED = "policies_unsupported";
-    private static final String PREFERENCE_POLICIES_RETRY_ACCOUNT = "policies_retry_account";
-    private static final String PREFERENCE_INCOMING = "incoming";
-    private static final String PREFERENCE_OUTGOING = "outgoing";
-
-    private static final String PREFERENCE_SYSTEM_FOLDERS = "system_folders";
-    private static final String PREFERENCE_SYSTEM_FOLDERS_TRASH = "system_folders_trash";
-    private static final String PREFERENCE_SYSTEM_FOLDERS_SENT = "system_folders_sent";
-
-    private static final String SAVESTATE_SYNC_INTERVALS = "savestate_sync_intervals";
-    private static final String SAVESTATE_SYNC_INTERVAL_STRINGS = "savestate_sync_interval_strings";
-	
-	// add by dongdongli for remove account 20171127 start{
-	private static final String PREFERENCE_REMOVE_ACCOUNT = "remove_account";
-	// add by dongdongli for remove account 20171127 end }
-
-    /// M: MTK OOF Feature
-    private static final String PREFERENCE_OOF_SETTINGS = "account_oof_settings";
-
-    // Request code to start different activities.
-    private static final int RINGTONE_REQUEST_CODE = 0;
-
-    private EditTextPreference mAccountDescription;
-    private EditTextPreference mAccountName;
-    private EditTextPreference mAccountSignature;
-    private ListPreference mCheckFrequency;
-    private ListPreference mSyncWindow;
-    private Preference mSyncSettings;
-    private CheckBoxPreference mInboxVibrate;
-    private Preference mInboxRingtone;
-    //M: MTK OOF Feature
-    private Preference mAccountOof;
-
-    private Context mContext;
-
-    private Account mAccount;
-    private com.android.mail.providers.Account mUiAccount;
-    private EmailServiceInfo mServiceInfo;
-    private Folder mInboxFolder;
-
-    private Ringtone mRingtone;
-    /**
-     * This may be null if the account exists but the inbox has not yet been created in the database
-     * (waiting for initial sync)
-     */
-    private FolderPreferences mInboxFolderPreferences;
-
-    // The email of the account being edited
-    private String mAccountEmail;
-
-    /**
-     * If launching with an email address, use this method to build the arguments.
-     */
-    public static Bundle buildArguments(final String email) {
-        final Bundle b = new Bundle(1);
-        b.putString(ARG_ACCOUNT_EMAIL, email);
-        return b;
-    }
-
-    /**
-     * If launching with an account ID, use this method to build the arguments.
-     */
-    public static Bundle buildArguments(final long accountId) {
-        final Bundle b = new Bundle(1);
-        b.putLong(ARG_ACCOUNT_ID, accountId);
-        return b;
-    }
-
-    @Override
-    public void onAttach(Activity activity) {
-        super.onAttach(activity);
-        mContext = activity;
-    }
-
-    /**
-     * Called to do initial creation of a fragment.  This is called after
-     * {@link #onAttach(Activity)} and before {@link #onActivityCreated(Bundle)}.
-     */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setHasOptionsMenu(true);
-
-        // Load the preferences from an XML resource
-        addPreferencesFromResource(R.xml.account_settings_preferences);
-
-        if (!getResources().getBoolean(R.bool.quickresponse_supported)) {
-            final Preference quickResponsePref = findPreference(PREFERENCE_QUICK_RESPONSES);
-            if (quickResponsePref != null) {
-                getPreferenceScreen().removePreference(quickResponsePref);
-            }
-        }
-
-        // Start loading the account data, if provided in the arguments
-        // If not, activity must call startLoadingAccount() directly
-        Bundle b = getArguments();
-        if (b != null) {
-            mAccountEmail = b.getString(ARG_ACCOUNT_EMAIL);
-        }
-        if (savedInstanceState != null) {
-            // We won't know what the correct set of sync interval values and strings are until
-            // our loader completes. The problem is, that if the sync frequency chooser is
-            // displayed when the screen rotates, it reinitializes it to the defaults, and doesn't
-            // correct it after the loader finishes again. See b/13624066
-            // To work around this, we'll save the current set of sync interval values and strings,
-            // in onSavedInstanceState, and restore them here.
-            final CharSequence [] syncIntervalStrings =
-                    savedInstanceState.getCharSequenceArray(SAVESTATE_SYNC_INTERVAL_STRINGS);
-            final CharSequence [] syncIntervals =
-                    savedInstanceState.getCharSequenceArray(SAVESTATE_SYNC_INTERVALS);
-            mCheckFrequency = (ListPreference) findPreference(PREFERENCE_FREQUENCY);
-            if (mCheckFrequency != null) {
-                mCheckFrequency.setEntries(syncIntervalStrings);
-                mCheckFrequency.setEntryValues(syncIntervals);
-            }
-        }
-        /**
-         * M: For some case,the AccountLoader do not running completely,but user has
-         * been clicked the perference.the AccountName may be use the last value
-         * stored in sharePreference(xml),Disable preferenceScreen during loading.{@
-         */
-        getPreferenceScreen().setEnabled(false);
-        /**@}*/
-    }
-
-    @Override
-    public void onSaveInstanceState(@NonNull Bundle outstate) {
-        super.onSaveInstanceState(outstate);
-        if (mCheckFrequency != null) {
-            outstate.putCharSequenceArray(SAVESTATE_SYNC_INTERVAL_STRINGS,
-                    mCheckFrequency.getEntries());
-            outstate.putCharSequenceArray(SAVESTATE_SYNC_INTERVALS,
-                    mCheckFrequency.getEntryValues());
-        }
-    }
-
-    @Override
-    public void onActivityCreated(Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-        final Bundle args = new Bundle(1);
-        if (!TextUtils.isEmpty(mAccountEmail)) {
-            args.putString(AccountLoaderCallbacks.ARG_ACCOUNT_EMAIL, mAccountEmail);
-        } else {
-            args.putLong(AccountLoaderCallbacks.ARG_ACCOUNT_ID,
-                    getArguments().getLong(ARG_ACCOUNT_ID, -1));
-        }
-        getLoaderManager().initLoader(0, args, new AccountLoaderCallbacks(getActivity()));
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        switch (requestCode) {
-            case RINGTONE_REQUEST_CODE:
-                if (resultCode == Activity.RESULT_OK && data != null) {
-                    Uri uri = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
-                    setRingtone(uri);
-                }
-                break;
-        }
-    }
-
-    /**
-     * Sets the current ringtone.
-     */
-    private void setRingtone(Uri ringtone) {
-        /// M: null check applied for Inbox Folder Prefs.
-        if (mInboxFolderPreferences == null) {
-            return;
-        }
-        if (ringtone != null) {
-            mInboxFolderPreferences.setNotificationRingtoneUri(ringtone.toString());
-            mRingtone = RingtoneManager.getRingtone(getActivity(), ringtone);
-        } else {
-            // Null means silent was selected.
-            mInboxFolderPreferences.setNotificationRingtoneUri("");
-            mRingtone = null;
-        }
-
-        setRingtoneSummary();
-    }
-
-    private void setRingtoneSummary() {
-        final String summary = mRingtone != null ? mRingtone.getTitle(mContext)
-                : mContext.getString(R.string.silent_ringtone);
-
-        mInboxRingtone.setSummary(summary);
-    }
-
-    @Override
-    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,
-            @NonNull Preference preference) {
-        final String key = preference.getKey();
-        if (key.equals(PREFERENCE_SYNC_SETTINGS)) {
-            /// M: Avoid the folder is not synced or loaded.
-            if (null != mInboxFolder && null != mUiAccount) {
-                startActivity(MailboxSettings.getIntent(getActivity(), mUiAccount.fullFolderListUri,
-                        mInboxFolder));
-            } else {
-                LogUtils.e(LogUtils.TAG, "Account null %s, folder null %s",
-                        (null == mUiAccount), (null == mInboxFolder));
-            }
-            return true;
-        } else {
-            return super.onPreferenceTreeClick(preferenceScreen, preference);
-        }
-    }
-
-    /**
-     * Listen to all preference changes in this class.
-     * @param preference The changed Preference
-     * @param newValue The new value of the Preference
-     * @return True to update the state of the Preference with the new value
-     */
-    @Override
-    public boolean onPreferenceChange(Preference preference, Object newValue) {
-        // Can't use a switch here. Falling back to a giant conditional.
-        final String key = preference.getKey();
-        final ContentValues cv = new ContentValues(1);
-        if (key.equals(PREFERENCE_DESCRIPTION)){
-            String summary = newValue.toString().trim();
-            if (TextUtils.isEmpty(summary)) {
-                summary = mUiAccount.getEmailAddress();
-            }
-            mAccountDescription.setSummary(summary);
-            mAccountDescription.setText(summary);
-            cv.put(AccountColumns.DISPLAY_NAME, summary);
-        } else if (key.equals(PREFERENCE_NAME)) {
-            final String summary = newValue.toString().trim();
-            if (!TextUtils.isEmpty(summary)) {
-                mAccountName.setSummary(summary);
-                mAccountName.setText(summary);
-                cv.put(AccountColumns.SENDER_NAME, summary);
-            }
-        } else if (key.equals(PREFERENCE_SIGNATURE)) {
-            // Clean up signature if it's only whitespace (which is easy to do on a
-            // soft keyboard) but leave whitespace in place otherwise, to give the user
-            // maximum flexibility, e.g. the ability to indent
-            String signature = newValue.toString();
-            if (signature.trim().isEmpty()) {
-                signature = "";
-            }
-            mAccountSignature.setText(signature);
-            SettingsUtils.updatePreferenceSummary(mAccountSignature, signature,
-                    R.string.preferences_signature_summary_not_set);
-            cv.put(AccountColumns.SIGNATURE, signature);
-        } else if (key.equals(PREFERENCE_FREQUENCY)) {
-            final String summary = newValue.toString();
-            final int index = mCheckFrequency.findIndexOfValue(summary);
-            mCheckFrequency.setSummary(mCheckFrequency.getEntries()[index]);
-            mCheckFrequency.setValue(summary);
-            if (mServiceInfo.syncContacts || mServiceInfo.syncCalendar) {
-                // This account allows syncing of contacts and/or calendar, so we will always have
-                // separate preferences to enable or disable syncing of email, contacts, and
-                // calendar.
-                // The "sync frequency" preference really just needs to control the frequency value
-                // in our database.
-                /**
-                 * M: If user selected smart push, set account sync interval as
-                 * push. The sync interval would be dynamically changed by
-                 * SmartPushService
-                 */
-                int newFlags = mAccount.getFlags();
-                if (Integer.parseInt(summary) ==
-                        AccountSetupOptionsFragment.SMART_PUSH_MENU_ITEM_VALUE) {
-                    cv.put(AccountColumns.SYNC_INTERVAL,
-                            AccountSetupOptionsFragment.PUSH_MENU_ITEM_VALUE);
-                    newFlags |= Account.FLAGS_SMART_PUSH;
-                } else {
-                    cv.put(AccountColumns.SYNC_INTERVAL, Integer.parseInt(summary));
-                    newFlags &= ~Account.FLAGS_SMART_PUSH;
-                }
-                cv.put(AccountColumns.FLAGS, newFlags);
-                /** @} */
-            } else {
-                // This account only syncs email (not contacts or calendar), which means that we
-                // will hide the preference to turn syncing on and off. In this case, we want the
-                // sync frequency preference to also control whether or not syncing is enabled at
-                // all. If sync is turned off, we will display "sync never" regardless of what the
-                // numeric value we have stored says.
-                final android.accounts.Account androidAcct = new android.accounts.Account(
-                        mAccount.mEmailAddress, mServiceInfo.accountType);
-                if (Integer.parseInt(summary) == Account.CHECK_INTERVAL_NEVER) {
-                    // Disable syncing from the account manager. Leave the current sync frequency
-                    // in the database.
-                    ContentResolver.setSyncAutomatically(androidAcct, EmailContent.AUTHORITY,
-                            false);
-                } else {
-                    // Enable syncing from the account manager.
-                    ContentResolver.setSyncAutomatically(androidAcct, EmailContent.AUTHORITY,
-                            true);
-                    cv.put(AccountColumns.SYNC_INTERVAL, Integer.parseInt(summary));
-                }
-            }
-        } else if (key.equals(PREFERENCE_SYNC_WINDOW)) {
-            final String summary = newValue.toString();
-            int index = mSyncWindow.findIndexOfValue(summary);
-            mSyncWindow.setSummary(mSyncWindow.getEntries()[index]);
-            mSyncWindow.setValue(summary);
-            cv.put(AccountColumns.SYNC_LOOKBACK, Integer.parseInt(summary));
-        } else if (key.equals(PREFERENCE_SYNC_EMAIL)) {
-            final android.accounts.Account androidAcct = new android.accounts.Account(
-                    mAccount.mEmailAddress, mServiceInfo.accountType);
-            ContentResolver.setSyncAutomatically(androidAcct, EmailContent.AUTHORITY,
-                    (Boolean) newValue);
-            /// M: Return true to update the state of the Preference with the
-            // new value
-            return true;
-        } else if (key.equals(PREFERENCE_SYNC_CONTACTS)) {
-            final android.accounts.Account androidAcct = new android.accounts.Account(
-                    mAccount.mEmailAddress, mServiceInfo.accountType);
-            ContentResolver.setSyncAutomatically(androidAcct, ContactsContract.AUTHORITY,
-                    (Boolean) newValue);
-            /// M: Return true to update the state of the Preference with the
-            // new value
-            return true;
-        } else if (key.equals(PREFERENCE_SYNC_CALENDAR)) {
-            final android.accounts.Account androidAcct = new android.accounts.Account(
-                    mAccount.mEmailAddress, mServiceInfo.accountType);
-            ContentResolver.setSyncAutomatically(androidAcct, CalendarContract.AUTHORITY,
-                    (Boolean) newValue);
-            /// M: Return true to update the state of the Preference with the
-            // new value
-            return true;
-        } else if (key.equals(PREFERENCE_BACKGROUND_ATTACHMENTS)) {
-            int newFlags = mAccount.getFlags() & ~(Account.FLAGS_BACKGROUND_ATTACHMENTS);
-
-            newFlags |= (Boolean) newValue ?
-                    Account.FLAGS_BACKGROUND_ATTACHMENTS : 0;
-
-            cv.put(AccountColumns.FLAGS, newFlags);
-        } else if (FolderPreferences.PreferenceKeys.NOTIFICATIONS_ENABLED.equals(key)) {
-            mInboxFolderPreferences.setNotificationsEnabled((Boolean) newValue);
-            return true;
-        } else if (FolderPreferences.PreferenceKeys.NOTIFICATION_VIBRATE.equals(key)) {
-            final boolean vibrateSetting = (Boolean) newValue;
-            mInboxVibrate.setChecked(vibrateSetting);
-            mInboxFolderPreferences.setNotificationVibrateEnabled(vibrateSetting);
-            return true;
-        } else if (FolderPreferences.PreferenceKeys.NOTIFICATION_RINGTONE.equals(key)) {
-            return true;
-        } else {
-            // Default behavior, just indicate that the preferences were written
-            LogUtils.d(LogUtils.TAG, "Unknown preference key %s", key);
-            return true;
-        }
-        if (cv.size() > 0) {
-            new UpdateTask().run(mContext.getContentResolver(), mAccount.getUri(), cv, null, null);
-            EmailProvider.setServicesEnabledAsync(mContext);
-        }
-        return false;
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        menu.clear();
-        inflater.inflate(R.menu.settings_fragment_menu, menu);
-    }
-
-    /**
-     * Async task loader to load account in order to view/edit it
-     */
-    private static class AccountLoader extends MailAsyncTaskLoader<Map<String, Object>> {
-        public static final String RESULT_KEY_ACCOUNT = "account";
-        private static final String RESULT_KEY_UIACCOUNT_CURSOR = "uiAccountCursor";
-        public static final String RESULT_KEY_UIACCOUNT = "uiAccount";
-        public static final String RESULT_KEY_INBOX = "inbox";
-
-        private final ForceLoadContentObserver mObserver;
-        private final String mAccountEmail;
-        private final long mAccountId;
-
-        private AccountLoader(Context context, String accountEmail, long accountId) {
-            super(context);
-            mObserver = new ForceLoadContentObserver();
-            mAccountEmail = accountEmail;
-            mAccountId = accountId;
-        }
-
-        @Override
-        public Map<String, Object> loadInBackground() {
-            final Map<String, Object> map = new HashMap<>();
-
-            final Account account;
-            if (!TextUtils.isEmpty(mAccountEmail)) {
-                account = Account.restoreAccountWithAddress(getContext(), mAccountEmail, mObserver);
-            } else {
-                account = Account.restoreAccountWithId(getContext(), mAccountId, mObserver);
-            }
-            if (account == null) {
-                return map;
-            }
-
-            map.put(RESULT_KEY_ACCOUNT, account);
-
-            // We don't monitor these for changes, but they probably won't change in any meaningful
-            // way
-            account.getOrCreateHostAuthRecv(getContext());
-            account.getOrCreateHostAuthSend(getContext());
-
-            if (account.mHostAuthRecv == null) {
-                return map;
-            }
-
-            account.mPolicy =
-                    Policy.restorePolicyWithId(getContext(), account.mPolicyKey, mObserver);
-
-            final Cursor uiAccountCursor = getContext().getContentResolver().query(
-                    EmailProvider.uiUri("uiaccount", account.getId()),
-                    UIProvider.ACCOUNTS_PROJECTION,
-                    null, null, null);
-
-            if (uiAccountCursor != null) {
-                map.put(RESULT_KEY_UIACCOUNT_CURSOR, uiAccountCursor);
-                uiAccountCursor.registerContentObserver(mObserver);
-            } else {
-                return map;
-            }
-
-            if (!uiAccountCursor.moveToFirst()) {
-                return map;
-            }
-
-            final com.android.mail.providers.Account uiAccount =
-                    com.android.mail.providers.Account.builder().buildFrom(uiAccountCursor);
-
-            map.put(RESULT_KEY_UIACCOUNT, uiAccount);
-
-            final Cursor folderCursor = getContext().getContentResolver().query(
-                    uiAccount.settings.defaultInbox, UIProvider.FOLDERS_PROJECTION, null, null,
-                    null);
-
-            final Folder inbox;
-            try {
-                if (folderCursor != null && folderCursor.moveToFirst()) {
-                    inbox = new Folder(folderCursor);
-                } else {
-                    return map;
-                }
-            } finally {
-                if (folderCursor != null) {
-                    folderCursor.close();
-                }
-            }
-
-            map.put(RESULT_KEY_INBOX, inbox);
-            return map;
-        }
-
-        @Override
-        protected void onDiscardResult(Map<String, Object> result) {
-            final Account account = (Account) result.get(RESULT_KEY_ACCOUNT);
-            if (account != null) {
-                if (account.mPolicy != null) {
-                    account.mPolicy.close(getContext());
-                }
-                account.close(getContext());
-            }
-            final Cursor uiAccountCursor = (Cursor) result.get(RESULT_KEY_UIACCOUNT_CURSOR);
-            if (uiAccountCursor != null) {
-                uiAccountCursor.close();
-            }
-        }
-    }
-
-    private class AccountLoaderCallbacks
-            implements LoaderManager.LoaderCallbacks<Map<String, Object>> {
-        public static final String ARG_ACCOUNT_EMAIL = "accountEmail";
-        public static final String ARG_ACCOUNT_ID = "accountId";
-        private final Context mContext;
-
-        private AccountLoaderCallbacks(Context context) {
-            mContext = context;
-        }
-
-        @Override
-        public void onLoadFinished(Loader<Map<String, Object>> loader, Map<String, Object> data) {
-            final Activity activity = getActivity();
-            if (activity == null) {
-                return;
-            }
-            if (data == null) {
-                activity.finish();
-                return;
-            }
-
-            mUiAccount = (com.android.mail.providers.Account)
-                    data.get(AccountLoader.RESULT_KEY_UIACCOUNT);
-            mAccount = (Account) data.get(AccountLoader.RESULT_KEY_ACCOUNT);
-
-            if (mAccount != null && (mAccount.mFlags & Account.FLAGS_SECURITY_HOLD) != 0) {
-                final Intent i = AccountSecurity.actionUpdateSecurityIntent(mContext,
-                        mAccount.getId(), true);
-                mContext.startActivity(i);
-                activity.finish();
-                return;
-            }
-
-            mInboxFolder = (Folder) data.get(AccountLoader.RESULT_KEY_INBOX);
-
-            if (mUiAccount == null || mAccount == null) {
-                activity.finish();
-                return;
-            }
-
-            mServiceInfo =
-                    EmailServiceUtils.getServiceInfo(mContext, mAccount.getProtocol(mContext));
-
-            if (mInboxFolder == null) {
-                mInboxFolderPreferences = null;
-            } else {
-                mInboxFolderPreferences = new FolderPreferences(mContext,
-                        mUiAccount.getEmailAddress(), mInboxFolder, true);
-            }
-            loadSettings();
-            ///M: After loaded,enable the preferenceScreen that user can click.
-            getPreferenceScreen().setEnabled(true);
-        }
-
-        @Override
-        public Loader<Map<String, Object>> onCreateLoader(int id, Bundle args) {
-            return new AccountLoader(mContext, args.getString(ARG_ACCOUNT_EMAIL),
-                    args.getLong(ARG_ACCOUNT_ID));
-        }
-
-        @Override
-        public void onLoaderReset(Loader<Map<String, Object>> loader) {}
-    }
-
-    /**
-     * From a Policy, create and return an ArrayList of Strings that describe (simply) those
-     * policies that are supported by the OS.  At the moment, the strings are simple (e.g.
-     * "password required"); we should probably add more information (# characters, etc.), though
-     */
-    @SuppressWarnings("unused") // temporarily unused pending policy UI
-    private ArrayList<String> getSystemPoliciesList(Policy policy) {
-        Resources res = mContext.getResources();
-        ArrayList<String> policies = new ArrayList<>();
-        if (policy.mPasswordMode != Policy.PASSWORD_MODE_NONE) {
-            policies.add(res.getString(R.string.policy_require_password));
-        }
-        if (policy.mPasswordHistory > 0) {
-            policies.add(res.getString(R.string.policy_password_history));
-        }
-        if (policy.mPasswordExpirationDays > 0) {
-            policies.add(res.getString(R.string.policy_password_expiration));
-        }
-        if (policy.mMaxScreenLockTime > 0) {
-            policies.add(res.getString(R.string.policy_screen_timeout));
-        }
-        if (policy.mDontAllowCamera) {
-            policies.add(res.getString(R.string.policy_dont_allow_camera));
-        }
-        if (policy.mMaxEmailLookback != 0) {
-            policies.add(res.getString(R.string.policy_email_age));
-        }
-        if (policy.mMaxCalendarLookback != 0) {
-            policies.add(res.getString(R.string.policy_calendar_age));
-        }
-        return policies;
-    }
-
-    @SuppressWarnings("unused") // temporarily unused pending policy UI
-    private void setPolicyListSummary(ArrayList<String> policies, String policiesToAdd,
-            String preferenceName) {
-        Policy.addPolicyStringToList(policiesToAdd, policies);
-        if (policies.size() > 0) {
-            Preference p = findPreference(preferenceName);
-            StringBuilder sb = new StringBuilder();
-            for (String desc: policies) {
-                sb.append(desc);
-                sb.append('\n');
-            }
-            p.setSummary(sb.toString());
-        }
-    }
-
-    /**
-     * Load account data into preference UI. This must be called on the main thread.
-     */
-    private void loadSettings() {
-        final AccountPreferences accountPreferences =
-                new AccountPreferences(mContext, mUiAccount.getEmailAddress());
-        if (mInboxFolderPreferences != null) {
-            NotificationUtils.moveNotificationSetting(
-                    accountPreferences, mInboxFolderPreferences);
-        }
-
-        final String protocol = mAccount.getProtocol(mContext);
-        if (mServiceInfo == null) {
-            LogUtils.e(LogUtils.TAG,
-                    "Could not find service info for account %d with protocol %s", mAccount.mId,
-                    protocol);
-            getActivity().onBackPressed();
-            // TODO: put up some sort of dialog/toast here to tell the user something went wrong
-            return;
-        }
-        final android.accounts.Account androidAcct = mUiAccount.getAccountManagerAccount();
-
-        mAccountDescription = (EditTextPreference) findPreference(PREFERENCE_DESCRIPTION);
-        mAccountDescription.setSummary(mAccount.getDisplayName());
-        mAccountDescription.setText(mAccount.getDisplayName());
-        mAccountDescription.setOnPreferenceChangeListener(this);
-
-        mAccountName = (EditTextPreference) findPreference(PREFERENCE_NAME);
-        String senderName = mUiAccount.getSenderName();
-        // In rare cases, sendername will be null;  Change this to empty string to avoid NPE's
-        if (senderName == null) {
-            senderName = "";
-        }
-        mAccountName.setSummary(senderName);
-        mAccountName.setText(senderName);
-        mAccountName.setOnPreferenceChangeListener(this);
-        String accountSignature = mAccount.getSignature();
-		/*
-		String defaultSignature;
-        if (null == mAccount.getSignature() || mAccount.getSignature().isEmpty() ) {
-            defaultSignature = mContext.getResources().getString(R.string.preferences_signature_content);
-        } else {
-            defaultSignature = mAccount.getSignature();
-        }
-        String accountSignature = defaultSignature;
-        */
-        mAccountSignature = (EditTextPreference) findPreference(PREFERENCE_SIGNATURE);
-		if(accountSignature==null || TextUtils.isEmpty(accountSignature)){
-			accountSignature=SystemProperties.get("ro.business.name.email");;
-		}
-        mAccountSignature.setText(accountSignature);
-        mAccountSignature.setOnPreferenceChangeListener(this);
-        SettingsUtils.updatePreferenceSummary(mAccountSignature, accountSignature,
-                R.string.preferences_signature_summary_not_set);
-
-        /** M: Insert oof preference to fragment when the account is EasAccount @{ */
-        boolean showOof = true;
-        showOof = protocol.equalsIgnoreCase("eas");
-        mAccountOof = findPreference(PREFERENCE_OOF_SETTINGS);
-        if (mAccountOof != null) {
-            if (showOof) {
-                mAccountOof.setOnPreferenceClickListener(
-                        new Preference.OnPreferenceClickListener() {
-                            @Override
-                            public boolean onPreferenceClick(Preference preference) {
-                                onOutOfOffice(mAccount);
-                                return true;
-                            }
-                        });
-            } else {
-                getPreferenceScreen().removePreference(mAccountOof);
-            }
-        }
-        /** @} */
-        mCheckFrequency = (ListPreference) findPreference(PREFERENCE_FREQUENCY);
-        mCheckFrequency.setEntries(mServiceInfo.syncIntervalStrings);
-        mCheckFrequency.setEntryValues(mServiceInfo.syncIntervals);
-        if (mServiceInfo.syncContacts || mServiceInfo.syncCalendar) {
-            // This account allows syncing of contacts and/or calendar, so we will always have
-            // separate preferences to enable or disable syncing of email, contacts, and calendar.
-            // The "sync frequency" preference really just needs to control the frequency value
-            // in our database.
-            /// M: If the account is smart push, always show sync interval as smart push
-            // regardless of the actual interval.
-            if ((mAccount.mFlags & Account.FLAGS_SMART_PUSH) != 0) {
-                mCheckFrequency.setValue(String
-                        .valueOf(AccountSetupOptionsFragment.SMART_PUSH_MENU_ITEM_VALUE));
-            } else {
-                mCheckFrequency.setValue(String.valueOf(mAccount.getSyncInterval()));
-            }
-           /// @}
-        } else {
-            // This account only syncs email (not contacts or calendar), which means that we will
-            // hide the preference to turn syncing on and off. In this case, we want the sync
-            // frequency preference to also control whether or not syncing is enabled at all. If
-            // sync is turned off, we will display "sync never" regardless of what the numeric
-            // value we have stored says.
-            boolean synced = ContentResolver.getSyncAutomatically(androidAcct,
-                    EmailContent.AUTHORITY);
-            if (synced) {
-                mCheckFrequency.setValue(String.valueOf(mAccount.getSyncInterval()));
-            } else {
-                mCheckFrequency.setValue(String.valueOf(Account.CHECK_INTERVAL_NEVER));
-            }
-        }
-        mCheckFrequency.setSummary(mCheckFrequency.getEntry());
-        mCheckFrequency.setOnPreferenceChangeListener(this);
-
-        final Preference quickResponsePref = findPreference(PREFERENCE_QUICK_RESPONSES);
-        if (quickResponsePref != null) {
-            quickResponsePref.setOnPreferenceClickListener(
-                    new Preference.OnPreferenceClickListener() {
-                        @Override
-                        public boolean onPreferenceClick(Preference preference) {
-                            onEditQuickResponses(mUiAccount);
-                            return true;
-                        }
-                    });
-        }
-
-        // Add check window preference
-        final PreferenceCategory dataUsageCategory =
-                (PreferenceCategory) findPreference(PREFERENCE_CATEGORY_DATA_USAGE);
-        /// M: Get this ListPreference from the preferences xml configuration.
-        mSyncWindow = (ListPreference) findPreference(PREFERENCE_SYNC_WINDOW);
-        if (mSyncWindow != null) {
-            if (mServiceInfo.offerLookback) {
-                mSyncWindow.setKey(PREFERENCE_SYNC_WINDOW);
-                dataUsageCategory.addPreference(mSyncWindow);
-                mSyncWindow.setTitle(R.string.account_setup_options_mail_window_label);
-                mSyncWindow.setValue(String.valueOf(mAccount.getSyncLookback()));
-                final int maxLookback;
-                if (mAccount.mPolicy != null) {
-                    maxLookback = mAccount.mPolicy.mMaxEmailLookback;
-                } else {
-                    maxLookback = 0;
-                }
-
-                MailboxSettings.setupLookbackPreferenceOptions(mContext, mSyncWindow, maxLookback,
-                        false);
-
-                // Must correspond to the hole in the XML file that's reserved.
-                mSyncWindow.setOrder(2);
-                mSyncWindow.setOnPreferenceChangeListener(this);
-
-                if (mSyncSettings == null) {
-                    mSyncSettings = new Preference(mContext);
-                    mSyncSettings.setKey(PREFERENCE_SYNC_SETTINGS);
-                    dataUsageCategory.addPreference(mSyncSettings);
-                }
-
-                mSyncSettings.setTitle(R.string.folder_sync_settings_pref_title);
-                mSyncSettings.setOrder(3);
-            } else {
-                /// M: Remove this syncWindow ListPreference when it's not eas.
-                dataUsageCategory.removePreference(mSyncWindow);
-            }
-        }
-
-        final PreferenceCategory folderPrefs =
-                (PreferenceCategory) findPreference(PREFERENCE_SYSTEM_FOLDERS);
-        if (folderPrefs != null) {
-            if (mServiceInfo.requiresSetup) {
-                Preference trashPreference = findPreference(PREFERENCE_SYSTEM_FOLDERS_TRASH);
-                Intent i = new Intent(mContext, FolderPickerActivity.class);
-                Uri uri = EmailContent.CONTENT_URI.buildUpon().appendQueryParameter(
-                        "account", Long.toString(mAccount.getId())).build();
-                i.setData(uri);
-                i.putExtra(FolderPickerActivity.MAILBOX_TYPE_EXTRA, Mailbox.TYPE_TRASH);
-                trashPreference.setIntent(i);
-
-                Preference sentPreference = findPreference(PREFERENCE_SYSTEM_FOLDERS_SENT);
-                i = new Intent(mContext, FolderPickerActivity.class);
-                i.setData(uri);
-                i.putExtra(FolderPickerActivity.MAILBOX_TYPE_EXTRA, Mailbox.TYPE_SENT);
-                sentPreference.setIntent(i);
-            } else {
-                getPreferenceScreen().removePreference(folderPrefs);
-            }
-        }
-
-        final CheckBoxPreference backgroundAttachments = (CheckBoxPreference)
-                findPreference(PREFERENCE_BACKGROUND_ATTACHMENTS);
-        if (backgroundAttachments != null) {
-            if (!mServiceInfo.offerAttachmentPreload) {
-                dataUsageCategory.removePreference(backgroundAttachments);
-            } else {
-                backgroundAttachments.setChecked(
-                        0 != (mAccount.getFlags() & Account.FLAGS_BACKGROUND_ATTACHMENTS));
-                backgroundAttachments.setOnPreferenceChangeListener(this);
-            }
-        }
-
-        final PreferenceCategory notificationsCategory =
-                (PreferenceCategory) findPreference(PREFERENCE_CATEGORY_NOTIFICATIONS);
-
-        if (mInboxFolderPreferences != null) {
-            final CheckBoxPreference inboxNotify = (CheckBoxPreference) findPreference(
-                FolderPreferences.PreferenceKeys.NOTIFICATIONS_ENABLED);
-            inboxNotify.setChecked(mInboxFolderPreferences.areNotificationsEnabled());
-            inboxNotify.setOnPreferenceChangeListener(this);
-
-            mInboxRingtone = findPreference(FolderPreferences.PreferenceKeys.NOTIFICATION_RINGTONE);
-            final String ringtoneUri = mInboxFolderPreferences.getNotificationRingtoneUri();
-            if (!TextUtils.isEmpty(ringtoneUri)) {
-                mRingtone = RingtoneManager.getRingtone(getActivity(), Uri.parse(ringtoneUri));
-            }
-            setRingtoneSummary();
-            mInboxRingtone.setOnPreferenceChangeListener(this);
-            mInboxRingtone.setOnPreferenceClickListener(new OnPreferenceClickListener() {
-                @Override
-                public boolean onPreferenceClick(final Preference preference) {
-                    showRingtonePicker();
-
-                    return true;
-                }
-            });
-
-            notificationsCategory.setEnabled(true);
-
-            // Set the vibrator value, or hide it on devices w/o a vibrator
-            mInboxVibrate = (CheckBoxPreference) findPreference(
-                    FolderPreferences.PreferenceKeys.NOTIFICATION_VIBRATE);
-            if (mInboxVibrate != null) {
-                mInboxVibrate.setChecked(
-                        mInboxFolderPreferences.isNotificationVibrateEnabled());
-                Vibrator vibrator = (Vibrator) mContext.getSystemService(Context.VIBRATOR_SERVICE);
-                if (vibrator.hasVibrator()) {
-                    // When the value is changed, update the setting.
-                    mInboxVibrate.setOnPreferenceChangeListener(this);
-                } else {
-                    // No vibrator present. Remove the preference altogether.
-                    notificationsCategory.removePreference(mInboxVibrate);
-                    mInboxVibrate = null;
-                }
-            }
-        } else {
-            notificationsCategory.setEnabled(false);
-        }
-
-        final Preference retryAccount = findPreference(PREFERENCE_POLICIES_RETRY_ACCOUNT);
-        final PreferenceCategory policiesCategory = (PreferenceCategory) findPreference(
-                PREFERENCE_CATEGORY_POLICIES);
-        if (policiesCategory != null) {
-            // TODO: This code for showing policies isn't working. For KLP, just don't even bother
-            // showing this data; we'll fix this later.
-    /*
-            if (policy != null) {
-                if (policy.mProtocolPoliciesEnforced != null) {
-                    ArrayList<String> policies = getSystemPoliciesList(policy);
-                    setPolicyListSummary(policies, policy.mProtocolPoliciesEnforced,
-                            PREFERENCE_POLICIES_ENFORCED);
-                }
-                if (policy.mProtocolPoliciesUnsupported != null) {
-                    ArrayList<String> policies = new ArrayList<String>();
-                    setPolicyListSummary(policies, policy.mProtocolPoliciesUnsupported,
-                            PREFERENCE_POLICIES_UNSUPPORTED);
-                } else {
-                    // Don't show "retry" unless we have unsupported policies
-                    policiesCategory.removePreference(retryAccount);
-                }
-            } else {
-    */
-            // Remove the category completely if there are no policies
-            getPreferenceScreen().removePreference(policiesCategory);
-
-            //}
-        }
-
-        if (retryAccount != null) {
-            retryAccount.setOnPreferenceClickListener(
-                    new Preference.OnPreferenceClickListener() {
-                        @Override
-                        public boolean onPreferenceClick(Preference preference) {
-                            // Release the account
-                            SecurityPolicy.setAccountHoldFlag(mContext, mAccount, false);
-                            // Remove the preference
-                            if (policiesCategory != null) {
-                                policiesCategory.removePreference(retryAccount);
-                            }
-                            return true;
-                        }
-                    });
-        }
-        findPreference(PREFERENCE_INCOMING).setOnPreferenceClickListener(
-                new Preference.OnPreferenceClickListener() {
-                    @Override
-                    public boolean onPreferenceClick(Preference preference) {
-                        onIncomingSettings(mAccount);
-                        return true;
-                    }
-                });
-
-        // Hide the outgoing account setup link if it's not activated
-        final Preference prefOutgoing = findPreference(PREFERENCE_OUTGOING);
-        if (prefOutgoing != null) {
-            if (mServiceInfo.usesSmtp && mAccount.mHostAuthSend != null) {
-                prefOutgoing.setOnPreferenceClickListener(
-                        new Preference.OnPreferenceClickListener() {
-                            @Override
-                            public boolean onPreferenceClick(Preference preference) {
-                                onOutgoingSettings(mAccount);
-                                return true;
-                            }
-                        });
-            } else {
-                if (mServiceInfo.usesSmtp) {
-                    // We really ought to have an outgoing host auth but we don't.
-                    // There's nothing we can do at this point, so just log the error.
-                    LogUtils.e(LogUtils.TAG, "Account %d has a bad outbound hostauth",
-                            mAccount.getId());
-                }
-                PreferenceCategory serverCategory = (PreferenceCategory) findPreference(
-                        PREFERENCE_CATEGORY_SERVER);
-                serverCategory.removePreference(prefOutgoing);
-            }
-        }
-		
-		//add by dongdongli for remove account 20171127 start {
-		final Preference prefRemoveAccount = findPreference(PREFERENCE_REMOVE_ACCOUNT);
-		prefRemoveAccount.setOnPreferenceClickListener(
-                new Preference.OnPreferenceClickListener() {
-                    @Override
-                    public boolean onPreferenceClick(Preference preference) {
-                        final android.accounts.Account androidAcct = new android.accounts.Account(
-								mAccount.mEmailAddress, mServiceInfo.accountType);
-							boolean result = AccountManager.get(getActivity())
-                                .removeAccountExplicitly(androidAcct);
-                        return true;
-                    }
-                });
-		//add by dongdongli for remove account 20171127 end }
-
-        final CheckBoxPreference syncContacts =
-                (CheckBoxPreference) findPreference(PREFERENCE_SYNC_CONTACTS);
-        final CheckBoxPreference syncCalendar =
-                (CheckBoxPreference) findPreference(PREFERENCE_SYNC_CALENDAR);
-        final CheckBoxPreference syncEmail =
-                (CheckBoxPreference) findPreference(PREFERENCE_SYNC_EMAIL);
-        if (syncContacts != null && syncCalendar != null && syncEmail != null) {
-            if (mServiceInfo.syncContacts || mServiceInfo.syncCalendar) {
-                if (mServiceInfo.syncContacts) {
-                    syncContacts.setChecked(ContentResolver
-                            .getSyncAutomatically(androidAcct, ContactsContract.AUTHORITY));
-                    syncContacts.setOnPreferenceChangeListener(this);
-                } else {
-                    syncContacts.setChecked(false);
-                    syncContacts.setEnabled(false);
-                }
-                if (mServiceInfo.syncCalendar) {
-                    syncCalendar.setChecked(ContentResolver
-                            .getSyncAutomatically(androidAcct, CalendarContract.AUTHORITY));
-                    syncCalendar.setOnPreferenceChangeListener(this);
-                } else {
-                    syncCalendar.setChecked(false);
-                    syncCalendar.setEnabled(false);
-                }
-                syncEmail.setChecked(ContentResolver
-                        .getSyncAutomatically(androidAcct, EmailContent.AUTHORITY));
-                syncEmail.setOnPreferenceChangeListener(this);
-            } else {
-                dataUsageCategory.removePreference(syncContacts);
-                dataUsageCategory.removePreference(syncCalendar);
-                dataUsageCategory.removePreference(syncEmail);
-            }
-        }
-    }
-
-    /**
-     * Shows the system ringtone picker.
-     */
-    private void showRingtonePicker() {
-        Intent intent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
-        final String ringtoneUri = mInboxFolderPreferences.getNotificationRingtoneUri();
-        if (!TextUtils.isEmpty(ringtoneUri)) {
-            intent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, Uri.parse(ringtoneUri));
-        }
-        intent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
-        intent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI,
-                Settings.System.DEFAULT_NOTIFICATION_URI);
-        intent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_SILENT, true);
-        intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
-        startActivityForResult(intent, RINGTONE_REQUEST_CODE);
-    }
-
-    /**
-     * Dispatch to edit quick responses.
-     */
-    public void onEditQuickResponses(com.android.mail.providers.Account account) {
-        final Bundle args = AccountSettingsEditQuickResponsesFragment.createArgs(account);
-        final PreferenceActivity activity = (PreferenceActivity) getActivity();
-        activity.startPreferencePanel(AccountSettingsEditQuickResponsesFragment.class.getName(),
-                args, R.string.account_settings_edit_quick_responses_label, null, null, 0);
-    }
-
-    /**
-     * Dispatch to edit incoming settings.
-     */
-    public void onIncomingSettings(Account account) {
-        final Intent intent =
-                AccountServerSettingsActivity.getIntentForIncoming(getActivity(), account);
-        getActivity().startActivity(intent);
-    }
-
-    /**
-     * Dispatch to edit outgoing settings.
-     */
-    public void onOutgoingSettings(Account account) {
-        final Intent intent =
-                AccountServerSettingsActivity.getIntentForOutgoing(getActivity(), account);
-        getActivity().startActivity(intent);
-    }
-
-    /**
-     * M: Dispatch to edit out of office settings.
-     *
-     */
-    public void onOutOfOffice(Account account) {
-        startOofGetWaitingFragment(account.mId, this);
-    }
-
-    /**
-     * M: Start the oof waiting fragment for get the out of office settings.
-     *
-     */
-    private void startOofGetWaitingFragment(long accountId, AccountSettingsFragment target) {
-        FragmentManager fm = getFragmentManager();
-        // Just return because another FragmentTransaction has been invoked just now
-        if (fm.getBackStackEntryCount() > 0
-                && fm.findFragmentByTag(OofGetWaitingFragment.TAG) != null) {
-            return;
-        }
-        OofGetWaitingFragment checkerFragment =
-            OofGetWaitingFragment.newInstance(accountId, target);
-        FragmentTransaction transaction = fm.beginTransaction();
-        transaction.add(checkerFragment, OofGetWaitingFragment.TAG);
-        transaction.addToBackStack("back");
-        transaction.commit();
-        fm.executePendingTransactions();
-    }
-
-    /**
-     * M: Don't show feedback menu if no feedback Uri is set
-     */
-    @Override
-    public void onPrepareOptionsMenu(Menu menu) {
-        super.onPrepareOptionsMenu(menu);
-        MenuItem feedBackMenuItem = menu.findItem(R.id.feedback_menu_item);
-        if (feedBackMenuItem != null) {
-            Uri feedBackUri = Utils.getValidUri(getString(R.string.email_feedback_uri));
-            // We only want to enable the feedback menu item, if there is a
-            // valid feedback uri
-            feedBackMenuItem.setVisible(!Uri.EMPTY.equals(feedBackUri));
-        }
-    }
-}
Index: vendor/branch/5058A_Claro/packages/apps/Email/res/values/strings.xml
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Email/res/values/strings.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Email/res/values/strings.xml	(revision 3018)
@@ -1,693 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2008 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <!-- Names of packages and authorities that are common to all apps
-    and read from resources -->
-
-    <!-- Permissions label for reading attachments -->
-    <string name="permission_read_attachment_label">Read email attachments</string>
-    <!-- Permissions description for reading attachments -->
-    <string name="permission_read_attachment_desc">Allows the app to read your email
-        attachments.</string>
-    <!-- Permissions label for accessing the main provider -->
-    <string name="permission_access_provider_label">Access email provider data</string>
-    <!-- Permissions description for accessing the main provider -->
-    <string name="permission_access_provider_desc">Allows the app to access your email
-        database, including received messages, sent messages, usernames, and passwords.</string>
-
-    <!-- Name of application on Home screen -->
-    <string name="app_name">Email</string>
-
-    <!-- Actions will be used as buttons and in menu items -->
-    <skip />
-
-    <!-- Button name used to confirm acceptance of dialog boxes, warnings, errors, etc. -->
-    <string name="okay_action">OK</string>
-    <!-- Button name used to cancel out of dialog boxes -->
-    <string name="cancel_action">Cancel</string>
-    <!--  Menu item used to create a new quick response [CHAR_LIMIT=16] -->
-    <string name="create_action">Create new</string>
-
-    <!-- Message informing user when a list that would contain quick responses
-            is empty [CHAR_LIMIT=80] -->
-    <string name="quick_responses_empty_view">No quick responses.</string>
-    <!-- Menu item -->
-    <string name="account_settings_action">Account settings</string>
-    <!-- The next set of strings are used in local display and may be localized. -->
-    <!-- In the UI, the inbox will be displayed with this name -->
-    <string name="mailbox_name_display_inbox">Inbox</string>
-    <!-- In the UI, the outbox will be displayed with this name -->
-    <string name="mailbox_name_display_outbox">Outbox</string>
-    <!-- In the UI, the drafts will be displayed with this name -->
-    <string name="mailbox_name_display_drafts">Drafts</string>
-    <!-- In the UI, the trash will be displayed with this name -->
-    <string name="mailbox_name_display_trash">Trash</string>
-    <!-- In the UI, the sent will be displayed with this name -->
-    <string name="mailbox_name_display_sent">Sent</string>
-    <!-- In the UI, the junk will be displayed with this name -->
-    <string name="mailbox_name_display_junk">Junk</string>
-    <!-- In the UI, the starred will be displayed with this name -->
-    <string name="mailbox_name_display_starred">Starred</string>
-    <!-- In the UI, the unread will be displayed with this name [CHAR LIMIT=15] -->
-    <string name="mailbox_name_display_unread">Unread</string>
-
-    <!-- Title of debug screen -->
-    <string name="debug_title">Debug</string>
-    <!-- Do Not Translate.  Checkbox label, shown only on debug screen -->
-    <string name="debug_enable_debug_logging_label" translatable="false">
-        Enable extra debug logging?</string>
-    <!-- Do Not Translate.  Checkbox label, shown only on debug screen -->
-    <string name="debug_enable_verbose_logging_label" translatable="false">
-        Enable exchange logging?</string>
-    <!-- Do Not Translate.  Checkbox label, shown only on debug screen -->
-    <string name="debug_enable_file_logging_label" translatable="false">
-        Enable sd card logging?</string>
-    <!-- Do Not Translate.  Button label, shown only on debug screen -->
-    <string name="debug_clear_webview_cache" translatable="false">
-        Clear WebView cache</string>
-    <!-- Do Not Translate. Button label. Shown only on debug screen -->
-    <string name="debug_clear_migration_state" translatable="false">Clear migration state</string>
-    <!-- Do Not Translate.  Checkbox label, shown on debug screen. -->
-    <string name="debug_force_one_minute_refresh_label" translatable="false">
-        Force 1-minute refresh for POP/IMAP</string>
-    <!-- Do Not Translate.  Checkbox label, shown on debug screen. -->
-    <string name="debug_enable_strict_mode_label" translatable="false">
-        Enable strict mode (with logging)</string>
-
-
-    <!-- Label shown in the account selector to select "Combined view", which contains
-         Combined Inbox, Combined Outbox, etc. [CHAR LIMIT=30] -->
-    <string name="mailbox_list_account_selector_combined_view">Combined view</string>
-
-    <!-- Header for forwarded original messages -->
-    <string name="message_compose_fwd_header_fmt">\n\n-------- Original Message --------\nSubject: <xliff:g id="subject">%1$s</xliff:g>\nFrom: <xliff:g id="sender">%2$s</xliff:g>\nTo: <xliff:g id="to">%3$s</xliff:g>\nCC: <xliff:g id="cc">%4$s</xliff:g>\n\n</string>
-    <!-- Title for dialog containing list of quick responses that user may insert
-            into message body. [CHAR_LIMIT=30] -->
-    <string name="message_compose_insert_quick_response_list_title">Insert quick response</string>
-    <!-- Menu item for inserting quick responses into email compose activity. [CHAR_LIMIT=30] -->
-    <string name="message_compose_insert_quick_response_menu_title">Insert quick response</string>
-    <!-- Toast upon using "send" when one or more attachments will need to be background loaded
-      [CHAR LIMIT=none]-->
-    <string name="message_view_attachment_background_load">One or more attachments in your
-        forwarded message will be downloaded prior to sending.</string>
-
-    <!-- String used in place of a message that could not be properly decoded (e.g. bad base64
-         data was received.) [CHAR LIMIT=none] -->
-    <string name="message_decode_error">There was an error while decoding the message.</string>
-
-    <!-- Notification ticker when a forwarded attachment couldn't be sent [CHAR LIMIT=none] -->
-    <string name="forward_download_failed_ticker">Couldn\'t forward one or more attachments.</string>
-    <!-- Notification title when a forwarded attachment couldn't be sent [CHAR LIMIT=30]-->
-    <string name="forward_download_failed_title">Attachment not forwarded</string>
-
-    <!-- Notification ticker when email account authentication fails [CHAR LIMIT=none] -->
-    <string name="login_failed_ticker">
-        <xliff:g id="account_name">%s</xliff:g> signin unsuccessful.</string>
-    <!-- Notification title when email account authentication fails [CHAR LIMIT=30]-->
-    <string name="login_failed_title">Couldn\'t sign in</string>
-
-    <!-- Title of screen when setting up new email account [CHAR LIMIT=45] -->
-    <string name="account_setup_basics_title">Account setup</string>
-    <!-- Title of screen when trying to get oauth authentication -->
-    <string name="oauth_authentication_title">Requesting authorization</string>
-    <!-- Title of screen to choose with authentication to use -->
-    <string name="sign_in_title">Sign in</string>
-
-    <!-- Warning if there is a problem authenticating with oauth -->
-    <string name="oauth_error_description">Unable to authenticate</string>
-    <!-- Warning label displayed when the email address or password are incorrect -->
-    <string name="password_warning_label">Email address or password are incorrect</string>
-    <!-- Label displayed to confirm what email address we are trying to validate -->
-    <string name="email_confirmation_label">Email address:</string>
-    <!-- Headline of screen when setting up new email account (large text over divider)
-        [CHAR LIMIT=none] -->
-    <string name="account_setup_basics_headline">Email account</string>
-    <!-- On "Set up email" screen, enthusiastic welcome message. -->
-    <string name="accounts_welcome">You can set up your account in just a few steps.
-        </string>
-    <!-- On "Set up email" screen, hint for account email address text field -->
-    <string name="account_setup_basics_email_label">Email address</string>
-
-    <!-- Label between OAuth and password authentication, indicating the user must do one or the other [CHAR LIMIT=40] -->
-    <string name="or_label">OR</string>
-    <!-- Label for signing in with Google using OAuth -->
-    <string name="sign_in_with_google">Sign in with Google</string>
-    <!-- On "Set up email" screen, hint for account email password text field, should be uppercase where applicable -->
-    <string name="account_setup_basics_password_label">PASSWORD</string>
-    <!-- hint for account email password text field -->
-    <string name="password_hint">Password</string>
-    <!--  On the "Setup up email" screen, label indicating what service we are signed in with [CHAR LIMIT=40] -->
-    <string name="signed_in_with_service_label">Signed in with %s</string>
-    <!-- Label for the authentication section, should be uppercase where applicable [CHAR LIMIT=20] -->
-    <string name="authentication_label">AUTHENTICATION</string>
-    <!-- Label for the add authentication icon [CHAR LIMIT=40] -->
-    <string name="add_authentication_label">Add authentication</string>
-    <!-- Label for the add authentication icon [CHAR LIMIT=40] -->
-    <string name="clear_authentication_label">Clear authentication</string>
-    <!-- Button name on "Set up email" screen, with action underlined using html [CHAR LIMIT=20] -->
-    <string name="account_setup_basics_manual_setup_action">Manual setup</string>
-    <!-- Toast when we can't build a URI from the given email & password -->
-    <!-- Note, the error message in the toast is purposefully vague, because I *don't* know
-        exactly what's wrong. -->
-    <string name="account_setup_username_password_toast">
-        Type a valid email address and password.</string>
-    <!-- Title of dialog shown when a duplicate account is created -->
-    <string name="account_duplicate_dlg_title">Duplicate account</string>
-    <!-- Message of dialog shown when a duplicate account is created.  The display name of
-         the duplicate account is displayed. -->
-    <string name="account_duplicate_dlg_message_fmt">
-        You\'re already using this username for the account \"<xliff:g id="duplicate">%s</xliff:g>\".
-    </string>
-
-    <!-- On check-settings screen, this is the initially-displayed message. -->
-    <string name="account_setup_check_settings_retr_info_msg">
-    Retrieving account information\u2026</string>
-    <!-- Appears on screen while system is checking incoming server settings -->
-    <string name="account_setup_check_settings_check_incoming_msg">
-    Validating server settings\u2026</string>
-    <!-- Appears on screen while system is checking outgoing server settings -->
-    <string name="account_setup_check_settings_check_outgoing_msg">
-    Validating smtp settings\u2026</string>
-        <!-- Appears on screen while system is creating the account -->
-    <string name="account_setup_creating_account_msg">
-    Creating account\u2026</string>
-
-    <!-- Headline text that appears on "Confirm account type" screen [CHAR LIMIT=none] -->
-    <string name="account_setup_ab_headline">Confirm account type</string>
-    <!-- Explanatory text that appears on the "Confirm account type" screen [CHAR LIMIT=none] -->
-    <string name="account_setup_ab_instructions_format">You indicated <xliff:g id="email">%1$s</xliff:g> uses <xliff:g id="userProtocol">%2$s</xliff:g>, but the account may use <xliff:g id="providerProtocol">%3$s</xliff:g></string>
-
-    <!-- Text that appears on "Set up email" screen after successfully setting up an account
-        [CHAR LIMIT=none] -->
-    <string name="account_setup_names_headline">
-        Your account is set up and email is on its way!</string>
-    <!-- On "Set up email" screen, label of text field -->
-    <string name="account_setup_names_account_name_label">
-        Give this account a name (optional)</string>
-    <!-- On "Set up email" screen, label of text field -->
-    <string name="account_setup_names_user_name_label">
-        Your name (displayed on outgoing messages)</string>
-
-    <!-- Headline for the the account type selector (IMAP or POP3 or EAS) [CHAR LIMIT=none] -->
-    <string name="account_setup_account_type_headline">Account type</string>
-    <!-- "Add new email account" screen, text that appears on screen -->
-    <string name="account_setup_account_type_instructions">What type of account is this?</string>
-
-    <!-- "Incoming server settings" screen, headline (text over divider) [CHAR LIMIT=none] -->
-    <string name="account_setup_incoming_headline">Incoming server settings</string>
-    <!-- "Incoming server settings" screen, label for text field, should be uppercase where applicable -->
-    <string name="account_setup_incoming_username_label">USERNAME</string>
-    <!-- "Incoming server settings" screen, label for text field, should be uppercase where applicable -->
-    <string name="account_setup_incoming_password_label">PASSWORD</string>
-    <!-- "Incoming server settings" screen, label for text field -->
-    <string name="account_setup_password_subheading">Password</string>
-    <!-- "Incoming server settings" screen, label for text field, should be uppercase where applicable -->
-    <string name="account_setup_incoming_server_label">SERVER</string>
-    <!-- "Incoming server settings" screen, label for text field, should be uppercase where applicable -->
-    <string name="account_setup_incoming_port_label">PORT</string>
-    <!-- "Incoming server settings" screen, label for pop-up menu, should be uppercase where applicable -->
-    <string name="account_setup_incoming_security_label">SECURITY TYPE</string>
-    <!-- "Incoming server settings" screen, option for "Security type" pop-up menu indicating
-        the desire for an unencrypted session -->
-    <string name="account_setup_incoming_security_none_label">None</string>
-    <!-- "Incoming server settings" screen, option for "Security type" pop-up menu indicating
-        the desire for an encrypted session on the selected port, accepting all SSL certificates -->
-    <string name="account_setup_incoming_security_ssl_trust_certificates_label">
-        SSL/TLS (Accept all certificates)</string>
-    <!-- "Incoming server settings" screen, option for "Security type" pop-up menu indicating
-        the desire for an encrypted session on the selected port, including SSL certificate
-        checks -->
-    <string name="account_setup_incoming_security_ssl_label">SSL/TLS</string>
-    <!-- "Incoming server settings" screen, option for "Security type" pop-up menu indicating
-        the desire for an encrypted session overlaid on a plain text session using the selected
-        port, accepting all SSL certificates -->
-    <string name="account_setup_incoming_security_tls_trust_certificates_label">
-        STARTTLS (accept all certificates)</string>
-    <!-- "Incoming server settings" screen, option for "Security type" pop-up menu indicating
-        the desire for an encrypted session overlaid on a plain text session on the selected
-        port, including SSL certificate checks -->
-    <string name="account_setup_incoming_security_tls_label">STARTTLS</string>
-    <!-- "Incoming server settings" screen, label for pop-up menu -->
-    <string name="account_setup_incoming_delete_policy_label">Delete email from server</string>
-    <!-- "Incoming server settings" screen, options in pop-up menu for Delete email from server: -->
-    <!-- "Incoming server settings" screen, options in pop-up menu for Delete email from server: -->
-    <string name="account_setup_incoming_delete_policy_never_label">Never</string>
-    <!-- "Incoming server settings" screen, options in pop-up menu for Delete email from server: -->
-    <string name="account_setup_incoming_delete_policy_delete_label">
-        When I delete from Inbox</string>
-    <!-- "Incoming server settings" screen, label for setting IMAP path prefix: -->
-    <string name="account_setup_incoming_imap_path_prefix_label">IMAP path prefix</string>
-    <!-- "Incoming server settings" screen, hint for setting IMAP path prefix: -->
-    <string name="account_setup_incoming_imap_path_prefix_hint">Optional</string>
-
-    <!-- "Outgoing server settings" screen, headline (text over divider) [CHAR LIMIT=none] -->
-    <string name="account_setup_outgoing_headline">Outgoing server settings</string>
-    <!-- On "Outgoing server settings" screen, label for text field, should be uppercase where applicable -->
-    <string name="account_setup_outgoing_smtp_server_label">SMTP SERVER</string>
-    <!-- On "Outgoing server settings" screen, label for text field, should be uppercase where applicable -->
-    <string name="account_setup_outgoing_port_label">PORT</string>
-    <!-- On "Outgoing server settings" screen, label for pop-up menu, should be uppercase where applicable -->
-    <string name="account_setup_outgoing_security_label">SECURITY TYPE</string>
-    <!-- On "Outgoing server settings" screen, label for check box, should be uppercase where applicable -->
-    <string name="account_setup_outgoing_require_login_label">Require signin</string>
-    <!-- On "Outgoing server settings" screen, label for text field, should be uppercase where applicable-->
-    <string name="account_setup_outgoing_username_label">USERNAME</string>
-
-    <!-- On "Exchange" setup screen, a heading title for the current client certificate, should be uppercase where applicable [CHAR LIMIT=50] -->
-    <string name="account_setup_exchange_certificate_title">CLIENT CERTIFICATE</string>
-    <!-- On "Exchange" setup screen, a button label to include a client certificate [CHAR LIMIT=35] -->
-    <string name="account_setup_exchange_select_certificate">Select</string>
-    <!-- On "Exchange" setup screen, a button label to include a client certificate [CHAR LIMIT=35] -->
-    <string name="account_setup_exchange_use_certificate">Use client certificate</string>
-    <!-- On "Exchange" setup screen, a button label to remove the currently used client certificate [CHAR LIMIT=35] -->
-    <string name="account_setup_exchange_remove_certificate">Remove</string>
-    <!-- On "Exchange" setup screen, placeholder text to indicate no client
-         certificate is used [CHAR LIMIT=50] -->
-    <string name="account_setup_exchange_no_certificate">None</string>
-    <!-- On "Exchange" setup screen, the exchange device-id label, should be uppercase where applicable [CHAR LIMIT=30] -->
-    <string name="account_setup_exchange_device_id_label">MOBILE DEVICE ID</string>
-
-    <!-- In Account setup options screen, Activity headline [CHAR LIMIT=none] -->
-    <string name="account_setup_options_headline">Account options</string>
-    <!-- In Account setup options screen, label for email check frequency selector -->
-    <string name="account_setup_options_mail_check_frequency_label">Sync frequency:</string>
-    <!-- In Account setup options & Account Settings screens, label for email check frequency option -->
-    <string name="account_setup_options_mail_check_frequency_never">Never</string>
-    <!-- In Account setup options & Account Settings screens, label for email check frequency option -->
-    <string name="account_setup_options_mail_check_frequency_push">Automatic (Push)</string>
-    <!-- In Account setup options & Account Settings screens, email check frequency option -->
-    <string name="account_setup_options_mail_check_frequency_5min">Every 5 minutes</string>
-    <!-- In Account setup options & Account Settings screens, email check frequency option -->
-    <string name="account_setup_options_mail_check_frequency_10min">Every 10 minutes</string>
-    <!-- In Account setup options & Account Settings screens, email check frequency option -->
-    <string name="account_setup_options_mail_check_frequency_15min">Every 15 minutes</string>
-    <!-- In Account setup options & Account Settings screens, email check frequency option -->
-    <string name="account_setup_options_mail_check_frequency_30min">Every 30 minutes</string>
-    <!-- In Account setup options & Account Settings screens, email check frequency option -->
-    <string name="account_setup_options_mail_check_frequency_1hour">Every hour</string>
-    <!-- In Account setup options & Account Settings screens, check box for new-mail notification -->
-    <string name="account_setup_options_notify_label">Notify me when email arrives</string>
-    <!-- In Account setup options screen, optional check box to also sync contacts -->
-    <string name="account_setup_options_sync_contacts_label">Sync contacts from this account</string>
-    <!-- In Account setup options screen, optional check box to also sync contacts -->
-    <string name="account_setup_options_sync_calendar_label">Sync calendar from this account</string>
-    <!-- In Account setup options screen, check box to sync email -->
-    <string name="account_setup_options_sync_email_label">Sync email from this account</string>
-    <!-- In Account setup options screen, check box to auto-download attachments  [CHAR LIMIT=none] -->
-    <string name="account_setup_options_background_attachments_label">
-        Automatically download attachments when connected to Wi-Fi</string>
-    <!-- Dialog title when "setup" could not finish -->
-    <string name="account_setup_failed_dlg_title">Couldn\'t finish</string>
-    <!-- In Account setup options screen, label for email lookback selector -->
-    <string name="account_setup_options_mail_window_label">Sync emails from</string>
-    <!-- In account setup options & account settings screens (exchange), sync window length; this
-        implies loading a 'reasonable' number of messages [CHAR LIMIT=25] -->
-    <string name="account_setup_options_mail_window_auto">Automatic</string>
-    <!-- A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  -->
-    <string name="account_setup_options_mail_window_1day">Last day</string>
-    <!-- A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  -->
-    <string name="account_setup_options_mail_window_3days">Last three days</string>
-    <!-- A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  -->
-    <string name="account_setup_options_mail_window_1week">Last week</string>
-    <!-- A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  -->
-    <string name="account_setup_options_mail_window_2weeks">Last two weeks</string>
-    <!-- A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  -->
-    <string name="account_setup_options_mail_window_1month">Last month</string>
-    <!-- A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  -->
-    <string name="account_setup_options_mail_window_all">All</string>
-    <!-- Per-mailbox sync window setting.  This means "use the account's sync window setting" [CHAR LIMIT=40] -->
-    <string name="account_setup_options_mail_window_default">Use account default</string>
-
-    <!-- "Setup could not finish" dialog text; e.g., Username or password incorrect -->
-    <string name="account_setup_failed_dlg_auth_message">Username or password is incorrect.</string>
-
-    <!-- Account setup autodiscover auth failure dialog title. This is shown when autodiscover hits
-        an "access denied" server error, which could imply incorrect username/password or that no
-        autodiscover service has been configured for the domain [CHAR LIMIT=40] -->
-    <string name="account_setup_autodiscover_dlg_authfail_title">Problem with account setup</string>
-    <!-- Account setup autodiscover auth failure dialog message. This is shown when autodiscover hits
-        an "access denied" server error, which could imply incorrect username/password or that no
-        autodiscover service has been configured for the domain [CHAR LIMIT=NONE] -->
-    <string name="account_setup_autodiscover_dlg_authfail_message">Confirm username, password, and account settings are correct.</string>
-
-    <!-- An error message presented to the user when the server's identity
-         cannot be established or trusted [CHAR LIMIT=NONE] -->
-    <string name="account_setup_failed_dlg_certificate_message"
-        >Can\'t safely connect to server.</string>
-    <!-- An error message presented to the user when the server's identity
-         cannot be established or trusted [CHAR LIMIT=NONE] -->
-    <string name="account_setup_failed_dlg_certificate_message_fmt"
-        >Can\'t safely connect to server.\n(<xliff:g id="error">%s</xliff:g>)</string>
-    <!-- An error message presented to the user when the server requires a
-         client certificate to connect [CHAR LIMIT=NONE] -->
-    <string name="account_setup_failed_certificate_required"
-        >A client certificate is required. Do you want to connect to the server with a client certificate?</string>
-    <!-- An error message presented to the user when the certificate they
-         specified for connecting to a server is inaccessible [CHAR LIMIT=NONE] -->
-    <string name="account_setup_failed_certificate_inaccessible"
-        >The certificate is invalid or inaccessible.</string>
-
-    <!-- Dialog text for ambiguous setup failure; server error/bad credentials [CHAR LIMIT=none] -->
-    <string name="account_setup_failed_check_credentials_message">
-         The server responded with an error. Check your username and password, then try again.</string>
-
-    <!-- "Setup could not finish" dialog text; e.g., Cannot connect to server -->
-    <string name="account_setup_failed_dlg_server_message">Can\'t connect to server.</string>
-    <!-- "Setup could not finish" dialog text; e.g., Cannot connect to server\n(Connection timed out) -->
-    <string name="account_setup_failed_dlg_server_message_fmt">Can\'t connect to server.\n(<xliff:g id="error">%s</xliff:g>)</string>
-
-    <!-- Additional diagnostic text when TLS was required but the server doesn't support it -->
-    <string name="account_setup_failed_tls_required">TLS required but not supported by server.</string>
-    <!-- Additional diagnostic text when server does not support any of our authentication methods -->
-    <string name="account_setup_failed_auth_required">Authentication methods aren\'t supported by server.</string>
-    <!-- Additional diagnostic text when server connection failed due to security error -->
-    <string name="account_setup_failed_security">Couldn\'t open connection to server due to security error.</string>
-    <!-- Additional diagnostic text when server connection failed due to io error (connection) -->
-    <string name="account_setup_failed_ioerror">Couldn\'t open connection to server.</string>
-    <!-- Additional diagnostic text when server connection failed due to our inability to support a
-         required EAS protocol version [CHAR LIMIT=none] -->
-    <string name="account_setup_failed_protocol_unsupported">
-         You typed an incorrect server address or the server requires a protocol version that
-         Email doesn\'t support.</string>
-    <!-- Additional diagnostic text when server access was denied; the user should contact the
-         administrator of the server for more information [CHAR LIMIT=none] -->
-    <string name="account_setup_failed_access_denied">
-         You don\'t have permission to sync with this server. Contact your server\'s
-         administrator for more information.</string>
-
-    <!-- Dialog title when validation requires security provisioning (e.g. support
-         for device lock PIN, or remote wipe.) and we ask the user permission before continuing -->
-    <string name="account_setup_security_required_title">Remote security administration</string>
-    <!-- Additional diagnostic text when validation requires security provisioning (e.g. support
-         for device lock PIN, or remote wipe.) and we ask the user permission before continuing.
-         [CHAR LIMIT=none] -->
-    <string name="account_setup_security_policies_required_fmt">
-         The server <xliff:g id="server">%s</xliff:g> requires that you allow it to remotely control
-         some security features of your Android device. Do you want to finish setting up this
-         account?</string>
-    <!-- Additional diagnostic text when validation failed due to required provisioning not
-         being supported [CHAR LIMIT=none] -->
-    <string name="account_setup_failed_security_policies_unsupported">
-         This server requires security features that your Android device doesn\'t support,
-          including: <xliff:g id="error">%s</xliff:g></string>
-    <!-- Warning given to users when they request disabling device administration (i.e. that their
-         administered accounts will be deleted) [CHAR LIMIT=none] -->
-    <string name="disable_admin_warning">WARNING: Deactivating the Email app\'s authority
-         to administer your device will delete all email accounts that require it, along with their
-         email, contacts, calendar events, and other data.</string>
-
-    <!-- Dialog shown when the account requires some amount of device security provisioning,
-         just before jumping into system settings such as Device Policy grant, PIN/password,
-         or encryption setup.  [CHAR_LIMIT=40] -->
-    <string name="account_security_dialog_title">Security update</string>
-    <!-- Additional diagnostic text when the account requires some amount of device security
-         provisioning, just before jumping into system settings such as Device Policy grant,
-         PIN/password, or encryption setup.  [CHAR LIMIT=none] -->
-    <string name="account_security_dialog_content_fmt">
-         <xliff:g id="account">%s</xliff:g> requires that you update your security
-         settings.</string>
-
-    <!-- Notification ticker when device security required (note: unused in Holo XL) -->
-    <string name="security_unsupported_ticker_fmt">
-            Account \"<xliff:g id="account">%s</xliff:g>\" can\'t be synced due to security
-    requirements.</string>
-    <!-- Notification ticker when device security required (note: unused in Holo XL) -->
-    <string name="security_needed_ticker_fmt">
-            Account \"<xliff:g id="account">%s</xliff:g>\" requires security settings update.
-    </string>
-    <!-- Notification ticker when device security required (note: unused in Holo XL) -->
-    <string name="security_changed_ticker_fmt">
-            Account \"<xliff:g id="account">%s</xliff:g>\" changed its security settings; no user
-            action is required.
-    </string>
-    <!-- Notification content title when device security required [CHAR_LIMIT=30] -->
-    <string name="security_notification_content_update_title">Security update required</string>
-    <!-- Notification content title when device security policies have changed [CHAR_LIMIT=36] -->
-    <string name="security_notification_content_change_title">Security policies have
-         changed</string>
-    <!-- Notification content title when device security policies cannot be met [CHAR_LIMIT=30] -->
-    <string name="security_notification_content_unsupported_title">Security policies can\'t be
-         met</string>
-    <!-- Title of the activity that dispatches changes to device security.  Not normally seen. -->
-    <string name="account_security_title">Device security</string>
-    <!-- Additional diagnostic text when the email app asserts control of the phone.
-        [CHAR LIMIT=none] -->
-    <string name="account_security_policy_explanation_fmt">
-         The server <xliff:g id="server">%s</xliff:g> requires that you allow it to remotely control
-         some security features of your Android device.</string>
-
-    <!-- "Setup could not finish" dialog action button -->
-    <string name="account_setup_failed_dlg_edit_details_action">Edit details</string>
-
-    <!-- Notification ticker when device password is getting ready to expire [CHAR_LIMIT=80] -->
-    <string name="password_expire_warning_ticker_fmt">
-            \"<xliff:g id="account">%s</xliff:g>\" requires that you change your lock screen
-            PIN or password.</string>
-    <!-- Notification content title when device password is getting ready to expire
-            [CHAR_LIMIT=30] -->
-    <string name="password_expire_warning_content_title">Lock screen password expiring</string>
-
-    <!-- Notification ticker when device password has expired [CHAR_LIMIT=80] -->
-    <string name="password_expired_ticker">Your lock screen PIN or password has expired.</string>
-    <!-- Notification content title when device password has expired [CHAR_LIMIT=28] -->
-    <string name="password_expired_content_title">Lock screen password expired</string>
-
-    <!-- Dialog title if device pin/password is going to expire soon. [CHAR_LIMIT=40] -->
-    <string name="password_expire_warning_dialog_title">Lock screen password expiring</string>
-    <!-- Dialog content device pin/password is going to expire soon. [CHAR_LIMIT=none] -->
-    <string name="password_expire_warning_dialog_content_fmt">
-         You need to change your lock screen PIN or password soon, or the data for
-         <xliff:g id="account">%s</xliff:g> will be erased. Do you want to change it now?</string>
-
-    <!-- Dialog title if device pin/password has already expired. [CHAR_LIMIT=40] -->
-    <string name="password_expired_dialog_title">Lock screen password expired</string>
-    <!-- Dialog content device pin/password has already expired. [CHAR_LIMIT=none] -->
-    <string name="password_expired_dialog_content_fmt">
-         The data for <xliff:g id="account">%s</xliff:g> is being erased from your device.
-         You can restore it by changing your lock screen PIN or password. Do you want to change it now?</string>
-
-    <!-- On AccountSettingsXL, dialog text if you try to exit in/out/eas fragment (server settings)
-         without checking/saving [CHAR LIMIT=none]-->
-    <string name="account_settings_exit_server_settings">Discard unsaved changes?</string>
-
-    <!-- On Settings screen, setting option name -->
-    <!-- Title of account preference for downloading attachments in background [CHAR LIMIT=32] -->
-    <string name="account_settings_background_attachments_label">
-        Download attachments</string>
-    <!-- Summary of account preference for downloading attachments in background [CHAR LIMIT=64] -->
-    <string name="account_settings_background_attachments_summary">
-        Auto-download attachments to recent messages via Wi-Fi</string>
-    <string name="account_settings_notify_label">Email notifications</string>
-    <!-- On Settings screen, summary line when called via AccountManager for Exchange accounts
-        [CHAR LIMIT=50] -->
-    <string name="account_settings_summary">Sync frequency, notifications, etc.</string>
-    <!-- On Settings screen, setting summary text -->
-    <string name="account_settings_notify_summary">Send notification when email arrives</string>
-    <!-- On Settings screen, setting option name and title of dialog box that opens -->
-    <string name="account_settings_mail_check_frequency_label">Sync frequency</string>
-    <!-- On Settings screen, setting option name -->
-    <string name="account_settings_incoming_label">Incoming settings</string>
-    <!-- On Settings screen, setting option summary [CHAR LIMIT=64] -->
-    <string name="account_settings_incoming_summary">
-        Username, password, and other incoming server settings</string>
-    <!-- On Settings screen, setting option name -->
-    <string name="account_settings_outgoing_label">Outgoing settings</string>
-    <!-- On Settings screen, setting option summary [CHAR LIMIT=64] -->
-    <string name="account_settings_outgoing_summary">
-        Username, password, and other outgoing server settings</string>
-    <!-- On Settings screen, setting option name -->
-    <string name="account_settings_enforced_label">Policies enforced</string>
-    <!-- On Settings screen, setting option summary [CHAR LIMIT=64] -->
-    <string name="account_settings_enforced_summary">None</string>
-    <!-- On Settings screen, setting option name -->
-    <string name="account_settings_unsupported_label">Unsupported policies</string>
-    <!-- On Settings screen, setting option summary [CHAR LIMIT=64] -->
-    <string name="account_settings_unsupported_summary">None</string>
-    <!-- On Settings screen, label for button that attempts to sync the account -->
-    <string name="account_settings_retry_label">Attempt sync</string>
-    <!-- On Settings screen, summmary for button that attempts to sync an account [CHAR LIMIT=64] -->
-    <string name="account_settings_retry_summary">Touch here to sync this account</string>
-    <!-- On Settings screen, setting option name -->
-    <string name="account_settings_description_label">Account name</string>
-    <!-- On Settings screen, setting option name -->
-    <string name="account_settings_name_label">Your name</string>
-    <!-- On Settings screen, setting option name. Allows user to modify saved quick responses
-        for insertion in message body. [CHAR_LIMIT=24]-->
-    <string name="account_settings_edit_quick_responses_label">Quick responses</string>
-    <!-- On Settings screen, setting option summary [CHAR LIMIT=64] -->
-    <string name="account_settings_edit_quick_responses_summary">
-        Edit text that you frequently insert when composing email</string>
-    <!-- On Settings screen, section heading -->
-    <string name="account_settings_notifications">Notification settings</string>
-    <!-- On Settings screen, section heading for data usage [CHAR LIMIT=70] -->
-    <string name="account_settings_data_usage">Data usage</string>
-    <!-- On Settings screen, section heading -->
-    <string name="account_settings_policies">Security policies</string>
-
-    <string name="system_folders_title">System folders</string>
-    <string name="system_folders_trash_title">Trash folder</string>
-    <string name="system_folders_trash_summary">Select your server\'s trash folder</string>
-    <string name="system_folders_trash_dlg">Select your server\'s trash folder</string>
-    <string name="system_folders_sent_title">Sent items folder</string>
-    <string name="system_folders_sent_summary">Select your server\'s sent items folder</string>
-    <string name="system_folders_sent_dlg">Select your server\'s sent items folder</string>
-
-    <!-- On settings screen, dialog heading informing user to create or edit a quick response -->
-    <string name="edit_quick_response_dialog">Quick response</string>
-    <!-- On settings screen, edit quick response dialog's "save" button -->
-    <string name="save_action">Save</string>
-
-    <!-- On settings screen, sync contacts check box label [CHAR LIMIT=20]-->
-    <string name="account_settings_sync_contacts_enable">Sync contacts</string>
-    <!-- On settings screen, sync contacts summary text [CHAR LIMIT=35] -->
-    <string name="account_settings_sync_contacts_summary">Sync contacts for this account</string>
-    <!-- On settings screen, sync calendar check box label [CHAR LIMIT=20]-->
-        <string name="account_settings_sync_calendar_enable">Sync calendar</string>
-    <!-- On settings screen, sync calendar summary text [CHAR LIMIT=50] -->
-    <string name="account_settings_sync_calendar_summary">Sync calendar event for this account</string>
-    <!-- On settings screen, sync email check box label [CHAR LIMIT=20]-->
-    <string name="account_settings_sync_email_enable">Sync email</string>
-    <!-- On settings screen, sync email summary text [CHAR LIMIT=35] -->
-    <string name="account_settings_sync_email_summary">Sync email for this account</string>
-
-    <!-- On Settings screen, vibrate pop-up menu label -->
-    <string name="label_notification_vibrate_title">Vibrate</string>
-
-    <!-- On Settings screen, setting option name -->
-    <string name="account_settings_ringtone">Choose ringtone</string>
-    <!-- On Settings screen, section heading -->
-    <string name="account_settings_servers">Server settings</string>
-
-    <!-- Mailbox settings activity title [CHAR LIMIT=none] -->
-    <string name="mailbox_settings_activity_title">Sync options</string>
-    <!-- Mailbox settings activity title, with the target folder name [CHAR LIMIT=none] -->
-    <string name="mailbox_settings_activity_title_with_mailbox">Sync options (<xliff:g id="mailboxx_name" example="Family">%s</xliff:g>)</string>
-    <!-- On mailbox settings screen: Whether to sync this mailbox when the account syncs. -->
-    <string name="mailbox_settings_sync_enabled_label">Sync this folder</string>
-    <!-- On mailbox settings screen: Explanatory text for what it means to "sync this folder". -->
-    <string name="mailbox_settings_sync_enabled_summary">Messages will download when connected</string>
-    <!-- On mailbox settings screen: Mailbox sync window (the number of days to synchronize email for) setting label [CHAR LIMIT=none] -->
-    <string name="mailbox_settings_mailbox_sync_window_label">Days of mail to sync</string>
-
-    <!-- Message that appears when adding a T-Online account -->
-    <string name="provider_note_t_online">Before setting up this email account, visit the T-Online website and create a password for POP3 email access.</string>
-
-    <!-- Short name of Microsoft Exchange account type; used by AccountManager -->
-    <string name="exchange_eas_name" translatable="false">Exchange</string>
-    <!-- Long name of Microsoft Exchange account type; used by AccountManager -->
-    <string name="exchange_name_alternate">Microsoft Exchange ActiveSync</string>
-
-    <!-- Message that appears if the AccountManager cannot create the system Account -->
-    <string name="system_account_create_failed">Couldn\'t create the account. Try again.</string>
-
-    <!-- Strings that support the DeviceAdmin / DevicePolicyManager API -->
-    <!-- Name of the DeviceAdmin (seen in settings & in user confirmation screen) -->
-    <string name="device_admin_label">Email</string>
-    <!-- Long-form description of the DeviceAdmin (2nd line in settings & in user conf. screen) -->
-    <string name="device_admin_description">Enables server-specified security policies</string>
-
-    <!-- A policy disallowing the user of the device's camera [CHAR LIMIT=50] -->
-    <string name="policy_dont_allow_camera">Disallow use of the device\'s camera</string>
-    <!-- A policy requiring a device lock screen password [CHAR LIMIT=50] -->
-    <string name="policy_require_password">Require device password</string>
-    <!-- A policy disallowing the reuse of recent passwords [CHAR LIMIT=50] -->
-    <string name="policy_password_history">Restrict the reuse of recent passwords</string>
-    <!-- A policy that forces a password to expire after a set period of time [CHAR LIMIT=50] -->
-    <string name="policy_password_expiration">Require passwords to expire</string>
-    <!-- A policy requiring a maximum amount of time the device can sit idle before the lock screen
-        is activated [CHAR LIMIT=50] -->
-    <string name="policy_screen_timeout">Require an idle device to lock its screen</string>
-    <!-- A policy limiting the number of old calendar events synced [CHAR LIMIT=50] -->
-    <string name="policy_calendar_age">Limit the number of calendar events synced</string>
-    <!-- A policy limiting the number of emails synced [CHAR LIMIT=50] -->
-    <string name="policy_email_age">Limit the number of emails synced</string>
-
-    <!-- The four strings below represent "quick responses" which the user can insert into a
-        message being composed with just a couple of taps.  These four responses MUST be defined,
-        but need not include a string (i.e. they are optional).  Further, the responses can be
-        customized as necessary by the translator, in case one or more of these is inappropriate in
-        a particular locale or if there are better options available. -->
-    <!-- A "quick response", i.e. a quick reply to a received mail [CHAR LIMIT=NONE] -->
-    <string name="quick_1">Thanks!</string>
-    <!-- A "quick response", i.e. a quick reply to a received mail [CHAR LIMIT=NONE] -->
-    <string name="quick_2">Sounds good to me!</string>
-    <!-- A "quick response", i.e. a quick reply to a received mail [CHAR LIMIT=NONE] -->
-    <string name="quick_3">I\'ll read this later and get back to you.</string>
-    <!-- A "quick response", i.e. a quick reply to a received mail [CHAR LIMIT=NONE] -->
-    <string name="quick_4">Let\'s set up a meeting to discuss this.</string>
-
-    <!-- This is shown when a user responds to a meeting invitation [CHAR LIMIT=none]-->
-    <string name="confirm_response">Sending response&#8230;</string>
-
-    <!-- Used by AccountManager -->
-    <!-- Account type name as used by AccountManager UI (IMAP is not translatable) [CHAR LIMIT=30] -->
-    <string name="imap_name">Personal (IMAP)</string>
-    <!-- Account type name as used by AccountManager UI (POP3 is not translatable) [CHAR LIMIT=30] -->
-    <string name="pop3_name">Personal (POP3)</string>
-
-    <!-- Displayed when the user must pick his server's trash folder from a list [CHAR LIMIT 30]-->
-    <string name="trash_folder_selection_title">Select server trash folder for <xliff:g id="account">%s</xliff:g></string>
-    <!-- Displayed when the user must pick his server's sent items folder from a list [CHAR LIMIT 30]-->
-    <string name="sent_folder_selection_title">Select server sent items folder for <xliff:g id="account">%s</xliff:g></string>
-    <string name="account_waiting_for_folders_msg">Loading folder list&#8230;</string>
-
-    <!-- Feedback uri to be used when feedback is enabled -->
-    <string name="email_feedback_uri" translatable="false"></string>
-
-    <string name="account_manager_type_exchange" translatable="false">com.android.exchange</string>
-    <!-- M: Grant POP3 a different type with IMAP, then POP3 will be a separate category in system account list -->
-    <string name="account_manager_type_pop3" translatable="false">com.android.email.pop3</string>
-    <string name="account_manager_type_imap" translatable="false">com.android.email</string>
-    <string name="account_manager_type_legacy_imap" translatable="false">com.android.email</string>
-    <string name="intent_exchange_action" translatable="false">com.android.email.EXCHANGE_INTENT</string>
-    <string name="intent_exchange_cert_action" translatable="false">com.android.email.EXCHANGE_REQUEST_CERT</string>
-    <string name="intent_exchange_package" translatable="false">com.android.exchange</string>
-    <string name="intent_account_manager_entry" translatable="false">com.android.email.activity.setup.ACCOUNT_MANAGER_ENTRY</string>
-    <string name="intent_force_create_email_account" translatable="false">com.android.email.FORCE_CREATE_ACCOUNT</string>
-    <string name="intent_create_email_account" translatable="false">com.android.email.CREATE_NEW_ACCOUNT</string>
-    <string name="authority_email_provider" translatable="false">com.android.email.provider</string>
-    <string name="authority_conversation_provider" translatable="false">com.android.email.conversation.provider</string>
-    <string name="authority_account_cache_provider" translatable="false">com.android.email.accountcache</string>
-    <string name="protocol_legacy_imap" translatable="false">imap</string>
-    <string name="protocol_imap" translatable="false">imap</string>
-    <string name="protocol_pop3" translatable="false">pop3</string>
-    <string name="protocol_eas" translatable="false">eas</string>
-    <string name="application_mime_type" translatable="false">application/email-ls</string>
-
-    <!-- Content Provider Authority for Eml Attachments -->
-    <string name="eml_attachment_provider" translatable="false">com.android.email.provider.eml.attachment</string>
-
-    <!-- Provider name for widgets -->
-    <string name="widget_provider" translatable="false">com.android.email.provider.WidgetProvider</string>
-
-    <string name="print_job_name" translatable="false">Email - <xliff:g id="subject">%1$s</xliff:g></string>
-
-    <!-- This message indicates no quick responses exist to choose from -->
-    <string name="no_quick_responses">None available</string>
-
-    <!-- Activity name of the compose activity that should be reconciled -->
-    <string name="reconciliation_compose_activity_name" translatable="false">com.android.email.activity.ComposeActivityEmail</string>
-
-    <!-- Gmail name for redirecting during account setup -->
-    <string name="gmail_name">Gmail</string>
-
-    <!-- Name for preference entry which leads to the per-folder sync settings activity -->
-    <string name="folder_sync_settings_pref_title">Folder sync settings</string>
-	
-	<string name="account_settings_remove_account_label">Remove account</string>
-	<string name="preferences_signature_summary_set">Sent from my Alcatel A3A PLUS</string>
-</resources>
Index: vendor/branch/5058A_Claro/packages/apps/Email/res/xml/providers.xml
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Email/res/xml/providers.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Email/res/xml/providers.xml	(revision 3018)
@@ -1,512 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2008 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-    <!--
-        This file contains configuration data for commonly-used email providers.
-
-        ==== CONTENT GUIDELINES ====
-
-        This file should only be used for email providers that are considered "universal"
-        and are appropriate for *all* android platform devices.  These entries must be accessible
-        from all networks.  It should be reasonable for any user to obtain an account on these
-        networks, and test accounts must be easily obtainable.  No entries should be added
-        that are device, product, or carrier-specific.
-
-        Entries that are device, product or carrier-specific should be added as overlays
-        in the appropriate providers_product.xml file.
-
-        ==== FORMAT OF ENTRIES ====
-
-        This file is used to specify providers that we know default settings for
-        so that the user can set up their account by simply entering their email
-        address and password.
-
-        When a user starts this process, the email address is parsed, the domain
-        broken out and used to search this file for a provider. If one is found the
-        provider's settings are used to attempt to connect to the account.
-
-        At this time, the id and label attributes are not used.  However, please include them
-        if you make edits to this file.  id must also be completely unique.  label will be shown
-        to the user when there are multiple options provided for a single domain (not currently
-        supported).
-
-        A provider contains the settings for setting up an email account
-        that ends with the given domain. Domains should be unique within
-        this file. Each provider should have at least one incoming section and
-        one outgoing section. If more than one is specified only the first
-        will be used.
-
-        Valid incoming uri schemes are:
-            imap        IMAP with no transport security.
-            imap+tls+   IMAP with required TLS transport security.
-                            If TLS is not available the connection fails.
-            imap+ssl+   IMAP with required SSL transport security.
-                            If SSL is not available the connection fails.
-
-            pop3        POP3 with no transport security.
-            pop3+tls+   POP3 with required TLS transport security.
-                            If TLS is not available the connection fails.
-            pop3+ssl+   POP3 with required SSL transport security.
-                            If SSL is not available the connection fails.
-
-        Valid outgoing uri schemes are:
-            smtp        SMTP with no transport security.
-            smtp+tls+   SMTP with required TLS transport security.
-                            If TLS is not available the connection fails.
-            smtp+ssl+   SMTP with required SSL transport security.
-                            If SSL is not available the connection fails.
-
-        To the above schemes you may also add "trustallcerts" to indicate that,
-        although link encryption is still required, "non-trusted" certificates may
-        will be excepted.  For example, "imap+ssl+trustallcerts" or
-        "smtp+tls+trustallcerts".  This should only used when necessary, as it
-        could allow a spoofed server to intercept password and mail.
-
-        The URIs must contain all of the information to make a connection,
-        including a port if the service uses a non-default port.  The default
-        ports are as follows:
-            imap        143     pop3        110     smtp        587
-            imap+tls+   143     pop3+tls+   110     smtp+tls+   587
-            imap+ssl+   993     pop3+ssl+   995     smtp+ssl+   465
-
-        ==== DOMAIN PATTERNS ====
-
-        Often times a hosting company will have multiple mail server addresses. Often
-        times used for load balancing or based upon geographical boundaries. In these
-        cases, it would be unwieldy to maintain a list of 2-dozen providers that all
-        point to essentially the same mail server. To alleviate this, domains may
-        contain pattern matching characters that can be used to match user entered
-        domains without knowing the exact domain.
-
-        An asterisk (*) is used to match that part of a domain name that is demarcated
-        by a period (dot); no other characters may appear on either side of an asterisk.
-        Therefore, foo.*.com and *.mail.com are valid, whereas a*.com and foo.c* are not.
-        An asterisk is also not greedy; it only matches a single part of a domain name;
-        therefore, foo.bar.bletch is NOT matched by foo.*; it does, however, match
-        foo.*.* or foo.bar.*.
-
-        The alternate is the wild card character - a '?'. The wild card character
-        matches any single character. This is very useful when the number of characters
-        is known (such as the country code in the domain).
-
-        ==== TEMPLATES ====
-
-        Both the username and uri attributes (for both incoming and outgoing elements)
-        are templates.
-
-        The username attribute is used to supply a template for the username
-        that will be presented to the server. This username is built from a
-        set of variables that are substituted with parts of the user specified
-        email address.
-
-        Valid substitution values for all templates are:
-            $email - the email address the user entered
-            $user - the string before the @ sign in the email address the user entered
-            $domain - the string after the @ sign in the email address the user entered
-
-        The username attribute MUST be specified for the incoming element, so the POP3 or IMAP
-        server can identify the mailbox to be opened.
-
-        The username attribute MAY be the empty string for the outgoing element, but only if the
-        SMTP server supports anonymous transmission (most don't).
-    -->
-
-<providers>
-
-    <!-- Gmail variants -->
-    <provider id="gmail" label="Gmail" domain="gmail.com">
-        <incoming uri="imap+ssl+://imap.gmail.com:993" username="$email" />
-        <outgoing uri="smtp+ssl+://smtp.gmail.com:465" username="$email" />
-    </provider>
-    <provider id="googlemail" label="Google Mail" domain="googlemail.com">
-        <incoming uri="imap+ssl+://imap.googlemail.com" username="$email" />
-        <outgoing uri="smtp+ssl+://smtp.googlemail.com" username="$email" />
-    </provider>
-    <provider id="google" label="Google" domain="google.com">
-        <incoming uri="imap+ssl+://imap.gmail.com" username="$email" />
-        <outgoing uri="smtp+ssl+://smtp.gmail.com" username="$email" />
-    </provider>
-    <provider id="android" label="Android" domain="android.com">
-        <incoming uri="imap+ssl+://imap.gmail.com" username="$email" />
-        <outgoing uri="smtp+ssl+://smtp.gmail.com" username="$email" />
-    </provider>
-    <provider id="chromium" label="Chromium" domain="chromium.org" oauth="google">
-        <incoming uri="imap+ssl+://imap.gmail.com" username="$email" />
-        <outgoing uri="smtp+ssl+://smtp.gmail.com" username="$email" />
-    </provider>
-
-    <!-- M: CHINA -->
-    <provider id="163" label="163Mail" domain="163.com">
-        <incoming uri="imap+ssl+trustallcerts://imap.163.com" username="$email" />
-        <outgoing uri="smtp+ssl+trustallcerts://smtp.163.com" username="$email" />
-    </provider>
-
-    <provider id="qq" label="qqMail" domain="qq.com">
-        <incoming uri="imap+ssl+trustallcerts://imap.qq.com" username="$email" />
-        <outgoing uri="smtp+ssl+trustallcerts://smtp.qq.com" username="$email" />
-    </provider>
-
-    <provider id="126" label="126" domain="126.com">
-        <incoming uri="imap+ssl+trustallcerts://imap.126.com" username="$email" />
-        <outgoing uri="smtp+ssl+trustallcerts://smtp.126.com" username="$email" />
-    </provider>
-
-    <provider id="139" label="139" domain="139.com">
-        <incoming uri="pop3://pop.139.com" username="$email"/>
-        <outgoing uri="smtp://smtp.139.com" username="$email"/>
-    </provider>
-
-    <provider id="sina-com-cn" label="Sina.com.cn" domain="sina.com.cn">
-        <incoming uri="imap://imap.sina.com.cn" username="$email" />
-        <outgoing uri="smtp://smtp.sina.com.cn" username="$email" />
-    </provider>
-
-    <provider id="sina-cn" label="Sina.cn" domain="sina.cn">
-        <incoming uri="imap://imap.sina.cn" username="$email" />
-        <outgoing uri="smtp://smtp.sina.cn" username="$email" />
-    </provider>
-
-    <provider id="sina-com" label="Sina.com" domain="sina.com">
-        <incoming uri="imap://imap.sina.com.cn" username="$email" />
-        <outgoing uri="smtp://smtp.sina.com.cn" username="$email" />
-    </provider>
-
-    <provider id="sohu" label="Sohu" domain="sohu.com">
-        <incoming uri="pop3://pop3.sohu.com" username="$email" />
-        <outgoing uri="smtp://smtp.sohu.com" username="$email" />
-    </provider>
-
-    <!-- USA -->
-
-    <provider id="eon" label="EON" domain="nextobject.com">
-        <incoming uri="imap://imap.everyone.net" username="$email" />
-        <outgoing uri="smtp://smtp.everyone.net" username="$email" />
-    </provider>
-
-    <!-- AOL and variants -->
-    <!-- Note, AOL appears to support SSL on both sides, as well -->
-    <provider id="aim" label="AIM" domain="aim.com">
-        <incoming uri="imap+ssl+://imap.aim.com" label="IMAP" username="$email" />
-        <outgoing uri="smtp+ssl+://smtp.aim.com" username="$email" />
-    </provider>
-    <!-- Note, AOL appears to support SSL on both sides, as well -->
-    <provider id="aol" label="AOL" domain="aol.com">
-        <incoming uri="imap+ssl+://imap.aol.com" label="IMAP" username="$email" />
-        <outgoing uri="smtp+ssl+://smtp.aol.com" username="$email" />
-    </provider>
-
-    <!-- MobileMe and variants -->
-    <provider id="dotmac" label=".Mac" domain="mac.com">
-        <incoming uri="imap+ssl+://mail.mac.com" username="$email" />
-        <outgoing uri="smtp+tls+://smtp.mac.com" username="$email" />
-    </provider>
-    <!-- Note: Mac Mail.app sets IMAP to mail.mac.com, but it's the same server -->
-    <provider id="mobileme" label="MobileMe" domain="me.com">
-        <incoming uri="imap+ssl+://mail.me.com" username="$email" />
-        <outgoing uri="smtp+tls+://smtp.me.com" username="$email" />
-    </provider>
-    <provider id="icloud" label="iCloud" domain="icloud.com">
-        <incoming uri="imap+ssl+://imap.mail.me.com" username="$email" />
-        <outgoing uri="smtp+tls+://smtp.mail.me.com" username="$email" />
-    </provider>
-
-    <!-- Hotmail and variants.  NOTE: These are handled by exchange if available, else POP3. -->
-    <!-- EXCHANGE-REMOVE-SECTION-START -->
-    <provider id="live1" label="Windows Live Hotmail Plus" domain="live.*">
-        <incoming uri="eas+ssl+://m.hotmail.com"  username="$email" />
-        <outgoing uri="eas+ssl+://m.hotmail.com" username="$email" />
-        <!-- M: not suitable for MTK solution. -->
-        <!-- <incoming-fallback uri="imap+ssl+://imap-mail.outlook.com" username="$email" />
-        <outgoing-fallback uri="smtp+tls+://smtp-mail.outlook.com" username="$email" /> -->
-    </provider>
-    <provider id="live2" label="Windows Live Hotmail Plus" domain="live.*.*">
-        <incoming uri="eas+ssl+://m.hotmail.com"  username="$email" />
-        <outgoing uri="eas+ssl+://m.hotmail.com" username="$email" />
-        <!-- M: not suitable for MTK solution. -->
-        <!-- <incoming-fallback uri="imap+ssl+://imap-mail.outlook.com" username="$email" />
-        <outgoing-fallback uri="smtp+tls+://smtp-mail.outlook.com" username="$email" /> -->
-    </provider>
-    <provider id="live3" label="Windows Live Hotmail Plus" domain="*.live.*">
-        <incoming uri="eas+ssl+://m.hotmail.com"  username="$email" />
-        <outgoing uri="eas+ssl+://m.hotmail.com" username="$email" />
-        <!-- M: not suitable for MTK solution. -->
-        <!-- <incoming-fallback uri="imap+ssl+://imap-mail.outlook.com" username="$email" />
-        <outgoing-fallback uri="smtp+tls+://smtp-mail.outlook.com" username="$email" /> -->
-    </provider>
-    <provider id="hotmail1" label="Windows Live Hotmail Plus" domain="hotmail.*">
-        <incoming uri="eas+ssl+://m.hotmail.com"  username="$email" />
-        <outgoing uri="eas+ssl+://m.hotmail.com" username="$email" />
-        <!-- M: not suitable for MTK solution. -->
-       <!--  <incoming-fallback uri="imap+ssl+://imap-mail.outlook.com" username="$email" />
-        <outgoing-fallback uri="smtp+tls+://smtp-mail.outlook.com" username="$email" /> -->
-    </provider>
-    <provider id="hotmail2" label="Windows Live Hotmail Plus" domain="hotmail.*.*">
-        <incoming uri="eas+ssl+://m.hotmail.com"  username="$email" />
-        <outgoing uri="eas+ssl+://m.hotmail.com" username="$email" />
-        <!-- M: not suitable for MTK solution. -->
-        <!-- <incoming-fallback uri="imap+ssl+://imap-mail.outlook.com" username="$email" />
-        <outgoing-fallback uri="smtp+tls+://smtp-mail.outlook.com" username="$email" /> -->
-    </provider>
-    <provider id="hotmail3" label="Windows Live Hotmail Plus" domain="livemail.*">
-        <incoming uri="eas+ssl+://m.hotmail.com"  username="$email" />
-        <outgoing uri="eas+ssl+://m.hotmail.com" username="$email" />
-        <!-- M: not suitable for MTK solution. -->
-       <!--  <incoming-fallback uri="imap+ssl+://imap-mail.outlook.com" username="$email" />
-        <outgoing-fallback uri="smtp+tls+://smtp-mail.outlook.com" username="$email" /> -->
-    </provider>
-    <provider id="hotmail4" label="Windows Live Hotmail Plus" domain="livemail.*.*">
-        <incoming uri="eas+ssl+://m.hotmail.com"  username="$email" />
-        <outgoing uri="eas+ssl+://m.hotmail.com" username="$email" />
-        <!-- M: not suitable for MTK solution. -->
-        <!-- <incoming-fallback uri="imap+ssl+://imap-mail.outlook.com" username="$email" />
-        <outgoing-fallback uri="smtp+tls+://smtp-mail.outlook.com" username="$email" /> -->
-    </provider>
-    <provider id="msn" label="Windows Live Hotmail Plus" domain="msn.*">
-        <incoming uri="eas+ssl+://m.hotmail.com"  username="$email" />
-        <outgoing uri="eas+ssl+://m.hotmail.com" username="$email" />
-        <!-- M: not suitable for MTK solution. -->
-       <!--  <incoming-fallback uri="imap+ssl+://imap-mail.outlook.com" username="$email" />
-        <outgoing-fallback uri="smtp+tls+://smtp-mail.outlook.com" username="$email" /> -->
-    </provider>
-    <provider id="msnhotmail" label="Windows Live Hotmail Plus" domain="msnhotmail.com">
-        <incoming uri="eas+ssl+://m.hotmail.com"  username="$email" />
-        <outgoing uri="eas+ssl+://m.hotmail.com" username="$email" />
-        <!-- M: not suitable for MTK solution. -->
-        <!-- <incoming-fallback uri="imap+ssl+://imap-mail.outlook.com" username="$email" />
-        <outgoing-fallback uri="smtp+tls+://smtp-mail.outlook.com" username="$email" /> -->
-    </provider>
-        <provider id="outlook" label="Outlook" domain="outlook.*">
-        <incoming uri="eas+ssl+://m.hotmail.com"  username="$email" />
-        <outgoing uri="eas+ssl+://m.hotmail.com" username="$email" />
-    </provider>
-    <!-- EXCHANGE-REMOVE-SECTION-END -->
-    <provider id="live" label="Windows Live Hotmail Plus" domain="live.com"
-            note="@string/provider_note_live">
-        <incoming uri="pop3+ssl+://pop3.live.com"  username="$email" />
-        <outgoing uri="smtp+tls+://smtp.live.com" username="$email" />
-    </provider>
-    <provider id="hotmail" label="Hotmail" domain="hotmail.com"
-            note="@string/provider_note_live">
-        <incoming uri="imap+ssl+://imap-mail.outlook.com:993"  username="$email" />
-        <outgoing uri="smtp+tls+://smtp-mail.outlook.com:587" username="$email" />
-    </provider>
-    <provider id="msn" label="Windows Live Hotmail Plus" domain="msn.com"
-            note="@string/provider_note_live">
-        <incoming uri="pop3+ssl+://pop3.live.com"  username="$email" />
-        <outgoing uri="smtp+tls+://smtp.live.com" username="$email" />
-    </provider>
-
-    <!-- Yahoo! Mail variants -->
-    <provider id="yahoo" label="Yahoo!" domain="yahoo.com">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com:993" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com:465" username="$email" />
-    </provider>
-    <provider id="yahoo1" label="Yahoo!" domain="yahoo.*.*">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="rocketmail" label="Yahoo! RocketMail" domain="rocketmail.com">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="ymail" label="Yahoo!" domain="ymail.com">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="bellsouth" label="AT&amp;T Bell South" domain="bellsouth.net">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="att" label="AT&amp;T" domain="att.net">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="pacbell" label="AT&amp;T Pacific Bell" domain="pacbell.net">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="sbcglobal" label="AT&amp;T SBC Global" domain="sbcglobal.net">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="swbell" label="AT&amp;T Southwest Bell" domain="swbell.net">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="btinternet" label="BT Internet" domain="btinternet.com">
-        <incoming uri="imap+ssl+://mail.btinternet.com" username="$email" />
-        <outgoing uri="smtp+ssl+://mail.btinternet.com" username="$email" />
-    </provider>
-    <provider id="btopenworld" label="BT Open World" domain="btopenworld.com">
-        <incoming uri="imap+ssl+://mail.btinternet.com" username="$email" />
-        <outgoing uri="smtp+ssl+://mail.btinternet.com" username="$email" />
-    </provider>
-    <provider id="talk21" label="BT Talk 21" domain="talk21.com">
-        <incoming uri="imap+ssl+://mail.btinternet.com" username="$email" />
-        <outgoing uri="smtp+ssl+://mail.btinternet.com" username="$email" />
-    </provider>
-    <provider id="rogers" label="Rogers" domain="rogers.com">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="rogers-nl" label="Rogers" domain="nl.rogers.com">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-
-    <!-- Roadrunner variants -->
-    <provider id="rr-roadrunner" label="RoadRunner" domain="roadrunner.com">
-        <incoming uri="pop3://pop-server.roadrunner.com" username="$email" />
-        <outgoing uri="smtp://mobile-smtp.roadrunner.com" username="$email" />
-    </provider>
-    <provider id="rr-global" label="RoadRunner" domain="*.rr.com">
-        <incoming uri="pop3://pop-server.$domain" username="$email" />
-        <outgoing uri="smtp://mobile-smtp.roadrunner.com" username="$email" />
-    </provider>
-
-    <!-- USA (other)-->
-    <provider id="comcast" label="Comcast" domain="comcast.net">
-        <incoming uri="pop3+ssl+://mail.comcast.net" username="$user" />
-        <outgoing uri="smtp+ssl+://smtp.comcast.net" username="$user" />
-    </provider>
-    <provider id="compuserve" label="CompuServe" domain="cs.com">
-        <incoming uri="imap://imap.cs.com" username="$user" />
-        <outgoing uri="smtp://smtp.cs.com" username="$user" />
-    </provider>
-    <provider id="cox" label="Cox" domain="cox.net">
-        <incoming uri="pop3+ssl+://pop.east.cox.net" username="$user" />
-        <outgoing uri="smtp+ssl+://smtp.east.cox.net" username="$user" />
-    </provider>
-    <provider id="earthlink" label="Earthlink" domain="earthlink.net">
-        <incoming uri="pop3://pop.earthlink.net" username="$email" />
-        <outgoing uri="smtp://smtpauth.earthlink.net:587" username="$email" />
-    </provider>
-    <!-- Tested with imap/ssl (no connection) and imap/tls (unsupported)-->
-    <!-- Tested with smtp/ssl (no connection) and smtp/tls (unsupported)-->
-    <provider id="juno" label="Juno" domain="juno.com">
-        <incoming uri="pop3://pop.juno.com" username="$user" />
-        <outgoing uri="smtp://smtp.juno.com" username="$user" />
-    </provider>
-    <provider id="netzero" label="NetZero" domain="netzero.com">
-        <incoming uri="pop3://pop.netzero.com" username="$user" />
-        <outgoing uri="smtp://smtp.netzero.com" username="$user" />
-    </provider>
-    <provider id="verizon" label="Verizon" domain="verizon.net">
-        <incoming uri="pop3://incoming.verizon.net" username="$user" />
-        <outgoing uri="smtp://outgoing.verizon.net" username="$user" />
-    </provider>
-
-    <!-- UK -->
-    <provider id="aol-uk" label="AOL" domain="aol.co.uk">
-        <incoming uri="imap+ssl+://imap.uk.aol.com" label="IMAP" username="$user" />
-        <outgoing uri="smtp+ssl+://smtp.uk.aol.com" username="$user" />
-    </provider>
-
-    <!-- France -->
-    <provider id="laposte" label="Laposte" domain="laposte.net">
-        <incoming uri="imap+ssl://imap.laposte.net" username="$email" />
-        <outgoing uri="smtp+ssl://smtp.laposte.net" username="$email" />
-    </provider>
-
-    <!-- Germany -->
-    <provider id="freenet" label="Freenet" domain="freenet.de">
-        <incoming uri="pop3://mx.freenet.de" username="$user" />
-        <outgoing uri="smtp+ssl://mx.freenet.de" username="$email" />
-    </provider>
-    <provider id="gmx" label="GMX" domain="gmx.*">
-        <incoming uri="pop3://pop.gmx.net" username="$email" />
-        <outgoing uri="smtp://mail.gmx.net" username="$email" />
-    </provider>
-    <provider id="T-Online" label="T-Online" domain="t-online.de"
-              note="@string/provider_note_t_online">
-        <incoming uri="pop3://popmail.t-online.de" username="$email" />
-        <outgoing uri="smtp://smtpmail.t-online.de" username="$email" />
-    </provider>
-    <provider id="web.de" label="Web.de" domain="web.de">
-        <incoming uri="pop3://pop3.web.de" username="$user" />
-        <outgoing uri="smtp://smtp.web.de" username="$user" />
-    </provider>
-
-    <!-- Poland -->
-    <provider id="onet" label="Onet.pl" domain="poczta.onet.pl">
-        <incoming uri="pop3://pop3.poczta.onet.pl" username="$email" />
-        <outgoing uri="smtp://smtp.poczta.onet.pl" username="$email" />
-    </provider>
-    <provider id="wirtualna" label="Wirtualna Polska" domain="wp.pl">
-        <incoming uri="imap+ssl+://imap.wp.pl" username="$user" />
-        <outgoing uri="smtp+ssl+://smtp.wp.pl" username="$user" />
-    </provider>
-    <provider id="interia" label="Interia" domain="interia.pl">
-        <incoming uri="pop3+ssl://poczta.interia.pl" username="$user" />
-        <outgoing uri="smtp+ssl://poczta.interia.pl" username="$user" />
-    </provider>
-    <provider id="o2" label="O2" domain="o2.pl">
-        <incoming uri="pop3+ssl://poczta.o2.pl" username="$user" />
-        <outgoing uri="smtp+ssl://poczta.o2.pl" username="$user" />
-    </provider>
-
-    <!-- Russia -->
-    <provider id="mail.ru" label="Mail.ru" domain="mail.ru">
-        <incoming uri="imap+tls+://imap.mail.ru" username="$email" />
-        <outgoing uri="smtp+ssl+://smtp.mail.ru" username="$email" />
-    </provider>
-
-    <!-- Korea -->
-    <provider id="daum" label="Daum Hanmail" domain="hanmail.net">
-        <incoming uri="imap+ssl+://imap.hanmail.net" username="$user" />
-        <outgoing uri="smtp+ssl+://smtp.hanmail.net" username="$user" />
-    </provider>
-    <provider id="naver" label="NAVER" domain="naver.com">
-        <incoming uri="imap+ssl+://imap.naver.com" username="$user" />
-        <outgoing uri="smtp+tls+://smtp.naver.com" username="$user" />
-    </provider>
-    <provider id="paran" label="Paran" domain="paran.com">
-        <incoming uri="imap+ssl+://imap.paran.com" username="$email" />
-        <outgoing uri="smtp+ssl+://smtp.paran.com" username="$email" />
-    </provider>
-
-    <!-- Yahoo! country-specific email domains -->
-    <provider id="yahoo-y7" label="Yahoo!7" domain="y7mail.com">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="kimo" label="Yahoo! Taiwan" domain="kimo.com">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <!-- Note: Yahoo! Japan's ne.jp and co.jp domains do not yet support open IMAP -->
-    <provider id="yahoo-jp-ybb" label="Yahoo! Japan" domain="ybb.ne.jp">
-        <incoming uri="pop3+ssl+://android.ybbpop.mail.yahoo.co.jp" username="$email" />
-        <outgoing uri="smtp+ssl+://android.ybbsmtp.mail.yahoo.co.jp" username="$email" />
-    </provider>
-    <!-- Note: Yahoo! Japan's co.jp domain requires $user rather than the usual $email -->
-    <provider id="yahoo-jp" label="Yahoo! Japan" domain="yahoo.co.jp">
-        <incoming uri="pop3+ssl+://android.pop.mail.yahoo.co.jp" username="$user" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.co.jp" username="$user" />
-    </provider>
-    <provider id="yahoo-com-XX" label="Country specific Yahoo!" domain="yahoo.com.??">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="yahoo-co-XX" label="Country specific Yahoo!" domain="yahoo.co.??">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-    <provider id="yahoo-XX" label="Country specific Yahoo!" domain="yahoo.??">
-        <incoming uri="imap+ssl+://android.imap.mail.yahoo.com" username="$email" />
-        <outgoing uri="smtp+ssl+://android.smtp.mail.yahoo.com" username="$email" />
-    </provider>
-</providers>
Index: vendor/branch/5058A_Claro/packages/apps/Email/res/values-es/strings.xml
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Email/res/values-es/strings.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Email/res/values-es/strings.xml	(revision 3018)
@@ -1,246 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--  Copyright (C) 2008 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
- -->
-
-<resources xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string name="permission_read_attachment_label" msgid="6641407731311699536">"Leer archivos adjuntos de correos electrónicos"</string>
-    <string name="permission_read_attachment_desc" msgid="6579059616090100181">"Permite que la aplicación consulte los archivos adjuntos de los correos electrónicos."</string>
-    <string name="permission_access_provider_label" msgid="977700184037298723">"Acceder a los datos del proveedor de correo electrónico"</string>
-    <string name="permission_access_provider_desc" msgid="5338433949655493713">"Permite que la aplicación acceda a la base de datos de tu correo electrónico, incluidos los mensajes recibidos, los mensajes enviados, los nombres de usuario y las contraseñas."</string>
-    <string name="app_name" msgid="2206468539066258195">"Correo"</string>
-    <string name="okay_action">"Aceptar"</string>
-    <string name="cancel_action">"Cancelar"</string>
-    <string name="create_action" msgid="6575946089819721958">"Crear nueva"</string>
-    <string name="quick_responses_empty_view" msgid="3394094315357455290">"No hay respuestas rápidas."</string>
-    <string name="account_settings_action" msgid="589969653965674604">"Ajustes de la cuenta"</string>
-    <string name="mailbox_name_display_inbox" msgid="5093068725739672126">"Recibidos"</string>
-    <string name="mailbox_name_display_outbox" msgid="8735725798805339414">"Por enviar"</string>
-    <string name="mailbox_name_display_drafts" msgid="3552043116466269581">"Borradores"</string>
-    <string name="mailbox_name_display_trash" msgid="7020792045007681852">"Papelera"</string>
-    <string name="mailbox_name_display_sent" msgid="6705058612006729985">"Enviados"</string>
-    <string name="mailbox_name_display_junk" msgid="1634126984313831675">"Correo basura"</string>
-    <string name="mailbox_name_display_starred" msgid="8076384721309828453">"Destacados"</string>
-    <string name="mailbox_name_display_unread" msgid="1453575937919310339">"No leído"</string>
-    <string name="debug_title" msgid="1337476992195531309">"Depurar"</string>
-    <string name="mailbox_list_account_selector_combined_view" msgid="4155918930481733669">"Vista combinada"</string>
-    <string name="message_compose_fwd_header_fmt" msgid="6193988236722150221">\n\n"-------- Original Message --------\nSubject: <xliff:g id="SUBJECT">%1$s</xliff:g>\nFrom: <xliff:g id="SENDER">%2$s</xliff:g>\nTo: <xliff:g id="TO">%3$s</xliff:g>\nCc: <xliff:g id="CC_0">%4$s</xliff:g>\n\n"</string>
-    <string name="message_compose_insert_quick_response_list_title" msgid="5836926808818821309">"Usar respuesta rápida"</string>
-    <string name="message_compose_insert_quick_response_menu_title" msgid="4393288554605333619">"Usar respuesta rápida"</string>
-    <string name="message_view_attachment_background_load" msgid="7571652141281187845">"Uno o varios de los archivos adjuntos del mensaje reenviado se descargarán antes de enviarse."</string>
-    <string name="message_decode_error" msgid="91396461771444300">"Se ha producido un error al decodificar el mensaje."</string>
-    <string name="forward_download_failed_ticker" msgid="2900585518884851062">"Error al enviar uno o varios archivos adjuntos"</string>
-    <string name="forward_download_failed_title" msgid="2043036709913723298">"Archivo adjunto no reenviado"</string>
-    <string name="login_failed_ticker" msgid="4620839194581484497">"Error al iniciar sesión en <xliff:g id="ACCOUNT_NAME">%s</xliff:g>"</string>
-    <string name="login_failed_title" msgid="1737884069957090004">"Error al iniciar sesión"</string>
-    <string name="account_setup_basics_title" msgid="5050895656741229172">"Ajustes de la cuenta"</string>
-    <string name="oauth_authentication_title" msgid="3771260531636603518">"Solicitando autorización"</string>
-    <string name="sign_in_title" msgid="5051852806423550830">"Iniciar sesión"</string>
-    <string name="oauth_error_description" msgid="8466102021844409849">"Error al autenticar"</string>
-    <string name="password_warning_label" msgid="1887439537224212124">"Dirección de correo electrónico o contraseña incorrectas"</string>
-    <string name="email_confirmation_label" msgid="64258748053106017">"Dirección de correo electrónico:"</string>
-    <string name="account_setup_basics_headline" msgid="8468280216822264643">"Cuenta de correo electrónico"</string>
-    <string name="accounts_welcome" msgid="7230367425520242593">"Puedes configurar tu cuenta en pocos pasos."</string>
-    <string name="account_setup_basics_email_label" msgid="8701406783555749929">"Dirección de correo electrónico"</string>
-    <string name="or_label" msgid="6408695162723653446">"O"</string>
-    <string name="sign_in_with_google" msgid="1412668282326928102">"Iniciar sesión con Google"</string>
-    <string name="account_setup_basics_password_label" msgid="784962388753706730">"CONTRASEÑA"</string>
-    <string name="password_hint" msgid="4226682910292828279">"Contraseña"</string>
-    <string name="signed_in_with_service_label" msgid="4282359206358453634">"Has iniciado sesión con %s"</string>
-    <string name="authentication_label" msgid="914463525214987772">"AUTENTICACIÓN"</string>
-    <string name="add_authentication_label" msgid="382998197798081729">"Añadir autenticación"</string>
-    <string name="clear_authentication_label" msgid="4750930803913225689">"Borrar autenticación"</string>
-    <string name="account_setup_basics_manual_setup_action" msgid="7690861839383362085">"Ajustes manuales"</string>
-    <string name="account_setup_username_password_toast" msgid="3659744829670065777">"Introduce una dirección de correo electrónico y una contraseña válidas."</string>
-    <string name="account_duplicate_dlg_title" msgid="3768813340753269695">"Cuenta duplicada"</string>
-    <string name="account_duplicate_dlg_message_fmt" msgid="6747351773934787126">"Ya estás usando este nombre de usuario para la cuenta \"<xliff:g id="DUPLICATE">%s</xliff:g>\"."</string>
-    <string name="account_setup_check_settings_retr_info_msg" msgid="9103280616618316032">"Recuperando la información de la cuenta..."</string>
-    <string name="account_setup_check_settings_check_incoming_msg" msgid="9196418179524308411">"Validando los ajustes del servidor…"</string>
-    <string name="account_setup_check_settings_check_outgoing_msg" msgid="9062019904409225329">"Validando los ajustes de SMTP…"</string>
-    <string name="account_setup_creating_account_msg" msgid="2898648422471181490">"Creando cuenta…"</string>
-    <string name="account_setup_ab_headline" msgid="1434091698882290052">"Confirma el tipo de cuenta"</string>
-    <string name="account_setup_ab_instructions_format" msgid="6223657094843768202">"Has indicado que <xliff:g id="EMAIL">%1$s</xliff:g> utiliza <xliff:g id="USERPROTOCOL">%2$s</xliff:g>, pero es posible que la cuenta utilice <xliff:g id="PROVIDERPROTOCOL">%3$s</xliff:g>"</string>
-    <string name="account_setup_names_headline" msgid="2031978210683887370">"Tu cuenta ya está configurada y en breve verás tu correo."</string>
-    <string name="account_setup_names_account_name_label" msgid="3487538709712378441">"Asigna un nombre a esta cuenta (opcional)"</string>
-    <string name="account_setup_names_user_name_label" msgid="4298006111315033499">"Tu nombre (en los mensajes enviados)"</string>
-    <string name="account_setup_account_type_headline" msgid="3375795537675351389">"Tipo de cuenta"</string>
-    <string name="account_setup_account_type_instructions" msgid="968088954656738617">"¿Qué tipo de cuenta tienes?"</string>
-    <string name="account_setup_incoming_headline" msgid="6232828824446177639">"Ajustes del servidor de entrada"</string>
-    <string name="account_setup_incoming_username_label" msgid="2609699829997945895">"NOMBRE DE USUARIO"</string>
-    <string name="account_setup_incoming_password_label" msgid="4806105500058512876">"CONTRASEÑA"</string>
-    <string name="account_setup_password_subheading" msgid="5930042642982830233">"Contraseña"</string>
-    <string name="account_setup_incoming_server_label" msgid="5409694850973258387">"SERVIDOR"</string>
-    <string name="account_setup_incoming_port_label" msgid="402562424498833560">"PUERTO"</string>
-    <string name="account_setup_incoming_security_label" msgid="8360505617331971663">"TIPO DE SEGURIDAD"</string>
-    <string name="account_setup_incoming_security_none_label" msgid="2461510827337484818">"Ninguna"</string>
-    <string name="account_setup_incoming_security_ssl_trust_certificates_label" msgid="2834386066577239560">"SSL/TLS (aceptar todos los certif.)"</string>
-    <string name="account_setup_incoming_security_ssl_label" msgid="5169133414545009342">"SSL/TLS"</string>
-    <string name="account_setup_incoming_security_tls_trust_certificates_label" msgid="2281920902104029077">"STARTTLS (aceptar todos los certif.)"</string>
-    <string name="account_setup_incoming_security_tls_label" msgid="3892291833944170882">"STARTTLS"</string>
-    <string name="account_setup_incoming_delete_policy_label" msgid="2341742235654301690">"Eliminar correo electrónico del servidor"</string>
-    <string name="account_setup_incoming_delete_policy_never_label" msgid="5777530843489961009">"Nunca"</string>
-    <string name="account_setup_incoming_delete_policy_delete_label" msgid="8677018382715596606">"Al borrar mensajes"</string>
-    <string name="account_setup_incoming_imap_path_prefix_label" msgid="3531290378620033218">"Prefijo de ruta IMAP"</string>
-    <string name="account_setup_incoming_imap_path_prefix_hint" msgid="206747922689229932">"Opcional"</string>
-    <string name="account_setup_outgoing_headline" msgid="6638171491109658047">"Ajustes del servidor de salida"</string>
-    <string name="account_setup_outgoing_smtp_server_label" msgid="3460163861711242681">"SERVIDOR SMTP"</string>
-    <string name="account_setup_outgoing_port_label" msgid="3735952013505812378">"PUERTO"</string>
-    <string name="account_setup_outgoing_security_label" msgid="6473177134731615282">"TIPO DE SEGURIDAD"</string>
-    <string name="account_setup_outgoing_require_login_label" msgid="5405196721947884033">"Solicitar inicio de sesión"</string>
-    <string name="account_setup_outgoing_username_label" msgid="8844680398828891772">"NOMBRE DE USUARIO"</string>
-    <string name="account_setup_exchange_certificate_title" msgid="8756785660598838350">"CERTIFICADO DE CLIENTE"</string>
-    <string name="account_setup_exchange_select_certificate" msgid="264748505181695915">"Seleccionar"</string>
-    <string name="account_setup_exchange_use_certificate" msgid="6513687497912094538">"Utilizar certificado de cliente"</string>
-    <string name="account_setup_exchange_remove_certificate" msgid="1222387802827919583">"Eliminar"</string>
-    <string name="account_setup_exchange_no_certificate" msgid="3569712401698909695">"Ninguno"</string>
-    <string name="account_setup_exchange_device_id_label" msgid="2306603503497194905">"ID DEL DISPOSITIVO MÓVIL"</string>
-    <string name="account_setup_options_headline" msgid="4810292194395251968">"Opciones de cuenta"</string>
-    <string name="account_setup_options_mail_check_frequency_label" msgid="7253305392938373553">"Frecuencia de sincronización:"</string>
-    <string name="account_setup_options_mail_check_frequency_never" msgid="2937664246354067829">"Nunca"</string>
-    <string name="account_setup_options_mail_check_frequency_push" msgid="5511415696925307797">"Comprobación automática"</string>
-    <string name="account_setup_options_mail_check_frequency_5min" msgid="8929785860545198867">"Cada 5 minutos"</string>
-    <string name="account_setup_options_mail_check_frequency_10min" msgid="8787901333816702849">"Cada 10 minutos"</string>
-    <string name="account_setup_options_mail_check_frequency_15min" msgid="7127640170766018765">"Cada 15 minutos"</string>
-    <string name="account_setup_options_mail_check_frequency_30min" msgid="4223562871143897449">"Cada 30 minutos"</string>
-    <string name="account_setup_options_mail_check_frequency_1hour" msgid="107706566853925273">"Cada hora"</string>
-    <string name="account_setup_options_notify_label" msgid="3101529443722198112">"Notificar cuando llegue un correo"</string>
-    <string name="account_setup_options_sync_contacts_label" msgid="5029046373980454714">"Sincronizar contactos de esta cuenta"</string>
-    <string name="account_setup_options_sync_calendar_label" msgid="303441956432308807">"Sincronizar calendario de esta cuenta"</string>
-    <string name="account_setup_options_sync_email_label" msgid="468957966555663131">"Sincronizar correo de esta cuenta"</string>
-    <string name="account_setup_options_background_attachments_label" msgid="4085327585082867216">"Descargar adjuntos automáticamente al conectar a una red Wi-Fi"</string>
-    <string name="account_setup_failed_dlg_title" msgid="7923577224474005464">"Error al completar la configuración"</string>
-    <string name="account_setup_options_mail_window_label" msgid="4737241149297585368">"Sincronizar correo electrónico de"</string>
-    <string name="account_setup_options_mail_window_auto" msgid="7407981634952005775">"Automática"</string>
-    <string name="account_setup_options_mail_window_1day" msgid="7930883294844418428">"Último día"</string>
-    <string name="account_setup_options_mail_window_3days" msgid="3435093562391555730">"Los últimos tres días"</string>
-    <string name="account_setup_options_mail_window_1week" msgid="5230695719358085318">"La última semana"</string>
-    <string name="account_setup_options_mail_window_2weeks" msgid="1144271277694832921">"Las últimas dos semanas"</string>
-    <string name="account_setup_options_mail_window_1month" msgid="3228265299330513816">"El mes pasado"</string>
-    <string name="account_setup_options_mail_window_all" msgid="4794683936065721438">"Todo"</string>
-    <string name="account_setup_options_mail_window_default" msgid="5518038139722596598">"Usar valores predeterminados de la cuenta"</string>
-    <string name="account_setup_failed_dlg_auth_message" msgid="5608549872868036352">"Nombre de usuario o contraseña incorrectos"</string>
-    <string name="account_setup_autodiscover_dlg_authfail_title" msgid="7551559109838593189">"Problema al configurar la cuenta"</string>
-    <string name="account_setup_autodiscover_dlg_authfail_message" msgid="4075075565221436715">"Los ajustes de cuenta, contraseña y nombre de usuario de confirmación son correctos."</string>
-    <string name="account_setup_failed_dlg_certificate_message" msgid="4725950885859654809">"No se puede establecer conexión de forma segura con el servidor."</string>
-    <string name="account_setup_failed_dlg_certificate_message_fmt" msgid="3451681985727559303">"No se puede establecer conexión de forma segura con el servidor.\n(<xliff:g id="ERROR">%s</xliff:g>)"</string>
-    <string name="account_setup_failed_certificate_required" msgid="4607859382193244795">"Se necesita un certificado de cliente. ¿Quieres conectarte al servidor con un certificado de cliente?"</string>
-    <string name="account_setup_failed_certificate_inaccessible" msgid="4574461885959029072">"El certificado no es válido o no se puede acceder a él."</string>
-    <string name="account_setup_failed_check_credentials_message" msgid="430054384233036305">"El servidor ha devuelto un error. Comprueba tu nombre de usuario y tu contraseña y vuelve a intentarlo."</string>
-    <string name="account_setup_failed_dlg_server_message" msgid="1180197172141077524">"No se puede establecer conexión con el servidor."</string>
-    <string name="account_setup_failed_dlg_server_message_fmt" msgid="3889441611138037320">"No se puede establecer conexión con el servidor.\n(<xliff:g id="ERROR">%s</xliff:g>)"</string>
-    <string name="account_setup_failed_tls_required" msgid="1902309158359287958">"El protocolo TLS es obligatorio, pero el servidor no lo admite."</string>
-    <string name="account_setup_failed_auth_required" msgid="2684010997018901707">"El servidor no admite métodos de autenticación."</string>
-    <string name="account_setup_failed_security" msgid="1627240499907011040">"No se ha podido establecer conexión con el servidor debido a un error de seguridad."</string>
-    <string name="account_setup_failed_ioerror" msgid="3862689923436539909">"No se ha podido establecer conexión con el servidor."</string>
-    <string name="account_setup_failed_protocol_unsupported" msgid="4973054582044010375">"Has introducido una dirección de servidor incorrecta o el servidor requiere una versión de protocolo no compatible con la aplicación Correo."</string>
-    <string name="account_setup_failed_access_denied" msgid="2051742796367919026">"No tienes permiso para hacer la sincronización con este servidor. Para obtener más información, ponte en contacto con el administrador del servidor."</string>
-    <string name="account_setup_security_required_title" msgid="667943309546419435">"Administración de seguridad remota"</string>
-    <string name="account_setup_security_policies_required_fmt" msgid="9029471168291631932">"Es necesario que permitas que el servidor <xliff:g id="SERVER">%s</xliff:g> controle de forma remota algunas funciones de seguridad de tu dispositivo Android. ¿Quieres terminar de configurar esta cuenta?"</string>
-    <string name="account_setup_failed_security_policies_unsupported" msgid="4619685657253094627">"Este servidor requiere funciones de seguridad que no son compatibles con tu dispositivo Android (por ejemplo: <xliff:g id="ERROR">%s</xliff:g>)."</string>
-    <string name="disable_admin_warning" msgid="6001542250505146252">"ADVERTENCIA: si desactivas el permiso de la aplicación Correo para administrar tu dispositivo, se eliminarán todas las cuentas de esta aplicación que requieran su uso, así como las direcciones de correo electrónico, los contactos, los eventos de calendario y otro tipo de datos."</string>
-    <string name="account_security_dialog_title" msgid="7003032393805438164">"Actualización de seguridad"</string>
-    <string name="account_security_dialog_content_fmt" msgid="4107093049191103780">"<xliff:g id="ACCOUNT">%s</xliff:g> requiere que actualices la configuración de seguridad."</string>
-    <string name="security_unsupported_ticker_fmt" msgid="3249185558872836884">"Los requisitos de seguridad de la cuenta \"<xliff:g id="ACCOUNT">%s</xliff:g>\" no permiten su sincronización."</string>
-    <string name="security_needed_ticker_fmt" msgid="7099561996532829229">"Es necesario actualizar la configuración de seguridad de la cuenta \"<xliff:g id="ACCOUNT">%s</xliff:g>\"."</string>
-    <string name="security_changed_ticker_fmt" msgid="3823930420292838192">"Se ha modificado la configuración de seguridad de la cuenta \"<xliff:g id="ACCOUNT">%s</xliff:g>\" (no es necesaria la intervención del usuario)."</string>
-    <string name="security_notification_content_update_title" msgid="6321099538307807621">"Actualización seguridad necesaria"</string>
-    <string name="security_notification_content_change_title" msgid="615639963487448183">"Políticas de seguridad modificadas"</string>
-    <string name="security_notification_content_unsupported_title" msgid="6494791400431198228">"No se pueden cumplir las políticas de seguridad"</string>
-    <string name="account_security_title" msgid="6072273231606918870">"Seguridad del dispositivo"</string>
-    <string name="account_security_policy_explanation_fmt" msgid="2527501853520160827">"Es necesario que permitas que el servidor <xliff:g id="SERVER">%s</xliff:g> controle de forma remota algunas funciones de seguridad de tu dispositivo Android."</string>
-    <string name="account_setup_failed_dlg_edit_details_action" msgid="8155332642922842729">"Aceptar"</string>
-    <string name="password_expire_warning_ticker_fmt" msgid="5543005790538884060">"\"<xliff:g id="ACCOUNT">%s</xliff:g>\" requiere que modifiques la contraseña o el PIN de la pantalla de bloqueo."</string>
-    <string name="password_expire_warning_content_title" msgid="4360288708739366810">"Contraseña bloqueo pantalla va a caducar"</string>
-    <string name="password_expired_ticker" msgid="3098703963402347483">"La contraseña o el PIN de la pantalla de bloqueo ha caducado."</string>
-    <string name="password_expired_content_title" msgid="7379094218699681984">"Contraseña bloqueo caducada"</string>
-    <string name="password_expire_warning_dialog_title" msgid="4901499545146045672">"Contraseña bloqueo pantalla va a caducar"</string>
-    <string name="password_expire_warning_dialog_content_fmt" msgid="1093389293050776319">"Debes cambiar la contraseña o el PIN de la pantalla de bloqueo lo antes posible para que no se borren los datos de <xliff:g id="ACCOUNT">%s</xliff:g>. ¿Quieres hacerlo ahora?"</string>
-    <string name="password_expired_dialog_title" msgid="7275534155170185252">"Contraseña bloqueo caducada"</string>
-    <string name="password_expired_dialog_content_fmt" msgid="8322213184626443346">"Los datos de <xliff:g id="ACCOUNT">%s</xliff:g> se están borrando del dispositivo. Para restaurarlos, modifica la contraseña o el PIN de la pantalla de bloqueo. ¿Quieres hacerlo ahora?"</string>
-    <string name="account_settings_exit_server_settings" msgid="4232590695889111419">"¿Quieres descartar los cambios no guardados?"</string>
-    <string name="account_settings_background_attachments_label" msgid="3552681465680701047">"Descargar adjuntos"</string>
-    <string name="account_settings_background_attachments_summary" msgid="8801504001229061032">"Descargar automáticamente adjuntos de correos recientes por Wi-Fi"</string>
-    <string name="account_settings_notify_label" msgid="8621226576645167987">"Notificaciones de correo"</string>
-    <string name="account_settings_summary" msgid="4733776978291376161">"Frecuencia de sincronización, notificaciones, etc."</string>
-    <string name="account_settings_notify_summary" msgid="88560545461159120">"Enviar notificación cuando llegue un correo electrónico"</string>
-    <string name="account_settings_mail_check_frequency_label" msgid="4107847714594035131">"Frecuencia de sincronización"</string>
-    <string name="account_settings_incoming_label" msgid="3793314460723296874">"Ajustes de entrada"</string>
-    <string name="account_settings_incoming_summary" msgid="7521181981008371492">"Nombre de usuario, contraseña y otros ajustes del servidor de entrada"</string>
-    <string name="account_settings_outgoing_label" msgid="4997504719643828381">"Ajustes de salida"</string>
-    <string name="account_settings_outgoing_summary" msgid="1884202151340479161">"Nombre de usuario, contraseña y otros ajustes del servidor de salida"</string>
-    <string name="account_settings_enforced_label" msgid="7005050362066086119">"Políticas aplicadas"</string>
-    <string name="account_settings_enforced_summary" msgid="1668581504445370253">"Ninguno"</string>
-    <string name="account_settings_unsupported_label" msgid="7286722617178322465">"Políticas no admitidas"</string>
-    <string name="account_settings_unsupported_summary" msgid="1980825746966562221">"Ninguno"</string>
-    <string name="account_settings_retry_label" msgid="8605492340808650923">"Intentar sincronización"</string>
-    <string name="account_settings_retry_summary" msgid="2598065993718592906">"Toca para sincronizar esta cuenta."</string>
-    <string name="account_settings_description_label" msgid="2073736045984411004">"Nombre de la cuenta"</string>
-    <string name="account_settings_name_label" msgid="8230436030850457988">"Tu nombre"</string>
-    <string name="account_settings_edit_quick_responses_label" msgid="6105791335935883199">"Respuestas rápidas"</string>
-    <string name="account_settings_edit_quick_responses_summary" msgid="5406599402930290682">"Texto que sueles usar en tus correos"</string>
-    <string name="account_settings_notifications" msgid="2842952349214972116">"Ajustes de notificaciones"</string>
-    <string name="account_settings_data_usage" msgid="6400715160238559711">"Uso de datos"</string>
-    <string name="account_settings_policies" msgid="5972183883466873359">"Políticas de seguridad"</string>
-    <string name="system_folders_title" msgid="7161311881709109736">"Carpetas del sistema"</string>
-    <string name="system_folders_trash_title" msgid="3190927115504713123">"Carpeta de la papelera"</string>
-    <string name="system_folders_trash_summary" msgid="2583143581531897068">"Selecciona tu carpeta de papelera del servidor"</string>
-    <string name="system_folders_trash_dlg" msgid="353701568340939392">"Selecciona tu carpeta de papelera del servidor"</string>
-    <string name="system_folders_sent_title" msgid="8792934374188279309">"Carpeta de elementos enviados"</string>
-    <string name="system_folders_sent_summary" msgid="4252740721870748375">"Seleccionar tu carpeta de elementos enviados del servidor"</string>
-    <string name="system_folders_sent_dlg" msgid="818944260541160146">"Seleccionar tu carpeta de elementos enviados del servidor"</string>
-    <string name="edit_quick_response_dialog" msgid="3048014284772648575">"Respuesta rápida"</string>
-    <string name="save_action" msgid="5740359453077441466">"Guardar"</string>
-    <string name="account_settings_sync_contacts_enable" msgid="2642448079273767521">"Sincronizar contactos"</string>
-    <string name="account_settings_sync_contacts_summary" msgid="1716022682035150630">"Sincronizar contactos de esta cuenta"</string>
-    <string name="account_settings_sync_calendar_enable" msgid="3172491863244160828">"Sincronizar calendario"</string>
-    <string name="account_settings_sync_calendar_summary" msgid="411960248618953311">"Sincronizar eventos de calendario para esta cuenta"</string>
-    <string name="account_settings_sync_email_enable" msgid="7135765408226471860">"Sincronizar correo"</string>
-    <string name="account_settings_sync_email_summary" msgid="71710510041953351">"Sincronizar correo de esta cuenta"</string>
-    <string name="label_notification_vibrate_title" msgid="140881511322826320">"Vibrar"</string>
-    <string name="account_settings_ringtone" msgid="2238523918221865167">"Seleccionar tono"</string>
-    <string name="account_settings_servers" msgid="3386185135392642067">"Ajustes del servidor"</string>
-    <string name="mailbox_settings_activity_title" msgid="2196614373847675314">"Ajustes de sincronización"</string>
-    <string name="mailbox_settings_activity_title_with_mailbox" msgid="5547676392298186906">"Ajustes de sincronización (<xliff:g id="MAILBOXX_NAME">%s</xliff:g>)"</string>
-    <string name="mailbox_settings_sync_enabled_label" msgid="7723413381707277856">"Sincronizar esta carpeta"</string>
-    <string name="mailbox_settings_sync_enabled_summary" msgid="742233465207750578">"Los mensajes se descargarán automáticamente al conectarte"</string>
-    <string name="mailbox_settings_mailbox_sync_window_label" msgid="7027516982341382326">"Días para sincronizar correo"</string>
-    <string name="provider_note_t_online" msgid="1596701148051980218">"Para configurar esta cuenta de correo electrónico, accede al sitio web de T-Online y crea una contraseña para acceder al correo electrónico POP3."</string>
-    <string name="exchange_name_alternate" msgid="293118547772095111">"Microsoft Exchange ActiveSync"</string>
-    <string name="system_account_create_failed" msgid="2248313263003927725">"No se ha podido crear la cuenta. Inténtalo de nuevo."</string>
-    <string name="device_admin_label" msgid="3335272972461391415">"Correo electrónico"</string>
-    <string name="device_admin_description" msgid="4299378570982520839">"Permite las políticas de seguridad especificadas por el servidor."</string>
-    <string name="policy_dont_allow_camera" msgid="8821533827628900689">"No permitir usar cámara del dispositivo"</string>
-    <string name="policy_require_password" msgid="3556860917024612396">"Solicitar contraseña del dispositivo"</string>
-    <string name="policy_password_history" msgid="9001177390979112746">"Restringir nuevo uso contraseñas recientes"</string>
-    <string name="policy_password_expiration" msgid="1287225242918742275">"Forzar vencimiento de contraseñas"</string>
-    <string name="policy_screen_timeout" msgid="3499201409239287702">"Dispositivo inactivo necesario para bloqueo"</string>
-    <string name="policy_calendar_age" msgid="6469328498345236120">"Limitar número de eventos que se sincronizan"</string>
-    <string name="policy_email_age" msgid="3521941976575225050">"Limitar número de correos que se sincronizan"</string>
-    <string name="quick_1" msgid="9130521670178673190">"¡Gracias!"</string>
-    <string name="quick_2" msgid="8611591278119481491">"Me parece bien, ¡gracias!"</string>
-    <string name="quick_3" msgid="8070999183033184986">"Luego lo leo y te respondo."</string>
-    <string name="quick_4" msgid="216066940197616025">"Hagamos una reunión para hablar de este tema."</string>
-    <string name="confirm_response" msgid="6764021931370809514">"Enviando respuesta…"</string>
-    <string name="imap_name" msgid="8285222985908214985">"Personal (IMAP)"</string>
-    <string name="pop3_name" msgid="6653484706414263493">"Personal (POP3)"</string>
-    <string name="trash_folder_selection_title" msgid="686039558899469073">"Selecciona la papelera del servidor de <xliff:g id="ACCOUNT">%s</xliff:g>"</string>
-    <string name="sent_folder_selection_title" msgid="9207482909822072856">"Seleccionar carpeta servidor de <xliff:g id="ACCOUNT">%s</xliff:g>"</string>
-    <string name="account_waiting_for_folders_msg" msgid="8848194305692897677">"Cargando lista de carpetas…"</string>
-    <string name="no_quick_responses" msgid="8716297053803961304">"Ninguna disponible"</string>
-    <string name="gmail_name" msgid="2099786953868369991">"Gmail"</string>
-    <string name="folder_sync_settings_pref_title" msgid="349478353401667107">"Ajustes de sincronización de la carpeta"</string>
-    <string name="account_settings_remove_account_label">"Quitar cuenta"</string>
-    <string name="preferences_signature_summary_set">Enviado desde mi Alcatel A3A PLUS de Movistar</string>
-</resources>
Index: vendor/branch/5058A_Claro/packages/apps/Email/res/values-es-rUS/strings.xml
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/Email/res/values-es-rUS/strings.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/Email/res/values-es-rUS/strings.xml	(revision 3018)
@@ -1,246 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--  Copyright (C) 2008 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
- -->
-
-<resources xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string name="permission_read_attachment_label" msgid="6641407731311699536">"Leer archivos adjuntos de correo"</string>
-    <string name="permission_read_attachment_desc" msgid="6579059616090100181">"Permite a la aplicación leer los archivos adjuntos de tu correo."</string>
-    <string name="permission_access_provider_label" msgid="977700184037298723">"Acceder a los datos del proveedor de correo"</string>
-    <string name="permission_access_provider_desc" msgid="5338433949655493713">"Permite que la aplicación acceda a la base de datos de tu correo, como mensajes recibidos, mensajes enviados, nombres de usuario y contraseñas."</string>
-    <string name="app_name" msgid="2206468539066258195">"Correo"</string>
-    <string name="okay_action">"Aceptar"</string>
-    <string name="cancel_action">"Cancelar"</string>
-    <string name="create_action" msgid="6575946089819721958">"Crear una nueva respuesta rápida"</string>
-    <string name="quick_responses_empty_view" msgid="3394094315357455290">"No hay respuestas rápidas."</string>
-    <string name="account_settings_action" msgid="589969653965674604">"Configuración de la cuenta"</string>
-    <string name="mailbox_name_display_inbox" msgid="5093068725739672126">"Bandeja de entrada"</string>
-    <string name="mailbox_name_display_outbox" msgid="8735725798805339414">"Bandeja de salida"</string>
-    <string name="mailbox_name_display_drafts" msgid="3552043116466269581">"Borradores"</string>
-    <string name="mailbox_name_display_trash" msgid="7020792045007681852">"Papelera"</string>
-    <string name="mailbox_name_display_sent" msgid="6705058612006729985">"Enviados"</string>
-    <string name="mailbox_name_display_junk" msgid="1634126984313831675">"No solicitado"</string>
-    <string name="mailbox_name_display_starred" msgid="8076384721309828453">"Destacados"</string>
-    <string name="mailbox_name_display_unread" msgid="1453575937919310339">"No leídos"</string>
-    <string name="debug_title" msgid="1337476992195531309">"Depurar"</string>
-    <string name="mailbox_list_account_selector_combined_view" msgid="4155918930481733669">"Vista combinada"</string>
-    <string name="message_compose_fwd_header_fmt" msgid="6193988236722150221">\n\n"-------- Mensaje original --------\nAsunto: <xliff:g id="SUBJECT">%1$s</xliff:g>\nDe: <xliff:g id="SENDER">%2$s</xliff:g>\nPara: <xliff:g id="TO">%3$s</xliff:g>\nCC: <xliff:g id="CC_0">%4$s</xliff:g>\n\n"</string>
-    <string name="message_compose_insert_quick_response_list_title" msgid="5836926808818821309">"Insertar respuesta rápida"</string>
-    <string name="message_compose_insert_quick_response_menu_title" msgid="4393288554605333619">"Insertar respuesta rápida"</string>
-    <string name="message_view_attachment_background_load" msgid="7571652141281187845">"Se descargarán uno o más archivos adjuntos de tu mensaje reenviado antes de enviar."</string>
-    <string name="message_decode_error" msgid="91396461771444300">"Se produjo un error al decodificar el mensaje."</string>
-    <string name="forward_download_failed_ticker" msgid="2900585518884851062">"No se pudieron enviar uno o más adjuntos."</string>
-    <string name="forward_download_failed_title" msgid="2043036709913723298">"No se reenvió el archivo adjunto"</string>
-    <string name="login_failed_ticker" msgid="4620839194581484497">"Acceso a <xliff:g id="ACCOUNT_NAME">%s</xliff:g> sin éxito"</string>
-    <string name="login_failed_title" msgid="1737884069957090004">"No se ha podido acceder."</string>
-    <string name="account_setup_basics_title" msgid="5050895656741229172">"Configuración de la cuenta"</string>
-    <string name="oauth_authentication_title" msgid="3771260531636603518">"Solicitando autorización"</string>
-    <string name="sign_in_title" msgid="5051852806423550830">"Acceso"</string>
-    <string name="oauth_error_description" msgid="8466102021844409849">"No se puede autenticar."</string>
-    <string name="password_warning_label" msgid="1887439537224212124">"Dirección de correo electrónico o contraseña incorrectas"</string>
-    <string name="email_confirmation_label" msgid="64258748053106017">"Dirección de correo electrónico:"</string>
-    <string name="account_setup_basics_headline" msgid="8468280216822264643">"Cuenta de correo"</string>
-    <string name="accounts_welcome" msgid="7230367425520242593">"Puedes configurar tu cuenta en pocos pasos."</string>
-    <string name="account_setup_basics_email_label" msgid="8701406783555749929">"Dirección de correo"</string>
-    <string name="or_label" msgid="6408695162723653446">"O también puedes hacer lo siguiente:"</string>
-    <string name="sign_in_with_google" msgid="1412668282326928102">"Acceder con Google"</string>
-    <string name="account_setup_basics_password_label" msgid="784962388753706730">"CONTRASEÑA"</string>
-    <string name="password_hint" msgid="4226682910292828279">"Contraseña"</string>
-    <string name="signed_in_with_service_label" msgid="4282359206358453634">"Acceso con %s"</string>
-    <string name="authentication_label" msgid="914463525214987772">"AUTENTICACIÓN"</string>
-    <string name="add_authentication_label" msgid="382998197798081729">"Agregar autenticación"</string>
-    <string name="clear_authentication_label" msgid="4750930803913225689">"Eliminar autenticación"</string>
-    <string name="account_setup_basics_manual_setup_action" msgid="7690861839383362085">"Configuración manual"</string>
-    <string name="account_setup_username_password_toast" msgid="3659744829670065777">"Escribe una dirección de correo y contraseña válidas."</string>
-    <string name="account_duplicate_dlg_title" msgid="3768813340753269695">"Cuenta duplicada"</string>
-    <string name="account_duplicate_dlg_message_fmt" msgid="6747351773934787126">"Ya estás usando este nombre de usuario para la cuenta \"<xliff:g id="DUPLICATE">%s</xliff:g>\"."</string>
-    <string name="account_setup_check_settings_retr_info_msg" msgid="9103280616618316032">"Recuperando información de la cuenta..."</string>
-    <string name="account_setup_check_settings_check_incoming_msg" msgid="9196418179524308411">"Validando configuración del servidor…"</string>
-    <string name="account_setup_check_settings_check_outgoing_msg" msgid="9062019904409225329">"Validando configuración de SMTP…"</string>
-    <string name="account_setup_creating_account_msg" msgid="2898648422471181490">"Creando cuenta…"</string>
-    <string name="account_setup_ab_headline" msgid="1434091698882290052">"Confirmar tipo de cuenta"</string>
-    <string name="account_setup_ab_instructions_format" msgid="6223657094843768202">"Indicaste que <xliff:g id="EMAIL">%1$s</xliff:g> utiliza <xliff:g id="USERPROTOCOL">%2$s</xliff:g>, pero la cuenta puede utilizar <xliff:g id="PROVIDERPROTOCOL">%3$s</xliff:g>."</string>
-    <string name="account_setup_names_headline" msgid="2031978210683887370">"Se ha configurado tu cuenta y el correo está en camino."</string>
-    <string name="account_setup_names_account_name_label" msgid="3487538709712378441">"Asigna un nombre a esta cuenta (opcional)"</string>
-    <string name="account_setup_names_user_name_label" msgid="4298006111315033499">"Tu nombre (en mensajes salientes)"</string>
-    <string name="account_setup_account_type_headline" msgid="3375795537675351389">"Tipo de cuenta"</string>
-    <string name="account_setup_account_type_instructions" msgid="968088954656738617">"¿Qué tipo de cuenta es?"</string>
-    <string name="account_setup_incoming_headline" msgid="6232828824446177639">"Configuración del servidor de entrada"</string>
-    <string name="account_setup_incoming_username_label" msgid="2609699829997945895">"NOMBRE DE USUARIO"</string>
-    <string name="account_setup_incoming_password_label" msgid="4806105500058512876">"CONTRASEÑA"</string>
-    <string name="account_setup_password_subheading" msgid="5930042642982830233">"Contraseña"</string>
-    <string name="account_setup_incoming_server_label" msgid="5409694850973258387">"SERVIDOR"</string>
-    <string name="account_setup_incoming_port_label" msgid="402562424498833560">"PUERTO"</string>
-    <string name="account_setup_incoming_security_label" msgid="8360505617331971663">"TIPO DE SEGURIDAD"</string>
-    <string name="account_setup_incoming_security_none_label" msgid="2461510827337484818">"Ninguno"</string>
-    <string name="account_setup_incoming_security_ssl_trust_certificates_label" msgid="2834386066577239560">"SSL/TLS (aceptar todos)"</string>
-    <string name="account_setup_incoming_security_ssl_label" msgid="5169133414545009342">"SSL/TLS"</string>
-    <string name="account_setup_incoming_security_tls_trust_certificates_label" msgid="2281920902104029077">"STARTTLS (aceptar todos)"</string>
-    <string name="account_setup_incoming_security_tls_label" msgid="3892291833944170882">"STARTTLS"</string>
-    <string name="account_setup_incoming_delete_policy_label" msgid="2341742235654301690">"Eliminar correo del servidor"</string>
-    <string name="account_setup_incoming_delete_policy_never_label" msgid="5777530843489961009">"Nunca"</string>
-    <string name="account_setup_incoming_delete_policy_delete_label" msgid="8677018382715596606">"Al eliminarlo desde la bandeja de entrada"</string>
-    <string name="account_setup_incoming_imap_path_prefix_label" msgid="3531290378620033218">"Prefijo de ruta IMAP"</string>
-    <string name="account_setup_incoming_imap_path_prefix_hint" msgid="206747922689229932">"Opcional"</string>
-    <string name="account_setup_outgoing_headline" msgid="6638171491109658047">"Configuración del servidor de salida"</string>
-    <string name="account_setup_outgoing_smtp_server_label" msgid="3460163861711242681">"SERVIDOR SMTP"</string>
-    <string name="account_setup_outgoing_port_label" msgid="3735952013505812378">"PUERTO"</string>
-    <string name="account_setup_outgoing_security_label" msgid="6473177134731615282">"TIPO DE SEGURIDAD"</string>
-    <string name="account_setup_outgoing_require_login_label" msgid="5405196721947884033">"Requiere acceso"</string>
-    <string name="account_setup_outgoing_username_label" msgid="8844680398828891772">"NOMBRE DE USUARIO"</string>
-    <string name="account_setup_exchange_certificate_title" msgid="8756785660598838350">"CERTIFICADO DE CLIENTE"</string>
-    <string name="account_setup_exchange_select_certificate" msgid="264748505181695915">"Seleccionar"</string>
-    <string name="account_setup_exchange_use_certificate" msgid="6513687497912094538">"Usar certificado de cliente"</string>
-    <string name="account_setup_exchange_remove_certificate" msgid="1222387802827919583">"Eliminar"</string>
-    <string name="account_setup_exchange_no_certificate" msgid="3569712401698909695">"Ninguno"</string>
-    <string name="account_setup_exchange_device_id_label" msgid="2306603503497194905">"ID DE DISPOSITIVO MÓVIL"</string>
-    <string name="account_setup_options_headline" msgid="4810292194395251968">"Opciones de cuenta"</string>
-    <string name="account_setup_options_mail_check_frequency_label" msgid="7253305392938373553">"Frecuencia de sincronización:"</string>
-    <string name="account_setup_options_mail_check_frequency_never" msgid="2937664246354067829">"Nunca"</string>
-    <string name="account_setup_options_mail_check_frequency_push" msgid="5511415696925307797">"Comprobación automática"</string>
-    <string name="account_setup_options_mail_check_frequency_5min" msgid="8929785860545198867">"Cada 5 minutos"</string>
-    <string name="account_setup_options_mail_check_frequency_10min" msgid="8787901333816702849">"Cada 10 minutos"</string>
-    <string name="account_setup_options_mail_check_frequency_15min" msgid="7127640170766018765">"Cada 15 minutos"</string>
-    <string name="account_setup_options_mail_check_frequency_30min" msgid="4223562871143897449">"Cada 30 minutos"</string>
-    <string name="account_setup_options_mail_check_frequency_1hour" msgid="107706566853925273">"Cada hora"</string>
-    <string name="account_setup_options_notify_label" msgid="3101529443722198112">"Avisarme cuando llegue un correo"</string>
-    <string name="account_setup_options_sync_contacts_label" msgid="5029046373980454714">"Sincronizar contactos desde esta cuenta"</string>
-    <string name="account_setup_options_sync_calendar_label" msgid="303441956432308807">"Sincronizar el calendario desde esta cuenta"</string>
-    <string name="account_setup_options_sync_email_label" msgid="468957966555663131">"Sincronizar el correo desde esta cuenta"</string>
-    <string name="account_setup_options_background_attachments_label" msgid="4085327585082867216">"Descargar los archivos adjuntos automáticamente al conectarte a Wi-Fi"</string>
-    <string name="account_setup_failed_dlg_title" msgid="7923577224474005464">"No se pudo terminar"</string>
-    <string name="account_setup_options_mail_window_label" msgid="4737241149297585368">"Sincronizar correo electrónico de"</string>
-    <string name="account_setup_options_mail_window_auto" msgid="7407981634952005775">"Automático"</string>
-    <string name="account_setup_options_mail_window_1day" msgid="7930883294844418428">"Último día"</string>
-    <string name="account_setup_options_mail_window_3days" msgid="3435093562391555730">"Últimos tres días"</string>
-    <string name="account_setup_options_mail_window_1week" msgid="5230695719358085318">"Última semana"</string>
-    <string name="account_setup_options_mail_window_2weeks" msgid="1144271277694832921">"Últimas dos semanas"</string>
-    <string name="account_setup_options_mail_window_1month" msgid="3228265299330513816">"Último mes"</string>
-    <string name="account_setup_options_mail_window_all" msgid="4794683936065721438">"Todos"</string>
-    <string name="account_setup_options_mail_window_default" msgid="5518038139722596598">"Usar cuenta predeterminada"</string>
-    <string name="account_setup_failed_dlg_auth_message" msgid="5608549872868036352">"El nombre de usuario o la contraseña son incorrectos."</string>
-    <string name="account_setup_autodiscover_dlg_authfail_title" msgid="7551559109838593189">"Error al configurar la cuenta"</string>
-    <string name="account_setup_autodiscover_dlg_authfail_message" msgid="4075075565221436715">"Confirma que el nombre de usuario, la contraseña y la configuración de la cuenta sean correctos."</string>
-    <string name="account_setup_failed_dlg_certificate_message" msgid="4725950885859654809">"No se puede conectar de forma segura al servidor."</string>
-    <string name="account_setup_failed_dlg_certificate_message_fmt" msgid="3451681985727559303">"No se puede conectar de forma segura al servidor.\n(<xliff:g id="ERROR">%s</xliff:g>)"</string>
-    <string name="account_setup_failed_certificate_required" msgid="4607859382193244795">"Se necesita un certificado de cliente. ¿Quieres conectarte al servidor con un certificado de cliente?"</string>
-    <string name="account_setup_failed_certificate_inaccessible" msgid="4574461885959029072">"El certificado no es válido o es inaccesible."</string>
-    <string name="account_setup_failed_check_credentials_message" msgid="430054384233036305">"El servidor ha devuelto un error. Verifica tu nombre de usuario y contraseña e inténtalo de nuevo."</string>
-    <string name="account_setup_failed_dlg_server_message" msgid="1180197172141077524">"No se puede conectar al servidor."</string>
-    <string name="account_setup_failed_dlg_server_message_fmt" msgid="3889441611138037320">"No se puede conectar al servidor.\n(<xliff:g id="ERROR">%s</xliff:g>)"</string>
-    <string name="account_setup_failed_tls_required" msgid="1902309158359287958">"Se requiere TLS pero el servidor no la admite."</string>
-    <string name="account_setup_failed_auth_required" msgid="2684010997018901707">"El servidor no admite los métodos de autenticación."</string>
-    <string name="account_setup_failed_security" msgid="1627240499907011040">"No se pudo establecer conexión con el servidor debido a un error de seguridad."</string>
-    <string name="account_setup_failed_ioerror" msgid="3862689923436539909">"No se pudo establecer conexión con el servidor."</string>
-    <string name="account_setup_failed_protocol_unsupported" msgid="4973054582044010375">"Ingresaste una dirección de servidor incorrecta o el servidor requiere una versión de protocolo que el correo no admite."</string>
-    <string name="account_setup_failed_access_denied" msgid="2051742796367919026">"No tienes permiso para sincronizar con este servidor. Comunícate con el administrador de tu servidor para obtener más información."</string>
-    <string name="account_setup_security_required_title" msgid="667943309546419435">"Administración de seguridad remota"</string>
-    <string name="account_setup_security_policies_required_fmt" msgid="9029471168291631932">"El servidor <xliff:g id="SERVER">%s</xliff:g> debe controlar de forma remota algunas aplicaciones de seguridad del dispositivo. ¿Deseas finalizar la configuración de esta cuenta?"</string>
-    <string name="account_setup_failed_security_policies_unsupported" msgid="4619685657253094627">"Este servidor requiere funciones de seguridad que tu dispositivo Android no admite, incluidas: <xliff:g id="ERROR">%s</xliff:g>"</string>
-    <string name="disable_admin_warning" msgid="6001542250505146252">"ADVERTENCIA: si desactivas la autoridad de la aplicación de correo para administrar tu dispositivo, se eliminarán todas las cuentas de correo que la requieran, así como sus mensajes, contactos, eventos de calendario y otros datos."</string>
-    <string name="account_security_dialog_title" msgid="7003032393805438164">"Actualización de seguridad"</string>
-    <string name="account_security_dialog_content_fmt" msgid="4107093049191103780">"<xliff:g id="ACCOUNT">%s</xliff:g> requiere que actualices tu configuración de seguridad."</string>
-    <string name="security_unsupported_ticker_fmt" msgid="3249185558872836884">"No se puede sincronizar la cuenta \"<xliff:g id="ACCOUNT">%s</xliff:g>\" debido a diferentes requisitos de seguridad."</string>
-    <string name="security_needed_ticker_fmt" msgid="7099561996532829229">"Debe actualizarse la configuración de seguridad de la cuenta \"<xliff:g id="ACCOUNT">%s</xliff:g>\"."</string>
-    <string name="security_changed_ticker_fmt" msgid="3823930420292838192">"Se modificó la configuración de seguridad de la cuenta \"<xliff:g id="ACCOUNT">%s</xliff:g>\". El usuario no debe tomar ninguna medida."</string>
-    <string name="security_notification_content_update_title" msgid="6321099538307807621">"Act. de seguridad requerida"</string>
-    <string name="security_notification_content_change_title" msgid="615639963487448183">"Políts. seguridad modificadas"</string>
-    <string name="security_notification_content_unsupported_title" msgid="6494791400431198228">"Falta en políts. de seguridad"</string>
-    <string name="account_security_title" msgid="6072273231606918870">"Seguridad del dispositivo"</string>
-    <string name="account_security_policy_explanation_fmt" msgid="2527501853520160827">"El servidor <xliff:g id="SERVER">%s</xliff:g> requiere tu permiso para controlar de forma remota algunas funciones de seguridad en tu dispositivo Android."</string>
-    <string name="account_setup_failed_dlg_edit_details_action" msgid="8155332642922842729">"Editar detalles"</string>
-    <string name="password_expire_warning_ticker_fmt" msgid="5543005790538884060">"\"<xliff:g id="ACCOUNT">%s</xliff:g>\" requiere que cambies tu PIN o contraseña de bloqueo de pantalla."</string>
-    <string name="password_expire_warning_content_title" msgid="4360288708739366810">"La contraseña de bloqueo de pantalla expiró"</string>
-    <string name="password_expired_ticker" msgid="3098703963402347483">"Tu PIN o contraseña de bloqueo de pantalla expiró."</string>
-    <string name="password_expired_content_title" msgid="7379094218699681984">"La contraseña de bloqueo de pantalla expiró"</string>
-    <string name="password_expire_warning_dialog_title" msgid="4901499545146045672">"La contraseña de bloqueo de pantalla expiró"</string>
-    <string name="password_expire_warning_dialog_content_fmt" msgid="1093389293050776319">"Debes cambiar el PIN o la contraseña de la pantalla de bloqueo lo antes posible o se eliminarán los datos de <xliff:g id="ACCOUNT">%s</xliff:g>. ¿Quieres cambiarlos ahora?"</string>
-    <string name="password_expired_dialog_title" msgid="7275534155170185252">"La contraseña de bloqueo de pantalla expiró"</string>
-    <string name="password_expired_dialog_content_fmt" msgid="8322213184626443346">"Los datos de <xliff:g id="ACCOUNT">%s</xliff:g> se eliminarán de su dispositivo. Puedes restaurarlo al cambiar tu PIN o tu contraseña de bloqueo de pantalla. ¿Deseas cambiarlos ahora?"</string>
-    <string name="account_settings_exit_server_settings" msgid="4232590695889111419">"¿Descartar cambios sin guardar?"</string>
-    <string name="account_settings_background_attachments_label" msgid="3552681465680701047">"Descargar archivos adjuntos"</string>
-    <string name="account_settings_background_attachments_summary" msgid="8801504001229061032">"Descarga automática por Wi-Fi de los adjuntos de msjs. recientes"</string>
-    <string name="account_settings_notify_label" msgid="8621226576645167987">"Notificaciones de correo"</string>
-    <string name="account_settings_summary" msgid="4733776978291376161">"Frecuencia de sincronización, notificaciones, etc."</string>
-    <string name="account_settings_notify_summary" msgid="88560545461159120">"Enviar una notificación cuando llegue el correo"</string>
-    <string name="account_settings_mail_check_frequency_label" msgid="4107847714594035131">"Frecuencia de sincronización"</string>
-    <string name="account_settings_incoming_label" msgid="3793314460723296874">"Configuración del servidor entrante"</string>
-    <string name="account_settings_incoming_summary" msgid="7521181981008371492">"Nombre de usuario, contraseña y otras configuraciones de servidor de entrada"</string>
-    <string name="account_settings_outgoing_label" msgid="4997504719643828381">"Configuración del servidor saliente"</string>
-    <string name="account_settings_outgoing_summary" msgid="1884202151340479161">"Nombre de usuario, contraseña y otras configuraciones de servidor de salida"</string>
-    <string name="account_settings_enforced_label" msgid="7005050362066086119">"Políticas en vigencia"</string>
-    <string name="account_settings_enforced_summary" msgid="1668581504445370253">"Ninguna"</string>
-    <string name="account_settings_unsupported_label" msgid="7286722617178322465">"Políticas incompatibles"</string>
-    <string name="account_settings_unsupported_summary" msgid="1980825746966562221">"Ninguna"</string>
-    <string name="account_settings_retry_label" msgid="8605492340808650923">"Sincronizar esta cuenta"</string>
-    <string name="account_settings_retry_summary" msgid="2598065993718592906">"Toca para sincronizar esta cuenta."</string>
-    <string name="account_settings_description_label" msgid="2073736045984411004">"Nombre de la cuenta"</string>
-    <string name="account_settings_name_label" msgid="8230436030850457988">"Tu nombre"</string>
-    <string name="account_settings_edit_quick_responses_label" msgid="6105791335935883199">"Respuestas rápidas"</string>
-    <string name="account_settings_edit_quick_responses_summary" msgid="5406599402930290682">"Edita el texto que sueles usar al redactar correos electrónicos."</string>
-    <string name="account_settings_notifications" msgid="2842952349214972116">"Configuración de notificación"</string>
-    <string name="account_settings_data_usage" msgid="6400715160238559711">"Uso de datos"</string>
-    <string name="account_settings_policies" msgid="5972183883466873359">"Políticas de seguridad"</string>
-    <string name="system_folders_title" msgid="7161311881709109736">"Carpetas del sistema"</string>
-    <string name="system_folders_trash_title" msgid="3190927115504713123">"Carpeta de papelera"</string>
-    <string name="system_folders_trash_summary" msgid="2583143581531897068">"Selecciona la carpeta de papelera de tu servidor."</string>
-    <string name="system_folders_trash_dlg" msgid="353701568340939392">"Selecciona la carpeta de papelera de tu servidor."</string>
-    <string name="system_folders_sent_title" msgid="8792934374188279309">"Carpeta de elementos enviados"</string>
-    <string name="system_folders_sent_summary" msgid="4252740721870748375">"Selecciona la carpeta de elementos enviados de tu servidor."</string>
-    <string name="system_folders_sent_dlg" msgid="818944260541160146">"Selecciona la carpeta de elementos enviados de tu servidor."</string>
-    <string name="edit_quick_response_dialog" msgid="3048014284772648575">"Respuesta rápida"</string>
-    <string name="save_action" msgid="5740359453077441466">"Guardar"</string>
-    <string name="account_settings_sync_contacts_enable" msgid="2642448079273767521">"Sincronizar contactos"</string>
-    <string name="account_settings_sync_contacts_summary" msgid="1716022682035150630">"Sincronizar contactos de esta cuenta"</string>
-    <string name="account_settings_sync_calendar_enable" msgid="3172491863244160828">"Sincronizar calendario"</string>
-    <string name="account_settings_sync_calendar_summary" msgid="411960248618953311">"Sincronizar evento de calendario de esta cuenta"</string>
-    <string name="account_settings_sync_email_enable" msgid="7135765408226471860">"Sincronizar correo"</string>
-    <string name="account_settings_sync_email_summary" msgid="71710510041953351">"Sincronizar el correo de esta cuenta"</string>
-    <string name="label_notification_vibrate_title" msgid="140881511322826320">"Vibrar"</string>
-    <string name="account_settings_ringtone" msgid="2238523918221865167">"Seleccionar tono"</string>
-    <string name="account_settings_servers" msgid="3386185135392642067">"Configuración del servidor"</string>
-    <string name="mailbox_settings_activity_title" msgid="2196614373847675314">"Opciones de sincronización"</string>
-    <string name="mailbox_settings_activity_title_with_mailbox" msgid="5547676392298186906">"Opciones de sincronización (<xliff:g id="MAILBOXX_NAME">%s</xliff:g>)"</string>
-    <string name="mailbox_settings_sync_enabled_label" msgid="7723413381707277856">"Sincronizar esta carpeta"</string>
-    <string name="mailbox_settings_sync_enabled_summary" msgid="742233465207750578">"Los mensajes se descargarán al conectarte."</string>
-    <string name="mailbox_settings_mailbox_sync_window_label" msgid="7027516982341382326">"Días de correo electrónico para sincronizar"</string>
-    <string name="provider_note_t_online" msgid="1596701148051980218">"Para configurar esta cuenta de correo, accede al sitio web de T-Online y crea una contraseña para acceder al correo POP3."</string>
-    <string name="exchange_name_alternate" msgid="293118547772095111">"Microsoft Exchange ActiveSync"</string>
-    <string name="system_account_create_failed" msgid="2248313263003927725">"No se pudo crear la cuenta. Inténtalo de nuevo."</string>
-    <string name="device_admin_label" msgid="3335272972461391415">"Correo"</string>
-    <string name="device_admin_description" msgid="4299378570982520839">"Habilita las políticas de seguridad específicas según el servidor."</string>
-    <string name="policy_dont_allow_camera" msgid="8821533827628900689">"No usar la cámara del dispositivo"</string>
-    <string name="policy_require_password" msgid="3556860917024612396">"Requerir la contraseña del dispositivo"</string>
-    <string name="policy_password_history" msgid="9001177390979112746">"Limitar la reutilización de contraseñas"</string>
-    <string name="policy_password_expiration" msgid="1287225242918742275">"Forzar la caducidad de las contraseñas"</string>
-    <string name="policy_screen_timeout" msgid="3499201409239287702">"Bloquear pant. de dispositivo inactivo"</string>
-    <string name="policy_calendar_age" msgid="6469328498345236120">"Limitar eventos del calendario que se sincronizan"</string>
-    <string name="policy_email_age" msgid="3521941976575225050">"Limitar los correos que se sincronizan"</string>
-    <string name="quick_1" msgid="9130521670178673190">"¡Gracias!"</string>
-    <string name="quick_2" msgid="8611591278119481491">"Me parece bien."</string>
-    <string name="quick_3" msgid="8070999183033184986">"Lo leeré más adelante y me pondré en contacto contigo."</string>
-    <string name="quick_4" msgid="216066940197616025">"Vamos a convocar a una reunión para tratar esto."</string>
-    <string name="confirm_response" msgid="6764021931370809514">"Enviando respuesta…"</string>
-    <string name="imap_name" msgid="8285222985908214985">"Personal (IMAP)"</string>
-    <string name="pop3_name" msgid="6653484706414263493">"Personal (POP3)"</string>
-    <string name="trash_folder_selection_title" msgid="686039558899469073">"Selecciona la carpeta de papelera del servidor para <xliff:g id="ACCOUNT">%s</xliff:g>."</string>
-    <string name="sent_folder_selection_title" msgid="9207482909822072856">"Selecciona la carpeta de elementos enviados del servidor para <xliff:g id="ACCOUNT">%s</xliff:g>."</string>
-    <string name="account_waiting_for_folders_msg" msgid="8848194305692897677">"Cargando lista de carpetas..."</string>
-    <string name="no_quick_responses" msgid="8716297053803961304">"Ninguna disponible"</string>
-    <string name="gmail_name" msgid="2099786953868369991">"Gmail"</string>
-    <string name="folder_sync_settings_pref_title" msgid="349478353401667107">"Configuración de la sincronización de carpetas"</string>
-    <string name="account_settings_remove_account_label">"Eliminar cuenta"</string>
-    <string name="preferences_signature_summary_set">Enviado desde mi Alcatel A3A PLUS de Movistar</string>
-</resources>
Index: vendor/branch/5058A_Claro/packages/apps/ChromeCustomizations/src/com/techain/chromecustomizations/BrowserCustomizationsProvider.java
===================================================================
--- vendor/branch/5058A_Claro/packages/apps/ChromeCustomizations/src/com/techain/chromecustomizations/BrowserCustomizationsProvider.java	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/apps/ChromeCustomizations/src/com/techain/chromecustomizations/BrowserCustomizationsProvider.java	(revision 3018)
@@ -1,103 +0,0 @@
-// Copyright 2015 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// Package path can be changed, but should match <manifest package="..."> in AndroidManifest.xml.
-package com.techain.chromecustomizations;
-
-import android.content.ContentProvider;
-import android.content.ContentValues;
-import android.content.UriMatcher;
-import android.database.Cursor;
-import android.database.MatrixCursor;
-import android.net.Uri;
-
-/**
- * A sample ContentProvider demonstrating the various partner configurations: adding a homepage,
- * disabling incognito mode, and adding default bookmarks.
- *
- * This class name can be changed, but should match <provider android:name="..."> in
- * AndroidManifest.xml.
- */
-public class BrowserCustomizationsProvider extends ContentProvider {
-    // "http://www.android.com/" is just an example. Please replace this to actual homepage.
-    // Other strings in this class must remain as it is.
-    private static final String HOMEPAGE_URI = "http://wap.movistar.cl";
-    private static final int URI_MATCH_HOMEPAGE = 0;
-    private static final int URI_MATCH_DISABLE_INCOGNITO_MODE = 1;
-    private static final int URI_MATCH_DISABLE_BOOKMARKS_EDITING = 2;
-    private static final UriMatcher URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);
-    static {
-        URI_MATCHER.addURI("com.android.partnerbrowsercustomizations", "homepage",
-                URI_MATCH_HOMEPAGE);
-        URI_MATCHER.addURI("com.android.partnerbrowsercustomizations", "disableincognitomode",
-                URI_MATCH_DISABLE_INCOGNITO_MODE);
-        URI_MATCHER.addURI("com.android.partnerbrowsercustomizations", "disablebookmarksediting",
-                URI_MATCH_DISABLE_BOOKMARKS_EDITING);
-    }
-
-    @Override
-    public boolean onCreate() {
-        return true;
-    }
-
-    @Override
-    public String getType(Uri uri) {
-        // In fact, Chrome does not call this.
-        // Just a recommaned ContentProvider practice in general.
-        switch (URI_MATCHER.match(uri)) {
-            case URI_MATCH_HOMEPAGE:
-                return "vnd.android.cursor.item/partnerhomepage";
-            case URI_MATCH_DISABLE_INCOGNITO_MODE:
-                return "vnd.android.cursor.item/partnerdisableincognitomode";
-            case URI_MATCH_DISABLE_BOOKMARKS_EDITING:
-                return "vnd.android.cursor.item/partnerdisablebookmarksediting";
-            default:
-                return null;
-        }
-    }
-
-    @Override
-    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
-            String sortOrder) {
-        switch (URI_MATCHER.match(uri)) {
-            case URI_MATCH_HOMEPAGE:
-            {
-                MatrixCursor cursor = new MatrixCursor(new String[] { "homepage" }, 1);
-                cursor.addRow(new Object[] { HOMEPAGE_URI });
-                return cursor;
-            }
-            case URI_MATCH_DISABLE_INCOGNITO_MODE:
-            {
-                MatrixCursor cursor = new MatrixCursor(new String[] { "disableincognitomode" }, 1);
-                cursor.addRow(new Object[] { 1 });
-                return cursor;
-            }
-            case URI_MATCH_DISABLE_BOOKMARKS_EDITING:
-            {
-                MatrixCursor cursor = new MatrixCursor(
-                        new String[] { "disablebookmarksediting" }, 1);
-                cursor.addRow(new Object[] { 1 });
-                return cursor;
-            }
-            default:
-                return null;
-        }
-    }
-
-    @Override
-    public Uri insert(Uri uri, ContentValues values) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int delete(Uri uri, String selection, String[] selectionArgs) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
-        throw new UnsupportedOperationException();
-    }
-
-}
\ No newline at end of file
Index: vendor/branch/5058A_Claro/packages/services/Telecomm/src/com/mediatek/telecom/TelecomUtils.java
===================================================================
--- vendor/branch/5058A_Claro/packages/services/Telecomm/src/com/mediatek/telecom/TelecomUtils.java	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/services/Telecomm/src/com/mediatek/telecom/TelecomUtils.java	(revision 3018)
@@ -1,902 +0,0 @@
-
-package com.mediatek.telecom;
-
-import android.app.AppOpsManager;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.location.CountryDetector;
-import android.net.Uri;
-import android.net.sip.SipManager;
-import android.os.Binder;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.IBinder;
-import android.os.Looper;
-import android.os.Message;
-import android.os.RemoteException;
-import android.os.ServiceManager;
-import android.os.SystemProperties;
-import android.os.UserHandle;
-import android.provider.Settings;
-import android.telecom.PhoneAccount;
-import android.telecom.PhoneAccountHandle;
-import android.telecom.TelecomManager;
-import android.telephony.PhoneNumberUtils;
-import android.telephony.ServiceState;
-import android.telephony.SubscriptionInfo;
-import android.telephony.SubscriptionManager;
-import android.telephony.TelephonyManager;
-import android.text.TextUtils;
-
-import android.widget.Toast;
-import com.android.i18n.phonenumbers.NumberParseException;
-import com.android.i18n.phonenumbers.PhoneNumberUtil;
-import com.android.i18n.phonenumbers.Phonenumber.PhoneNumber;
-import com.android.internal.telephony.ITelephony;
-import com.android.internal.telephony.Phone;
-import com.android.internal.telephony.PhoneConstants;
-import com.android.internal.telephony.PhoneFactory;
-import com.android.server.telecom.Call;
-import com.android.server.telecom.Constants;
-import com.android.server.telecom.Log;
-import com.android.server.telecom.PhoneAccountRegistrar;
-import com.android.server.telecom.TelecomSystem;
-import com.android.server.telecom.TelephonyUtil;
-import com.android.server.telecom.components.ErrorDialogActivity;
-import com.google.android.collect.Sets;
-import com.mediatek.common.dm.DmAgent;
-import com.mediatek.cta.CtaUtils;
-import com.mediatek.internal.telephony.ITelephonyEx;
-
-import com.mediatek.telephony.TelephonyManagerEx;
-
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Objects;
-import java.util.Set;
-
-public class TelecomUtils {
-
-    private static final String TAG = TelecomUtils.class.getSimpleName();
-    // add to enable specify a slot to MO.
-    // using cmd:adb shell am start -a android.intent.action.CALL
-    // -d tel:10010 --ei com.android.phone.extra.slot 1
-    public static final String EXTRA_SLOT = "com.android.phone.extra.slot";
-
-    // Add temp feature option for ip dial.
-    //public static final boolean MTK_IP_PREFIX_SUPPORT = true;
-    public static final boolean MTK_IP_PREFIX_SUPPORT = false;
-
-    private static final Object sLockObject = new Object();
-
-    // M: Add for upgrade debug.
-    private static boolean sUpgradeLoggingEnabled = false;
-
-    /*
-     * M: get initial number from intent.
-     */
-    public static String getInitialNumber(Context context, Intent intent) {
-        Log.d(TAG, "getInitialNumber(): " + intent);
-
-        String action = intent.getAction();
-        if (TextUtils.isEmpty(action)) {
-            return "";
-        }
-
-        // If the EXTRA_ACTUAL_NUMBER_TO_DIAL extra is present, get the phone
-        // number from there.  (That extra takes precedence over the actual data
-        // included in the intent.)
-        if (intent.hasExtra(Constants.EXTRA_ACTUAL_NUMBER_TO_DIAL)) {
-            String actualNumberToDial =
-                intent.getStringExtra(Constants.EXTRA_ACTUAL_NUMBER_TO_DIAL);
-            return actualNumberToDial;
-        }
-
-        return PhoneNumberUtils.getNumberFromIntent(intent, context);
-    }
-
-    public static boolean isDMLocked() {
-        boolean locked = false;
-        try {
-            IBinder binder = ServiceManager.getService("DmAgent");
-            DmAgent agent = null;
-            if (binder != null) {
-                agent = DmAgent.Stub.asInterface(binder);
-            }
-            if (agent != null) {
-                locked = agent.isLockFlagSet();
-            }
-        } catch (RemoteException e) {
-            e.printStackTrace();
-        }
-
-        return locked;
-    }
-
-
-    /// M: For Ip dial @{
-    /**
-     * This function used to check whether the dial request is a Ip dial request.
-     * If airplane mode is on, do not check ip prefix.
-     * @param context
-     * @param call
-     * @param extras
-     * @return
-     */
-    public static boolean isIpDialRequest(Context context, Call call, Bundle extras) {
-        return  (TelecomUtils.MTK_IP_PREFIX_SUPPORT
-                && extras.getBoolean(Constants.EXTRA_IS_IP_DIAL, false)
-                && call.getHandle() != null
-                && PhoneAccount.SCHEME_TEL.equals(call.getHandle().getScheme())
-                && !TelephonyUtil.shouldProcessAsEmergency(context, call.getHandle())
-                && !isAirPlaneModeOn(context));
-    }
-
-    /**
-     * This function used to get certain phoneAccount for Ip dial.
-     * simAccounts.size() == 0, => no sim account, set null.
-     * simAccounts.size() == 1, => only one sim account, use it.
-     * simAccounts.size()  > 1, => if valid default account exist, do nothing; or set null(select)
-     * @param simAccounts
-     * @param defaultPhoneAccoutHandle
-     * @return
-     */
-    public static PhoneAccountHandle getPhoneAccountForIpDial(List<PhoneAccountHandle> simAccounts,
-            PhoneAccountHandle defaultPhoneAccoutHandle) {
-        PhoneAccountHandle result = defaultPhoneAccoutHandle;
-        if (simAccounts == null || simAccounts.isEmpty()) {
-            result = null;
-        } else if (simAccounts.size() == 1) {
-            result = simAccounts.get(0);
-        } else if (result != null && !simAccounts.contains(result)) {
-            result = null;
-        }
-        Log.d(TAG, "getPhoneAccountForIpDial()...account changed: %s => %s",
-                defaultPhoneAccoutHandle, result);
-        return result;
-    }
-
-    /**
-     * to check if the airplane mode is on or off.
-     * @param ctx
-     * @return boolean  true is on
-     */
-    public static boolean isAirPlaneModeOn(Context ctx) {
-        int airplaneMode = Settings.Global.getInt(ctx.getContentResolver(),
-                Settings.Global.AIRPLANE_MODE_ON, 0);
-        if (airplaneMode == 0) {
-            return false;
-        } else {
-            return true;
-        }
-    }
-
-    /**
-     * This function used to set ip prefix for certain call.
-     * @param context
-     * @param call
-     * @return true for success, false for fail.
-     */
-    public static boolean handleIpPrefixForCall(Context context, Call call) {
-        boolean result = true;
-        if (call.isIpCall() && call.getTargetPhoneAccountEx() != null) {
-            String ipPrefix = getIpPrefix(context, call.getTargetPhoneAccountEx());
-            Log.d(TAG, "handleIpPrefixForCall()...ipPrefix = %s", ipPrefix);
-            // If radio is off, do not go to Call Setting;
-            // just pass it to Telephony, which will return error message. see ALPS02400819;
-            if (TextUtils.isEmpty(ipPrefix)
-                    && TelecomUtils.isRadioOn(call.getTargetPhoneAccountEx(), context)) {
-                Log.d(TAG, "handleIpPrefixForCall()...go to ip prefix setting");
-                TelecomUtils.gotoIpPrefixSetting(context, call.getTargetPhoneAccountEx());
-                result = false;
-            } else {
-                Uri newHandle = TelecomUtils.rebuildHandleWithIpPrefix(context,
-                        call.getHandle(), ipPrefix);
-                call.setHandle(newHandle, TelecomManager.PRESENTATION_ALLOWED);
-                Log.d(TAG, "handleIpPrefixForCall()...handle changed: %s => %s", call.getHandle(),
-                        newHandle);
-                result = true;
-            }
-        }
-        Log.d(TAG, "handleIpPrefixForCall()...result = %s", result);
-        return result;
-    }
-
-    /**
-     * This function used to get ip prefix based on certain phoneAccountHandle.
-     * @param context
-     * @param account
-     * @return
-     */
-    public static String getIpPrefix(Context context, PhoneAccountHandle account) {
-        String ipPrefix = "";
-        if (context != null && account != null) {
-            int subId = getSubIdByAccount(context, account);
-            if (SubscriptionManager.isValidSubscriptionId(subId)) {
-                ipPrefix = Settings.System.getString(context.getContentResolver(),
-                        "ipprefix" + subId);
-            }
-        }
-        return ipPrefix;
-    }
-
-    /**
-     * This function used to guide user to setting UI to set ip prefix.
-     * @param context
-     * @param account
-     */
-    public static void gotoIpPrefixSetting(Context context, PhoneAccountHandle account) {
-        if (context != null && account != null) {
-            int subId = getSubIdByAccount(context, account);
-            final Intent intent = new Intent(Intent.ACTION_MAIN);
-            intent.setClassName(Constants.PHONE_PACKAGE, Constants.IP_PREFIX_SETTING_CLASS_NAME);
-            intent.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId);
-            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
-            context.startActivity(intent);
-        }
-    }
-
-    /**
-     * This function used to get sub id based on certain phoneAccountHandle.
-     * @param context
-     * @param accountHandle
-     * @return
-     * @deprecated
-     */
-    public static int getSubIdByAccount(Context context, PhoneAccountHandle accountHandle) {
-        return getSubId(context, accountHandle);
-    }
-
-    /**
-     * check the radio is on or off by phone account.
-     *
-     * @param PhoneAccountHandle the selected phone account
-     * @return true if radio on
-     */
-    public static boolean isRadioOn(PhoneAccountHandle account, Context context) {
-        int subId = getSubIdByAccount(context, account);
-        Log.d(TAG, "[isRadioOn]subId:" + subId);
-        boolean isRadioOn = true;
-        final ITelephony iTel = ITelephony.Stub.asInterface(
-                ServiceManager.getService(Context.TELEPHONY_SERVICE));
-        if (iTel != null) {
-            try {
-                isRadioOn = iTel.isRadioOnForSubscriber(subId, context.getPackageName());
-            } catch (RemoteException e) {
-                Log.d(TAG, "[isRadioOn] failed to get radio state for sub " + subId);
-                isRadioOn = false;
-            }
-        } else {
-            Log.d(TAG, "[isRadioOn]failed to check radio");
-        }
-        Log.d(TAG, "[isRadioOn]isRadioOn:" + isRadioOn);
-        return isRadioOn;
-    }
-
-    /**
-     * rebuild handle with ip prefix; if ip prefix is null, return default handle.
-     * @param context
-     * @param defaultHandle
-     * @param ipPrefix
-     * @return
-     */
-    public static Uri rebuildHandleWithIpPrefix(Context context, Uri defaultHandle,
-            String ipPrefix) {
-        Uri resultHandle = defaultHandle;
-        if (context != null && !TextUtils.isEmpty(ipPrefix) && defaultHandle != null) {
-            String uriString = defaultHandle.getSchemeSpecificPart();
-            if (uriString.indexOf(ipPrefix) < 0) {
-                uriString = ipPrefix + filtCountryCode(context, uriString);
-            }
-            resultHandle = Uri.fromParts(defaultHandle.getScheme(), uriString, null);
-        }
-        return resultHandle;
-    }
-
-    /**
-     * remove the country code from the number in international format.
-     *
-     * @param number
-     * @return
-     */
-    private static String filtCountryCode(Context context, String number) {
-        String countryIso = null;
-        if (!TextUtils.isEmpty(number) && number.contains("+")) {
-            try {
-                CountryDetector mDetector = (CountryDetector) context
-                        .getSystemService(Context.COUNTRY_DETECTOR);
-                PhoneNumberUtil numUtil = PhoneNumberUtil.getInstance();
-                if (mDetector != null && mDetector.detectCountry() != null) {
-                    countryIso = mDetector.detectCountry().getCountryIso();
-                } else {
-                    countryIso = context.getResources().getConfiguration().locale
-                            .getCountry();
-                }
-                PhoneNumber num = numUtil.parse(number, countryIso);
-                return num == null ? number : String.valueOf(num
-                        .getNationalNumber());
-            } catch (NumberParseException e) {
-                e.printStackTrace();
-                Log.d(TAG, "parse phone number ... " + e);
-            }
-        }
-        return number;
-    }
-    /// @}
-
-    /**
-     * Update default account handle when there has a valid suggested account
-     * handle which not same with default.
-     * @param extras The extra got from Intent.
-     * @param accounts The all available accounts for current call.
-     * @param defaultAccountHandle The default account handle.
-     * @return newAccountHandle
-     */
-    public static boolean shouldShowAccountSuggestion(Bundle extras,
-            List<PhoneAccountHandle> accounts, PhoneAccountHandle defaultAccountHandle) {
-        boolean shouldShowAccountSuggestion = false;
-        PhoneAccountHandle suggestedAccountHandle = getSuggestedPhoneAccountHandle(extras);
-
-        if (accounts != null && defaultAccountHandle != null && suggestedAccountHandle != null
-                && accounts.contains(suggestedAccountHandle)
-                && !suggestedAccountHandle.equals(defaultAccountHandle)) {
-            shouldShowAccountSuggestion = true;
-        }
-        Log.d(TAG, "shouldShowAccountSuggestion: " + shouldShowAccountSuggestion);
-        return shouldShowAccountSuggestion;
-    }
-
-    /**
-     * Added for suggesting phone account feature.
-     * @param extras The extra got from Intent.
-     * @param accounts The available PhoneAccounts.
-     * @return The available suggested PhoneAccountHandle.
-     */
-    public static PhoneAccountHandle getSuggestedPhoneAccountHandle(Bundle extras) {
-        PhoneAccountHandle suggestedAccountHandle = null;
-        if (extras != null) {
-            suggestedAccountHandle = extras
-                    .getParcelable(TelecomManagerEx.EXTRA_SUGGESTED_PHONE_ACCOUNT_HANDLE);
-        }
-        Log.d(TAG, "Suggested PhoneAccountHandle is " + suggestedAccountHandle);
-        return suggestedAccountHandle;
-    }
-
-    /**
-     * original defined in CallsManager, we add it here for prevent MMI call when current is guest user
-     * however, we still keep the original implementation in CallsManager.
-     * @param handle
-     * @return
-     */
-    public static boolean isPotentialMMICode(Uri handle) {
-        return (handle != null && handle.getSchemeSpecificPart() != null
-                && handle.getSchemeSpecificPart().contains("#"));
-    }
-
-    /**
-     * Check if the account has registered to network.
-     * @param context The context for get service.
-     * @param account The account for check.
-     * @return A boolean indicates the check result.
-     */
-    static boolean isAccountInService(Context context, PhoneAccount account) {
-        boolean result = false;
-        ITelephonyEx iTelephonyEx = ITelephonyEx.Stub.asInterface(ServiceManager
-                .getService("phoneEx"));
-        TelephonyManager tem = (TelephonyManager) context
-                .getSystemService(Context.TELEPHONY_SERVICE);
-        if (iTelephonyEx == null) {
-            Log.d(TAG, "iTelephonyEx is Null.");
-            return result;
-        }
-
-        int subId = -1;
-        try {
-            subId = tem.getSubIdForPhoneAccount(account);
-        } catch (NumberFormatException e) {
-            Log.d(TAG, "account sub id error.");
-            return result;
-        }
-
-        ServiceState ss = null;
-        Log.d(TAG, "isAccountInService subId = " + subId);
-        try {
-            ss = ServiceState.newFromBundle(iTelephonyEx.getServiceState(subId));
-            Log.d(TAG, "isAccountInService = " + ss);
-            if (ss.getVoiceRegState() == ServiceState.STATE_IN_SERVICE) {
-                result = true;
-            }
-        } catch (RemoteException e) {
-            e.printStackTrace();
-            result = false;
-        }
-        Log.d(TAG, "isAccountInService account = " + account + " result = " + result);
-        return result;
-    }
-
-    /**
-     * Check if a account support MMI code.
-     *
-     * @return A boolean indicates the check result.
-     */
-    public static boolean isSupportMMICode(PhoneAccountHandle phoneAccountHandle) {
-        return !isCdmaPhoneAccount(phoneAccountHandle);
-    }
-
-    /**
-     * M: CC: For 3G VT only
-     * @return
-     */
-    public static boolean isSupport3GVT() {
-        return SystemProperties.get("ro.mtk_vt3g324m_support").equals("1");
-    }
-
-    /**
-     * This function used to get PhoneAccountHandle(s) which support VoLTE.
-     * @return
-     */
-    public static List<PhoneAccountHandle> getVoltePhoneAccountHandles() {
-        List<PhoneAccountHandle> phoneAccountHandles = new ArrayList<PhoneAccountHandle>();
-        PhoneAccountRegistrar phoneAccountRegistrar = TelecomSystem.getInstance().
-                getPhoneAccountRegistrar();
-        if (phoneAccountRegistrar != null) {
-            phoneAccountHandles.addAll(phoneAccountRegistrar.getVolteCallCapablePhoneAccounts());
-        }
-        return phoneAccountHandles;
-    }
-
-    /**
-     * This function used to get PhoneAccountHandle(s), which is sim based.
-     * @return
-     */
-    public static List<PhoneAccountHandle> getSimPhoneAccountHandles() {
-        List<PhoneAccountHandle> simPhoneAccountHandles = new ArrayList<PhoneAccountHandle>();
-        PhoneAccountRegistrar phoneAccountRegistrar = TelecomSystem.getInstance().
-                getPhoneAccountRegistrar();
-        if (phoneAccountRegistrar != null) {
-            simPhoneAccountHandles.addAll(
-                    phoneAccountRegistrar.getSimPhoneAccountsOfCurrentUser());
-        }
-        return simPhoneAccountHandles;
-    }
-
-    /**
-     * This function used to get PhoneAccountHandle by slot id.
-     * @param context
-     * @param slotId
-     * @return
-     */
-    public static PhoneAccountHandle getPhoneAccountHandleWithSlotId(Context context,
-            int slotId, PhoneAccountHandle defaultPhoneAccountHandle) {
-        PhoneAccountHandle result = defaultPhoneAccountHandle;
-        if (SubscriptionManager.isValidSlotId(slotId)) {
-            SubscriptionInfo subInfo = SubscriptionManager.from(context)
-                    .getActiveSubscriptionInfoForSimSlotIndex(slotId);
-            List<PhoneAccountHandle> phoneAccountHandles = getSimPhoneAccountHandles();
-            if (subInfo != null && phoneAccountHandles != null && !phoneAccountHandles.isEmpty()) {
-                for (PhoneAccountHandle accountHandle : phoneAccountHandles) {
-                    if (Objects.equals(accountHandle.getId(), subInfo.getIccId())) {
-                        result = accountHandle;
-                        break;
-                    }
-                }
-            }
-        }
-        Log.d(TAG, "getPhoneAccountHandleWithSlotId()... slotId = %s; account changed: %s => %s",
-                slotId, defaultPhoneAccountHandle, result);
-        return result;
-    }
-
-    /**
-     * This function used to start ErrorDialogActivity to show error message.
-     * @param context
-     * @param msgId
-     */
-    public static void showErrorDialog(Context context, int msgId) {
-        if (context == null) {
-            return;
-        }
-        final Intent errorIntent = new Intent(context, ErrorDialogActivity.class);
-        errorIntent.putExtra(ErrorDialogActivity.ERROR_MESSAGE_ID_EXTRA, msgId);
-        errorIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivityAsUser(errorIntent, UserHandle.CURRENT);
-    }
-
-    /**
-     * To make the phoneaccount selection UI
-     * show the accounts in ascend sequence,
-     * we sort the PhoneAccount by slotId ascend.
-     * since slotId is start from 0, so we only need to
-     * put the PhoneAccount object to an ArrayList with
-     * the index as its slotId.
-     */
-    public static void sortPhoneAccountsBySortKeyAscend(List<PhoneAccount> phoneAccounts){
-        if (phoneAccounts == null || phoneAccounts.size() <= 1) {
-            return ;
-        }
-
-        List<PhoneAccount> sortedList = new ArrayList<PhoneAccount>();
-        sortedList.addAll(phoneAccounts);
-
-        Collections.sort(sortedList, new java.util.Comparator<PhoneAccount>(){
-            @Override
-            public int compare(PhoneAccount a, PhoneAccount b) {
-                /// M: fix CR:ALPS02837867,selectAccount show order error about sim2,sim1.
-                /// add phoneId as new OrderKey about PhoneAccount.@{
-                int aSortKey = (a.getExtras() == null ? Integer.MAX_VALUE : a.getExtras().getInt(
-                        PhoneAccount.EXTRA_PHONE_ACCOUNT_SORT_KEY, Integer.MAX_VALUE));
-                int bSortKey = (b.getExtras() == null ? Integer.MAX_VALUE : b.getExtras().getInt(
-                        PhoneAccount.EXTRA_PHONE_ACCOUNT_SORT_KEY, Integer.MAX_VALUE));
-                return aSortKey - bSortKey;
-                /// @}
-            }
-        });
-
-        if (sortedList.size() > 0) {
-            phoneAccounts.clear();
-            phoneAccounts.addAll(sortedList);
-        }
-    }
-
-    private static final Set<String> SINGLETON_VILTE_OPERATORS =
-            Sets.newArraySet("46000", "46002", "46004", "46007", "46008");
-
-    public static boolean supportsSingletonVilteCall(
-            PhoneAccountHandle handle) {
-        PhoneAccount phoneAccount = TelecomSystem.getInstance().getPhoneAccountRegistrar()
-                .getPhoneAccountUnchecked(handle);
-        return SINGLETON_VILTE_OPERATORS.contains(getOperatorFromPhoneAccount(phoneAccount));
-    }
-
-    private static String getOperatorFromPhoneAccount(PhoneAccount phoneAccount) {
-        /// TODO: 2 binder calls required for this action. We might carry the subId
-        /// in the PhoneAccount to reduce binder calls.
-        TelephonyManager tm = TelephonyManager.from(TelecomSystem.getInstance().getContext());
-        if (tm != null) {
-            int subId = tm.getSubIdForPhoneAccount(phoneAccount);
-            if (subId != SubscriptionManager.INVALID_SUBSCRIPTION_ID) {
-                return tm.getSimOperator(subId);
-            }
-        }
-        return "";
-    }
-    /// @}
-
-    /**
-     * Get subId with phoneAccountHandle
-     * @param context
-     * @param phoneAccountHandle
-     * @return subId
-     */
-    public static int getSubId(Context context, PhoneAccountHandle phoneAccountHandle) {
-        int subId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
-        if (context == null || phoneAccountHandle == null) {
-            return subId;
-        }
-        TelephonyManager tem = (TelephonyManager) context
-                .getSystemService(Context.TELEPHONY_SERVICE);
-        if (tem != null) {
-            try {
-                PhoneAccount account = TelecomSystem.getInstance().getPhoneAccountRegistrar()
-                        .getPhoneAccountUnchecked(phoneAccountHandle);
-                if (account != null
-                        && account.hasCapabilities(PhoneAccount.CAPABILITY_SIM_SUBSCRIPTION)) {
-                    subId = tem.getSubIdForPhoneAccount(account);
-                } else if (account == null) {
-                    /// M: [ALPS02753678]In SELDOM case, like ALPS02753678 demonstrated, The
-                    /// PhoneAccount has not been registered when it was reported to Telecom.
-                    /// In such scenario, we have to double confirming that whether can we
-                    /// retrieve the subId in some other way instead, like via SubscriptionManager.
-                    Log.w(TAG, "[getPhoneId]PhoneAccount not registered," +
-                            " try SubscriptionManager, the iccId = " + phoneAccountHandle.getId());
-                    /// M: FIXME: It's NOT right to presume the PhoneAccount id == iccId.
-                    SubscriptionInfo subscriptionInfo = SubscriptionManager.from(context)
-                            .getSubscriptionInfoForIccId(phoneAccountHandle.getId());
-                    if (subscriptionInfo != null) {
-                        subId = subscriptionInfo.getSubscriptionId();
-                        Log.d(TAG, "[getPhoneId]get subId from SubscriptionManager: " + subId);
-                    }
-                    /// @}
-                } else {
-                    /// M: do nothing for account has no CAPABILITY_SIM_SUBSCRIPTION case.
-                }
-            } catch(Exception e) {
-                Log.d(TAG, "getSubIdForPhoneAccount error: " + e.toString());
-                e.printStackTrace();
-            }
-        }
-        return subId;
-    }
-
-    /**
-     * @deprecated
-     * Should use TelecomUtils.isInDsdaMode() instead.
-     * @return
-     */
-    public static boolean isSvlte() {
-        return (SystemProperties.get("ro.boot.opt_c2k_lte_mode").equals("1"));
-    }
-
-    /**
-     * M: [CTA] checking conference permission.
-     * Don't crash because other ongoing calls would be effected.
-     *
-     * @param permission the permission to be checked.
-     * @param msg the debug message display in log.
-     * @return if the caller has the permission
-     */
-    public static boolean checkCallingCtaPermission(String permission, String msg) {
-        try {
-            // The boolean return value is useless.
-            CtaUtils.enforceCheckPermission(permission, msg);
-        } catch (SecurityException e) {
-            Log.e(TAG, e, "[checkCallerPermission]CTA Permission checking failed, " +
-                    "Permission: "+ permission);
-            return false;
-        }
-        return true;
-    }
-
-    /**
-     * M: [CTA] checking conference permission.
-     * In InCallAdapter, the CtaUtils can't retrieve the package name by itself.
-     * Because, the Binder.getCallingPid() will return 0 there. And it's not possible to
-     * the the package name without right pid. So we have to pass package name explicitly.
-     *
-     * @param permission the permission to be checked.
-     * @param callingPackageName the caller's package name.
-     * @param msg the debug message display in log.
-     */
-    public static boolean checkCallingCtaPermission(String permission,
-                                                    String callingPackageName, String msg) {
-        try {
-            // The boolean return value is useless.
-            CtaUtils.enforceCheckPermission(callingPackageName, permission, msg);
-        } catch (SecurityException e) {
-            Log.e(TAG, e, "[checkCallerPermission]CTA Permission checking failed, " +
-                    "Permission: "+ permission);
-            return false;
-        }
-        return true;
-    }
-
-    /**
-     * M: Check caller's permission. Only for both CTA and AOSP permission checking.
-     * Can't use CTA permission checking here because it would still valid even in
-     * Non-CTA projects.
-     *
-     * @param context The application context
-     * @param permission The permission to check
-     * @param callingPackageName The caller's package name
-     * @param msg The message print in the log if failed.
-     * @return has permission or not.
-     */
-    public static boolean checkCallingPermission(Context context, String permission,
-                                                 String callingPackageName, String msg) {
-        try {
-            /// This checking is only valid for SDK >= 23 callers. For earlier ones, it would pass
-            /// directly.
-            context.enforcePermission(permission,
-                    0/*pid is not required for checking caller permission*/,
-                    Binder.getCallingUid(), msg);
-        } catch (SecurityException e) {
-            Log.e(TAG, e, "[checkCallerPermission]Permission checking failed for" +
-                    " SDK level >= 23 caller. Permission: "+ permission);
-            return false;
-        }
-
-        /// Reach here means a SDK >= 23 caller passed the checking OR the caller just a SDK < 23
-        /// one. So we need to double check with the AppOpManager.
-        AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(
-                Context.APP_OPS_SERVICE);
-        if (appOpsManager == null) {
-            Log.w(TAG, "[checkCallingPermission]Failed to get AppOpsManager");
-            return false;
-        }
-        String op = AppOpsManager.permissionToOp(permission);
-        int opMode = appOpsManager.noteOp(op, Binder.getCallingUid(), callingPackageName);
-        Log.d(TAG, "[checkCallingPermission]permission: " + permission + " -> op: " + op
-                + ", checking mode = " + opMode);
-        return opMode == AppOpsManager.MODE_ALLOWED;
-    }
-
-    /// M: If there is anything need to be done in the main thread, try to extend this cluster.
-    /// Aware!!! Do carefully error handling here to avoid system crash. @{
-    private static Toast sToast;
-    private static final int SHOW_TOAST = 1;
-    private static WeakReference<Handler> sRefHandler = new WeakReference<Handler>(null);
-    private static Handler getMainThreadHandler() {
-        synchronized (sLockObject) {
-            if (sRefHandler == null || sRefHandler.get() == null) {
-                sRefHandler = new WeakReference<Handler>(new Handler(Looper.getMainLooper()) {
-                    @Override
-                    public void handleMessage(Message msg) {
-                        if (msg.what == SHOW_TOAST) {
-                            Context context = TelecomSystem.getInstance().getContext();
-                            if (context == null) {
-                                Log.w(TAG, "[handleMessage]SHOW_TOAST, context null");
-                                return;
-                            }
-                            String message = (String) msg.obj;
-                            /// This method will be running only in main thread.
-                            /// So no need synchronized creating this instance.
-                            if (sToast == null) {
-                                sToast = Toast.makeText(context, message, Toast.LENGTH_LONG);
-                            } else {
-                                sToast.setText(message);
-                            }
-                            sToast.show();
-                        }
-                    }
-                });
-            }
-            return sRefHandler.get();
-        }
-    }
-    /// @}
-
-    /**
-     * M: A wrapper for show Toast in Telecom.
-     * This helper will avoid the flooding toast issue.
-     * For example, Toast.makeText().show() many times.
-     * TODO: Change all the Telecom toast here.
-     *
-     * @param resId the toast text resId.
-     */
-    public static void showToast(int resId) {
-        showToast(TelecomSystem.getInstance().getContext().getString(resId));
-    }
-
-    public static void showToast(String message) {
-        if (TextUtils.isEmpty(message)) {
-            Log.w(TAG, "Empty message for Toast. ", new Throwable());
-            return;
-        }
-        Handler handler = getMainThreadHandler();
-        Message msg = handler.obtainMessage(SHOW_TOAST);
-        msg.obj = message;
-        msg.sendToTarget();
-    }
-
-    /**
-     * M: ALPS02822905
-     * query VoIP is supported or not
-     * @param context
-     */
-    public static boolean isVoipSupported(Context context) {
-        return SipManager.isVoipSupported(context) &&
-                context.getResources().getBoolean(
-                        com.android.internal.R.bool.config_built_in_sip_phone) &&
-                context.getResources().getBoolean(
-                        com.android.internal.R.bool.config_voice_capable);
-    }
-
-    /**
-     * M: judge dsda mode
-     * TODO: Can we skip some calling to TelephonyManagerEx#isInDsdaMode() ?
-     * It would be good if we reduce the binder calls.
-     */
-    public static boolean isInDsdaMode() {
-        return TelephonyManagerEx.getDefault().isInDsdaMode();
-    }
-
-    /**
-     * M: Get the number from call.
-     * This number is different with call.getPhoneNumber() which is retrieved from CallerInfo.
-     */
-    public static String getNumberFromCall(Call call) {
-        if (call != null) {
-            Uri handle = call.getHandle();
-            if (handle != null) {
-                return handle.getSchemeSpecificPart();
-            }
-        }
-        return "";
-    }
-
-    /**
-     * M: check whether a PhoneAccount is a CDMA account.
-     *
-     * @param phoneAccountHandle the phoneAccount might not registered.
-     * @return true if the account is a CDMA account.
-     */
-    public static boolean isCdmaPhoneAccount(PhoneAccountHandle phoneAccountHandle) {
-        if (phoneAccountHandle == null) {
-            return false;
-        }
-        PhoneAccount phoneAccount = TelecomSystem.getInstance().getPhoneAccountRegistrar()
-                .getPhoneAccountUnchecked(phoneAccountHandle);
-        if (phoneAccount != null) {
-            return phoneAccount.hasCapabilities(PhoneAccount.CAPABILITY_CDMA_CALL_PROVIDER);
-        }
-
-        /// In else case, the PhoneAccount haven't been registered.
-        /// The phoneAccountHandle id will be the phoneId in such case
-        /// The only way to check the CDMA capability is to use the Sub APIs.
-        String handleId = phoneAccountHandle.getId();
-        if (handleId != null && handleId.length() < 2 && TextUtils.isDigitsOnly(handleId)) {
-            /// The PhoneAccount id is the phone Id in some special case.
-            return getPhoneTypeByPhoneId(Integer.parseInt(handleId))
-                    == PhoneConstants.PHONE_TYPE_CDMA;
-        }
-
-        /// The flow shouldn't arrive here. at least for CDMA.
-        /// We should assert here, but the issues are horrible.
-        return false;
-    }
-
-    /**
-     * M: Get the PhoneType by phoneId.
-     * This method will call the Telephony/Sub FWK to check the phone type.
-     * Don't rely on this method because it's a little bit dangerous.
-     * Might have unexpected dead lock because of the TelephonyManager and phone thread.
-     *
-     * @param phoneId the phone id
-     * @return the phone type
-     */
-    private static int getPhoneTypeByPhoneId(int phoneId) {
-        int subId = SubscriptionManager.getSubIdUsingPhoneId(phoneId);
-        if (subId == SubscriptionManager.INVALID_SUBSCRIPTION_ID) {
-            Log.w(TAG, "getPhoneType, Invalid subId got with phoneId:" + phoneId);
-            return PhoneConstants.PHONE_TYPE_NONE;
-        }
-
-        TelephonyManager tem =
-                (TelephonyManager) TelecomSystem.getInstance().getContext()
-                        .getSystemService(Context.TELEPHONY_SERVICE);
-        int type = tem.getCurrentPhoneType(subId);
-        Log.d(TAG, "getPhoneType, phoneId:"
-                + phoneId + ", subId:" + subId + ", phone type:" + type);
-        return type;
-    }
-
-    /**
-     * M: A helper to covert Binder to printable string.
-     * @param b Bundle to be covert
-     * @return printable string of the Bundle content.
-     */
-    public static String bundleToString(Bundle b) {
-        if (b == null) {
-            return "null";
-        }
-        StringBuilder sb = new StringBuilder("Bundle(").append(b.hashCode()).append("){");
-        for (String key : b.keySet()) {
-            Object value = b.get(key);
-            sb.append(key).append(": ")
-                    .append(value == null ? "null" : value.toString())
-                    .append(", ");
-        }
-        sb.append("}");
-        return sb.toString();
-    }
-
-    /**
-     * M: MTK would save some configurations in preferences, this method retrieves the
-     * SharedPreferences instance.
-     * @return the SharedPreference instance or null.
-     */
-    public static SharedPreferences getExtendedPreferences() {
-        Context context = TelecomSystem.getInstance().getContext();
-        if (context == null) {
-            return null;
-        }
-        return context.getSharedPreferences("pref_ext.xml", Context.MODE_PRIVATE);
-    }
-
-    /**
-     * M: Add for upgrade debug.
-     */
-    public static boolean getUpgradeLoggingEnabled() {
-        return sUpgradeLoggingEnabled;
-    }
-
-    /**
-     * M: Add for upgrade debug.
-     */
-    public static void setUpgradeLoggingEnabled(boolean enabled) {
-        sUpgradeLoggingEnabled = enabled;
-    }
-}
\ No newline at end of file
Index: vendor/branch/5058A_Claro/packages/services/Telephony/src/com/android/phone/settings/VoicemailSettingsActivity.java
===================================================================
--- vendor/branch/5058A_Claro/packages/services/Telephony/src/com/android/phone/settings/VoicemailSettingsActivity.java	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/services/Telephony/src/com/android/phone/settings/VoicemailSettingsActivity.java	(revision 3018)
@@ -1,1259 +0,0 @@
-/**
- * Copyright (C) 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License
- */
-
-package com.android.phone.settings;
-
-import android.app.Dialog;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.database.Cursor;
-import android.os.AsyncResult;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-import android.preference.CheckBoxPreference;
-import android.preference.Preference;
-import android.preference.PreferenceActivity;
-import android.preference.PreferenceScreen;
-import android.preference.SwitchPreference;
-import android.provider.ContactsContract.CommonDataKinds;
-import android.telecom.PhoneAccountHandle;
-import android.text.BidiFormatter;
-import android.text.TextDirectionHeuristics;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.MenuItem;
-import android.widget.ListAdapter;
-import com.android.internal.telephony.CallForwardInfo;
-import com.android.internal.telephony.Phone;
-import com.android.internal.telephony.PhoneConstants;
-import com.android.phone.EditPhoneNumberPreference;
-import com.android.phone.PhoneGlobals;
-import com.android.phone.PhoneUtils;
-import com.android.phone.R;
-import com.android.phone.SubscriptionInfoHelper;
-import com.android.phone.vvm.omtp.OmtpConstants;
-import com.android.phone.vvm.omtp.OmtpVvmCarrierConfigHelper;
-import com.android.phone.vvm.omtp.VisualVoicemailPreferences;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Map;
-
-public class VoicemailSettingsActivity extends PreferenceActivity
-        implements DialogInterface.OnClickListener,
-                Preference.OnPreferenceChangeListener,
-                EditPhoneNumberPreference.OnDialogClosedListener,
-                EditPhoneNumberPreference.GetDefaultNumberListener,
-                VoicemailRingtonePreference.VoicemailRingtoneNameChangeListener {
-    private static final String LOG_TAG = VoicemailSettingsActivity.class.getSimpleName();
-    private static final boolean DBG = true;//(PhoneGlobals.DBG_LEVEL >= 2);
-
-    /**
-     * Intent action to bring up Voicemail Provider settings
-     * DO NOT RENAME. There are existing apps which use this intent value.
-     */
-    public static final String ACTION_ADD_VOICEMAIL =
-            "com.android.phone.CallFeaturesSetting.ADD_VOICEMAIL";
-
-    /**
-     * Intent action to bring up the {@code VoicemailSettingsActivity}.
-     * DO NOT RENAME. There are existing apps which use this intent value.
-     */
-    public static final String ACTION_CONFIGURE_VOICEMAIL =
-            "com.android.phone.CallFeaturesSetting.CONFIGURE_VOICEMAIL";
-
-    // Extra put in the return from VM provider config containing voicemail number to set
-    public static final String VM_NUMBER_EXTRA = "com.android.phone.VoicemailNumber";
-    // Extra put in the return from VM provider config containing call forwarding number to set
-    public static final String FWD_NUMBER_EXTRA = "com.android.phone.ForwardingNumber";
-    // Extra put in the return from VM provider config containing call forwarding number to set
-    public static final String FWD_NUMBER_TIME_EXTRA = "com.android.phone.ForwardingNumberTime";
-    // If the VM provider returns non null value in this extra we will force the user to
-    // choose another VM provider
-    public static final String SIGNOUT_EXTRA = "com.android.phone.Signout";
-
-    /**
-     * String Extra put into ACTION_ADD_VOICEMAIL call to indicate which provider should be hidden
-     * in the list of providers presented to the user. This allows a provider which is being
-     * disabled (e.g. GV user logging out) to force the user to pick some other provider.
-     */
-    public static final String IGNORE_PROVIDER_EXTRA = "com.android.phone.ProviderToIgnore";
-
-    /**
-     * String Extra put into ACTION_ADD_VOICEMAIL to indicate that the voicemail setup screen should
-     * be opened.
-     */
-    public static final String SETUP_VOICEMAIL_EXTRA = "com.android.phone.SetupVoicemail";
-
-    // TODO: Define these preference keys in XML.
-    private static final String BUTTON_VOICEMAIL_KEY = "button_voicemail_key";
-    private static final String BUTTON_VOICEMAIL_PROVIDER_KEY = "button_voicemail_provider_key";
-    private static final String BUTTON_VOICEMAIL_SETTING_KEY = "button_voicemail_setting_key";
-
-    /** Event for Async voicemail change call */
-    private static final int EVENT_VOICEMAIL_CHANGED        = 500;
-    private static final int EVENT_FORWARDING_CHANGED       = 501;
-    private static final int EVENT_FORWARDING_GET_COMPLETED = 502;
-
-    /** Handle to voicemail pref */
-    private static final int VOICEMAIL_PREF_ID = 1;
-    private static final int VOICEMAIL_PROVIDER_CFG_ID = 2;
-
-    /**
-     * Results of reading forwarding settings
-     */
-    private CallForwardInfo[] mForwardingReadResults = null;
-
-    /**
-     * Result of forwarding number change.
-     * Keys are reasons (eg. unconditional forwarding).
-     */
-    private Map<Integer, AsyncResult> mForwardingChangeResults = null;
-
-    /**
-     * Expected CF read result types.
-     * This set keeps track of the CF types for which we've issued change
-     * commands so we can tell when we've received all of the responses.
-     */
-    private Collection<Integer> mExpectedChangeResultReasons = null;
-
-    /**
-     * Result of vm number change
-     */
-    private AsyncResult mVoicemailChangeResult = null;
-
-    /**
-     * Previous VM provider setting so we can return to it in case of failure.
-     */
-    private String mPreviousVMProviderKey = null;
-
-    /**
-     * Id of the dialog being currently shown.
-     */
-    private int mCurrentDialogId = 0;
-
-    /**
-     * Flag indicating that we are invoking settings for the voicemail provider programmatically
-     * due to vm provider change.
-     */
-    private boolean mVMProviderSettingsForced = false;
-
-    /**
-     * Flag indicating that we are making changes to vm or fwd numbers
-     * due to vm provider change.
-     */
-    private boolean mChangingVMorFwdDueToProviderChange = false;
-
-    /**
-     * True if we are in the process of vm & fwd number change and vm has already been changed.
-     * This is used to decide what to do in case of rollback.
-     */
-    private boolean mVMChangeCompletedSuccessfully = false;
-
-    /**
-     * True if we had full or partial failure setting forwarding numbers and so need to roll them
-     * back.
-     */
-    private boolean mFwdChangesRequireRollback = false;
-
-    /**
-     * Id of error msg to display to user once we are done reverting the VM provider to the previous
-     * one.
-     */
-    private int mVMOrFwdSetError = 0;
-
-    /** string to hold old voicemail number as it is being updated. */
-    private String mOldVmNumber;
-
-    // New call forwarding settings and vm number we will be setting
-    // Need to save these since before we get to saving we need to asynchronously
-    // query the existing forwarding settings.
-    private CallForwardInfo[] mNewFwdSettings;
-    private String mNewVMNumber;
-
-    private CharSequence mOldVmRingtoneName = "";
-
-    /**
-     * Used to indicate that the voicemail preference should be shown.
-     */
-    private boolean mShowVoicemailPreference = false;
-
-    private boolean mForeground;
-    private Phone mPhone;
-    private PhoneAccountHandle mPhoneAccountHandle;
-    private SubscriptionInfoHelper mSubscriptionInfoHelper;
-    private OmtpVvmCarrierConfigHelper mOmtpVvmCarrierConfigHelper;
-    private EditPhoneNumberPreference mSubMenuVoicemailSettings;
-    private VoicemailProviderListPreference mVoicemailProviders;
-    private PreferenceScreen mVoicemailSettings;
-    private VoicemailRingtonePreference mVoicemailNotificationRingtone;
-    private CheckBoxPreference mVoicemailNotificationVibrate;
-    private SwitchPreference mVoicemailVisualVoicemail;
-    private Preference mVoicemailChangePinPreference;
-
-    //*********************************************************************************************
-    // Preference Activity Methods
-    //*********************************************************************************************
-
-    @Override
-    protected void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-        addPreferencesFromResource(R.xml.voicemail_settings);
-
-        mShowVoicemailPreference = (icicle == null) &&
-                TextUtils.equals(getIntent().getAction(), ACTION_ADD_VOICEMAIL);
-
-        mSubscriptionInfoHelper = new SubscriptionInfoHelper(this, getIntent());
-        mSubscriptionInfoHelper.setActionBarTitle(
-                getActionBar(), getResources(), R.string.voicemail_settings_with_label);
-        mPhone = mSubscriptionInfoHelper.getPhone();
-        mPhoneAccountHandle = PhoneUtils.makePstnPhoneAccountHandle(mPhone);
-        mOmtpVvmCarrierConfigHelper = new OmtpVvmCarrierConfigHelper(
-                mPhone.getContext(), mPhone.getSubId());
-
-        PreferenceScreen prefSet = getPreferenceScreen();
-        mSubMenuVoicemailSettings = (EditPhoneNumberPreference)
-                findPreference(BUTTON_VOICEMAIL_KEY);
-
-        mSubMenuVoicemailSettings.setParentActivity(this, VOICEMAIL_PREF_ID, this);
-        mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
-        mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
-        mSubMenuVoicemailSettings.setSelectable(false);
-
-        mVoicemailProviders = (VoicemailProviderListPreference)
-                findPreference(BUTTON_VOICEMAIL_PROVIDER_KEY);
-        mVoicemailProviders.init(mPhone, getIntent());
-        mVoicemailProviders.setOnPreferenceChangeListener(this);
-        mPreviousVMProviderKey = mVoicemailProviders.getValue();
-
-        mVoicemailSettings = (PreferenceScreen) findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
-
-        mVoicemailNotificationRingtone = (VoicemailRingtonePreference) findPreference(
-                getResources().getString(R.string.voicemail_notification_ringtone_key));
-        mVoicemailNotificationRingtone.setVoicemailRingtoneNameChangeListener(this);
-        mVoicemailNotificationRingtone.init(mPhone, mOldVmRingtoneName);
-
-        mVoicemailNotificationVibrate = (CheckBoxPreference) findPreference(
-                getResources().getString(R.string.voicemail_notification_vibrate_key));
-        mVoicemailNotificationVibrate.setOnPreferenceChangeListener(this);
-
-        mVoicemailVisualVoicemail = (SwitchPreference) findPreference(
-                getResources().getString(R.string.voicemail_visual_voicemail_key));
-
-
-        mVoicemailChangePinPreference = findPreference(
-                getResources().getString(R.string.voicemail_change_pin_key));
-        Intent changePinIntent = new Intent(new Intent(this, VoicemailChangePinActivity.class));
-        changePinIntent.putExtra(VoicemailChangePinActivity.EXTRA_PHONE_ACCOUNT_HANDLE,
-                mPhoneAccountHandle);
-
-        mVoicemailChangePinPreference.setIntent(changePinIntent);
-        if (VoicemailChangePinActivity.isDefaultOldPinSet(this, mPhoneAccountHandle)) {
-            mVoicemailChangePinPreference.setTitle(R.string.voicemail_set_pin_dialog_title);
-        } else {
-            mVoicemailChangePinPreference.setTitle(R.string.voicemail_change_pin_dialog_title);
-        }
-
-        if (mOmtpVvmCarrierConfigHelper.isValid()) {
-            mVoicemailVisualVoicemail.setOnPreferenceChangeListener(this);
-            mVoicemailVisualVoicemail.setChecked(
-                    VisualVoicemailSettingsUtil.isEnabled(this, mPhoneAccountHandle));
-            if (!isVisualVoicemailActivated()) {
-                prefSet.removePreference(mVoicemailChangePinPreference);
-            }
-        } else {
-            prefSet.removePreference(mVoicemailVisualVoicemail);
-            prefSet.removePreference(mVoicemailChangePinPreference);
-        }
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        mForeground = true;
-
-        /*
-        PreferenceScreen preferenceScreen = getPreferenceScreen();
-        if (preferenceScreen != null) {
-            preferenceScreen.removeAll();
-        }
-
-        addPreferencesFromResource(R.xml.voicemail_settings);
-
-        PreferenceScreen prefSet = getPreferenceScreen();
-
-        mSubMenuVoicemailSettings = (EditPhoneNumberPreference)
-               findPreference(BUTTON_VOICEMAIL_KEY);
-
-        mSubMenuVoicemailSettings.setParentActivity(this, VOICEMAIL_PREF_ID, this);
-        mSubMenuVoicemailSettings.setDialogOnClosedListener(this);
-        mSubMenuVoicemailSettings.setDialogTitle(R.string.voicemail_settings_number_label);
-
-        mVoicemailProviders = (VoicemailProviderListPreference) findPreference(
-                BUTTON_VOICEMAIL_PROVIDER_KEY);
-        mVoicemailProviders.init(mPhone, getIntent());
-        mVoicemailProviders.setOnPreferenceChangeListener(this);
-        mPreviousVMProviderKey = mVoicemailProviders.getValue();
-
-        mVoicemailSettings = (PreferenceScreen) findPreference(BUTTON_VOICEMAIL_SETTING_KEY);
-
-        mVoicemailNotificationRingtone = (VoicemailRingtonePreference) findPreference(
-                getResources().getString(R.string.voicemail_notification_ringtone_key));
-        mVoicemailNotificationRingtone.setVoicemailRingtoneNameChangeListener(this);
-        mVoicemailNotificationRingtone.init(mPhone, mOldVmRingtoneName);
-
-        mVoicemailNotificationVibrate = (CheckBoxPreference) findPreference(
-                getResources().getString(R.string.voicemail_notification_vibrate_key));
-        mVoicemailNotificationVibrate.setOnPreferenceChangeListener(this);
-
-        mVoicemailVisualVoicemail = (SwitchPreference) findPreference(
-                getResources().getString(R.string.voicemail_visual_voicemail_key));
-
-        mVoicemailChangePinPreference = findPreference(
-                getResources().getString(R.string.voicemail_change_pin_key));
-        Intent changePinIntent = new Intent(new Intent(this, VoicemailChangePinActivity.class));
-        changePinIntent.putExtra(VoicemailChangePinActivity.EXTRA_PHONE_ACCOUNT_HANDLE,
-                mPhoneAccountHandle);
-
-        mVoicemailChangePinPreference.setIntent(changePinIntent);
-        if (VoicemailChangePinActivity.isDefaultOldPinSet(this, mPhoneAccountHandle)) {
-            mVoicemailChangePinPreference.setTitle(R.string.voicemail_set_pin_dialog_title);
-        } else {
-            mVoicemailChangePinPreference.setTitle(R.string.voicemail_change_pin_dialog_title);
-        }
-
-        if (mOmtpVvmCarrierConfigHelper.isValid()) {
-            mVoicemailVisualVoicemail.setOnPreferenceChangeListener(this);
-            mVoicemailVisualVoicemail.setChecked(
-                    VisualVoicemailSettingsUtil.isEnabled(this, mPhoneAccountHandle));
-            if (!isVisualVoicemailActivated()) {
-                prefSet.removePreference(mVoicemailChangePinPreference);
-            }
-        } else {
-            prefSet.removePreference(mVoicemailVisualVoicemail);
-            prefSet.removePreference(mVoicemailChangePinPreference);
-        }*/
-
-        updateVMPreferenceWidgets(mVoicemailProviders.getValue());
-
-        // check the intent that started this activity and pop up the voicemail
-        // dialog if we've been asked to.
-        // If we have at least one non default VM provider registered then bring up
-        // the selection for the VM provider, otherwise bring up a VM number dialog.
-        // We only bring up the dialog the first time we are called (not after orientation change)
-        if (mShowVoicemailPreference) {
-            if (DBG) log("ACTION_ADD_VOICEMAIL Intent is thrown");
-            if (mVoicemailProviders.hasMoreThanOneVoicemailProvider()) {
-                if (DBG) log("Voicemail data has more than one provider.");
-                simulatePreferenceClick(mVoicemailProviders);
-            } else {
-                onPreferenceChange(mVoicemailProviders, VoicemailProviderListPreference.DEFAULT_KEY);
-                mVoicemailProviders.setValue(VoicemailProviderListPreference.DEFAULT_KEY);
-            }
-            mShowVoicemailPreference = false;
-        }
-
-        updateVoiceNumberField();
-        mVMProviderSettingsForced = false;
-
-        mVoicemailNotificationVibrate.setChecked(
-                VoicemailNotificationSettingsUtil.isVibrationEnabled(mPhone));
-
-        /// M: make sure the action bar is disabled @{
-        final Dialog dialog = ((PreferenceScreen) mVoicemailSettings).getDialog();
-        if (dialog != null) {
-            dialog.getActionBar().setDisplayHomeAsUpEnabled(false);
-        }
-        /// @}
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        mForeground = false;
-
-        dismissDialogSafely(VoicemailDialogUtil.VM_CONFIRM_DIALOG);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        if (item.getItemId() == android.R.id.home) {
-            onBackPressed();
-            return true;
-        }
-        return super.onOptionsItemSelected(item);
-    }
-
-    @Override
-    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
-        if (preference == mSubMenuVoicemailSettings) {
-            return true;
-        } else if (preference.getKey().equals(mVoicemailSettings.getKey())) {
-            // Check key instead of comparing reference because closing the voicemail notification
-            // ringtone dialog invokes onResume(), but leaves the old preference screen up,
-            // TODO: Revert to checking reference after migrating voicemail to its own activity.
-            if (DBG) log("onPreferenceTreeClick: Voicemail Settings Preference is clicked.");
-
-            final Dialog dialog = ((PreferenceScreen) preference).getDialog();
-            if (dialog != null) {
-                dialog.getActionBar().setDisplayHomeAsUpEnabled(false);
-            }
-
-            if (preference.getIntent() != null) {
-                if (DBG) log("Invoking cfg intent " + preference.getIntent().getPackage());
-
-                // onActivityResult() will be responsible for resetting some of variables.
-                this.startActivityForResult(preference.getIntent(), VOICEMAIL_PROVIDER_CFG_ID);
-                return true;
-            } else {
-                if (DBG) log("onPreferenceTreeClick(). No intent; use default behavior in xml.");
-
-                // onActivityResult() will not be called, so reset variables here.
-                mPreviousVMProviderKey = VoicemailProviderListPreference.DEFAULT_KEY;
-                mVMProviderSettingsForced = false;
-                return false;
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Implemented to support onPreferenceChangeListener to look for preference changes.
-     *
-     * @param preference is the preference to be changed
-     * @param objValue should be the value of the selection, NOT its localized
-     * display value.
-     */
-    @Override
-    public boolean onPreferenceChange(Preference preference, Object objValue) {
-        if (DBG) log("onPreferenceChange: \"" + preference + "\" changed to \"" + objValue + "\"");
-
-        if (preference == mVoicemailProviders) {
-            final String newProviderKey = (String) objValue;
-
-            // If previous provider key and the new one is same, we don't need to handle it.
-            if (mPreviousVMProviderKey.equals(newProviderKey)) {
-                if (DBG) log("No change is made to the VM provider setting.");
-                return true;
-            }
-            updateVMPreferenceWidgets(newProviderKey);
-
-            final VoicemailProviderSettings newProviderSettings =
-                    VoicemailProviderSettingsUtil.load(this, newProviderKey);
-
-            // If the user switches to a voice mail provider and we have numbers stored for it we
-            // will automatically change the phone's voice mail and forwarding number to the stored
-            // ones. Otherwise we will bring up provider's configuration UI.
-            if (newProviderSettings == null) {
-                // Force the user into a configuration of the chosen provider
-                Log.w(LOG_TAG, "Saved preferences not found - invoking config");
-                mVMProviderSettingsForced = true;
-                simulatePreferenceClick(mVoicemailSettings);
-            } else {
-                if (DBG) log("Saved preferences found - switching to them");
-                // Set this flag so if we get a failure we revert to previous provider
-                mChangingVMorFwdDueToProviderChange = true;
-                saveVoiceMailAndForwardingNumber(newProviderKey, newProviderSettings);
-            }
-        } else if (preference.getKey().equals(mVoicemailNotificationVibrate.getKey())) {
-            // Check key instead of comparing reference because closing the voicemail notification
-            // ringtone dialog invokes onResume(), but leaves the old preference screen up,
-            // TODO: Revert to checking reference after migrating voicemail to its own activity.
-            VoicemailNotificationSettingsUtil.setVibrationEnabled(
-                    mPhone, Boolean.TRUE.equals(objValue));
-        } else if (preference.getKey().equals(mVoicemailVisualVoicemail.getKey())) {
-            boolean isEnabled = (boolean) objValue;
-            VisualVoicemailSettingsUtil
-                    .setEnabled(mPhone.getContext(), mPhoneAccountHandle, isEnabled);
-            PreferenceScreen prefSet = getPreferenceScreen();
-            if (isVisualVoicemailActivated()) {
-                prefSet.addPreference(mVoicemailChangePinPreference);
-            } else {
-                prefSet.removePreference(mVoicemailChangePinPreference);
-            }
-        }
-
-        // Always let the preference setting proceed.
-        return true;
-    }
-
-    /**
-     * Implemented for EditPhoneNumberPreference.GetDefaultNumberListener.
-     * This method set the default values for the various
-     * EditPhoneNumberPreference dialogs.
-     */
-    @Override
-    public String onGetDefaultNumber(EditPhoneNumberPreference preference) {
-        if (preference == mSubMenuVoicemailSettings) {
-            // update the voicemail number field, which takes care of the
-            // mSubMenuVoicemailSettings itself, so we should return null.
-            if (DBG) log("updating default for voicemail dialog");
-            updateVoiceNumberField();
-            return null;
-        }
-
-        String vmDisplay = mPhone.getVoiceMailNumber();
-        if (TextUtils.isEmpty(vmDisplay)) {
-            // if there is no voicemail number, we just return null to
-            // indicate no contribution.
-            return null;
-        }
-
-        // Return the voicemail number prepended with "VM: "
-        if (DBG) log("updating default for call forwarding dialogs");
-        return getString(R.string.voicemail_abbreviated) + " " + vmDisplay;
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (DBG) {
-            log("onActivityResult: requestCode: " + requestCode
-                    + ", resultCode: " + resultCode
-                    + ", data: " + data);
-        }
-
-        // there are cases where the contact picker may end up sending us more than one
-        // request.  We want to ignore the request if we're not in the correct state.
-        if (requestCode == VOICEMAIL_PROVIDER_CFG_ID) {
-            boolean failure = false;
-
-            // No matter how the processing of result goes lets clear the flag
-            if (DBG) log("mVMProviderSettingsForced: " + mVMProviderSettingsForced);
-            final boolean isVMProviderSettingsForced = mVMProviderSettingsForced;
-            mVMProviderSettingsForced = false;
-
-            String vmNum = null;
-            if (resultCode != RESULT_OK) {
-                if (DBG) log("onActivityResult: vm provider cfg result not OK.");
-                failure = true;
-            } else {
-                if (data == null) {
-                    if (DBG) log("onActivityResult: vm provider cfg result has no data");
-                    failure = true;
-                } else {
-                    if (data.getBooleanExtra(SIGNOUT_EXTRA, false)) {
-                        if (DBG) log("Provider requested signout");
-                        if (isVMProviderSettingsForced) {
-                            if (DBG) log("Going back to previous provider on signout");
-                            switchToPreviousVoicemailProvider();
-                        } else {
-                            final String victim = mVoicemailProviders.getKey();
-                            if (DBG) log("Relaunching activity and ignoring " + victim);
-                            Intent i = new Intent(ACTION_ADD_VOICEMAIL);
-                            i.putExtra(IGNORE_PROVIDER_EXTRA, victim);
-                            i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
-                            this.startActivity(i);
-                        }
-                        return;
-                    }
-                    vmNum = data.getStringExtra(VM_NUMBER_EXTRA);
-                    if (vmNum == null || vmNum.length() == 0) {
-                        if (DBG) log("onActivityResult: vm provider cfg result has no vmnum");
-                        failure = true;
-                    }
-                }
-            }
-            if (failure) {
-                if (DBG) log("Failure in return from voicemail provider.");
-                if (isVMProviderSettingsForced) {
-                    switchToPreviousVoicemailProvider();
-                }
-
-                return;
-            }
-            mChangingVMorFwdDueToProviderChange = isVMProviderSettingsForced;
-            final String fwdNum = data.getStringExtra(FWD_NUMBER_EXTRA);
-
-            // TODO: It would be nice to load the current network setting for this and
-            // send it to the provider when it's config is invoked so it can use this as default
-            final int fwdNumTime = data.getIntExtra(FWD_NUMBER_TIME_EXTRA, 20);
-
-            if (DBG) log("onActivityResult: cfg result has forwarding number " + fwdNum);
-            saveVoiceMailAndForwardingNumber(mVoicemailProviders.getKey(),
-                    new VoicemailProviderSettings(vmNum, fwdNum, fwdNumTime));
-            return;
-        }
-
-        if (requestCode == VOICEMAIL_PREF_ID) {
-            if (resultCode != RESULT_OK) {
-                if (DBG) log("onActivityResult: contact picker result not OK.");
-                return;
-            }
-
-            Cursor cursor = null;
-            try {
-                cursor = getContentResolver().query(data.getData(),
-                    new String[] { CommonDataKinds.Phone.NUMBER }, null, null, null);
-                if ((cursor == null) || (!cursor.moveToFirst())) {
-                    if (DBG) log("onActivityResult: bad contact data, no results found.");
-                    return;
-                }
-                if (mSubMenuVoicemailSettings != null) {
-                    mSubMenuVoicemailSettings.onPickActivityResult(cursor.getString(0));
-                }
-                return;
-            } finally {
-                if (cursor != null) {
-                    cursor.close();
-                }
-            }
-        }
-
-        super.onActivityResult(requestCode, resultCode, data);
-    }
-
-    @Override
-    public void onVoicemailRingtoneNameChanged(CharSequence name) {
-        mOldVmRingtoneName = name;
-    }
-
-    /**
-     * Simulates user clicking on a passed preference.
-     * Usually needed when the preference is a dialog preference and we want to invoke
-     * a dialog for this preference programmatically.
-     * TODO: figure out if there is a cleaner way to cause preference dlg to come up
-     */
-    private void simulatePreferenceClick(Preference preference) {
-        // Go through settings until we find our setting
-        // and then simulate a click on it to bring up the dialog
-        final ListAdapter adapter = getPreferenceScreen().getRootAdapter();
-        for (int idx = 0; idx < adapter.getCount(); idx++) {
-            if (adapter.getItem(idx) == preference) {
-                getPreferenceScreen().onItemClick(this.getListView(),
-                        null, idx, adapter.getItemId(idx));
-                break;
-            }
-        }
-    }
-
-    //*********************************************************************************************
-    // Activity Dialog Methods
-    //*********************************************************************************************
-
-    @Override
-    protected void onPrepareDialog(int id, Dialog dialog) {
-        super.onPrepareDialog(id, dialog);
-        mCurrentDialogId = id;
-    }
-
-    // dialog creation method, called by showDialog()
-    @Override
-    protected Dialog onCreateDialog(int dialogId) {
-        return VoicemailDialogUtil.getDialog(this, dialogId);
-    }
-
-    @Override
-    public void onDialogClosed(EditPhoneNumberPreference preference, int buttonClicked) {
-        if (DBG) log("onDialogClosed: Button clicked is " + buttonClicked);
-
-        if (buttonClicked == DialogInterface.BUTTON_NEGATIVE) {
-            return;
-        }
-        if (preference.getKey().equals(BUTTON_VOICEMAIL_KEY)) {
-            VoicemailProviderSettings newSettings = new VoicemailProviderSettings(
-                    preference.getPhoneNumber(),
-                    VoicemailProviderSettings.NO_FORWARDING);
-            saveVoiceMailAndForwardingNumber(mVoicemailProviders.getKey(), newSettings);
-        }
-    }
-
-    /**
-     * Wrapper around showDialog() that will silently do nothing if we're
-     * not in the foreground.
-     *
-     * This is useful here because most of the dialogs we display from
-     * this class are triggered by asynchronous events (like
-     * success/failure messages from the telephony layer) and it's
-     * possible for those events to come in even after the user has gone
-     * to a different screen.
-     */
-    // TODO: this is too brittle: it's still easy to accidentally add new
-    // code here that calls showDialog() directly (which will result in a
-    // WindowManager$BadTokenException if called after the activity has
-    // been stopped.)
-    //
-    // It would be cleaner to do the "if (mForeground)" check in one
-    // central place, maybe by using a single Handler for all asynchronous
-    // events (and have *that* discard events if we're not in the
-    // foreground.)
-    //
-    // Unfortunately it's not that simple, since we sometimes need to do
-    // actual work to handle these events whether or not we're in the
-    // foreground (see the Handler code in mSetOptionComplete for
-    // example.)
-    //
-    // TODO: It's a bit worrisome that we don't do anything in error cases when we're not in the
-    // foreground. Consider displaying a toast instead.
-    private void showDialogIfForeground(int id) {
-        if (mForeground) {
-            showDialog(id);
-        }
-    }
-
-    private void dismissDialogSafely(int id) {
-        try {
-            dismissDialog(id);
-            removeDialog(id);
-        } catch (IllegalArgumentException e) {
-            // This is expected in the case where we were in the background
-            // at the time we would normally have shown the dialog, so we didn't
-            // show it.
-        }
-    }
-
-    // This is a method implemented for DialogInterface.OnClickListener.
-    // Used with the error dialog to close the app, voicemail dialog to just dismiss.
-    // Close button is mapped to BUTTON_POSITIVE for the errors that close the activity,
-    // while those that are mapped to BUTTON_NEUTRAL only move the preference focus.
-    public void onClick(DialogInterface dialog, int which) {
-        if (DBG) log("onClick: button clicked is " + which);
-
-        dialog.dismiss();
-        removeDialog(mCurrentDialogId);
-        switch (which){
-            case DialogInterface.BUTTON_NEGATIVE:
-                if (mCurrentDialogId == VoicemailDialogUtil.FWD_GET_RESPONSE_ERROR_DIALOG) {
-                    // We failed to get current forwarding settings and the user
-                    // does not wish to continue.
-                    switchToPreviousVoicemailProvider();
-                }
-                break;
-            case DialogInterface.BUTTON_POSITIVE:
-                if (mCurrentDialogId == VoicemailDialogUtil.FWD_GET_RESPONSE_ERROR_DIALOG) {
-                    // We failed to get current forwarding settings but the user
-                    // wishes to continue changing settings to the new vm provider
-                    setVoicemailNumberWithCarrier();
-                } else {
-                    finish();
-                }
-                return;
-            default:
-                // just let the dialog close and go back to the input
-        }
-
-        // In all dialogs, all buttons except BUTTON_POSITIVE lead to the end of user interaction
-        // with settings UI. If we were called to explicitly configure voice mail then
-        // we finish the settings activity here to come back to whatever the user was doing.
-        final String action = getIntent() != null ? getIntent().getAction() : null;
-        if (ACTION_ADD_VOICEMAIL.equals(action)) {
-            finish();
-        }
-    }
-
-    //*********************************************************************************************
-    // Voicemail Methods
-    //*********************************************************************************************
-
-    /**
-     * TODO: Refactor to make it easier to understand what's done in the different stages.
-     */
-    private void saveVoiceMailAndForwardingNumber(
-            String key, VoicemailProviderSettings newSettings) {
-        if (DBG) log("saveVoiceMailAndForwardingNumber: " + newSettings.toString());
-        mNewVMNumber = newSettings.getVoicemailNumber();
-        mNewVMNumber = (mNewVMNumber == null) ? "" : mNewVMNumber;
-        mNewFwdSettings = newSettings.getForwardingSettings();
-
-        // Call forwarding is not suppported on CDMA.
-        if (mPhone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA) {
-            if (DBG) log("Ignoring forwarding setting since this is CDMA phone");
-            mNewFwdSettings = VoicemailProviderSettings.NO_FORWARDING;
-        }
-
-        // Throw a warning if the voicemail is the same and we did not change forwarding.
-        if (mNewVMNumber.equals(mOldVmNumber)
-                && mNewFwdSettings == VoicemailProviderSettings.NO_FORWARDING) {
-            showDialogIfForeground(VoicemailDialogUtil.VM_NOCHANGE_ERROR_DIALOG);
-            return;
-        }
-
-        VoicemailProviderSettingsUtil.save(this, key, newSettings);
-        mVMChangeCompletedSuccessfully = false;
-        mFwdChangesRequireRollback = false;
-        mVMOrFwdSetError = 0;
-
-        if (mNewFwdSettings == VoicemailProviderSettings.NO_FORWARDING
-                || key.equals(mPreviousVMProviderKey)) {
-            if (DBG) log("Set voicemail number. No changes to forwarding number.");
-            setVoicemailNumberWithCarrier();
-        } else {
-            if (DBG) log("Reading current forwarding settings.");
-            int numSettingsReasons = VoicemailProviderSettings.FORWARDING_SETTINGS_REASONS.length;
-            mForwardingReadResults = new CallForwardInfo[numSettingsReasons];
-            for (int i = 0; i < mForwardingReadResults.length; i++) {
-                mPhone.getCallForwardingOption(
-                        VoicemailProviderSettings.FORWARDING_SETTINGS_REASONS[i],
-                        mGetOptionComplete.obtainMessage(EVENT_FORWARDING_GET_COMPLETED, i, 0));
-            }
-            showDialogIfForeground(VoicemailDialogUtil.VM_FWD_READING_DIALOG);
-        }
-    }
-
-    private final Handler mGetOptionComplete = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-            AsyncResult result = (AsyncResult) msg.obj;
-            switch (msg.what) {
-                case EVENT_FORWARDING_GET_COMPLETED:
-                    handleForwardingSettingsReadResult(result, msg.arg1);
-                    break;
-            }
-        }
-    };
-
-    private void handleForwardingSettingsReadResult(AsyncResult ar, int idx) {
-        if (DBG) Log.d(LOG_TAG, "handleForwardingSettingsReadResult: " + idx);
-
-        Throwable error = null;
-        if (ar.exception != null) {
-            error = ar.exception;
-            if (DBG) Log.d(LOG_TAG, "FwdRead: ar.exception=" + error.getMessage());
-        }
-        if (ar.userObj instanceof Throwable) {
-            error = (Throwable) ar.userObj;
-            if (DBG) Log.d(LOG_TAG, "FwdRead: userObj=" + error.getMessage());
-        }
-
-        // We may have already gotten an error and decided to ignore the other results.
-        if (mForwardingReadResults == null) {
-            if (DBG) Log.d(LOG_TAG, "Ignoring fwd reading result: " + idx);
-            return;
-        }
-
-        // In case of error ignore other results, show an error dialog
-        if (error != null) {
-            if (DBG) Log.d(LOG_TAG, "Error discovered for fwd read : " + idx);
-            mForwardingReadResults = null;
-            dismissDialogSafely(VoicemailDialogUtil.VM_FWD_READING_DIALOG);
-            showDialogIfForeground(VoicemailDialogUtil.FWD_GET_RESPONSE_ERROR_DIALOG);
-            return;
-        }
-
-        // Get the forwarding info.
-        mForwardingReadResults[idx] = CallForwardInfoUtil.getCallForwardInfo(
-                (CallForwardInfo[]) ar.result,
-                VoicemailProviderSettings.FORWARDING_SETTINGS_REASONS[idx]);
-
-        // Check if we got all the results already
-        boolean done = true;
-        for (int i = 0; i < mForwardingReadResults.length; i++) {
-            if (mForwardingReadResults[i] == null) {
-                done = false;
-                break;
-            }
-        }
-
-        if (done) {
-            if (DBG) Log.d(LOG_TAG, "Done receiving fwd info");
-            dismissDialogSafely(VoicemailDialogUtil.VM_FWD_READING_DIALOG);
-
-            if (mPreviousVMProviderKey.equals(VoicemailProviderListPreference.DEFAULT_KEY)) {
-                VoicemailProviderSettingsUtil.save(mPhone.getContext(),
-                        VoicemailProviderListPreference.DEFAULT_KEY,
-                        new VoicemailProviderSettings(mOldVmNumber, mForwardingReadResults));
-            }
-            saveVoiceMailAndForwardingNumberStage2();
-        }
-    }
-
-    private void resetForwardingChangeState() {
-        mForwardingChangeResults = new HashMap<Integer, AsyncResult>();
-        mExpectedChangeResultReasons = new HashSet<Integer>();
-    }
-
-    // Called after we are done saving the previous forwarding settings if we needed.
-    private void saveVoiceMailAndForwardingNumberStage2() {
-        mForwardingChangeResults = null;
-        mVoicemailChangeResult = null;
-
-        resetForwardingChangeState();
-        for (int i = 0; i < mNewFwdSettings.length; i++) {
-            CallForwardInfo fi = mNewFwdSettings[i];
-            CallForwardInfo fiForReason =
-                    CallForwardInfoUtil.infoForReason(mForwardingReadResults, fi.reason);
-            final boolean doUpdate = CallForwardInfoUtil.isUpdateRequired(fiForReason, fi);
-
-            if (doUpdate) {
-                if (DBG) log("Setting fwd #: " + i + ": " + fi.toString());
-                mExpectedChangeResultReasons.add(i);
-
-                CallForwardInfoUtil.setCallForwardingOption(mPhone, fi,
-                        mSetOptionComplete.obtainMessage(
-                                EVENT_FORWARDING_CHANGED, fi.reason, 0));
-            }
-        }
-        showDialogIfForeground(VoicemailDialogUtil.VM_FWD_SAVING_DIALOG);
-    }
-
-    /**
-     * Callback to handle option update completions
-     */
-    private final Handler mSetOptionComplete = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-            AsyncResult result = (AsyncResult) msg.obj;
-            boolean done = false;
-            switch (msg.what) {
-                case EVENT_VOICEMAIL_CHANGED:
-                    mVoicemailChangeResult = result;
-                    mVMChangeCompletedSuccessfully = isVmChangeSuccess();
-                    PhoneGlobals.getInstance().refreshMwiIndicator(
-                            mSubscriptionInfoHelper.getSubId());
-                    done = true;
-                    break;
-                case EVENT_FORWARDING_CHANGED:
-                    mForwardingChangeResults.put(msg.arg1, result);
-                    if (result.exception != null) {
-                        Log.w(LOG_TAG, "Error in setting fwd# " + msg.arg1 + ": " +
-                                result.exception.getMessage());
-                    }
-                    if (isForwardingCompleted()) {
-                        if (isFwdChangeSuccess()) {
-                            if (DBG) log("Overall fwd changes completed ok, starting vm change");
-                            setVoicemailNumberWithCarrier();
-                        } else {
-                            Log.w(LOG_TAG, "Overall fwd changes completed in failure. " +
-                                    "Check if we need to try rollback for some settings.");
-                            mFwdChangesRequireRollback = false;
-                            Iterator<Map.Entry<Integer,AsyncResult>> it =
-                                mForwardingChangeResults.entrySet().iterator();
-                            while (it.hasNext()) {
-                                Map.Entry<Integer,AsyncResult> entry = it.next();
-                                if (entry.getValue().exception == null) {
-                                    // If at least one succeeded we have to revert
-                                    Log.i(LOG_TAG, "Rollback will be required");
-                                    mFwdChangesRequireRollback = true;
-                                    break;
-                                }
-                            }
-                            if (!mFwdChangesRequireRollback) {
-                                Log.i(LOG_TAG, "No rollback needed.");
-                            }
-                            done = true;
-                        }
-                    }
-                    break;
-                default:
-                    // TODO: should never reach this, may want to throw exception
-            }
-
-            if (done) {
-                if (DBG) log("All VM provider related changes done");
-                if (mForwardingChangeResults != null) {
-                    dismissDialogSafely(VoicemailDialogUtil.VM_FWD_SAVING_DIALOG);
-                }
-                handleSetVmOrFwdMessage();
-            }
-        }
-    };
-
-    /**
-     * Callback to handle option revert completions
-     */
-    private final Handler mRevertOptionComplete = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-            AsyncResult result = (AsyncResult) msg.obj;
-            switch (msg.what) {
-                case EVENT_VOICEMAIL_CHANGED:
-                    if (DBG) log("VM revert complete msg");
-                    mVoicemailChangeResult = result;
-                    break;
-
-                case EVENT_FORWARDING_CHANGED:
-                    if (DBG) log("FWD revert complete msg ");
-                    mForwardingChangeResults.put(msg.arg1, result);
-                    if (result.exception != null) {
-                        if (DBG) log("Error in reverting fwd# " + msg.arg1 + ": " +
-                                result.exception.getMessage());
-                    }
-                    break;
-
-                default:
-                    // TODO: should never reach this, may want to throw exception
-            }
-
-            final boolean done = (!mVMChangeCompletedSuccessfully || mVoicemailChangeResult != null)
-                    && (!mFwdChangesRequireRollback || isForwardingCompleted());
-            if (done) {
-                if (DBG) log("All VM reverts done");
-                dismissDialogSafely(VoicemailDialogUtil.VM_REVERTING_DIALOG);
-                onRevertDone();
-            }
-        }
-    };
-
-    private void setVoicemailNumberWithCarrier() {
-        if (DBG) log("save voicemail #: " + mNewVMNumber);
-
-        mVoicemailChangeResult = null;
-        mPhone.setVoiceMailNumber(
-                mPhone.getVoiceMailAlphaTag().toString(),
-                mNewVMNumber,
-                Message.obtain(mSetOptionComplete, EVENT_VOICEMAIL_CHANGED));
-    }
-
-    private void switchToPreviousVoicemailProvider() {
-        if (DBG) log("switchToPreviousVoicemailProvider " + mPreviousVMProviderKey);
-
-        if (mPreviousVMProviderKey == null) {
-            return;
-        }
-
-        if (mVMChangeCompletedSuccessfully || mFwdChangesRequireRollback) {
-            showDialogIfForeground(VoicemailDialogUtil.VM_REVERTING_DIALOG);
-            final VoicemailProviderSettings prevSettings =
-                    VoicemailProviderSettingsUtil.load(this, mPreviousVMProviderKey);
-            if (prevSettings == null) {
-                Log.e(LOG_TAG, "VoicemailProviderSettings for the key \""
-                        + mPreviousVMProviderKey + "\" is null but should be loaded.");
-                return;
-            }
-
-            if (mVMChangeCompletedSuccessfully) {
-                mNewVMNumber = prevSettings.getVoicemailNumber();
-                Log.i(LOG_TAG, "VM change is already completed successfully."
-                        + "Have to revert VM back to " + mNewVMNumber + " again.");
-                mPhone.setVoiceMailNumber(
-                        mPhone.getVoiceMailAlphaTag().toString(),
-                        mNewVMNumber,
-                        Message.obtain(mRevertOptionComplete, EVENT_VOICEMAIL_CHANGED));
-            }
-
-            if (mFwdChangesRequireRollback) {
-                Log.i(LOG_TAG, "Requested to rollback forwarding changes.");
-
-                final CallForwardInfo[] prevFwdSettings = prevSettings.getForwardingSettings();
-                if (prevFwdSettings != null) {
-                    Map<Integer, AsyncResult> results = mForwardingChangeResults;
-                    resetForwardingChangeState();
-                    for (int i = 0; i < prevFwdSettings.length; i++) {
-                        CallForwardInfo fi = prevFwdSettings[i];
-                        if (DBG) log("Reverting fwd #: " + i + ": " + fi.toString());
-                        // Only revert the settings for which the update succeeded.
-                        AsyncResult result = results.get(fi.reason);
-                        if (result != null && result.exception == null) {
-                            mExpectedChangeResultReasons.add(fi.reason);
-                            CallForwardInfoUtil.setCallForwardingOption(mPhone, fi,
-                                    mRevertOptionComplete.obtainMessage(
-                                            EVENT_FORWARDING_CHANGED, i, 0));
-                        }
-                    }
-                }
-            }
-        } else {
-            if (DBG) log("No need to revert");
-            onRevertDone();
-        }
-    }
-
-
-    //*********************************************************************************************
-    // Voicemail Handler Helpers
-    //*********************************************************************************************
-
-    /**
-     * Updates the look of the VM preference widgets based on current VM provider settings.
-     * Note that the provider name is loaded fxrorm the found activity via loadLabel in
-     * {@link VoicemailProviderListPreference#initVoiceMailProviders()} in order for it to be
-     * localizable.
-     */
-    private void updateVMPreferenceWidgets(String currentProviderSetting) {
-        final String key = currentProviderSetting;
-        final VoicemailProviderListPreference.VoicemailProvider provider =
-                mVoicemailProviders.getVoicemailProvider(key);
-
-        /* This is the case when we are coming up on a freshly wiped phone and there is no
-         persisted value for the list preference mVoicemailProviders.
-         In this case we want to show the UI asking the user to select a voicemail provider as
-         opposed to silently falling back to default one. */
-        if (provider == null) {
-            if (DBG) log("updateVMPreferenceWidget: key: " + key + " -> null.");
-
-            mVoicemailProviders.setSummary(getString(R.string.sum_voicemail_choose_provider));
-            mVoicemailSettings.setEnabled(false);
-            mVoicemailSettings.setIntent(null);
-            mVoicemailNotificationVibrate.setEnabled(false);
-        } else {
-            if (DBG) log("updateVMPreferenceWidget: key: " + key + " -> " + provider.toString());
-
-            final String providerName = provider.name;
-            mVoicemailProviders.setSummary(providerName);
-            mVoicemailSettings.setEnabled(true);
-            mVoicemailSettings.setIntent(provider.intent);
-            mVoicemailNotificationVibrate.setEnabled(true);
-        }
-    }
-
-    /**
-     * Update the voicemail number from what we've recorded on the sim.
-     */
-    private void updateVoiceNumberField() {
-        if (DBG) log("updateVoiceNumberField()");
-
-        mOldVmNumber = mPhone.getVoiceMailNumber();
-        if (TextUtils.isEmpty(mOldVmNumber)) {
-            mSubMenuVoicemailSettings.setPhoneNumber("");
-            mSubMenuVoicemailSettings.setSummary(getString(R.string.voicemail_number_not_set));
-        } else {
-            mSubMenuVoicemailSettings.setPhoneNumber(mOldVmNumber);
-            mSubMenuVoicemailSettings.setSummary(BidiFormatter.getInstance().unicodeWrap(
-                    mOldVmNumber, TextDirectionHeuristics.LTR));
-        }
-
-        ///M: ALPS02270998, update the "old" preference to display the right UI @{
-        updateOldSubMenuVoicemailSettings(mOldVmNumber);
-        /// @}
-    }
-
-    private void handleSetVmOrFwdMessage() {
-        if (DBG) log("handleSetVMMessage: set VM request complete");
-
-        if (!isFwdChangeSuccess()) {
-            handleVmOrFwdSetError(VoicemailDialogUtil.FWD_SET_RESPONSE_ERROR_DIALOG);
-        } else if (!isVmChangeSuccess()) {
-            handleVmOrFwdSetError(VoicemailDialogUtil.VM_RESPONSE_ERROR_DIALOG);
-        } else {
-            handleVmAndFwdSetSuccess(VoicemailDialogUtil.VM_CONFIRM_DIALOG);
-        }
-    }
-
-    /**
-     * Called when Voicemail Provider or its forwarding settings failed. Rolls back partly made
-     * changes to those settings and show "failure" dialog.
-     *
-     * @param dialogId ID of the dialog to show for the specific error case. Either
-     *     {@link #FWD_SET_RESPONSE_ERROR_DIALOG} or {@link #VM_RESPONSE_ERROR_DIALOG}
-     */
-    private void handleVmOrFwdSetError(int dialogId) {
-        if (mChangingVMorFwdDueToProviderChange) {
-            mVMOrFwdSetError = dialogId;
-            mChangingVMorFwdDueToProviderChange = false;
-            switchToPreviousVoicemailProvider();
-            return;
-        }
-        mChangingVMorFwdDueToProviderChange = false;
-        showDialogIfForeground(dialogId);
-        updateVoiceNumberField();
-    }
-
-    /**
-     * Called when Voicemail Provider and its forwarding settings were successfully finished.
-     * This updates a bunch of variables and show "success" dialog.
-     */
-    private void handleVmAndFwdSetSuccess(int dialogId) {
-        if (DBG) log("handleVmAndFwdSetSuccess: key is " + mVoicemailProviders.getKey());
-
-        mPreviousVMProviderKey = mVoicemailProviders.getKey();
-        mChangingVMorFwdDueToProviderChange = false;
-        showDialogIfForeground(dialogId);
-        updateVoiceNumberField();
-    }
-
-    private void onRevertDone() {
-        if (DBG) log("onRevertDone: Changing provider key back to " + mPreviousVMProviderKey);
-
-        updateVMPreferenceWidgets(mPreviousVMProviderKey);
-        updateVoiceNumberField();
-        if (mVMOrFwdSetError != 0) {
-            showDialogIfForeground(mVMOrFwdSetError);
-            mVMOrFwdSetError = 0;
-        }
-    }
-
-    //*********************************************************************************************
-    // Voicemail State Helpers
-    //*********************************************************************************************
-
-    /**
-     * Return true if there is a change result for every reason for which we expect a result.
-     */
-    private boolean isForwardingCompleted() {
-        if (mForwardingChangeResults == null) {
-            return true;
-        }
-
-        for (Integer reason : mExpectedChangeResultReasons) {
-            if (mForwardingChangeResults.get(reason) == null) {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private boolean isFwdChangeSuccess() {
-        if (mForwardingChangeResults == null) {
-            return true;
-        }
-
-        for (AsyncResult result : mForwardingChangeResults.values()) {
-            Throwable exception = result.exception;
-            if (exception != null) {
-                String msg = exception.getMessage();
-                msg = (msg != null) ? msg : "";
-                Log.w(LOG_TAG, "Failed to change forwarding setting. Reason: " + msg);
-                return false;
-            }
-        }
-        return true;
-    }
-
-    private boolean isVmChangeSuccess() {
-        if (mVoicemailChangeResult.exception != null) {
-            String msg = mVoicemailChangeResult.exception.getMessage();
-            msg = (msg != null) ? msg : "";
-            Log.w(LOG_TAG, "Failed to change voicemail. Reason: " + msg);
-            return false;
-        }
-        return true;
-    }
-
-    ///M: ALPS02270998, update the "old" preference to display the right UI @{
-    private void updateOldSubMenuVoicemailSettings(String number) {
-        EditPhoneNumberPreference oldSubMenuVoicemailSettings =
-                (EditPhoneNumberPreference) findPreference(BUTTON_VOICEMAIL_KEY);
-        if (oldSubMenuVoicemailSettings != null) {
-            if (TextUtils.isEmpty(number)) {
-                oldSubMenuVoicemailSettings.setPhoneNumber("");
-                oldSubMenuVoicemailSettings.setSummary(
-                        getString(R.string.voicemail_number_not_set));
-            } else {
-                oldSubMenuVoicemailSettings.setPhoneNumber(number);
-                oldSubMenuVoicemailSettings.setSummary(
-                        BidiFormatter.getInstance().unicodeWrap(number,
-                        TextDirectionHeuristics.LTR));
-            }
-        }
-    }
-    /// @}
-
-    private boolean isVisualVoicemailActivated() {
-        if (!VisualVoicemailSettingsUtil.isEnabled(this, mPhoneAccountHandle)) {
-            return false;
-        }
-        VisualVoicemailPreferences preferences = new VisualVoicemailPreferences(this,
-                mPhoneAccountHandle);
-        return preferences.getString(OmtpConstants.SERVER_ADDRESS, null) != null;
-
-    }
-
-    private static void log(String msg) {
-        Log.d(LOG_TAG, msg);
-    }
-}
Index: vendor/branch/5058A_Claro/packages/services/Telephony/src/com/android/phone/settings/fdn/FdnSetting.java
===================================================================
--- vendor/branch/5058A_Claro/packages/services/Telephony/src/com/android/phone/settings/fdn/FdnSetting.java	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/services/Telephony/src/com/android/phone/settings/fdn/FdnSetting.java	(revision 3018)
@@ -1,790 +0,0 @@
-/*
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.phone.settings.fdn;
-
-import android.app.ActionBar;
-import android.app.AlertDialog;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.os.AsyncResult;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-import android.preference.Preference;
-import android.util.Log;
-import android.preference.PreferenceActivity;
-import android.preference.PreferenceScreen;
-import android.view.MenuItem;
-import android.view.WindowManager;
-import android.widget.Toast;
-
-import com.android.internal.telephony.CommandException;
-import com.android.internal.telephony.IccCard;
-import com.android.internal.telephony.Phone;
-import com.android.internal.telephony.TelephonyIntents;
-import com.android.phone.CallFeaturesSetting;
-import com.android.phone.PhoneGlobals;
-import com.android.phone.PhoneUtils;
-import com.android.phone.R;
-import com.android.phone.SubscriptionInfoHelper;
-
-import com.mediatek.settings.TelephonyUtils;
-
-/**
- * FDN settings UI for the Phone app.
- * Rewritten to look and behave closer to the other preferences.
- */
-public class FdnSetting extends PreferenceActivity implements
-        EditPinPreference.OnPinEnteredListener, DialogInterface.OnCancelListener,
-        PhoneGlobals.SubInfoUpdateListener, Preference.OnPreferenceClickListener {
-
-    private static final String LOG_TAG = PhoneGlobals.LOG_TAG;
-    private static final boolean DBG = true;
-
-    private SubscriptionInfoHelper mSubscriptionInfoHelper;
-    private Phone mPhone;
-
-    /**
-     * Events we handle.
-     * The first is used for toggling FDN enable, the second for the PIN change.
-     */
-    private static final int EVENT_PIN2_ENTRY_COMPLETE = 100;
-    private static final int EVENT_PIN2_CHANGE_COMPLETE = 200;
-
-    // String keys for preference lookup
-    private static final String BUTTON_FDN_ENABLE_KEY = "button_fdn_enable_key";
-    private static final String BUTTON_CHANGE_PIN2_KEY = "button_change_pin2_key";
-    private static final String FDN_LIST_PREF_SCREEN_KEY = "fdn_list_pref_screen_key";
-
-    private EditPinPreference mButtonEnableFDN;
-    private EditPinPreference mButtonChangePin2;
-
-    // State variables
-    private String mOldPin;
-    private String mNewPin;
-    private String mPuk2;
-    private static final int PIN_CHANGE_OLD = 0;
-    private static final int PIN_CHANGE_NEW = 1;
-    private static final int PIN_CHANGE_REENTER = 2;
-    private static final int PIN_CHANGE_PUK = 3;
-    private static final int PIN_CHANGE_NEW_PIN_FOR_PUK = 4;
-    private static final int PIN_CHANGE_REENTER_PIN_FOR_PUK = 5;
-    private int mPinChangeState;
-    private boolean mIsPuk2Locked;    // Indicates we know that we are PUK2 blocked.
-
-    private static final String SKIP_OLD_PIN_KEY = "skip_old_pin_key";
-    private static final String PIN_CHANGE_STATE_KEY = "pin_change_state_key";
-    private static final String OLD_PIN_KEY = "old_pin_key";
-    private static final String NEW_PIN_KEY = "new_pin_key";
-    private static final String DIALOG_MESSAGE_KEY = "dialog_message_key";
-    private static final String DIALOG_PIN_ENTRY_KEY = "dialog_pin_entry_key";
-
-    // size limits for the pin.
-    private static final int MIN_PIN_LENGTH = 4;
-    private static final int MAX_PIN_LENGTH = 8;
-
-    /**
-     * Delegate to the respective handlers.
-     */
-    @Override
-    public void onPinEntered(EditPinPreference preference, boolean positiveResult) {
-        if (preference == mButtonEnableFDN) {
-            toggleFDNEnable(positiveResult);
-        } else if (preference == mButtonChangePin2){
-            updatePINChangeState(positiveResult);
-        }
-    }
-
-    /**
-     * Attempt to toggle FDN activation.
-     */
-    private void toggleFDNEnable(boolean positiveResult) {
-        /// M: [MTK_FDN] Add retry number tips
-        log("[toggleFDNEnable] positiveResult: " + positiveResult);
-        updateEnableFDNDialog();
-        /// @}
-        if (!positiveResult) {
-            return;
-        }
-
-        // validate the pin first, before submitting it to the RIL for FDN enable.
-        String password = mButtonEnableFDN.getText();
-        if (validatePin (password, false)) {
-            // get the relevant data for the icc call
-            boolean isEnabled = mPhone.getIccCard().getIccFdnEnabled();
-            Message onComplete = mFDNHandler.obtainMessage(EVENT_PIN2_ENTRY_COMPLETE);
-
-            // make fdn request
-            mPhone.getIccCard().setIccFdnEnabled(!isEnabled, password, onComplete);
-        } else {
-            // throw up error if the pin is invalid.
-            displayMessage(R.string.invalidPin2);
-        }
-
-        mButtonEnableFDN.setText("");
-    }
-
-    /**
-     * Attempt to change the pin.
-     */
-    private void updatePINChangeState(boolean positiveResult) {
-        if (DBG) log("updatePINChangeState positive=" + positiveResult
-                + " mPinChangeState=" + mPinChangeState
-                + " mSkipOldPin=" + mIsPuk2Locked);
-
-        if (!positiveResult) {
-            // reset the state on cancel, either to expect PUK2 or PIN2
-            if (!mIsPuk2Locked) {
-                resetPinChangeState(mSubId);
-            } else {
-                resetPinChangeStateForPUK2(mSubId);
-            }
-            return;
-        }
-
-        // Progress through the dialog states, generally in this order:
-        //   1. Enter old pin
-        //   2. Enter new pin
-        //   3. Re-Enter new pin
-        // While handling any error conditions that may show up in between.
-        // Also handle the PUK2 entry, if it is requested.
-        //
-        // In general, if any invalid entries are made, the dialog re-
-        // appears with text to indicate what the issue is.
-        switch (mPinChangeState) {
-            case PIN_CHANGE_OLD:
-                mOldPin = mButtonChangePin2.getText();
-                mButtonChangePin2.setText("");
-                // if the pin is not valid, display a message and reset the state.
-                if (validatePin (mOldPin, false)) {
-                    mPinChangeState = PIN_CHANGE_NEW;
-                    displayPinChangeDialog();
-                } else {
-                    displayPinChangeDialog(R.string.invalidPin2, true);
-                }
-                break;
-            case PIN_CHANGE_NEW:
-                mNewPin = mButtonChangePin2.getText();
-                mButtonChangePin2.setText("");
-                // if the new pin is not valid, display a message and reset the state.
-                if (validatePin (mNewPin, false)) {
-                    mPinChangeState = PIN_CHANGE_REENTER;
-                    displayPinChangeDialog();
-                } else {
-                    displayPinChangeDialog(R.string.invalidPin2, true);
-                }
-                break;
-            case PIN_CHANGE_REENTER:
-                // if the re-entered pin is not valid, display a message and reset the state.
-                if (!mNewPin.equals(mButtonChangePin2.getText())) {
-                    mPinChangeState = PIN_CHANGE_NEW;
-                    mButtonChangePin2.setText("");
-                    displayPinChangeDialog(R.string.mismatchPin2, true);
-                } else {
-                    // If the PIN is valid, then we submit the change PIN request.
-                    mButtonChangePin2.setText("");
-                    Message onComplete = mFDNHandler.obtainMessage(
-                            EVENT_PIN2_CHANGE_COMPLETE);
-                    mPhone.getIccCard().changeIccFdnPassword(
-                            mOldPin, mNewPin, onComplete);
-                }
-                break;
-            case PIN_CHANGE_PUK: {
-                    // Doh! too many incorrect requests, PUK requested.
-                    mPuk2 = mButtonChangePin2.getText();
-                    mButtonChangePin2.setText("");
-                    // if the puk is not valid, display
-                    // a message and reset the state.
-                    if (validatePin (mPuk2, true)) {
-                        mPinChangeState = PIN_CHANGE_NEW_PIN_FOR_PUK;
-                        displayPinChangeDialog();
-                    } else {
-                        displayPinChangeDialog(R.string.invalidPuk2, true);
-                    }
-                }
-                break;
-            case PIN_CHANGE_NEW_PIN_FOR_PUK:
-                mNewPin = mButtonChangePin2.getText();
-                mButtonChangePin2.setText("");
-                // if the new pin is not valid, display
-                // a message and reset the state.
-                if (validatePin (mNewPin, false)) {
-                    mPinChangeState = PIN_CHANGE_REENTER_PIN_FOR_PUK;
-                    displayPinChangeDialog();
-                } else {
-                    displayPinChangeDialog(R.string.invalidPin2, true);
-                }
-                break;
-            case PIN_CHANGE_REENTER_PIN_FOR_PUK:
-                // if the re-entered pin is not valid, display
-                // a message and reset the state.
-                if (!mNewPin.equals(mButtonChangePin2.getText())) {
-                    mPinChangeState = PIN_CHANGE_NEW_PIN_FOR_PUK;
-                    mButtonChangePin2.setText("");
-                    displayPinChangeDialog(R.string.mismatchPin2, true);
-                } else {
-                    // Both puk2 and new pin2 are ready to submit
-                    mButtonChangePin2.setText("");
-                    Message onComplete = mFDNHandler.obtainMessage(
-                            EVENT_PIN2_CHANGE_COMPLETE);
-                    mPhone.getIccCard().supplyPuk2(mPuk2, mNewPin, onComplete);
-                }
-                break;
-        }
-    }
-
-    /**
-     * Handler for asynchronous replies from the sim.
-     */
-    private final Handler mFDNHandler = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-            switch (msg.what) {
-
-                // when we are enabling FDN, either we are unsuccessful and display
-                // a toast, or just update the UI.
-                case EVENT_PIN2_ENTRY_COMPLETE: {
-                        AsyncResult ar = (AsyncResult) msg.obj;
-                        if (ar.exception != null) {
-                            if (ar.exception instanceof CommandException) {
-                                int attemptsRemaining = msg.arg1;
-                                // see if PUK2 is requested and alert the user accordingly.
-                                CommandException.Error e =
-                                        ((CommandException) ar.exception).getCommandError();
-                                switch (e) {
-                                    case SIM_PUK2:
-                                        // make sure we set the PUK2 state so that we can skip
-                                        // some redundant behaviour.
-                                        displayMessage(R.string.fdn_enable_puk2_requested,
-                                                attemptsRemaining);
-                                        resetPinChangeStateForPUK2();
-                                        break;
-                                    case PASSWORD_INCORRECT:
-                                        displayMessage(R.string.pin2_invalid, attemptsRemaining);
-                                        break;
-                                    default:
-                                        displayMessage(R.string.fdn_failed, attemptsRemaining);
-                                        break;
-                                }
-                            } else {
-                                displayMessage(R.string.pin2_error_exception);
-                            }
-                        }
-                        /// [MTK_FDN] Change to update whole screen.
-                        updateWholeScreen(mSubId);
-                    }
-                    break;
-
-                // when changing the pin we need to pay attention to whether or not
-                // the error requests a PUK (usually after too many incorrect tries)
-                // Set the state accordingly.
-                case EVENT_PIN2_CHANGE_COMPLETE: {
-                        if (DBG)
-                            log("Handle EVENT_PIN2_CHANGE_COMPLETE");
-                        AsyncResult ar = (AsyncResult) msg.obj;
-                        if (ar.exception != null) {
-                            if (ar.exception instanceof CommandException) {
-                                int attemptsRemaining = msg.arg1;
-                                log("Handle EVENT_PIN2_CHANGE_COMPLETE attemptsRemaining="
-                                        + attemptsRemaining);
-                                CommandException ce = (CommandException) ar.exception;
-                                /// [MTK_FDN] Handle error special @{
-                            if (handleChangePIN2ErrorForMTK(ce)) {
-                                log("Handle handleChangePIN2ErrorForMTK Enter~");
-                                /// @}
-                            } else if (ce.getCommandError() == CommandException.Error.SIM_PUK2) {
-                                    // throw an alert dialog on the screen, displaying the
-                                    // request for a PUK2.  set the cancel listener to
-                                    // FdnSetting.onCancel().
-                                    AlertDialog a = new AlertDialog.Builder(FdnSetting.this)
-                                        .setMessage(R.string.puk2_requested)
-                                        .setCancelable(true)
-                                        .setOnCancelListener(FdnSetting.this)
-                                        .setNeutralButton(android.R.string.ok,
-                                                new DialogInterface.OnClickListener() {
-                                                    @Override
-                                                    public void onClick(DialogInterface dialog,
-                                                            int which) {
-                                                        resetPinChangeStateForPUK2();
-                                                        displayPinChangeDialog(0,true);
-                                                    }
-                                                })
-                                        .create();
-                                    a.getWindow().addFlags(
-                                            WindowManager.LayoutParams.FLAG_DIM_BEHIND);
-                                    a.show();
-                                } else {
-                                    // set the correct error message depending upon the state.
-                                    // Reset the state depending upon or knowledge of the PUK state.
-                                    if (!mIsPuk2Locked) {
-                                        displayMessage(R.string.badPin2, attemptsRemaining);
-                                        resetPinChangeState();
-                                    } else {
-                                        displayMessage(R.string.badPuk2, attemptsRemaining);
-                                        resetPinChangeStateForPUK2();
-                                    }
-                                }
-                            } else {
-                                displayMessage(R.string.pin2_error_exception);
-                            }
-                        } else {
-                            if (mPinChangeState == PIN_CHANGE_PUK) {
-                                displayMessage(R.string.pin2_unblocked);
-                            } else {
-                                displayMessage(R.string.pin2_changed);
-                            }
-
-                            // reset to normal behaviour on successful change.
-                            resetPinChangeState(mSubId);
-                        }
-                        /// [MTK_FDN] Change to update whole screen.
-                        updateWholeScreen(mSubId);
-                    }
-                    break;
-            }
-        }
-    };
-
-    /**
-     * Cancel listener for the PUK2 request alert dialog.
-     */
-    @Override
-    public void onCancel(DialogInterface dialog) {
-        // set the state of the preference and then display the dialog.
-        resetPinChangeStateForPUK2(mSubId);
-        displayPinChangeDialog(0, true);
-        /// [MTK_FDN] Update the Enable fdn dialog's infomation @{
-        updateEnableFDNDialog();
-        /// @}
-    }
-
-    /**
-     * Display a toast for message, like the rest of the settings.
-     */
-    private final void displayMessage(int strId, int attemptsRemaining) {
-        String s = getString(strId);
-        if ((strId == R.string.badPin2) || (strId == R.string.badPuk2) ||
-                (strId == R.string.pin2_invalid)) {
-            if (attemptsRemaining >= 0) {
-                s = getString(strId) + getString(R.string.pin2_attempts, attemptsRemaining);
-            } else {
-                s = getString(strId);
-            }
-        }
-        log("displayMessage: attemptsRemaining=" + attemptsRemaining + " s=" + s);
-        Toast.makeText(this, s, Toast.LENGTH_SHORT).show();
-    }
-
-    private final void displayMessage(int strId) {
-        displayMessage(strId, -1);
-    }
-
-    /**
-     * The next two functions are for updating the message field on the dialog.
-     */
-    private final void displayPinChangeDialog() {
-        displayPinChangeDialog(0, true);
-    }
-
-    private final void displayPinChangeDialog(int strId, boolean shouldDisplay) {
-        int msgId;
-
-        /// [MTK_FDN] Add left rertry number~ @{
-        log("[displayPinChangeDialog] mPinChangeState : " + mPinChangeState);
-        String leftPinPukTipsString = "";
-        switch (mPinChangeState) {
-            case PIN_CHANGE_OLD:
-                msgId = R.string.oldPin2Label;
-                leftPinPukTipsString =
-                    "\n" + TelephonyUtils.getPinPuk2RetryLeftNumTips(this, mSubId, true);
-                break;
-            case PIN_CHANGE_NEW:
-            case PIN_CHANGE_NEW_PIN_FOR_PUK:
-                msgId = R.string.newPin2Label;
-                break;
-            case PIN_CHANGE_REENTER:
-            case PIN_CHANGE_REENTER_PIN_FOR_PUK:
-                msgId = R.string.confirmPin2Label;
-                break;
-            case PIN_CHANGE_PUK:
-            default:
-                msgId = R.string.label_puk2_code;
-                leftPinPukTipsString =
-                    "\n" + TelephonyUtils.getPinPuk2RetryLeftNumTips(this, mSubId, false);
-                break;
-        }
-
-        // append the note / additional message, if needed.
-        if (strId != 0) {
-            mButtonChangePin2.setDialogMessage(getText(msgId) + leftPinPukTipsString
-                    + "\n" + getText(strId));
-        } else {
-            mButtonChangePin2.setDialogMessage(getText(msgId) + leftPinPukTipsString);
-        }
-        /// @}
-
-        // only display if requested.
-        if (shouldDisplay) {
-            mButtonChangePin2.showPinDialog();
-        }
-    }
-
-    /**
-     * Reset the state of the pin change dialog.
-     */
-    private final void resetPinChangeState() {
-        if (DBG) log("resetPinChangeState");
-        mPinChangeState = PIN_CHANGE_OLD;
-        displayPinChangeDialog(0, false);
-        mOldPin = mNewPin = "";
-        mIsPuk2Locked = false;
-    }
-
-    /**
-     * Reset the state of the pin change dialog solely for PUK2 use.
-     */
-    private final void resetPinChangeStateForPUK2() {
-        if (DBG) log("resetPinChangeStateForPUK2");
-        mPinChangeState = PIN_CHANGE_PUK;
-        displayPinChangeDialog(0, false);
-        mOldPin = mNewPin = mPuk2 = "";
-        mIsPuk2Locked = true;
-    }
-
-    /**
-     * Validate the pin entry.
-     *
-     * @param pin This is the pin to validate
-     * @param isPuk Boolean indicating whether we are to treat
-     * the pin input as a puk.
-     */
-    private boolean validatePin(String pin, boolean isPuk) {
-
-        // for pin, we have 4-8 numbers, or puk, we use only 8.
-        int pinMinimum = isPuk ? MAX_PIN_LENGTH : MIN_PIN_LENGTH;
-
-        // check validity
-        if (pin == null || pin.length() < pinMinimum || pin.length() > MAX_PIN_LENGTH) {
-            return false;
-        } else {
-            return true;
-        }
-    }
-
-    /**
-     * Reflect the updated FDN state in the UI.
-     */
-    private void updateEnableFDN() {
-        if (mPhone.getIccCard().getIccFdnEnabled()) {
-            mButtonEnableFDN.setTitle(R.string.enable_fdn_ok);
-            mButtonEnableFDN.setSummary(R.string.fdn_enabled);
-            mButtonEnableFDN.setDialogTitle(R.string.disable_fdn);
-        } else {
-            mButtonEnableFDN.setTitle(R.string.disable_fdn_ok);
-            mButtonEnableFDN.setSummary(R.string.fdn_disabled);
-            mButtonEnableFDN.setDialogTitle(R.string.enable_fdn);
-        }
-    }
-
-    /**
-    * Reflect the updated change PIN2 state in the UI.
-    */
-    private void updateChangePIN2() {
-        if (mPhone.getIccCard().getIccPin2Blocked()) {
-            // If the pin2 is blocked, the state of the change pin2 dialog
-            // should be set for puk2 use (that is, the user should be prompted
-            // to enter puk2 code instead of old pin2).
-            resetPinChangeStateForPUK2();
-        } else {
-            resetPinChangeState();
-        }
-    }
-
-    @Override
-    protected void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-
-        mSubscriptionInfoHelper = new SubscriptionInfoHelper(this, getIntent());
-        mPhone = mSubscriptionInfoHelper.getPhone();
-        /// M: add for qiuckly hot swap when tap this preference
-        if (mPhone == null) {
-            log("onCreate: mPhone is null, finish!!!");
-            finish();
-            return;
-        }
-
-        addPreferencesFromResource(R.xml.fdn_setting);
-
-        //get UI object references
-        PreferenceScreen prefSet = getPreferenceScreen();
-        mButtonEnableFDN = (EditPinPreference) prefSet.findPreference(BUTTON_FDN_ENABLE_KEY);
-        mButtonChangePin2 = (EditPinPreference) prefSet.findPreference(BUTTON_CHANGE_PIN2_KEY);
-        prefSet.removePreference(mButtonEnableFDN);
-        //assign click listener and update state
-        mButtonEnableFDN.setOnPinEnteredListener(this);
-        updateEnableFDN();
-
-        mButtonChangePin2.setOnPinEnteredListener(this);
-
-        PreferenceScreen fdnListPref =
-                (PreferenceScreen) prefSet.findPreference(FDN_LIST_PREF_SCREEN_KEY);
-                 prefSet.removePreference(fdnListPref);
-        fdnListPref.setIntent(mSubscriptionInfoHelper.getIntent(FdnList.class));
-
-        // Only reset the pin change dialog if we're not in the middle of changing it.
-        if (icicle == null) {
-            resetPinChangeState();
-        } else {
-            mIsPuk2Locked = icicle.getBoolean(SKIP_OLD_PIN_KEY);
-            mPinChangeState = icicle.getInt(PIN_CHANGE_STATE_KEY);
-            mOldPin = icicle.getString(OLD_PIN_KEY);
-            mNewPin = icicle.getString(NEW_PIN_KEY);
-            mButtonChangePin2.setDialogMessage(icicle.getString(DIALOG_MESSAGE_KEY));
-            mButtonChangePin2.setText(icicle.getString(DIALOG_PIN_ENTRY_KEY));
-        }
-
-        ActionBar actionBar = getActionBar();
-        if (actionBar != null) {
-            // android.R.id.home will be triggered in onOptionsItemSelected()
-            actionBar.setDisplayHomeAsUpEnabled(true);
-            mSubscriptionInfoHelper.setActionBarTitle(
-                    actionBar, getResources(), R.string.fdn_with_label);
-        }
-
-        /// M: Add subId
-        mSubId = mPhone.getSubId();
-
-        /// [MTK_FDN]
-        onCreateMTK(prefSet);
-
-        /// M: listen to SIM and PHB state change to update screen
-        final IntentFilter ifilter = new IntentFilter();
-        ifilter.addAction(TelephonyIntents.ACTION_PHB_STATE_CHANGED);
-        ifilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
-        ifilter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
-        registerReceiver(mReceiver, ifilter);
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        /** M: [MTK_FDN] move update functions to updateWholeScreen @{
-        mPhone = mSubscriptionInfoHelper.getPhone();
-        updateEnableFDN();
-        updateChangePIN2();
-        @} */
-        updateWholeScreen(mSubId);
-    }
-
-    /**
-     * Save the state of the pin change.
-     */
-    @Override
-    protected void onSaveInstanceState(Bundle out) {
-        super.onSaveInstanceState(out);
-        out.putBoolean(SKIP_OLD_PIN_KEY, mIsPuk2Locked);
-        out.putInt(PIN_CHANGE_STATE_KEY, mPinChangeState);
-        out.putString(OLD_PIN_KEY, mOldPin);
-        out.putString(NEW_PIN_KEY, mNewPin);
-        out.putString(DIALOG_MESSAGE_KEY, mButtonChangePin2.getDialogMessage().toString());
-        out.putString(DIALOG_PIN_ENTRY_KEY, mButtonChangePin2.getText());
-        /// [MTK_FDN] Save the subId.
-        out.putInt(SubscriptionInfoHelper.SUB_ID_EXTRA, mSubId);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        final int itemId = item.getItemId();
-        if (itemId == android.R.id.home) {  // See ActionBar#setDisplayHomeAsUpEnabled()
-            CallFeaturesSetting.goUpToTopLevelSetting(this, mSubscriptionInfoHelper);
-            return true;
-        }
-        return super.onOptionsItemSelected(item);
-    }
-
-    private void log(String msg) {
-        Log.d(LOG_TAG, "FdnSetting: " + msg);
-    }
-
-    //----------------------- MTK -------------------------
-    // [MTK_FDN] Add retry left time behind the title
-    private int mSubId = SubscriptionInfoHelper.NO_SUB_ID;
-    private Preference mButtonFDNList;
-
-    private void onCreateMTK(PreferenceScreen prefSet) {
-        mButtonFDNList = (PreferenceScreen) prefSet.findPreference(FDN_LIST_PREF_SCREEN_KEY);
-        if (null != mButtonFDNList) {
-            mButtonFDNList.setOnPreferenceClickListener(this);
-        }
-        if (null != mButtonEnableFDN) {
-            mButtonEnableFDN.setOnPreferenceClickListener(this);
-        }
-
-        PhoneGlobals.getInstance().addSubInfoUpdateListener(this);
-
-        if (!PhoneUtils.isValidSubId(mSubId)) {
-            finish();
-            log("onCreate, finish for invalid sub = " + mSubId);
-        }
-    }
-
-    @Override
-    public boolean onPreferenceClick(Preference preference) {
-        log("[onPreferenceClick]");
-        if (preference == mButtonEnableFDN) {
-            if (TelephonyUtils.getPin2RetryNumber(mSubId) == 0) {
-                log("[onPreferenceClick] retry number is 0, tips...");
-                ///For we should not show the Enable dialog, when the PIN2 is locked.
-                if (mButtonEnableFDN.getDialog() != null) {
-                    mButtonEnableFDN.getDialog().dismiss();
-                }
-                displayMessage(R.string.fdn_puk_need_tips);
-                return true;
-            }
-        } else if (preference == mButtonFDNList) {
-            if (TelephonyUtils.isPhoneBookReady(this, mSubId)) {
-                startActivity(preference.getIntent().putExtra(
-                        SubscriptionInfoHelper.SUB_ID_EXTRA, mSubId));
-            }
-            return true;
-        }
-        return false;
-    }
-
-    /**
-     * Customer the Enable FDN dialog tip messages
-     *
-     * @param resId String's resource id
-     */
-    private void updateEnableFDNDialog() {
-        log("[updateEnableFDNDialog]");
-
-        mButtonEnableFDN.setDialogMessage(getString(R.string.enter_pin2_text) + "\n"
-                 + TelephonyUtils.getPinPuk2RetryLeftNumTips(this, mSubId, true));
-    }
-
-    /**
-     * Reset the state of the pin change dialog.
-     * MTK add subId & modify PUK2 flow.
-     * @param subId the subId of the user selected.
-     */
-    private final void resetPinChangeState(int subId) {
-        if (DBG) log("resetPinChangeState...");
-        if (TelephonyUtils.getPin2RetryNumber(subId) == 0) {
-            resetPinChangeStateForPUK2(mSubId);
-            return;
-        }
-        resetPinChangeState();
-        // Also update Enabel FDN dialog
-        updateEnableFDNDialog();
-    }
-
-    /**
-     * Reset the state of the pin change dialog solely for PUK2 use.
-     */
-    private final void resetPinChangeStateForPUK2(int subId) {
-        if (DBG) log("resetPinChangeStateForPUK2...");
-        if (TelephonyUtils.getPuk2RetryNumber(subId) == 0) {
-            log("[resetPinChangeStateForPUK2] PUK Retry number is 0, PUK2 Locked!!");
-            displayMessage(R.string.puk2_blocked);
-            return;
-        }
-        resetPinChangeStateForPUK2();
-        // Also update Enabel FDN dialog
-        updateEnableFDNDialog();
-    }
-
-    @Override
-    public void onDestroy() {
-        PhoneGlobals.getInstance().removeSubInfoUpdateListener(this);
-        unregisterReceiver(mReceiver);
-        super.onDestroy();
-    }
-
-    @Override
-    public void handleSubInfoUpdate() {
-        finish();
-    }
-
-    /**
-     * This function contains all refresh flow.
-     * 1. Enable FDN item
-     * 2. Change PIN2 item
-     * 3. FDN list item
-     * Rule is simple: if the FDN is don't supported, disable 1 & 3 items.
-     * @param subId
-     */
-    private void updateWholeScreen(int subId) {
-        // Enter this function, should make sure the mPhone & mSubId is avaliable.
-        ///M: Bug fix ALPS03531648 @{
-        if (TelephonyUtils.isAirplaneModeOn(this)) {
-           log("[updateWholeScreen] AirplaneMode ON, so finish FdnSettings");
-           finish();
-        }
-        /// @}
-
-        IccCard iccCard = mPhone.getIccCard();
-        if (iccCard != null) {
-            boolean fdnAvailable = iccCard.getIccFdnAvailable();
-            log("[updateWholeScreen] FDN available = " + fdnAvailable);
-            if(mButtonEnableFDN!=null&&mButtonFDNList!=null){
-                mButtonEnableFDN.setEnabled(fdnAvailable);
-                mButtonFDNList.setEnabled(fdnAvailable);
-            }
-
-
-            updateEnableFDN();
-            updateChangePIN2();
-            resetPinChangeState(subId);
-            updateEnableFDNDialog();
-        }
-    }
-
-    /**
-     * Handle messages MTK special
-     * @param ce
-     * @return
-     */
-    private boolean handleChangePIN2ErrorForMTK(CommandException ce) {
-        log("Handle EVENT_PIN2_CHANGE_COMPLETE Error Code ="
-                + ce.getCommandError().toString());
-        if (CommandException.Error.RADIO_NOT_AVAILABLE == ce.getCommandError()) {
-            displayMessage(R.string.fdn_errorcode_unknown_info);
-            return true;
-        }
-        return false;
-    }
-
-    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if(TelephonyIntents.ACTION_PHB_STATE_CHANGED.equals(intent.getAction())) {
-                log("PHB_STATE_CHANGED, update screen");
-                updateWholeScreen(mSubId);
-            } else if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(intent.getAction())) {
-                log("SIM_STATE_CHANGED, update screen");
-                updateWholeScreen(mSubId);
-            } else if (Intent.ACTION_AIRPLANE_MODE_CHANGED.equals(intent.getAction())) {
-                log("AIRPLANE_MODE_CHANGED, so finish FDN Settings");
-                finish();
-            }
-        }
-    };
-}
Index: vendor/branch/5058A_Claro/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java
===================================================================
--- vendor/branch/5058A_Claro/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/services/Telephony/src/com/android/phone/MobileNetworkSettings.java	(revision 3018)
@@ -1,2437 +0,0 @@
-/*
-* Copyright (C) 2014 MediaTek Inc.
-* Modification based on code covered by the mentioned copyright
-* and/or permission notice(s).
-*/
-/*
- * Copyright (C) 2006 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.phone;
-
-import com.android.ims.ImsManager;
-import com.android.internal.telephony.Phone;
-import com.android.internal.telephony.PhoneConstants;
-import com.android.internal.telephony.PhoneFactory;
-import com.android.internal.telephony.TelephonyIntents;
-import com.android.internal.telephony.TelephonyProperties;
-import com.android.settingslib.RestrictedLockUtils;
-
-import com.mediatek.internal.telephony.ITelephonyEx;
-import com.mediatek.phone.PhoneFeatureConstants;
-import com.mediatek.phone.PhoneFeatureConstants.FeatureOption;
-import com.mediatek.phone.ext.ExtensionManager;
-import com.mediatek.phone.ext.IMobileNetworkSettingsExt;
-import com.mediatek.settings.Enhanced4GLteSwitchPreference;
-import com.mediatek.settings.MobileNetworkSettingsOmEx;
-import com.mediatek.settings.TelephonyUtils;
-import com.mediatek.settings.cdma.CdmaNetworkSettings;
-import com.mediatek.settings.cdma.TelephonyUtilsEx;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import android.app.ActionBar;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.DialogInterface.OnKeyListener;
-import android.content.pm.PackageManager.NameNotFoundException;
-import android.database.ContentObserver;
-import android.net.Uri;
-import android.os.AsyncResult;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Message;
-import android.os.PersistableBundle;
-import android.os.RemoteException;
-import android.os.ServiceManager;
-import android.os.SystemProperties;
-import android.os.UserHandle;
-import android.os.UserManager;
-import android.preference.ListPreference;
-import android.preference.Preference;
-import android.preference.PreferenceActivity;
-import android.preference.PreferenceScreen;
-import android.preference.SwitchPreference;
-import android.telecom.TelecomManager;
-import android.telephony.CarrierConfigManager;
-import android.provider.Settings;
-import android.telephony.RadioAccessFamily;
-import android.telephony.PhoneStateListener;
-import android.telephony.SubscriptionInfo;
-import android.telephony.SubscriptionManager;
-import android.telephony.TelephonyManager;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.KeyEvent;
-import android.view.MenuItem;
-import android.view.View;
-import android.widget.TabHost.OnTabChangeListener;
-import android.widget.TabHost.TabContentFactory;
-import android.widget.TabHost.TabSpec;
-import android.widget.TabHost;
-
-/**
- * "Mobile network settings" screen.  This preference screen lets you
- * enable/disable mobile data, and control data roaming and other
- * network-specific mobile data features.  It's used on non-voice-capable
- * tablets as well as regular phone devices.
- *
- * Note that this PreferenceActivity is part of the phone app, even though
- * you reach it from the "Wireless & Networks" section of the main
- * Settings app.  It's not part of the "Call settings" hierarchy that's
- * available from the Phone app (see CallFeaturesSetting for that.)
- */
-public class MobileNetworkSettings extends PreferenceActivity implements
-        DialogInterface.OnClickListener, DialogInterface.OnDismissListener,
-        Preference.OnPreferenceChangeListener {
-
-    // debug data
-    private static final String LOG_TAG = "NetworkSettings";
-    private static final boolean DBG =
-        SystemProperties.get("ro.build.type").equals("eng") ? true : false;
-    public static final int REQUEST_CODE_EXIT_ECM = 17;
-
-    // Number of active Subscriptions to show tabs
-    private static final int TAB_THRESHOLD = 2;
-
-    //String keys for preference lookup
-    public static final String BUTTON_PREFERED_NETWORK_MODE = "preferred_network_mode_key";
-    private static final String BUTTON_ROAMING_KEY = "button_roaming_key";
-    private static final String BUTTON_CDMA_LTE_DATA_SERVICE_KEY = "cdma_lte_data_service_key";
-    public static final String BUTTON_ENABLED_NETWORKS_KEY = "enabled_networks_key";
-    private static final String BUTTON_4G_LTE_KEY = "enhanced_4g_lte";
-    private static final String BUTTON_CELL_BROADCAST_SETTINGS = "cell_broadcast_settings";
-    private static final String BUTTON_APN_EXPAND_KEY = "button_apn_key";
-    private static final String BUTTON_OPERATOR_SELECTION_EXPAND_KEY = "button_carrier_sel_key";
-    private static final String BUTTON_CARRIER_SETTINGS_KEY = "carrier_settings_key";
-    private static final String BUTTON_CDMA_SYSTEM_SELECT_KEY = "cdma_system_select_key";
-
-    static final int preferredNetworkMode = Phone.PREFERRED_NT_MODE;
-
-    //Information about logical "up" Activity
-    private static final String UP_ACTIVITY_PACKAGE = "com.android.settings";
-    private static final String UP_ACTIVITY_CLASS =
-            "com.android.settings.Settings$WirelessSettingsActivity";
-
-    private SubscriptionManager mSubscriptionManager;
-    private TelephonyManager mTelephonyManager;
-
-    //UI objects
-    private ListPreference mButtonPreferredNetworkMode;
-    private ListPreference mButtonEnabledNetworks;
-    private RestrictedSwitchPreference mButtonDataRoam;
-    private SwitchPreference mButton4glte;
-    private Preference mLteDataServicePref;
-
-    private static final String iface = "rmnet0"; //TODO: this will go away
-    private List<SubscriptionInfo> mActiveSubInfos;
-
-    private UserManager mUm;
-    private Phone mPhone;
-    private MyHandler mHandler;
-    private boolean mOkClicked;
-
-    // We assume the the value returned by mTabHost.getCurrentTab() == slotId
-    private TabHost mTabHost;
-
-    //GsmUmts options and Cdma options
-    GsmUmtsOptions mGsmUmtsOptions;
-    CdmaOptions mCdmaOptions;
-
-    private Preference mClickedPreference;
-    private boolean mShow4GForLTE;
-    private boolean mIsGlobalCdma;
-    private boolean mUnavailable;
-
-    /// Add for C2K OM features
-    private CdmaNetworkSettings mCdmaNetworkSettings;
-
-    private final PhoneStateListener mPhoneStateListener = new PhoneStateListener() {
-        /*
-         * Enable/disable the 'Enhanced 4G LTE Mode' when in/out of a call
-         * and depending on TTY mode and TTY support over VoLTE.
-         * @see android.telephony.PhoneStateListener#onCallStateChanged(int,
-         * java.lang.String)
-         */
-        @Override
-        public void onCallStateChanged(int state, String incomingNumber) {
-            log("PhoneStateListener.onCallStateChanged: state=" + state);
-
-            updateScreenStatus();
-
-            /// M: should also update enable state in other places, so exact to method
-            /*
-            boolean enabled = (state == TelephonyManager.CALL_STATE_IDLE)
-                    && ImsManager.isNonTtyOrTtyOnVolteEnabled(getApplicationContext(), mPhone
-                            .getPhoneId());
-            Preference pref = getPreferenceScreen().findPreference(BUTTON_4G_LTE_KEY);
-            if (pref != null) pref.setEnabled(enabled && hasActiveSubscriptions());
-            */
-            updateEnhanced4glteEnableState();
-        }
-    };
-
-    /// M: Replaced with mReceiver
-    /*private final BroadcastReceiver mPhoneChangeReceiver = new PhoneChangeReceiver();
-
-    private class PhoneChangeReceiver extends BroadcastReceiver {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (DBG) log("onReceive:");
-            // When the radio changes (ex: CDMA->GSM), refresh all options.
-            mGsmUmtsOptions = null;
-            mCdmaOptions = null;
-            updateBody();
-        }
-    }*/
-
-    //This is a method implemented for DialogInterface.OnClickListener.
-    //  Used to dismiss the dialogs when they come up.
-    public void onClick(DialogInterface dialog, int which) {
-        if (which == DialogInterface.BUTTON_POSITIVE) {
-            mPhone.setDataRoamingEnabled(true);
-            mOkClicked = true;
-        } else {
-            // Reset the toggle
-            mButtonDataRoam.setChecked(false);
-        }
-    }
-
-    @Override
-    public void onDismiss(DialogInterface dialog) {
-        // Assuming that onClick gets called first
-        mButtonDataRoam.setChecked(mOkClicked);
-    }
-
-    /**
-     * Invoked on each preference click in this hierarchy, overrides
-     * PreferenceActivity's implementation.  Used to make sure we track the
-     * preference click events.
-     */
-    @Override
-    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
-        /** TODO: Refactor and get rid of the if's using subclasses */
-        final int phoneSubId = mPhone.getSubId();
-        if (mCdmaNetworkSettings != null &&
-            mCdmaNetworkSettings.onPreferenceTreeClick(preferenceScreen, preference)) {
-            return true;
-        }
-        /// M: Add for Plug-in @{
-        if (mExt.onPreferenceTreeClick(preferenceScreen, preference)) {
-            return true;
-        } else
-        /// @}
-        if (preference.getKey().equals(BUTTON_4G_LTE_KEY)) {
-            return true;
-        } else if (mGsmUmtsOptions != null &&
-                mGsmUmtsOptions.preferenceTreeClick(preference) == true) {
-            return true;
-        } else if (mCdmaOptions != null &&
-                   mCdmaOptions.preferenceTreeClick(preference) == true) {
-            /** M: Change get ECM mode by function @{
-            if (Boolean.parseBoolean(
-                    SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
-            */
-            if (mPhone.isInEcm()) {
-            /** @} */
-
-                mClickedPreference = preference;
-
-                // In ECM mode launch ECM app dialog
-                startActivityForResult(
-                    new Intent(TelephonyIntents.ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS, null),
-                    REQUEST_CODE_EXIT_ECM);
-            }
-            return true;
-        } else if (preference == mButtonPreferredNetworkMode) {
-            //displays the value taken from the Settings.System
-            int settingsNetworkMode = android.provider.Settings.Global.getInt(mPhone.getContext().
-                    getContentResolver(),
-                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
-                    preferredNetworkMode);
-            mButtonPreferredNetworkMode.setValue(Integer.toString(settingsNetworkMode));
-            return true;
-        } else if (preference == mLteDataServicePref) {
-            String tmpl = android.provider.Settings.Global.getString(getContentResolver(),
-                        android.provider.Settings.Global.SETUP_PREPAID_DATA_SERVICE_URL);
-            if (!TextUtils.isEmpty(tmpl)) {
-                TelephonyManager tm = (TelephonyManager) getSystemService(
-                        Context.TELEPHONY_SERVICE);
-                String imsi = tm.getSubscriberId();
-                if (imsi == null) {
-                    imsi = "";
-                }
-                final String url = TextUtils.isEmpty(tmpl) ? null
-                        : TextUtils.expandTemplate(tmpl, imsi).toString();
-                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-                startActivity(intent);
-            } else {
-                if (DBG) {
-                    android.util.Log.e(LOG_TAG, "Missing SETUP_PREPAID_DATA_SERVICE_URL");
-                }
-            }
-            return true;
-        }  else if (preference == mButtonEnabledNetworks) {
-            int settingsNetworkMode = android.provider.Settings.Global.getInt(mPhone.getContext().
-                            getContentResolver(),
-                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
-                    preferredNetworkMode);
-            /** M: Remove this for LW project, for we need set a temple value.
-            mButtonEnabledNetworks.setValue(Integer.toString(settingsNetworkMode));
-             */
-            return true;
-        } else if (preference == mButtonDataRoam) {
-            // Do not disable the preference screen if the user clicks Data roaming.
-            return true;
-        } else {
-            // if the button is anything but the simple toggle preference,
-            // we'll need to disable all preferences to reject all click
-            // events until the sub-activity's UI comes up.
-            preferenceScreen.setEnabled(false);
-            // Let the intents be launched by the Preference manager
-            return false;
-        }
-    }
-
-    private final SubscriptionManager.OnSubscriptionsChangedListener mOnSubscriptionsChangeListener
-            = new SubscriptionManager.OnSubscriptionsChangedListener() {
-        @Override
-        public void onSubscriptionsChanged() {
-            if (DBG) {
-                log("onSubscriptionsChanged:");
-            }
-            /// M: add for hot swap @{
-            if (TelephonyUtils.isHotSwapHanppened(
-                    mActiveSubInfos, PhoneUtils.getActiveSubInfoList())) {
-                log("onSubscriptionsChanged:hot swap hanppened");
-                dissmissDialog(mButtonPreferredNetworkMode);
-                dissmissDialog(mButtonEnabledNetworks);
-                finish();
-                return;
-            }
-            /// @}
-            initializeSubscriptions();
-        }
-    };
-
-    private void initializeSubscriptions() {
-        if (isDestroyed()) { // Process preferences in activity only if its not destroyed
-            return;
-        }
-        int currentTab = 0;
-        if (DBG) {
-            log("initializeSubscriptions:+");
-        }
-        // Before updating the the active subscription list check
-        // if tab updating is needed as the list is changing.
-        List<SubscriptionInfo> sil = mSubscriptionManager.getActiveSubscriptionInfoList();
-        TabState state = isUpdateTabsNeeded(sil);
-
-        // Update to the active subscription list
-        mActiveSubInfos.clear();
-        if (sil != null) {
-            mActiveSubInfos.addAll(sil);
-            /* M: remove for 3SIM feature
-            // If there is only 1 sim then currenTab should represent slot no. of the sim.
-            if (sil.size() == 1) {
-                currentTab = sil.get(0).getSimSlotIndex();
-            }*/
-        }
-
-        switch (state) {
-            case UPDATE: {
-                if (DBG) {
-                    log("initializeSubscriptions: UPDATE");
-                }
-                currentTab = mTabHost != null ? mTabHost.getCurrentTab() : mCurrentTab;
-
-                setContentView(com.android.internal.R.layout.common_tab_settings);
-
-                mTabHost = (TabHost) findViewById(android.R.id.tabhost);
-                mTabHost.setup();
-
-                // Update the tabName. Since the mActiveSubInfos are in slot order
-                // we can iterate though the tabs and subscription info in one loop. But
-                // we need to handle the case where a slot may be empty.
-
-                /// M: change design for 3SIM feature @{
-                for (int index = 0; index  < mActiveSubInfos.size(); index++) {
-                    String tabName = String.valueOf(mActiveSubInfos.get(index).getDisplayName());
-                    if (DBG) {
-                        log("initializeSubscriptions: tab=" + index + " name=" + tabName);
-                    }
-
-                    mTabHost.addTab(buildTabSpec(String.valueOf(index), tabName));
-                }
-                /// @}
-
-                mTabHost.setOnTabChangedListener(mTabListener);
-                mTabHost.setCurrentTab(currentTab);
-                break;
-            }
-            case NO_TABS: {
-                if (DBG) log("initializeSubscriptions: NO_TABS");
-
-                if (mTabHost != null) {
-                    mTabHost.clearAllTabs();
-                    mTabHost = null;
-                }
-                setContentView(com.android.internal.R.layout.common_tab_settings);
-                break;
-            }
-            case DO_NOTHING: {
-                if (DBG) log("initializeSubscriptions: DO_NOTHING");
-                if (mTabHost != null) {
-                    currentTab = mTabHost.getCurrentTab();
-                }
-                break;
-            }
-        }
-
-        updatePhone(convertTabToSlot(currentTab));
-        updateBody();
-        if (DBG) {
-            log("initializeSubscriptions:-");
-        }
-    }
-
-    private enum TabState {
-        NO_TABS, UPDATE, DO_NOTHING
-    }
-    private TabState isUpdateTabsNeeded(List<SubscriptionInfo> newSil) {
-        TabState state = TabState.DO_NOTHING;
-        if (newSil == null) {
-            if (mActiveSubInfos.size() >= TAB_THRESHOLD) {
-                if (DBG) log("isUpdateTabsNeeded: NO_TABS, size unknown and was tabbed");
-                state = TabState.NO_TABS;
-            }
-        } else if (newSil.size() < TAB_THRESHOLD && mActiveSubInfos.size() >= TAB_THRESHOLD) {
-            if (DBG) log("isUpdateTabsNeeded: NO_TABS, size went to small");
-            state = TabState.NO_TABS;
-        } else if (newSil.size() >= TAB_THRESHOLD && mActiveSubInfos.size() < TAB_THRESHOLD) {
-            if (DBG) log("isUpdateTabsNeeded: UPDATE, size changed");
-            state = TabState.UPDATE;
-        } else if (newSil.size() >= TAB_THRESHOLD) {
-            Iterator<SubscriptionInfo> siIterator = mActiveSubInfos.iterator();
-            for(SubscriptionInfo newSi : newSil) {
-                SubscriptionInfo curSi = siIterator.next();
-                if (!newSi.getDisplayName().equals(curSi.getDisplayName())) {
-                    if (DBG) log("isUpdateTabsNeeded: UPDATE, new name=" + newSi.getDisplayName());
-                    state = TabState.UPDATE;
-                    break;
-                }
-            }
-        }
-        if (DBG) {
-            log("isUpdateTabsNeeded:- " + state
-                + " newSil.size()=" + ((newSil != null) ? newSil.size() : 0)
-                + " mActiveSubInfos.size()=" + mActiveSubInfos.size());
-        }
-        return state;
-    }
-
-    private OnTabChangeListener mTabListener = new OnTabChangeListener() {
-        @Override
-        public void onTabChanged(String tabId) {
-            if (DBG) log("onTabChanged:");
-            // The User has changed tab; update the body.
-            updatePhone(convertTabToSlot(Integer.parseInt(tabId)));
-            mCurrentTab = Integer.parseInt(tabId);
-            updateBody();
-        }
-    };
-
-    private void updatePhone(int slotId) {
-        final SubscriptionInfo sir = mSubscriptionManager
-                .getActiveSubscriptionInfoForSimSlotIndex(slotId);
-        try {
-            if (sir != null) {
-                mPhone = PhoneFactory.getPhone(
-                        SubscriptionManager.getPhoneId(sir.getSubscriptionId()));
-            }
-            if (mPhone == null) {
-                // Do the best we can
-                mPhone = PhoneGlobals.getPhone();
-            }
-        } catch (IllegalStateException e) {
-            Log.e(LOG_TAG, "Phone not initialize");
-            finish();
-        }
-        log("updatePhone:- slotId=" + slotId + " sir=" + sir);
-    }
-
-    private TabContentFactory mEmptyTabContent = new TabContentFactory() {
-        @Override
-        public View createTabContent(String tag) {
-            return new View(mTabHost.getContext());
-        }
-    };
-
-    private TabSpec buildTabSpec(String tag, String title) {
-        return mTabHost.newTabSpec(tag).setIndicator(title).setContent(
-                mEmptyTabContent);
-    }
-
-    @Override
-    protected void onCreate(Bundle icicle) {
-        if (DBG) log("onCreate:+");
-        super.onCreate(icicle);
-        /// Add for cmcc open market @{
-        mOmEx = new MobileNetworkSettingsOmEx(this);
-        /// @}
-        /// M: init plug-in
-        mExt = ExtensionManager.getMobileNetworkSettingsExt();
-
-        mHandler = new MyHandler();
-        mUm = (UserManager) getSystemService(Context.USER_SERVICE);
-        mSubscriptionManager = SubscriptionManager.from(this);
-        mTelephonyManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
-
-        if (mUm.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)) {
-            mUnavailable = true;
-            setContentView(R.layout.telephony_disallowed_preference_screen);
-            return;
-        }
-
-        addPreferencesFromResource(R.xml.network_setting);
-
-        mButton4glte = (SwitchPreference)findPreference(BUTTON_4G_LTE_KEY);
-        mButton4glte.setOnPreferenceChangeListener(this);
-
-        try {
-            Context con = createPackageContext("com.android.systemui", 0);
-            int id = con.getResources().getIdentifier("config_show4GForLTE",
-                    "bool", "com.android.systemui");
-            mShow4GForLTE = con.getResources().getBoolean(id);
-        } catch (NameNotFoundException e) {
-            loge("NameNotFoundException for show4GFotLTE");
-            mShow4GForLTE = false;
-        }
-
-        //get UI object references
-        PreferenceScreen prefSet = getPreferenceScreen();
-
-        mButtonDataRoam = (RestrictedSwitchPreference) prefSet.findPreference(BUTTON_ROAMING_KEY);
-        mButtonPreferredNetworkMode = (ListPreference) prefSet.findPreference(
-                BUTTON_PREFERED_NETWORK_MODE);
-        mButtonEnabledNetworks = (ListPreference) prefSet.findPreference(
-                BUTTON_ENABLED_NETWORKS_KEY);
-        mButtonDataRoam.setOnPreferenceChangeListener(this);
-
-        mLteDataServicePref = prefSet.findPreference(BUTTON_CDMA_LTE_DATA_SERVICE_KEY);
-
-        // Initialize mActiveSubInfo
-        int max = mSubscriptionManager.getActiveSubscriptionInfoCountMax();
-        mActiveSubInfos = new ArrayList<SubscriptionInfo>(max);
-        /// M: for screen rotate
-        if (icicle != null) {
-            mCurrentTab = icicle.getInt(CURRENT_TAB);
-        }
-
-        initializeSubscriptions();
-
-        initIntentFilter();
-        registerReceiver(mReceiver, mIntentFilter);
-        mSubscriptionManager.addOnSubscriptionsChangedListener(mOnSubscriptionsChangeListener);
-        mTelephonyManager.listen(
-                mPhoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
-
-        /// M: [CT VOLTE]
-        getContentResolver().registerContentObserver(
-                Settings.Global.getUriFor(Settings.Global.ENHANCED_4G_MODE_ENABLED),
-                true, mContentObserver);
-        if (DBG) log("onCreate:-");
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        // M: replace with mReceiver
-        //unregisterReceiver(mPhoneChangeReceiver);
-        unregisterReceiver(mReceiver);
-
-        if (DBG) {
-            log("onDestroy " + this);
-        }
-        if (mCdmaNetworkSettings != null) {
-            mCdmaNetworkSettings.onDestroy();
-            mCdmaNetworkSettings = null;
-        }
-        if (mSubscriptionManager != null) {
-            mSubscriptionManager
-                    .removeOnSubscriptionsChangedListener(mOnSubscriptionsChangeListener);
-        }
-        if (mTelephonyManager != null) {
-            mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE);
-        }
-        /// M: For plugin to unregister listener
-        if(mExt != null) {
-            mExt.unRegister();
-        }
-        /// Add for cmcc open market @{
-        if(mOmEx != null){
-            mOmEx.unRegister();
-        }
-        /// @}
-
-        /// M: [CT VOLTE] @{
-        getContentResolver().unregisterContentObserver(mContentObserver);
-        if(mDialog != null && mDialog.isShowing()) {
-            mDialog.dismiss();
-        }
-        /// @}
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        if (DBG) log("onResume:+");
-
-        if (mUnavailable) {
-            if (DBG) log("onResume:- ignore mUnavailable == false");
-            return;
-        }
-
-        /// M: for C2K OM features @{
-        if (mCdmaNetworkSettings != null) {
-            mCdmaNetworkSettings.onResume();
-        }
-        /// @}
-
-        // upon resumption from the sub-activity, make sure we re-enable the
-        // preferences.
-        // getPreferenceScreen().setEnabled(true);
-
-        // Set UI state in onResume because a user could go home, launch some
-        // app to change this setting's backend, and re-launch this settings app
-        // and the UI state would be inconsistent with actual state
-        mButtonDataRoam.setChecked(mPhone.getDataRoamingEnabled());
-
-        if (getPreferenceScreen().findPreference(BUTTON_PREFERED_NETWORK_MODE) != null
-                || getPreferenceScreen().findPreference(BUTTON_ENABLED_NETWORKS_KEY) != null)  {
-            updatePreferredNetworkUIFromDb();
-        }
-
-        /** M: Add For [MTK_Enhanced4GLTE]
-        if (ImsManager.isVolteEnabledByPlatform(this)
-                && ImsManager.isVolteProvisionedOnDevice(this)) {
-            TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
-            tm.listen(mPhoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
-        }
-
-        // NOTE: Buttons will be enabled/disabled in mPhoneStateListener
-        boolean enh4glteMode = ImsManager.isEnhanced4gLteModeSettingEnabledByUser(this)
-                && ImsManager.isNonTtyOrTtyOnVolteEnabled(this);
-        mButton4glte.setChecked(enh4glteMode);
-
-        mSubscriptionManager.addOnSubscriptionsChangedListener(mOnSubscriptionsChangeListener);
-        @} */
-        /// M: For screen update
-        updateScreenStatus();
-        /// M: For plugin to update UI
-        if (mExt != null) {
-            mExt.onResume();
-        }
-
-        if (DBG) log("onResume:-");
-
-    }
-
-    @Override
-    protected void onPause() {
-        /// M: For plugin to update UI
-        if (mExt != null) {
-            mExt.onPause();
-        }
-        super.onPause();
-    }
-
-    private boolean hasActiveSubscriptions() {
-        return mActiveSubInfos.size() > 0;
-    }
-
-    private void updateBody() {
-        final Context context = getApplicationContext();
-        PreferenceScreen prefSet = getPreferenceScreen();
-        boolean isLteOnCdma = mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE;
-        final int phoneSubId = mPhone.getSubId();
-
-        log("updateBody: isLteOnCdma=" + isLteOnCdma + " phoneSubId=" + phoneSubId);
-
-        if (prefSet != null) {
-            prefSet.removeAll();
-            prefSet.addPreference(mButtonDataRoam);
-            prefSet.addPreference(mButtonPreferredNetworkMode);
-            prefSet.addPreference(mButtonEnabledNetworks);
-            prefSet.addPreference(mButton4glte);
-        }
-
-        int settingsNetworkMode = android.provider.Settings.Global.getInt(
-                mPhone.getContext().getContentResolver(),
-                android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
-                preferredNetworkMode);
-
-        PersistableBundle carrierConfig =
-                PhoneGlobals.getInstance().getCarrierConfigForSubId(mPhone.getSubId());
-        mIsGlobalCdma = isLteOnCdma
-                && carrierConfig.getBoolean(CarrierConfigManager.KEY_SHOW_CDMA_CHOICES_BOOL);
-        if (carrierConfig.getBoolean(CarrierConfigManager.KEY_HIDE_CARRIER_NETWORK_SETTINGS_BOOL)) {
-            prefSet.removePreference(mButtonPreferredNetworkMode);
-            prefSet.removePreference(mButtonEnabledNetworks);
-            prefSet.removePreference(mLteDataServicePref);
-        } else if (carrierConfig.getBoolean(CarrierConfigManager
-                    .KEY_HIDE_PREFERRED_NETWORK_TYPE_BOOL)
-                && !mPhone.getServiceState().getRoaming()) {
-            prefSet.removePreference(mButtonPreferredNetworkMode);
-            prefSet.removePreference(mButtonEnabledNetworks);
-
-            final int phoneType = mPhone.getPhoneType();
-            if (phoneType == PhoneConstants.PHONE_TYPE_CDMA) {
-                mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
-                // In World mode force a refresh of GSM Options.
-                if (isWorldMode()) {
-                    mGsmUmtsOptions = null;
-                }
-            } else if (phoneType == PhoneConstants.PHONE_TYPE_GSM) {
-                mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, phoneSubId);
-            } else {
-                throw new IllegalStateException("Unexpected phone type: " + phoneType);
-            }
-            // Since pref is being hidden from user, set network mode to default
-            // in case it is currently something else. That is possible if user
-            // changed the setting while roaming and is now back to home network.
-            settingsNetworkMode = preferredNetworkMode;
-        } else if (carrierConfig.getBoolean(CarrierConfigManager.KEY_WORLD_PHONE_BOOL) == true) {
-            prefSet.removePreference(mButtonEnabledNetworks);
-            // set the listener for the mButtonPreferredNetworkMode list preference so we can issue
-            // change Preferred Network Mode.
-            mButtonPreferredNetworkMode.setOnPreferenceChangeListener(this);
-
-            mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
-            mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, phoneSubId);
-        } else {
-            if (DBG) {
-                log("updatebody is not world phone");
-            }
-            prefSet.removePreference(mButtonPreferredNetworkMode);
-            final int phoneType = mPhone.getPhoneType();
-            ITelephonyEx iTelEx = ITelephonyEx.Stub.asInterface(
-                    ServiceManager.getService(Context.TELEPHONY_SERVICE_EX));
-            int mainPhoneId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
-            if (iTelEx != null) {
-                try {
-                    mainPhoneId = iTelEx.getMainCapabilityPhoneId();
-                } catch (RemoteException e) {
-                    loge("UpdateEnabledNetworksValueAndSummary get iTelEx error" +
-                            e.getMessage());
-                }
-            }
-            //M:03387838 if both SIM are CT4G then show non primary SIM as GSM
-            if (TelephonyUtilsEx.isCDMAPhone(mPhone)
-                    /// M: [CT VOLTE]
-                    || (TelephonyUtilsEx.isCtVolteEnabled() && TelephonyUtilsEx.isCt4gSim(mPhone
-                    .getSubId()) && (!TelephonyUtilsEx.isBothslotCtSim(mSubscriptionManager) ||
-                    (mainPhoneId == mPhone.getPhoneId())))) {
-                if (DBG) {
-                    log("phoneType == PhoneConstants.PHONE_TYPE_CDMA or is CT VOLTE...");
-                }
-                int lteForced = android.provider.Settings.Global.getInt(
-                        mPhone.getContext().getContentResolver(),
-                        android.provider.Settings.Global.LTE_SERVICE_FORCED + mPhone.getSubId(),
-                        0);
-
-                if (isLteOnCdma) {
-                    if (lteForced == 0) {
-                        mButtonEnabledNetworks.setEntries(
-                                R.array.enabled_networks_cdma_choices);
-                        mButtonEnabledNetworks.setEntryValues(
-                                R.array.enabled_networks_cdma_values);
-                    } else {
-                        switch (settingsNetworkMode) {
-                            case Phone.NT_MODE_CDMA:
-                            case Phone.NT_MODE_CDMA_NO_EVDO:
-                            case Phone.NT_MODE_EVDO_NO_CDMA:
-                                mButtonEnabledNetworks.setEntries(
-                                        R.array.enabled_networks_cdma_no_lte_choices);
-                                mButtonEnabledNetworks.setEntryValues(
-                                        R.array.enabled_networks_cdma_no_lte_values);
-                                break;
-                            case Phone.NT_MODE_GLOBAL:
-                            case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
-                            case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
-                            case Phone.NT_MODE_LTE_ONLY:
-                                mButtonEnabledNetworks.setEntries(
-                                        R.array.enabled_networks_cdma_only_lte_choices);
-                                mButtonEnabledNetworks.setEntryValues(
-                                        R.array.enabled_networks_cdma_only_lte_values);
-                                break;
-                            default:
-                                mButtonEnabledNetworks.setEntries(
-                                        R.array.enabled_networks_cdma_choices);
-                                mButtonEnabledNetworks.setEntryValues(
-                                        R.array.enabled_networks_cdma_values);
-                                break;
-                        }
-                    }
-                }
-                mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
-
-                // In World mode force a refresh of GSM Options.
-                if (isWorldMode()) {
-                    mGsmUmtsOptions = null;
-                }
-                /// M: support for cdma @{
-                if (FeatureOption.isMtk3gDongleSupport()) {
-                    PreferenceScreen activateDevice = (PreferenceScreen)
-                            prefSet.findPreference(BUTTON_CDMA_ACTIVATE_DEVICE_KEY);
-                    if (activateDevice != null) {
-                        prefSet.removePreference(activateDevice);
-                    }
-                }
-                /// @}
-            } else if (phoneType == PhoneConstants.PHONE_TYPE_GSM) {
-                if (isSupportTdscdma()) {
-                    mButtonEnabledNetworks.setEntries(
-                            R.array.enabled_networks_tdscdma_choices);
-                    mButtonEnabledNetworks.setEntryValues(
-                            R.array.enabled_networks_tdscdma_values);
-                } else if (!carrierConfig.getBoolean(CarrierConfigManager.KEY_PREFER_2G_BOOL)
-                        && !getResources().getBoolean(R.bool.config_enabled_lte)) {
-                    mButtonEnabledNetworks.setEntries(
-                            R.array.enabled_networks_except_gsm_lte_choices);
-                    mButtonEnabledNetworks.setEntryValues(
-                            R.array.enabled_networks_except_gsm_lte_values);
-                } else if (!carrierConfig.getBoolean(CarrierConfigManager.KEY_PREFER_2G_BOOL)) {
-                    int select = (mShow4GForLTE == true) ?
-                            R.array.enabled_networks_except_gsm_4g_choices
-                            : R.array.enabled_networks_except_gsm_choices;
-                    mButtonEnabledNetworks.setEntries(select);
-                    mButtonEnabledNetworks.setEntryValues(
-                            R.array.enabled_networks_except_gsm_values);
-                } else if (!FeatureOption.isMtkLteSupport()) {
-                    mButtonEnabledNetworks.setEntries(
-                            R.array.enabled_networks_except_lte_choices);
-                    if (isC2kLteSupport() && FeatureOption.isNeedDisable4G()) {
-                        if (DBG) {
-                            log("for bad phone change entries~");
-                        }
-                        mButtonEnabledNetworks.setEntryValues(
-                                R.array.enabled_networks_except_lte_values_c2k);
-                    } else {
-                        mButtonEnabledNetworks.setEntryValues(
-                                R.array.enabled_networks_except_lte_values);
-                    }
-                } else if (mIsGlobalCdma) {
-                    mButtonEnabledNetworks.setEntries(
-                            R.array.enabled_networks_cdma_choices);
-                    mButtonEnabledNetworks.setEntryValues(
-                            R.array.enabled_networks_cdma_values);
-                } else {
-                    int select = (mShow4GForLTE == true) ? R.array.enabled_networks_4g_choices
-                            : R.array.enabled_networks_choices;
-                    mButtonEnabledNetworks.setEntries(select);
-                    mExt.changeEntries(mButtonEnabledNetworks);
-                    /// Add for C2K @{
-                    if (isC2kLteSupport()) {
-                        if (DBG) {
-                            log("Change to C2K values");
-                        }
-                        mButtonEnabledNetworks.setEntryValues(
-                                R.array.enabled_networks_values_c2k);
-                    } else {
-                        mButtonEnabledNetworks.setEntryValues(
-                                R.array.enabled_networks_values);
-                    }
-                    /// @}
-                }
-                mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, phoneSubId);
-            } else {
-                throw new IllegalStateException("Unexpected phone type: " + phoneType);
-            }
-            if (isWorldMode()) {
-                mButtonEnabledNetworks.setEntries(
-                        R.array.preferred_network_mode_choices_world_mode);
-                mButtonEnabledNetworks.setEntryValues(
-                        R.array.preferred_network_mode_values_world_mode);
-            }
-            mButtonEnabledNetworks.setOnPreferenceChangeListener(this);
-            if (DBG) {
-                log("settingsNetworkMode: " + settingsNetworkMode);
-            }
-        }
-
-        final boolean missingDataServiceUrl = TextUtils.isEmpty(
-                android.provider.Settings.Global.getString(getContentResolver(),
-                        android.provider.Settings.Global.SETUP_PREPAID_DATA_SERVICE_URL));
-        if (!isLteOnCdma || missingDataServiceUrl) {
-            prefSet.removePreference(mLteDataServicePref);
-        } else {
-            android.util.Log.d(LOG_TAG, "keep ltePref");
-        }
-
-        /// M: add mtk feature.
-        onCreateMTK(prefSet);
-
-        // Enable enhanced 4G LTE mode settings depending on whether exists on platform
-        /** M: Add For [MTK_Enhanced4GLTE] @{
-        if (!(ImsManager.isVolteEnabledByPlatform(this)
-                && ImsManager.isVolteProvisionedOnDevice(this))) {
-            Preference pref = prefSet.findPreference(BUTTON_4G_LTE_KEY);
-            if (pref != null) {
-                prefSet.removePreference(pref);
-            }
-        }
-        @} */
-
-        ActionBar actionBar = getActionBar();
-        if (actionBar != null) {
-            // android.R.id.home will be triggered in onOptionsItemSelected()
-            actionBar.setDisplayHomeAsUpEnabled(true);
-        }
-
-        // Enable link to CMAS app settings depending on the value in config.xml.
-        final boolean isCellBroadcastAppLinkEnabled = this.getResources().getBoolean(
-                com.android.internal.R.bool.config_cellBroadcastAppLinks);
-        if (!mUm.isAdminUser() || !isCellBroadcastAppLinkEnabled
-                || mUm.hasUserRestriction(UserManager.DISALLOW_CONFIG_CELL_BROADCASTS)) {
-            PreferenceScreen root = getPreferenceScreen();
-            Preference ps = findPreference(BUTTON_CELL_BROADCAST_SETTINGS);
-            if (ps != null) {
-                root.removePreference(ps);
-            }
-        }
-
-        // Get the networkMode from Settings.System and displays it
-        mButtonDataRoam.setChecked(mPhone.getDataRoamingEnabled());
-
-        mButtonEnabledNetworks.setValue(Integer.toString(settingsNetworkMode));
-        mButtonPreferredNetworkMode.setValue(Integer.toString(settingsNetworkMode));
-        UpdatePreferredNetworkModeSummary(settingsNetworkMode);
-        UpdateEnabledNetworksValueAndSummary(settingsNetworkMode);
-        // Display preferred network type based on what modem returns b/18676277
-        /// M: no need set mode here
-        //mPhone.setPreferredNetworkType(settingsNetworkMode, mHandler
-        //        .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
-
-        /**
-         * Enable/disable depending upon if there are any active subscriptions.
-         *
-         * I've decided to put this enable/disable code at the bottom as the
-         * code above works even when there are no active subscriptions, thus
-         * putting it afterwards is a smaller change. This can be refined later,
-         * but you do need to remember that this all needs to work when subscriptions
-         * change dynamically such as when hot swapping sims.
-
-        boolean hasActiveSubscriptions = hasActiveSubscriptions();
-        TelephonyManager tm = (TelephonyManager) getSystemService(
-                Context.TELEPHONY_SERVICE);
-        boolean canChange4glte = (tm.getCallState() == TelephonyManager.CALL_STATE_IDLE) &&
-                ImsManager.isNonTtyOrTtyOnVolteEnabled(getApplicationContext()) &&
-                carrierConfig.getBoolean(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL);
-        boolean useVariant4glteTitle = carrierConfig.getBoolean(
-                CarrierConfigManager.KEY_ENHANCED_4G_LTE_TITLE_VARIANT_BOOL);
-        int enhanced4glteModeTitleId = useVariant4glteTitle ?
-                R.string.enhanced_4g_lte_mode_title_variant :
-                R.string.enhanced_4g_lte_mode_title;
-        */
-        mButtonDataRoam.setDisabledByAdmin(false);
-        // mButtonDataRoam.setEnabled(hasActiveSubscriptions);
-        if (mButtonDataRoam.isEnabled()) {
-            if (RestrictedLockUtils.hasBaseUserRestriction(context,
-                    UserManager.DISALLOW_DATA_ROAMING, UserHandle.myUserId())) {
-                mButtonDataRoam.setEnabled(false);
-            } else {
-                mButtonDataRoam.checkRestrictionAndSetDisabled(UserManager.DISALLOW_DATA_ROAMING);
-            }
-        }
-        /*
-        mButtonPreferredNetworkMode.setEnabled(hasActiveSubscriptions);
-        mButtonEnabledNetworks.setEnabled(hasActiveSubscriptions);
-        mButton4glte.setTitle(enhanced4glteModeTitleId);
-        mButton4glte.setEnabled(hasActiveSubscriptions && canChange4glte);
-        mLteDataServicePref.setEnabled(hasActiveSubscriptions);
-        Preference ps;
-        PreferenceScreen root = getPreferenceScreen();
-        ps = findPreference(BUTTON_CELL_BROADCAST_SETTINGS);
-        if (ps != null) {
-            ps.setEnabled(hasActiveSubscriptions);
-        }
-        ps = findPreference(BUTTON_APN_EXPAND_KEY);
-        if (ps != null) {
-            ps.setEnabled(hasActiveSubscriptions);
-        }
-        ps = findPreference(BUTTON_OPERATOR_SELECTION_EXPAND_KEY);
-        if (ps != null) {
-            ps.setEnabled(hasActiveSubscriptions);
-        }
-        ps = findPreference(BUTTON_CARRIER_SETTINGS_KEY);
-        if (ps != null) {
-            ps.setEnabled(hasActiveSubscriptions);
-        }
-        ps = findPreference(BUTTON_CDMA_SYSTEM_SELECT_KEY);
-        if (ps != null) {
-            ps.setEnabled(hasActiveSubscriptions);
-        }*/
-
-        /// Add for cmcc open market @{
-        mOmEx.updateNetworkTypeSummary(mButtonEnabledNetworks);
-        /// @}
-
-        /// M: Add for L+W DSDS.
-        updateNetworkModeForLwDsds();
-        /// M: Add for Plug-in @{
-        if (mButtonEnabledNetworks != null) {
-            if (DBG) {
-                log("Enter plug-in update updateNetworkTypeSummary - Enabled again!");
-            }
-            mExt.updateNetworkTypeSummary(mButtonEnabledNetworks);
-        }
-        /// @}
-    }
-
-    /* M: move unregister Subscriptions Change Listener to onDestory
-    @Override
-    protected void onPause() {
-        super.onPause();
-        if (DBG) log("onPause:+");
-
-        if (ImsManager.isVolteEnabledByPlatform(this)
-                && ImsManager.isVolteProvisionedOnDevice(this)) {
-            TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
-            tm.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE);
-        }
-
-        mSubscriptionManager
-            .removeOnSubscriptionsChangedListener(mOnSubscriptionsChangeListener);
-        if (DBG) log("onPause:-");
-    }*/
-
-    /**
-     * Implemented to support onPreferenceChangeListener to look for preference
-     * changes specifically on CLIR.
-     *
-     * @param preference is the preference to be changed, should be mButtonCLIR.
-     * @param objValue should be the value of the selection, NOT its localized
-     * display value.
-     */
-    public boolean onPreferenceChange(Preference preference, Object objValue) {
-        final int phoneSubId = mPhone.getSubId();
-        if (onPreferenceChangeMTK(preference, objValue)) {
-            return true;
-        }
-        if (preference == mButtonPreferredNetworkMode) {
-            //NOTE onPreferenceChange seems to be called even if there is no change
-            //Check if the button value is changed from the System.Setting
-            mButtonPreferredNetworkMode.setValue((String) objValue);
-            int buttonNetworkMode;
-            buttonNetworkMode = Integer.parseInt((String) objValue);
-            int settingsNetworkMode = android.provider.Settings.Global.getInt(
-                    mPhone.getContext().getContentResolver(),
-                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
-                    preferredNetworkMode);
-
-            log("onPreferenceChange buttonNetworkMode:"
-                    + buttonNetworkMode + " settingsNetworkMode:" + settingsNetworkMode);
-
-            if (buttonNetworkMode != settingsNetworkMode) {
-                int modemNetworkMode;
-                // if new mode is invalid ignore it
-                switch (buttonNetworkMode) {
-                    case Phone.NT_MODE_WCDMA_PREF:
-                    case Phone.NT_MODE_GSM_ONLY:
-                    case Phone.NT_MODE_WCDMA_ONLY:
-                    case Phone.NT_MODE_GSM_UMTS:
-                    case Phone.NT_MODE_CDMA:
-                    case Phone.NT_MODE_CDMA_NO_EVDO:
-                    case Phone.NT_MODE_EVDO_NO_CDMA:
-                    case Phone.NT_MODE_GLOBAL:
-                    case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
-                    case Phone.NT_MODE_LTE_GSM_WCDMA:
-                    case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
-                    case Phone.NT_MODE_LTE_ONLY:
-                    case Phone.NT_MODE_LTE_WCDMA:
-                    case Phone.NT_MODE_TDSCDMA_ONLY:
-                    case Phone.NT_MODE_TDSCDMA_WCDMA:
-                    case Phone.NT_MODE_LTE_TDSCDMA:
-                    case Phone.NT_MODE_TDSCDMA_GSM:
-                    case Phone.NT_MODE_LTE_TDSCDMA_GSM:
-                    case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
-                    case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
-                    case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
-                    case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
-                    case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
-                        // This is one of the modes we recognize
-                        modemNetworkMode = buttonNetworkMode;
-                        break;
-                    default:
-                        loge("Invalid Network Mode (" + buttonNetworkMode + ") chosen. Ignore.");
-                        return true;
-                }
-
-                mButtonPreferredNetworkMode.setValue(Integer.toString(modemNetworkMode));
-                mButtonPreferredNetworkMode.setSummary(mButtonPreferredNetworkMode.getEntry());
-
-                /// M: 03100374, need to revert the network mode if set fail
-                mPreNetworkMode = settingsNetworkMode;
-
-                android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
-                        android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
-                        buttonNetworkMode );
-
-                if (DBG) {
-                    log("setPreferredNetworkType, networkType: " + modemNetworkMode);
-                }
-                //Set the modem network mode
-                mPhone.setPreferredNetworkType(modemNetworkMode, mHandler
-                        .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
-            }
-        } else if (preference == mButtonEnabledNetworks) {
-            mButtonEnabledNetworks.setValue((String) objValue);
-            int buttonNetworkMode;
-            buttonNetworkMode = Integer.parseInt((String) objValue);
-            if (DBG) {
-                log("buttonNetworkMode: " + buttonNetworkMode);
-            }
-            int settingsNetworkMode = android.provider.Settings.Global.getInt(
-                    mPhone.getContext().getContentResolver(),
-                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
-                    preferredNetworkMode);
-
-            if (DBG) {
-                log("buttonNetworkMode: " + buttonNetworkMode +
-                    "settingsNetworkMode: " + settingsNetworkMode);
-            }
-            if (buttonNetworkMode != settingsNetworkMode) {
-                int modemNetworkMode;
-                // if new mode is invalid ignore it
-                switch (buttonNetworkMode) {
-                    case Phone.NT_MODE_WCDMA_PREF:
-                    case Phone.NT_MODE_GSM_ONLY:
-                    case Phone.NT_MODE_LTE_GSM_WCDMA:
-                    case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
-                    case Phone.NT_MODE_CDMA:
-                    case Phone.NT_MODE_CDMA_NO_EVDO:
-                    case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
-                    case Phone.NT_MODE_TDSCDMA_ONLY:
-                    case Phone.NT_MODE_TDSCDMA_WCDMA:
-                    case Phone.NT_MODE_LTE_TDSCDMA:
-                    case Phone.NT_MODE_TDSCDMA_GSM:
-                    case Phone.NT_MODE_LTE_TDSCDMA_GSM:
-                    case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
-                    case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
-                    case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
-                    case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
-                    case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
-                    case Phone.NT_MODE_WCDMA_ONLY:
-                    case Phone.NT_MODE_LTE_ONLY:
-                    /// M: Add for C2K
-                    case Phone.NT_MODE_GLOBAL:
-                        // This is one of the modes we recognize
-                        modemNetworkMode = buttonNetworkMode;
-                        break;
-                    default:
-                        loge("Invalid Network Mode (" + buttonNetworkMode + ") chosen. Ignore.");
-                        return true;
-                }
-
-                UpdateEnabledNetworksValueAndSummary(buttonNetworkMode);
-
-                /// M: 03100374, need to revert the network mode if set fail
-                mPreNetworkMode = settingsNetworkMode;
-
-                android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
-                        android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
-                        buttonNetworkMode );
-
-                if (DBG) log("setPreferredNetworkType, networkType: " + modemNetworkMode);
-
-                //Set the modem network mode
-                mPhone.setPreferredNetworkType(modemNetworkMode, mHandler
-                        .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
-            }
-        } else if (preference == mButton4glte) {
-            SwitchPreference enhanced4gModePref = (SwitchPreference) preference;
-            boolean enhanced4gMode = !enhanced4gModePref.isChecked();
-            enhanced4gModePref.setChecked(enhanced4gMode);
-            ImsManager.setEnhanced4gLteModeSetting(this, enhanced4gModePref.isChecked());
-        } else if (preference == mButtonDataRoam) {
-            if (DBG) {
-                log("onPreferenceTreeClick: preference == mButtonDataRoam.");
-            }
-            //normally called on the toggle click
-            if (!mButtonDataRoam.isChecked()) {
-                // First confirm with a warning dialog about charges
-                mOkClicked = false;
-                /// M:Add for plug-in @{
-                /* Google Code, delete by MTK
-                new AlertDialog.Builder(this).setMessage(
-                        getResources().getString(R.string.roaming_warning))
-                        .setTitle(android.R.string.dialog_alert_title)
-                */
-                if (isDestroyed()) { // Access preferences of activity only if it is not destroyed
-                    return true;
-                }
-                AlertDialog.Builder builder = new AlertDialog.Builder(this);
-                builder.setMessage(getResources().getString(R.string.roaming_warning))
-                        .setTitle(android.R.string.dialog_alert_title);
-                mExt.customizeAlertDialog(mButtonDataRoam, builder);
-                builder.setIconAttribute(android.R.attr.alertDialogIcon)
-                        .setPositiveButton(android.R.string.yes, this)
-                        .setNegativeButton(android.R.string.no, this)
-                        .show()
-                        .setOnDismissListener(this);
-                /// @}
-            } else {
-                mPhone.setDataRoamingEnabled(false);
-            }
-            return true;
-        }
-
-        /// Add for Plug-in @{
-        mExt.onPreferenceChange(preference, objValue);
-        /// @}
-        /// M: no need updateBody here
-        //updateBody();
-        // always let the preference setting proceed.
-        return true;
-    }
-
-    private class MyHandler extends Handler {
-
-        static final int MESSAGE_SET_PREFERRED_NETWORK_TYPE = 0;
-
-        @Override
-        public void handleMessage(Message msg) {
-            switch (msg.what) {
-                case MESSAGE_SET_PREFERRED_NETWORK_TYPE:
-                    handleSetPreferredNetworkTypeResponse(msg);
-                    break;
-            }
-        }
-
-        private void handleSetPreferredNetworkTypeResponse(Message msg) {
-            /// M: 03100374 restore network mode in case set fail
-            restorePreferredNetworkTypeIfNeeded(msg);
-
-            if (isDestroyed()) { // Access preferences of activity only if it is not destroyed
-                return;
-            }
-
-            AsyncResult ar = (AsyncResult) msg.obj;
-            final int phoneSubId = mPhone.getSubId();
-
-            if (ar.exception == null) {
-                int networkMode;
-                if (getPreferenceScreen().findPreference(BUTTON_PREFERED_NETWORK_MODE) != null)  {
-                    networkMode =  Integer.parseInt(mButtonPreferredNetworkMode.getValue());
-                    if (DBG) {
-                        log("handleSetPreferredNetwrokTypeResponse1: networkMode:" + networkMode);
-                    }
-                    android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
-                            android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
-                            networkMode );
-                }
-                if (getPreferenceScreen().findPreference(BUTTON_ENABLED_NETWORKS_KEY) != null)  {
-                    networkMode = Integer.parseInt(mButtonEnabledNetworks.getValue());
-                    if (DBG) {
-                        log("handleSetPreferredNetwrokTypeResponse2: networkMode:" + networkMode);
-                    }
-                    android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
-                            android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
-                            networkMode );
-                }
-            } else {
-                if (DBG) {
-                    log("handleSetPreferredNetworkTypeResponse: exception in setting network mode.");
-                }
-                updatePreferredNetworkUIFromDb();
-            }
-        }
-    }
-
-    private void updatePreferredNetworkUIFromDb() {
-        final int phoneSubId = mPhone.getSubId();
-
-        int settingsNetworkMode = android.provider.Settings.Global.getInt(
-                mPhone.getContext().getContentResolver(),
-                android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
-                preferredNetworkMode);
-
-        if (DBG) {
-            log("updatePreferredNetworkUIFromDb: settingsNetworkMode = " +
-                    settingsNetworkMode);
-        }
-
-        UpdatePreferredNetworkModeSummary(settingsNetworkMode);
-        UpdateEnabledNetworksValueAndSummary(settingsNetworkMode);
-        // changes the mButtonPreferredNetworkMode accordingly to settingsNetworkMode
-        mButtonPreferredNetworkMode.setValue(Integer.toString(settingsNetworkMode));
-    }
-
-    private void UpdatePreferredNetworkModeSummary(int NetworkMode) {
-        // M: if is not 3/4G phone, init the preference with gsm only type @{
-        if (!isCapabilityPhone(mPhone)) {
-            NetworkMode = Phone.NT_MODE_GSM_ONLY;
-            if (DBG) {
-                log("init PreferredNetworkMode with gsm only");
-            }
-        }
-        // @}
-        switch(NetworkMode) {
-            case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
-            case Phone.NT_MODE_TDSCDMA_GSM:
-            case Phone.NT_MODE_WCDMA_PREF:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_wcdma_perf_summary);
-                break;
-            case Phone.NT_MODE_GSM_ONLY:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_gsm_only_summary);
-                break;
-            case Phone.NT_MODE_TDSCDMA_WCDMA:
-            case Phone.NT_MODE_WCDMA_ONLY:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_wcdma_only_summary);
-                break;
-            case Phone.NT_MODE_GSM_UMTS:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_gsm_wcdma_summary);
-                break;
-            case Phone.NT_MODE_CDMA:
-                switch (mPhone.getLteOnCdmaMode()) {
-                    case PhoneConstants.LTE_ON_CDMA_TRUE:
-                        mButtonPreferredNetworkMode.setSummary(
-                            R.string.preferred_network_mode_cdma_summary);
-                    break;
-                    case PhoneConstants.LTE_ON_CDMA_FALSE:
-                    default:
-                        mButtonPreferredNetworkMode.setSummary(
-                            R.string.preferred_network_mode_cdma_evdo_summary);
-                        break;
-                }
-                break;
-            case Phone.NT_MODE_CDMA_NO_EVDO:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_cdma_only_summary);
-                break;
-            case Phone.NT_MODE_EVDO_NO_CDMA:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_evdo_only_summary);
-                break;
-            case Phone.NT_MODE_LTE_TDSCDMA:
-            case Phone.NT_MODE_LTE_ONLY:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_lte_summary);
-                break;
-            case Phone.NT_MODE_LTE_TDSCDMA_GSM:
-            case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
-            case Phone.NT_MODE_LTE_GSM_WCDMA:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_lte_gsm_wcdma_summary);
-                break;
-            case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_lte_cdma_evdo_summary);
-                break;
-            case Phone.NT_MODE_TDSCDMA_ONLY:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_tdscdma_summary);
-                break;
-            case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
-            case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
-                if (mPhone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA ||
-                        mIsGlobalCdma ||
-                        isWorldMode()) {
-                    mButtonPreferredNetworkMode.setSummary(
-                            R.string.preferred_network_mode_global_summary);
-                } else {
-                    mButtonPreferredNetworkMode.setSummary(
-                            R.string.preferred_network_mode_lte_summary);
-                }
-                break;
-            case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
-            case Phone.NT_MODE_GLOBAL:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_cdma_evdo_gsm_wcdma_summary);
-                break;
-            case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
-            case Phone.NT_MODE_LTE_WCDMA:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_lte_wcdma_summary);
-                break;
-            default:
-                mButtonPreferredNetworkMode.setSummary(
-                        R.string.preferred_network_mode_global_summary);
-        }
-        /// Add for Plug-in @{
-        mExt.updateNetworkTypeSummary(mButtonPreferredNetworkMode);
-        mExt.customizePreferredNetworkMode(mButtonPreferredNetworkMode, mPhone.getSubId());
-        /// @}
-        /// Add for cmcc open market @{
-        mOmEx.updateNetworkTypeSummary(mButtonPreferredNetworkMode);
-        /// @}
-    }
-
-    private void UpdateEnabledNetworksValueAndSummary(int NetworkMode) {
-        Log.d(LOG_TAG, "NetworkMode: " + NetworkMode);
-        // M: if is not 3/4G phone, init the preference with gsm only type @{
-        if (!isCapabilityPhone(mPhone)) {
-            NetworkMode = Phone.NT_MODE_GSM_ONLY;
-            if (DBG) {
-                log("init EnabledNetworks with gsm only");
-            }
-        }
-        // @}
-        switch (NetworkMode) {
-            case Phone.NT_MODE_TDSCDMA_WCDMA:
-            case Phone.NT_MODE_TDSCDMA_GSM_WCDMA:
-            case Phone.NT_MODE_TDSCDMA_GSM:
-                mButtonEnabledNetworks.setValue(
-                        Integer.toString(Phone.NT_MODE_TDSCDMA_GSM_WCDMA));
-                mButtonEnabledNetworks.setSummary(R.string.network_3G);
-                break;
-            case Phone.NT_MODE_WCDMA_ONLY:
-            case Phone.NT_MODE_GSM_UMTS:
-            case Phone.NT_MODE_WCDMA_PREF:
-                if (!mIsGlobalCdma) {
-                    mButtonEnabledNetworks.setValue(
-                            Integer.toString(Phone.NT_MODE_WCDMA_PREF));
-                    mButtonEnabledNetworks.setSummary(R.string.network_3G);
-                } else {
-                    mButtonEnabledNetworks.setValue(
-                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
-                    mButtonEnabledNetworks.setSummary(R.string.network_global);
-                }
-                break;
-            case Phone.NT_MODE_GSM_ONLY:
-                if (!mIsGlobalCdma) {
-                    mButtonEnabledNetworks.setValue(
-                            Integer.toString(Phone.NT_MODE_GSM_ONLY));
-                    mButtonEnabledNetworks.setSummary(R.string.network_2G);
-                } else {
-                    mButtonEnabledNetworks.setValue(
-                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
-                    mButtonEnabledNetworks.setSummary(R.string.network_global);
-                }
-                break;
-            case Phone.NT_MODE_LTE_GSM_WCDMA:
-                if (isWorldMode()) {
-                    mButtonEnabledNetworks.setSummary(
-                            R.string.preferred_network_mode_lte_gsm_umts_summary);
-                    controlCdmaOptions(false);
-                    controlGsmOptions(true);
-                    break;
-                }
-            case Phone.NT_MODE_LTE_ONLY:
-            case Phone.NT_MODE_LTE_WCDMA:
-                if (!mIsGlobalCdma) {
-                    mButtonEnabledNetworks.setValue(
-                            Integer.toString(Phone.NT_MODE_LTE_GSM_WCDMA));
-                    mButtonEnabledNetworks.setSummary((mShow4GForLTE == true)
-                            ? R.string.network_4G : R.string.network_lte);
-                } else {
-                    mButtonEnabledNetworks.setValue(
-                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
-                    mButtonEnabledNetworks.setSummary(R.string.network_global);
-                }
-                break;
-            case Phone.NT_MODE_LTE_CDMA_AND_EVDO:
-                if (isWorldMode()) {
-                    mButtonEnabledNetworks.setSummary(
-                            R.string.preferred_network_mode_lte_cdma_summary);
-                    ITelephonyEx iTelEx = ITelephonyEx.Stub.asInterface(
-                            ServiceManager.getService(Context.TELEPHONY_SERVICE_EX));
-                    int mainPhoneId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
-                    if (iTelEx != null) {
-                        try {
-                            mainPhoneId = iTelEx.getMainCapabilityPhoneId();
-                        } catch (RemoteException e) {
-                            loge("UpdateEnabledNetworksValueAndSummary get iTelEx error" +
-                                    e.getMessage());
-                        }
-                    }
-                    //M: 3362969 support it as GSM instead of CDMA
-                    if (TelephonyUtilsEx.isCdma3gCard(mPhone.getSubId()) &&
-                        mainPhoneId != mPhone.getPhoneId()) {
-                        controlCdmaOptions(false);
-                        controlGsmOptions(true);
-                    } else {
-                        controlCdmaOptions(true);
-                        controlGsmOptions(false);
-                    }
-
-                } else {
-                    mButtonEnabledNetworks.setValue(
-                            Integer.toString(Phone.NT_MODE_LTE_CDMA_AND_EVDO));
-                    mButtonEnabledNetworks.setSummary(R.string.network_lte);
-                }
-                break;
-            case Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
-                mButtonEnabledNetworks.setValue(
-                        Integer.toString(Phone.NT_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA));
-                mButtonEnabledNetworks.setSummary(R.string.network_3G);
-                break;
-            case Phone.NT_MODE_CDMA:
-            case Phone.NT_MODE_EVDO_NO_CDMA:
-            case Phone.NT_MODE_GLOBAL:
-                /// M: For C2K @{
-                if (isC2kLteSupport()) {
-                    if (DBG) {
-                        log("Update value to Global for c2k project");
-                    }
-                    mButtonEnabledNetworks.setValue(
-                            Integer.toString(Phone.NT_MODE_GLOBAL));
-                } else {
-                    mButtonEnabledNetworks.setValue(
-                            Integer.toString(Phone.NT_MODE_CDMA));
-                }
-                /// @}
-
-                mButtonEnabledNetworks.setSummary(R.string.network_3G);
-                break;
-            case Phone.NT_MODE_CDMA_NO_EVDO:
-                mButtonEnabledNetworks.setValue(
-                        Integer.toString(Phone.NT_MODE_CDMA_NO_EVDO));
-                mButtonEnabledNetworks.setSummary(R.string.network_1x);
-                break;
-            case Phone.NT_MODE_TDSCDMA_ONLY:
-                mButtonEnabledNetworks.setValue(
-                        Integer.toString(Phone.NT_MODE_TDSCDMA_ONLY));
-                mButtonEnabledNetworks.setSummary(R.string.network_3G);
-                break;
-            case Phone.NT_MODE_LTE_TDSCDMA_GSM:
-            case Phone.NT_MODE_LTE_TDSCDMA_GSM_WCDMA:
-            case Phone.NT_MODE_LTE_TDSCDMA:
-            case Phone.NT_MODE_LTE_TDSCDMA_WCDMA:
-            case Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
-            case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
-                if (isSupportTdscdma()) {
-                    mButtonEnabledNetworks.setValue(
-                            Integer.toString(Phone.NT_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA));
-                    mButtonEnabledNetworks.setSummary(R.string.network_lte);
-                } else {
-                    if (isWorldMode()) {
-                        ITelephonyEx iTelEx = ITelephonyEx.Stub.asInterface(
-                                ServiceManager.getService(Context.TELEPHONY_SERVICE_EX));
-                        int mainPhoneId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
-                        if (iTelEx != null) {
-                            try {
-                                mainPhoneId = iTelEx.getMainCapabilityPhoneId();
-                            } catch (RemoteException e) {
-                                loge("UpdateEnabledNetworksValueAndSummary get iTelEx error" +
-                                        e.getMessage());
-                            }
-                        }
-                        //M: 3362969 support it as GSM instead of CDMA
-                        if (TelephonyUtilsEx.isCdma3gCard(mPhone.getSubId()) &&
-                            mainPhoneId != mPhone.getPhoneId()) {
-                            controlCdmaOptions(false);
-                            controlGsmOptions(true);
-                        } else {
-                            controlCdmaOptions(true);
-                            controlGsmOptions(false);
-                        }
-                    }
-                    mButtonEnabledNetworks.setValue(
-                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
-                    if (mPhone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA ||
-                            mIsGlobalCdma ||
-                            isWorldMode()) {
-                        mButtonEnabledNetworks.setSummary(R.string.network_global);
-                    } else {
-                        mButtonEnabledNetworks.setSummary((mShow4GForLTE == true)
-                                ? R.string.network_4G : R.string.network_lte);
-                    }
-                }
-                break;
-            default:
-                String errMsg = "Invalid Network Mode (" + NetworkMode + "). Ignore.";
-                loge(errMsg);
-                mButtonEnabledNetworks.setSummary(errMsg);
-        }
-
-        //OP18 plugin
-        mExt.updatePreferredNetworkValueAndSummary(mButtonEnabledNetworks, NetworkMode);
-
-        /// Add for Plug-in @{
-        if (mButtonEnabledNetworks != null) {
-            if (DBG) {
-                log("Enter plug-in update updateNetworkTypeSummary - Enabled.");
-            }
-            mExt.updateNetworkTypeSummary(mButtonEnabledNetworks);
-            mExt.customizePreferredNetworkMode(mButtonEnabledNetworks, mPhone.getSubId());
-            /// Add for cmcc open market @{
-            mOmEx.updateNetworkTypeSummary(mButtonEnabledNetworks);
-            /// @}
-        }
-        /// @}
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        switch(requestCode) {
-        case REQUEST_CODE_EXIT_ECM:
-            Boolean isChoiceYes =
-                data.getBooleanExtra(EmergencyCallbackModeExitDialog.EXTRA_EXIT_ECM_RESULT, false);
-            if (isChoiceYes && mClickedPreference != null) {
-                // If the phone exits from ECM mode, show the CDMA Options
-                mCdmaOptions.showDialog(mClickedPreference);
-            } else {
-                // do nothing
-            }
-            break;
-
-        default:
-            break;
-        }
-    }
-
-    private static void log(String msg) {
-        Log.d(LOG_TAG, msg);
-    }
-
-    private static void loge(String msg) {
-        Log.e(LOG_TAG, msg);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        final int itemId = item.getItemId();
-        if (itemId == android.R.id.home) {  // See ActionBar#setDisplayHomeAsUpEnabled()
-            // Commenting out "logical up" capability. This is a workaround for issue 5278083.
-            //
-            // Settings app may not launch this activity via UP_ACTIVITY_CLASS but the other
-            // Activity that looks exactly same as UP_ACTIVITY_CLASS ("SubSettings" Activity).
-            // At that moment, this Activity launches UP_ACTIVITY_CLASS on top of the Activity.
-            // which confuses users.
-            // TODO: introduce better mechanism for "up" capability here.
-            /*Intent intent = new Intent(Intent.ACTION_MAIN);
-            intent.setClassName(UP_ACTIVITY_PACKAGE, UP_ACTIVITY_CLASS);
-            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
-            startActivity(intent);*/
-            finish();
-            return true;
-        }
-        return super.onOptionsItemSelected(item);
-    }
-
-    private boolean isWorldMode() {
-        boolean worldModeOn = false;
-        final TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
-        final String configString = getResources().getString(R.string.config_world_mode);
-
-        if (!TextUtils.isEmpty(configString)) {
-            String[] configArray = configString.split(";");
-            // Check if we have World mode configuration set to True only or config is set to True
-            // and SIM GID value is also set and matches to the current SIM GID.
-            if (configArray != null &&
-                   ((configArray.length == 1 && configArray[0].equalsIgnoreCase("true")) ||
-                       (configArray.length == 2 && !TextUtils.isEmpty(configArray[1]) &&
-                           tm != null && configArray[1].equalsIgnoreCase(tm.getGroupIdLevel1())))) {
-                               worldModeOn = true;
-            }
-        }
-
-        if (DBG) {
-            log("isWorldMode=" + worldModeOn);
-        }
-
-        return worldModeOn;
-    }
-
-    private void controlGsmOptions(boolean enable) {
-        PreferenceScreen prefSet = getPreferenceScreen();
-        if (prefSet == null) {
-            return;
-        }
-
-        if (mGsmUmtsOptions == null) {
-            mGsmUmtsOptions = new GsmUmtsOptions(this, prefSet, mPhone.getSubId());
-        }
-        PreferenceScreen apnExpand =
-                (PreferenceScreen) prefSet.findPreference(BUTTON_APN_EXPAND_KEY);
-        PreferenceScreen operatorSelectionExpand =
-                (PreferenceScreen) prefSet.findPreference(BUTTON_OPERATOR_SELECTION_EXPAND_KEY);
-        PreferenceScreen carrierSettings =
-                (PreferenceScreen) prefSet.findPreference(BUTTON_CARRIER_SETTINGS_KEY);
-        if (apnExpand != null) {
-            apnExpand.setEnabled(isWorldMode() || enable);
-        }
-        if (operatorSelectionExpand != null) {
-            if (enable) {
-                operatorSelectionExpand.setEnabled(true);
-            } else {
-                prefSet.removePreference(operatorSelectionExpand);
-            }
-        }
-        if (carrierSettings != null) {
-            prefSet.removePreference(carrierSettings);
-        }
-    }
-
-    private void controlCdmaOptions(boolean enable) {
-        PreferenceScreen prefSet = getPreferenceScreen();
-        if (prefSet == null) {
-            return;
-        }
-        if (enable && mCdmaOptions == null) {
-            mCdmaOptions = new CdmaOptions(this, prefSet, mPhone);
-        }
-        CdmaSystemSelectListPreference systemSelect =
-                (CdmaSystemSelectListPreference)prefSet.findPreference
-                        (BUTTON_CDMA_SYSTEM_SELECT_KEY);
-        if (systemSelect != null) {
-            systemSelect.setEnabled(enable);
-        }
-    }
-
-    private boolean isSupportTdscdma() {
-        /// M: TODO: temple solution for MR1 changes
-        /*
-        if (getResources().getBoolean(R.bool.config_support_tdscdma)) {
-            return true;
-        }
-
-        String operatorNumeric = mPhone.getServiceState().getOperatorNumeric();
-        String[] numericArray = getResources().getStringArray(
-                R.array.config_support_tdscdma_roaming_on_networks);
-        if (numericArray.length == 0 || operatorNumeric == null) {
-            return false;
-        }
-        for (String numeric : numericArray) {
-            if (operatorNumeric.equals(numeric)) {
-                return true;
-            }
-        }
-        */
-        return false;
-    }
-
-    private void dissmissDialog(ListPreference preference) {
-        Dialog dialog = null;
-        if (preference != null) {
-            dialog = preference.getDialog();
-            if (dialog != null) {
-                dialog.dismiss();
-            }
-        }
-    }
-
-    // -------------------- Mediatek ---------------------
-    // M: Add for plug-in
-    private IMobileNetworkSettingsExt mExt;
-    // M: Add for cmcc open market
-    private MobileNetworkSettingsOmEx mOmEx;
-    /// M: add for plmn list
-    public static final String BUTTON_PLMN_LIST = "button_plmn_key";
-    private static final String BUTTON_CDMA_ACTIVATE_DEVICE_KEY = "cdma_activate_device_key";
-    /// M: c2k 4g data only
-    private static final String SINGLE_LTE_DATA = "single_lte_data";
-    /// M: for screen rotate @{
-    private static final String CURRENT_TAB = "current_tab";
-    private int mCurrentTab = 0;
-    /// @}
-    private Preference mPLMNPreference;
-    private IntentFilter mIntentFilter;
-
-    /// M: 03100374 restore network mode in case set fail
-    private int mPreNetworkMode = -1;
-
-    private Dialog mDialog;
-
-    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            String action = intent.getAction();
-            if (DBG) {
-                log("action: " + action);
-            }
-            /// When receive aiplane mode, we would like to finish the activity, for
-            //  we can't get the modem capability, and will show the user selected network
-            //  mode as summary, this will make user misunderstand.(ALPS01971666)
-            if (action.equals(Intent.ACTION_AIRPLANE_MODE_CHANGED)) {
-                finish();
-            } else if (action.equals(Intent.ACTION_MSIM_MODE_CHANGED)
-                    || action.equals(TelephonyIntents.ACTION_MD_TYPE_CHANGE)
-                    || action.equals(TelephonyIntents.ACTION_LOCATED_PLMN_CHANGED)
-                    || mExt.customizeDualVolteReceiveIntent(action)) {
-                updateScreenStatus();
-            }
-            /// Add for Sim Switch @{
-            else if (action.equals(TelephonyIntents.ACTION_SET_RADIO_CAPABILITY_DONE)) {
-                if (DBG) {
-                    log("Siwtch done Action ACTION_SET_PHONE_RAT_FAMILY_DONE received ");
-                }
-                mPhone = PhoneUtils.getPhoneUsingSubId(mPhone.getSubId());
-                updateScreenStatus();
-            } else if (action.equals(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED)) {
-                // When the radio changes (ex: CDMA->GSM), refresh all options.
-                mGsmUmtsOptions = null;
-                mCdmaOptions = null;
-                updateBody();
-            } else if (action.equals(TelephonyIntents.ACTION_RAT_CHANGED)) {
-                handleRatChanged(intent);
-            }
-            /// @}
-        }
-    };
-
-    private void onCreateMTK(PreferenceScreen prefSet) {
-
-        /// M: Add For [MTK_Enhanced4GLTE] @{
-        addEnhanced4GLteSwitchPreference(prefSet);
-        /// @}
-
-        /// M: For 2G only project remove select network mode item @{
-        if (TelephonyUtils.is2GOnlyProject()) {
-            if (DBG) {
-                log("[initPreferenceForMobileNetwork]only 2G");
-            }
-            if (findPreference(BUTTON_PREFERED_NETWORK_MODE) != null) {
-                prefSet.removePreference(mButtonPreferredNetworkMode);
-            }
-            if (findPreference(BUTTON_ENABLED_NETWORKS_KEY) != null) {
-                prefSet.removePreference(mButtonEnabledNetworks);
-            }
-        }
-        /// @}
-
-        /// M: Add for plmn list @{
-        if (!FeatureOption.isMtk3gDongleSupport() && FeatureOption.isMtkCtaSet()
-                && !TelephonyUtilsEx.isCDMAPhone(mPhone)) {
-            if (DBG) {
-                log("---addPLMNList---");
-            }
-            addPLMNList(prefSet);
-        }
-        /// @}
-
-        ITelephonyEx iTelEx = ITelephonyEx.Stub.asInterface(
-                    ServiceManager.getService(Context.TELEPHONY_SERVICE_EX));
-            int mainPhoneId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
-            if (iTelEx != null) {
-                try {
-                    mainPhoneId = iTelEx.getMainCapabilityPhoneId();
-                } catch (RemoteException e) {
-                    loge("UpdateEnabledNetworksValueAndSummary get iTelEx error" +
-                            e.getMessage());
-                }
-            }
-        /// M: Add For C2K OM, OP09 will implement its own cdma network setting @{
-        if (FeatureOption.isMtkLteSupport()
-                && (isC2kLteSupport())
-                && ((TelephonyUtilsEx.isCdmaCardInserted(mPhone)
-                        || PhoneFeatureConstants.FeatureOption.isCTLteTddTestSupport())
-                        /// M:[CT VOLTE]
-                        || (TelephonyUtilsEx.isCtVolteEnabled()
-                                && TelephonyUtilsEx.isCt4gSim(mPhone.getSubId()) &&
-                                (!TelephonyUtilsEx.isBothslotCt4gSim(mSubscriptionManager) ||
-                                (mainPhoneId == mPhone.getPhoneId()))))
-                && !mExt.isCtPlugin()) {
-            if (mCdmaNetworkSettings != null) {
-                if (DBG) {
-                    log("CdmaNetworkSettings destroy " + this);
-                }
-                mCdmaNetworkSettings.onDestroy();
-                mCdmaNetworkSettings = null;
-            }
-            mCdmaNetworkSettings = new CdmaNetworkSettings(this, prefSet, mPhone);
-            mCdmaNetworkSettings.onResume();
-        }
-        /// @}
-
-        /// Add for plug-in @{
-        if (mPhone != null) {
-            mExt.initOtherMobileNetworkSettings(this, mPhone.getSubId());
-        }
-        mExt.initMobileNetworkSettings(this, convertTabToSlot(mCurrentTab));
-        /// @}
-        /// Add for cmcc open market @{
-        mOmEx.initMobileNetworkSettings(this, convertTabToSlot(mCurrentTab));
-        /// @}
-
-        updateScreenStatus();
-        mExt.onResume();
-
-        /// M: for mtk 3m
-        handleC2k3MScreen(prefSet);
-        /// M: for mtk 4m
-        handleC2k4MScreen(prefSet);
-        /// M: for mtk 5m
-        handleC2k5MScreen(prefSet);
-    }
-
-    /**
-     * Update the preferred network mode item Entries & Values
-     */
-    private void updateNetworkModeForLwDsds() {
-        /// Get main phone Id;
-        ITelephonyEx iTelEx = ITelephonyEx.Stub.asInterface(
-                ServiceManager.getService(Context.TELEPHONY_SERVICE_EX));
-        int mainPhoneId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
-        if (iTelEx != null) {
-            try{
-                mainPhoneId = iTelEx.getMainCapabilityPhoneId();
-            } catch (RemoteException e) {
-                loge("handleLwDsdsNetworkMode get iTelEx error" + e.getMessage());
-            }
-        }
-        /// If the phone main phone we should do nothing special;
-        if (DBG) {
-            log("handleLwDsdsNetworkMode mainPhoneId = " + mainPhoneId);
-        }
-        if (mainPhoneId != mPhone.getPhoneId()) {
-            /// We should compare the user's setting value & modem support info;
-            int settingsNetworkMode = android.provider.Settings.Global.getInt(
-                    mPhone.getContext().getContentResolver(),
-                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE
-                    + mPhone.getSubId(), Phone.NT_MODE_GSM_ONLY);
-            int currRat = mPhone.getRadioAccessFamily();
-            if (DBG) {
-                log("updateNetworkModeForLwDsds settingsNetworkMode = "
-                    + settingsNetworkMode + "; currRat = " + currRat);
-            }
-            if ((currRat & RadioAccessFamily.RAF_LTE) == RadioAccessFamily.RAF_LTE) {
-                int select = mShow4GForLTE ? R.array.enabled_networks_4g_choices
-                        : R.array.enabled_networks_choices;
-                mButtonEnabledNetworks.setEntries(select);
-                mButtonEnabledNetworks.setEntryValues(isC2kLteSupport() ?
-                        R.array.enabled_networks_values_c2k : R.array.enabled_networks_values);
-                if (DBG) {
-                    log("updateNetworkModeForLwDsds mShow4GForLTE = " + mShow4GForLTE);
-                }
-            } else if ((currRat & RadioAccessFamily.RAF_UMTS) == RadioAccessFamily.RAF_UMTS) {
-                // Support 3/2G for WorldMode is uLWG
-                mButtonEnabledNetworks.setEntries(
-                        R.array.enabled_networks_except_lte_choices);
-                if (isC2kLteSupport()) {
-                    mButtonEnabledNetworks.setEntryValues(
-                            R.array.enabled_networks_except_lte_values_c2k);
-                } else {
-                    mButtonEnabledNetworks.setEntryValues(
-                            R.array.enabled_networks_except_lte_values);
-                }
-                // If user select contain LTE, should set UI to 3G;
-                // NT_MODE_LTE_CDMA_AND_EVDO = 8 is the smallest value supporting LTE.
-                if (settingsNetworkMode > Phone.NT_MODE_LTE_CDMA_AND_EVDO) {
-                    if (DBG) {
-                        log("updateNetworkModeForLwDsds set network mode to 3G");
-                    }
-                    if (isC2kLteSupport()) {
-                        mButtonEnabledNetworks.setValue(
-                                Integer.toString(Phone.NT_MODE_GLOBAL));
-                    } else {
-                        mButtonEnabledNetworks.setValue(
-                                Integer.toString(Phone.NT_MODE_WCDMA_PREF));
-                    }
-                    mButtonEnabledNetworks.setSummary(R.string.network_3G);
-                } else {
-                    if (DBG) {
-                        log("updateNetworkModeForLwDsds set to what user select. ");
-                    }
-                    UpdateEnabledNetworksValueAndSummary(settingsNetworkMode);
-                }
-            } else {
-                // Only support 2G for WorldMode is uLtTG
-                if (DBG) {
-                    log("updateNetworkModeForLwDsds set to 2G only.");
-                }
-                mButtonEnabledNetworks.setSummary(R.string.network_2G);
-                mButtonEnabledNetworks.setEnabled(false);
-            }
-        }
-    }
-
-    private void initIntentFilter() {
-        /// M: for receivers sim lock gemini phone @{
-        mIntentFilter = new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
-        mIntentFilter.addAction(TelephonyIntents.ACTION_EF_CSP_CONTENT_NOTIFY);
-        mIntentFilter.addAction(Intent.ACTION_MSIM_MODE_CHANGED);
-        mIntentFilter.addAction(TelephonyIntents.ACTION_MD_TYPE_CHANGE);
-        mIntentFilter.addAction(TelephonyIntents.ACTION_LOCATED_PLMN_CHANGED);
-        mIntentFilter.addAction(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
-        ///@}
-        /// M: Add for Sim Switch @{
-        mIntentFilter.addAction(TelephonyIntents.ACTION_SET_RADIO_CAPABILITY_DONE);
-        mIntentFilter.addAction(TelephonyIntents.ACTION_RAT_CHANGED);
-        mExt.customizeDualVolteIntentFilter(mIntentFilter);
-        /// @}
-    }
-
-    private void addPLMNList(PreferenceScreen prefSet) {
-        // add PLMNList, if c2k project the order should under the 4g data only
-        int order = prefSet.findPreference(SINGLE_LTE_DATA) != null ?
-                prefSet.findPreference(SINGLE_LTE_DATA).getOrder() : mButtonDataRoam.getOrder();
-        mPLMNPreference = new Preference(this);
-        mPLMNPreference.setKey(BUTTON_PLMN_LIST);
-        mPLMNPreference.setTitle(R.string.plmn_list_setting_title);
-        Intent intentPlmn = new Intent();
-        intentPlmn.setClassName("com.android.phone", "com.mediatek.settings.PLMNListPreference");
-        intentPlmn.putExtra(SubscriptionInfoHelper.SUB_ID_EXTRA, mPhone.getSubId());
-        mPLMNPreference.setIntent(intentPlmn);
-        mPLMNPreference.setOrder(order + 1);
-       // prefSet.addPreference(mPLMNPreference);
-    }
-
-    private void updateScreenStatus() {
-        boolean isIdle = (TelephonyManager.getDefault().getCallState()
-                == TelephonyManager.CALL_STATE_IDLE);
-        boolean isShouldEnabled = isIdle && TelephonyUtils.isRadioOn(mPhone.getSubId(), this);
-        if (DBG) {
-            log("updateNetworkModePreference:isShouldEnabled = "
-                + isShouldEnabled + ", isIdle = " + isIdle);
-        }
-        getPreferenceScreen().setEnabled(isShouldEnabled
-                || PhoneFeatureConstants.FeatureOption.isCTLteTddTestSupport());
-        updateCapabilityRelatedPreference(isShouldEnabled);
-    }
-
-    /**
-     * Add for update the display of network mode preference.
-     * @param enable is the preference or not
-     */
-    private void updateCapabilityRelatedPreference(boolean enable) {
-        // if airplane mode is on or all SIMs closed, should also dismiss dialog
-        boolean isNWModeEnabled = enable && isCapabilityPhone(mPhone);
-        if (DBG) {
-            log("updateNetworkModePreference:isNWModeEnabled = " + isNWModeEnabled);
-        }
-        updateNetworkModePreference(mButtonPreferredNetworkMode, isNWModeEnabled);
-        updateNetworkModePreference(mButtonEnabledNetworks, isNWModeEnabled);
-        /// M: Add for L+W DSDS.
-        updateNetworkModeForLwDsds();
-        /// Add for [MTK_Enhanced4GLTE]
-        updateEnhanced4GLteSwitchPreference();
-
-        /// Update CDMA network settings
-        if (TelephonyUtilsEx.isCDMAPhone(mPhone) && mCdmaNetworkSettings != null) {
-            mCdmaNetworkSettings.onResume();
-        } else {
-            if (DBG) {
-                log("updateCapabilityRelatedPreference don't update cdma settings");
-            }
-        }
-    }
-
-    /**
-     * Add for update the display of network mode preference.
-     * @param enable is the preference or not
-     */
-    private void updateNetworkModePreference(ListPreference preference, boolean enable) {
-        // if airplane mode is on or all SIMs closed, should also dismiss dialog
-        if (preference != null) {
-            preference.setEnabled(enable);
-            if (!enable) {
-                dissmissDialog(preference);
-            }
-            if (getPreferenceScreen().findPreference(preference.getKey()) != null) {
-                updatePreferredNetworkUIFromDb();
-            }
-            /// Add for Plug-in @{
-            mExt.customizePreferredNetworkMode(preference, mPhone.getSubId());
-            mExt.updateLTEModeStatus(preference);
-            /// @}
-            /// Add for cmcc open market @{
-            mOmEx.updateLTEModeStatus(preference);
-            /// @}
-        }
-    }
-
-    /**
-     * handle network mode change result by framework world phone sim switch logical.
-     * @param intent which contains the info of network mode
-     */
-    private void handleRatChanged(Intent intent) {
-        int phoneId = intent.getIntExtra(PhoneConstants.PHONE_KEY, 0);
-        int modemMode = intent.getIntExtra(TelephonyIntents.EXTRA_RAT, -1);
-        if (DBG) {
-            log("handleRatChanged phoneId: " + phoneId + " modemMode: " + modemMode);
-        }
-        Phone phone = PhoneFactory.getPhone(phoneId);
-        /* For ALPS02337896, don't update the DB value when rat change.
-         * This may lead to ALPS01923338 happens again.
-        if (modemMode != -1 && isCapabilityPhone(phone)) {
-            android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
-                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE +
-                    phone.getSubId(),
-                    modemMode);
-        }
-        */
-        if (phoneId == mPhone.getPhoneId() && isCapabilityPhone(phone)) {
-            updateBody();
-        }
-    }
-
-    /**
-     * Is the phone has 3/4G capability or not.
-     * @return true if phone has 3/4G capability
-     */
-    private boolean isCapabilityPhone(Phone phone) {
-        boolean result = phone != null ? ((phone.getRadioAccessFamily()
-                & (RadioAccessFamily.RAF_UMTS | RadioAccessFamily.RAF_LTE)) > 0) : false;
-        return result;
-    }
-
-    // M: Add for [MTK_Enhanced4GLTE] @{
-    // Use our own button instand of Google default one mButton4glte
-    private Enhanced4GLteSwitchPreference mEnhancedButton4glte;
-
-    /**
-     * Add our switchPreference & Remove google default one.
-     * @param preferenceScreen
-     */
-    private void addEnhanced4GLteSwitchPreference(PreferenceScreen preferenceScreen) {
-        boolean volteEnabled = ImsManager.isVolteEnabledByPlatform(this, mPhone.getPhoneId());
-        if (DBG) {
-            log("[addEnhanced4GLteSwitchPreference] volteEnabled :"
-                + volteEnabled);
-        }
-        if (mButton4glte != null) {
-            if (DBG) {
-                log("[addEnhanced4GLteSwitchPreference] Remove mButton4glte!");
-            }
-            preferenceScreen.removePreference(mButton4glte);
-        }
-        if (volteEnabled && !mExt.isCtPlugin()) {
-            int order = mButtonEnabledNetworks.getOrder() + 1;
-            mEnhancedButton4glte = new Enhanced4GLteSwitchPreference(this, mPhone.getSubId());
-            /// Still use Google's key, title, and summary.
-            mEnhancedButton4glte.setKey(BUTTON_4G_LTE_KEY);
-            /// M: [CT VOLTE]
-            // show "VOLTE" for CT SIM
-            if (TelephonyUtilsEx.isCtVolteEnabled()
-                    && TelephonyUtilsEx.isCtSim(mPhone.getSubId())) {
-                mEnhancedButton4glte.setTitle(R.string.wfc_volte_switch_title);
-            } else {
-                PersistableBundle carrierConfig =
-                    PhoneGlobals.getInstance().getCarrierConfigForSubId(mPhone.getSubId());
-                boolean useVariant4glteTitle = carrierConfig.getBoolean(
-                        CarrierConfigManager.KEY_ENHANCED_4G_LTE_TITLE_VARIANT_BOOL);
-                int enhanced4glteModeTitleId = useVariant4glteTitle ?
-                        R.string.enhanced_4g_lte_mode_title_variant :
-                        R.string.enhanced_4g_lte_mode_title;
-                mEnhancedButton4glte.setTitle(enhanced4glteModeTitleId);
-            }
-            /// M: [CT VOLTE]
-            // show "VOLTE" for CT SIM
-            if (!TelephonyUtilsEx.isCtVolteEnabled()
-                    || !TelephonyUtilsEx.isCtSim(mPhone.getSubId())) {
-            /// @}
-                mEnhancedButton4glte.setSummary(R.string.enhanced_4g_lte_mode_summary);
-            }
-            mEnhancedButton4glte.setOnPreferenceChangeListener(this);
-            mEnhancedButton4glte.setOrder(order);
-            //preferenceScreen.addPreference(mEnhancedButton4glte);
-            ///M: Plug-in to customize the LTE switch @{
-            mExt.customizeEnhanced4GLteSwitchPreference(this, mEnhancedButton4glte);
-            ///@}
-        }
-    }
-
-    /**
-     * Update the subId in mEnhancedButton4glte.
-     */
-    private void updateEnhanced4GLteSwitchPreference() {
-        if (mEnhancedButton4glte != null) {
-            if (ImsManager.isVolteEnabledByPlatform(this, mPhone.getPhoneId()) &&
-                    (SystemProperties.getInt("ro.mtk_multiple_ims_support", 1) == 1  &&
-                    TelephonyUtilsEx.getMainPhoneId() == mPhone.getPhoneId()) ||
-                    (SystemProperties.getInt("ro.mtk_multiple_ims_support", 1) > 1 &&
-                    isCapabilityPhone(mPhone))) {
-                    log("updateEnhanced4GLteSwitchPreference add switcher");
-                if (findPreference(BUTTON_4G_LTE_KEY) == null) {
-                    getPreferenceScreen().addPreference(mEnhancedButton4glte);
-                }
-            } else {
-                if (findPreference(BUTTON_4G_LTE_KEY) != null) {
-                    getPreferenceScreen().removePreference(mEnhancedButton4glte);
-                }
-            }
-            if (findPreference(BUTTON_4G_LTE_KEY) != null) {
-                if (DBG) {
-                    log("[updateEnhanced4GLteSwitchPreference] SubId = " + mPhone.getSubId());
-                }
-                mEnhancedButton4glte.setSubId(mPhone.getSubId());
-                boolean enh4glteMode = ImsManager.isEnhanced4gLteModeSettingEnabledByUser(this,
-                        mPhone.getPhoneId())
-                        && ImsManager.isNonTtyOrTtyOnVolteEnabled(this, mPhone.getPhoneId());
-                mEnhancedButton4glte.setChecked(enh4glteMode);
-                /// M: update enabled state
-                updateEnhanced4glteEnableState();
-            }
-        }
-    }
-
-    private void updateEnhanced4glteEnableState() {
-        if (mEnhancedButton4glte != null) {
-            boolean inCall = TelecomManager.from(this).isInCall();
-            boolean nontty = ImsManager.isNonTtyOrTtyOnVolteEnabled(getApplicationContext(),
-                    mPhone.getPhoneId());
-            /// M: [CT VOLTE] @{
-            boolean enableForCtVolte = true;
-            int subId = mPhone.getSubId();
-            if (TelephonyUtilsEx.isCtVolteEnabled() && TelephonyUtilsEx.isCtSim(subId)) {
-                int settingsNetworkMode = android.provider.Settings.Global.getInt(mPhone
-                        .getContext().getContentResolver(),
-                        android.provider.Settings.Global.PREFERRED_NETWORK_MODE + subId,
-                        Phone.PREFERRED_NT_MODE);
-                enableForCtVolte = TelephonyUtilsEx.isCt4gSim(subId)
-                        && (settingsNetworkMode == Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA ||
-                            settingsNetworkMode == Phone.NT_MODE_LTE_CDMA_AND_EVDO);
-            }
-            /// @}
-            /// M: [CMCC DUAl VOLTE] @{
-            enableForCtVolte = mExt.customizeDualVolteOpDisable(subId, enableForCtVolte);
-            /// @}
-            log("updateEnhanced4glteEnableState, incall = " + inCall + ", nontty = " + nontty
-                    + ", enableForCtVolte = " + enableForCtVolte);
-            mEnhancedButton4glte.setEnabled(!inCall && nontty && hasActiveSubscriptions()
-                    && enableForCtVolte);
-            /// M: [CMCC DUAl VOLTE] @{
-            mExt.customizeDualVolteOpHide(getPreferenceScreen(), mEnhancedButton4glte, enableForCtVolte);
-            /// @}
-        }
-    }
-
-    /**
-     * For [MTK_Enhanced4GLTE]
-     * We add our own SwitchPreference, and its own onPreferenceChange call backs.
-     * @param preference
-     * @param objValue
-     * @return
-     */
-    private boolean onPreferenceChangeMTK(Preference preference, Object objValue) {
-        log("[onPreferenceChangeMTK] preference = " + preference.getTitle());
-        if (mEnhancedButton4glte == preference) {
-            if (DBG) {
-                log("[onPreferenceChangeMTK] IsChecked = " + mEnhancedButton4glte.isChecked());
-            }
-            Enhanced4GLteSwitchPreference ltePref = (Enhanced4GLteSwitchPreference) preference;
-            /// M: [CT VOLTE] @{
-            if (TelephonyUtilsEx.isCtVolteEnabled() && TelephonyUtilsEx.isCtSim(mPhone.getSubId())
-                    && !mEnhancedButton4glte.isChecked()) {
-                int type = TelephonyManager.getDefault().getNetworkType(mPhone.getSubId());
-                if (DBG) {
-                    log("network type = " + type);
-                }
-                if (TelephonyManager.NETWORK_TYPE_LTE != type
-                        && !TelephonyUtilsEx.isRoaming(mPhone)) {
-                    showVolteUnavailableDialog();
-                    return false;
-                }
-            }
-            ltePref.setChecked(!ltePref.isChecked());
-            ImsManager.setEnhanced4gLteModeSetting(this, ltePref.isChecked(), mPhone.getPhoneId());
-            return true;
-        }
-        return false;
-    }
-    /// @}
-
-    /**
-     * [CT VOLTE]When network type is not LTE, show dialog.
-     */
-    private void showVolteUnavailableDialog() {
-        if (DBG) {
-            log("showVolteUnavailableDialog ...");
-        }
-        final AlertDialog.Builder builder = new AlertDialog.Builder(this);
-        String title = this.getString(R.string.alert_ct_volte_unavailable, PhoneUtils
-                .getSubDisplayName(mPhone.getSubId()));
-        Dialog dialog = builder.setMessage(title).setNegativeButton(android.R.string.cancel,
-                new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        if (DBG) {
-                            log("dialog cancel mEnhanced4GLteSwitchPreference.setchecked  = "
-                                + !mEnhancedButton4glte.isChecked());
-                        }
-                        mEnhancedButton4glte.setChecked(!mEnhancedButton4glte.isChecked());
-
-                    }
-                }).setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                mEnhancedButton4glte.setChecked(mEnhancedButton4glte.isChecked());
-                if (DBG) {
-                    log("dialog ok" + " ims set " + mEnhancedButton4glte.isChecked() + " mSlotId = "
-                        + SubscriptionManager.getPhoneId(mPhone.getSubId()));
-                }
-                ImsManager.setEnhanced4gLteModeSetting(MobileNetworkSettings.this,
-                        mEnhancedButton4glte.isChecked(),
-                        SubscriptionManager.getPhoneId(mPhone.getSubId()));
-            }
-        }).create();
-        dialog.setCanceledOnTouchOutside(false);
-        dialog.setOnKeyListener(new OnKeyListener() {
-            @Override
-            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
-                if (KeyEvent.KEYCODE_BACK == keyCode) {
-                    if (null != dialog) {
-                        log("onKey keycode = back"
-                                + "dialog cancel mEnhanced4GLteSwitchPreference.setchecked  = "
-                                + !mEnhancedButton4glte.isChecked());
-                        mEnhancedButton4glte.setChecked(!mEnhancedButton4glte.isChecked());
-                        dialog.dismiss();
-                        return true;
-                    }
-                }
-                return false;
-            }
-        });
-        mDialog = dialog;
-        dialog.show();
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        outState.putInt(CURRENT_TAB, mCurrentTab);
-    }
-
-    /**
-     * For [MTK_3SIM].
-     * Convert Tab id to Slot id.
-     * @param currentTab tab id
-     * @return slotId
-     */
-    private int convertTabToSlot(int currentTab) {
-        int slotId = mActiveSubInfos.size() > currentTab ?
-                mActiveSubInfos.get(currentTab).getSimSlotIndex() : 0;
-        if (DBG) {
-            log("convertTabToSlot: info size=" + mActiveSubInfos.size() +
-                    " currentTab=" + currentTab + " slotId=" + slotId);
-        }
-        return slotId;
-    }
-
-    /**
-     * For C2k Common screen, (3M, 5M)
-     * @param preset
-     */
-    private void handleC2kCommonScreen(PreferenceScreen prefSet) {
-        if (DBG) {
-            log("--- go to C2k Common (3M, 5M) screen ---");
-        }
-        if (prefSet.findPreference(BUTTON_PREFERED_NETWORK_MODE) != null) {
-            prefSet.removePreference(prefSet.findPreference(BUTTON_PREFERED_NETWORK_MODE));
-        }
-        if (TelephonyUtilsEx.isCDMAPhone(mPhone)) {
-            if (prefSet.findPreference(BUTTON_ENABLED_NETWORKS_KEY) != null) {
-                prefSet.removePreference(prefSet.findPreference(BUTTON_ENABLED_NETWORKS_KEY));
-            }
-        }
-    }
-
-    /**
-     * For C2k 3M
-     * @param preset
-     */
-    private void handleC2k3MScreen(PreferenceScreen prefSet) {
-        if (!FeatureOption.isMtkLteSupport() && FeatureOption.isMtkC2k3MSupport()) {
-
-            handleC2kCommonScreen(prefSet);
-            if (DBG) {
-                log("--- go to C2k 3M ---");
-            }
-            if (!TelephonyUtilsEx.isCDMAPhone(mPhone)) {
-                mButtonEnabledNetworks.setEntries(R.array.enabled_networks_except_lte_choices);
-                mButtonEnabledNetworks.setEntryValues(
-                        R.array.enabled_networks_except_lte_values_c2k);
-            }
-        }
-    }
-
-    /**
-     * For C2k OM 4M
-     * @param preset
-     */
-    private void handleC2k4MScreen(PreferenceScreen prefSet) {
-        if (FeatureOption.isMtkLteSupport() && FeatureOption.isMtkC2k4MSupport()) {
-            if (DBG) {
-                log("--- go to C2k 4M ---");
-            }
-            if (PhoneConstants.PHONE_TYPE_GSM == mPhone.getPhoneType()) {
-                mButtonEnabledNetworks.setEntries(
-                        R.array.enabled_networks_except_td_cdma_3g_choices);
-                mButtonEnabledNetworks.setEntryValues(
-                        R.array.enabled_networks_except_td_cdma_3g_values);
-            }
-        }
-    }
-
-    /**
-     * For C2k 5M
-     * Under 5M(CLLWG).
-     * @param prefSet
-     */
-    private void handleC2k5MScreen(PreferenceScreen prefSet) {
-        if (FeatureOption.isMtkLteSupport() && FeatureOption.isMtkC2k5MSupport()) {
-
-            handleC2kCommonScreen(prefSet);
-            if (DBG) {
-                log("--- go to c2k 5M ---");
-            }
-            if (!TelephonyUtilsEx.isCDMAPhone(mPhone)) {
-                mButtonEnabledNetworks.setEntries(R.array.enabled_networks_4g_choices);
-                mButtonEnabledNetworks.setEntryValues(R.array.enabled_networks_values_c2k);
-            }
-        }
-    }
-
-    /**
-     * Whether support c2k LTE or not
-     * @return true if support else false.
-     */
-    private boolean isC2kLteSupport() {
-        return FeatureOption.isMtkSrlteSupport()
-                || FeatureOption.isMtkSvlteSupport();
-    }
-
-    /// M: if set fail, restore the preferred network type
-    private void restorePreferredNetworkTypeIfNeeded(Message msg) {
-        AsyncResult ar = (AsyncResult) msg.obj;
-        if (ar.exception != null && mPreNetworkMode != -1 && mPhone != null) {
-            final int phoneSubId = mPhone.getSubId();
-            if (DBG) {
-                log("set failed, reset preferred network mode to " + mPreNetworkMode +
-                    ", sub id = " + phoneSubId);
-            }
-            android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
-                    android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
-                    mPreNetworkMode );
-        }
-        mPreNetworkMode = -1;
-    }
-
-    /// M: [CT VOLTE]
-    private ContentObserver mContentObserver = new ContentObserver(new Handler()) {
-        @Override
-        public void onChange(boolean selfChange) {
-            if (DBG) {
-                log("onChange...");
-            }
-            updateEnhanced4GLteSwitchPreference();
-        }
-    };
-}
Index: vendor/branch/5058A_Claro/packages/services/Telephony/res/xml/call_feature_setting.xml
===================================================================
--- vendor/branch/5058A_Claro/packages/services/Telephony/res/xml/call_feature_setting.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/packages/services/Telephony/res/xml/call_feature_setting.xml	(revision 3018)
@@ -1,81 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2008 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:phone="http://schemas.android.com/apk/res/com.android.phone"
-    android:title="@string/call_settings">
-
-    <PreferenceScreen
-        android:key="phone_account_settings_preference_screen"
-        android:title="@string/phone_accounts">
-
-        <intent
-            android:targetPackage="com.android.phone"
-            android:targetClass="com.android.phone.settings.PhoneAccountSettingsActivity"/>
-
-    </PreferenceScreen>
-
-    <PreferenceScreen
-        android:key="button_voicemail_category_key"
-        android:title="@string/voicemail" />
-
-    <PreferenceScreen
-        android:key="button_fdn_key"
-        android:title="@string/fdn"
-        android:persistent="false" />
-
-    <PreferenceScreen
-        android:key="@string/wifi_calling_settings_key"
-        android:title="@string/wifi_calling">
-
-        <intent android:action="android.intent.action.MAIN"
-            android:targetPackage="com.android.settings"
-            android:targetClass="com.android.settings.Settings$WifiCallingSettingsActivity"/>
-
-    </PreferenceScreen>
-
-    <CheckBoxPreference
-        android:key="button_enable_video_calling"
-        android:title="@string/enable_video_calling_title"
-        android:persistent="true"
-        android:defaultValue="true" />
-
-    <CheckBoxPreference
-        android:key="button_auto_retry_key"
-        android:title="@string/auto_retry_mode_title"
-        android:persistent="false"
-        android:summary="@string/auto_retry_mode_summary"/>
-
-    <!-- M: Add for [IpPrefix] -->
-    <!--PreferenceScreen
-        android:key="button_ip_prefix_key"
-        android:title="@string/ip_prefix_setting"
-        android:summary="@string/ip_prefix_setting_sum"
-        android:persistent="false">
-    </PreferenceScreen-->
-
-    <PreferenceScreen
-        android:key="button_gsm_more_expand_key"
-        android:title="@string/labelGSMMore"
-        android:summary="@string/sum_gsm_call_settings"
-        android:persistent="false" />
-
-    <PreferenceScreen
-        android:key="button_cdma_more_expand_key"
-        android:title="@string/labelCDMAMore"
-        android:summary="@string/sum_cdma_call_settings"
-        android:persistent="false" />
-
-</PreferenceScreen>
Index: vendor/branch/5058A_Claro/device/mediatek/common/spn-conf.xml
===================================================================
--- vendor/branch/5058A_Claro/device/mediatek/common/spn-conf.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/device/mediatek/common/spn-conf.xml	(revision 3018)
@@ -1,1179 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
-<spnOverrides version="1">
-<spnOverride numeric="20201" spn="GR COSMOTE"/>
-<spnOverride numeric="20205" spn="vodafone GR"/>
-<spnOverride numeric="20209" spn="WIND GR"/>
-<spnOverride numeric="20210" spn="WIND GR"/>
-<spnOverride numeric="20402" spn="Tele2 NL"/>
-<spnOverride numeric="20404" spn="vodafone NL"/>
-<spnOverride numeric="20408" spn="NL KPN"/>
-<spnOverride numeric="20412" spn="NL Telfort"/>
-<spnOverride numeric="20416" spn="T-Mobile NL"/>
-<spnOverride numeric="20601" spn="Proximus"/>
-<spnOverride numeric="20610" spn="Orange B"/>
-<spnOverride numeric="20620" spn="BASE"/>
-<spnOverride numeric="20801" spn="Orange F"/>
-<spnOverride numeric="20802" spn="F-Contact"/>
-<spnOverride numeric="20809" spn="F SFR"/>
-<spnOverride numeric="20810" spn="F SFR"/>
-<spnOverride numeric="20811" spn="SFR FEMTO"/>
-<spnOverride numeric="20813" spn="F - Contact"/>
-<spnOverride numeric="20815" spn="Free"/>
-<spnOverride numeric="20820" spn="F-Bouygues Telecom"/>
-<spnOverride numeric="20888" spn="F - Contact"/>
-<spnOverride numeric="21201" spn="vala"/>
-<spnOverride numeric="21210" spn="Monaco"/>
-<spnOverride numeric="21303" spn="ANDORRA-MOBILAND"/>
-<spnOverride numeric="21401" spn="vodafone ES"/>
-<spnOverride numeric="21402" spn="Movistar"/>
-<spnOverride numeric="21403" spn="Orange SP"/>
-<spnOverride numeric="21404" spn="YOIGO"/>
-<spnOverride numeric="21407" spn="Movistar"/>
-<spnOverride numeric="21601" spn="Telenor HU"/>
-<spnOverride numeric="21603" spn="Digi.Mobile Hungary"/>
-<spnOverride numeric="21630" spn="Telekom HU"/>
-<spnOverride numeric="21670" spn="vodafone HU"/>
-<spnOverride numeric="21801" spn="HT ERONET"/>
-<spnOverride numeric="21803" spn="HT ERONET"/>
-<spnOverride numeric="21805" spn="m:tel"/>
-<spnOverride numeric="21890" spn="BH Mobile"/>
-<spnOverride numeric="21901" spn="HT HR"/>
-<spnOverride numeric="21902" spn="Tele2 HR"/>
-<spnOverride numeric="21910" spn="HR VIP"/>
-<spnOverride numeric="22001" spn="Telenor SRB"/>
-<spnOverride numeric="22003" spn="mt:s"/>
-<spnOverride numeric="22005" spn="Vip SRB"/>
-<spnOverride numeric="22201" spn="I TIM"/>
-<spnOverride numeric="22210" spn="vodafone IT"/>
-<spnOverride numeric="22288" spn="I WIND"/>
-<spnOverride numeric="22299" spn="3 ITA"/>
-<spnOverride numeric="22601" spn="RO Vodafone RO"/>
-<spnOverride numeric="22603" spn="TELEKOM.RO"/>
-<spnOverride numeric="22605" spn="RO Digi.Mobil"/>
-<spnOverride numeric="22610" spn="RO ORANGE"/>
-<spnOverride numeric="22615" spn="RO 2K Telecom"/>
-<spnOverride numeric="22801" spn="Swisscom"/>
-<spnOverride numeric="22802" spn="Sunrise"/>
-<spnOverride numeric="22803" spn="Salt"/>
-<spnOverride numeric="22815" spn="OnAir"/>
-<spnOverride numeric="23001" spn="T-Mobile CZ"/>
-<spnOverride numeric="23002" spn="O2 - CZ"/>
-<spnOverride numeric="23003" spn="Vodafone CZ"/>
-<spnOverride numeric="23101" spn="Orange SK"/>
-<spnOverride numeric="23102" spn="Telekom SK"/>
-<spnOverride numeric="23103" spn="SWAN SK"/>
-<spnOverride numeric="23106" spn="O2 - SK"/>
-<spnOverride numeric="23201" spn="A1"/>
-<spnOverride numeric="23203" spn="T-Mobile A"/>
-<spnOverride numeric="23205" spn="3 AT"/>
-<spnOverride numeric="23207" spn="telering"/>
-<spnOverride numeric="23210" spn="3 AT"/>
-<spnOverride numeric="23212" spn="A1"/>
-<spnOverride numeric="23403" spn="Airtel-Vodafone"/>
-<spnOverride numeric="23408" spn="BT OnePhone"/>
-<spnOverride numeric="23410" spn="O2 - UK"/>
-<spnOverride numeric="23415" spn="vodafone UK"/>
-<spnOverride numeric="23416" spn="TalkTalk"/>
-<spnOverride numeric="23419" spn="PMN UK"/>
-<spnOverride numeric="23420" spn="3 UK"/>
-<spnOverride numeric="23428" spn="Marathon"/>
-<spnOverride numeric="23430" spn="EE"/>
-<spnOverride numeric="23431" spn="EE"/>
-<spnOverride numeric="23432" spn="EE"/>
-<spnOverride numeric="23433" spn="EE"/>
-<spnOverride numeric="23450" spn="JT"/>
-<spnOverride numeric="23455" spn="Sure"/>
-<spnOverride numeric="23458" spn="Manx Telecom"/>
-<spnOverride numeric="23801" spn="TDC"/>
-<spnOverride numeric="23802" spn="Telenor DK"/>
-<spnOverride numeric="23806" spn="3 DK"/>
-<spnOverride numeric="23820" spn="Telia DK"/>
-<spnOverride numeric="23866" spn="Telia-Telenor DK"/>
-<spnOverride numeric="23877" spn="Telenor DK"/>
-<spnOverride numeric="24001" spn="TELIA S"/>
-<spnOverride numeric="24002" spn="3 SE"/>
-<spnOverride numeric="24004" spn="SWEDEN"/>
-<spnOverride numeric="24005" spn="Sweden 3G"/>
-<spnOverride numeric="24007" spn="Tele2"/>
-<spnOverride numeric="24008" spn="Telenor SE"/>
-<spnOverride numeric="24024" spn="Sweden Mobile"/>
-<spnOverride numeric="24201" spn="N Telenor"/>
-<spnOverride numeric="24202" spn="N NetCom"/>
-<spnOverride numeric="24204" spn="Mobile Norway"/>
-<spnOverride numeric="24205" spn="Mobile Norway"/>
-<spnOverride numeric="24214" spn="ice.net"/>
-<spnOverride numeric="24403" spn="FI DNA"/>
-<spnOverride numeric="24405" spn="FI elisa"/>
-<spnOverride numeric="24412" spn="FI DNA"/>
-<spnOverride numeric="24414" spn="FI AMT"/>
-<spnOverride numeric="24421" spn="FI elisa"/>
-<spnOverride numeric="24436" spn="DNA - Sonera FI"/>
-<spnOverride numeric="24491" spn="FI SONERA"/>
-<spnOverride numeric="24601" spn="OMNITEL LT"/>
-<spnOverride numeric="24602" spn="LT BITE GSM"/>
-<spnOverride numeric="24603" spn="Tele2 LT"/>
-<spnOverride numeric="24701" spn="LV LMT"/>
-<spnOverride numeric="24702" spn="Tele2 LV"/>
-<spnOverride numeric="24705" spn="BITE LV"/>
-<spnOverride numeric="24801" spn="Telia"/>
-<spnOverride numeric="24802" spn="Elisa EE"/>
-<spnOverride numeric="24803" spn="Tele2 EE"/>
-<spnOverride numeric="25001" spn="MTS RUS"/>
-<spnOverride numeric="25002" spn="MegaFon RUS"/>
-<spnOverride numeric="25003" spn="ROSTELECOM"/>
-<spnOverride numeric="25005" spn="ROSTELECOM"/>
-<spnOverride numeric="25007" spn="RUS 07, RUS SMARTS"/>
-<spnOverride numeric="25011" spn="ROSTELECOM"/>
-<spnOverride numeric="25012" spn="ROSTELECOM"/>
-<spnOverride numeric="25015" spn="RUS15, RUS SMARTS"/>
-<spnOverride numeric="25016" spn="NTC"/>
-<spnOverride numeric="25017" spn="ROSTELECOM"/>
-<spnOverride numeric="25019" spn="RUS INDIGO"/>
-<spnOverride numeric="25020" spn="Tele2 RU"/>
-<spnOverride numeric="25027" spn="LETAI"/>
-<spnOverride numeric="25028" spn="voda"/>
-<spnOverride numeric="25035" spn="MOTIV"/>
-<spnOverride numeric="25037" spn="KODOTEL"/>
-<spnOverride numeric="25038" spn="ROSTELECOM"/>
-<spnOverride numeric="25039" spn="ROSTELECOM"/>
-<spnOverride numeric="25099" spn="Beeline"/>
-<spnOverride numeric="25501" spn="VODAFONE"/>
-<spnOverride numeric="25502" spn="Beeline UA"/>
-<spnOverride numeric="25503" spn="UA-KYIVSTAR"/>
-<spnOverride numeric="25505" spn="UA-GT"/>
-<spnOverride numeric="25506" spn="life:)"/>
-<spnOverride numeric="25507" spn="TriMob"/>
-<spnOverride numeric="25701" spn="BY VELCOM"/>
-<spnOverride numeric="25702" spn="MTS BY"/>
-<spnOverride numeric="25704" spn="life:) BY"/>
-<spnOverride numeric="25901" spn="Orange MD"/>
-<spnOverride numeric="25902" spn="Moldcell"/>
-<spnOverride numeric="25905" spn="UNITE"/>
-<spnOverride numeric="26001" spn="Plus"/>
-<spnOverride numeric="26002" spn="T-Mobile.pl"/>
-<spnOverride numeric="26003" spn="Orange PL"/>
-<spnOverride numeric="26006" spn="Play"/>
-<spnOverride numeric="26201" spn="Telekom.de"/>
-<spnOverride numeric="26202" spn="Vodafone.de"/>
-<spnOverride numeric="26203" spn="E-Plus"/>
-<spnOverride numeric="26207" spn="o2 - de"/>
-<spnOverride numeric="26208" spn="o2 - de"/>
-<spnOverride numeric="26601" spn="GIBTEL"/>
-<spnOverride numeric="26606" spn="CTS"/>
-<spnOverride numeric="26609" spn="Shine"/>
-<spnOverride numeric="26801" spn="vodafone P"/>
-<spnOverride numeric="26803" spn="NOS"/>
-<spnOverride numeric="26806" spn="MEO"/>
-<spnOverride numeric="27001" spn="POST"/>
-<spnOverride numeric="27077" spn="L TANGO"/>
-<spnOverride numeric="27099" spn="L Orange-LU"/>
-<spnOverride numeric="27201" spn="vodafone IE"/>
-<spnOverride numeric="27202" spn="3"/>
-<spnOverride numeric="27203" spn="IRL - METEOR"/>
-<spnOverride numeric="27205" spn="3"/>
-<spnOverride numeric="27401" spn="IS SIMINN"/>
-<spnOverride numeric="27402" spn="Vodafone"/>
-<spnOverride numeric="27404" spn="Viking"/>
-<spnOverride numeric="27408" spn="IS OnWaves"/>
-<spnOverride numeric="27411" spn="NOVA IS"/>
-<spnOverride numeric="27412" spn="IS TAL"/>
-<spnOverride numeric="27601" spn="Telekom.al"/>
-<spnOverride numeric="27602" spn="Voda AL"/>
-<spnOverride numeric="27603" spn="ALBtelecom"/>
-<spnOverride numeric="27604" spn="PLUS AL"/>
-<spnOverride numeric="27801" spn="vodafone MT"/>
-<spnOverride numeric="27821" spn="go mobile"/>
-<spnOverride numeric="27877" spn="Melita Mobile"/>
-<spnOverride numeric="28001" spn="Cyta-Voda"/>
-<spnOverride numeric="28010" spn="MTN"/>
-<spnOverride numeric="28020" spn="PrimeTel PLC"/>
-<spnOverride numeric="28201" spn="GEO-GEOCELL"/>
-<spnOverride numeric="28202" spn="MAGTI-GSM-GEO"/>
-<spnOverride numeric="28204" spn="BEELINE"/>
-<spnOverride numeric="28301" spn="Beeline AM"/>
-<spnOverride numeric="28305" spn="MTS ARM"/>
-<spnOverride numeric="28310" spn="Ucom AM"/>
-<spnOverride numeric="28401" spn="Mtel"/>
-<spnOverride numeric="28403" spn="Vivacom BG"/>
-<spnOverride numeric="28405" spn="Telenor BG"/>
-<spnOverride numeric="28601" spn="TR TURKCELL"/>
-<spnOverride numeric="28602" spn="Vodafone Türkiye"/>
-<spnOverride numeric="28603" spn="AVEA"/>
-<spnOverride numeric="28801" spn="Foroya Tele"/>
-<spnOverride numeric="28802" spn="VODAFONE FO"/>
-<spnOverride numeric="29001" spn="TELE Greenland"/>
-<spnOverride numeric="29201" spn="SMT"/>
-<spnOverride numeric="29340" spn="A1 SI"/>
-<spnOverride numeric="29341" spn="MOBITEL"/>
-<spnOverride numeric="29364" spn="T-2"/>
-<spnOverride numeric="29370" spn="TELEMACH"/>
-<spnOverride numeric="29401" spn="T-Mobile MK"/>
-<spnOverride numeric="29402" spn="ONE MK"/>
-<spnOverride numeric="29403" spn="Vip MKD"/>
-<spnOverride numeric="29501" spn="SwisscomFL"/>
-<spnOverride numeric="29502" spn="Salt.li"/>
-<spnOverride numeric="29505" spn="FL1"/>
-<spnOverride numeric="29701" spn="Telenor"/>
-<spnOverride numeric="29702" spn="Telekom.me"/>
-<spnOverride numeric="29703" spn="MTEL"/>
-<spnOverride numeric="302220" spn="TELUS"/>
-<spnOverride numeric="302270" spn="Eastlink"/>
-<spnOverride numeric="302320" spn="Mobilicity"/>
-<spnOverride numeric="302340" spn="Execulink Telecom"/>
-<spnOverride numeric="302370" spn="Fido"/>
-<spnOverride numeric="302380" spn="KNET"/>
-<spnOverride numeric="302490" spn="Freedom"/>
-<spnOverride numeric="302500" spn="Videotron"/>
-<spnOverride numeric="302610" spn="Bell"/>
-<spnOverride numeric="30266" spn="MTS"/>
-<spnOverride numeric="302660" spn="MTS"/>
-<spnOverride numeric="302720" spn="Rogers Wireless"/>
-<spnOverride numeric="302730" spn="CAN TerreStar Solutions"/>
-<spnOverride numeric="302770" spn="CANRU"/>
-<spnOverride numeric="302780" spn="SaskTel"/>
-<spnOverride numeric="302880" spn="FastRoam"/>
-<spnOverride numeric="302940" spn="Wightman"/>
-<spnOverride numeric="30801" spn="SPM AMERIS"/>
-<spnOverride numeric="310020" spn="US - Union Telephone"/>
-<spnOverride numeric="310030" spn="AT&amp;T"/>
-<spnOverride numeric="310032" spn="IT&amp;E"/>
-<spnOverride numeric="310050" spn="GCI"/>
-<spnOverride numeric="310070" spn="AT&amp;T"/>
-<spnOverride numeric="310080" spn="AT&amp;T"/>
-<spnOverride numeric="310090" spn="AT&amp;T"/>
-<spnOverride numeric="310100" spn="US PLATEAU"/>
-<spnOverride numeric="310110" spn="IT&amp;E"/>
-<spnOverride numeric="310120" spn="Sprint"/>
-<spnOverride numeric="310140" spn="GTA"/>
-<spnOverride numeric="310150" spn="AT&amp;T"/>
-<spnOverride numeric="310160" spn="T-Mobile"/>
-<spnOverride numeric="310170" spn="AT&amp;T"/>
-<spnOverride numeric="310180" spn="West Central Wireless"/>
-<spnOverride numeric="310190" spn="USA Dutch Harbor"/>
-<spnOverride numeric="31020" spn="US - Union Telephone"/>
-<spnOverride numeric="310200" spn="T-Mobile"/>
-<spnOverride numeric="310210" spn="T-Mobile"/>
-<spnOverride numeric="310220" spn="T-Mobile"/>
-<spnOverride numeric="310230" spn="T-Mobile"/>
-<spnOverride numeric="310240" spn="T-Mobile"/>
-<spnOverride numeric="310250" spn="T-Mobile"/>
-<spnOverride numeric="310260" spn="T-Mobile"/>
-<spnOverride numeric="310270" spn="T-Mobile"/>
-<spnOverride numeric="310280" spn="AT&amp;T"/>
-<spnOverride numeric="310290" spn="NEP Wireless"/>
-<spnOverride numeric="31030" spn="AT&amp;T"/>
-<spnOverride numeric="310300" spn="BigSkyUS"/>
-<spnOverride numeric="310310" spn="T-Mobile"/>
-<spnOverride numeric="31032" spn="IT&amp;E"/>
-<spnOverride numeric="310320" spn="USA - CellularOne"/>
-<spnOverride numeric="310340" spn="WestLink"/>
-<spnOverride numeric="310370" spn="DOCOMO PACIFIC"/>
-<spnOverride numeric="310380" spn="AT&amp;T"/>
-<spnOverride numeric="310400" spn="USA iCAN"/>
-<spnOverride numeric="310410" spn="AT&amp;T"/>
-<spnOverride numeric="310420" spn="Cincinnati Bell USA"/>
-<spnOverride numeric="310450" spn="Cell One of NE Colorado"/>
-<spnOverride numeric="310460" spn="Simmetry"/>
-<spnOverride numeric="310470" spn="USA DOCOMO PACIFIC"/>
-<spnOverride numeric="310480" spn="iCONNECT ADVANCED"/>
-<spnOverride numeric="310490" spn="T-Mobile"/>
-<spnOverride numeric="31050" spn="GCI"/>
-<spnOverride numeric="310530" spn="Iowa Wireless USA"/>
-<spnOverride numeric="310560" spn="AT&amp;T"/>
-<spnOverride numeric="310570" spn="Cell One"/>
-<spnOverride numeric="310580" spn="T-Mobile"/>
-<spnOverride numeric="310590" spn="Verizon"/>
-<spnOverride numeric="310630" spn="USA AmeriLink"/>
-<spnOverride numeric="310640" spn="USA AE Airadigm"/>
-<spnOverride numeric="310650" spn="Jasper"/>
-<spnOverride numeric="310660" spn="T-Mobile"/>
-<spnOverride numeric="310680" spn="AT&amp;T"/>
-<spnOverride numeric="310690" spn="Limitless Mobile"/>
-<spnOverride numeric="310710" spn="USA ASTAC"/>
-<spnOverride numeric="310730" spn="U.S.Cellular"/>
-<spnOverride numeric="310740" spn="USA OTZ"/>
-<spnOverride numeric="31077" spn="i wireless"/>
-<spnOverride numeric="310770" spn="i wireless"/>
-<spnOverride numeric="31080" spn="Corr Wireless"/>
-<spnOverride numeric="310800" spn="T-Mobile"/>
-<spnOverride numeric="310840" spn="telna Mobile"/>
-<spnOverride numeric="310870" spn="US"/>
-<spnOverride numeric="310880" spn="USAACSI"/>
-<spnOverride numeric="310890" spn="Verizon"/>
-<spnOverride numeric="310980" spn="AT&amp;T"/>
-<spnOverride numeric="310990" spn="Worldcall"/>
-<spnOverride numeric="311030" spn="Indigo"/>
-<spnOverride numeric="311040" spn="USA - Commnet"/>
-<spnOverride numeric="311080" spn="Pine Cellular"/>
-<spnOverride numeric="311090" spn="USASXLP"/>
-<spnOverride numeric="311150" spn="Wilkes USA"/>
-<spnOverride numeric="311180" spn="AT&amp;T"/>
-<spnOverride numeric="311190" spn="USAC1ECI"/>
-<spnOverride numeric="311240" spn="USACWCI"/>
-<spnOverride numeric="311270" spn="Verizon"/>
-<spnOverride numeric="31130" spn="Indigo"/>
-<spnOverride numeric="311330" spn="BTW"/>
-<spnOverride numeric="311370" spn="GCI"/>
-<spnOverride numeric="31140" spn="USA - Commnet"/>
-<spnOverride numeric="311480" spn="Verizon"/>
-<spnOverride numeric="311490" spn="Sprint"/>
-<spnOverride numeric="311500" spn="MOSAIC"/>
-<spnOverride numeric="311530" spn="USANW"/>
-<spnOverride numeric="311540" spn="USA Proximiti"/>
-<spnOverride numeric="311580" spn="U.S.Cellular"/>
-<spnOverride numeric="311660" spn="Metro PCS"/>
-<spnOverride numeric="311710" spn="Northeast Wireless"/>
-<spnOverride numeric="311730" spn="USA Proximiti"/>
-<spnOverride numeric="311740" spn="TCI"/>
-<spnOverride numeric="31180" spn="Pine Cellular"/>
-<spnOverride numeric="311810" spn="Bluegrass Wireless"/>
-<spnOverride numeric="311870" spn="Sprint"/>
-<spnOverride numeric="31190" spn="USASXLP"/>
-<spnOverride numeric="311940" spn="CLEAR"/>
-<spnOverride numeric="312060" spn="CoverageCo"/>
-<spnOverride numeric="312180" spn="Limitless Mobile"/>
-<spnOverride numeric="312230" spn="SRT Wireless"/>
-<spnOverride numeric="312260" spn="USACL"/>
-<spnOverride numeric="312280" spn="Pioneer"/>
-<spnOverride numeric="312480" spn="Nemont"/>
-<spnOverride numeric="31260" spn="CoverageCo"/>
-<spnOverride numeric="312630" spn="NetGenuity"/>
-<spnOverride numeric="312870" spn="GigSky"/>
-<spnOverride numeric="330110" spn="Claro PR"/>
-<spnOverride numeric="330120" spn="Open Mob PRI"/>
-<spnOverride numeric="334020" spn="BOUYG-C"/>
-<spnOverride numeric="334030" spn="Movistar"/>
-<spnOverride numeric="33403" spn="Movistar"/>
-<spnOverride numeric="334050" spn="Iusacell GSM"/>
-<spnOverride numeric="334090" spn="Nextel"/>
-<spnOverride numeric="33420" spn="TELCEL"/>
-<spnOverride numeric="33450" spn="AT&amp;T"/>
-<spnOverride numeric="33490" spn="AT&amp;T"/>
-<spnOverride numeric="33503" spn="Movistar 3G"/>
-<spnOverride numeric="338050" spn="DIGICEL"/>
-<spnOverride numeric="338070" spn="Claro JAM"/>
-<spnOverride numeric="338180" spn="bmobile"/>
-<spnOverride numeric="33850" spn="DIGICEL"/>
-<spnOverride numeric="34001" spn="F-Orange"/>
-<spnOverride numeric="34002" spn="SFR"/>
-<spnOverride numeric="34003" spn="CHIPPIE"/>
-<spnOverride numeric="34008" spn="DAUPHIN"/>
-<spnOverride numeric="34020" spn="Digicel"/>
-<spnOverride numeric="342600" spn="bmobile"/>
-<spnOverride numeric="342750" spn="DIGICEL"/>
-<spnOverride numeric="344030" spn="APUA imobile"/>
-<spnOverride numeric="34430" spn="APUA imobile"/>
-<spnOverride numeric="344920" spn="bmobile"/>
-<spnOverride numeric="344930" spn="Cingular"/>
-<spnOverride numeric="346140" spn="bmobile"/>
-<spnOverride numeric="348170" spn="bmobile"/>
-<spnOverride numeric="348570" spn="CCT Boatphone"/>
-<spnOverride numeric="35000" spn="CELLONE"/>
-<spnOverride numeric="350000" spn="CELLONE"/>
-<spnOverride numeric="350010" spn="Cingular"/>
-<spnOverride numeric="35010" spn="Cingular"/>
-<spnOverride numeric="352030" spn="DIGICEL"/>
-<spnOverride numeric="352110" spn="bmobile"/>
-<spnOverride numeric="35230" spn="DIGICEL"/>
-<spnOverride numeric="354860" spn="bmobile"/>
-<spnOverride numeric="356110" spn="bmobile"/>
-<spnOverride numeric="358050" spn="DIGICEL"/>
-<spnOverride numeric="358110" spn="bmobile"/>
-<spnOverride numeric="35850" spn="DIGICEL"/>
-<spnOverride numeric="360070" spn="DIGICEL"/>
-<spnOverride numeric="360110" spn="bmobile"/>
-<spnOverride numeric="36070" spn="DIGICEL"/>
-<spnOverride numeric="36278" spn="Kla"/>
-<spnOverride numeric="36251" spn="Telcell GSM"/>
-<spnOverride numeric="36269" spn="DIGICEL"/>
-<spnOverride numeric="36278" spn="Kla"/>
-<spnOverride numeric="36291" spn="CHIPPIE"/>
-<spnOverride numeric="36301" spn="SETAR"/>
-<spnOverride numeric="36320" spn="DIGICEL"/>
-<spnOverride numeric="36302" spn="AW Digicel"/>
-<spnOverride numeric="363020" spn="DIGICEL"/>
-<spnOverride numeric="36439" spn="BTC"/>
-<spnOverride numeric="36449" spn="aliv"/>
-<spnOverride numeric="365840" spn="bmobile"/>
-<spnOverride numeric="366020" spn="Cingular"/>
-<spnOverride numeric="366110" spn="bmobile"/>
-<spnOverride numeric="36620" spn="Cingular"/>
-<spnOverride numeric="36801" spn="CUBACEL"/>
-<spnOverride numeric="37001" spn="Orange"/>
-<spnOverride numeric="37002" spn="Claro DOM"/>
-<spnOverride numeric="37004" spn="Viva"/>
-<spnOverride numeric="37201" spn="COMCEL"/>
-<spnOverride numeric="372020" spn="DIGICEL"/>
-<spnOverride numeric="37203" spn="Natcom"/>
-<spnOverride numeric="37412" spn="TSTT"/>
-<spnOverride numeric="374130" spn="DIGICEL"/>
-<spnOverride numeric="376350" spn="bmobile"/>
-<spnOverride numeric="376360" spn="IslandCom TCI"/>
-<spnOverride numeric="40001" spn="AZEAC"/>
-<spnOverride numeric="40002" spn="BAKCELL AZ"/>
-<spnOverride numeric="40004" spn="AZ Nar"/>
-<spnOverride numeric="40101" spn="Beeline KZ"/>
-<spnOverride numeric="40102" spn="Kcell"/>
-<spnOverride numeric="40107" spn="ALTEL"/>
-<spnOverride numeric="40177" spn="Tele2"/>
-<spnOverride numeric="40211" spn="BT B-Mobile"/>
-<spnOverride numeric="40277" spn="TASHICELL"/>
-<spnOverride numeric="40400" spn="TATA INDICOM"/>
-<spnOverride numeric="40401" spn="Vodafone IN"/>
-<spnOverride numeric="40402" spn="IND airtel"/>
-<spnOverride numeric="40403" spn="IND airtel"/>
-<spnOverride numeric="404030" spn="Vodafone IN"/>
-<spnOverride numeric="40404" spn="IDEA"/>
-<spnOverride numeric="40405" spn="Vodafone IN"/>
-<spnOverride numeric="40407" spn="IDEA"/>
-<spnOverride numeric="40409" spn="Reliance"/>
-<spnOverride numeric="40410" spn="IND airtel"/>
-<spnOverride numeric="40411" spn="Vodafone IN"/>
-<spnOverride numeric="40412" spn="IDEA"/>
-<spnOverride numeric="40413" spn="Vodafone IN"/>
-<spnOverride numeric="40414" spn="IDEA"/>
-<spnOverride numeric="40415" spn="Vodafone IN"/>
-<spnOverride numeric="40416" spn="IND airtel"/>
-<spnOverride numeric="40417" spn="Aircel"/>
-<spnOverride numeric="40418" spn="Reliance"/>
-<spnOverride numeric="40419" spn="IDEA"/>
-<spnOverride numeric="40420" spn="Vodafone IN"/>
-<spnOverride numeric="40422" spn="IDEA"/>
-<spnOverride numeric="404238" spn="Reliance"/>
-<spnOverride numeric="40424" spn="IDEA"/>
-<spnOverride numeric="40425" spn="Aircel"/>
-<spnOverride numeric="40427" spn="Vodafone IN"/>
-<spnOverride numeric="40428" spn="Aircel"/>
-<spnOverride numeric="40429" spn="Aircel"/>
-<spnOverride numeric="40430" spn="Vodafone IN"/>
-<spnOverride numeric="40431" spn="IND airtel"/>
-<spnOverride numeric="40433" spn="Aircel"/>
-<spnOverride numeric="40434" spn="CellOne"/>
-<spnOverride numeric="40435" spn="Aircel"/>
-<spnOverride numeric="40436" spn="Reliance"/>
-<spnOverride numeric="40437" spn="Aircel"/>
-<spnOverride numeric="40438" spn="CellOne"/>
-<spnOverride numeric="40440" spn="IND airtel"/>
-<spnOverride numeric="40441" spn="Aircel"/>
-<spnOverride numeric="40442" spn="Aircel"/>
-<spnOverride numeric="40443" spn="Vodafone IN"/>
-<spnOverride numeric="40444" spn="IDEA"/>
-<spnOverride numeric="40445" spn="IND airtel"/>
-<spnOverride numeric="40446" spn="Vodafone IN"/>
-<spnOverride numeric="40449" spn="IND airtel"/>
-<spnOverride numeric="40450" spn="Reliance"/>
-<spnOverride numeric="40451" spn="CellOne"/>
-<spnOverride numeric="40452" spn="Reliance"/>
-<spnOverride numeric="40453" spn="CellOne"/>
-<spnOverride numeric="40454" spn="CellOne"/>
-<spnOverride numeric="40455" spn="CellOne"/>
-<spnOverride numeric="40456" spn="IDEA"/>
-<spnOverride numeric="40457" spn="CellOne"/>
-<spnOverride numeric="40458" spn="CellOne"/>
-<spnOverride numeric="40459" spn="CellOne"/>
-<spnOverride numeric="40460" spn="Vodafone IN"/>
-<spnOverride numeric="40462" spn="CellOne"/>
-<spnOverride numeric="40464" spn="CellOne"/>
-<spnOverride numeric="40466" spn="CellOne"/>
-<spnOverride numeric="40467" spn="Reliance"/>
-<spnOverride numeric="40468" spn="IN-DOLPHIN"/>
-<spnOverride numeric="40469" spn="IN-DOLPHIN"/>
-<spnOverride numeric="40470" spn="IND airtel"/>
-<spnOverride numeric="40471" spn="CellOne"/>
-<spnOverride numeric="40472" spn="CellOne"/>
-<spnOverride numeric="40473" spn="CellOne"/>
-<spnOverride numeric="40474" spn="CellOne"/>
-<spnOverride numeric="40475" spn="CellOne"/>
-<spnOverride numeric="40476" spn="CellOne"/>
-<spnOverride numeric="40477" spn="CellOne"/>
-<spnOverride numeric="40478" spn="IDEA"/>
-<spnOverride numeric="40479" spn="CellOne"/>
-<spnOverride numeric="40480" spn="CellOne"/>
-<spnOverride numeric="40481" spn="CellOne"/>
-<spnOverride numeric="40482" spn="IDEA"/>
-<spnOverride numeric="40483" spn="Reliance"/>
-<spnOverride numeric="40484" spn="Vodafone IN"/>
-<spnOverride numeric="40485" spn="Reliance"/>
-<spnOverride numeric="40486" spn="Vodafone IN"/>
-<spnOverride numeric="40487" spn="IDEA"/>
-<spnOverride numeric="40488" spn="Vodafone IN"/>
-<spnOverride numeric="40489" spn="IDEA"/>
-<spnOverride numeric="40490" spn="IND airtel"/>
-<spnOverride numeric="40491" spn="Aircel"/>
-<spnOverride numeric="40492" spn="IND airtel"/>
-<spnOverride numeric="40493" spn="IND airtel"/>
-<spnOverride numeric="40494" spn="IND airtel"/>
-<spnOverride numeric="40495" spn="IND airtel"/>
-<spnOverride numeric="40496" spn="IND airtel"/>
-<spnOverride numeric="40497" spn="IND airtel"/>
-<spnOverride numeric="40498" spn="IND airtel"/>
-<spnOverride numeric="40501" spn="Reliance"/>
-<spnOverride numeric="405025" spn="TATA DOCOMO"/>
-<spnOverride numeric="405026" spn="TATA TELE"/>
-<spnOverride numeric="405027" spn="TATA DOCOMO"/>
-<spnOverride numeric="405028" spn="TATA TELE"/>
-<spnOverride numeric="405029" spn="TATA DOCOMO"/>
-<spnOverride numeric="405030" spn="TATA DOCOMO"/>
-<spnOverride numeric="405031" spn="TATA DOCOMO"/>
-<spnOverride numeric="405032" spn="TATA DOCOMO"/>
-<spnOverride numeric="405033" spn="TATA TELE"/>
-<spnOverride numeric="405034" spn="TATA DOCOMO"/>
-<spnOverride numeric="405035" spn="TATA DOCOMO"/>
-<spnOverride numeric="405036" spn="TATA DOCOMO"/>
-<spnOverride numeric="405037" spn="TATA DOCOMO"/>
-<spnOverride numeric="405038" spn="TATA DOCOMO"/>
-<spnOverride numeric="405039" spn="TATA DOCOMO"/>
-<spnOverride numeric="405040" spn="TATA TELE"/>
-<spnOverride numeric="405041" spn="TATA DOCOMO"/>
-<spnOverride numeric="405042" spn="TATA DOCOMO"/>
-<spnOverride numeric="405043" spn="TATA DOCOMO"/>
-<spnOverride numeric="405044" spn="TATA DOCOMO"/>
-<spnOverride numeric="405045" spn="TATA DOCOMO"/>
-<spnOverride numeric="405046" spn="TATA DOCOMO"/>
-<spnOverride numeric="405047" spn="TATA DOCOMO"/>
-<spnOverride numeric="40505" spn="Reliance"/>
-<spnOverride numeric="40506" spn="Reliance"/>
-<spnOverride numeric="40507" spn="Reliance"/>
-<spnOverride numeric="40508" spn="Reliance"/>
-<spnOverride numeric="40509" spn="Reliance"/>
-<spnOverride numeric="40510" spn="Reliance"/>
-<spnOverride numeric="40511" spn="Reliance"/>
-<spnOverride numeric="40512" spn="Reliance"/>
-<spnOverride numeric="40513" spn="Reliance"/>
-<spnOverride numeric="40514" spn="Reliance"/>
-<spnOverride numeric="40515" spn="Reliance"/>
-<spnOverride numeric="40517" spn="Reliance"/>
-<spnOverride numeric="40518" spn="Reliance"/>
-<spnOverride numeric="40519" spn="Reliance"/>
-<spnOverride numeric="40520" spn="Reliance"/>
-<spnOverride numeric="40521" spn="Reliance"/>
-<spnOverride numeric="40522" spn="Reliance"/>
-<spnOverride numeric="40523" spn="Reliance"/>
-<spnOverride numeric="40525" spn="TATA DOCOMO"/>
-<spnOverride numeric="40527" spn="TATA DOCOMO"/>
-<spnOverride numeric="40529" spn="TATA DOCOMO"/>
-<spnOverride numeric="40530" spn="TATA DOCOMO"/>
-<spnOverride numeric="40531" spn="TATA DOCOMO"/>
-<spnOverride numeric="40532" spn="TATA DOCOMO"/>
-<spnOverride numeric="40534" spn="TATA DOCOMO"/>
-<spnOverride numeric="40535" spn="TATA DOCOMO"/>
-<spnOverride numeric="40536" spn="TATA DOCOMO"/>
-<spnOverride numeric="40537" spn="TATA DOCOMO"/>
-<spnOverride numeric="40538" spn="TATA DOCOMO"/>
-<spnOverride numeric="40539" spn="TATA DOCOMO"/>
-<spnOverride numeric="40541" spn="TATA DOCOMO"/>
-<spnOverride numeric="40542" spn="TATA DOCOMO"/>
-<spnOverride numeric="40543" spn="TATA DOCOMO"/>
-<spnOverride numeric="40544" spn="TATA DOCOMO"/>
-<spnOverride numeric="40545" spn="TATA DOCOMO"/>
-<spnOverride numeric="40546" spn="TATA DOCOMO"/>
-<spnOverride numeric="40547" spn="TATA DOCOMO"/>
-<spnOverride numeric="40551" spn="IND airtel"/>
-<spnOverride numeric="40552" spn="IND airtel"/>
-<spnOverride numeric="40553" spn="IND airtel"/>
-<spnOverride numeric="40554" spn="IND airtel"/>
-<spnOverride numeric="40555" spn="IND airtel"/>
-<spnOverride numeric="40556" spn="IND airtel"/>
-<spnOverride numeric="40566" spn="Vodafone IN"/>
-<spnOverride numeric="40567" spn="Vodafone IN"/>
-<spnOverride numeric="40570" spn="IDEA"/>
-<spnOverride numeric="405750" spn="Vodafone IN"/>
-<spnOverride numeric="405751" spn="Vodafone IN"/>
-<spnOverride numeric="405752" spn="Vodafone IN"/>
-<spnOverride numeric="405753" spn="Vodafone IN"/>
-<spnOverride numeric="405754" spn="Vodafone IN"/>
-<spnOverride numeric="405755" spn="Vodafone IN"/>
-<spnOverride numeric="405756" spn="Vodafone IN"/>
-<spnOverride numeric="405799" spn="IDEA"/>
-<spnOverride numeric="405800" spn="Aircel"/>
-<spnOverride numeric="405801" spn="Aircel"/>
-<spnOverride numeric="405802" spn="Aircel"/>
-<spnOverride numeric="405803" spn="Aircel"/>
-<spnOverride numeric="405804" spn="Aircel"/>
-<spnOverride numeric="405805" spn="Aircel"/>
-<spnOverride numeric="405806" spn="Aircel"/>
-<spnOverride numeric="405807" spn="Aircel"/>
-<spnOverride numeric="405808" spn="Aircel"/>
-<spnOverride numeric="405809" spn="Aircel"/>
-<spnOverride numeric="405810" spn="Aircel"/>
-<spnOverride numeric="405811" spn="Aircel"/>
-<spnOverride numeric="405812" spn="Aircel"/>
-<spnOverride numeric="405813" spn="IN UNITECH"/>
-<spnOverride numeric="405814" spn="IN UNITECH"/>
-<spnOverride numeric="405815" spn="IN UNITECH"/>
-<spnOverride numeric="405816" spn="IN UNITECH"/>
-<spnOverride numeric="405817" spn="IN UNITECH"/>
-<spnOverride numeric="405818" spn="IN Telenor"/>
-<spnOverride numeric="405819" spn="IN Telenor"/>
-<spnOverride numeric="405820" spn="IN UNITECH"/>
-<spnOverride numeric="405821" spn="IN UNITECH"/>
-<spnOverride numeric="405822" spn="IN UNITECH"/>
-<spnOverride numeric="405823" spn="VIDEOCON"/>
-<spnOverride numeric="405824" spn="VIDEOCON"/>
-<spnOverride numeric="405825" spn="VIDEOCON"/>
-<spnOverride numeric="405827" spn="VIDEOCON"/>
-<spnOverride numeric="405828" spn="VIDEOCON"/>
-<spnOverride numeric="405829" spn="VIDEOCON"/>
-<spnOverride numeric="405830" spn="VIDEOCON"/>
-<spnOverride numeric="405831" spn="VIDEOCON"/>
-<spnOverride numeric="405832" spn="VIDEOCON"/>
-<spnOverride numeric="405833" spn="VIDEOCON"/>
-<spnOverride numeric="405834" spn="VIDEOCON"/>
-<spnOverride numeric="405835" spn="VIDEOCON"/>
-<spnOverride numeric="405836" spn="VIDEOCON"/>
-<spnOverride numeric="405837" spn="VIDEOCON"/>
-<spnOverride numeric="405838" spn="VIDEOCON"/>
-<spnOverride numeric="405839" spn="VIDEOCON"/>
-<spnOverride numeric="405840" spn="IND-JIO"/>
-<spnOverride numeric="405841" spn="VIDEOCON"/>
-<spnOverride numeric="405842" spn="VIDEOCON"/>
-<spnOverride numeric="405843" spn="VIDEOCON"/>
-<spnOverride numeric="405844" spn="IN UNITECH"/>
-<spnOverride numeric="405845" spn="IDEA"/>
-<spnOverride numeric="405846" spn="IDEA"/>
-<spnOverride numeric="405848" spn="IDEA"/>
-<spnOverride numeric="405849" spn="IDEA"/>
-<spnOverride numeric="405850" spn="IDEA"/>
-<spnOverride numeric="405852" spn="IDEA"/>
-<spnOverride numeric="405853" spn="IDEA"/>
-<spnOverride numeric="405854" spn="IND-JIO"/>
-<spnOverride numeric="405855" spn="IND-JIO"/>
-<spnOverride numeric="405856" spn="IND-JIO"/>
-<spnOverride numeric="405857" spn="IND-JIO"/>
-<spnOverride numeric="405858" spn="IND-JIO"/>
-<spnOverride numeric="405859" spn="IND-JIO"/>
-<spnOverride numeric="405860" spn="IND-JIO"/>
-<spnOverride numeric="405861" spn="IND-JIO"/>
-<spnOverride numeric="405862" spn="IND-JIO"/>
-<spnOverride numeric="405863" spn="IND-JIO"/>
-<spnOverride numeric="405864" spn="IND-JIO"/>
-<spnOverride numeric="405865" spn="IND-JIO"/>
-<spnOverride numeric="405866" spn="IND-JIO"/>
-<spnOverride numeric="405867" spn="IND-JIO"/>
-<spnOverride numeric="405868" spn="IND-JIO"/>
-<spnOverride numeric="405869" spn="IND-JIO"/>
-<spnOverride numeric="405870" spn="IND-JIO"/>
-<spnOverride numeric="405871" spn="IND-JIO"/>
-<spnOverride numeric="405872" spn="IND-JIO"/>
-<spnOverride numeric="405873" spn="IND-JIO"/>
-<spnOverride numeric="405874" spn="IND-JIO"/>
-<spnOverride numeric="405875" spn="IN Telenor"/>
-<spnOverride numeric="405876" spn="IN Telenor"/>
-<spnOverride numeric="405877" spn="IN UNITECH"/>
-<spnOverride numeric="405878" spn="IN UNITECH"/>
-<spnOverride numeric="405879" spn="IN Telenor"/>
-<spnOverride numeric="405880" spn="IN UNITECH"/>
-<spnOverride numeric="405882" spn="Reliance"/>
-<spnOverride numeric="40589" spn="MTS"/>
-<spnOverride numeric="405925" spn="IN UNITECH"/>
-<spnOverride numeric="405926" spn="IN UNITECH"/>
-<spnOverride numeric="405927" spn="IN Telenor"/>
-<spnOverride numeric="405928" spn="IN UNITECH"/>
-<spnOverride numeric="405929" spn="IN Telenor"/>
-<spnOverride numeric="405932" spn="VIDEOCON"/>
-<spnOverride numeric="41001" spn="Jazz"/>
-<spnOverride numeric="41003" spn="PK-UFONE"/>
-<spnOverride numeric="41004" spn="ZONG"/>
-<spnOverride numeric="41006" spn="Telenor PK"/>
-<spnOverride numeric="41007" spn="WaridTel"/>
-<spnOverride numeric="41201" spn="AF AWCC"/>
-<spnOverride numeric="41220" spn="ROSHAN"/>
-<spnOverride numeric="41240" spn="MTN AF"/>
-<spnOverride numeric="41250" spn="Etisalat Af"/>
-<spnOverride numeric="41301" spn="Mobitel LK"/>
-<spnOverride numeric="41302" spn="DIALOG"/>
-<spnOverride numeric="41303" spn="SRI Etisalat"/>
-<spnOverride numeric="41305" spn="SRI AIRTEL"/>
-<spnOverride numeric="41308" spn="Hutch"/>
-<spnOverride numeric="41401" spn="MM 900"/>
-<spnOverride numeric="41405" spn="Ooredoo"/>
-<spnOverride numeric="41406" spn="Telenor"/>
-<spnOverride numeric="41409" spn="MYTEL"/>
-<spnOverride numeric="41501" spn="alfa"/>
-<spnOverride numeric="41503" spn="touch"/>
-<spnOverride numeric="41505" spn="LBN OGERO Mobile"/>
-<spnOverride numeric="41601" spn="Zain JO"/>
-<spnOverride numeric="41603" spn="UMNIAH"/>
-<spnOverride numeric="41677" spn="Orange"/>
-<spnOverride numeric="41701" spn="SYRIATEL"/>
-<spnOverride numeric="41702" spn="MTN"/>
-<spnOverride numeric="41805" spn="ASIACELL"/>
-<spnOverride numeric="41820" spn="zain IQ"/>
-<spnOverride numeric="41830" spn="IRAQNA"/>
-<spnOverride numeric="41840" spn="KOREK"/>
-<spnOverride numeric="41902" spn="Zain KW"/>
-<spnOverride numeric="41903" spn="Ooredoo"/>
-<spnOverride numeric="41904" spn="KT, VIVA"/>
-<spnOverride numeric="42001" spn="STC"/>
-<spnOverride numeric="42003" spn="Mobily-KSA"/>
-<spnOverride numeric="42004" spn="Zain KSA"/>
-<spnOverride numeric="42101" spn="SabaFon"/>
-<spnOverride numeric="42102" spn="MTN"/>
-<spnOverride numeric="42104" spn="Y-Telecom"/>
-<spnOverride numeric="42202" spn="Omantel"/>
-<spnOverride numeric="42203" spn="Ooredoo Oman"/>
-<spnOverride numeric="42402" spn="ETISALAT"/>
-<spnOverride numeric="42403" spn="du"/>
-<spnOverride numeric="42501" spn="Partner IL"/>
-<spnOverride numeric="42502" spn="Cellcom IL"/>
-<spnOverride numeric="42503" spn="IL Pelephone"/>
-<spnOverride numeric="42505" spn="JAWWAL-PALESTINE"/>
-<spnOverride numeric="42506" spn="PS, Wataniya Mobile"/>
-<spnOverride numeric="42507" spn="Hot Mobile Ltd."/>
-<spnOverride numeric="42528" spn="Hot Mobile Ltd."/>
-<spnOverride numeric="42601" spn="BATELCO"/>
-<spnOverride numeric="42602" spn="Zain BH"/>
-<spnOverride numeric="42604" spn="VIVA BH"/>
-<spnOverride numeric="42701" spn="Ooredoo"/>
-<spnOverride numeric="42702" spn="vodafone"/>
-<spnOverride numeric="42801" spn="Skytel MN"/>
-<spnOverride numeric="42806" spn="GMOBILE_MN"/>
-<spnOverride numeric="42888" spn="MONGOLIA UNITEL LLC"/>
-<spnOverride numeric="42899" spn="MN MobiCom"/>
-<spnOverride numeric="42901" spn="Nepal Telecom"/>
-<spnOverride numeric="42902" spn="Ncell"/>
-<spnOverride numeric="43211" spn="IR-TCI"/>
-<spnOverride numeric="43214" spn="IR KISH"/>
-<spnOverride numeric="43220" spn="IRN 20"/>
-<spnOverride numeric="43232" spn="Iran Taliya"/>
-<spnOverride numeric="43235" spn="MTN Irancell"/>
-<spnOverride numeric="43404" spn="Beeline UZ"/>
-<spnOverride numeric="43405" spn="UZB Ucell"/>
-<spnOverride numeric="43407" spn="UMS-UZB"/>
-<spnOverride numeric="43408" spn="UzMobile"/>
-<spnOverride numeric="43601" spn="TCELL"/>
-<spnOverride numeric="43602" spn="TCELL"/>
-<spnOverride numeric="43603" spn="MegaFon TJK"/>
-<spnOverride numeric="43604" spn="Babilon-M"/>
-<spnOverride numeric="43605" spn="BEELINE TJ"/>
-<spnOverride numeric="43701" spn="Beeline KG"/>
-<spnOverride numeric="43705" spn="MegaCom"/>
-<spnOverride numeric="43709" spn="O!"/>
-<spnOverride numeric="43801" spn="MTS TM"/>
-<spnOverride numeric="43802" spn="TM CELL"/>
-<spnOverride numeric="44000" spn="Ymobile"/>
-<spnOverride numeric="44010" spn="JP DOCOMO"/>
-<spnOverride numeric="44020" spn="SoftBank"/>
-<spnOverride numeric="44050" spn="KDDI"/>
-<spnOverride numeric="44051" spn="KDDI"/>
-<spnOverride numeric="44100" spn="WCP ( SoftBank AXGP Network)"/>
-<spnOverride numeric="44110" spn="UQ(WiMAX 2+)"/>
-<spnOverride numeric="45002" spn="KT"/>
-<spnOverride numeric="45005" spn="KOR SK Telecom"/>
-<spnOverride numeric="45006" spn="KOR LG Uplus"/>
-<spnOverride numeric="45008" spn="KT"/>
-<spnOverride numeric="45201" spn="VN Mobifone"/>
-<spnOverride numeric="45202" spn="VN VINAPHONE"/>
-<spnOverride numeric="45204" spn="VIETTEL"/>
-<spnOverride numeric="45205" spn="VN Vietnamobile"/>
-<spnOverride numeric="45207" spn="Gmobile"/>
-<spnOverride numeric="45400" spn="CSL"/>
-<spnOverride numeric="45402" spn="CSL"/>
-<spnOverride numeric="45403" spn="3"/>
-<spnOverride numeric="45404" spn="3"/>
-<spnOverride numeric="45406" spn="SmarTone HK"/>
-<spnOverride numeric="45410" spn="CSL"/>
-<spnOverride numeric="45412" spn="China Mobile HK"/>
-<spnOverride numeric="45413" spn="China Mobile HK"/>
-<spnOverride numeric="45415" spn="SmarTone HK"/>
-<spnOverride numeric="45416" spn="PCCW-HKT"/>
-<spnOverride numeric="45417" spn="SmarTone HK"/>
-<spnOverride numeric="45418" spn="CSL"/>
-<spnOverride numeric="45419" spn="PCCW-HKT"/>
-<spnOverride numeric="45420" spn="PCCW-HKT"/>
-<spnOverride numeric="45500" spn="SmarTone MAC"/>
-<spnOverride numeric="45501" spn="CTM"/>
-<spnOverride numeric="45502" spn="CT Macao"/>
-<spnOverride numeric="45503" spn="3 Macau"/>
-<spnOverride numeric="45504" spn="CTM"/>
-<spnOverride numeric="45505" spn="3 Macao"/>
-<spnOverride numeric="45506" spn="SmarTone MAC"/>
-<spnOverride numeric="45507" spn="China Telecom (Macao)"/>
-<spnOverride numeric="45601" spn="Cellcard"/>
-<spnOverride numeric="45604" spn="CADCOMMS"/>
-<spnOverride numeric="45605" spn="SMART"/>
-<spnOverride numeric="45606" spn="SMART"/>
-<spnOverride numeric="45608" spn="Metfone"/>
-<spnOverride numeric="45609" spn="Beeline KH"/>
-<spnOverride numeric="45611" spn="KH SEATEL"/>
-<spnOverride numeric="45618" spn="Mfone"/>
-<spnOverride numeric="45701" spn="LAO GSM"/>
-<spnOverride numeric="45702" spn="ETL MOBILE NETWORK"/>
-<spnOverride numeric="45703" spn="Unitel"/>
-<spnOverride numeric="45708" spn="BEELINE LAO"/>
-<spnOverride numeric="46000" spn="CHINA MOBILE"/>
-<spnOverride numeric="46001" spn="CHN-UNICOM"/>
-<spnOverride numeric="46002" spn="CHINA MOBILE"/>
-<spnOverride numeric="46003" spn="CHN-CT"/>
-<spnOverride numeric="46004" spn="CHINA MOBILE"/>
-<spnOverride numeric="46007" spn="CHINA MOBILE"/>
-<spnOverride numeric="46008" spn="CHINA MOBILE"/>
-<spnOverride numeric="46009" spn="CHN-UNICOM"/>
-<spnOverride numeric="46011" spn="CHN-CT"/>
-<spnOverride numeric="46601" spn="Far EasTone"/>
-<spnOverride numeric="46605" spn="TWN APT"/>
-<spnOverride numeric="46668" spn="ACeS"/>
-<spnOverride numeric="46688" spn="KGT-Online"/>
-<spnOverride numeric="46689" spn="T Star"/>
-<spnOverride numeric="46692" spn="Chunghwa Telecom"/>
-<spnOverride numeric="46693" spn="TWN MOBITAI"/>
-<spnOverride numeric="46697" spn="TW Mobile"/>
-<spnOverride numeric="46699" spn="TWM TransAsi"/>
-<spnOverride numeric="46705" spn="Koryolink"/>
-<spnOverride numeric="470001" spn="Grameenphone"/>
-<spnOverride numeric="47001" spn="Grameenphone"/>
-<spnOverride numeric="47002" spn="robi axiata"/>
-<spnOverride numeric="47003" spn="Banglalink"/>
-<spnOverride numeric="47004" spn="BGD bMobile"/>
-<spnOverride numeric="47007" spn="Airtel"/>
-<spnOverride numeric="47009" spn="BGD-BIEL"/>
-<spnOverride numeric="47201" spn="DHIRAAGU"/>
-<spnOverride numeric="47202" spn="Ooredoo Maldives PVT LTD"/>
-<spnOverride numeric="50212" spn="MY MAXIS"/>
-<spnOverride numeric="50213" spn="MY CELCOM 3G"/>
-<spnOverride numeric="502152" spn="Yes 4G"/>
-<spnOverride numeric="502153" spn="webe"/>
-<spnOverride numeric="502156" spn="MYSALTEL"/>
-<spnOverride numeric="50216" spn="Digi"/>
-<spnOverride numeric="50218" spn="U MOBILE"/>
-<spnOverride numeric="50219" spn="MY CELCOM"/>
-<spnOverride numeric="50501" spn="Telstra Mobile"/>
-<spnOverride numeric="50502" spn="YES OPTUS"/>
-<spnOverride numeric="50503" spn="vodafone AU"/>
-<spnOverride numeric="50506" spn="3TELSTRA"/>
-<spnOverride numeric="50510" spn="Norfolk Telecom"/>
-<spnOverride numeric="50516" spn="VicTrack"/>
-<spnOverride numeric="50571" spn="Telstra Mobile"/>
-<spnOverride numeric="50572" spn="Telstra Mobile"/>
-<spnOverride numeric="51000" spn="ACeS"/>
-<spnOverride numeric="51001" spn="IND INDOSAT"/>
-<spnOverride numeric="51008" spn="AXIS"/>
-<spnOverride numeric="51009" spn="Smartfren"/>
-<spnOverride numeric="51010" spn="IND TELKOMSEL"/>
-<spnOverride numeric="51011" spn="IND XL"/>
-<spnOverride numeric="51021" spn="IND INDOSAT"/>
-<spnOverride numeric="51028" spn="Smartfren"/>
-<spnOverride numeric="51088" spn="BoltSuper4G"/>
-<spnOverride numeric="51089" spn="3"/>
-<spnOverride numeric="51401" spn="TLS-TC"/>
-<spnOverride numeric="51402" spn="TLS-TT"/>
-<spnOverride numeric="51502" spn="Globe Telecom-PH"/>
-<spnOverride numeric="51503" spn="SMART"/>
-<spnOverride numeric="51505" spn="PH Sun Cellular"/>
-<spnOverride numeric="51511" spn="ACeS"/>
-<spnOverride numeric="52000" spn="TH 3G+"/>
-<spnOverride numeric="52001" spn="AIS"/>
-<spnOverride numeric="52003" spn="AIS"/>
-<spnOverride numeric="52004" spn="TRUE-H"/>
-<spnOverride numeric="52005" spn="dtac TriNet"/>
-<spnOverride numeric="52015" spn="TOT3G"/>
-<spnOverride numeric="52018" spn="TH-DTAC"/>
-<spnOverride numeric="52020" spn="ACeS"/>
-<spnOverride numeric="52023" spn="TH GSM 1800"/>
-<spnOverride numeric="52099" spn="TRUE-H"/>
-<spnOverride numeric="52501" spn="Singtel"/>
-<spnOverride numeric="52502" spn="Singtel"/>
-<spnOverride numeric="52503" spn="SGP-M1"/>
-<spnOverride numeric="52505" spn="StarHub"/>
-<spnOverride numeric="52507" spn="SGP Call Zone"/>
-<spnOverride numeric="52508" spn="StarHub"/>
-<spnOverride numeric="52802" spn="PCSB"/>
-<spnOverride numeric="52811" spn="BRU-DSTCom"/>
-<spnOverride numeric="53001" spn="vodafone NZ"/>
-<spnOverride numeric="53005" spn="Spark NZ"/>
-<spnOverride numeric="53024" spn="2degrees"/>
-<spnOverride numeric="53701" spn="bmobile"/>
-<spnOverride numeric="53702" spn="Telikom PNG"/>
-<spnOverride numeric="53703" spn="DIGICEL"/>
-<spnOverride numeric="53901" spn="U-CALL"/>
-<spnOverride numeric="53988" spn="Digicel Tonga"/>
-<spnOverride numeric="54001" spn="SI BREEZE"/>
-<spnOverride numeric="54002" spn="bmobile"/>
-<spnOverride numeric="54101" spn="VUT SMILE"/>
-<spnOverride numeric="54105" spn="Digicel"/>
-<spnOverride numeric="54201" spn="FJ VODAFONE"/>
-<spnOverride numeric="54202" spn="DIGICEL"/>
-<spnOverride numeric="54301" spn="Manuia"/>
-<spnOverride numeric="544110" spn="Bluesky Communications"/>
-<spnOverride numeric="54509" spn="KL-Frigate"/>
-<spnOverride numeric="54601" spn="NCL MOBILIS"/>
-<spnOverride numeric="54715" spn="Vodafone PF"/>
-<spnOverride numeric="54720" spn="F-VINI"/>
-<spnOverride numeric="54801" spn="CK KOKANET"/>
-<spnOverride numeric="54900" spn="DIGICEL"/>
-<spnOverride numeric="54927" spn="Bluesky"/>
-<spnOverride numeric="55001" spn="FSM Telecom"/>
-<spnOverride numeric="55101" spn="MH-NTA"/>
-<spnOverride numeric="55201" spn="PalauCel"/>
-<spnOverride numeric="55280" spn="PLWPMC"/>
-<spnOverride numeric="55301" spn="FSM Telecom"/>
-<spnOverride numeric="55401" spn="Teletok"/>
-<spnOverride numeric="60201" spn="Orange EG"/>
-<spnOverride numeric="60202" spn="vodafone EG"/>
-<spnOverride numeric="60203" spn="Etisalat"/>
-<spnOverride numeric="60301" spn="ALG Mobilis"/>
-<spnOverride numeric="60302" spn="Djezzy"/>
-<spnOverride numeric="60303" spn="ooredoo Algeria"/>
-<spnOverride numeric="60400" spn="Orange MA"/>
-<spnOverride numeric="60401" spn="MOR IAM"/>
-<spnOverride numeric="60402" spn="inwi"/>
-<spnOverride numeric="60501" spn="Orange"/>
-<spnOverride numeric="60502" spn="TUNISIE TELECOM"/>
-<spnOverride numeric="60503" spn="TUNISIANA"/>
-<spnOverride numeric="60600" spn="Libyana"/>
-<spnOverride numeric="60601" spn="Al Madar"/>
-<spnOverride numeric="60701" spn="GAMCEL"/>
-<spnOverride numeric="60702" spn="AFRICELL"/>
-<spnOverride numeric="60703" spn="GM COMIUM"/>
-<spnOverride numeric="60704" spn="Qcell"/>
-<spnOverride numeric="60801" spn="SN ALIZE"/>
-<spnOverride numeric="60802" spn="SN-SENTEL SG"/>
-<spnOverride numeric="60803" spn="SEN expresso"/>
-<spnOverride numeric="60901" spn="MR MATTEL"/>
-<spnOverride numeric="60902" spn="MR Expresso"/>
-<spnOverride numeric="60910" spn="MAURITEL"/>
-<spnOverride numeric="61001" spn="MALITEL ML"/>
-<spnOverride numeric="61002" spn="ORANGE ML"/>
-<spnOverride numeric="61101" spn="Orange GN"/>
-<spnOverride numeric="61102" spn="GN LAGUI"/>
-<spnOverride numeric="61104" spn="GNMTN"/>
-<spnOverride numeric="61105" spn="GINCL"/>
-<spnOverride numeric="61202" spn="MOOV CI"/>
-<spnOverride numeric="61203" spn="Orange CI"/>
-<spnOverride numeric="61204" spn="KoZ"/>
-<spnOverride numeric="61205" spn="MTN CI"/>
-<spnOverride numeric="61302" spn="Orange Burkina"/>
-<spnOverride numeric="61402" spn="Airtel"/>
-<spnOverride numeric="61403" spn="ETISALAT NER"/>
-<spnOverride numeric="61404" spn="Orange NE"/>
-<spnOverride numeric="61501" spn="TG-TOGO CELL"/>
-<spnOverride numeric="61503" spn="ETISALAT TOGO"/>
-<spnOverride numeric="61602" spn="ETISALAT BENIN"/>
-<spnOverride numeric="61603" spn="MTN BENIN"/>
-<spnOverride numeric="61604" spn="BELL BENIN COMMUNICATION"/>
-<spnOverride numeric="61605" spn="GloBenin"/>
-<spnOverride numeric="61701" spn="CELLPLUS-MRU"/>
-<spnOverride numeric="61703" spn="MTML"/>
-<spnOverride numeric="61710" spn="EMTEL-MRU"/>
-<spnOverride numeric="61801" spn="LBR Lonestar Cell"/>
-<spnOverride numeric="61804" spn="Novafone 4G"/>
-<spnOverride numeric="61807" spn="Orange Liberia"/>
-<spnOverride numeric="61901" spn="Airtel"/>
-<spnOverride numeric="61905" spn="Africell"/>
-<spnOverride numeric="62001" spn="GH MTN"/>
-<spnOverride numeric="62002" spn="GH Vodafone"/>
-<spnOverride numeric="62003" spn="Tigo Ghana"/>
-<spnOverride numeric="62006" spn="Airtel"/>
-<spnOverride numeric="62120" spn="Airtel"/>
-<spnOverride numeric="62130" spn="MTN - NG"/>
-<spnOverride numeric="62140" spn="ntel"/>
-<spnOverride numeric="62150" spn="Glo NG"/>
-<spnOverride numeric="62160" spn="Etisalat Nigeria"/>
-<spnOverride numeric="62201" spn="Airtel"/>
-<spnOverride numeric="62203" spn="Tigo TD"/>
-<spnOverride numeric="62207" spn="SALAM"/>
-<spnOverride numeric="62301" spn="ETISALAT RCA"/>
-<spnOverride numeric="62302" spn="Telecel"/>
-<spnOverride numeric="62303" spn="Orange RCA"/>
-<spnOverride numeric="62304" spn="NationLink"/>
-<spnOverride numeric="62401" spn="MTN CAM"/>
-<spnOverride numeric="62402" spn="Orange CAM"/>
-<spnOverride numeric="62404" spn="Nexttel"/>
-<spnOverride numeric="62501" spn="CVMOVEL"/>
-<spnOverride numeric="62502" spn="Unitel T+"/>
-<spnOverride numeric="62601" spn="STP CSTmovel"/>
-<spnOverride numeric="62602" spn="Unitel STP"/>
-<spnOverride numeric="62701" spn="GNQ01"/>
-<spnOverride numeric="62703" spn="GNQ-Muni"/>
-<spnOverride numeric="62801" spn="LIBERTIS"/>
-<spnOverride numeric="62802" spn="ETISALAT GAB"/>
-<spnOverride numeric="62803" spn="Airtel"/>
-<spnOverride numeric="62804" spn="AZUR"/>
-<spnOverride numeric="62910" spn="COG MTN"/>
-<spnOverride numeric="62901" spn="Airtel"/>
-<spnOverride numeric="62902" spn="AZUR COG"/>
-<spnOverride numeric="62907" spn="WARID RC"/>
-<spnOverride numeric="62910" spn="COG MTN"/>
-<spnOverride numeric="63001" spn="Vodacom Congo"/>
-<spnOverride numeric="63002" spn="Airtel"/>
-<spnOverride numeric="63005" spn="SCELL CD"/>
-<spnOverride numeric="63086" spn="Orange RDC"/>
-<spnOverride numeric="63088" spn="CD Smart"/>
-<spnOverride numeric="63089" spn="TIGO DRC"/>
-<spnOverride numeric="63090" spn="Africell RDC"/>
-<spnOverride numeric="63102" spn="UNITEL"/>
-<spnOverride numeric="63104" spn="MOVICEL"/>
-<spnOverride numeric="63202" spn="MTN"/>
-<spnOverride numeric="63203" spn="Orange BS"/>
-<spnOverride numeric="63301" spn="C&amp;W SEY"/>
-<spnOverride numeric="63310" spn="Airtel"/>
-<spnOverride numeric="63401" spn="Zain SDN"/>
-<spnOverride numeric="63402" spn="MTN"/>
-<spnOverride numeric="63510" spn="MTN RWANDA"/>
-<spnOverride numeric="63513" spn="TIGO RWANDA"/>
-<spnOverride numeric="63514" spn="Airtel"/>
-<spnOverride numeric="63601" spn="ETH MTN"/>
-<spnOverride numeric="63701" spn="SO Telesom"/>
-<spnOverride numeric="63704" spn="SOMAFONE"/>
-<spnOverride numeric="63720" spn="Somnet TELECOM Inc"/>
-<spnOverride numeric="63730" spn="Som Golis"/>
-<spnOverride numeric="63750" spn="Hormuud Telecom"/>
-<spnOverride numeric="63771" spn="SOMTEL"/>
-<spnOverride numeric="63801" spn="DJ EVATIS"/>
-<spnOverride numeric="63902" spn="Safaricom"/>
-<spnOverride numeric="63903" spn="Airtel"/>
-<spnOverride numeric="63907" spn="GSM Telkom"/>
-<spnOverride numeric="64002" spn="TIGO - TZ"/>
-<spnOverride numeric="64003" spn="ZANTEL-TZ"/>
-<spnOverride numeric="64004" spn="VodaCom"/>
-<spnOverride numeric="64005" spn="Airtel"/>
-<spnOverride numeric="64101" spn="Airtel"/>
-<spnOverride numeric="64110" spn="MTN-UGANDA"/>
-<spnOverride numeric="64111" spn="Uganda Telecom"/>
-<spnOverride numeric="64114" spn="Africell Uganda"/>
-<spnOverride numeric="64118" spn="Suretelcom"/>
-<spnOverride numeric="64122" spn="Airtel"/>
-<spnOverride numeric="64201" spn="BDI ECONET"/>
-<spnOverride numeric="64202" spn="BDI TEMPO-AFRICELL"/>
-<spnOverride numeric="64203" spn="ONATEL BDI"/>
-<spnOverride numeric="64207" spn="SMART"/>
-<spnOverride numeric="64282" spn="TELECEL-BDI"/>
-<spnOverride numeric="64301" spn="MOZ - mCel"/>
-<spnOverride numeric="64303" spn="MOVITEL"/>
-<spnOverride numeric="64304" spn="VodaCom-MZ"/>
-<spnOverride numeric="64501" spn="Airtel"/>
-<spnOverride numeric="64502" spn="MTN ZM"/>
-<spnOverride numeric="64601" spn="Airtel"/>
-<spnOverride numeric="64602" spn="Orange MG"/>
-<spnOverride numeric="64604" spn="TELMA"/>
-<spnOverride numeric="64700" spn="Orange re"/>
-<spnOverride numeric="64701" spn="MAORE MOBILE"/>
-<spnOverride numeric="64702" spn="ONLY"/>
-<spnOverride numeric="64703" spn="FREE MOBILE RE"/>
-<spnOverride numeric="64710" spn="SFR REUNION"/>
-<spnOverride numeric="64801" spn="ZW NET*ONE"/>
-<spnOverride numeric="64803" spn="TELECEL ZW"/>
-<spnOverride numeric="64804" spn="ZW ECONET"/>
-<spnOverride numeric="64901" spn="MTC NAMIBIA"/>
-<spnOverride numeric="64903" spn="tnmobile"/>
-<spnOverride numeric="65001" spn="TNM"/>
-<spnOverride numeric="65010" spn="Airtel"/>
-<spnOverride numeric="65101" spn="Vodacom Lesotho"/>
-<spnOverride numeric="65102" spn="LS-ETL"/>
-<spnOverride numeric="65201" spn="BW MASCOM"/>
-<spnOverride numeric="65202" spn="Orange"/>
-<spnOverride numeric="65204" spn="beMOBILE"/>
-<spnOverride numeric="65310" spn="Swazi-MTN"/>
-<spnOverride numeric="65401" spn="HURI"/>
-<spnOverride numeric="65402" spn="TELCO"/>
-<spnOverride numeric="65501" spn="VodaCom-SA"/>
-<spnOverride numeric="65502" spn="TelkomSA"/>
-<spnOverride numeric="65507" spn="Cell C"/>
-<spnOverride numeric="65510" spn="MTN-SA"/>
-<spnOverride numeric="65801" spn="Sure"/>
-<spnOverride numeric="65902" spn="MTN"/>
-<spnOverride numeric="65903" spn="Gemtel"/>
-<spnOverride numeric="65904" spn="Vivacell"/>
-<spnOverride numeric="65906" spn="ZAIN SS"/>
-<spnOverride numeric="70267" spn="BTL"/>
-<spnOverride numeric="70269" spn="Smart"/>
-<spnOverride numeric="70401" spn="Claro GTM"/>
-<spnOverride numeric="70402" spn="TIGO"/>
-<spnOverride numeric="70403" spn="Movistar"/>
-<spnOverride numeric="70601" spn="Claro SLV"/>
-<spnOverride numeric="70602" spn="Digicel"/>
-<spnOverride numeric="70603" spn="TIGO"/>
-<spnOverride numeric="70604" spn="Movistar"/>
-<spnOverride numeric="708001" spn="CLARO HND"/>
-<spnOverride numeric="70801" spn="CLARO HND"/>
-<spnOverride numeric="70802" spn="TIGOHND"/>
-<spnOverride numeric="708030" spn="HND"/>
-<spnOverride numeric="70830" spn="HND"/>
-<spnOverride numeric="71021" spn="Claro NIC"/>
-<spnOverride numeric="710300" spn="Movistar"/>
-<spnOverride numeric="71073" spn="Claro NIC"/>
-<spnOverride numeric="71201" spn="I.C.E."/>
-<spnOverride numeric="71202" spn="I.C.E."/>
-<spnOverride numeric="71203" spn="Claro"/>
-<spnOverride numeric="71204" spn="Movistar"/>
-<spnOverride numeric="71401" spn="+Movil - C&amp;W PAN"/>
-<spnOverride numeric="714020" spn="Movistar"/>
-<spnOverride numeric="71402" spn="Movistar"/>
-<spnOverride numeric="71403" spn="Claro PA"/>
-<spnOverride numeric="71404" spn="DIGICEL"/>
-<spnOverride numeric="71420" spn="Movistar"/>
-<spnOverride numeric="71606" spn="Movistar"/>
-<spnOverride numeric="71610" spn="Claro"/>
-<spnOverride numeric="71615" spn="Viettel Peru"/>
-<spnOverride numeric="71617" spn="entel"/>
-<spnOverride numeric="722010" spn="AR - TEFMVNO"/>
-<spnOverride numeric="72207" spn="Movistar"/>
-<spnOverride numeric="72210" spn="Movistar"/>
-<spnOverride numeric="722310" spn="Claro AR"/>
-<spnOverride numeric="72234" spn="Personal"/>
-<spnOverride numeric="72235" spn="PORTHABLE"/>
-<spnOverride numeric="722341" spn="AR PERSONAL"/>
-<spnOverride numeric="72236" spn="AR PERSONAL"/>
-<spnOverride numeric="72402" spn="TIM"/>
-<spnOverride numeric="72403" spn="TIM"/>
-<spnOverride numeric="72404" spn="TIM"/>
-<spnOverride numeric="72405" spn="Claro"/>
-<spnOverride numeric="72406" spn="VIVO"/>
-<spnOverride numeric="72410" spn="VIVO"/>
-<spnOverride numeric="72411" spn="VIVO"/>
-<spnOverride numeric="72415" spn="BRA SCTL"/>
-<spnOverride numeric="72416" spn="BrT"/>
-<spnOverride numeric="72423" spn="VIVO"/>
-<spnOverride numeric="72424" spn="AMAZÔNIA"/>
-<spnOverride numeric="72431" spn="Oi"/>
-<spnOverride numeric="72432" spn="CTBC"/>
-<spnOverride numeric="72433" spn="CTBC"/>
-<spnOverride numeric="72434" spn="CTBC"/>
-<spnOverride numeric="72439" spn="Nextel Brasil"/>
-<spnOverride numeric="73001" spn="Entel PCS"/>
-<spnOverride numeric="73002" spn="Movistar"/>
-<spnOverride numeric="73003" spn="Claro CHL"/>
-<spnOverride numeric="73007" spn="Movistar"/>
-<spnOverride numeric="73008" spn="VTR CHL"/>
-<spnOverride numeric="73009" spn="WOM"/>
-<spnOverride numeric="73010" spn="Entel PCS"/>
-<spnOverride numeric="732101" spn="Claro"/>
-<spnOverride numeric="732103" spn="TIGO"/>
-<spnOverride numeric="732111" spn="TIGO"/>
-<spnOverride numeric="732123" spn="Movistar"/>
-<spnOverride numeric="732130" spn="Avantel"/>
-<spnOverride numeric="732187" spn="ETB 4G"/>
-<spnOverride numeric="73401" spn="DIGITEL"/>
-<spnOverride numeric="73402" spn="DIGITEL"/>
-<spnOverride numeric="73403" spn="DIGITEL"/>
-<spnOverride numeric="73404" spn="Movistar"/>
-<spnOverride numeric="73406" spn="Movilnet"/>
-<spnOverride numeric="73601" spn="VIVA"/>
-<spnOverride numeric="73602" spn="BOMOV"/>
-<spnOverride numeric="73603" spn="TIGO"/>
-<spnOverride numeric="738002" spn="GUY GTT + Do More"/>
-<spnOverride numeric="73801" spn="U MOBILE"/>
-<spnOverride numeric="73802" spn="GUY CLNK PLS"/>
-<spnOverride numeric="74000" spn="Movistar"/>
-<spnOverride numeric="74001" spn="Claro"/>
-<spnOverride numeric="74002" spn="CNT"/>
-<spnOverride numeric="74401" spn="VOX"/>
-<spnOverride numeric="74402" spn="Claro PY"/>
-<spnOverride numeric="74404" spn="TIGO"/>
-<spnOverride numeric="74405" spn="Personal"/>
-<spnOverride numeric="74602" spn="SR.TELESUR.GSM"/>
-<spnOverride numeric="74603" spn="DIGICEL"/>
-<spnOverride numeric="74604" spn="UNIQA"/>
-<spnOverride numeric="74801" spn="Antel"/>
-<spnOverride numeric="74807" spn="Movistar"/>
-<spnOverride numeric="74810" spn="Claro LTE"/>
-<spnOverride numeric="750001" spn="Sure FLK"/>
-<spnOverride numeric="75001" spn="Sure FLK"/>
-<spnOverride numeric="90111" spn="Inmarsat"/>
-<spnOverride numeric="90112" spn="Telenor Maritime"/>
-<spnOverride numeric="90114" spn="AeroMobile"/>
-<spnOverride numeric="90115" spn="OnAir"/>
-<spnOverride numeric="90126" spn="TIM@sea"/>
-<spnOverride numeric="90145" spn="AISatSea"/>
-<spnOverride numeric="90150" spn="EchoStar Mobile"/>
-</spnOverrides>
Index: vendor/branch/5058A_Claro/device/mediatek/common/apns-conf.xml
===================================================================
--- vendor/branch/5058A_Claro/device/mediatek/common/apns-conf.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/device/mediatek/common/apns-conf.xml	(revision 3018)
@@ -1,18536 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-/*
-** Copyright 2006, Google Inc.
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
--->
-
-<!-- use empty string to specify no proxy or port -->
-<!-- This version must agree with that in apps/common/res/apns.xml -->
-<apns version="8">
-
-<!-- Keep this Emergency as the first, so it will be the backup Emergency Apn -->
-  <apn carrier="Emergency"
-      mcc=""
-      mnc=""
-      apn=""
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Cosmote Wireless Internet"
-      mcc="202"
-      mnc="01"
-      apn="internet"
-      type="default,supl,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Cosmote MMS"
-      mcc="202"
-      mnc="01"
-      apn="mms"
-      mmsc="http://mmsc.cosmote.gr:8002"
-      mmsproxy="10.10.10.20"
-      mmsport="8080"
-      type="mms"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="HOS"
-      mcc="202"
-      mnc="01"
-      apn="hos"
-      mmsc="http://mmsc.cosmote.gr:8002"
-      mmsproxy="10.10.10.20"
-      mmsport="8080"
-      type="mms,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask ="18"
-  />
-
-  <apn carrier="IMS"
-      mcc="202"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Cosmote Wireless Internet"
-      mcc="202"
-      mnc="01"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="Cosmote Wireless Internet"
-      mcc="202"
-      mnc="02"
-      apn="internet"
-      type="default,supl,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Cosmote MMS"
-      mcc="202"
-      mnc="02"
-      apn="mms"
-      mmsc="http://mmsc.cosmote.gr:8002"
-      mmsproxy="10.10.10.20"
-      mmsport="8080"
-      type="mms"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="HOS"
-      mcc="202"
-      mnc="02"
-      apn="hos"
-      mmsc="http://mmsc.cosmote.gr:8002"
-      mmsproxy="10.10.10.20"
-      mmsport="8080"
-      type="mms,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask ="18"
-  />
-
-  <apn carrier="IMS"
-      mcc="202"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Vodafone IMS"
-      mcc="202"
-      mnc="05"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Vf Internet Corporate"
-      mcc="202"
-      mnc="05"
-      apn="internet"
-      user="user"
-      password="pass"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="Vf Internet"
-      mcc="202"
-      mnc="05"
-      apn="internet.vodafone.gr"
-      user="user"
-      password="pass"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="Vodafone GR-MMS"
-      mcc="202"
-      mnc="05"
-      apn="mms.vodafone.net"
-      user="user"
-      password="pass"
-      mmsc="http://mms.vodafone.gr"
-      mmsproxy="213.249.19.49"
-      mmsport="5080"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone GR"
-      mcc="202"
-      mnc="05"
-      apn="surfonly.vodafone.gr"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="Vf Mobile Internet"
-      mcc="202"
-      mnc="05"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="Q-Telecom MMS GPRS"
-      mcc="202"
-      mnc="09"
-      apn="q-mms.myq.gr"
-      mmsc="http://mms.myq.gr"
-      mmsproxy="192.168.80.134"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Wind Internet"
-      mcc="202"
-      mnc="10"
-      apn="gint.b-online.gr"
-      user="wap"
-      password="wap"
-      type="default,supl"
-  />
-
-  <apn carrier="Wind MMS"
-      mcc="202"
-      mnc="10"
-      apn="mnet.b-online.gr"
-      mmsc="http://192.168.200.95/servlets/mms"
-      mmsproxy="192.168.200.11"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Orange World"
-      mcc="203"
-      mnc="10"
-      apn="mworld.be"
-      proxy="212.65.63.143"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="VOX GPRS"
-      mcc="203"
-      mnc="10"
-      apn="vox.lu"
-      proxy="212.088.139.044"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="Tele2 GPRS"
-      mcc="204"
-      mnc="02"
-      apn="internet.tele2.nl"
-      mmsc="http://mmsc.tele2.nl"
-      mmsproxy="193.12.40.64"
-      mmsport="8080"
-      type="default,supl,mms,xcap"
-  />
-
-  <apn carrier="Tele2 IMS"
-      mcc="204"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Tele2 XCAP"
-      mcc="204"
-      mnc="02"
-      apn="internet.tele2.nl"
-      type="xcap"
-      bearer_bitmask ="18"
-  />
-
-  <apn carrier="Vodafone NL"
-      mcc="204"
-      mnc="04"
-      apn="live.vodafone.com"
-      user="vodafone"
-      password="vodafone"
-      mmsc="http://mmsc.mms.vodafone.nl"
-      mmsproxy="192.168.251.150"
-      mmsport="8799"
-      type="default,supl,mms,xcap"
-  />
-
-  <apn carrier="Vodafone MMS Business"
-      mcc="204"
-      mnc="04"
-      apn="office.vodafone.nl"
-      user="vodafone"
-      password="vodafone"
-      mmsc="http://mmsc.mms.vodafone.nl"
-      mmsproxy="192.168.251.150"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="204"
-      mnc="04"
-      apn="IMS"
-      type="ims"
-      mvno_type="spn"
-      mvno_match_data="中国电信"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-﻿  <apn carrier="CTNET"
-      mcc="204"
-      mnc="04"
-      apn="ctnet"
-      authtype="3"
-      user="ctnet@mycdma.cn"
-      password="vnet.mobi"
-      type="default,dun,xcap"
-      mvno_type="spn"
-      mvno_match_data="中国电信"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
- <apn carrier="8•ta"
-     mcc="204"
-     mnc="04"
-     apn="8ta.internet"
-     type="default,supl,xcap"
-     mvno_type="spn"
-     mvno_match_data="8.ta Δ"
-  />
-
- <apn carrier="8•ta mms"
-     mcc="204"
-     mnc="04"
-     apn="mms"
-     mmsproxy="41.151.254.162"
-     mmsport="8080"
-     mmsc="http://mms.8ta.com:38090/was"
-     type="mms"
-     mvno_type="spn"
-     mvno_match_data="8.ta Δ"
-  />
-
-  <apn carrier="IMS"
-      mcc="204"
-      mnc="04"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="KPN"
-      mcc="204"
-      mnc="08"
-      apn="portalmmm.nl"
-      mmsc="http://mp.mobiel.kpn/mmsc"
-      mmsproxy="10.10.100.20"
-      mmsport="5080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="lyca"
-      mcc="204"
-      mnc="09"
-      apn="data.lycamobile.nl"
-      type="default"
-  />
-
-  <apn carrier="KPN"
-      mcc="204"
-      mnc="10"
-      apn="portalmmm.nl"
-      mmsc="http://mp.mobiel.kpn/mmsc"
-      mmsproxy="10.10.100.20"
-      mmsport="5080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Telfort"
-      mcc="204"
-      mnc="12"
-      apn="internet"
-      mmsc="http://mp.mobiel.kpn/mmsc"
-      mmsproxy="193.113.200.195"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-  
-  <apn carrier="T-Mobile NL" 
-      mcc="204" 
-      mnc="16" 
-      apn="internet" 
-      user="*" 
-      password="*" 
-      server="*" 
-      mmsproxy="10.10.10.11" 
-      mmsport="8080" 
-      mmsc="http://t-mobilemms" 
-      type="default,supl"
-  />
-
-  <apn carrier="T-Mobile NL MMS"
-      mcc="204"
-      mnc="16"
-      apn="mms"
-      user="tmobilemms"
-      password="tmobilemms"
-      server="*" 
-      mmsc="http://t-mobilemms"
-      mmsproxy="10.10.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile Internet"
-      mcc="204"
-      mnc="16"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="IMS"
-      mcc="204"
-      mnc="16"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Internet Access"
-      mcc="204"
-      mnc="20"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Orange MMS"
-      mcc="204"
-      mnc="20"
-      apn="mms"
-      mmsc="http://mms.orange.nl:8002"
-      mmsproxy="10.250.255.183"
-      mmsport="5080"
-      type="mms"
-  />
-
-  <apn carrier="rabo.plus"
-      mcc="204"
-      mnc="20"
-      apn="rabo.plus"
-      type="default,supl"
-  />
-
-  <apn carrier="T-Mobile Internet"
-      mcc="204"
-      mnc="20"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="IMS"
-      mcc="204"
-      mnc="20"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Px WAP"
-      mcc="206"
-      mnc="01"
-      apn="wap.proximus.be"
-      user="wap"
-      password="wap"
-      proxy="10.253.7.3"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="Px Internet"
-      mcc="206"
-      mnc="01"
-      apn="INTERNET.PROXIMUS.BE"
-      type="default,supl"
-  />
-
-  <apn carrier="Px MMS"
-      mcc="206"
-      mnc="01"
-      apn="EVENT.PROXIMUS.BE"
-      user="mms"
-      password="mms"
-      mmsc="http://mmsc.proximus.be/mms"
-      mmsproxy="10.55.14.75"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Px Internet"
-      mcc="206"
-      mnc="01"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="Debitel"
-      mcc="206"
-      mnc="08"
-      apn="wap.debitel.de"
-      user="debitel"
-      password="wap"
-      proxy="193.168.128.127"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="O2 Internet"
-      mcc="206"
-      mnc="08"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="O2 MMS"
-      mcc="206"
-      mnc="08"
-      apn="internet"
-      mmsc="http://10.81.0.7:8002"
-      mmsproxy="82.113.100.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Mobistar MMS"
-      mcc="206"
-      mnc="10"
-      apn="mms.be"
-      mmsc="http://mmsc.mobistar.be"
-      mmsproxy="212.65.63.143"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Orange World"
-      mcc="206"
-      mnc="10"
-      apn="mworld.be"
-      proxy="212.65.63.143"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="Base Mobile Internet"
-      mcc="206"
-      mnc="20"
-      apn="gprs.base.be"
-      user="base"
-      password="base"
-      type="default,supl"
-  />
-
-  <apn carrier="BASE MMS"
-      mcc="206"
-      mnc="20"
-      apn="mms.base.be"
-      user="base"
-      password="base"
-      mmsc="http://mmsc.base.be"
-      mmsproxy="217.72.235.1"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="BASE WAP"
-      mcc="206"
-      mnc="20"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="Orange Entreprise"
-      mcc="208"
-      mnc="01"
-      apn="orange-mib"
-      proxy="172.16.2.8"
-      port="8000"
-      authtype="0"
-      user="orange"
-      password="orange"
-      type="default,supl"
-  />
-
-  <apn carrier="Orange World"
-      mcc="208"
-      mnc="01"
-      apn="orange"
-      authtype="0"
-      user="orange"
-      password="orange"
-      type="default,supl"
-  />
-
-  <apn carrier="Orange MMS"
-      mcc="208"
-      mnc="01"
-      apn="orange.acte"
-      user="orange"
-      password="orange"
-      mmsc="http://mms.orange.fr"
-      mmsproxy="192.168.10.200"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="Orange Internet"
-      mcc="208"
-      mnc="01"
-      apn="orange.fr"
-      authtype="0"
-      user="orange"
-      password="orange"
-      type="dun"
-  />
-
-  <apn carrier="Orange IMS APN"
-      mcc="208"
-      mnc="01"
-      apn="ims"
-      type="ims"
-  />
-
-  <apn carrier="Orange IA"
-      mcc="208"
-      mnc="01"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="Orange"
-      mcc="208"
-      mnc="01"
-      apn="nisginet"
-      authtype="1"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="MMS Orange GPRS"
-      mcc="208"
-      mnc="02"
-      apn="orange.acte"
-      user="orange"
-      password="orange"
-      mmsc="http://mms.orange.fr/"
-      mmsproxy="192.168.10.200"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Orange GPRS ISP"
-      mcc="208"
-      mnc="02"
-      apn="orange.fr"
-      type="default,supl"
-  />
-
-  <apn carrier="SFR-MMS"
-      mcc="208"
-      mnc="10"
-      apn="mmssfr"
-      mmsc="http://mms1"
-      mmsproxy="10.151.0.1"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="SFR"
-      mcc="208"
-      mnc="10"
-      apn="sl2sfr"
-      type="default,supl,xcap,mms"
-  />
-
-  <apn carrier="ACCESS DATA"
-      mcc="208"
-      mnc="10"
-      apn="websfr"
-      type="default,supl"
-  />
-
-  <apn carrier="SFR IMS"
-      mcc="208"
-      mnc="10"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="SFR webphone"
-      mcc="208"
-      mnc="10"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="MMS"
-      mcc="208"
-      mnc="11"
-      apn="mmssfr"
-      mmsc="http://mms1"
-      mmsproxy="10.151.0.1"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="ACCESS DATA"
-      mcc="208"
-      mnc="11"
-      apn="websfr"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS"
-      mcc="208"
-      mnc="13"
-      apn="mmssfr"
-      mmsc="http://mms1"
-      mmsproxy="10.151.0.1"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="ACCESS DATA"
-      mcc="208"
-      mnc="13"
-      apn="websfr"
-      type="default,supl"
-  />
-
-  <apn carrier="Free"
-      mcc="208"
-      mnc="15"
-      apn="free"
-      type="default"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Bouygues Telecom"
-      mcc="208"
-      mnc="20"
-      apn="mmsbouygtel.com"
-      mmsc="http://mms.bouyguestelecom.fr/mms/wapenc"
-      mmsproxy="62.201.129.226"
-      mmsport="8080"
-      type="default,supl,mms,xcap"
-  />
-
-  <apn carrier="Bouygues Pro"
-      mcc="208"
-      mnc="20"
-      apn="a2bouygtel.com"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Bouygues IMS"
-      mcc="208"
-      mnc="20"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="BouyguesGPRS ISP"
-      mcc="208"
-      mnc="21"
-      apn="ebouygtel.com"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS Bouygues"
-      mcc="208"
-      mnc="21"
-      apn="mmsbouygtel.com"
-      mmsc="http://mms.bouyguestelecom.fr/mms/wapenc"
-      mmsproxy="62.201.129.226"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="BouyguesGPRS ISP"
-      mcc="208"
-      mnc="88"
-      apn="ebouygtel.com"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS Bouygues"
-      mcc="208"
-      mnc="88"
-      apn="mmsbouygtel.com"
-      mmsc="http://mms.bouyguestelecom.fr/mms/wapenc"
-      mmsproxy="62.201.129.226"
-      mmsport="8080"
-      type="mms,xcap"
-  />
-
-  <apn carrier="Bouygues IMS"
-      mcc="208"
-      mnc="88"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Vodafone"
-      mcc="214"
-      mnc="01"
-      apn="airtelwap.es"
-      user="wap@wap"
-      password="wap125"
-      type="default,supl"
-      authtype="0"
-  />
-
-  <apn carrier="Ut"
-      mcc="214"
-      mnc="01"
-      apn="ut.es"
-      type="xcap"
-      server="xcap.ims.mnc001.mcc214.pub.3gppnetwork.org"
-      port="8090"
-      protocol="IP"
-  />
-
-  <apn carrier="Vodafone ES-MMS"
-      mcc="214"
-      mnc="01"
-      apn="mms.vodafone.net"
-      user="wap@wap"
-      password="wap125"
-      mmsc="http://mmsc.vodafone.es/servlets/mms"
-      mmsproxy="212.73.32.10"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="ims"
-      mcc="214"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Orange MMS"
-      mcc="214"
-      mnc="03"
-      apn="orangemms"
-      user="orange"
-      password="orange"
-      mmsc="http://mms.orange.es"
-      mmsproxy="172.22.188.25"
-      mmsport="8080"
-      authtype="1"
-      type="mms"
-  />
-
-  <apn carrier="Orange Internet Móvil"
-      mcc="214"
-      mnc="03"
-      apn="orangeworld"
-      user="orange"
-      password="orange"
-      authtype="1"
-      type="default"
-  />
-
-  <apn carrier="Orange Internet PC"
-      mcc="214"
-      mnc="03"
-      apn="internet"
-      authtype="1"
-      user="orange"
-      password="orange"
-      type="dun"
-  />
-
-  <apn carrier="IMS"
-      mcc="214"
-      mnc="03"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Euskaltel Internet"
-      mcc="214"
-      mnc="03"
-      apn="internet.euskaltel.mobi"
-      user="CLIENTE"
-      password="EUSKALTEL"
-      authtype="1"
-      type="default,supl"
-      mvno_type="imsi"
-      mvno_match_data="2140359"
-  />
-
-  <apn carrier="Euskaltel MMS"
-      mcc="214"
-      mnc="03"
-      apn="euskaltelmms.euskaltel.mobi"
-      user="MMS"
-      password="EUSKALTEL"
-      authtype="1"
-      mmsc="http://mms.euskaltel.mobi"
-      mmsproxy="172.16.18.74"
-      mmsport="8080"
-      type="mms"
-      mvno_type="imsi"
-      mvno_match_data="2140359"
-  />
-
-  <apn carrier="Carrefour"
-      mcc="214"
-      mnc="03"
-      apn="CARREFOURINTERNET"
-      authtype="1"
-      type="default,supl"
-      mvno_type="imsi"
-      mvno_match_data="2140352xxxxxxxx"
-  />
-
-  <apn carrier="Carrefour MMS"
-      mcc="214"
-      mnc="03"
-      apn="CARREFOURMMS"
-      user="CARREFOUR"
-      password="CARREFOUR"
-      authtype="1"
-      mmsc="http://mms.orange.es"
-      mmsproxy="172.022.188.025"
-      mmsport="8080"
-      mvno_type="imsi"
-      mvno_match_data="2140352xxxxxxxx"
-      type="mms"
-  />
-
-  <apn carrier="GPRS Connection"
-      mcc="214"
-      mnc="04"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Yoigo MMS"
-      mcc="214"
-      mnc="04"
-      apn="mms"
-      mmsc="http://mmss/"
-      mmsproxy="193.209.134.141"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Yoigo Internet"
-      mcc="214"
-      mnc="04"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="INTERNET GPRS"
-      mcc="214"
-      mnc="06"
-      apn="airtelnet.es"
-      user="vodafone"
-      password="vodafone"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="MMS Vodafone"
-      mcc="214"
-      mnc="06"
-      apn="mms.vodafone.net"
-      user="wap@wap"
-      password="wap125"
-      mmsc="http://mmsc.vodafone.es/servlets/mms"
-      mmsproxy="212.73.32.10"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="movistar Internet"
-      mcc="214"
-      mnc="07"
-      apn="movistar.es"
-      user="MOVISTAR"
-      password="MOVISTAR"
-      type="default,supl,dun"
-  />
-
-  <apn carrier="Telefonica Internet"
-      mcc="214"
-      mnc="07"
-      apn="telefonica.es"
-      user="telefonica"
-      password="telefonica"
-      type="default,supl"
-  />
-
-  <apn carrier="Telefonica MMS"
-      mcc="214"
-      mnc="07"
-      apn="telefonica.es"
-      user="telefonica"
-      password="telefonica"
-      mmsc="http://mms.movistar.com"
-      mmsproxy="10.138.255.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Euskaltel Internet"
-      mcc="214"
-      mnc="08"
-      apn="internet.euskaltel.mobi"
-      user="CLIENTE"
-      password="EUSKALTEL"
-      type="default,supl"
-  />
-
-  <apn carrier="Euskaltel MMS"
-      mcc="214"
-      mnc="08"
-      apn="euskaltelmms.euskaltel.mobi"
-      user="MMS"
-      password="EUSKALTEL"
-      mmsc="http://mms.euskaltel.mobi"
-      mmsproxy="172.16.18.74"
-      mmsport="8080"
-      type="mms"
-  />
-
-﻿  <apn carrier="blau ES" 
-       mcc="214"
-       mnc="19" 
-       apn="gprs-service.com" 
-       mmsc="http://217.18.32.180:8080" 
-       mmsproxy="217.18.32.181" 
-       mmsport="8080" 
-       type="default,supl,mms" 
-  />
-  
-  <apn carrier="Simyo ES" 
-       mcc="214" 
-       mnc="19" 
-       apn="gprs-service.com" 
-       type="default,supl"
-  />
-  
-  <apn carrier="Simyo ES-MMS" 
-       mcc="214" 
-       mnc="19" 
-       apn="gprs-service.com" 
-       password="1234" 
-       mmsc="http://mms-services.eu" 
-       mmsproxy="217.12.32.180" 
-       mmsport="8080" 
-       type="mms" 
-  />
-
-  <apn carrier="Jazztel" 
-       mcc="214" 
-       mnc="21" 
-       apn="jazzinternet" 
-       type="default,supl"
-  />
-  
-  <apn carrier="Jazztel MMS" 
-       mcc="214" 
-       mnc="21" 
-       apn="jazzmms" 
-       mmsc="http://jazztelmms.com:8081" 
-       mmsproxy="217.18.32.183" 
-       mmsport="8081"
-       type="mms" 
- />
-  
-  <apn carrier="Pannon MMS"
-      mcc="216"
-      mnc="01"
-      apn="mms"
-      mmsc="http://mmsc.pgsm.hu/"
-      mmsproxy="193.225.154.22"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Pannon NET GPRS"
-      mcc="216"
-      mnc="01"
-      apn="net"
-      type="default,supl"
-  />
-
-  <apn carrier="Telekom HU NET"
-      mcc="216"
-      mnc="30"
-      apn="internet.telekom"
-      type="default,dun,supl,xcap"
-      authtype="1"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Telekom HU MMS"
-      mcc="216"
-      mnc="30"
-      apn="internet.telekom"
-      mmsc="http://mms.t-mobile.hu/servlets/mms"
-      mmsproxy="212.51.126.10"
-      mmsport="8080"
-      type="mms"
-      authtype="1"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="IMS"
-      mcc="216"
-      mnc="30"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Vodafone Elofizetes"
-      mcc="216"
-      mnc="70"
-      apn="vitamax.internet.vodafone.net"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS Elofizetes"
-      mcc="216"
-      mnc="70"
-      apn="mms.vodafone.net"
-      mmsc="http://mms.vodafone.hu/servlets/mms"
-      mmsproxy="80.244.97.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Tesco Internet"
-      mcc="216"
-      mnc="70"
-      apn="internet.tescomobile.hu"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="MMS Tesco"
-      mcc="216"
-      mnc="70"
-      apn="mms.tescomobile.hu"
-      mmsc="http://mms.tescomobile.hu/servlets/mms"
-      mmsproxy="80.244.97.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="ERONET WAP"
-      mcc="218"
-      mnc="03"
-      apn="wap.eronet.ba"
-      proxy="10.12.3.10"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="ERONET GPRS"
-      mcc="218"
-      mnc="03"
-      apn="gprs.eronet.ba"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS-ERONET"
-      mcc="218"
-      mnc="03"
-      apn="mms.eronet.ba"
-      mmsc="http://mms.gprs.eronet.ba/mms/wapenc"
-      mmsproxy="10.12.3.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="MTEL WAP"
-      mcc="218"
-      mnc="05"
-      apn="3g1"
-      proxy="10.12.3.10"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="MTEL GPRS"
-      mcc="218"
-      mnc="05"
-      apn="3g3"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS-MTEL"
-      mcc="218"
-      mnc="05"
-      apn="mtelmms"
-      mmsc="http://mmsc.mtel.ba/mms/wapenc"
-      mmsproxy="192.168.61.11"
-      mmsport="80"
-      type="mms"
-  />
-  
-  <apn carrier="BHMobile WAP"
-      mcc="218"
-      mnc="90"
-      apn="active.bhmobile.ba"
-      proxy="195.222.56.41"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="BHMobile MMS"
-      mcc="218"
-      mnc="90"
-      apn="mms.eronet.ba"
-      mmsc="http://mmsc.mtel.ba/mms/wapenc"
-      mmsproxy="10.12.3.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="MMS"
-      mcc="219"
-      mnc="01"
-      apn="mms.htgprs"
-      mmsc="http://mms.t-mobile.hr/servlets/mms"
-      mmsproxy="10.12.0.4"
-      mmsport="8080"
-      type="mms"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Internet"
-      mcc="219"
-      mnc="01"
-      apn="internet.ht.hr"
-      type="default,supl"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="IMS"
-      mcc="219"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="HOS"
-      mcc="219"
-      mnc="01"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Vip GPRS"
-      mcc="219"
-      mnc="10"
-      apn="gprs0.vipnet.hr"
-      user="38591"
-      password="38591"
-      proxy="212.91.99.91"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="Vip MMS"
-      mcc="219"
-      mnc="10"
-      apn="mms.vipnet.hr"
-      mmsc="http://mms.vipnet.hr/servlets/mms"
-      mmsproxy="212.91.99.91"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Broadband"
-      mcc="219"
-      mnc="10"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="220"
-      mnc="01"
-      apn="internet"
-      user="telenor"
-      password="gprs"
-      proxy="217.65.192.33"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="Telenor MMS"
-      mcc="220"
-      mnc="01"
-      apn="mms"
-      mmsc="http://mms.telenor.rs/servlets/mms"
-      mmsproxy="217.65.192.33"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Pro GPRS"
-      mcc="220"
-      mnc="02"
-      apn="gprs.promonte.com"
-      user="gprs"
-      password="gprs"
-      proxy="192.168.246.5"
-      port="9201"
-      type="wap"
-  />
-
-  <apn carrier="Pro MMS"
-      mcc="220"
-      mnc="02"
-      apn="mms.promonte.com"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.telenor.rs/servlets/mms"
-      mmsproxy="192.168.246.5"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="mt:s mondo"
-      mcc="220"
-      mnc="03"
-      apn="gprswap"
-      user="mts"
-      password="064"
-      proxy="172.17.88.198"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="MMS"
-      mcc="220"
-      mnc="03"
-      apn="mms"
-      user="mts"
-      password="064"
-      mmsc="http://mms.mts064.telekom.yu/mms/wapenc"
-      mmsproxy="172.17.85.131"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="web and walk"
-      mcc="220"
-      mnc="04"
-      apn="tmcg-wnw"
-      user="38267"
-      password="38267"
-      proxy="10.0.5.19"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="T-Mobile MMS"
-      mcc="220"
-      mnc="04"
-      apn="mms"
-      user="38267"
-      password="38267"
-      mmsc="http://192.168.180.100/servlets/mms"
-      mmsproxy="10.0.5.19"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Vip GPRS"
-      mcc="220"
-      mnc="05"
-      apn="vipmobile"
-      user="vipmobile"
-      password="vipmobile"
-      proxy="212.15.182.82"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="Vip MMS"
-      mcc="220"
-      mnc="05"
-      apn="vipmobile.mms"
-      user="vipmobile"
-      password="vipmobile"
-      mmsc="http://mmsc.vipmobile.rs"
-      mmsproxy="212.15.182.82"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="TIM WEB"
-      mcc="222"
-      mnc="01"
-      apn="ibox.tim.it"
-      type="default,supl,dun"
-  />
-
-<apn carrier="TIM WAP"
-      mcc="222"
-      mnc="01"
-      apn="wap.tim.it"
-      type="default,supl"
-  />
-
-  <apn carrier="TIM MMS"
-      mcc="222"
-      mnc="01"
-      apn="unico.tim.it"
-      proxy="213.230.130.89"
-      port="80"
-      mmsc="http://mms.tim.it/servlets/mms"
-      mmsproxy="213.230.130.89"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="TIM XCAP"
-      mcc="222"
-      mnc="01"
-      apn="xcap.tim.it"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="222"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="NOVERCA WEB"
-      mcc="222"
-      mnc="07"
-      apn="web.noverca.it"
-      type="default,supl"
-  />
-
-  <apn carrier="NOVERCA MMS"
-      mcc="222"
-      mnc="07"
-      apn="mms.noverca.it"
-      mmsc="http://mms.noverca.it/"
-      mmsproxy="213.230.130.89"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone IT-MMS"
-      mcc="222"
-      mnc="10"
-      apn="mms.vodafone.it"
-      mmsc="http://mms.vodafone.it/servlets/mms"
-      mmsproxy="10.128.224.10"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone IT"
-      mcc="222"
-      mnc="10"
-      apn="mobile.vodafone.it"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="Vodafone WEB"
-      mcc="222"
-      mnc="10"
-      apn="web.omnitel.it"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="ims"
-      mcc="222"
-      mnc="10"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Acc. Internet da cell"
-      mcc="222"
-      mnc="10"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="WIND Internet"
-      mcc="222"
-      mnc="88"
-      apn="internet.wind"
-      type="default,supl"
-  />
-
-  <apn carrier="WIND BIZ WEB" 
-      mcc="222"
-      mnc="88"
-      apn="internet.wind.biz" 
-      type="default,supl" 
-  />
-
-  <apn carrier="MMS Wind"
-      mcc="222"
-      mnc="88"
-      apn="mms.wind"
-      mmsc=" http://mms.wind.it"
-      mmsproxy="212.245.244.100"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="3"
-      mcc="222"
-      mnc="99"
-      apn="tre.it"
-      mmsc="http://10.216.59.240:10021/mmsc"
-      mmsproxy="62.13.171.3"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Vodafone Internet"
-      mcc="226"
-      mnc="01"
-      apn="internet.vodafone.ro"
-      user="internet.vodafone.ro"
-      password="vodafone"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="226"
-      mnc="01"
-      apn="mms.vodafone.ro"
-      user="mms"
-      password="vodafone"
-      mmsc="http://multimedia/servlets/mms"
-      mmsproxy="193.230.161.231"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone live!"
-      mcc="226"
-      mnc="01"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="Cosmote Internet"
-      mcc="226"
-      mnc="03"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Cosmote MMS"
-      mcc="226"
-      mnc="03"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://mmsc1.mms.cosmote.ro:8002"
-      mmsproxy="10.252.1.62"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cosmote Connect Mobile"
-      mcc="226"
-      mnc="03"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="Cosmote Connect Mobile"
-      mcc="226"
-      mnc="06"
-      apn=""
-      type="ia"
-  />
-
-  <!-- Romania MMS -->
-  <apn carrier="Orange MMS"
-      mcc="226"
-      mnc="10"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://wap.mms.orange.ro:8002"
-      mmsproxy="62.217.247.252"
-      mmsport="8799"
-      authtype="1"
-      type="mms"
-  />
-
-  <!-- Romania 2.5g or 3g -->
-  <apn carrier="Orange Internet"
-      mcc="226"
-      mnc="10"
-      apn="net"
-      type="default"
-  />
-
-  <apn carrier="Orange IMS"
-      mcc="226"
-      mnc="10"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Swisscom-MMS"
-      mcc="228"
-      mnc="01"
-      apn="event.swisscom.ch"
-      mmsc="http://mms.natel.ch:8079"
-      mmsproxy="192.168.210.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Swisscom Services"
-      mcc="228"
-      mnc="01"
-      apn="gprs.swisscom.ch"
-      type="default,supl"
-      protocol="IP"
-  />
-
-  <apn carrier="ims"
-      mcc="228"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Swisscom XCAP"
-      mcc="228"
-      mnc="01"
-      apn="hos"
-      type="xcap"
-      protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Sunrise"
-      mcc="228"
-      mnc="02"
-      apn="internet"
-      user="internet"
-      password="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Sunrise MMS"
-      mcc="228"
-      mnc="02"
-      apn="mms.sunrise.ch"
-      mmsc="http://mmsc.sunrise.ch"
-      mmsproxy="212.35.34.75"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Orange Internet"
-      mcc="228"
-      mnc="03"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Orange MMS"
-      mcc="228"
-      mnc="03"
-      apn="mms"
-      mmsproxy="192.168.151.2"
-      mmsport="8080"
-      mmsc="http://192.168.151.3:8002"
-      type="mms"
-  />
-
-  <apn carrier="Tele2 WAP"
-      mcc="228"
-      mnc="08"
-      apn="internet.tele2.ch"
-      proxy="130.244.196.90"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="Tele2 MMS"
-      mcc="228"
-      mnc="08"
-      apn="internet.tele2.ch"
-      mmsc="http://mmsc.tele2.ch"
-      mmsproxy="193.12.40.67"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile Internet"
-      mcc="230"
-      mnc="01"
-      apn="internet.t-mobile.cz"
-      type="default,supl,xcap"
-      authtype="1"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="T-Mobile MMS"
-      mcc="230"
-      mnc="01"
-      apn="mms.t-mobile.cz"
-      user="mms"
-      password="mms"
-      mmsc="http://mms"
-      mmsproxy="10.0.0.10"
-      mmsport="80"
-      type="mms"
-      authtype="1"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="HOS"
-      mcc="230"
-      mnc="01"
-      apn="hos"
-      mmsc="http://mms"
-      mmsproxy="10.0.0.10"
-      mmsport="80"
-      type="mms"
-      authtype="1"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="ims"
-      mcc="230"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
- />
-
-  <apn carrier="TMO Czech XCAP"
-      mcc="230"
-      mnc="01"
-      apn="hos"
-      type="xcap"
-      authtype="1"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="O2 internet"
-      mcc="230"
-      mnc="02"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="O2 MMS"
-      mcc="230"
-      mnc="02"
-      apn="mms"
-      mmsc="http://mms.o2active.cz:8002"
-      mmsproxy="160.218.160.218"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="GPRS Web"
-      mcc="230"
-      mnc="03"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="GPRS MMS"
-      mcc="230"
-      mnc="03"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://mms"
-      mmsproxy="10.11.10.111"
-      mmsport="80"
-      type="mms"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="GPRS Web"
-      mcc="230"
-      mnc="03"
-      apn="ointernet"
-      type="default,supl"
-  />
-
-  <apn carrier="ims"
-      mcc="230"
-      mnc="03"
-      apn="ims"
-      type="ims"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Orange Internet"
-      mcc="231"
-      mnc="01"
-      apn="internet"
-      type="default"
-  />
-
-  <apn carrier="Orange World"
-      mcc="231"
-      mnc="01"
-      apn="orangewap"
-      user="wap"
-      password="wap"
-      authtype="1"
-      proxy="213.151.208.156"
-      port="8799"
-      type="default,supl"
-  />
-
- <!-- Slovakia MMS -->
-  <apn carrier="Orange MMS"
-      mcc="231"
-      mnc="01"
-      apn="mms"
-      user="wap"
-      password="wap"
-      mmsc="http://imms.orange.sk"
-      mmsproxy="213.151.208.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Orange SK MMS"
-      mcc="231"
-      mnc="01"
-      apn="mms"
-      user="wap"
-      password="wap"
-      authtype="1"
-      mmsc="http://imms.orange.sk"
-      mmsproxy="213.151.208.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Orange SK"
-      mcc="231"
-      mnc="01"
-      apn="internet"
-      type="default"
-  />
-
-  <apn carrier="T-Mobile SK"
-      mcc="231"
-      mnc="02"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="T-Mobile SK MMS"
-      mcc="231"
-      mnc="02"
-      apn="mms"
-      password="mms"
-      mmsc="http://mms"
-      mmsproxy="192.168.1.1"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile SK"
-      mcc="231"
-      mnc="04"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="T-Mobile SK MMS"
-      mcc="231"
-      mnc="04"
-      apn="mms"
-      password="mms"
-      mmsc="http://mms"
-      mmsproxy="192.168.1.1"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Orange Internet"
-      mcc="231"
-      mnc="05"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Orange MMS"
-      mcc="231"
-      mnc="05"
-      apn="mms"
-      user="wap"
-      password="wap"
-      mmsc="http://imms.orange.sk"
-      mmsproxy="213.151.208.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="O2 SK"
-      mcc="231"
-      mnc="06"
-      apn="o2internet"
-      type="default,supl"
-  />
-
-  <apn carrier="O2 SK MMS"
-      mcc="231"
-      mnc="06"
-      apn="o2mms"
-      mmsc="http://mms.o2world.sk:8002"
-      mmsproxy="10.97.1.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Mobilkom"
-      mcc="232"
-      mnc="01"
-      apn="a1.net"
-      user="ppp@a1plus.at"
-      password="ppp"
-      type="default,supl"
-  />
-
-  <apn carrier="Mobilkom-MMS"
-      mcc="232"
-      mnc="01"
-      apn="free.a1.net"
-      user="ppp@a1plus.at"
-      password="ppp"
-      mmsc="http://mmsc.a1.net"
-      mmsproxy="194.48.124.71"
-      mmsport="8001"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile A"
-      mcc="232"
-      mnc="03"
-      apn="gprsinternet"
-      user="t-mobile"
-      password="tm"
-      server="*" 
-      mmsproxy="10.12.0.20" 
-      mmsport="80" 
-      mmsc="http://mmsc.t-mobile.at/servlets/mms" 
-      type="default,supl"
-  />
-
-  <apn carrier="T-Mobile A MMS"
-      mcc="232"
-      mnc="03"
-      apn="gprsmms"
-      user="t-mobile"
-      password="tm"
-      server="*"
-      mmsc="http://mmsc.t-mobile.at/servlets/mms"
-      mmsproxy="10.12.0.20"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile Internet"
-      mcc="232"
-      mnc="03"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="Planet3"
-      mcc="232"
-      mnc="05"
-      apn="drei.at"
-      mmsc="http://mmsc"
-      mmsproxy="213.94.78.133"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="tele.ring MMS"
-      mcc="232"
-      mnc="07"
-      apn="mms"
-      user="wap@telering.at"
-      password="wap"
-      mmsc="http://relay.mms.telering.at"
-      mmsproxy="212.95.31.50"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="tele.ring"
-      mcc="232"
-      mnc="07"
-      apn="web"
-      user="web@telering.at"
-      password="web"
-      type="default,supl"
-  />
-
-  <apn carrier="Tele2 GPRS"
-      mcc="232"
-      mnc="09"
-      apn="web"
-      proxy="130.244.196.90"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="Tele2 MMS"
-      mcc="232"
-      mnc="09"
-      apn="internet.tele2.at"
-      mmsc="http://mmsc.tele2.at"
-      mmsproxy="193.12.40.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Planet3"
-      mcc="232"
-      mnc="10"
-      apn="drei.at"
-      mmsc="http://mmsc"
-      mmsproxy="213.94.78.133"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="BOB GPRS"
-      mcc="232"
-      mnc="11"
-      apn="bob.at"
-      user="data@bob.at"
-      password="ppp"
-      proxy="194.048.124.7"
-      port="8001"
-      type="wap"
-  />
-
-  <apn carrier="BOB MMS"
-      mcc="232"
-      mnc="11"
-      apn="mms.bob.at"
-      user="data@bob.at"
-      password="ppp"
-      mmsc="http://mmsc.bob.at"
-      mmsproxy="194.048.124.7"
-      mmsport="8001"
-      type="mms"
-  />
-
-  <apn carrier="UBIQUISYS"
-      mcc="234"
-      mnc="01"
-      apn="internet"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="O2 MOBILE WEB"
-      mcc="234"
-      mnc="02"
-      apn="mobile.o2.co.uk"
-      user="O2web"
-      password="O2web"
-      type="default,supl"
-  />
-
-  <apn carrier="O2 MMS Prepay"
-      mcc="234"
-      mnc="02"
-      apn="payandgo.o2.co.uk"
-      user="payandgo"
-      password="password"
-      mmsc="http://mmsc.mms.o2.co.uk:8002"
-      mmsproxy="193.113.200.195"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="O2 MMS Postpay"
-      mcc="234"
-      mnc="02"
-      apn="wap.o2.co.uk"
-      user="o2wap"
-      password="password"
-      mmsc="http://mmsc.mms.o2.co.uk:8002"
-      mmsproxy="193.113.200.195"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="O2 UK MMS"
-      mcc="234"
-      mnc="10"
-      apn="idata.o2.co.uk"
-      user="vertigo"
-      password="password"
-      mmsc="http://mmsc.mms.o2.co.uk:8002"
-      mmsproxy="193.113.200.195"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="O2 UK"
-      mcc="234"
-      mnc="10"
-      apn="mobile.o2.co.uk"
-      user="O2web"
-      password="O2web"
-      type="default,supl"
-  />
-
-  <apn carrier="O2 MMS Prepay"
-      mcc="234"
-      mnc="10"
-      apn="payandgo.o2.co.uk"
-      user="payandgo"
-      password="password"
-      mmsc="http://mmsc.mms.o2.co.uk:8002"
-      mmsproxy="193.113.200.195"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="O2 MMS Postpay"
-      mcc="234"
-      mnc="10"
-      apn="wap.o2.co.uk"
-      user="o2wap"
-      password="password"
-      mmsc="http://mmsc.mms.o2.co.uk:8002"
-      mmsproxy="193.113.200.195"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="234"
-      mnc="10"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Internet"
-      mcc="234"
-      mnc="10"
-      apn="mobile.o2.co.uk"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="O2 MOBILE WEB"
-      mcc="234"
-      mnc="11"
-      apn="mobile.o2.co.uk"
-      user="O2web"
-      password="O2web"
-      type="default,supl"
-  />
-
-  <apn carrier="O2 MMS Prepay"
-      mcc="234"
-      mnc="11"
-      apn="payandgo.o2.co.uk"
-      user="payandgo"
-      password="password"
-      mmsc="http://mmsc.mms.o2.co.uk:8002"
-      mmsproxy="193.113.200.195"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="O2 MMS Postpay"
-      mcc="234"
-      mnc="11"
-      apn="wap.o2.co.uk"
-      user="o2wap"
-      password="password"
-      mmsc="http://mmsc.mms.o2.co.uk:8002"
-      mmsproxy="193.113.200.195"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="ims"
-      mcc="234"
-      mnc="15"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Vodafone UK"
-      mcc="234"
-      mnc="15"
-      apn="wap.vodafone.co.uk"
-      user="wap"
-      password="wap"
-      mmsc="http://mms.vodafone.co.uk/servlets/mms"
-      mmsproxy="212.183.137.12"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Vodafone Post-pay ISP"
-      mcc="234"
-      mnc="15"
-      apn="internet"
-      user="web"
-      password="web"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone Prepay"
-      mcc="234"
-      mnc="15"
-      apn="pp.vodafone.co.uk"
-      user="wap"
-      password="wap"
-      mmsc="http://mms.vodafone.co.uk/servlets/mms"
-      mmsproxy="212.183.137.12"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Vodafone UK XCAP"
-      mcc="234"
-      mnc="15"
-      apn="xcap"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="3 UK"
-      mcc="234"
-      mnc="20"
-      apn="three.co.uk"
-      mmsc="http://mms.um.three.co.uk:10021/mmsc"
-      mmsproxy="mms.three.co.uk"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="3 UK Xcap"
-      mcc="234"
-      mnc="20"
-      apn="three.co.uk"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="IMS"
-      mcc="234"
-      mnc="20"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="EE Internet"
-      mcc="234"
-      mnc="30"
-      apn="everywhere"
-      user="eesecure"
-      password="secure"
-      authtype="1"
-      type="default,supl"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="EE MMS"
-      mcc="234"
-      mnc="30"
-      apn="eezone"
-      user="eesecure"
-      password="secure"
-      mmsc="http://mms/"
-      mmsproxy="149.254.201.135"
-      mmsport="8080"
-      authtype="1"
-      type="mms"
-      protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="IMS"
-      mcc="234"
-      mnc="30"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="EE Internet"
-      mcc="234"
-      mnc="31"
-      apn="everywhere"
-      user="eesecure"
-      password="secure"
-      authtype="1"
-      type="default,supl"
-  />
-
-  <apn carrier="EE MMS"
-      mcc="234"
-      mnc="31"
-      apn="eezone"
-      user="eesecure"
-      password="secure"
-      mmsc="http://mms/"
-      mmsproxy="149.254.201.135"
-      mmsport="8080"
-      authtype="1"
-      type="mms"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="IMS"
-      mcc="234"
-      mnc="31"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="EE Internet"
-      mcc="234"
-      mnc="32"
-      apn="everywhere"
-      user="eesecure"
-      password="secure"
-      authtype="1"
-      type="default,supl"
-      protocol="IP"
-  />
-
-  <apn carrier="EE MMS"
-      mcc="234"
-      mnc="32"
-      apn="eezone"
-      user="eesecure"
-      password="secure"
-      mmsc="http://mms/"
-      mmsproxy="149.254.201.135"
-      mmsport="8080"
-      authtype="1"
-      type="mms"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="IMS"
-      mcc="234"
-      mnc="32"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="EE Internet"
-      mcc="234"
-      mnc="33"
-      apn="everywhere"
-      user="eesecure"
-      password="secure"
-      authtype="1"
-      type="default,supl"
-      protocol="IP"
-  />
-
-  <apn carrier="EE MMS"
-      mcc="234"
-      mnc="33"
-      apn="eezone"
-      user="eesecure"
-      password="secure"
-      mmsc="http://mms/"
-      mmsproxy="149.254.201.135"
-      mmsport="8080"
-      authtype="1"
-      type="mms"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="IMS"
-      mcc="234"
-      mnc="33"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="EE Internet"
-      mcc="234"
-      mnc="34"
-      apn="everywhere"
-      user="eesecure"
-      password="secure"
-      authtype="1"
-      type="default,supl"
-      protocol="IP"
-  />
-
-  <apn carrier="EE MMS"
-      mcc="234"
-      mnc="34"
-      apn="eezone"
-      user="eesecure"
-      password="secure"
-      mmsc="http://mms/"
-      mmsproxy="149.254.201.135"
-      mmsport="8080"
-      authtype="1"
-      type="mms"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="IMS"
-      mcc="234"
-      mnc="34"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Jersey Telecom"
-      mcc="234"
-      mnc="50"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.surfmail.com/mmsc"
-      mmsproxy="212.9.19.199"
-      mmsport="3130"
-      type="mms"
-  />
-
-  <apn carrier="pepperWEB (Jersey)"
-      mcc="234"
-      mnc="50"
-      apn="pepper"
-      type="default,supl"
-  />
-
-  <apn carrier="HOS"
-      mcc="234"
-      mnc="53"
-      apn="HOS"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="HOS"
-      mcc="234"
-      mnc="54"
-      apn="HOS"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="C&amp;W Guernsey Internet"
-      mcc="234"
-      mnc="55"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Sure Picture Messaging"
-      mcc="234"
-      mnc="55"
-      apn="mms"
-      mmsc="http://mmsc.gprs.cw.com/"
-      mmsproxy="10.0.3.101"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="3G HSDPA"
-      mcc="234"
-      mnc="58"
-      apn="3gpronto"
-      type="default,supl"
-  />
-
-  <apn carrier="Manx Telecom Contract MMS"
-      mcc="234"
-      mnc="58"
-      apn="mms.manxpronto.net"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.manxpronto.net:8002"
-      mmsproxy="195.10.99.46"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Manx Telecom Prepay MMS"
-      mcc="234"
-      mnc="58"
-      apn="mms.prontogo.net"
-      user="mmsgo"
-      password="mmsgo"
-      mmsc="http://mms.manxpronto.net:8002"
-      mmsproxy="195.10.99.41"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Manx Telecom Contract WEB"
-      mcc="234"
-      mnc="58"
-      apn="web.manxpronto.net"
-      user="gprs"
-      password="gprs"
-      type="default,supl"
-  />
-
-  <apn carrier="EE Internet"
-      mcc="234"
-      mnc="86"
-      apn="everywhere"
-      user="eesecure"
-      password="secure"
-      authtype="1"
-      type="default,supl"
-  />
-
-  <apn carrier="EE MMS"
-      mcc="234"
-      mnc="86"
-      apn="eezone"
-      user="eesecure"
-      password="secure"
-      mmsc="http://mms/"
-      mmsproxy="149.254.201.135"
-      mmsport="8080"
-      authtype="1"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="234"
-      mnc="86"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="3 UK Xcap"
-      mcc="235"
-      mnc="94"
-      apn="three.co.uk"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="IMS"
-      mcc="235"
-      mnc="94"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="3 UK"
-      mcc="235"
-      mnc="94"
-      apn="three.co.uk"
-      mmsc="http://mms.um.three.co.uk:10021/mmsc"
-      mmsproxy="mms.three.co.uk"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="TDC MMS"
-      mcc="238"
-      mnc="01"
-      apn="mms"
-      mmsc="http://192.168.241.114:8002"
-      mmsproxy="194.182.251.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="TDC WAP"
-      mcc="238"
-      mnc="01"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="238"
-      mnc="02"
-      apn="Internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Telenor MMS"
-      mcc="238"
-      mnc="02"
-      apn="telenor"
-      mmsc="http://mms.telenor.dk"
-      mmsproxy="212.88.64.8"
-      mmsport="8080"
-      type="mms"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="IMS"
-      mcc="238"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="XCAP"
-      mcc="238"
-      mnc="02"
-      apn="xcap"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="3 Danmark"
-      mcc="238"
-      mnc="06"
-      apn="data.tre.dk"
-      mmsc="http://mms.3.dk/"
-      mmsproxy="mmsproxy.3.dk"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Telia Internet"
-      mcc="238"
-      mnc="20"
-      apn="www.internet.mtelia.dk"
-      type="default,supl"
-  />
-
-  <apn carrier="Telia MMS"
-      mcc="238"
-      mnc="20"
-      apn="www.mms.mtelia.dk"
-      mmsc="http://mms.telia.dk"
-      mmsproxy="193.209.134.131"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telia Internet"
-      mcc="238"
-      mnc="30"
-      apn="www.internet.mtelia.dk"
-      type="default,supl"
-  />
-
-  <apn carrier="Telia MMS"
-      mcc="238"
-      mnc="30"
-      apn="www.mms.mtelia.dk"
-      mmsc="http://mms.telia.dk"
-      mmsproxy="193.209.134.131"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="238"
-      mnc="77"
-      apn="Internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Telenor MMS"
-      mcc="238"
-      mnc="77"
-      apn="telenor"
-      mmsc="http://mms.telenor.dk"
-      mmsproxy="212.88.64.8"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telia MMS"
-      mcc="240"
-      mnc="01"
-      apn="mms.telia.se"
-      mmsc="http://mmss/"
-      mmsproxy="193.209.134.132"
-      mmsport="8080"
-      type="mms"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Telia Online"
-      mcc="240"
-      mnc="01"
-      apn="online.telia.se"
-      type="default,supl"
-  />
-
-  <apn carrier="IMS"
-      mcc="240"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="hos"
-      mcc="240"
-      mnc="01"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Halebop Internet"
-      mcc="240"
-      mnc="017"
-      apn="halebop.telia.se"
-      type="default,supl"
-  />
-
-  <apn carrier="Halebop MMS"
-      mcc="240"
-      mnc="017"
-      apn="mms.telia.se"
-      user="mms"
-      password="telia"
-      mmsc="http://mmss"
-      mmsproxy="193.209.134.132"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="3"
-      mcc="240"
-      mnc="02"
-      apn="data.tre.se"
-      mmsc="http://mms.tre.se"
-      mmsproxy="mmsproxy.tre.se"
-      mmsport="8799"
-      type="default,supl,mms"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="ims"
-      mcc="240"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="services"
-      mcc="240"
-      mnc="02"
-      apn="services"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="services(wifi)"
-      mcc="240"
-      mnc="02"
-      apn="services"
-      type="xcap,mms"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="Telenor Mobilsurf"
-      mcc="240"
-      mnc="04"
-      apn="services.telenor.se"
-      proxy="172.30.253.241"
-      port="8799"
-      type="default,supl"
-  />
-
-  <apn carrier="Telenor MMS"
-      mcc="240"
-      mnc="04"
-      apn="services.telenor.se"
-      mmsc="http://mms"
-      mmsproxy="172.30.253.241"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Telia MMS"
-      mcc="240"
-      mnc="05"
-      apn="mms.telia.se"
-      mmsc="http://mmss"
-      mmsproxy="193.209.134.132"
-      mmsport="80"
-      type="mms"
-      mvno_match_data="Telia"
-      mvno_type="spn"
-  />
-
-  <apn carrier="Telia"
-      mcc="240"
-      mnc="05"
-      apn="online.telia.se"
-      type="default,supl"
-      mvno_match_data="Telia"
-      mvno_type="spn"
-  />
-
-  <apn carrier="IMS"
-      mcc="240"
-      mnc="05"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="hos"
-      mcc="240"
-      mnc="05"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Telenor MMS"
-      mcc="240"
-      mnc="06"
-      apn="services.telenor.se"
-      mmsc="http://mms"
-      mmsproxy="173.30.253.241"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Mobilsurf"
-      mcc="240"
-      mnc="06"
-      apn="services.telenor.se"
-      proxy="173.30.253.241"
-      port="8799"
-      type="default,supl"
-  />
-
-  <apn carrier="Tele2"
-      mcc="240"
-      mnc="07"
-      apn="4g.tele2.se"
-      mmsc="http://mmsc.tele2.se"
-      mmsproxy="130.244.202.30"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="240"
-      mnc="07"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Telenor Mobilsurf"
-      mcc="240"
-      mnc="08"
-      apn="services.telenor.se"
-      proxy="172.30.253.241"
-      port="8799"
-      type="default,supl"
-  />
-
-  <apn carrier="Telenor MMS"
-      mcc="240"
-      mnc="08"
-      apn="services.telenor.se"
-      mmsc="http://mms"
-      mmsproxy="172.30.253.241"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Telenor MMS"
-      mcc="240"
-      mnc="09"
-      apn="services.telenor.se"
-      mmsc="http://mms"
-      mmsproxy="173.30.253.241"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TelenorMobilsurf"
-      mcc="240"
-      mnc="09"
-      apn="services.telenor.se"
-      proxy="173.30.253.241"
-      port="8799"
-      type="default,supl"
-  />
-
-  <apn carrier="Spring data"
-      mcc="240"
-      mnc="10"
-      apn="data.springmobil.se"
-      type="default,supl"
-  />
-
-  <apn carrier="Spring MMS"
-      mcc="240"
-      mnc="10"
-      apn="mms.springmobil.se"
-      mmsc="http://mms.springmobil.se"
-      mmsproxy="213.88.184.37"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="240"
-      mnc="99"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Telenor MMS"
-      mcc="242"
-      mnc="01"
-      apn="telenor.mms"
-      mmsc="http://mmsc/"
-      mmsproxy="10.10.10.11"
-      mmsport="8080"
-      type="mms"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Telenor Internett"
-      mcc="242"
-      mnc="01"
-      apn="telenor"
-      type="default,supl"
-  />
-
-  <apn carrier="IMS"
-      mcc="242"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="hos"
-      mcc="242"
-      mnc="01"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Telia MMS"
-      mcc="242"
-      mnc="02"
-      apn="mms"
-      mmsc="http://mm/"
-      mmsproxy="212.169.66.4"
-      mmsport="8080"
-      type="mms"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="NetCom Internett"
-      mcc="242"
-      mnc="02"
-      apn="netcom"
-      proxy="10.254.254.10"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="IMS"
-      mcc="242"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="HOS"
-      mcc="242"
-      mnc="02"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Tele2 Internett"
-      mcc="242"
-      mnc="04"
-      apn="internet.tele2.no"
-      type="default,supl"
-  />
-
-  <apn carrier="Tele2 MMS"
-      mcc="242"
-      mnc="04"
-      apn="internet.tele2.no"
-      mmsc="http://mmsc.tele2.no"
-      mmsproxy="193.12.40.14"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="OneCall Internet"
-      mcc="242"
-      mnc="05"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="OneCall MMS"
-      mcc="242"
-      mnc="05"
-      apn="mms"
-      mmsc="http://mms.nwn.no"
-      mmsproxy="188.149.250.10"
-      mmsport="80"
-      type="mms"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="IMS"
-      mcc="242"
-      mnc="05"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="HOS"
-      mcc="242"
-      mnc="05"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="DNA Internet"
-      mcc="244"
-      mnc="03"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="DNA MMS"
-      mcc="244"
-      mnc="03"
-      apn="mms"
-      user="dna"
-      password="mms"
-      mmsc="http://mmsc.dnafinland.fi/"
-      mmsproxy="10.1.1.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="DNA Internet"
-      mcc="244"
-      mnc="04"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="DNA MMS"
-      mcc="244"
-      mnc="04"
-      apn="mms"
-      user="dna"
-      password="mms"
-      mmsc="http://mmsc.dnafinland.fi/"
-      mmsproxy="10.1.1.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Elisa Internet"
-      mcc="244"
-      mnc="05"
-      apn="internet"
-      type="default,supl"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Elisa MMS"
-      mcc="244"
-      mnc="05"
-      apn="mms"
-      mmsc="http://mms.elisa.fi"
-      mmsproxy="213.161.41.57"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Elisa IMS"
-      mcc="244"
-      mnc="05"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Elisa XCAP"
-      mcc="244"
-      mnc="05"
-      apn="xcap"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Elisa XCAP over WIFI"
-      mcc="244"
-      mnc="05"
-      apn="xcap"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="Elisa XCAP over WIFI"
-      mcc="244"
-      mnc="05"
-      apn="xcap"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="NSN Internet"
-      mcc="244"
-      mnc="09"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="TDC Internet"
-      mcc="244"
-      mnc="10"
-      apn="internet.song.fi"
-      user="song@internet"
-      password="songnet"
-      type="default,supl"
-  />
-
-  <apn carrier="TDC MMS"
-      mcc="244"
-      mnc="10"
-      apn="mms.song.fi"
-      mmsc="http://mms.song.fi"
-      mmsproxy="213.161.41.58"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="DNA Internet"
-      mcc="244"
-      mnc="12"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="DNA MMS"
-      mcc="244"
-      mnc="12"
-      apn="mms"
-      user="dna"
-      password="mms"
-      mmsc="http://mmsc.dnafinland.fi/"
-      mmsproxy="10.1.1.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="244"
-      mnc="12"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="hos"
-      mcc="244"
-      mnc="12"
-      apn="hos"
-      type="xcap"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="DNA Internet"
-      mcc="244"
-      mnc="13"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="DNA MMS"
-      mcc="244"
-      mnc="13"
-      apn="mms"
-      user="dna"
-      password="mms"
-      mmsc="http://mmsc.dnafinland.fi/"
-      mmsproxy="10.1.1.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Saunalahti Wap"
-      mcc="244"
-      mnc="21"
-      apn="wap.saunalahti.fi"
-      type="default,supl"
-  />
-
-  <apn carrier="Saunalahti MMS"
-      mcc="244"
-      mnc="21"
-      apn="mms.saunalahti.fi"
-      mmsc="http://mms.saunalahti.fi:8002/"
-      mmsproxy="62.142.4.197"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="DNA Internet"
-      mcc="244"
-      mnc="30"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="DNA MMS"
-      mcc="244"
-      mnc="30"
-      apn="mms"
-      user="dna"
-      password="mms"
-      mmsc="http://mmsc.dnafinland.fi/"
-      mmsproxy="10.1.1.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="TeliaSonera Internet"
-      mcc="244"
-      mnc="91"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="TeliaSonera MMS"
-      mcc="244"
-      mnc="91"
-      apn="wap.sonera.net"
-      mmsc="http://mms.sonera.fi:8002"
-      mmsproxy="195.156.25.33"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Omnitel MMS"
-      mcc="246"
-      mnc="01"
-      apn="gprs.mms.lt"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.omnitel.net:8002/"
-      mmsproxy="194.176.32.149"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Omnitel Internet"
-      mcc="246"
-      mnc="01"
-      apn="omnitel"
-      user="omni"
-      password="omni"
-      type="default,supl"
-  />
-
-  <apn carrier="Omnitel IMS"
-      mcc="246"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Bite LT Internet"
-      mcc="246"
-      mnc="02"
-      apn="banga"
-      type="default,supl"
-  />
-
-  <apn carrier="Bite LT MMS"
-      mcc="246"
-      mnc="02"
-      apn="mms"
-      mmsc="http://mmsc"
-      mmsproxy="192.168.150.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Tele2 Internet LT"
-      mcc="246"
-      mnc="03"
-      apn="internet.tele2.lt"
-      proxy="130.244.196.90"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="Tele2 MMS LT"
-      mcc="246"
-      mnc="03"
-      apn="mms.tele2.lt"
-      mmsc="http://mmsc.tele2.lt/"
-      mmsproxy="193.12.40.29"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="LMT Internet"
-      mcc="247"
-      mnc="01"
-      apn="internet.lmt.lv"
-      user="lmt"
-      password="lmt"
-      type="default,supl"
-  />
-
-  <apn carrier="LMT MMS"
-      mcc="247"
-      mnc="01"
-      apn="mms.lmt.lv"
-      mmsc="http://mmsc.lmt.lv/mmsc"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Tele2 Internet LV"
-      mcc="247"
-      mnc="02"
-      apn="internet.tele2.lv"
-      user="wap"
-      password="wap"
-      proxy="130.244.196.90"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="Tele2 MMS LV"
-      mcc="247"
-      mnc="02"
-      apn="mms.tele2.lv"
-      user="wap"
-      password="wap"
-      mmsc="http://mmsc.tele2.lv/"
-      mmsproxy="193.12.40.38"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Bite LV Internet"
-      mcc="247"
-      mnc="05"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Bite MMS"
-      mcc="247"
-      mnc="05"
-      apn="mms"
-      mmsc="http://mmsc"
-      mmsproxy="192.168.150.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="EMT Internet"
-      mcc="248"
-      mnc="01"
-      apn="internet.emt.ee"
-      type="default,supl"
-  />
-
-  <apn carrier="EMT MMS"
-      mcc="248"
-      mnc="01"
-      apn="mms.emt.ee"
-      mmsc="http://mms.emt.ee/servlets/mms"
-      mmsproxy="217.71.32.82"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="EMT IMS"
-      mcc="248"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="ELISA_GPRS"
-      mcc="248"
-      mnc="02"
-      apn="wap"
-      proxy="194.204.2.6"
-      port="8000"
-      type="wap"
-  />
-
-  <apn carrier="ELISA MMS"
-      mcc="248"
-      mnc="02"
-      apn="mms"
-      mmsc="http://194.204.2.10"
-      mmsproxy="194.204.2.6"
-      mmsport="8000"
-      type="mms"
-  />
-
-  <apn carrier="Tele2 Internet"
-      mcc="248"
-      mnc="03"
-      apn="internet.tele2.ee"
-      type="default,supl"
-  />
-
-  <apn carrier="Tele2 MMS"
-      mcc="248"
-      mnc="03"
-      apn="mms.tele2.ee"
-      mmsc="http://mmsc.tele2.ee"
-      mmsproxy="193.12.40.6"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="МТС-интернет"
-      mcc="250"
-      mnc="01"
-      apn="internet.mts.ru"
-      user="mts"
-      password="mts"
-      type="default,supl"
-      authtype="1"
-  />
-
-  <apn carrier="МТС Центр MMS"
-      mcc="250"
-      mnc="01"
-      apn="mms.mts.ru"
-      user="mts"
-      password="mts"
-      mmsc="http://mmsc"
-      mmsproxy="192.168.192.192"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="250"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Megafon internet"
-      mcc="250"
-      mnc="02"
-      apn="internet"
-      user="gdata"
-      password="gdata"
-      type="default,supl"
-  />
-
-  <apn carrier="Megafon MMS"
-      mcc="250"
-      mnc="02"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://mmsc:8002"
-      mmsproxy="10.10.10.10"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="250"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Megafon XCAP1"
-      mcc="250"
-      mnc="02"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="NCC"
-      mcc="250"
-      mnc="03"
-      apn="mms"
-      mmsc="http://10.0.3.50"
-      mmsproxy="10.0.3.20"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="МТС-интернет"
-      mcc="250"
-      mnc="04"
-      apn="internet.mts.ru"
-      user="mts"
-      password="mts"
-      type="default,supl"
-  />
-
-  <apn carrier="МТС Центр MMS"
-      mcc="250"
-      mnc="04"
-      apn="mms.mts.ru"
-      user="mts"
-      password="mts"
-      mmsc="http://mmsc"
-      mmsproxy="192.168.192.192"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="МТС-интернет"
-      mcc="250"
-      mnc="05"
-      apn="internet.mts.ru"
-      user="mts"
-      password="mts"
-      type="default,supl"
-  />
-
-  <apn carrier="МТС Центр MMS"
-      mcc="250"
-      mnc="05"
-      apn="mms.mts.ru"
-      user="mts"
-      password="mts"
-      mmsc="http://mmsc"
-      mmsproxy="192.168.192.192"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="internet"
-      mcc="250"
-      mnc="07"
-      apn="internet.smarts.ru"
-      user="any"
-      password="any"
-      type="default,supl"
-  />
-  <apn carrier="internet"
-      mcc="730"
-      mnc="08"
-      apn="movil.vtr.com"
-      user="vtrmovil"
-      password="vtrmovil"
-      type="default"
-      authenticationtype="CHAP"
-      protocol="IPv4"
-      roaming_protocol="IPv4"
-  />
-  <apn carrier="Internet WOM"
-      mcc="730"
-      mnc="09"
-      apn="internet"
-      type="default"
-      authenticationtype="None"
-      protocol="IPv4"
-      roaming_protocol="IPv4"
-  />
-  
-
-  <apn carrier="mms"
-      mcc="250"
-      mnc="07"
-      apn="mms.smarts.ru"
-      user="wap"
-      password="wap"
-      mmsc="http://172.24.120.135/mms/wapenc"
-      mmsproxy="172.24.128.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="МТС-интернет"
-      mcc="250"
-      mnc="10"
-      apn="internet.mts.ru"
-      user="mts"
-      password="mts"
-      type="default,supl"
-  />
-
-  <apn carrier="МТС Центр MMS"
-      mcc="250"
-      mnc="10"
-      apn="mms.mts.ru"
-      user="mts"
-      password="mts"
-      mmsc="http://mmsc"
-      mmsproxy="192.168.192.192"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Beeline internet"
-      mcc="250"
-      mnc="11"
-      apn="internet.beeline.ru"
-      user="beeline"
-      password="beeline"
-      type="default,supl"
-  />
-
-  <apn carrier="Beeline MMS"
-      mcc="250"
-      mnc="11"
-      apn="mms.beeline.ru"
-      user="beeline"
-      password="beeline"
-      mmsc="http://mms/"
-      mmsproxy="192.168.94.23"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="250"
-      mnc="011"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Megafon XCAP2"
-      mcc="250"
-      mnc="011"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="GPRS-Internet"
-      mcc="250"
-      mnc="12"
-      apn="inet.bwc.ru"
-      user="bwc"
-      password="bwc"
-      type="default,supl"
-  />
-
-  <apn carrier="BWC MMS"
-      mcc="250"
-      mnc="12"
-      apn="mms.bwc.ru"
-      user="bwc"
-      password="bwc"
-      mmsc="http://mmsc/mms"
-      mmsproxy="10.10.17.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="МТС-интернет"
-      mcc="250"
-      mnc="13"
-      apn="internet.mts.ru"
-      user="mts"
-      password="mts"
-      type="default,supl"
-  />
-
-  <apn carrier="МТС Центр MMS"
-      mcc="250"
-      mnc="13"
-      apn="mms.mts.ru"
-      user="mts"
-      password="mts"
-      mmsc="http://mmsc"
-      mmsproxy="192.168.192.192"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="MMS"
-      mcc="250"
-      mnc="16"
-      apn="mms.ntc"
-      mmsc="http://mmsc.vntc.ru/was"
-      mmsproxy="80.243.64.68"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Internet"
-      mcc="250"
-      mnc="17"
-      apn="internet.usi.ru"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS"
-      mcc="250"
-      mnc="17"
-      apn="mms.usi.ru"
-      mmsc="http://mms"
-      mmsproxy="192.168.168.192"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="TELE2"
-      mcc="250"
-      mnc="20"
-      apn="internet.tele2.ru"
-      type="default,supl"
-  />
-
-  <apn carrier="XCAP"
-      mcc="250"
-      mnc="20"
-      apn="hos"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="TELE2 Wap"
-      mcc="250"
-      mnc="20"
-      apn="wap.tele2.ru"
-      proxy="130.244.196.90"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="TELE2 MMS"
-      mcc="250"
-      mnc="20"
-      apn="mms.tele2.ru"
-      mmsc="http://mmsc.tele2.ru"
-      mmsproxy="193.12.40.65"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="250"
-      mnc="20"
-      apn="ims.tele2.ru"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="XCAP"
-      mcc="250"
-      mnc="20"
-      apn="hos"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="МТС-интернет"
-      mcc="250"
-      mnc="39"
-      apn="internet.mts.ru"
-      user="mts"
-      password="mts"
-      type="default,supl"
-  />
-
-  <apn carrier="МТС Центр MMS"
-      mcc="250"
-      mnc="39"
-      apn="mms.mts.ru"
-      user="mts"
-      password="mts"
-      mmsc="http://mmsc"
-      mmsproxy="192.168.192.192"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Beeline internet"
-      mcc="250"
-      mnc="44"
-      apn="internet.beeline.ru"
-      user="beeline"
-      password="beeline"
-      type="default,supl"
-  />
-
-  <apn carrier="Beeline MMS"
-      mcc="250"
-      mnc="44"
-      apn="mms.beeline.ru"
-      user="beeline"
-      password="beeline"
-      mmsc="http://mms/"
-      mmsproxy="192.168.94.23"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="МТС-интернет"
-      mcc="250"
-      mnc="92"
-      apn="internet.mts.ru"
-      user="mts"
-      password="mts"
-      type="default,supl"
-  />
-
-  <apn carrier="МТС Центр MMS"
-      mcc="250"
-      mnc="92"
-      apn="mms.mts.ru"
-      user="mts"
-      password="mts"
-      mmsc="http://mmsc"
-      mmsproxy="192.168.192.192"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="МТС-интернет"
-      mcc="250"
-      mnc="93"
-      apn="internet.mts.ru"
-      user="mts"
-      password="mts"
-      type="default,supl"
-  />
-
-  <apn carrier="МТС Центр MMS"
-      mcc="250"
-      mnc="93"
-      apn="mms.mts.ru"
-      user="mts"
-      password="mts"
-      mmsc="http://mmsc"
-      mmsproxy="192.168.192.192"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Beeline internet"
-      mcc="250"
-      mnc="99"
-      apn="internet.beeline.ru"
-      user="beeline"
-      password="beeline"
-      type="default,supl"
-  />
-
-  <apn carrier="Beeline MMS"
-      mcc="250"
-      mnc="99"
-      apn="mms.beeline.ru"
-      user="beeline"
-      password="beeline"
-      mmsc="http://mms/"
-      mmsproxy="192.168.94.23"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Beeline"
-      mcc="250"
-      mnc="99"
-      apn="ims.beeline.ru"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Beeline XCAP"
-      mcc="250"
-      mnc="99"
-      apn="internet.beeline.ru"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="MTS-MMS"
-      mcc="255"
-      mnc="01"
-      apn="mms"
-      mmsc="http://mmsc:8002"
-      mmsproxy="192.168.10.10"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="MTS-internet"
-      mcc="255"
-      mnc="01"
-      apn="www.mts.com.ua"
-      type="default,supl"
-  />
-
-  <apn carrier="Beeline-internet"
-      mcc="255"
-      mnc="02"
-      apn="internet.beeline.ua"
-      type="default,supl"
-  />
-
-  <apn carrier="Beeline-MMS"
-      mcc="255"
-      mnc="02"
-      apn="mms.beeline.ua"
-      mmsc="http://mms/"
-      mmsproxy="10.11.8.18"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Kyivstar MMS"
-      mcc="255"
-      mnc="03"
-      apn="mms.kyivstar.net"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.kyivstar.net"
-      mmsproxy="10.10.10.10"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Kyivstar-internet"
-      mcc="255"
-      mnc="03"
-      apn="www.kyivstar.net"
-      user="igprs"
-      password="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="life:) internet"
-      mcc="255"
-      mnc="06"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="life:) MMS"
-      mcc="255"
-      mnc="06"
-      apn="mms"
-      mmsc="http://mms.life.com.ua/cmmsc/post"
-      mmsproxy="212.58.162.230"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Utel"
-      mcc="255"
-      mnc="07"
-      apn="3g.utel.ua"
-      mmsc="http://10.212.1.4/mms/wapenc"
-      mmsproxy="10.212.3.148"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Orange internet"
-      mcc="259"
-      mnc="01"
-      apn="wap.orange.md"
-      type="default,supl"
-  />
-
-  <apn carrier="Orange MMS"
-      mcc="259"
-      mnc="01"
-      apn="mms.orange.md"
-      mmsc="http://mms/mms"
-      mmsproxy="192.168.127.125"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="Moldcell WAP"
-      mcc="259"
-      mnc="02"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Moldcell MMS"
-      mcc="259"
-      mnc="02"
-      apn="mms"
-      mmsc="http://mms.moldcell.md/cmmsc/post"
-      mmsproxy="10.0.10.10"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="Eventis WAP"
-      mcc="259"
-      mnc="04"
-      apn="internet.md"
-      type="default,supl"
-  />
-
-  <apn carrier="Eventis MMS"
-      mcc="259"
-      mnc="04"
-      apn="mms.md"
-      mmsc="http://mmsc:8002/"
-      mmsproxy="10.10.10.10"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="Plus Internet"
-      mcc="260"
-      mnc="01"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Plus MMS"
-      mcc="260"
-      mnc="01"
-      apn="mms.plusgsm.pl"
-      mmsc="http://mms.plusgsm.pl:8002"
-      mmsproxy="212.2.96.16"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="ERA Internet"
-      mcc="260"
-      mnc="02"
-      apn="erainternet"
-      user="erainternet"
-      password="erainternet"
-      type="default,supl"
-  />
-
-  <apn carrier="heyahinternet"
-      mcc="260"
-      mnc="02"
-      apn="heyah.pl"
-      user="heyah"
-      password="heyah"
-      type="default,supl"
-  />
-
-  <apn carrier="T-mobile.pl"
-      mcc="260"
-      mnc="02"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="HOS"
-      mcc="260"
-      mnc="02"
-      apn="hos"
-      mmsc="http://mms/servlets/mms"
-      mmsproxy="213.158.194.226"
-      mmsport="8080"
-      type="mms,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="HOS"
-      mcc="260"
-      mnc="02"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="HOS"
-      mcc="260"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <!-- Poland 2.5g or 3g -->
-  <apn carrier="Internet"
-      mcc="260"
-      mnc="03"
-      apn="internet"
-      user="internet"
-      password="internet"
-      type="default"
-  />
-
-  <apn carrier="Internet CSD"
-      mcc="260"
-      mnc="03"
-      apn="Internet"
-      user="internet"
-      password="internet"
-      type="default"
-  />
-
-  <apn carrier="Orange Internet"
-      mcc="260"
-      mnc="03"
-      apn="Internet"
-      user="internet"
-      password="internet"
-      authtype="1"
-      type="default,supl"
-  />
-
-  <!-- Poland MMS -->
-  <apn carrier="Orange MMS"
-      mcc="260"
-      mnc="03"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.orange.pl"
-      mmsproxy="192.168.6.104"
-      mmsport="8080"
-      authtype="1"
-      type="mms"
-  />
-
-  <apn carrier="Orange IMS"
-      mcc="260"
-      mnc="03"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="P4 Internet"
-      mcc="260"
-      mnc="06"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="P4 MMS"
-      mcc="260"
-      mnc="06"
-      apn="mms"
-      mmsc="http://10.10.28.164/mms/wapenc"
-      mmsproxy="10.10.25.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="P4 IMS"
-      mcc="260"
-      mnc="06"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="xcap"
-      mcc="260"
-      mnc="06"
-      apn="xcap"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="T-Mobile D"
-      mcc="262"
-      mnc="01"
-      apn="internet.telekom"
-      user="t-mobile"
-      password="tm"
-      server="*"
-      mmsc="http://mms.t-mobile.de/servlets/mms"
-      mmsproxy="172.28.23.131"
-      mmsport="8008"
-      type="default,supl,mms,xcap"
-  />
-
-  <apn carrier="T-Mobile D"
-      mcc="262"
-      mnc="01"
-      apn="internet.telekom"
-      user="t-mobile"
-      password="tm"
-      server="*"
-      mmsc="http://mms.t-mobile.de/servlets/mms"
-      mmsproxy="172.28.23.131"
-      mmsport="8008"
-      type="xcap"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="Telekom Deutschland"
-      mcc="262"
-      mnc="01"
-      apn="ims"
-      type="ia,ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Telekom Deutschland XCAP"
-      mcc="262"
-      mnc="01"
-      apn="internet.telekom"
-      type="xcap"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="TMO DTAG XCAP"
-      mcc="262"
-      mnc="01"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="Vodafone DE-MMS"
-      mcc="262"
-      mnc="02"
-      apn="event.vodafone.de"
-      mmsc="http://139.7.24.1/servlets/mms"
-      mmsproxy="139.7.29.17"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone DE"
-      mcc="262"
-      mnc="02"
-      apn="web.vodafone.de"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="Vodafone DE IMS"
-      mcc="262"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Vodafone DE"
-      mcc="262"
-      mnc="02"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="E-Plus Web GPRS"
-      mcc="262"
-      mnc="03"
-      apn="internet.eplus.de"
-      user="eplus"
-      password="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="E-Plus MMS"
-      mcc="262"
-      mnc="03"
-      apn="mms.eplus.de"
-      user="mms"
-      password="eplus"
-      mmsc="http://mms/eplus/"
-      mmsproxy="212.23.97.153"
-      mmsport="5080"
-      type="mms"
-  />
-
-  <apn carrier="E-Plus WAP GPRS"
-      mcc="262"
-      mnc="03"
-      apn="wap.eplus.de"
-      proxy="212.23.97.9"
-      port="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Vodafone DE-MMS"
-      mcc="262"
-      mnc="04"
-      apn="event.vodafone.de"
-      mmsc="http://139.7.24.1/servlets/mms"
-      mmsproxy="139.7.29.17"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone DE"
-      mcc="262"
-      mnc="04"
-      apn="web.vodafone.de"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="E-Plus Web GPRS"
-      mcc="262"
-      mnc="05"
-      apn="internet.eplus.de"
-      user="eplus"
-      password="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="E-Plus MMS"
-      mcc="262"
-      mnc="05"
-      apn="mms.eplus.de"
-      user="mms"
-      password="eplus"
-      mmsc="http://mms/eplus/"
-      mmsproxy="212.23.97.153"
-      mmsport="5080"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile Internet"
-      mcc="262"
-      mnc="06"
-      apn="internet.t-mobile"
-      user="t-mobile"
-      password="tm"
-      mmsc="http://mms.t-mobile.de/servlets/mms"
-      mmsproxy="172.28.23.131"
-      mmsport="8008"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Telekom Deutschland XCAP"
-      mcc="262"
-      mnc="06"
-      apn="internet.telekom"
-      type="xcap"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="o2"
-      mcc="262"
-      mnc="07"
-      apn="internet"
-      mmsc="http://10.81.0.7:8002"
-      mmsproxy="82.113.100.5"
-      mmsport="8080"
-      type="default,supl,mms,xcap"
-  />
-
-  <apn carrier="Telefonica IMS"
-      mcc="262"
-      mnc="07"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="o2"
-      mcc="262"
-      mnc="08"
-      apn="internet"
-      mmsc="http://10.81.0.7:8002"
-      mmsproxy="82.113.100.5"
-      mmsport="8080"
-      type="default,supl,mms,xcap"
-  />
-
-  <apn carrier="Vodafone DE-MMS"
-      mcc="262"
-      mnc="09"
-      apn="event.vodafone.de"
-      mmsc="http://139.7.24.1/servlets/mms"
-      mmsproxy="139.7.29.17"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone DE"
-      mcc="262"
-      mnc="09"
-      apn="web.vodafone.de"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="o2"
-      mcc="262"
-      mnc="11"
-      apn="internet"
-      mmsc="http://10.81.0.7:8002"
-      mmsproxy="82.113.100.5"
-      mmsport="8080"
-      type="default,supl,mms,xcap"
-  />
-
-  <apn carrier="Telekom Deutschland XCAP"
-      mcc="262"
-      mnc="78"
-      apn="internet.telekom"
-      type="xcap"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="262"
-      mnc="80"
-      apn="ims01.epg78.ericsson.se"
-      type="ims"
-      protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Internet"
-      mcc="262"
-      mnc="80"
-      apn="apn01.epg78.ericsson.se"
-      type="default"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="Vodafone PT-MMS"
-      mcc="268"
-      mnc="01"
-      apn="net2.vodafone.pt"
-      user="vodafone"
-      password="vodafone"
-      mmsc="http://mms.vodafone.pt/servlets/mms"
-      mmsproxy="iproxy.vodafone.pt"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone PT"
-      mcc="268"
-      mnc="01"
-      apn="net2.vodafone.pt"
-      user="vodafone"
-      password="vodafone"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="ims"
-      mcc="268"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Vodafone IMS"
-      mcc="268"
-      mnc="01"
-      apn="ims"
-      type="ims"
-  />
-
-  <apn carrier="Vodafone Net2"
-      mcc="268"
-      mnc="01"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="ZON Internet"
-      mcc="268"
-      mnc="01"
-      apn=""
-      type="ia"
-      mvno_match_data="ZON"
-      mvno_type="spn"
-  />
-
-
-  <apn carrier="Optimus"
-      mcc="268"
-      mnc="03"
-      apn="umts"
-      mmsc="http://mmsc:10021/mmsc"
-      mmsproxy="62.169.66.5"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="PortalOptimus"
-      mcc="268"
-      mnc="03"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="tmn internet"
-      mcc="268"
-      mnc="06"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="mms tmn"
-      mcc="268"
-      mnc="06"
-      apn="mmsc.tmn.pt"
-      user="tmn"
-      password="tmnnet"
-      mmsc="http://mmsc/"
-      mmsproxy="10.111.2.16"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="tmn internet"
-      mcc="268"
-      mnc="06"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="Vodafone IE"
-      mcc="272"
-      mnc="01"
-      apn="live.vodafone.com"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="Vodafone IE-MMS"
-      mcc="272"
-      mnc="01"
-      apn="mms.vodafone.net"
-      mmsc="http://www.vodafone.ie/mms"
-      mmsproxy="10.24.59.200"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="O2 Ireland"
-      mcc="272"
-      mnc="02"
-      apn="internet"
-      mmsc="http://mmsc.mms.o2.ie:8002"
-      mmsproxy="62.40.32.40"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Meteor Data"
-      mcc="272"
-      mnc="03"
-      apn="data.mymeteor.ie"
-      type="default,supl"
-  />
-
-  <apn carrier="Meteor MMS"
-      mcc="272"
-      mnc="03"
-      apn="mms.mymeteor.ie"
-      user="my"
-      password="wap"
-      proxy="10.85.85.85"
-      port="8799"
-      mmsc="http://mms.mymeteor.ie"
-      mmsproxy="10.85.85.85"
-      mmsport="8799"
-      type="mms"
-  />
-  
-  <apn carrier="eMobile WAP"
-      mcc="272"
-      mnc="03"
-      apn="mms.eircom.ie"
-      proxy="10.85.85.85"
-      type="default,supl"
-  />
-
-  <apn carrier="eMobile MMS"
-      mcc="272"
-      mnc="03"
-      apn="mms.eircom.ie"
-      mmsc="http://mms.eircom.ie"
-      mmsproxy="10.85.85.85"
-      type="mms"
-  />
-
-  <apn carrier="3 Ireland"
-      mcc="272"
-      mnc="05"
-      apn="3ireland.ie"
-      mmsc="http://mms.um.3ireland.ie:10021/mmsc"
-      mmsproxy="mms.3ireland.ie"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Tesco Mobile"
-      mcc="272"
-      mnc="11"
-      apn="Tescomobile.liffeytelecom.com"
-	  proxy="10.1.11.19"
-	  port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="Tesco Mobile"
-      mcc="272"
-      mnc="11"
-      apn="Tescomobile.liffeytelecom.com"
-	  mmsc="http://mmc1/servlets/mms"
-      mmsproxy="10.1.11.19"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Siminn Internet"
-      mcc="274"
-      mnc="01"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Siminn MMS"
-      mcc="274"
-      mnc="01"
-      apn="mms.simi.is"
-      mmsc="http://mms.simi.is/servlets/mms"
-      mmsproxy="213.167.138.200"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Internet"
-      mcc="274"
-      mnc="02"
-      apn="gprs.is"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="274"
-      mnc="02"
-      apn="mms.gprs.is"
-      mmsc="http://mmsc.vodafone.is"
-      mmsproxy="10.22.0.10"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="MMS Nova"
-      mcc="274"
-      mnc="11"
-      apn="mms.nova.is"
-      mmsc="http://mmsc.nova.is"
-      mmsproxy="10.10.2.60"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Net Nova"
-      mcc="274"
-      mnc="11"
-      apn="net.nova.is"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone Internet"
-      mcc="278"
-      mnc="01"
-      apn="internet"
-      user="internet"
-      password="internet"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="278"
-      mnc="01"
-      apn="mms.vodafone.com.mt"
-      user="mms"
-      password="mms"
-      mmsc="http://mmsc.vodafone.com.mt/servlets/mms"
-      mmsproxy="10.12.0.3"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="M-Tel Internet"
-      mcc="284"
-      mnc="01"
-      apn="wap-gprs.mtel.bg"
-      type="default,supl"
-  />
-
-  <apn carrier="M-Tel MMS"
-      mcc="284"
-      mnc="01"
-      apn="mms-gprs.mtel.bg"
-      user="mtel"
-      password="mtel"
-      mmsc="http://mmsc"
-      mmsproxy="10.150.0.33"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Vivacom WAP"
-      mcc="284"
-      mnc="03"
-      apn="wap.vivacom.bg"
-      user="wap"
-      password="wap"
-      proxy="192.168.123.123"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="Vivacom MMS"
-      mcc="284"
-      mnc="03"
-      apn="mms.vivacom.bg"
-      user="mms"
-      password="mms"
-      mmsc="http://mmsc.vivacom.bg"
-      mmsproxy="192.168.123.123"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="GLOBUL WAP"
-      mcc="284"
-      mnc="05"
-      apn="globul"
-      user="globul"
-      password="globul"
-      proxy="192.168.88.11"
-      port="8004"
-      type="wap"
-  />
-
-  <apn carrier="GLOBUL MMS"
-      mcc="284"
-      mnc="05"
-      apn="mms.globul.bg"
-      user="mms"
-      password="mms"
-      mmsc="http://mmsc1.mms.globul.bg:8002"
-      mmsproxy="192.168.87.11"
-      mmsport="8004"
-      type="mms"
-  />
-
-  <apn carrier="Turkcell Internet"
-      mcc="286"
-      mnc="01"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Turkcell MMS"
-      mcc="286"
-      mnc="01"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.turkcell.com.tr/servlets/mms"
-      mmsproxy="212.252.169.217"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Turkcell VoLTE"
-      mcc="286"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Turkcell Xcap"
-      mcc="286"
-      mnc="01"
-      apn="xcap"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Vodafone Internet"
-      mcc="286"
-      mnc="02"
-      apn="internet"
-      user="vodafone"
-      password="vodafone"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="286"
-      mnc="02"
-      apn="mms"
-      user="vodafone"
-      password="vodafone"
-      mmsc="http://217.31.233.18:6001/MM1Servlet"
-      mmsproxy="217.31.233.18"
-      mmsport="9401"
-      type="mms"
-  />
-
- <apn carrier="Vodafone IMS"
-      mcc="286"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Vodafone Turkey Xcap"
-      mcc="286"
-      mnc="02"
-      apn="hos"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Avea Internet"
-      mcc="286"
-      mnc="03"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Avea MMS"
-      mcc="286"
-      mnc="03"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.avea.com.tr/servlets/mms"
-      mmsproxy="213.161.151.201"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Avea IMS"
-      mcc="286"
-      mnc="03"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Avea Xcap"
-      mcc="286"
-      mnc="03"
-      apn="web"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Si.mobil Internet"
-      mcc="293"
-      mnc="40"
-      apn="internet.simobil.si"
-      user="simobil"
-      password="internet"
-      proxy="80.95.224.17"
-      port="9090"
-      type="wap"
-  />
-
-  <apn carrier="Si.mobil MMS"
-      mcc="293"
-      mnc="40"
-      apn="mms.simobil.si"
-      user="simobil"
-      password="internet"
-      mmsc="http://mmc"
-      mmsproxy="80.95.224.46"
-      mmsport="9201"
-      type="mms"
-  />
-  
-  <apn carrier="TUS WAP"
-      mcc="293"
-      mnc="70"
-      apn="internet.tusmobil.si"
-      user="tusmobil"
-      password="internet"
-      proxy="91.185.221.85"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="TUS MMS"
-      mcc="293"
-      mnc="70"
-      apn="mms.tusmobil.si"
-      user="tusmobil"
-      password="mms"
-      mmsc="http://mms.tusmobil.si:8002"
-      mmsproxy="91.185.221.85"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile MK"
-      mcc="294"
-      mnc="01"
-      apn="internet"
-      user="internet"
-      password="t-mobile"
-      type="default,supl"
-  />
-
-  <apn carrier="T-Mobile MK MMS"
-      mcc="294"
-      mnc="01"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.t-mobile.com.mk"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile MK Internet"
-      mcc="294"
-      mnc="01"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="ONE Internet"
-      mcc="294"
-      mnc="02"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="ONE MMS"
-      mcc="294"
-      mnc="02"
-      apn="mms"
-      mmsc="http://195.167.65.220:8002"
-      mmsproxy="10.10.10.20"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Vip"
-      mcc="294"
-      mnc="03"
-      apn="VIPOPERATOR"
-      user="VIPOPERATOR"
-      password="VIPOPERATOR"
-      proxy="78.40.0.1"
-      port="9201"
-      type="wap"
-  />
-
-  <apn carrier="Vip MMS"
-      mcc="294"
-      mnc="03"
-      apn="VIPOPERATOR.MMS"
-      user="VIPOPERATOR"
-      password="VIPOPERATOR"
-      mmsc="http://mmsc.vipoperator.com.mk"
-      mmsproxy="78.40.0.1"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Planet"
-      mcc="294"
-      mnc="31"
-      apn="internet"
-      user="mobitel"
-      password="internet"
-      proxy="213.229.249.40"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="Swisscom Services"
-      mcc="295"
-      mnc="01"
-      apn="gprs.swisscom.ch"
-      type="default,supl"
-      protocol="IP"
-  />
-
-  <apn carrier="ims"
-      mcc="295"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Swisscom XCAP"
-      mcc="295"
-      mnc="01"
-      apn="hos"
-      type="xcap"
-      protocol="IP"
-  />
-
-  <apn carrier="Swisscom Services"
-      mcc="295"
-      mnc="01"
-      apn="gprs.swisscom.ch"
-      type="default,supl"
-      protocol="IP"
-  />
-
-  <apn carrier="ims"
-      mcc="295"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Swisscom XCAP"
-      mcc="295"
-      mnc="01"
-      apn="hos"
-      type="xcap"
-      protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Telenor MNE internet"
-      mcc="297"
-      mnc="01"
-      apn="flat"
-      user="gprs"
-      password="gprs"
-      proxy="192.168.246.5"
-      port="8080"
-      type="default,supl"
-  />
-  
-  <apn carrier="Telenor MNE MMS"
-      mcc="297"
-      mnc="01"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://mm.vor.telenor.me"
-      mmsproxy="192.168.246.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile CG MMS"
-      mcc="297"
-      mnc="02"
-      apn="mms"
-      user="38267"
-      password="38267"
-      mmsc="http://192.168.180.100/servlets/mms"
-      mmsproxy="10.0.5.19"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile CG"
-      mcc="297"
-      mnc="02"
-      apn="tmcg-wnw"
-      user="38267"
-      password="38267"
-      type="default,supl"
-  />
-
-  <apn carrier="T-Mobile"
-      mcc="297"
-      mnc="02"
-      apn=""
-      type="ia"
-  />
-
-  <apn carrier="Mtel WAP"
-      mcc="297"
-      mnc="03"
-      apn="mtelwap"
-      user="wap"
-      password="068"
-      proxy="172.25.25.23"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="Mtel MMS"
-      mcc="297"
-      mnc="03"
-      apn="mtelmms"
-      user="mms"
-      password="068"
-      mmsc="http://mmsmtel.com/mms/wapenc"
-      mmsproxy="172.17.85.131"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="TELUS SP"
-      mcc="302"
-      mnc="220"
-      apn="sp.telus.com"
-      mmsc="http://aliasredirect.net/proxy/mmsc"
-      mmsproxy="74.49.0.18"
-      mmsport="80"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Koodo SP"
-      mcc="302"
-      mnc="220"
-      apn="sp.koodo.com"
-      mmsc="http://aliasredirect.net/proxy/koodo/mmsc"
-      mmsproxy="74.49.0.18"
-      mmsport="80"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="302"
-      mnc="220"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="TELUS SOS"
-      mcc="302"
-      mnc="220"
-      apn="sos"
-      type="emergency"
-      protocol="IPV6"
-      roaming_protocol="IPV4V6"
-      user_visible="false"
-  />
-
-  <apn carrier="TELUS Services"
-      mcc="302"
-      mnc="220"
-      apn="services.telus.com"
-      type="xcap"
-      protocol="IPV6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="302"
-      mnc="221"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="TELUS SOS"
-      mcc="302"
-      mnc="221"
-      apn="sos"
-      type="emergency"
-      protocol="IPV6"
-      roaming_protocol="IPV4V6"
-      user_visible="false"
-  />
-
-  <apn carrier="TELUS Services"
-      mcc="302"
-      mnc="221"
-      apn="services.telus.com"
-      type="xcap"
-      protocol="IPV6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="fido internet"
-      mcc="302"
-      mnc="370"
-      apn="ltemobile.apn"
-      user="fido"
-      password="fido"
-      type="default,supl"
-  />
-
-  <apn carrier="fido mms"
-      mcc="302"
-      mnc="370"
-      apn="mms.fido.ca"
-      mmsc="http://mms.fido.ca"
-      mmsproxy="205.151.11.13"
-      type="mms"
-  />
-
-  <apn carrier="Fido Tethering"
-      mcc="302"
-      mnc="370"
-      apn="isp.fido.apn"
-      type="dun"
-  />
-
-  <apn carrier="Fido ISP GPRS"
-      mcc="302"
-      mnc="370"
-      apn="fido-core-appl1.apn"
-      mmsc="http://mms.fido.ca"
-      mmsproxy="205.151.11.13"
-      mmsport="80"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Internet"
-      mcc="302"
-      mnc="490"
-      apn="internet.freedommobile.ca"
-      type="default"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="MMS"
-      mcc="302"
-      mnc="490"
-      apn="mms.freedommobile.ca"
-      type="mms"
-      protocol="IP"
-      roaming_protocol="IP"
-      mmsc="http://mms.freedommobile.ca"
-      mmsproxy="74.115.197.70"
-      mmsport="8080"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="E911"
-      mcc="302"
-      mnc="490"
-      apn="e911.mobilefrdm.ca"
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      user_visible="false"
-  />
-
-  <apn carrier="VoLTE"
-      mcc="302"
-      mnc="490"
-      apn="volte.mobilefrdm.ca"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-      user_visible="false"
-  />
-
-  <apn carrier="XCAP"
-      mcc="302"
-      mnc="490"
-      apn="xcap.freedommobile.ca"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-      user_visible="false"
-  />
-
-  <apn carrier="Bell Mobility and Solo Mobile"
-      mcc="302"
-      mnc="610"
-      apn="pda.bell.ca"
-      proxy="web.wireless.bell.ca"
-      port="80"
-      mmsc="http://mms.bell.ca/mms/wapenc"
-      mmsproxy="web.wireless.bell.ca"
-      mmsport="80"
-      type=""
-  />
-  
-  <apn carrier="Virgin Mobile Canada"
-      mcc="302"
-      mnc="610"
-      apn="inet.bell.ca"
-      proxy="web.wireless.bell.ca"
-      port="80"
-      mmsc="http://mms.bell.ca/mms/wapenc"
-      mmsproxy="web.wireless.bell.ca"
-      mmsport="80"
-      type=""
-  />
-
-  <apn carrier="Rogers LTE"
-      mcc="302"
-      mnc="720"
-      apn="ltemobile.apn"
-      mmsc="http://mms.gprs.rogers.com"
-      mmsproxy="10.128.1.69"
-      mmsport="80"
-      protocol="IP"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Rogers"
-      mcc="302"
-      mnc="720"
-      apn="rogers-core-appl1.apn"
-      mmsc="http://mms.gprs.rogers.com"
-      mmsproxy="10.128.1.69"
-      mmsport="80"
-      type="default,supl,mms"
-  />
-  
-  <apn carrier="Rogers"
-      mcc="302"
-      mnc="720"
-      apn="internet.com"
-      user="wapuser1"
-      password="wap"
-      type="default,supl"
-  />
-  
-  <apn carrier="Rogers MMS"
-      mcc="302"
-      mnc="720"
-      apn="media.com"
-      user="media"
-      password="mda01"
-      server="172.25.0.107"
-      mmsc="http://mms.gprs.rogers.com"
-      mmsproxy="10.128.1.69"
-      port="80"
-      type="mms"
-  />
-  
-  <apn carrier="Rogers Tethering"
-      mcc="302"
-      mnc="720"
-      apn="isp.apn"
-      type="dun"
-  />
-
-  <apn carrier="Rogers"
-      mcc="302"
-      mnc="720"
-      apn="internet.com"
-      user="guest"
-      password="guest"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Rogers"
-      mcc="302"
-      mnc="720"
-      apn="rogers-core-appl1.apn"
-      mmsc="http://mms.gprs.rogers.com"
-      mmsproxy="10.128.1.69"
-      mmsport="80"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="ATT Nextgenphone"
-      mcc="310"
-      mnc="030"
-      apn="nxtgenphone"
-      protocol="IPV4V6"
-      mmsc="http://mmsc.mobile.att.net"
-      mmsproxy="proxy.mobile.att.net"
-      mmsport="80"
-      type="default,supl,mms,hipri,fota,xcap"
-  />
-
-  <apn carrier="IMS"
-      mcc="310"
-      mnc="030"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT Nextgenphone"
-      mcc="310"
-      mnc="070"
-      apn="nxtgenphone"
-      protocol="IPV4V6"
-      mmsc="http://mmsc.mobile.att.net"
-      mmsproxy="proxy.mobile.att.net"
-      mmsport="80"
-      type="default,supl,mms,hipri,fota,xcap"
-  />
-
-  <apn carrier="IMS"
-      mcc="310"
-      mnc="070"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS"
-      mcc="310"
-      mnc="070"
-      apn=""
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS(wifi)"
-      mcc="310"
-      mnc="070"
-      apn="sos"
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="CorrMMS"
-      mcc="310"
-      mnc="080"
-      apn="corrmms"
-      mmsc="http://mms.iot1.com/corr/mms.php"
-      mmsproxy="66.255.55.23"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Internet"
-      mcc="310"
-      mnc="090"
-      apn="isp"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS"
-      mcc="310"
-      mnc="090"
-      apn="mms"
-      mmsc="http://mms.edgemobile.net/mmsc"
-      mmsproxy="12.108.12.13"
-      mmsport="3128"
-      type="mms"
-  />
-
-  <apn carrier="Edge MMS Prepay"
-      mcc="310"
-      mnc="090"
-      apn="ppmms"
-      mmsc="http://mms.edgemobile.net/mmsc"
-      mmsproxy="12.108.12.13"
-      mmsport="3128"
-      type="mms"
-  />
-
-  <apn carrier="ATT Nextgenphone"
-      mcc="310"
-      mnc="090"
-      apn="nxtgenphone"
-      protocol="IPV4V6"
-      mmsc="http://mmsc.mobile.att.net"
-      mmsproxy="proxy.mobile.att.net"
-      mmsport="80"
-      type="default,supl,mms,hipri,fota"
-  />
-
-  <apn carrier="IMS"
-      mcc="310"
-      mnc="090"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="ATT SOS"
-      mcc="310"
-      mnc="090"
-      apn=""
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS(wifi)"
-      mcc="310"
-      mnc="090"
-      apn="sos"
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="PLAT-OTA-MMS"
-      mcc="310"
-      mnc="100"
-      apn="plateaumms"
-      password="mmsc"
-      mmsc="208.254.124.11:8514"
-      mmsproxy="208.254.124.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="PLATWEB"
-      mcc="310"
-      mnc="100"
-      apn="plateauweb"
-      type="default,supl"
-  />
-
-  <apn carrier="Sprint IA"
-      mcc="310"
-      mnc="120"
-      apn=""
-      type="ia"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Sprint Internet"
-      mcc="310"
-      mnc="120"
-      apn="n.ispsn"
-      mmsc="http://mms.sprintpcs.com"
-      mmsproxy="68.28.31.7"
-      mmsport="80"
-      type="default,mms"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="Sprint"
-      mcc="310"
-      mnc="120"
-      apn="n.sprpre.ispsn"
-      mmsc="http://mmsc.vmobl.com:8088"
-      mmsproxy="68.28.31.2"
-      mmsport="80"
-      type="default,mms"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="My Multi Media"
-      mcc="310"
-      mnc="130"
-      apn="mms.c1.ama"
-      user="cell1mms"
-      password="cell1"
-      mmsc="http://mms.iot1.com/amarillo/mms.php"
-      type="mms"
-  />
-
-  <apn carrier="internet"
-      mcc="310"
-      mnc="150"
-      apn="ndo"
-      mmsc="http://mmsc.aiowireless.net"
-      mmsproxy="proxy.aiowireless.net"
-      mmsport="80"
-      type="default,mms,fota,hipri,supl,xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="IMS"
-      mcc="310"
-      mnc="150"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="mht"
-      mcc="310"
-      mnc="150"
-      apn="mht"
-      type="dun"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="160"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 160 IMS"
-      mcc="310"
-      mnc="160"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
- <apn carrier="T-Mobile US 160 Emergency"
-      mcc="310"
-      mnc="160"
-      apn=""
-      type="emergency"
-      protocol="IPV6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="DataConnect"
-      mcc="310"
-      mnc="170"
-      apn="isp.cingular"
-      type="default,supl"
-  />
-
-  <apn carrier="Cingular MMS"
-      mcc="310"
-      mnc="170"
-      apn="wap.cingular"
-      user="WAP@CINGULARGPRS.COM"
-      password="CINGULAR1"
-      mmsc="http://mmsc.cingular.com"
-      mmsproxy="66.209.11.32"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="ATT Nextgenphone"
-      mcc="310"
-      mnc="170"
-      apn="nxtgenphone"
-      protocol="IPV4V6"
-      mmsc="http://mmsc.mobile.att.net"
-      mmsproxy="proxy.mobile.att.net"
-      mmsport="80"
-      type="default,supl,mms,hipri,fota,xcap"
-  />
-
-  <apn carrier="IMS"
-      mcc="310"
-      mnc="170"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS"
-      mcc="310"
-      mnc="170"
-      apn=""
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS(wifi)"
-      mcc="310"
-      mnc="170"
-      apn="sos"
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="200"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 200 IMS"
-      mcc="310"
-      mnc="200"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="T-Mobile US 200 Emergency"
-      mcc="310"
-      mnc="200"
-      apn=""
-      type="emergency"
-      protocol="IPV6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="210"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 210 IMS"
-      mcc="310"
-      mnc="210"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="T-Mobile US 210 Emergency"
-      mcc="310"
-      mnc="210"
-      apn=""
-      type="emergency"
-      protocol="IPV6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="220"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 220 IMS"
-      mcc="310"
-      mnc="220"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="T-Mobile US 220 Emergency"
-      mcc="310"
-      mnc="220"
-      apn=""
-      type="emergency"
-      protocol="IPV6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="230"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 230 IMS"
-      mcc="310"
-      mnc="230"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="T-Mobile US 230 Emergency"
-      mcc="310"
-      mnc="230"
-      apn=""
-      type="emergency"
-      protocol="IPV6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="240"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 240 IMS"
-      mcc="310"
-      mnc="240"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="T-Mobile US 240 Emergency"
-      mcc="310"
-      mnc="240"
-      apn=""
-      type="emergency"
-      protocol="IPV6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="250"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 250 IMS"
-      mcc="310"
-      mnc="250"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="T-Mobile US 250 Emergency"
-      mcc="310"
-      mnc="250"
-      apn=""
-      type="emergency"
-      protocol="IPV6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="260"
-      apn="fast.t-mobile.com"
-      type="default,mms,supl"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US IMS"
-      mcc="310"
-      mnc="260"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="T-Mobile US 260 Emergency"
-      mcc="310"
-      mnc="260"
-      apn=""
-      type="emergency"
-      protocol="IPV6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="T-Mobile US MMS over WiFi"
-      mcc="310"
-      mnc="260"
-      apn="tmus"
-      type="mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="270"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 270 IMS"
-      mcc="310"
-      mnc="270"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="ATT Nextgenphone"
-      mcc="310"
-      mnc="280"
-      apn="nxtgenphone"
-      protocol="IPV4V6"
-      mmsc="http://mmsc.mobile.att.net"
-      mmsproxy="proxy.mobile.att.net"
-      mmsport="80"
-      type="default,supl,mms,hipri,fota,xcap"
-  />
-
-  <apn carrier="IMS"
-      mcc="310"
-      mnc="280"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="300"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="310"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 310 IMS"
-      mcc="310"
-      mnc="310"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="T-Mobile US 310 Emergency"
-      mcc="310"
-      mnc="310"
-      apn=""
-      type="emergency"
-      protocol="IPV6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Cingular 380 ATT"
-      mcc="310"
-      mnc="380"
-      apn="proxy"
-      mmsc="http://mmsc.cingular.com/"
-      mmsproxy="wireless.cingular.com"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="AWS MMS"
-      mcc="310"
-      mnc="380"
-      apn="proxy"
-      mmsc="http://mmsc.mymmode.com"
-      mmsproxy="10.250.250.55"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="ATT Nextgenphone"
-      mcc="310"
-      mnc="380"
-      apn="nxtgenphone"
-      protocol="IPV4V6"
-      mmsc="http://mmsc.mobile.att.net"
-      mmsproxy="proxy.mobile.att.net"
-      mmsport="80"
-      type="default,supl,mms,hipri,fota,xcap"
-  />
-
-  <apn carrier="IMS"
-      mcc="310"
-      mnc="380"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="ATT SOS"
-      mcc="310"
-      mnc="380"
-      apn=""
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS(wifi)"
-      mcc="310"
-      mnc="380"
-      apn="sos"
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="Celloneet MMS"
-      mcc="310"
-      mnc="390"
-      apn="mms.celloneet.com"
-      user="user1@mms.celloneet.com"
-      password="celloneet"
-      mmsc="http://mms.celloneet.com/servlets/mms"
-      mmsproxy="63.99.231.135"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="ATT Nextgenphone"
-      mcc="310"
-      mnc="410"
-      apn="nxtgenphone"
-      mmsc="http://mmsc.mobile.att.net"
-      mmsproxy="proxy.mobile.att.net"
-      mmsport="80"
-      type="default,mms,supl,fota,hipri,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT Broadband"
-      mcc="310"
-      mnc="410"
-      apn="Broadband"
-      type="default,mms,supl,hipri,fota"
-  />
-
-  <apn carrier="Cingular 410"
-      mcc="310"
-      mnc="410"
-      apn="wap.cingular"
-      user="WAP@CINGULARGPRS.COM"
-      password="CINGULAR1"
-      server="cingulargprs.com"
-      mmsc="http://mmsc.cingular.com/"
-      mmsproxy="wireless.cingular.com"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="310"
-      mnc="410"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="ATT SOS"
-      mcc="310"
-      mnc="410"
-      apn=""
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS(wifi)"
-      mcc="310"
-      mnc="410"
-      apn="sos"
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="CBW MMS"
-      mcc="310"
-      mnc="420"
-      apn="wap.gocbw.com"
-      mmsc="http://mms.gocbw.com:8088/mms"
-      mmsproxy="216.68.79.202"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="DataConnect"
-      mcc="310"
-      mnc="470"
-      apn="isp.cingular"
-      type="default,supl"
-  />
-
-  <apn carrier="MediaNet"
-      mcc="310"
-      mnc="470"
-      apn="wap.cingular"
-      user="WAP@CINGULARGPRS.COM"
-      password="CINGULAR1"
-      mmsc="http://mmsc.cingular.com"
-      mmsproxy="66.209.11.32"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="DataConnect"
-      mcc="310"
-      mnc="480"
-      apn="isp.cingular"
-      type="default,supl"
-  />
-
-  <apn carrier="MediaNet"
-      mcc="310"
-      mnc="480"
-      apn="wap.cingular"
-      user="WAP@CINGULARGPRS.COM"
-      password="CINGULAR1"
-      mmsc="http://mmsc.cingular.com"
-      mmsproxy="66.209.11.32"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="490"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 490 IMS"
-      mcc="310"
-      mnc="490"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="GoodCall Picture Message"
-      mcc="310"
-      mnc="490"
-      apn="good.call"
-      mmsc="http://mms.suncom.net:8088/mms"
-      mmsproxy="66.150.33.125"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Suncom MMS"
-      mcc="310"
-      mnc="490"
-      apn="mms"
-      mmsc="http://mms.suncom.net:8088/mms"
-      mmsproxy="66.150.33.125"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="530"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="DobsonMMS"
-      mcc="310"
-      mnc="560"
-      apn="dobsoncellularwap"
-      mmsc="http://mmsc"
-      mmsproxy="172.23.1.252"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="ATT Nextgenphone"
-      mcc="310"
-      mnc="560"
-      apn="nxtgenphone"
-      protocol="IPV4V6"
-      mmsc="http://mmsc.mobile.att.net"
-      mmsproxy="proxy.mobile.att.net"
-      mmsport="80"
-      type="default,supl,mms,hipri,fota,xcap"
-  />
-
-  <apn carrier="IMS"
-      mcc="310"
-      mnc="560"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="ATT SOS"
-      mcc="310"
-      mnc="560"
-      apn=""
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS(wifi)"
-      mcc="310"
-      mnc="560"
-      apn="sos"
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="ChinookMMS"
-      mcc="310"
-      mnc="570"
-      apn="wapgw.chinookwireless.net"
-      mmsc="http://mms.cellonenation.net/mms/"
-      mmsproxy="204.181.155.195"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="590"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US IMS"
-      mcc="310"
-      mnc="590"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="CellularOne MMS"
-      mcc="310"
-      mnc="590"
-      apn="cellular1wap"
-      mmsc="http://mmsc"
-      mmsproxy="172.23.1.252"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="EpicINT"
-      mcc="310"
-      mnc="610"
-      apn="internet.epictouch"
-      type="default,supl"
-  />
-
-  <apn carrier="EpicMMS"
-      mcc="310"
-      mnc="610"
-      apn="mms.epictouch"
-      mmsc="http://mmsc.westlinkcom.com/servlets/mms"
-      mmsproxy="63.99.231.135"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="640"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="660"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 660 IMS"
-      mcc="310"
-      mnc="660"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="ATT Nextgenphone"
-      mcc="310"
-      mnc="680"
-      apn="nxtgenphone"
-      protocol="IPV4V6"
-      mmsc="http://mmsc.mobile.att.net"
-      mmsproxy="proxy.mobile.att.net"
-      mmsport="80"
-      type="default,supl,mms,hipri,fota,xcap"
-  />
-
-  <apn carrier="IMS"
-      mcc="310"
-      mnc="680"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS"
-      mcc="310"
-      mnc="680"
-      apn=""
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS(wifi)"
-      mcc="310"
-      mnc="680"
-      apn="sos"
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="WEB 2"
-      mcc="310"
-      mnc="770"
-      apn="i2.iwireless.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Picture Messaging"
-      mcc="310"
-      mnc="770"
-      apn="wap1.iwireless.com"
-      mmsc="http://mmsc.iwireless.dataonair.net:6672"
-      mmsproxy="209.4.229.31"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="PIAPicture Messaging"
-      mcc="310"
-      mnc="770"
-      apn="wap9.iwireless.com"
-      mmsc="http://mmsc.iwireless.dataonair.net:6672"
-      mmsproxy="209.4.229.32"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="T-Mobile US LTE"
-      mcc="310"
-      mnc="800"
-      apn="fast.t-mobile.com"
-      type="default,supl,mms"
-      mmsc="http://mms.msg.eng.t-mobile.com/mms/wapenc"
-      protocol="IPV6"
-  />
-
-  <apn carrier="T-Mobile US 800 IMS"
-      mcc="310"
-      mnc="800"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Internet"
-      mcc="310"
-      mnc="840"
-      apn="isp"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS"
-      mcc="310"
-      mnc="840"
-      apn="mms"
-      mmsc="http://mms.edgemobile.net/mmsc"
-      mmsproxy="12.108.12.13"
-      mmsport="3128"
-      type="mms"
-  />
-
-  <apn carrier="Edge MMS Prepay"
-      mcc="310"
-      mnc="840"
-      apn="ppmms"
-      mmsc="http://mms.edgemobile.net/mmsc"
-      mmsproxy="12.108.12.13"
-      mmsport="3128"
-      type="mms"
-  />
-
-  <apn carrier="DTC MMS"
-      mcc="310"
-      mnc="880"
-      apn="mms.adv.com"
-      mmsc="http://mms.iot1.com/advantage/mms.php"
-      type="mms"
-  />
-
-  <apn carrier="WOW_WAP"
-      mcc="310"
-      mnc="910"
-      apn="wap.firstcellular.com"
-      mmsc="mms.firstcellular.net/mmsc"
-      mmsproxy="10.101.1.5"
-      mmsport="3128"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="ATT Nextgenphone"
-      mcc="310"
-      mnc="950"
-      apn="nxtgenphone"
-      protocol="IPV4V6"
-      mmsc="http://mmsc.mobile.att.net"
-      mmsproxy="proxy.mobile.att.net"
-      mmsport="80"
-      type="default,supl,mms,hipri,fota,xcap"
-  />
-
-  <apn carrier="IMS"
-      mcc="310"
-      mnc="950"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT Nextgenphone"
-      mcc="311"
-      mnc="180"
-      apn="nxtgenphone"
-      protocol="IPV4V6"
-      mmsc="http://mmsc.mobile.att.net"
-      mmsproxy="proxy.mobile.att.net"
-      mmsport="80"
-      type="default,supl,mms,hipri,fota"
-  />
-
-  <apn carrier="IMS"
-      mcc="311"
-      mnc="180"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS"
-      mcc="311"
-      mnc="180"
-      apn=""
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="ATT SOS(wifi)"
-      mcc="311"
-      mnc="180"
-      apn="sos"
-      type="emergency"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="MMS"
-      mcc="311"
-      mnc="190"
-      apn="wap.cellular1.net"
-      mmsc="http://mms.cellular1.net/ecit/mms.php"
-      type="mms"
-  />
-
-  <apn carrier="Farmers GPRS"
-      mcc="311"
-      mnc="210"
-      apn="internet.farmerswireless.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Farmers MMS"
-      mcc="311"
-      mnc="210"
-      apn="mms.farmers.com"
-      mmsc="172.16.0.37:8514"
-      type="mms"
-  />
-
-  <!-- Modify Apn database for VZW LTE support -->
-    <apn carrier="LTE - Verizon Internet"
-        mcc="311"
-        mnc="270"
-        apn="VZWINTERNET"
-        type="default,dun"
-        protocol="IPV4V6"
-        roaming_protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon FOTA"
-        mcc="311"
-        mnc="270"
-        apn="VZWADMIN"
-        type="fota"
-        protocol="IPV4V6"
-        roaming_protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon IMS"
-        mcc="311"
-        mnc="270"
-        apn="VZWIMS"
-        type="ims,ia"
-        protocol="IPV4V6"
-        roaming_protocol="IPV6"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon CBS"
-        mcc="311"
-        mnc="270"
-        apn="VZWAPP"
-        type="cbs,mms"
-        mmsc="http://mms.vtext.com/servlets/mms"
-        protocol="IPV4V6"
-        roaming_protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon 800"
-        mcc="311"
-        mnc="270"
-        apn="VZW800"
-        type="cas"
-        protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon EMERGENCY"
-        mcc="311"
-        mnc="270"
-        apn="VZWEMERGENCY"
-        type="emergency"
-        protocol="IPV4V6"
-        roaming_protocol="IPV6"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-
-    <apn carrier="LTE - Verizon Internet"
-        mcc="311"
-        mnc="480"
-        apn="VZWINTERNET"
-        type="default,dun"
-        protocol="IPV4V6"
-        roaming_protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="Verizon CDMA-less"
-        mcc="311"
-        mnc="480"
-        apn="dungsm.vzw3g.com"
-        type="dun"
-        protocol="IPV4V6"
-        roaming_protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon FOTA"
-        mcc="311"
-        mnc="480"
-        apn="VZWADMIN"
-        type="fota"
-        protocol="IPV4V6"
-        roaming_protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon IMS"
-        mcc="311"
-        mnc="480"
-        apn="VZWIMS"
-        type="ims,ia"
-        protocol="IPV4V6"
-        roaming_protocol="IPV6"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon CBS"
-        mcc="311"
-        mnc="480"
-        apn="VZWAPP"
-        type="cbs,mms"
-        mmsc="http://mms.vtext.com/servlets/mms"
-        protocol="IPV4V6"
-        roaming_protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon 800"
-        mcc="311"
-        mnc="480"
-        apn="VZW800"
-        type="cas"
-        protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon EMERGENCY"
-        mcc="311"
-        mnc="480"
-        apn="VZWEMERGENCY"
-        type="emergency"
-        protocol="IPV4V6"
-        roaming_protocol="IPV6"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-
-    <apn carrier="LTE - Verizon Internet"
-        mcc="312"
-        mnc="770"
-        apn="VZWINTERNET"
-        type="default,dun"
-        protocol="IPV4V6"
-        roaming_protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon FOTA"
-        mcc="312"
-        mnc="770"
-        apn="VZWADMIN"
-        type="fota"
-        protocol="IPV4V6"
-        roaming_protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon IMS"
-        mcc="312"
-        mnc="770"
-        apn="VZWIMS"
-        type="ims,ia"
-        protocol="IPV4V6"
-        roaming_protocol="IPV6"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon CBS"
-        mcc="312"
-        mnc="770"
-        apn="VZWAPP"
-        type="cbs,mms"
-        mmsc="http://mms.vtext.com/servlets/mms"
-        protocol="IPV4V6"
-        roaming_protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon 800"
-        mcc="312"
-        mnc="770"
-        apn="VZW800"
-        type="cas"
-        protocol="IP"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-    <apn carrier="LTE - Verizon EMERGENCY"
-        mcc="312"
-        mnc="770"
-        apn="VZWEMERGENCY"
-        type="emergency"
-        protocol="IPV4V6"
-        roaming_protocol="IPV6"
-        max_conns="1023"
-        max_conns_time="300"
-        wait_time="0"
-    />
-  <!-- END modify Apn database for VZW LTE support -->
-
-  <apn carrier="CLARO WAP"
-      mcc="330"
-      mnc="110"
-      apn="wap.claropr.com"
-      proxy="10.50.38.3"
-      port="8799"
-      type="wap"
-  />
-
-  <apn carrier="CLARO MMS"
-      mcc="330"
-      mnc="110"
-      apn="mms.claropr.com"
-      mmsc="http://mmsg.claropr.com:10021/mmsc"
-      mmsproxy="10.50.38.3"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Telcel EDGE"
-    mcc="334"
-    mnc="020"
-    apn="internet.itelcel.com"
-    user="webgprs"
-    password="webgprs2002"
-    authenticationtype="PAP"
-    type="default,supl"
-  />
-
-  <apn carrier="Telcel MMS"
-    mcc="334"
-    mnc="020"
-    apn="mms.itelcel.com"
-    user="mmsgprs"
-    password="mmsgprs2003"
-    mmsc="http://mms.itelcel.com/servlets/mms"
-    mmsproxy="148.233.151.240"
-    mmsport="8080"
-    type="mms"
-  />
-
-  <apn carrier="Telcel IMS"
-      mcc="334"
-      mnc="020"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Telcel XCAP"
-      mcc="334"
-      mnc="020"
-      apn="internet.itelcel.com"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Telcel Internet"
-      mcc="334"
-      mnc="02"
-      apn="internet.itelcel.com"
-      user="webgprs"
-      password="webgprs2002"
-      type="default,supl"
-  />
-
-  <apn carrier="Mensajas Multimedia"
-      mcc="334"
-      mnc="02"
-      apn="mms.itelcel.com"
-      user="mmsgprs"
-      password="mmsgprs2003"
-      mmsc="http://mms.itelcel.com/servlets/mms"
-      mmsproxy="148.233.151.240"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="MoviStar Internet"
-      mcc="334"
-      mnc="030"
-      apn="internet.movistar.mx"
-      proxy="10.2.20.1"
-      port="80"
-      user="movistar"
-      password="movistar"
-      type="default,supl"
-  />
-
-  <apn carrier="MoviStar Mms"
-      mcc="334"
-      mnc="030"
-      apn="mms.movistar.mx"
-      mmsc="http://mms.movistar.mx"
-      mmsproxy="10.2.20.1"
-      mmsport="80"
-      user="movistar"
-      password="movistar"
-      type="mms"
-  />
-
-  <apn carrier="MoviStar IMS"
-      mcc="334"
-      mnc="030"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="MoviStar Internet"
-      mcc="334"
-      mnc="03"
-      apn="internet.movistar.mx"
-      user="movistar"
-      password="movistar"
-      type="default,supl"
-  />
-
-  <apn carrier="Album Multimedia"
-      mcc="334"
-      mnc="03"
-      apn="mms.movistar.mx"
-      user="movistar"
-      password="movistar"
-      mmsc="http://mms.movistar.mx"
-      mmsproxy="10.2.20.1"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Iusacell Internet"
-      mcc="334"
-      mnc="050"
-      apn="web.iusacellgsm.mx"
-      user="iusacellgsm"
-      password="iusacellgsm"
-      type="wap"
-  />
-
-  <apn carrier="Internet MODEM"
-      mcc="334"
-      mnc="050"
-      apn="modem.iusacellgsm.mx"
-      user="iusacellgsm"
-      password="iusacellgsm"
-      type="default,wap"
-  />
-
-  <apn carrier="Iusacell MMS"
-      mcc="334"
-      mnc="050"
-      apn="mms.iusacellgsm.mx"
-      user="mmsiusacellgs"
-      password="mmsiusacellgs"
-      mmsc="http://mms.iusacell3g.com"
-      mmsproxy="192.200.1.110"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="334"
-      mnc="050"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="wap.attmex.mx"
-      mcc="334"
-      mnc="050"
-      apn="web.attmex.mx"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Modem Nextel"
-      mcc="334"
-      mnc="090"
-      apn="modem.nexteldata.com.mx"
-      type="default"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Nextel MMS"
-      mcc="334"
-      mnc="090"
-      apn="mms.nexteldata.com.mx"
-      mmsc="http://3gmms.nexteldata.com.mx"
-      mmsproxy="129.192.129.104"
-      mmsport="8080"
-      type="mms"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Orange World"
-      mcc="340"
-      mnc="01"
-      apn="orangewap"
-      user="orange"
-      password="orange"
-      mmsc="http://193.251.160.246/servlets/mms"
-      mmsproxy="10.0.0.10"
-      mmsport="8082"
-      type="default,wap,mms"
-  />
-
-  <apn carrier="Onlywap-GPRS"
-      mcc="340"
-      mnc="02"
-      apn="onlywap"
-      user="only"
-      password="only"
-      proxy="10.2.85.50"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="Onlymms-GPRS"
-      mcc="340"
-      mnc="02"
-      apn="onlymms"
-      user="only"
-      password="only"
-      mmsc="http://10.2.85.50:8514"
-      mmsproxy="10.2.85.50"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Digicel WAP"
-      mcc="340"
-      mnc="20"
-      apn="wap.digicelfr.com"
-      user="wap"
-      password="wap"
-      proxy="172.20.6.12"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="Digicel MMS"
-      mcc="340"
-      mnc="20"
-      apn="wap.digicelfr.com"
-      user="wap"
-      password="wap"
-      mmsc="http://mmc.digiceltt.com/servlets/mms"
-      mmsproxy="172.20.6.12"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="Orange World"
-      mcc="370"
-      mnc="01"
-      apn="orangeworld"
-      user="orange"
-      password="orange"
-      mmsc="http://mms.orange.com.do/servlets/mms"
-      mmsproxy="172.16.126.70"
-      mmsport="8080"
-      type="wap,mms"
-  />
-
-  <apn carrier="CLARO WEB"
-      mcc="370"
-      mnc="02"
-      apn="internet.ideasclaro.com.jm"
-      type="default,supl"
-  />
-
-  <apn carrier="CLARO WEB"
-      mcc="370"
-      mnc="20"
-      apn="internet.ideasclaro.com.jm"
-      type="default,supl"
-  />
-
-  <apn carrier="BeeLine Internet"
-      mcc="401"
-      mnc="01"
-      apn="wap.k-mobile"
-      user="@wap.k-mobile"
-      password="k-mobile"
-      type="default,supl"
-  />
-
-  <apn carrier="BeeLine MMS"
-      mcc="401"
-      mnc="01"
-      apn="mms.beeline.kz"
-      user="@mms.beeline"
-      password="beeline"
-      mmsc="http://mms.beeline.kz/mms/wapenc"
-      mmsproxy="172.27.6.93"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="KCELL WAP"
-      mcc="401"
-      mnc="02"
-      apn="wap"
-      proxy="195.47.255.7"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="KCELL MMS"
-      mcc="401"
-      mnc="02"
-      apn="mms"
-      mmsc="http://mms.kcell.kz/post"
-      mmsproxy="195.47.255.7"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="NEO WAP"
-      mcc="401"
-      mnc="77"
-      apn="wap"
-      proxy="10.1.26.10"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="NEO MMS"
-      mcc="401"
-      mnc="77"
-      apn="mms"
-      mmsc="http://mms.neogsm.kz/mms/wapenc"
-      mmsproxy="10.1.26.10"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="TATA Indicom"
-      mcc="404"
-      mnc="00"
-      apn="internet"
-      user="wapuser"
-      password="wapuser"
-      type="default,supl"
-  />
-
-  <apn carrier="RCOM CDMA"
-      mcc="404"
-      mnc="00"
-      apn="#777"
-      user="net"
-      password="net"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="404"
-      mnc="01"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="404"
-      mnc="01"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="404"
-      mnc="01"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="02"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="02"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="03"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="03"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="03"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="IDEA"
-      mcc="404"
-      mnc="04"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="404"
-      mnc="04"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Vodafone"
-      mcc="404"
-      mnc="05"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone Live!"
-      mcc="404"
-      mnc="05"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="404"
-      mnc="05"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Airtel Live!"
-      mcc="404"
-      mnc="06"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="06"
-      apn="airtelmms.com"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="404"
-      mnc="07"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="404"
-      mnc="07"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RTel MMS"
-      mcc="404"
-      mnc="09"
-      apn="MMS"
-      mmsc="http://10.239.221.47/mms/"
-      mmsproxy="10.239.221.7"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RTel"
-      mcc="404"
-      mnc="09"
-      apn="SMARTNET"
-      type="default,supl"
-  />
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="10"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="10"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="10"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="404"
-      mnc="11"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="404"
-      mnc="11"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="404"
-      mnc="11"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="404"
-      mnc="12"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="404"
-      mnc="12"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Vodafonemobileconnect"
-      mcc="404"
-      mnc="13"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone live"
-      mcc="404"
-      mnc="13"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone_MMS"
-      mcc="404"
-      mnc="13"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="IDEA Punjab MMS"
-      mcc="404"
-      mnc="14"
-      apn="spice"
-      mmsc="http://10.11.12.180/"
-      mmsproxy="10.11.12.13"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="IDEA Punjab"
-      mcc="404"
-      mnc="14"
-      apn="spicegprs"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="404"
-      mnc="15"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="404"
-      mnc="15"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="404"
-      mnc="15"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="16"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="16"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="16"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="AIRCEL NE MMS"
-      mcc="404"
-      mnc="17"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL NE"
-      mcc="404"
-      mnc="17"
-      apn="aircelwebpost"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RTel MMS"
-      mcc="404"
-      mnc="18"
-      apn="MMS"
-      mmsc="http://10.239.221.47/mms/"
-      mmsproxy="10.239.221.7"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RTel"
-      mcc="404"
-      mnc="18"
-      apn="SMARTNET"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA"
-      mcc="404"
-      mnc="19"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="404"
-      mnc="19"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone"
-      mcc="404"
-      mnc="20"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone Live!"
-      mcc="404"
-      mnc="20"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="404"
-      mnc="20"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-  
-  <apn carrier="Loop Mobile"
-      mcc="404"
-      mnc="21"
-      apn="www"
-      type="default,supl"
-  />
-
- <apn carrier="Loop Mobile MMS"
-      mcc="404"
-      mnc="21"
-      apn="mizone"
-      password="mmsc"
-      mmsc="http://mms.loopmobile.in:8080"
-      mmsproxy="10.0.0.10"
-      mmsport="9401"
-      type="mms"
-  />
-
-﻿  <apn carrier="Idea_Internet"
-      mcc="404"
-      mnc="22"
-      apn="internet"
-      proxy="10.4.42.15"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA GPRS"
-      mcc="404"
-      mnc="22"
-      apn="imis"
-      proxy="10.4.42.15"
-      port="8080"
-      type="default,supl"
-  />
-  
-  <apn carrier="IDEA MMS"
-      mcc="404"
-      mnc="22"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="404"
-      mnc="24"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA Wap"
-      mcc="404"
-      mnc="24"
-      apn="imis"
-      proxy="10.4.42.15"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="404"
-      mnc="24"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-  
-<apn carrier="AIRCEL NE MMS"
-      mcc="404"
-      mnc="25"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL NE"
-      mcc="404"
-      mnc="25"
-      apn="aircelwebpost"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="404"
-      mnc="27"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="404"
-      mnc="27"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="404"
-      mnc="27"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL NE MMS"
-      mcc="404"
-      mnc="28"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL NE"
-      mcc="404"
-      mnc="28"
-      apn="aircelwebpost"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL NE MMS"
-      mcc="404"
-      mnc="29"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL NE"
-      mcc="404"
-      mnc="29"
-      apn="aircelwebpost"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="404"
-      mnc="30"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="404"
-      mnc="30"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="404"
-      mnc="30"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="31"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="31"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="31"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="AIRCEL NE MMS"
-      mcc="404"
-      mnc="33"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL NE"
-      mcc="404"
-      mnc="33"
-      apn="aircelwebpost"
-      type="default,supl"
-  />
-
-  <apn carrier="Cellone_North MMS"
-      mcc="404"
-      mnc="34"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cellone_North"
-      mcc="404"
-      mnc="34"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL NE MMS"
-      mcc="404"
-      mnc="35"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL NE"
-      mcc="404"
-      mnc="35"
-      apn="aircelwebpost"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RTel MMS"
-      mcc="404"
-      mnc="36"
-      apn="MMS"
-      mmsc="http://10.239.221.47/mms/"
-      mmsproxy="10.239.221.7"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RTel"
-      mcc="404"
-      mnc="36"
-      apn="SMARTNET"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL NE MMS"
-      mcc="404"
-      mnc="37"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL NE"
-      mcc="404"
-      mnc="37"
-      apn="aircelwebpost"
-      type="default,supl"
-  />
-
-  <apn carrier="CellOne_Kolkata MMS"
-      mcc="404"
-      mnc="38"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_Kolkata"
-      mcc="404"
-      mnc="38"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="40"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="40"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="40"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="AIRCEL TN"
-      mcc="404"
-      mnc="41"
-      apn="aircelgprs.po"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL TN MMS"
-      mcc="404"
-      mnc="41"
-      apn="aircelmms.po"
-      mmsc="http://mmsc/mmrelay.app"
-      mmsproxy="192.168.35.196"
-      mmsport="8081"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL TN"
-      mcc="404"
-      mnc="42"
-      apn="aircelgprs.po"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL TN MMS"
-      mcc="404"
-      mnc="42"
-      apn="aircelmms.po"
-      mmsc="http://mmsc/mmrelay.app"
-      mmsproxy="192.168.35.196"
-      mmsport="8081"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="404"
-      mnc="43"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="404"
-      mnc="43"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="404"
-      mnc="43"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA Karnataka"
-      mcc="404"
-      mnc="44"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA Karnataka MMS"
-      mcc="404"
-      mnc="44"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="45"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="45"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="45"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Vodafonemobileconnect"
-      mcc="404"
-      mnc="46"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone live"
-      mcc="404"
-      mnc="46"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone_MMS"
-      mcc="404"
-      mnc="46"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="49"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="49"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="49"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Reliance RTel MMS"
-      mcc="404"
-      mnc="50"
-      apn="MMS"
-      mmsc="http://10.239.221.47/mms/"
-      mmsproxy="10.239.221.7"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RTel"
-      mcc="404"
-      mnc="50"
-      apn="SMARTNET"
-      type="default,supl"
-  />
-
-  <apn carrier="Cellone_North MMS"
-      mcc="404"
-      mnc="51"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cellone_North"
-      mcc="404"
-      mnc="51"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RTel MMS"
-      mcc="404"
-      mnc="52"
-      apn="MMS"
-      mmsc="http://10.239.221.47/mms/"
-      mmsproxy="10.239.221.7"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RTel"
-      mcc="404"
-      mnc="52"
-      apn="SMARTNET"
-      type="default,supl"
-  />
-
-  <apn carrier="Cellone_North MMS"
-      mcc="404"
-      mnc="53"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cellone_North"
-      mcc="404"
-      mnc="53"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Cellone_North MMS"
-      mcc="404"
-      mnc="54"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cellone_North"
-      mcc="404"
-      mnc="54"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Cellone_North MMS"
-      mcc="404"
-      mnc="55"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cellone_North"
-      mcc="404"
-      mnc="55"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA"
-      mcc="404"
-      mnc="56"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="404"
-      mnc="56"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cellone_West MMS"
-      mcc="404"
-      mnc="57"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cellone_West"
-      mcc="404"
-      mnc="57"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Cellone_West MMS"
-      mcc="404"
-      mnc="58"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cellone_West"
-      mcc="404"
-      mnc="58"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Cellone_North MMS"
-      mcc="404"
-      mnc="59"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cellone_North"
-      mcc="404"
-      mnc="59"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="404"
-      mnc="60"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="404"
-      mnc="60"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="404"
-      mnc="60"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Cellone_North MMS"
-      mcc="404"
-      mnc="62"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cellone_North"
-      mcc="404"
-      mnc="62"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="CellOne_South MMS"
-      mcc="404"
-      mnc="64"
-      apn="bsnlmms"
-      password="mmsc"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_South"
-      mcc="404"
-      mnc="64"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Cellone_West MMS"
-      mcc="404"
-      mnc="66"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cellone_West"
-      mcc="404"
-      mnc="66"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RTel MMS"
-      mcc="404"
-      mnc="67"
-      apn="MMS"
-      mmsc="http://10.239.221.47/mms/"
-      mmsproxy="10.239.221.7"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RTel"
-      mcc="404"
-      mnc="67"
-      apn="SMARTNET"
-      type="default,supl"
-  />
-
-  <apn carrier="Dolphin_Delhi MMS"
-      mcc="404"
-      mnc="68"
-      apn="gprsmtnldel"
-      user="mtnl"
-      password="mtnl123"
-      mmsc="http://172.16.31.136/mms/"
-      mmsproxy="172.16.31.10"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="MTNL prepaid"
-      mcc="404"
-      mnc="68"
-      apn="gprsppsdel"
-      user="mtnl"
-      password="mtnl123"
-      mmsc="http://172.16.31.136/mms/"
-      mmsproxy="172.16.31.10"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Dolphin_Delhi"
-      mcc="404"
-      mnc="68"
-      apn="mtnl.net"
-      user="mtnl"
-      password="mtnl123"
-      type="default,supl"
-  />
-
-  <apn carrier="Dolphin_Delhi_3G MMS"
-      mcc="404"
-      mnc="68"
-      apn="mtnl3g"
-      user="mtnl"
-      password="mtnl123"
-      mmsc="http://172.16.31.165/mms/"
-      mmsproxy="172.16.31.10"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Dolphin_Delhi_3G"
-      mcc="404"
-      mnc="68"
-      apn="mtnl3g"
-      user="mtnl"
-      password="mtnl123"
-      type="default,supl"
-  />
-
-  <apn carrier="Dolphin_Mumbai MMS"
-      mcc="404"
-      mnc="69"
-      apn="mtnl.net"
-      mmsc="http://mtnlmms/"
-      mmsproxy="10.10.10.10"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Dolphin_Mumbai"
-      mcc="404"
-      mnc="69"
-      apn="mtnl.net"
-      type="default,supl"
-      mmsc="http://wap.mtnl.in"
-      proxy="http://10.10.10.10"
-      port="9401"
-  />
-
-  <apn carrier="Dolphin_Mumbai_3G"
-      mcc="404"
-      mnc="69"
-      apn="mtnl.net"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="70"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="70"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="70"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="CellOne_South MMS"
-      mcc="404"
-      mnc="71"
-      apn="bsnlmms"
-      password="mmsc"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_South"
-      mcc="404"
-      mnc="71"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="CellOne_South MMS"
-      mcc="404"
-      mnc="72"
-      apn="bsnlmms"
-      password="mmsc"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_South"
-      mcc="404"
-      mnc="72"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="CellOne_South MMS"
-      mcc="404"
-      mnc="73"
-      apn="bsnlmms"
-      password="mmsc"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_South"
-      mcc="404"
-      mnc="73"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="CellOne_Kolkata MMS"
-      mcc="404"
-      mnc="74"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_Kolkata"
-      mcc="404"
-      mnc="74"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="CellOne_Kolkata MMS"
-      mcc="404"
-      mnc="75"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_Kolkata"
-      mcc="404"
-      mnc="75"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="CellOne_Kolkata MMS"
-      mcc="404"
-      mnc="76"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_Kolkata"
-      mcc="404"
-      mnc="76"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="CellOne_Kolkata MMS"
-      mcc="404"
-      mnc="77"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_Kolkata"
-      mcc="404"
-      mnc="77"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA"
-      mcc="404"
-      mnc="78"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="404"
-      mnc="78"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_South MMS"
-      mcc="404"
-      mnc="79"
-      apn="bsnlmms"
-      password="mmsc"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_South"
-      mcc="404"
-      mnc="79"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="CellOne_South MMS"
-      mcc="404"
-      mnc="80"
-      apn="bsnlmms"
-      password="mmsc"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_South"
-      mcc="404"
-      mnc="80"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="CellOne_Kolkata MMS"
-      mcc="404"
-      mnc="81"
-      apn="bsnlmms"
-      mmsc="http://bsnlmmsc.in:8514"
-      mmsproxy="10.210.10.11"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CellOne_Kolkata"
-      mcc="404"
-      mnc="81"
-      apn="bsnlnet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA"
-      mcc="404"
-      mnc="82"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="404"
-      mnc="82"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RTel MMS"
-      mcc="404"
-      mnc="83"
-      apn="MMS"
-      mmsc="http://10.239.221.47/mms/"
-      mmsproxy="10.239.221.7"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RTel"
-      mcc="404"
-      mnc="83"
-      apn="SMARTNET"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafonemobileconnect"
-      mcc="404"
-      mnc="84"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone live"
-      mcc="404"
-      mnc="84"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone_MMS"
-      mcc="404"
-      mnc="84"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RTel MMS"
-      mcc="404"
-      mnc="85"
-      apn="MMS"
-      mmsc="http://10.239.221.47/mms/"
-      mmsproxy="10.239.221.7"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RTel"
-      mcc="404"
-      mnc="85"
-      apn="SMARTNET"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafonemobileconnect"
-      mcc="404"
-      mnc="86"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone live"
-      mcc="404"
-      mnc="86"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone_MMS"
-      mcc="404"
-      mnc="86"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="404"
-      mnc="87"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="404"
-      mnc="87"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="404"
-      mnc="88"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="404"
-      mnc="88"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="404"
-      mnc="88"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA"
-      mcc="404"
-      mnc="89"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="404"
-      mnc="89"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="90"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="90"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="90"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="AIRCEL NE MMS"
-      mcc="404"
-      mnc="91"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL NE"
-      mcc="404"
-      mnc="91"
-      apn="aircelwebpost"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="92"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="92"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="92"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="93"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="93"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="93"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="94"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="94"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="94"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="95"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="95"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="95"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="96"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="96"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="96"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="97"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="97"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="97"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="404"
-      mnc="98"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="404"
-      mnc="98"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="404"
-      mnc="98"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="01"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="01"
-      apn="rcomnet"
-      type="default,supl"
-  />
-<apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="03"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="03"
-      apn="rcomnet"
-      type="default,supl"
-  />
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="04"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="04"
-      apn="rcomnet"
-      type="default,supl"
-  />
-  <apn carrier="Reliance"
-      mcc="405"
-      mnc="05"
-      apn="rcomnet"
-      type="default,supl"
-  />
-  	
-  <apn carrier="Reliance MMS"
-      mcc="405"
-      mnc="05"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-   <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="06"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="06"
-      apn="rcomnet"
-      type="default,supl"
-  />
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="07"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="07"
-      apn="rcomnet"
-      type="default,supl"
-  />
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="08"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="08"
-      apn="rcomnet"
-      type="default,supl"
-  />
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="09"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="09"
-      apn="rcomnet"
-      type="default,supl"
-  />
-<apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="10"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="10"
-      apn="rcomnet"
-      type="default,supl"
-  /> 
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="11"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="11"
-      apn="rcomnet"
-      type="default,supl"
-  />
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="12"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="12"
-      apn="rcomnet"
-      type="default,supl"
-  />
- <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="13"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="13"
-      apn="rcomnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="14"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="14"
-      apn="rcomnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="15"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="15"
-      apn="rcomnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="17"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="17"
-      apn="rcomnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="18"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="18"
-      apn="rcomnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="19"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="19"
-      apn="rcomnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="20"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="20"
-      apn="rcomnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="21"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="21"
-      apn="rcomnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="22"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="22"
-      apn="rcomnet"
-      type="default,supl"
-  />
-
-  <apn carrier="Reliance RCOM MMS"
-      mcc="405"
-      mnc="23"
-      apn="rcommms"
-      mmsc="http://mmsc.rcom.co.in/mms/"
-      mmsproxy="10.239.221.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Reliance RCOM"
-      mcc="405"
-      mnc="23"
-      apn="rcomnet"
-      type="default,supl"
-  />
-  
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="025"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="025"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="026"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="026"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="027"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="027"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="028"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="028"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="029"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="029"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="030"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-  	
-  <apn carrier="TataDOCOMO DIVE-IN"
-      mcc="405"
-      mnc="030"
-      apn="TATA.DOCOMO.DIVE.IN"
-      proxy="10.124.94.7"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="030"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-<apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="031"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="031"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="032"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="032"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="033"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="033"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-﻿ <apn carrier="TATA DoCoMo" 
-      mcc="405" 
-      mnc="034" 
-      apn="TATA.DOCOMO.INTERNET" 
-      type="default,supl" 
-  /> 
- 
-<apn carrier="TATA DoCoMo MMS" 
-     mcc="405" 
-     mnc="034" 
-     apn="TATA.DOCOMO.MMS" 
-     mmsc="http://mmsc/" 
-     mmsproxy="10.124.26.94" 
-     mmsport="8799" 
-     type="mms" 
-/>
-
-<apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="035"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="035"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="036"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="036"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-<apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="037"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="037"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-<apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="038"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="038"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TATA DOCOMO INTERNET"
-      mcc="405"
-      mnc="039"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="TATA DOCOMO MMS"
-      mcc="405"
-      mnc="039"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-      protocol="IPV4V6"
-  />
-
-<apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="040"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="040"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="041"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="041"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="042"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="042"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="043"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="043"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Tata DOCOMO"
-      mcc="405"
-      mnc="044"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="Tata DOCOMO MMS"
-      mcc="405"
-      mnc="044"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="44"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="44"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="045"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="045"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="046"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="046"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TataDOCOMO"
-      mcc="405"
-      mnc="047"
-      apn="TATA.DOCOMO.INTERNET"
-      type="default,supl"
-  />
-
-  <apn carrier="TataDOCOMO MMS"
-      mcc="405"
-      mnc="047"
-      apn="TATA.DOCOMO.MMS"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="TATA DOCOMO INTERNET"
-      mcc="405"
-      mnc="025"
-      apn="Tata.Docomo.internet"
-      mmsc="http://mmsc/"
-      mmsproxy="10.124.26.94"
-      mmsport="8799"
-      type="default,supl,mms"
-      protocol="IP"
-  />
-
-<apn carrier="Airtel"
-      mcc="405"
-      mnc="51"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="405"
-      mnc="51"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="405"
-      mnc="51"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="405"
-      mnc="52"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="405"
-      mnc="52"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="405"
-      mnc="52"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="405"
-      mnc="53"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="405"
-      mnc="53"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="405"
-      mnc="53"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="405"
-      mnc="54"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="405"
-      mnc="54"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="405"
-      mnc="54"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="405"
-      mnc="55"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="405"
-      mnc="55"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="405"
-      mnc="55"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Airtel"
-      mcc="405"
-      mnc="56"
-      apn="airtelgprs.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="405"
-      mnc="56"
-      apn="airtelmms.com"
-      mmsc="http://100.1.201.171:10021/mmsc"
-      mmsproxy="100.1.201.172"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="405"
-      mnc="56"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="405"
-      mnc="66"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="405"
-      mnc="66"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="405"
-      mnc="66"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="405"
-      mnc="67"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="405"
-      mnc="67"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="405"
-      mnc="67"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="70"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="70"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-  <apn carrier="Vodafone MMS"
-      mcc="405"
-      mnc="750"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="405"
-      mnc="750"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="405"
-      mnc="750"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-<apn carrier="Vodafone MMS"
-      mcc="405"
-      mnc="751"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="405"
-      mnc="751"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="405"
-      mnc="751"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="405"
-      mnc="752"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="405"
-      mnc="752"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="405"
-      mnc="752"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="405"
-      mnc="753"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="405"
-      mnc="753"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="405"
-      mnc="753"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="405"
-      mnc="754"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="405"
-      mnc="754"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="405"
-      mnc="754"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="405"
-      mnc="755"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="405"
-      mnc="755"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="405"
-      mnc="755"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodafone MMS"
-      mcc="405"
-      mnc="756"
-      apn="portalnmms"
-      mmsc="http://mms1.live.vodafone.in/mms/"
-      mmsproxy="10.10.1.100"
-      mmsport="9401"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone Connect"
-      mcc="405"
-      mnc="756"
-      apn="www"
-      type="default,supl"
-  />
-
-  <apn carrier="VodafoneLive!"
-      mcc="405"
-      mnc="756"
-      apn="portalnmms"
-      proxy="10.10.1.100"
-      port="9401"
-      type="default,supl"
-  />
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="799"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="799"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-  <apn carrier="AIRCEL"
-      mcc="405"
-      mnc="800"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-  
-  <apn carrier="AIRCEL WAP"
-      mcc="405"
-      mnc="800"
-      apn="aircelwap"
-      proxy="172.17.83.69"
-      port="8080"
-      type="default,supl"
-  />
-  
-  <apn carrier="AIRCEL MMS"
-      mcc="405"
-      mnc="800"
-      apn="aircelmms"
-      mmsc="http://172.17.83.67/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-  <apn carrier="AIRCEL South"
-      mcc="405"
-      mnc="801"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL South MMS"
-      mcc="405"
-      mnc="801"
-      apn="aircelmms"
-      mmsc="http://mmsc/mmrelay.app"
-      mmsproxy="192.168.35.196"
-      mmsport="8081"
-      type="mms"
-  />
-  
-  <apn carrier="AIRCEL Central"
-      mcc="405"
-      mnc="802"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL Central MMS"
-      mcc="405"
-      mnc="802"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-  <apn carrier="AIRCEL"
-      mcc="405"
-      mnc="803"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL MMS"
-      mcc="405"
-      mnc="803"
-      apn="aircelmms"
-      mmsc="http://mmsc/mmrelay.app"
-      mmsproxy="192.168.35.196"
-      mmsport="8081"
-      type="mms"
-  />
-  <apn carrier="AIRCEL ROI"
-      mcc="405"
-      mnc="804"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL ROI MMS"
-      mcc="405"
-      mnc="804"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL ROI"
-      mcc="405"
-      mnc="805"
-      apn="aircelgprs"
-      mmsc="http://myaircel.com"
-      proxy="0.0.0.0"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL ROI MMS"
-      mcc="405"
-      mnc="805"
-      apn="aircelmms"
-      mmsc="http://172.17.83.67/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL Central"
-      mcc="405"
-      mnc="806"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL Central MMS"
-      mcc="405"
-      mnc="806"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL Central"
-      mcc="405"
-      mnc="807"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL Central MMS"
-      mcc="405"
-      mnc="807"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL Central"
-      mcc="405"
-      mnc="808"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL Central MMS"
-      mcc="405"
-      mnc="808"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL South"
-      mcc="405"
-      mnc="809"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL South MMS"
-      mcc="405"
-      mnc="809"
-      apn="aircelmms"
-      mmsc="http://mmsc/mmrelay.app"
-      mmsproxy="192.168.35.196"
-      mmsport="8081"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL ROI"
-      mcc="405"
-      mnc="810"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-  
-  <apn carrier="AIRCEL ROI MMS"
-      mcc="405"
-      mnc="810"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL ROI"
-      mcc="405"
-      mnc="811"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL ROI MMS"
-      mcc="405"
-      mnc="811"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIRCEL Central"
-      mcc="405"
-      mnc="812"
-      apn="aircelgprs"
-      type="default,supl"
-  />
-
-  <apn carrier="AIRCEL Central MMS"
-      mcc="405"
-      mnc="812"
-      apn="aircelmms"
-      mmsc="http://10.50.1.166/servlets/mms"
-      mmsproxy="172.17.83.69"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="813"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="813"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="814"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="814"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="815"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="815"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="816"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="816"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="817"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="817"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="818"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="818"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="819"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="819"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="820"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="UNINOR WAP"
-      mcc="405"
-      mnc="820"
-      apn="uninor"
-      proxy="10.58.10.58"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="UNINOR Internet"
-      mcc="405"
-      mnc="820"
-      apn="uninor"
-      type="default,cmmail"
-  />
-
-  <apn carrier="UNINOR MMS"
-      mcc="405"
-      mnc="820"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="821"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="821"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="822"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="822"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="823"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="823"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="824"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="824"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="825"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="825"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="826"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="826"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="827"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="827"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="828"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="828"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="829"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="829"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="830"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="830"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="831"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="831"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="832"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="832"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="833"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="833"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="834"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="834"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="835"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="835"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="836"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="836"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="837"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="837"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="838"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="838"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="839"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="839"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="840"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="840"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="841"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="841"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="842"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="842"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="843"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="843"
-      apn="vinternet.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="844"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="844"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="845"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="845"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="846"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="846"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="847"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="847"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="848"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="848"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="849"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="849"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="850"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="850"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="851"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="851"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="852"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="852"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="853"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="853"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="840"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="854"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="855"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="856"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="857"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="858"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="859"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="860"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="861"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="862"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="863"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="864"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="865"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="866"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="867"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="868"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="869"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="870"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="871"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="872"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="873"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Jionet"
-      mcc="405"
-      mnc="874"
-      apn="Jionet"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="840"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="854"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="855"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="856"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="857"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="858"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="859"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="860"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="861"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="862"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="863"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="864"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="865"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="866"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="867"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="868"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="869"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="870"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="871"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="872"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="873"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Ims"
-      mcc="405"
-      mnc="874"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="875"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="875"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="876"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="876"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="877"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="877"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="878"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="878"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="879"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="879"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="880"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="880"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="STEL"
-      mcc="405"
-      mnc="881"
-      apn="gprs.stel.in"
-      type="default,supl"
-  />
-      
-  <apn carrier="STEL"
-      mcc="405"
-      mnc="882"
-      apn="gprs.stel.in"
-      type="default,supl"
-  />
-
-  <apn carrier="STEL"
-      mcc="405"
-      mnc="883"
-      apn="gprs.stel.in"
-      type="default,supl"
-  />
-
-  <apn carrier="STEL"
-      mcc="405"
-      mnc="884"
-      apn="gprs.stel.in"
-      type="default,supl"
-  />
-
-  <apn carrier="STEL"
-      mcc="405"
-      mnc="885"
-      apn="gprs.stel.in"
-      type="default,supl"
-  />
-
-  <apn carrier="STEL"
-      mcc="405"
-      mnc="886"
-      apn="gprs.stel.in"
-      type="default,supl"
-  />
-
-  <apn carrier="MTS internet"
-      mcc="405"
-      mnc="89"
-      apn="#777"
-      user="internet@internet.mtsindia.in"
-      password="MTS"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="908"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="908"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="909"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="909"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="910"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="910"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEA"
-      mcc="405"
-      mnc="911"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEA MMS"
-      mcc="405"
-      mnc="911"
-      apn="mmsc"
-      mmsc="http://10.4.42.21:8002/"
-      mmsproxy="10.4.42.15"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="925"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="925"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="926"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="926"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="927"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="927"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="928"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="928"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Telenor Internet"
-      mcc="405"
-      mnc="929"
-      apn="telenor"
-      type="default"
-  />
-
-  <apn carrier="Uninor MMS"
-      mcc="405"
-      mnc="929"
-      apn="uninor"
-      mmsc="http://10.58.2.120"
-      mmsproxy="10.58.10.59"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Videocon MMS"
-      mcc="405"
-      mnc="932"
-      apn="vgprs.com"
-      mmsc="http://10.202.4.119:10021/mmsc/"
-      mmsproxy="10.202.5.145"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Videocon"
-      mcc="405"
-      mnc="932"
-      apn="vinternet.com"
-      type="default,supl"
-  />    
-  
-  
- <apn carrier="Mobilink"
-      mcc="410"
-      mnc="01"
-      apn="jazzwap.mobilinkworld.com"
-      proxy="172.24.97.29"
-      port="8080"
-      type="default,supl"
-  />    
-  
- <apn carrier="Mobilink-MMS"
-      mcc="410"
-      mnc="01"
-      apn="mms.mobilinkworld.com"
-      user="mobilink"
-      password="mobilink"
-      mmsc="HTTP://mms/"
-      mmsproxy="172.25.20.12"
-      mmsport="8080"
-      type="mms"
-  /> 
-  
- <apn carrier="Mobilink-Internet"
-      mcc="410"
-      mnc="01"
-      apn="Jazzconnect.mobilinkworld.com"
-      proxy="172.24.97.29"
-      port="8080"
-      type="default,supl"
-  />  
-  
- <apn carrier="Ufone"
-      mcc="410"
-      mnc="03"
-      apn="ufone.pwap"
-      user="Ufone"
-      password="Ufone"
-      proxy="172.16.13.26"
-      port="8080"
-      type="default,supl"
-  />    
- 
- <apn carrier="Ufone-MMS"
-      mcc="410"
-      mnc="03"
-      apn="ufone.pmms"
-      mmsc="http://www.ufonemms.com:80"
-      mmsproxy="172.16.13.27"
-      mmsport="8080"
-      type="mms"
-  /> 
-  
- <apn carrier="Ufone-Internet"
-      mcc="410"
-      mnc="03"
-      apn="ufone.pinternet"
-      user="Ufone"
-      password="ufone"
-      proxy="172.16.13.26"
-      port="8080"
-      type="default,supl"
-  />  
-  
- <apn carrier="Zong"
-      mcc="410"
-      mnc="04"
-      apn="Zongwap"
-      proxy="10.81.6.33"
-      port="8000"
-      type="default,supl"
-  />    
- 
- <apn carrier="Zong-MMS"
-      mcc="410"
-      mnc="04"
-      apn="zongmms"
-      mmsc="http://10.81.6.11:8080"
-      mmsproxy="10.81.6.33"
-      mmsport="8000"
-      type="mms"
-  /> 
-  
- <apn carrier="Zong-Internet"
-      mcc="410"
-      mnc="04"
-      apn="zonginternet"
-      proxy="10.81.6.33"
-      port="8000"
-      type="default,supl"
-  />  
-  
- <apn carrier="Telenor"
-      mcc="410"
-      mnc="06"
-      apn="wap"
-      user="Telenor"
-      password="Telenor"
-      proxy="172.18.19.11"
-      port="8080"
-      type="default,supl"
-  />    
- 
- <apn carrier="Telenor-MMS"
-      mcc="410"
-      mnc="06"
-      apn="mms"
-      user="Telenor"
-      password="Telenor"
-      mmsc="http://mmstelenor"
-      mmsproxy="172.18.19.11"
-      mmsport="8080"
-      type="mms"
-  /> 
-  
- <apn carrier="Telenor-Internet"
-      mcc="410"
-      mnc="06"
-      apn="internet"
-      user="Telenor"
-      password="Telenor"
-      proxy="172.18.19.11"
-      port="8080"
-      type="default,supl"
-  /> 
-  
-  <apn carrier="Warid"
-      mcc="410"
-      mnc="07"
-      apn="wap.warid"
-      proxy="10.4.2.1"
-      port="8080"
-      type="default,supl"
-  />    
-  
- <apn carrier="Warid-MMS"
-      mcc="410"
-      mnc="07"
-      apn="mms.warid"
-      mmsc="http://10.4.0.132/servlets/mms"
-      mmsproxy="10.4.2.1"
-      mmsport="8080"
-      type="mms"
-  /> 
-  
- <apn carrier="Warid-Internet"
-      mcc="410"
-      mnc="07"
-      apn="wap.warid"
-      proxy="10.4.2.1"
-      port="8080"
-      type="default,supl"
-  />  
-
-  <apn carrier="Mobitel"
-      mcc="413"
-      mnc="01"
-      apn="mobitel"
-      type="default,supl"
-  />    
-  
- <apn carrier="Mobitel MMS"
-      mcc="413"
-      mnc="01"
-      apn="mobitel"
-      mmsc="http://192.168.050.165"
-      type="mms"
-  />    
-  
- <apn carrier="Dialog Postpaid"
-      mcc="413"
-      mnc="02"
-      apn="Dialogbb"
-      type="default,supl"
-  />
-  
-  <apn carrier="Dialog MMS-Postpaid"
-      mcc="413"
-      mnc="02"
-      apn="Dialogbb"
-      mmsc="http://mms.dialog.lk:3130/mmsc"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="413"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Etisalat"
-      mcc="413"
-      mnc="03"
-      apn="ebb"
-      type="default,supl"
-  />
-
- <apn carrier="Etisalat MMS"
-      mcc="413"
-      mnc="03"
-      apn="ebb"
-      mmsc="http://mms.etisalat.lk:8085"
-      type="mms"
-  />
-  
-  <apn carrier="AirTel"
-      mcc="413"
-      mnc="05"
-      apn="AirtelLive"
-      type="default,supl"
-  />
-  
- <apn carrier="AirTel MMS"
-      mcc="413"
-      mnc="05"
-      apn="AirtelLive"
-      mmsc="http://mms.Airtel.lk"
-      type="mms"
-  />
-
-  <apn carrier="Hutch"
-      mcc="413"
-      mnc="08"
-      apn="hu"
-      type="default,supl"
-  />
-  
-  <apn carrier="MPT"
-      mcc="414"
-      mnc="01"
-      apn="mptnet"
-      authenticationtype="PAP"
-      user="mptnet"
-      password="12345"
-      type="default,supl"
-  />
-
-  <apn carrier="Telenor"
-      mcc="414"
-      mnc="06"
-      apn="wap"
-      proxy="10.3.0.14"
-      port="8080"
-      type="default,supl"
-  />
-
- <apn carrier="Telenor-MMS"
-      mcc="414"
-      mnc="06"
-      apn="mms"
-      mmsc="http://10.3.3.38:19090/was"
-      mmsproxy="10.3.0.13"
-      mmsport="8080"
-      type="mms"
-  />
-  
- <apn carrier="Telenor-Internet"
-      mcc="414"
-      mnc="06"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Alfa"
-      mcc="415"
-      mnc="01"
-      apn="internet.mic1.com.lb"
-      user="mic1"
-      password="mic1"
-      type="default,supl"
-  />    
-
- <apn carrier="Alfa MMS"
-      mcc="415"
-      mnc="01"
-      apn="mms.mic1.com.lb"
-      user="mic1"
-      password="mic1"
-      mmsc="http://mms.mic1.com.lb"
-      mmsproxy="192.168.23.51"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="MTC Touch"
-      mcc="415"
-      mnc="03"
-      apn="gprs.mtctouch.com.lb"
-      type="default,supl"
-  />    
-
- <apn carrier="MTC Touch MMS"
-      mcc="415"
-      mnc="03"
-      apn="mms.mtctouch.com.lb"
-      mmsc="http://mms:8080/mms/"
-      mmsproxy="192.168.4.103"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="Zain JO"
-      mcc="416"
-      mnc="01"
-      apn="internet"
-      type="default,supl"
-  />    
-
- <apn carrier="Zain JO MMS"
-      mcc="416"
-      mnc="01"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.jo.zain.com"
-      mmsproxy="192.168.55.10"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Umniah"
-      mcc="416"
-      mnc="03"
-      apn="net"
-      type="default,supl"
-  />    
-
- <apn carrier="Umniah MMS"
-      mcc="416"
-      mnc="03"
-      apn="mms"
-      mmsc="http://mms.umniah.com/"
-      mmsproxy="10.1.1.10"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="Orange JO"
-      mcc="416"
-      mnc="77"
-      apn="inet.orange.jo"
-      user="net"
-      password="net"
-      type="default,supl"
-  />    
-
- <apn carrier="Orange JO MMS"
-      mcc="416"
-      mnc="77"
-      apn="mms.orangemobile.jo"
-      user="mmc"
-      password="mmc"
-      mmsc="http://172.16.1.96/servlets/mms"
-      mmsproxy="172.16.1.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Syriatel"
-      mcc="417"
-      mnc="01"
-      apn="net.syriatel.com"
-      proxy="172.20.5.6"
-      port="8080"
-      type="default,supl"
-  />    
-
- <apn carrier="Syriatel MMS"
-      mcc="417"
-      mnc="01"
-      apn="mms.syriatel.com"
-      mmsc="http://mymms.syriatel.com/"
-      mmsproxy="172.20.5.6"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="MTN Internet"
-      mcc="417"
-      mnc="02"
-      apn=""
-      type="default,supl"
-  />    
-
- <apn carrier="MTN MMS"
-      mcc="417"
-      mnc="02"
-      apn="mms"
-      mmsc="http://mms/"
-      mmsproxy="10.110.0.134"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Zain IQ"
-      mcc="418"
-      mnc="20"
-      apn="internet"
-      type="default,supl"
-  />
-
- <apn carrier="Zain IQ MMS"
-      mcc="418"
-      mnc="20"
-      apn="mms"
-      mmsc="http://mms:8002/"
-      mmsproxy="172.29.11.12"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Zain IQ"
-      mcc="418"
-      mnc="30"
-      apn="internet"
-      type="default,supl"
-  />
-
- <apn carrier="Zain IQ MMS"
-      mcc="418"
-      mnc="30"
-      apn="mms"
-      mmsc="http://mms:8002/"
-      mmsproxy="172.29.11.12"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Korek"
-      mcc="418"
-      mnc="40"
-      apn="internet.korek.com"
-      user="korek"
-      password="korek"
-      type="default,supl"
-  />
-
-  <apn carrier="Zain KW"
-      mcc="419"
-      mnc="02"
-      apn="pps"
-      user="pps"
-      password="pps"
-      type="default,supl"
-  />
-
- <apn carrier="Zain KW MMS"
-      mcc="419"
-      mnc="02"
-      apn="pps"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.zain"
-      mmsproxy="176.0.0.65"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Wataniya"
-      mcc="419"
-      mnc="03"
-      apn="action.wataniya.com"
-      type="default,supl"
-  />
-
- <apn carrier="Wataniya MMS"
-      mcc="419"
-      mnc="03"
-      apn="mms.wataniya.com"
-      mmsc="http://action.wataniya.com"
-      mmsproxy="194.126.53.64"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Viva KW"
-      mcc="419"
-      mnc="04"
-      apn="viva"
-      type="default,supl"
-  />
-  
- <apn carrier="Viva KW MMS"
-      mcc="419"
-      mnc="04"
-      apn="viva"
-      mmsc="http://172.16.128.80:38090/was"
-      mmsproxy="172.16.128.228"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="STC"
-      mcc="420"
-      mnc="01"
-      apn="jawalnet.com.sa"
-      type="default,supl"
-  />
-
- <apn carrier="STC MMS"
-      mcc="420"
-      mnc="01"
-      apn="mms.net.sa"
-      mmsc="http://mms.net.sa:8002/"
-      mmsproxy="10.1.1.1"
-      mmsport="9201"
-      type="mms"
-  />
-
- <apn carrier="jawalnet.com.sa"
-      mcc="420"
-      mnc="01"
-      apn="jawalnet.com.sa"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="STC KSA IMS"
-      mcc="420"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Mobily"
-      mcc="420"
-      mnc="03"
-      apn="wap1"
-      type="default,supl"
-  />
-  
- <apn carrier="Mobily MMS"
-      mcc="420"
-      mnc="03"
-      apn="mms1"
-      mmsc="http://10.3.3.133:9090/was"
-      mmsproxy="10.3.2.133"
-      mmsport="8080"
-      type="mms"
-  />	
-
-  <apn carrier="zain-Internet Wap"
-      mcc="420"
-      mnc="04"
-      apn="zain"
-      type="default,supl"
-  />
-
-  <apn carrier="zain-mms"
-      mcc="420"
-      mnc="04"
-      apn="zainmms"
-      mmsc="http://10.122.200.12:8002"
-      mmsproxy="10.122.200.10"
-      mmsport="8080"
-      type="mms"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="zain-xcap"
-      mcc="420"
-      mnc="04"
-      apn="xcap"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Zain KSA IMS"
-      mcc="420"
-      mnc="04"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Oman Mobile"
-      mcc="422"
-      mnc="02"
-      apn="wap"
-      user="wap"
-      password="wap"
-      type="default,supl"
-  />
-  
- <apn carrier="Oman Mobile MMS"
-      mcc="422"
-      mnc="02"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://mmsc.omanmobile.com:10021/mmsc"
-      mmsproxy="192.168.203.35"
-      mmsport="9201"
-      type="mms"
-  />
-  
-  <apn carrier="Nawras"
-      mcc="422"
-      mnc="03"
-      apn="isp.nawras.com.om"
-      user="test"
-      password="test"
-      type="default,supl"
-  />
-  
- <apn carrier="Nawras MMS"
-      mcc="422"
-      mnc="03"
-      apn="mms.nawras.com.om"
-      user="test"
-      password="test"
-      mmsc="http://10.128.240.16/servlets/mms"
-      mmsproxy="10.128.240.19"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Etisalat postpaid-GPRS"
-      mcc="424"
-      mnc="01"
-      apn="ewap"
-      user="ewap"
-      password="ewap"
-      type="default,supl"
-  />
-
-  <apn carrier="DATA Package"
-      mcc="424"
-      mnc="02"
-      apn="etisalat.ae"
-      type="default,supl"
-
-  />
-
-  <apn carrier="Etisalat ims"
-      mcc="424"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-
-  />
-
-  <apn carrier="Etisalat MMS"
-      mcc="424"
-      mnc="02"
-      apn="etisalat"
-      mmsc="http://mms/servlets/mms"
-      mmsproxy="10.12.0.32"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Du"
-      mcc="424"
-      mnc="03"
-      apn="du"
-      mmsc="http://mms.du.ae"
-      mmsproxy="10.19.18.4"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="ims"
-      mcc="424"
-      mnc="03"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="3G"
-      mcc="425"
-      mnc="01"
-      apn="uwap.orange.co.il"
-      user="orange"
-      password="mobile54"
-      proxy="192.118.11.56"
-      port="8080"
-      type="default,supl"
-  />
-  
- <apn carrier="3G MMS"
-      mcc="425"
-      mnc="01"
-      apn="uwap.orange.co.il"
-      user="orange"
-      password="mobile54"
-      mmsc="http://192.168.220.15/servlets/mms"
-      mmsproxy="192.118.11.55"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Cellcom"
-      mcc="425"
-      mnc="02"
-      apn="wapu"
-      type="default,supl"
-  />
-  
- <apn carrier="Cellcom MMS"
-      mcc="425"
-      mnc="02"
-      apn="mms"
-      mmsc="http://vwapm2.ain.co.il"
-      mmsproxy="10.19.18.4"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Portal Pelephone"
-      mcc="425"
-      mnc="03"
-      apn="internet.pelephone.net.il"
-      user="pcl@3g"
-      password="pcl"
-      type="default,supl"
-  />
-  
- <apn carrier="Multimedia Pelephone"
-      mcc="425"
-      mnc="03"
-      apn="mms.pelephone.net.il"
-      user="pcl@3g"
-      password="pcl"
-      mmsc="http://mmsu.pelephone.net.il"
-      mmsproxy="10.170.252.104"
-      mmsport="9093"
-      type="mms"
-  />
-  
-  <apn carrier="Jawwal"
-      mcc="425"
-      mnc="05"
-      apn="wap"
-      proxy="213.244.118.129"
-      port="8080"
-      type="default,supl"
-  />
-  
- <apn carrier="Jawwal MMS"
-      mcc="425"
-      mnc="05"
-      apn="mms"
-      mmsc="http://mms.jawwal.ps/servlets/mms"
-      mmsproxy="213.244.118.129"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Batelco Internet"
-      mcc="426"
-      mnc="01"
-      apn="internet.batelco.com"
-      type="default,supl"
-  />
-
-  <apn carrier="Batelco MMS"
-      mcc="426"
-      mnc="01"
-      apn="mms.batelco.com"
-      user="wap"
-      password="wap"
-      mmsc="http://192.168.36.10/servlets/mms"
-      mmsproxy="192.168.1.2"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Zain NET"
-      mcc="426"
-      mnc="02"
-      apn="internet"
-      user="internet"
-      password="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Zain MMS"
-      mcc="426"
-      mnc="02"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsc="http://172.18.83.129"
-      mmsproxy="172.18.85.34"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Beeline-Uz-GPRSWAP"
-      mcc="434"
-      mnc="04"
-      apn="wap.beeline.uz"
-      user="beeline"
-      password="beeline"
-      proxy="172.30.30.166"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="Beeline-Uz-MMS"
-      mcc="434"
-      mnc="04"
-      apn="mms.beeline.uz"
-      user="beeline"
-      password="beeline"
-      mmsc="http://mms"
-      mmsproxy="172.30.30.166"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="UCELL WAPGPRS"
-      mcc="434"
-      mnc="05"
-      apn="wap"
-      proxy="10.64.164.10"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="UCELL MMS"
-      mcc="434"
-      mnc="05"
-      apn="mms"
-      mmsc="http://mmsc:8002/"
-      mmsproxy="10.64.164.10"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="MTS-Uzb-GPRSWAP"
-      mcc="434"
-      mnc="07"
-      apn="wap.mts.uz"
-      proxy="10.10.0.10"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="MTS-Uzb-MMS"
-      mcc="434"
-      mnc="07"
-      apn="mms.mts.uz"
-      mmsc="http://mmsc/was"
-      mmsproxy="10.10.0.10"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="mopera"
-      mcc="440"
-      mnc="10"
-      apn="mopera.net"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="mopera U(Biz・ホーダ〿"
-      mcc="440"
-      mnc="10"
-      apn="mpr2.bizho.net"
-      type="default,supl,mms"
-  />
-  
-﻿  <apn carrier="b-mobile"
-      mcc="440"
-      mnc="10"
-      apn="bmobile.ne.jp"
-      user="bmobile@fr" 
-      password="bmobile"
-      authtype="3"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="440"
-      mnc="10"
-      apn="ims"
-      type="ia,ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Softbank(open)"
-      mcc="440"
-      mnc="20"
-      apn="open.softbank.ne.jp"
-      user="opensoftbank"
-      password="ebMNuX1FIHg9d3DA"
-      mmsc="http://mms/"
-      mmsproxy="mmsopen.softbank.ne.jp"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Softbank(smile.world)"
-      mcc="440"
-      mnc="20"
-      apn="smile.world"
-      user="dna1trop"
-      password="so2t3k3m2a"
-      mmsc="http://mms/"
-      mmsproxy="smilemms.softbank.ne.jp"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="KDDI"
-      mcc="440"
-      mnc="51"
-      apn="au.au-net.ne.jp"
-      user="user@au.au-net.ne.jp"
-      password="au"
-      type="default"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="KDDI"
-      mcc="440"
-      mnc="51"
-      apn="IMS"
-      type="ia,ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="KDDI"
-      mcc="440"
-      mnc="54"
-      apn="au.au-net.ne.jp"
-      user="user@au.au-net.ne.jp"
-      password="au"
-      type="default"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="KDDI"
-      mcc="440"
-      mnc="54"
-      apn="IMS"
-      type="ia,ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="SKT LTE"
-      mcc="450"
-      mnc="05"
-      apn="lte.sktelecom.com"
-      mmsc="http://omms.nate.com:9082/oma_mms"
-      mmsproxy="lteoma.nate.com"
-      mmsport="9093"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="SKT 3G"
-      mcc="450"
-      mnc="05"
-      apn="web.sktelecom.com"
-      mmsc="http://omms.nate.com:9082/oma_mms"
-      mmsproxy="smart.nate.com"
-      mmsport="9093"
-      authtype="3"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="LGE Uplus(U+)"
-      mcc="450"
-      mnc="06"
-      apn="internet.lguplus.co.kr"
-      mmsc="http://omammsc.uplus.co.kr:9084"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="KT LTE"
-      mcc="450"
-      mnc="08"
-      apn="lte.ktfwing.com"
-      mmsc="http://mmsc.ktfwing.com:9082"
-      type="default,supl,mms"
-  />
-  
-  <apn carrier="KT 3G"
-      mcc="450"
-      mnc="08"
-      apn="alwayson.ktfwing.com"
-      mmsc="http://mmsc.ktfwing.com:9082"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="Mobifone" 
-  	mcc="452" 
-  	mnc="01" 
-  	apn="m-wap" 
-  	user="mms" 
-  	type="default,supl" 
-  />
-  
-	<apn carrier="Mobifone MMS" 
-		mcc="452" 
-		mnc="01" 
-		apn="m-i090" 
-		user="mms" 
-		mmsc="http://203.162.21.114/mmsc" 
-		mmsproxy="203.162.21.114" 
-		mmsport="3130" 
-		type="mms" 
-	/>
-	
-  <apn carrier="Vinaphone" 
-  	mcc="452" 
-  	mnc="02" 
-  	apn="m3-world" 
-  	user="mms" 
-  	type="default,supl" 
-  />
-
- <apn carrier="Vinaphone MMS" 
-  	mcc="452" 
-  	mnc="02" 
-  	apn="m3-mms" 
-  	user="mms" 
-  	password="mms" 
-  	mmsc="http://mms.vinaphone.com.vn" 
-  	mmsproxy="10.1.10.46" 
-  	mmsport="8000" 
-  	type="mms" 
-  />
-  
-  <apn carrier="Viettelmobile" 
-  	mcc="452" 
-  	mnc="04" 
-  	apn="v-internet" 
-  	type="default,supl" 
-  />
-  
-  <apn carrier="Viettelmobile MMS" 
-  	mcc="452" 
-  	mnc="04" 
-  	apn="v-mms" 
-  	mmsc="http://mms.viettelmobile.com.vn/mms/wapenc" 
-  	mmsproxy="192.168.233.10" 
-  	mmsport="8080" 
-  	type="mms" 
-  />
-  
-  <apn carrier="Vietnamobile" 
-  	mcc="452" 
-  	mnc="05" 
-  	apn="internet" 
-  	type="default,supl" 
-  />
-  
-  <apn carrier="Vietnamobile MMS" 
-  	mcc="452" 
-  	mnc="05" 
-  	apn="mms" 
-  	mmsc="http://10.10.128.58/servlets/mms" 
-  	mmsproxy="10.10.128.44" 
-  	mmsport="8080" 
-  	type="mms" 
-  />
-    
-  <apn carrier="BeeLine" 
-  	mcc="452" 
-  	mnc="07" 
-  	user="mms" 
-  	apn="internet" 
-  	type="default,supl" 
-  />
-  
-  <apn carrier="Beeline MMS" 
-  	mcc="452" 
-  	mnc="07" 
-  	apn="mms" 
-  	user="mms" 
-  	password="mms" 
-  	mmsc="http://mms" 
-  	mmsproxy="10.16.70.199" 
-  	mmsport="8080" 
-  	type="mms" 
-  />
- 
-  <apn carrier="CSL Data"
-      mcc="454"
-      mnc="00"
-      apn="hkcsl"
-      proxy="192.168.59.51" 
-      port="8080" 
-      mmsc="http://192.168.58.171:8002"
-      mmsproxy="192.168.59.51"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="454"
-      mnc="00"
-      apn="ims"
-      type="ims"
-  />
-
-  <apn carrier="CTEXCEL"
-      mcc="454"
-      mnc="00"
-      apn="ctexcel"
-      authtype="3"
-      type="default,dun,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      mvno_type="spn"
-      mvno_match_data="CTExcel"
-  />
-
-  <apn carrier="IMS"
-      mcc="454"
-      mnc="00"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      mvno_type="spn"
-      mvno_match_data="CTExcel"
-  />
-
-  <apn carrier="CSL GPRS"
-      mcc="454"
-      mnc="02"
-      apn="hkcsl"
-      proxy="192.168.59.51"
-      port="8080"
-      mmsc="http://192.168.58.171:8002"
-      mmsproxy="192.168.59.51"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="3 LTE"
-      mcc="454"
-      mnc="03"
-      apn="mobile.lte.three.com.hk"
-      mmsc="http://mms.um.three.com.hk:10021/mmsc"
-      mmsproxy="172.20.97.116"
-      mmsport="8799"
-      type="default,supl,mms"
-      authtype="1"
-  />
-
-  <apn carrier="3-HK"
-      mcc="454"
-      mnc="03"
-      apn="mobile.three.com.hk"
-      mmsc="http://mms.um.three.com.hk:10021/mmsc"
-      mmsproxy="mms.three.com.hk"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="454"
-      mnc="03"
-      apn="ims.lte.three.com.hk"
-      type="ims"
-  />
-
-  <apn carrier="IMS"
-      mcc="454"
-      mnc="03"
-      apn="IMS"
-      type="ims"
-      mvno_type="spn"
-      mvno_match_data="中国电信"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="CTNET"
-      mcc="454"
-      mnc="03"
-      apn="ctnet"
-      authtype="3"
-      user="ctnet@mycdma.cn"
-      password="vnet.mobi"
-      type="default,dun,xcap"
-      mvno_type="spn"
-      mvno_match_data="中国电信"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="454"
-      mnc="04"
-      apn="IMS"
-      type="ims"
-      mvno_type="spn"
-      mvno_match_data="中国电信"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-﻿  <apn carrier="CTNET"
-      mcc="454"
-      mnc="04"
-      apn="ctnet"
-      authtype="3"
-      user="ctnet@mycdma.cn"
-      password="vnet.mobi"
-      type="default,dun,xcap"
-      mvno_type="spn"
-      mvno_match_data="中国电信"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="3 (2G) MMS"
-      mcc="454"
-      mnc="04"
-      apn="mms-g.three.com.hk"
-      mmsc="http://10.30.15.51:10021/mmsc"
-      mmsproxy="10.30.15.53"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="3 (2G)"
-      mcc="454"
-      mnc="04"
-      apn="web-g.three.com.hk"
-      type="default,supl"
-  />
-
-  <apn carrier="SmarTone"
-      mcc="454"
-      mnc="06"
-      apn="smartone"
-      mmsc="http://mms.smartone.com/server"
-      mmsproxy="10.9.9.9"
-      mmsport="8080"
-      type="default,supl,mms"
-      authtype="2"
-  />
-
-  <apn carrier="SMC-Voda Internet"
-      mcc="454"
-      mnc="06"
-      apn="SmarTone-Vodafone"
-      mmsc="http://mms.smartone-vodafone.com/server"
-      mmsproxy="10.9.9.9"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="454"
-      mnc="06"
-      apn="ims"
-      type="ims"
-  />
-
-  <apn carrier="3gnet"
-      mcc="454"
-      mnc="07"
-      apn="3gnet"
-      type="default,supl"
-  />
-
-  <apn carrier="one2free 2G"
-      mcc="454"
-      mnc="10"
-      apn="hkcsl"
-      mmsc="http://192.168.58.171:8002"
-      mmsproxy="192.168.59.51"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="CMHK Data"
-      mcc="454"
-      mnc="12"
-      apn="cmhk"
-      mmsc="http://mms.hk.chinamobile.com/mms"
-      mmsproxy=""
-      mmsport=""
-      type="default,supl,mms"
-      authtype="1"
-  />
-
-  <apn carrier="China Mobile HK MMS"
-      mcc="454"
-      mnc="12"
-      apn="peoples.mms"
-      mmsc="http://mms.peoples.com.hk/mms"
-      mmsproxy="172.31.31.36"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="China Mobile HK"
-      mcc="454"
-      mnc="12"
-      apn="peoples.net"
-      type="default,supl"
-  />
-
-  <apn carrier="IMS"
-      mcc="454"
-      mnc="12"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="xcap"
-      mcc="454"
-      mnc="12"
-      apn="xcap"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="PCCW 2G"
-      mcc="454"
-      mnc="16"
-      apn="pccwdata"
-      type="default,supl"
-  />
-
-  <apn carrier="PCCW 2G MMS"
-      mcc="454"
-      mnc="16"
-      apn="pccwmms"
-      mmsc="http://mmsc.mms.pccwmobile.com:8002/"
-      mmsproxy="10.131.2.8"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="PCCW-HKT"
-      mcc="454"
-      mnc="19"
-      apn="pccw"
-      mmsc="http://3gmms.pccwmobile.com:8080/was"
-      mmsproxy="10.140.14.10"
-      mmsport="8080"
-      type="default,supl,mms"
-      authtype="1"
-  />
-
-  <apn carrier="PCCW 3G"
-      mcc="454"
-      mnc="19"
-      apn="pccw"
-      mmsc="http://3gmms.pccwmobile.com:8080/was"
-      mmsproxy="10.140.14.10"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="454"
-      mnc="19"
-      apn="ims"
-      type="ims"
-  />
-
-  <apn carrier="CTEXCEL"
-      mcc="454"
-      mnc="31"
-      apn="ctexcel"
-      authtype="3"
-      type="default,dun,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      mvno_type="spn"
-      mvno_match_data="CTExcel"
-  />
-
-  <apn carrier="IMS"
-      mcc="454"
-      mnc="31"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      mvno_type="spn"
-      mvno_match_data="CTExcel"
-  />
-
-  <apn carrier="CTNET"
-      mcc="454"
-      mnc="31"
-      apn="ctnet"
-      authtype="3"
-      type="default,dun,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      mvno_type="spn"
-      mvno_match_data="中国电信"
-  />
-
-  <apn carrier="IMS"
-      mcc="454"
-      mnc="31"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      mvno_type="spn"
-      mvno_match_data="中国电信"
-  />
-
-  <apn carrier="SmarTone Macau"
-      mcc="455"
-      mnc="00"
-      apn="smartgprs"
-      proxy="10.9.9.29"
-      port="8080"
-      mmsc="http://mms.smartone.com.mo/dmog/mo"
-      mmsproxy="10.9.9.29"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="CTM"
-      mcc="455"
-      mnc="01"
-      apn="ctmprepaid"
-      type="default,supl"
-  />
-
-  <apn carrier="CTM MMS"
-      mcc="455"
-      mnc="01"
-      apn="ctmmms"
-      mmsc="http://mms.wap.ctm.net:8002"
-      mmsproxy="192.168.99.3"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="455"
-      mnc="02"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="CTNET"
-      mcc="455"
-      mnc="02"
-      apn="ctnet"
-      authtype="3"
-      user="ctnet@mycdma.cn"
-      password="vnet.mobi"
-      type="default,dun,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      ppp="#777"
-  />
-
- <apn carrier="CTWAP"
-      mcc="455"
-      mnc="02"
-      apn="ctwap"
-      authtype="3"
-      user="ctwap@mycdma.cn"
-      password="vnet.mobi"
-      mmsproxy="10.0.0.200"
-      mmsport="80"
-      mmsc="http://mmsc.vnet.mobi"
-      type="default,mms,supl"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Hutchison Macau MMS"
-      mcc="455"
-      mnc="03"
-      apn="mms.hutchisonmacau.com"
-      mmsc="http://10.30.15.51:10021/mmsc"
-      mmsproxy="10.30.15.53"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Hutchison Macau"
-      mcc="455"
-      mnc="03"
-      apn="web-g.three.com.hk"
-      user="hutchison"
-      password="1234"
-      type="default,supl"
-  />
-
-  <apn carrier="CTM"
-      mcc="455"
-      mnc="04"
-      apn="ctm-mobile"
-      proxy="192.168.99.2"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="CTM MMS"
-      mcc="455"
-      mnc="04"
-      apn="ctmmms"
-      mmsc="http://mms.wap.ctm.net:8002"
-      mmsproxy="192.168.99.3"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="455"
-      mnc="07"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="CTNET"
-      mcc="455"
-      mnc="07"
-      apn="ctnet"
-      authtype="3"
-      user="ctnet@mycdma.cn"
-      password="vnet.mobi"
-      type="default,dun,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="CTWAP"
-      mcc="455"
-      mnc="07"
-      apn="ctwap"
-      authtype="3"
-      user="ctwap@mycdma.cn"
-      password="vnet.mobi"
-      mmsproxy="10.0.0.200"
-      mmsport="80"
-      mmsc="http://mmsc.vnet.mobi"
-      type="mms,supl"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Cellcard"
-      mcc="456"
-      mnc="01"
-      apn="cellcard"
-      user="mobitel"
-      password="mobitel"
-      type="default,supl"
-  />
-
-  <apn carrier="Cellcard MMS"
-      mcc="456"
-      mnc="01"
-      apn="mms"
-      user="mobitel"
-      password="mobitel"
-      mmsc="http://mms.mobitel.com.kh/mmsc"
-      mmsproxy="203.144.95.98"
-      mmsport="3130"
-      type="mms"
-  />
-
-  <apn carrier="Hello mms"
-      mcc="456"
-      mnc="02"
-      apn="hellomms"
-      mmsc="http://mmsc.tmic.com.kh/mssc"
-      mmsproxy="10.221.41.33"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Hello WAP"
-      mcc="456"
-      mnc="02"
-      apn="hellowww"
-      proxy="10.221.41.33"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="qb mms"
-      mcc="456"
-      mnc="04"
-      apn="mms"
-      mmsc="http://mms.qbmore.mbi"
-      mmsproxy="172.16.96.66"
-      mmsport="8080"
-      type="mms"
-  />
-  <apn carrier="qb web"
-      mcc="456"
-      mnc="04"
-      apn="wap"
-      proxy="172.16.96.66"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="Smart mms"
-      mcc="456"
-      mnc="06"
-      apn="mms"
-      mmsc="http://mmsc"
-      mmsproxy="10.12.1.142"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Smart"
-      mcc="456"
-      mnc="06"
-      apn="smart"
-      type="default,supl"
-  />
-
-  <apn carrier="IMS"
-      mcc="456"
-      mnc="06"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Smart"
-      mcc="456"
-      mnc="06"
-      apn="smart"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="METFONE GPRS"
-      mcc="456"
-      mnc="08"
-      apn="metfone"
-      type="default,supl"
-  />
-
-  <apn carrier="Bee MMS"
-      mcc="456"
-      mnc="09"
-      apn="mms.beeline.com.kh"
-      mmsc="http://mms/"
-      mmsproxy="10.18.34.135"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Bee WAP"
-      mcc="456"
-      mnc="09"
-      apn="gprs.beeline.com.kh"
-      proxy="10.18.34.135"
-      port="8080"
-      type="wap"
-  />
-
-  <apn carrier="Seatel"
-      mcc="456"
-      mnc="11"
-      apn="seatel"
-      type="default,supl,xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="IMS"
-      mcc="456"
-      mnc="11"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="CMNET"
-      mcc="460"
-      mnc="00"
-      apn="cmnet"
-      type="default,supl,net,xcap,rcs"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-  
-  <apn carrier="CMWAP"
-      mcc="460"
-      mnc="00"
-      apn="cmwap"
-      proxy="10.0.0.172"
-      port="80"
-      type="default,supl,wap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-  
-  <apn carrier="中国移动彩信 (China Mobile)"
-      mcc="460"
-      mnc="00"
-      apn="cmwap"
-      proxy="10.0.0.172"
-      port="80"
-      mmsc="http://mmsc.monternet.com"
-      mmsproxy="10.0.0.172"
-      mmsport="80"
-      type="mms"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-  
-  <apn carrier="IA"
-      mcc="460"
-      mnc="00"
-      apn=""
-      type="ia"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-  
-  <apn carrier="IMS"
-      mcc="460"
-      mnc="00"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="沃宽带用户连接互联网"
-      mcc="460"
-      mnc="01"
-      apn="3gnet"
-      type="default,supl,net,xcap"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="沃宽带用户手机上网"
-      mcc="460"
-      mnc="01"
-      apn="3gwap"
-      type="default,wap,dun"
-      proxy="10.0.0.172"
-      port="80"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="中国联通 3g 彩信 (China Unicom)"
-      mcc="460"
-      mnc="01"
-      apn="3gwap"
-      mmsc="http://mmsc.myuni.com.cn"
-      mmsproxy="10.0.0.172"
-      mmsport="80"
-      type="mms"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="460"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="3gnet"
-      mcc="460"
-      mnc="01"
-      apn="3gnet"
-      type="default,dun,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      mvno_type="spn"
-      mvno_match_data="China Telecom"
-  />
-
-  <apn carrier="IMS"
-      mcc="460"
-      mnc="01"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      mvno_type="spn"
-      mvno_match_data="China Telecom"
-  />
-
-  <apn carrier="沃宽带用户连接互联网"
-      mcc="460"
-      mnc="09"
-      apn="3gnet"
-      type="default,net,xcap"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="沃宽带用户手机上网"
-      mcc="460"
-      mnc="09"
-      apn="3gwap"
-      type="default,wap,dun"
-      proxy="10.0.0.172"
-      port="80"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="中国联通 3g 彩信 (China Unicom)"
-      mcc="460"
-      mnc="09"
-      apn="3gwap"
-      mmsc="http://mmsc.myuni.com.cn"
-      mmsproxy="10.0.0.172"
-      mmsport="80"
-      type="mms"
-      protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="460"
-      mnc="09"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="CMNET"
-      mcc="460"
-      mnc="02"
-      apn="cmnet"
-      type="default,supl,net,xcap,rcs"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="CMWAP"
-      mcc="460"
-      mnc="02"
-      apn="cmwap"
-      proxy="10.0.0.172"
-      port="80"
-      type="default,supl,wap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="中国移动彩信 (China Mobile)"
-      mcc="460"
-      mnc="02"
-      apn="cmwap"
-      proxy="10.0.0.172"
-      port="80"
-      mmsc="http://mmsc.monternet.com"
-      mmsproxy="10.0.0.172"
-      mmsport="80"
-      type="mms"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="IA"
-      mcc="460"
-      mnc="02"
-      apn=""
-      type="ia"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="460"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="460"
-      mnc="03"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="CTNET"
-      mcc="460"
-      mnc="03"
-      apn="ctnet"
-      authtype="3"
-      user="ctnet@mycdma.cn"
-      password="vnet.mobi"
-      type="default,dun,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      ppp="#777"
-  />
-
-  <apn carrier="CTWAP"
-      mcc="460"
-      mnc="03"
-      apn="ctwap"
-      authtype="3"
-      user="ctwap@mycdma.cn"
-      password="vnet.mobi"
-      mmsproxy="10.0.0.200"
-      mmsport="80"
-      mmsc="http://mmsc.vnet.mobi"
-      type="default,supl,mms"
-      protocol="IPV4V6"
-      ppp="#777"
-  />
-
-  <apn carrier="IMS"
-      mcc="460"
-      mnc="11"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="CTNET"
-      mcc="460"
-      mnc="11"
-      apn="ctnet"
-      authtype="3"
-      user="ctnet@mycdma.cn"
-      password="vnet.mobi"
-      type="default,dun,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      ppp="#777"
-  />
-
-  <apn carrier="CTWAP"
-      mcc="460"
-      mnc="11"
-      apn="ctwap"
-      authtype="3"
-      user="ctwap@mycdma.cn"
-      password="vnet.mobi"
-      mmsproxy="10.0.0.200"
-      mmsport="80"
-      mmsc="http://mmsc.vnet.mobi"
-      type="mms,supl"
-      protocol="IPV4V6"
-      ppp="#777"
-  />
-
-  <apn carrier="CMNET"
-      mcc="460"
-      mnc="07"
-      apn="cmnet"
-      type="default,supl,net,xcap,rcs"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="CMWAP"
-      mcc="460"
-      mnc="07"
-      apn="cmwap"
-      proxy="10.0.0.172"
-      port="80"
-      type="default,supl,wap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="中国移动彩信 (China Mobile)"
-      mcc="460"
-      mnc="07"
-      apn="cmwap"
-      proxy="10.0.0.172"
-      port="80"
-      mmsc="http://mmsc.monternet.com"
-      mmsproxy="10.0.0.172"
-      mmsport="80"
-      type="mms"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-  
-  <apn carrier="IA"
-      mcc="460"
-      mnc="07"
-      apn=""
-      type="ia"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-  
-  <apn carrier="IMS"
-      mcc="460"
-      mnc="07"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="IMS"
-      mcc="460"
-      mnc="12"
-      apn="IMS"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="CTNET" 
-      mcc="460" 
-      mnc="12" 
-      apn="ctnet" 
-      user="ctnet@mycdma.cn" 
-      password="vnet.mobi" 
-      type="default,dun,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-  <apn carrier="CTWAP" 
-      mcc="460" 
-      mnc="12" 
-      apn="ctwap" 
-      user="ctwap@mycdma.cn"
-      password="vnet.mobi"
-      mmsproxy="10.0.0.200" 
-      mmsport="80" 
-      mmsc="http://mmsc.vnet.mobi" 
-      type="default,supl,mms"
-      protocol="IPV4V6"
-  /> 
-
-  <apn carrier="CTNET" 
-      mcc="460" 
-      mnc="13" 
-      apn="ctnet" 
-      user="ctnet@mycdma.cn" 
-      password="vnet.mobi" 
-      type="default,dun"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="CTWAP" 
-      mcc="460" 
-      mnc="13" 
-      apn="ctwap" 
-      user="ctwap@mycdma.cn"
-      password="vnet.mobi"
-      mmsproxy="10.0.0.200" 
-      mmsport="80" 
-      mmsc="http://mmsc.vnet.mobi" 
-      type="default,supl,mms"
-      protocol="IPV4V6"
-  /> 
-
-  <apn carrier="遠傳電信(Far EasTone) (Fetnet01)"
-      mcc="466"
-      mnc="01"
-      apn="fetnet01"
-      proxy="210.241.199.199"
-      port="80"
-      type="supl"
-  />
-
-  <apn carrier="遠傳電信(Far EasTone) (MMS)"
-      mcc="466"
-      mnc="01"
-      apn="fetnet01"
-      mmsc="http://mms"
-      mmsproxy="210.241.199.199"
-      mmsport="9201"
-      type="mms"
-  />
-
-  <apn carrier="遠傳電信(Far EasTone)"
-      mcc="466"
-      mnc="01"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="遠傳電信(Far EasTone) (IMS)"
-      mcc="466"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="gtnet"
-      mcc="466"
-      mnc="05"
-      apn="gtnet"
-      type="default,supl,xcap"
-  />
-
-  <apn carrier="亞太電信 IMS"
-      mcc="466"
-      mnc="05"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="亞太電信"
-      mcc="466"
-      mnc="05"
-      apn="APTNET"
-      user="aptwap@nsip.qma.com.tw"
-      password="aptwap"
-      mmsc="http://mms.aptg.com.tw"
-      mmsproxy="210.200.66.196"
-      mmsport="80"
-      type="default,mms"
-  />
-
-  <apn carrier="和信電訊(KGT-Online) (Internet)"
-      mcc="466"
-      mnc="88"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="和信電訊(KGT-Online) (MMS)"
-      mcc="466"
-      mnc="88"
-      apn="kgtmms"
-      mmsc="http://mms.kgtmms.net.tw/mms/wapenc"
-      mmsproxy="172.28.33.5"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T Star (Internet)"
-      mcc="466"
-      mnc="89"
-      apn="internet"
-      type="default,supl"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="T Star (MMS)"
-      mcc="466"
-      mnc="89"
-      apn="internet"
-      mmsc="http://mms.vibo.net.tw"
-      mmsproxy="172.24.128.36"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="T Star (IMS)"
-      mcc="466"
-      mnc="89"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="中華電信(Chunghwa) (Internet)"
-      mcc="466"
-      mnc="92"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="中華電信(Chunghwa)"
-      mcc="466"
-      mnc="92"
-      apn="emome"
-      mmsc="http://mms.emome.net:8002"
-      mmsproxy="10.1.1.1"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="中華電信網路MMS"
-      mcc="466"
-      mnc="92"
-      apn="emome"
-      mmsc="http://mms.emome.net:8002"
-      mmsproxy="10.1.1.1"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="CHT IMS"
-      mcc="466"
-      mnc="92"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="CHT XCAP"
-      mcc="466"
-      mnc="92"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="台灣大哥大(TW Mobile) (Internet)"
-      mcc="466"
-      mnc="93"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="台灣大哥大(TW Mobile) (MMS)"
-      mcc="466"
-      mnc="93"
-      apn="mms"
-      mmsc="http://mms.catch.net.tw"
-      mmsproxy="10.1.1.2"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="台灣大哥大(TW Mobile) (twm)"
-      mcc="466"
-      mnc="93"
-      apn="twm"
-      type="default,supl"
-  />
-
-  <apn carrier="台灣大哥大(TW Mobile) (Internet)"
-      mcc="466"
-      mnc="97"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="台灣大哥大(TW Mobile) (MMS)"
-      mcc="466"
-      mnc="97"
-      apn="mms"
-      mmsc="http://mms.catch.net.tw"
-      mmsproxy="10.1.1.2"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="台灣大哥大(TW Mobile) (IMS)"
-      mcc="466"
-      mnc="97"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="台灣大哥大(TW Mobile) (twm)"
-      mcc="466"
-      mnc="97"
-      apn="twm"
-      type="default,supl"
-  />
-
-  <apn carrier="台灣大哥大(TW Mobile) (Internet)"
-      mcc="466"
-      mnc="99"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="台灣大哥大(TW Mobile) (MMS)"
-      mcc="466"
-      mnc="99"
-      apn="mms"
-      mmsc="http://mms.catch.net.tw"
-      mmsproxy="10.1.1.2"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="台灣大哥大(TW Mobile) (twm)"
-      mcc="466"
-      mnc="99"
-      apn="twm"
-      type="default,supl"
-  />
-
-  <apn carrier="Grameenphone"
-      mcc="470"
-      mnc="01"
-      apn="gpinternet"
-      type="default,supl"
-  />
-
-  <apn carrier="Grameenphone"
-      mcc="470"
-      mnc="01"
-      apn="gpmms"
-      mmsc="http://mms.gpsurf.net/servlets/mms"
-      mmsproxy="10.128.1.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Robi"
-      mcc="470"
-      mnc="02"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Robi"
-      mcc="470"
-      mnc="02"
-      apn="wap"
-      mmsc="http://192.168.23.4/was"
-      mmsproxy="192.168.23.7"
-      type="mms"
-  />
-
-  <apn carrier="Banglalink"
-      mcc="470"
-      mnc="03"
-      apn="blweb"
-      type="default,supl"
-  />
-
-  <apn carrier="Banglalink"
-      mcc="470"
-      mnc="03"
-      apn="blmms"
-      mmsc="http://mmsc1:10021/mmsc/01"
-      mmsproxy="10.10.55.34"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Teletalk"
-      mcc="470"
-      mnc="04"
-      apn="wap"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel"
-      mcc="470"
-      mnc="07"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel"
-      mcc="470"
-      mnc="07"
-      apn="mms"
-      mmsc="http://10.6.0.21/servlets/mms"
-      mmsproxy="10.6.0.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-
-  <!-- SMILE operator -->
-  <apn carrier="IMS"
-      mcc="502"
-      mnc="08"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Internet"
-      mcc="502"
-      mnc="08"
-      apn="internet"
-      type="default"
-  />
-
-  <apn carrier="Maxis 2G Internet"
-      mcc="502"
-      mnc="12"
-      apn="net"
-      user="maxis"
-      password="wap"
-      type="default,supl"
-  />
-
-  <apn carrier="Maxis 2G MMS" 
-  	mcc="502" 
-  	mnc="12" 
-  	apn="net" 
-  	user="maxis" 
-  	password="wap" 
-  	server="202.75.133.49" 
-  	mmsc="http://172.16.74.100:10021/mmsc" 
-  	mmsproxy="202.75.133.49" 
-  	mmsport="80" 
-  	type="mms" 
-  />
-  
-  <apn carrier="Maxis 3G Internet" 
-  	mcc="502" 
-  	mnc="12" 
-  	apn="unet" 
-  	user="maxis" 
-  	password="wap" 
-  	type="default,supl" 
-  />
-  
-  <apn carrier="Maxis 3G MMS" 
-  	mcc="502" 
-  	mnc="12" 
-  	apn="unet" 
-  	user="maxis" 
-  	password="wap" 
-  	server="202.75.133.49" 
-  	mmsc="http://172.16.74.100:10021/mmsc" 
-  	mmsproxy="202.75.133.49" 
-  	mmsport="80" 
-  	type="mms" 
-  />  
-  <apn carrier="Celcom" 
-  	mcc="502" 
-  	mnc="13" 
-  	apn="celcom3g" 
-  	type="default,supl" 
-  />  
-  
-  <apn carrier="Celcom MMS" 
-  	mcc="502" 
-  	mnc="13" 
-  	apn="celcom3g" 
-  	user="mms" 
-  	password="mms" 
-  	mmsc="http://mms.celcom.net.my" 
-  	mmsproxy="10.128.1.242" 
-  	mmsport="8080" 
-  	type="mms" 
-  />
-  
-  <apn carrier="Digi MMS" 
-  	mcc="502" 
-  	mnc="16" 
-  	apn="digimms" 
-  	user="mms" 
-  	password="mms" 
-  	mmsc="http://mms.digi.com.my/servlets/mms" 
-  	mmsproxy="203.92.128.160" 
-  	mmsport="80" 
-  	type="mms" 
-  />  
-  
-  <apn carrier="Digi" 
-  	mcc="502" 
-  	mnc="16" 
-  	apn="diginet" 
-  	user="digi" 
-  	password="digi" 
-  	type="default,supl" 
-  />
-
-  <apn carrier="IMS"
-    mcc="502"
-    mnc="16"
-    apn="ims"
-    type="ims"
-    protocol="IPV6"
-    roaming_protocol="IPV6"
-    bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="hos"
-    mcc="502"
-    mnc="16"
-    apn="hos"
-    type="xcap"
-    protocol="IPV6"
-    roaming_protocol="IPV6"
-    bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="U Mobile Internet" 
-  	mcc="502" 
-  	mnc="18" 
-  	apn="my3g" 
-  	type="default,supl" 
-  />  
-  
-  <apn carrier="U Mobile MMS" 
-  	mcc="502" 
-  	mnc="18" 
-  	apn="my3g" 
-  	mmsc="http://10.30.3.11/servlets/mms" 
-  	mmsproxy="10.30.5.11" 
-  	mmsport="8080" 
-  	type="mms" 
-  />
-
-  <apn carrier="Celcom 3G" 
-  	mcc="502" 
-  	mnc="19" 
-	apn="celcom3g"
-	proxy="10.128.1.242"
-	port="8080"
-  	type="default,supl" 
-  />  
-  
-  <apn carrier="Celcom MMS" 
-  	mcc="502" 
-  	mnc="19" 
-  	apn="celcom3g" 
-  	mmsc="http://mms.celcom.net.my" 
-  	mmsproxy="10.128.1.242" 
-  	mmsport="8080" 
-  	type="mms" 
-  />
-
-  <apn carrier="Yest Internet"
-      mcc="502"
-      mnc="152"
-      apn="yesnet"
-      type="default,supl,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="502"
-      mnc="152"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Webe Internet"
-      mcc="502"
-      mnc="153"
-      apn="webe"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="502"
-      mnc="153"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="hos"
-      mcc="505"
-      mnc="01"
-      apn="hos"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="ims"
-      mcc="505"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Telstra MMS"
-      mcc="505"
-      mnc="01"
-      apn="Telstra.mms"
-      mmsc="http://mmsc.telstra.com:8002"
-      mmsproxy="10.1.1.180"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Telstra Internet"
-      mcc="505"
-      mnc="01"
-      apn="Telstra.wap"
-      type="default,supl"
-  />
-
-  <apn carrier="Optus Internet"
-      mcc="505"
-      mnc="02"
-      apn="yesinternet"
-      type="default,supl"
-  />
-
-  <apn carrier="Optus Internet"
-      mcc="505"
-      mnc="02"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Optus MMS"
-      mcc="505"
-      mnc="02"
-      apn="mms"
-      mmsc="http://mmsc.optus.com.au:8002/"
-      mmsproxy="61.88.190.10"
-      mmsport="8070"
-      type="mms"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Optus IMS"
-      mcc="505"
-      mnc="02"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Optus Call Settings"
-      mcc="505"
-      mnc="02"
-      apn="hos"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Vodafone AU"
-      mcc="505"
-      mnc="03"
-      apn="live.vodafone.com"
-      mmsc="http://pxt.vodafone.net.au/pxtsend"
-      mmsproxy="10.202.2.60"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="505"
-      mnc="03"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="VHA XCAP"
-      mcc="505"
-      mnc="03"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="3Internet"
-      mcc="505"
-      mnc="06"
-      apn="3netaccess"
-      type="default,supl"
-  />
-
-  <apn carrier="3"
-      mcc="505"
-      mnc="06"
-      apn="3services"
-      mmsc="http://mmsc.three.net.au:10021/mmsc"
-      mmsproxy="10.176.57.25"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="VF AU PXT"
-      mcc="505"
-      mnc="07"
-      apn="live.vodafone.com"
-      mmsc="http://pxt.vodafone.net.au/pxtsend"
-      mmsproxy="10.202.2.60"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="VF Internet"
-      mcc="505"
-      mnc="07"
-      apn="vfinternet.au"
-      type="default,supl"
-  />
-
-  <apn carrier="Telstra MMS"
-      mcc="505"
-      mnc="11"
-      apn="Telstra.mms"
-      mmsc="http://mmsc.telstra.com:8002"
-      mmsproxy="10.1.1.180"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Telstra Internet"
-      mcc="505"
-      mnc="11"
-      apn="Telstra.wap"
-      type="default,supl"
-  />
-
-  <apn carrier="3Internet"
-      mcc="505"
-      mnc="12"
-      apn="3netaccess"
-      type="default,supl"
-  />
-
-  <apn carrier="3"
-      mcc="505"
-      mnc="12"
-      apn="3services"
-      mmsc="http://mmsc.three.net.au:10021/mmsc"
-      mmsproxy="10.176.57.25"
-      mmsport="8799"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="LM AU GPRS DATA"
-      mcc="505"
-      mnc="19"
-      apn="data.lycamobile.com.au"
-      type="default,supl"
-  />
-
-  <apn carrier="Telstra MMS"
-      mcc="505"
-      mnc="71"
-      apn="Telstra.mms"
-      mmsc="http://mmsc.telstra.com:8002"
-      mmsproxy="10.1.1.180"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Telstra Internet"
-      mcc="505"
-      mnc="71"
-      apn="Telstra.wap"
-      type="default,supl"
-  />
-
-  <apn carrier="Telstra MMS"
-      mcc="505"
-      mnc="72"
-      apn="Telstra.mms"
-      mmsc="http://mmsc.telstra.com:8002"
-      mmsproxy="10.1.1.180"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Telstra Internet"
-      mcc="505"
-      mnc="72"
-      apn="Telstra.wap"
-      type="default,supl"
-  />
-
-  <apn carrier="VF AU PXT"
-      mcc="505"
-      mnc="88"
-      apn="live.vodafone.com"
-      mmsc="http://pxt.vodafone.net.au/pxtsend"
-      mmsproxy="10.202.2.60"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="VF Internet"
-      mcc="505"
-      mnc="88"
-      apn="vfinternet.au"
-      type="default,supl"
-  />
-
-  <apn carrier="Optus Internet"
-      mcc="505"
-      mnc="90"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Optus MMS"
-      mcc="505"
-      mnc="90"
-      apn="mms"
-      mmsc="http://mmsc.optus.com.au:8002/"
-      mmsproxy="61.88.190.10"
-      mmsport="8070"
-      type="mms"
-  />
-
-  <apn carrier="Indosat GPRS"
-      mcc="510"
-      mnc="01"
-      apn="indosatgprs"
-      user="indosat"
-      password="indosat"
-      type="default,supl"
-  />
-
-  <apn carrier="Indosat MMS"
-      mcc="510"
-      mnc="01"
-      apn="indosatmms"
-      user="indosat"
-      password="indosat"
-      mmsc="http://mmsc.indosat.com"
-      mmsproxy="10.19.19.19"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AXIS GPRS"
-      mcc="510"
-      mnc="08"
-      apn="AXIS"
-      user="axis"
-      password="123456"
-      type="default,supl"
-  />
-
-  <apn carrier="AXIS MMS"
-      mcc="510"
-      mnc="08"
-      apn="AXISmms"
-      user="axis"
-      password="123456"
-      proxy="10.8.3.8"
-      port="8080"
-      mmsc="http://mmsc.AXIS"
-      mmsproxy="10.8.3.8"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="510"
-      mnc="09"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="510"
-      mnc="09"
-      apn="ims"
-      type="ims,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="Smartfren4G"
-      mcc="510"
-      mnc="09"
-      apn="Smartfren4G"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Telkomsel GPRS"
-      mcc="510"
-      mnc="10"
-      apn="telkomsel"
-      user="wap"
-      password="wap123"
-      type="default,supl"
-  />
-
-  <apn carrier="Telkomsel MMS"
-      mcc="510"
-      mnc="10"
-      apn="mms"
-      user="wap"
-      password="wap123"
-      mmsc="http://mms.telkomsel.com"
-      mmsproxy="10.1.89.150"
-      mmsport="8000"
-      type="mms"
-  />
-
-  <apn carrier="XL GPRS"
-      mcc="510"
-      mnc="11"
-      apn="www.xlgprs.net"
-      user="xlgprs"
-      password="proxl"
-      type="default,supl"
-  />
-
-  <apn carrier="XL MMS"
-      mcc="510"
-      mnc="11"
-      apn="www.xlmms.net"
-      user="xlgprs"
-      password="proxl"
-      mmsc="http://mmsc.xl.net.id/servlets/mms"
-      mmsproxy="202.152.240.50"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="510"
-      mnc="28"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="IMS"
-      mcc="510"
-      mnc="28"
-      apn="ims"
-      type="ims,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="18"
-  />
-
-  <apn carrier="Smartfren4G"
-      mcc="510"
-      mnc="28"
-      apn="Smartfren4G"
-      type="default,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="3 GPRS"
-      mcc="510"
-      mnc="89"
-      apn="3gprs"
-      user="3gprs"
-      password="3gprs"
-      proxy="10.4.0.10"
-      port="3128"
-      type="default,supl"
-  />
-
-  <apn carrier="3 MMS"
-      mcc="510"
-      mnc="89"
-      apn="3mms"
-      user="3mms"
-      password="3mms"
-      mmsc="http://mms.three.co.id"
-      mmsproxy="10.4.0.10"
-      mmsport="3128"
-      type="mms"
-  />
-
-  <apn carrier="Globe Prepaid"
-      mcc="515"
-      mnc="02"
-      apn="http.globe.com.ph"
-      type="default,supl"
-  />
-
-  <apn carrier="Globe Postpaid"
-      mcc="515"
-      mnc="02"
-      apn="internet.globe.com.ph"
-      type="default,supl"
-  />
-
- <apn carrier="MyGlobeMMS"
-      mcc="515"
-      mnc="02"
-      apn="mms.globe.com.ph"
-      mmsc="http://192.40.100.22:10021/mmsc"
-      mmsproxy="203.177.42.21"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cherry Prepaid"
-      mcc="515"
-      mnc="02"
-      apn="internet.cherry.com.ph"
-      type="default,supl"
-      mvno_type="pnn"
-      mvno_match_data="Cherry Mobile"
-  />
-
-  <apn carrier="Cherry Prepaid MMS"
-      mcc="515"
-      mnc="02"
-      apn="mms.globe.com.ph"
-      mmsc="http://192.40.100.22:10021/mmsc"
-      mmsproxy="203.177.42.21"
-      mmsport="8080"
-      type="mms"
-      mvno_type="pnn"
-      mvno_match_data="Cherry Mobile"
-  />
-
-  <apn carrier="Cherry Prepaid"
-      mcc="515"
-      mnc="02"
-      apn="internet.cherry.com.ph"
-      type="default,supl"
-      mvno_type="spn"
-      mvno_match_data="Cherry Prepaid"
-  />
-
-  <apn carrier="Cherry Prepaid MMS"
-      mcc="515"
-      mnc="02"
-      apn="mms.globe.com.ph"
-      mmsc="http://192.40.100.22:10021/mmsc"
-      mmsproxy="203.177.42.21"
-      mmsport="8080"
-      type="mms"
-      mvno_type="spn"
-      mvno_match_data="Cherry Prepaid"
-  />
-
-  <apn carrier="Globe Prepaid"
-      mcc="515"
-      mnc="02"
-      apn="http.globe.com.ph"
-      type="default,supl"
-      mvno_type="spn"
-      mvno_match_data="TM"
-  />
-
-  <apn carrier="MyGlobeMMS"
-      mcc="515"
-      mnc="02"
-      apn="mms.globe.com.ph"
-      mmsc="http://192.40.100.22:10021/mmsc"
-      mmsproxy="203.177.42.21"
-      mmsport="8080"
-      type="mms"
-      mvno_type="spn"
-      mvno_match_data="TM"
-  />
-
-  <apn carrier="Globe Prepaid"
-      mcc="515"
-      mnc="02"
-      apn="http.globe.com.ph"
-      type="default,supl"
-      mvno_type="spn"
-      mvno_match_data="ABS-CBN"
-  />
-
-  <apn carrier="MyGlobeMMS"
-      mcc="515"
-      mnc="02"
-      apn="mms.globe.com.ph"
-      mmsc="http://192.40.100.22:10021/mmsc"
-      mmsproxy="203.177.42.21"
-      mmsport="8080"
-      type="mms"
-      mvno_type="spn"
-      mvno_match_data="ABS-CBN"
-  />
-
-  <apn carrier="Smart INTERNET"
-      mcc="515"
-      mnc="03"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Smart MMS"
-      mcc="515"
-      mnc="03"
-      apn="mms"
-      mmsc="http://10.102.61.238:8002"
-      mmsproxy="10.102.61.46"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Smart INTERNET"
-      mcc="515"
-      mnc="03"
-      apn="internet"
-      type="default,supl"
-      mvno_type="spn"
-      mvno_match_data="Talk N Text"
-  />
-
-  <apn carrier="Smart MMS"
-      mcc="515"
-      mnc="03"
-      apn="mms"
-      mmsc="http://10.102.61.238:8002"
-      mmsproxy="10.102.61.46"
-      mmsport="8080"
-      type="mms"
-      mvno_type="spn"
-      mvno_match_data="Talk N Text"
-  />
-
-  <apn carrier="IMS"
-      mcc="515"
-      mnc="03"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="XCAP"
-      mcc="515"
-      mnc="03"
-      apn="xcap"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Sun INTERNET"
-      mcc="515"
-      mnc="05"
-      apn="minternet"
-      type="default,supl"
-  />
-
-  <apn carrier="Sun MMS"
-      mcc="515"
-      mnc="05"
-      apn="mms"
-      mmsc="http://mmscenter.suncellular.com.ph"
-      mmsproxy="202.138.159.78"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="RED Internet"
-      mcc="515"
-      mnc="18"
-      apn="redinternet"
-      type="default,supl"
-  />
-
-  <apn carrier="RED MOBILE MMS"
-      mcc="515"
-      mnc="18"
-      apn="redmms"
-      mmsc="http://10.102.61.193:8002/mmsc"
-      mmsproxy="10.138.3.35"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="TrueMove GPRS"
-      mcc="520"
-      mnc="00"
-      apn="hinternet"
-      user="true"
-      password="true"
-      type="default,supl"
-  />
-
-  <apn carrier="TrueMove MMS"
-      mcc="520"
-      mnc="00"
-      apn="hmms"
-      user="true"
-      password="true"
-      mmsc="http://mms.trueh.com:8002/"
-      mmsproxy="10.4.7.39"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="520"
-      mnc="00"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="AIS GPRS"
-      mcc="520"
-      mnc="01"
-      apn="internet"
-      user="ais"
-      password="ais"
-      type="default,supl"
-   />
-
-  <apn carrier="AIS MMS"
-      mcc="520"
-      mnc="01"
-      apn="multimedia"
-      user="ais"
-      password="ais"
-      mmsc="http://mms.mobilelife.co.th"
-      mmsproxy="203.170.229.34"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIS Internet"
-      mcc="520"
-      mnc="03"
-      apn="internet"
-      authtype="0"
-      type="default,supl"
-  />
-
-  <apn carrier="AIS MMS"
-      mcc="520"
-      mnc="03"
-      apn="multimedia"
-      mmsc="http://mms.mobilelife.co.th"
-      mmsproxy="203.170.229.34"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="AIS IMS"
-      mcc="520"
-      mnc="03"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="TRUE-H Internet"
-      mcc="520"
-      mnc="04"
-      apn="internet"
-      user="true"
-      password="true"
-      type="default,supl"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="TRUE-H MMS"
-      mcc="520"
-      mnc="04"
-      apn="hmms"
-      user="true"
-      password="true"
-      mmsc="http://mms.trueh.com:8002/"
-      mmsproxy="10.4.7.39"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IMS"
-      mcc="520"
-      mnc="04"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="DTAC Internet"
-      mcc="520"
-      mnc="05"
-      apn="www.dtac.co.th"
-      type="default,supl"
-  />
-
-  <apn carrier="DTAC MMS"
-      mcc="520"
-      mnc="05"
-      apn="mms"
-      mmsc="http://mms2.dtac.co.th:8002/"
-      mmsproxy="10.10.10.10"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="DTAC XCAP"
-      mcc="520"
-      mnc="05"
-      apn="xcap"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="DTAC IMS"
-      mcc="520"
-      mnc="05"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="tot internet"
-      mcc="520"
-      mnc="15"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="tot mms"
-      mcc="520"
-      mnc="15"
-      apn="mms"
-      mmsc="http://mmsc.tot3g.net:8002"
-      mmsproxy="10.218.24.83"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="DTAC GPRS"
-      mcc="520"
-      mnc="18"
-      apn="www.dtac.co.th"
-      user=""
-      password=""
-      type="default,supl"
-  />
-
-  <apn carrier="DTAC MMS"
-      mcc="520"
-      mnc="18"
-      apn="mms"
-      user=""
-      password=""
-      mmsc="http://mms.dtac.co.th:8002"
-      mmsproxy="203.155.200.133"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="DTAC XCAP"
-      mcc="520"
-      mnc="18"
-      apn="xcap"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="TRUE GPRS"
-      mcc="520"
-      mnc="99"
-      apn="internet"
-      user="true"
-      password="true"
-      type="default,supl"
-   />
-
-  <apn carrier="TRUE MMS"
-      mcc="520"
-      mnc="99"
-      apn="mms"
-      user="true"
-      password="true"
-      mmsc="http://mms.trueworld.net:8002"
-      mmsproxy="10.4.7.39"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="SingTel(Prepaid)"
-      mcc="525"
-      mnc="01"
-      apn="hicard"
-      authenticationtype="PAP"
-      mmsc="http://mms.singtel.com:10021/mmsc"
-      mmsproxy="165.21.42.84"
-      mmsport="8080"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="SingTel VOLTE"
-      mcc="525"
-      mnc="01"
-      apn="ims"
-      type="ims"
-  />
-
-  <apn carrier="SingTel XCAP"
-      mcc="525"
-      mnc="01"
-      apn="stm-ut"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="IDEAS"
-      mcc="525"
-      mnc="01"
-      apn="e-ideas"
-      type="default,supl,ia"
-  />
-
-  <apn carrier="IDEAS MMS"
-      mcc="525"
-      mnc="01"
-      apn="e-ideas"
-      user="65IDEAS"
-      password="65IDEAS"
-      mmsc="http://mms.singtel.com:10021/mmsc"
-      mmsproxy="165.21.42.84"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="IDEAS"
-      mcc="525"
-      mnc="02"
-      apn="e-ideas"
-      type="default,supl"
-  />
-
-  <apn carrier="IDEAS MMS"
-      mcc="525"
-      mnc="02"
-      apn="e-ideas"
-      user="65IDEAS"
-      password="65IDEAS"
-      mmsc="http://mms.singtel.com:10021/mmsc"
-      mmsproxy="165.21.42.84"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="M1 MMS"
-      mcc="525"
-      mnc="03"
-      apn="miworld"
-      user="65"
-      password="user123"
-      mmsc="http://mmsgw:8002"
-      mmsproxy="172.16.14.10"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="M1"
-      mcc="525"
-      mnc="03"
-      apn="sunsurf"
-      user="65"
-      password="user123"
-      type="default,supl"
-  />
-
-  <apn carrier="IMS"
-      mcc="525"
-      mnc="03"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="MobileOne XCAP"
-      mcc="525"
-      mnc="03"
-      apn="xcap"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="StarHub"
-      mcc="525"
-      mnc="05"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Gee! MMS"
-      mcc="525"
-      mnc="05"
-      apn="shmms"
-      mmsc="http://mms.starhubgee.com.sg:8002"
-      mmsproxy="10.12.1.80"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="Gee! (GPRS)"
-      mcc="525"
-      mnc="05"
-      apn="shwap"
-      user="star"
-      password="hub"
-      proxy="10.12.1.2"
-      port="80"
-      type="default,supl"
-  />
-
-  <apn carrier="ims"
-      mcc="525"
-      mnc="05"
-      apn="ims"
-      type="ims"
-  />
-
-  <apn carrier="GT Roaming"
-      mcc="525"
-      mnc="05"
-      apn="gtnet"
-      type="default,supl"
-      mvno_type="imsi"
-      mvno_match_data="525053095x"
-  />
-
-  <apn carrier="GT Roaming"
-      mcc="525"
-      mnc="05"
-      apn="gtnet"
-      type="default,supl"
-      mvno_type="imsi"
-      mvno_match_data="525053096x"
-  />
-
-  <apn carrier="GT Roaming"
-      mcc="525"
-      mnc="05"
-      apn="gtnet"
-      type="default,supl"
-      mvno_type="gid"
-      mvno_match_data="0A"
-  />
-
-  <apn carrier="GT Roaming"
-      mcc="525"
-      mnc="05"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-      mvno_type="imsi"
-      mvno_match_data="525053095x"
-      user_visible="false"
-  />
-
-  <apn carrier="GT Roaming"
-      mcc="525"
-      mnc="05"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-      mvno_type="imsi"
-      mvno_match_data="525053096x"
-      user_visible="false"
-  />
-
-  <apn carrier="GT Roaming"
-      mcc="525"
-      mnc="05"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-      mvno_type="gid"
-      mvno_match_data="0A"
-      user_visible="false"
-  />
-
-  <apn carrier="Vodafone NZ-MMS"
-      mcc="530"
-      mnc="01"
-      apn="live.vodafone.com"
-      mmsc="http://pxt.vodafone.net.nz/pxtsend"
-      mmsproxy="172.30.38.3"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Vodafone NZ"
-      mcc="530"
-      mnc="01"
-      apn="www.vodafone.net.nz"
-      type="default,supl"
-  />
-
-  <apn carrier="VFNZ PXT"
-      mcc="530"
-      mnc="02"
-      apn="live.vodafone.com"
-      mmsc="http://pxt.vodafone.net.nz/pxtsend"
-      mmsproxy="172.30.38.3"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="VFNZ Internet"
-      mcc="530"
-      mnc="02"
-      apn="www.vodafone.net.nz"
-      type="default,supl"
-  />
-
-  <apn carrier="Telecom Internet"
-      mcc="530"
-      mnc="05"
-      apn="internet.telecom.co.nz"
-      type="default,supl"
-  />
-
-  <apn carrier="Telecom MMS"
-      mcc="530"
-      mnc="05"
-      apn="wap.telecom.co.nz"
-      mmsc="http://lsmmsc.xtra.co.nz"
-      mmsproxy="210.55.11.73"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="2degrees Internet"
-      mcc="530"
-      mnc="24"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="2degrees MMS"
-      mcc="530"
-      mnc="24"
-      apn="mms"
-      mmsc="http://mms.2degreesmobile.net.nz:48090"
-      mmsproxy="118.148.1.118"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Mobinil MMS" 
-      mcc="602" 
-      mnc="01" 
-      apn="mobinilmms" 
-      mmsc="http://10.7.13.24:8002" 
-      mmsproxy="62.241.155.45" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="Mobinil Alo wap" 
-      mcc="602" 
-      mnc="01" 
-      apn="alowap" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="Orange IMS"
-      mcc="602"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Orange XCAP"
-      mcc="602"
-      mnc="01"
-      apn="xcap"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Vodafone EG" 
-      mcc="602" 
-      mnc="02" 
-      apn="wap.vodafone.com.eg" 
-      user="wap" 
-      password="wap" 
-      proxy="163.121.178.2"
-      port="8080"
-      type="default,supl" 
-  />
-
-  <apn carrier="Vodafone EG MMS"
-      mcc="602"
-      mnc="02"
-      apn="mms.vodafone.com.eg"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.vodafone.com.eg/servlets/mms"
-      mmsproxy="163.121.178.2"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="ETISALAT internet"
-      mcc="602"
-      mnc="03"
-      apn="etisalat"
-      type="default,supl"
-      protocol="IPV4V6"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="ETISALAT MMS"
-      mcc="602"
-      mnc="03"
-      apn="etisalat"
-      mmsc="http://10.71.131.7:38090"
-      mmsproxy="10.71.130.29"
-      mmsport="8080"
-      type="default,supl,mms"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Etisalat IMS"
-      mcc="602"
-      mnc="03"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
- <apn carrier="Etisalat XCAP"
-      mcc="602"
-      mnc="03"
-      apn="ut"
-      type="xcap"
-      protocol="IPV4"
-      roaming_protocol="IPV4"
-  />
-
-  <apn carrier="Telecom IMS"
-      mcc="602"
-      mnc="04"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-  
- <apn carrier="hos"
-      mcc="602"
-      mnc="04"
-      apn="hos"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Mobilis"
-      mcc="603"
-      mnc="01"
-      apn="internet"
-      user="internet"
-      password="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Mobilis MMS" 
-      mcc="603" 
-      mnc="01" 
-      apn="mms" 
-      user="mms" 
-      password="mms" 
-      mmsc="http://172.025.049.009/servlets/mms" 
-      mmsproxy="172.25.49.2" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="Djezzy" 
-      mcc="603" 
-      mnc="02" 
-      apn="djezzy.internet"
-      type="default,supl" 
-  />   
-
-  <apn carrier="Djezzy MMS" 
-      mcc="603" 
-      mnc="02" 
-      apn="djezzy.mms" 
-      mmsc="http://172.024.97.152:10021/mmsc" 
-      mmsproxy="172.024.97.158" 
-      mmsport="8799" 
-      type="mms" 
-  />
-  
-  <apn carrier="Nedjma" 
-      mcc="603" 
-      mnc="03" 
-      apn="internet"
-      user="nedjma" 
-      password="nedjma"
-      type="default,supl" 
-  />   
-
-  <apn carrier="Nedjma MMS" 
-      mcc="603" 
-      mnc="03" 
-      apn="nedjmaMMS"
-      user="mms" 
-      password="mms"
-      mmsc="http://10.10.111.1" 
-      mmsproxy="192.168.52.3" 
-      mmsport="9201" 
-      type="mms" 
-  />
-  
-  <apn carrier="Meditel" 
-      mcc="604" 
-      mnc="00" 
-      apn="internet1.meditel.ma"
-      user="MEDIWAP" 
-      password="MEDIWAP"
-      type="default,supl" 
-  />   
-
-  <apn carrier="Meditel MMS" 
-      mcc="604" 
-      mnc="00" 
-      apn="mms.meditel.ma"
-      user="MEDIMMS" 
-      password="MEDIMMS"
-      mmsc="http://mms.meditel.ma:8088/mms" 
-      mmsproxy="10.8.8.9" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="IAM" 
-      mcc="604" 
-      mnc="01" 
-      apn="www.iamgprs1.ma"
-      type="default,supl" 
-  />
-  
-  <apn carrier="IAM MMS" 
-      mcc="604" 
-      mnc="01" 
-      apn="mmsiam"
-      mmsc="http://mms:8002" 
-      mmsproxy="10.16.35.50" 
-      mmsport="8080" 
-      type="default,supl,mms" 
-  />
-  
-  <apn carrier="Orange TN" 
-      mcc="605" 
-      mnc="01" 
-      apn="keypro"
-      type="default,supl" 
-  />
-  
-  <apn carrier="Orange MMS" 
-      mcc="605" 
-      mnc="01" 
-      apn="mms.otun"
-      mmsc="http://mms.orange.tn" 
-      mmsproxy="10.12.10.52" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="Tunisie Telecom" 
-      mcc="605" 
-      mnc="02" 
-      apn="Wap.tn"
-      user="wap@tt1" 
-      password="Wap.tn"
-      proxy="213.150.186.106" 
-      port="9201" 
-      type="default,supl" 
-  />   
-
-  <apn carrier="Tunisie Telecom MMS" 
-      mcc="605" 
-      mnc="02" 
-      apn="mms.tn"
-      user="mms@tt1" 
-      password="mms"
-      mmsc="http://192.168.0.3:19090/was" 
-      mmsproxy="192.168.0.2" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="Tunisiana-Internet" 
-      mcc="605" 
-      mnc="03" 
-      apn="internet.tunisiana.com"
-      proxy="10.3.2.99" 
-      port="80" 
-      type="default,supl" 
-  />   
-
-  <apn carrier="Tunisiana MMS" 
-      mcc="605" 
-      mnc="03" 
-      apn="mms.tunisiana.com"
-      user="mms" 
-      password="mms"
-      mmsc="http://mmsc.tunisiana.com" 
-      mmsproxy="10.3.2.100" 
-      mmsport="9201"
-      type="mms" 
-  />
-  
-  <apn carrier="Orange ML" 
-      mcc="610" 
-      mnc="02" 
-      apn="internet" 
-      user="internet" 
-      password="internet" 
-      type="default,supl" 
-  />   
-
-  <apn carrier="Orange ML MMS" 
-      mcc="610" 
-      mnc="02" 
-      apn="mms" 
-      user="mms" 
-      password="mms" 
-      mmsc="http://10.109.6.2/servlets/mms" 
-      mmsproxy="10.109.4.35" 
-      mmsport="8080" 
-      type="mms" 
-  /> 
-  
-  <apn carrier="Emtel" 
-      mcc="617" 
-      mnc="10" 
-      apn="web" 
-      user="cell number" 
-      password="MMSC" 
-      type="default,supl" 
-  />
-
-  <apn carrier="Ghana MTN"
-      mcc="620"
-      mnc="01"
-      apn="internet"
-  />
-
-  <apn carrier="Ghana vodafone"
-      mcc="620"
-      mnc="02"
-      apn="browse"
-  />
-
-  <apn carrier="Ghana Tigo"
-      mcc="620"
-      mnc="03"
-      apn="web.tigo.com.gh"
-  />
-
-  <apn carrier="MMS Tigo"
-      mcc="620"
-      mnc="03"
-      apn="wap.tigo.com.gh"
-      mmsproxy="10.4.1.7"
-      mmsport="8080"
-      mmsc="http://mmsc.tigo.com.gh:19090"
-      type="mms"
-  />
-
-  <apn carrier="Ghana Airtel"
-      mcc="620"
-      mnc="06"
-      apn="web"
-  />
-
-  <apn carrier="Ghana glo"
-      mcc="620"
-      mnc="07"
-      apn="internet"
-  />
-
-  <apn carrier="Zain NG"
-      mcc="621"
-      mnc="20"
-      apn="internet.ng.zain.com"
-      user="internet"
-      password="internet"
-      proxy="172.18.254.5"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="Airtel MMS"
-      mcc="621"
-      mnc="20"
-      apn="mms.ng.airtel.com"
-      user="mms"
-      password="mms"
-      mmsc="http://10.210.3.239:9800/mm1"
-      mmsproxy="192.168.175.184"
-      mmsport="8080"
-      authtype="1"
-      type="mms"
-  />
-
-  <apn carrier="Airtel NG" 
-      mcc="621" 
-      mnc="20" 
-      apn="internet.ng.airtel.com"
-  />
-
-  <apn carrier="Zain NG" 
-      mcc="621" 
-      mnc="20" 
-      apn="internet.ng.airtel.com"
-      user="internet" 
-      password="internet" 
-      port="8080"  
-      type="default,supl" 
-  />
-
-  <apn carrier="Smile IMS"
-      mcc="621"
-      mnc="27"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="MTN NG" 
-      mcc="621" 
-      mnc="30" 
-      apn="web.gprs.mtnnigeria.net" 
-      user="web" 
-      password="web" 
-      proxy="10.199.212.2" 
-      port="8080"  
-      type="default,supl"
-  />
-  
-  <apn carrier="MTN NG MMS" 
-      mcc="621" 
-      mnc="30" 
-      apn="web.gprs.mtnnigeria.net" 
-      user="web" 
-      password="web" 
-      mmsc="http://10.199.212.8/servlets/mms" 
-      mmsproxy="10.199.212.2" 
-      mmsport="8080" 
-      type="mms" 
-  />
-
-  <apn carrier="ims"
-      mcc="621"
-      mnc="40"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="GLO NG" 
-      mcc="621" 
-      mnc="50" 
-      apn="gloflat"
-      user="flat" 
-      password="flat" 
-  />
-
-  <apn carrier="Glo MMS" 
-      mcc="621" 
-      mnc="50" 
-      apn="glomms" 
-      user="mms" 
-      password="mms" 
-      mmsc="http://mms.gloworld.com/mmsc" 
-      mmsproxy="10.100.82.4" 
-      mmsport="9201" 
-      type="mms" 
-  />
-
-  <apn carrier="Glo" 
-      mcc="621" 
-      mnc="50" 
-      apn="glosecure" 
-      proxy="10.100.82.4" 
-      port="8080"  
-      type="default,supl" 
-  />
-  
- <apn carrier="Etisalat MMS" 
-      mcc="621" 
-      mnc="60" 
-      apn="etisalat" 
-      mmsc="http://10.71.170.30:38090/was" 
-      mmsproxy="10.71.170.5"  
-      type="mms" 
-  />
-  
-  <apn carrier="Etisalat WAP" 
-      mcc="621" 
-      mnc="60" 
-      apn="etisalat" 
-      proxy="10.71.170.5" 
-      port="8080"  
-      type="default,supl" 
-  />
-  
-  <apn carrier="OrangeCM WAP" 
-      mcc="624" 
-      mnc="02" 
-      apn="orangecmgprs" 
-      user="orange" 
-      password="orange" 
-      proxy="192.168.122.101" 
-      port="8080" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="Orange WAP" 
-      mcc="627" 
-      mnc="01" 
-      apn="orangeworld" 
-      user="wap" 
-      password="wap" 
-      proxy="192.168.17.2"
-      port="8080" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="Vodacom" 
-      mcc="630" 
-      mnc="01" 
-      apn="vodanet" 
-      user="vodalive"
-      type="default,supl" 
-  />
-  
-  <apn carrier="Unitel" 
-      mcc="631" 
-      mnc="02" 
-      apn="internet.unitel.co.ao" 
-      user="guest" 
-      password="guest"
-      type="default,supl" 
-  />
-  
-  <apn carrier="Zain SD" 
-      mcc="634" 
-      mnc="01" 
-      apn="internet"
-      type="default,supl" 
-  />
-  
-  <apn carrier="Internet" 
-      mcc="636" 
-      mnc="01" 
-      apn="etc.com"
-      type="default,supl" 
-  />
-  
-  <apn carrier="Safaricom" 
-      mcc="639" 
-      mnc="02" 
-      apn="safaricom" 
-      user="saf" 
-      password="data" 
-      mmsc="http://www.safaricom.com" 
-      mmsproxy="172.22.2.38" 
-      mmsport="8080" 
-      type="default,supl,mms" 
-  />
-  
-  <apn carrier="Airtel Internet" 
-      mcc="639" 
-      mnc="03" 
-      apn="internet"
-      type="default,supl" 
-  />
-  
-  <apn carrier="Airtel MMS" 
-      mcc="639" 
-      mnc="03" 
-      apn="mms" 
-      user="mms"
-      password="mms"
-      mmsproxy="172.30.9.8" 
-      mmsport="8080" 
-      type="mms" 
-      authtype="1"
-  />
-
-  <apn carrier="yu" 
-      mcc="639" 
-      mnc="05" 
-      apn="internet" 
-      proxy="10.4.16.6" 
-      port="8080" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="yu MMS" 
-      mcc="639" 
-      mnc="05" 
-      apn="iternet" 
-      mmsc="http://10.4.16.22/servlets/mms" 
-      mmsproxy="10.4.16.6" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="Orange KE" 
-      mcc="639" 
-      mnc="07" 
-      apn="orange internet" 
-      user="02web" 
-      password="02web" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="Orange KE MMS" 
-      mcc="639" 
-      mnc="07" 
-      apn="orange internet" 
-      user="02web" 
-      password="02web" 
-      mmsc="http://mms.orange.co.ke" 
-      mmsproxy="10.36.17.130" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="Celtel Tz" 
-      mcc="640" 
-      mnc="09" 
-      apn="internet.tz.celtel.com" 
-      user="guest" 
-      password="guest" 
-      type="default,supl" 
-  />
-
-  <apn carrier="Smile IMS"
-      mcc="640"
-      mnc="11"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="MTN" 
-      mcc="641" 
-      mnc="10" 
-      apn="yellopix.mtn.co.ug" 
-      user="guest" 
-      password="guest" 
-      type="default,supl" 
-  />
-
-  <apn carrier="Smile IMS"
-      mcc="641"
-      mnc="33"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="MCel" 
-      mcc="643" 
-      mnc="01" 
-      apn="isp.mcel.mz" 
-      user="guest" 
-      password="guest" 
-      type="default,supl" 
-  />
-
-  <apn carrier="Vodafone"
-      mcc="645"
-      mnc="05"
-      apn="internet"
-      type="default"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="IMS"
-      mcc="645"
-      mnc="05"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Airtel Internet" 
-      mcc="646" 
-      mnc="01" 
-      apn="internet.mg.airtel.com"
-      type="default,supl" 
-  />
-  
-  <apn carrier="Orange World Internet" 
-      mcc="646" 
-      mnc="02" 
-      apn="orangenet"
-      type="default,supl" 
-  />
-  
-  <apn carrier="Orange World MMS" 
-      mcc="646" 
-      mnc="02" 
-      apn="orangemms"
-      mmsc="http://10.152.10.70:38090" 
-      mmsproxy="10.150.0.115" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="Telma Internet" 
-      mcc="646" 
-      mnc="04" 
-      apn="internet"
-      proxy="10.150.0.115" 
-      port="8080" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="Orange MMS" 
-      mcc="647" 
-      mnc="00" 
-      apn="orangerun.acte"	  
-      user="orange"
-      password="orange"
-      mmsc="http://mms.orange.fr" 
-      mmsproxy="192.168.10.200" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="Orange World" 
-      mcc="647" 
-      mnc="00" 
-      apn="orangerun"
-      user="orange"
-      password="orange"
-      proxy="192.168.10.100" 
-      port="8080" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="Orange Enterprise" 
-      mcc="647" 
-      mnc="00" 
-      apn="orangerun.enterprise"
-      user="orange"
-      password="orange"
-      proxy="192.168.10.100" 
-      port="8080" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="Onlymms-GPRS" 
-      mcc="647" 
-      mnc="02" 
-      apn="onlymms"	  
-      user="only"
-      password="only"
-      mmsc="http://10.2.85.50:8514" 
-      mmsproxy="10.2.85.50" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="Onlywap-GPRS" 
-      mcc="647" 
-      mnc="02" 
-      apn="onlywap"
-      user="only"
-      password="only"
-      proxy="10.2.85.50" 
-      port="8080" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="SFR MMS" 
-      mcc="647" 
-      mnc="10" 
-      apn="mmssfr"	  
-      user="mms"
-      password="mms"
-      mmsc="http://mms" 
-      mmsproxy="10.0.224.145" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="SFR WAP" 
-      mcc="647" 
-      mnc="10" 
-      apn="wapsfr"
-      user="wap"
-      password="wap"
-      proxy="10.0.224.161" 
-      port="8080" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="MTC" 
-      mcc="649" 
-      mnc="01" 
-      apn="ppsinternet"
-      user="guest"
-      password="guest" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="VCL Internet GPRS"
-      mcc="651"
-      mnc="01"
-      apn="internet"
-      type="default,supl"
-  />
-  
-  <apn carrier="Mascom Wireless" 
-      mcc="652" 
-      mnc="01" 
-      apn="internet.mascom"
-      user="guest"
-      password="guest" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="Orange" 
-      mcc="652" 
-      mnc="02" 
-      apn="internet.orange.co.bw"
-      user="guest"
-      password="guest" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="Vodacom"
-      mcc="655"
-      mnc="01"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Vodacom MMS"
-      mcc="655"
-      mnc="01"
-      apn="mms.vodacom.net"
-      mmsc="http://mmsc.vodacom4me.co.za/"
-      mmsproxy="196.6.128.13"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Vlive!"
-      mcc="655"
-      mnc="01"
-      apn="vlive"
-      proxy="196.6.128.12"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="IMS"
-      mcc="655"
-      mnc="01"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="XCAP"
-      mcc="655"
-      mnc="01"
-      apn="xcap"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-<apn carrier="8•ta" 
-     mcc="655" 
-     mnc="02" 
-     apn="internet" 
-     type="default,supl" 
-  />   
-<apn carrier="8•ta mms" 
-     mcc="655" 
-     mnc="02" 
-     apn="mms" 
-     mmsproxy="41.151.254.162" 
-     mmsport="8080" 
-     mmsc="http://mms.8ta.com:38090/was" 
-     type="mms" 
-  />
-
-  <apn carrier="Cell C Internet"
-      mcc="655"
-      mnc="07"
-      apn="Internet"
-      type="default,supl"
-  />
-
-  <apn carrier="Cell C MMS"
-      mcc="655"
-      mnc="07"
-      apn="mms"
-      mmsc="http://mms.cmobile.co.za"
-      mmsproxy="196.31.116.250"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Cell C IMS"
-      mcc="655"
-      mnc="07"
-      apn="ims"
-      type="ims"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Virgin Mobile SA Internet"
-      mcc="655"
-      mnc="07"
-      apn="vdata"
-      type="default,supl"
-  />
-
-  <apn carrier="Virgin Mobile SA Internet"
-      mcc="655"
-      mnc="07"
-      apn="vmms"
-      mmsc="http://mms.virginmobile.co.za"
-      mmsproxy="196.31.116.242"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="MTN SA Web"
-      mcc="655"
-      mnc="10"
-      apn="internet"
-      type="default,supl"
-  />
-
-  <apn carrier="MTN MMS"
-      mcc="655"
-      mnc="10"
-      apn="myMTN"
-      user="mtnmms"
-      password="mtnmms"
-      mmsc="http://mms.mtn.co.za/mms/wapenc"
-      mmsproxy="196.11.240.241"
-      mmsport="8080"
-      type="mms"
-      authtype="1"
-  />
-
-  <apn carrier="MTN Data"
-      mcc="655"
-      mnc="10"
-      apn="myMTN"
-      type="default,supl"
-  />
-
-  <apn carrier="MTN SA IMS"
-      mcc="655"
-      mnc="10"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="hos"
-      mcc="655"
-      mnc="10"
-      apn="hos"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="TIGO INTERNET" 
-       mcc="704" 
-       mnc="02" 
-       apn="internet.tigo.gt"
-       type="default,supl"
-   />
-   
-  <apn carrier="TIGO WAP" 
-       mcc="704" 
-       mnc="02" 
-       apn="wap.tigo.gt"
-       proxy="10.16.17.20" 
-       port="8888" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="TIGO MMS" 
-       mcc="704" 
-       mnc="02" 
-       apn="mms.tigo.gt"
-       mmsc="http://mms" 
-       mmsproxy="10.16.17.12" 
-       mmsport="8888" 
-       type="mms"
-   />
-   
-   <apn carrier="MOVISTAR INTERNET" 
-       mcc="704" 
-       mnc="03" 
-       apn="internet.movistar.gt"
-       user="movistargt" 
-       password="movistargt"
-       type="default,supl"
-   />
-   
-  <apn carrier="MOVISTAR WAP" 
-       mcc="704" 
-       mnc="03" 
-       apn="wap.movistar.gt" 
-       user="movistargt" 
-       password="movistargt"
-       proxy="10.12.22.1" 
-       port="80" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="MOVISTAR MMS" 
-       mcc="704" 
-       mnc="03" 
-       apn="mms.movistar.gt" 
-       user="movistargt" 
-       password="movistargt"
-       mmsc="http://mms.movistar.gt" 
-       mmsproxy="10.12.22.1" 
-       mmsport="80" 
-       type="mms"
-   />
-   
-   <apn carrier="TIGO INTERNET" 
-       mcc="704" 
-       mnc="20" 
-       apn="internet.tigo.gt"
-       type="default,supl"
-   />
-   
-   <apn carrier="MOVISTAR INTERNET" 
-       mcc="704" 
-       mnc="30" 
-       apn="internet.movistar.gt"
-       user="movistargt" 
-       password="movistargt"
-       type="default,supl"
-   />
-   
-  <apn carrier="MOVISTAR WAP" 
-       mcc="704" 
-       mnc="30" 
-       apn="wap.movistar.gt" 
-       user="movistargt" 
-       password="movistargt"
-       proxy="10.12.22.1" 
-       port="80" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="MOVISTAR MMS" 
-       mcc="704" 
-       mnc="30" 
-       apn="mms.movistar.gt" 
-       user="movistargt" 
-       password="movistargt"
-       mmsc="http://mms.movistar.gt" 
-       mmsproxy="10.12.22.1" 
-       mmsport="80" 
-       type="mms"
-   />
-   
-   <apn carrier="TIGO WAP" 
-       mcc="706" 
-       mnc="03" 
-       apn="wap.tigo.sv"
-       proxy="10.16.17.20" 
-       port="8888" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="TIGO MMS" 
-       mcc="706" 
-       mnc="03" 
-       apn="mms.tigo.sv"
-       mmsc="http://mms" 
-       mmsproxy="10.16.17.12" 
-       mmsport="8888" 
-       type="mms"
-   />
-   
-   <apn carrier="MOVISTAR INTERNET" 
-       mcc="706" 
-       mnc="04" 
-       apn="internet.movistar.sv"
-       user="movistarsv" 
-       password="movistarsv"
-       type="default,supl"
-   />
-   
-  <apn carrier="MOVISTAR WAP" 
-       mcc="706" 
-       mnc="04" 
-       apn="wap.movistar.sv" 
-       user="movistarsv" 
-       password="movistarsv"
-       proxy="10.12.22.1" 
-       port="80" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="MOVISTAR MMS" 
-       mcc="706" 
-       mnc="04" 
-       apn="mms.movistar.sv" 
-       user="movistarsv" 
-       password="movistarsv"
-       mmsc="http://mms.movistar.sv" 
-       mmsproxy="10.12.22.1" 
-       mmsport="80" 
-       type="mms"
-   />
-   
-   <apn carrier="TIGO WAP" 
-       mcc="706" 
-       mnc="30" 
-       apn="wap.tigo.sv"
-       proxy="10.16.17.20" 
-       port="8888" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="TIGO MMS" 
-       mcc="706" 
-       mnc="30"
-       apn="mms.tigo.sv"
-       mmsc="http://mms"
-       mmsproxy="10.16.17.12"
-       mmsport="8888"
-       type="mms"
-   />
-   
-   <apn carrier="MOVISTAR INTERNET" 
-       mcc="706" 
-       mnc="40" 
-       apn="internet.movistar.sv"
-       user="movistarsv" 
-       password="movistarsv"
-       type="default,supl"
-   />
-   
-  <apn carrier="MOVISTAR WAP" 
-       mcc="706" 
-       mnc="40" 
-       apn="wap.movistar.sv" 
-       user="movistarsv" 
-       password="movistarsv"
-       proxy="10.12.22.1" 
-       port="80" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="MOVISTAR MMS" 
-       mcc="706" 
-       mnc="40" 
-       apn="mms.movistar.sv" 
-       user="movistarsv" 
-       password="movistarsv"
-       mmsc="http://mms.movistar.sv" 
-       mmsproxy="10.12.22.1" 
-       mmsport="80" 
-       type="mms"
-   />
-  
-  <apn carrier="TIGO WAP" 
-       mcc="708" 
-       mnc="02" 
-       apn="wap.tigo.hn"
-       proxy="10.16.17.20" 
-       port="8888" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="TIGO MMS" 
-       mcc="708" 
-       mnc="02"
-       apn="mms.tigo.hn"
-       mmsc="http://mms"
-       mmsproxy="10.16.17.12"
-       mmsport="8888"
-       type="mms"
-   />
-   
-   <apn carrier="MOVISTAR WAP" 
-       mcc="710" 
-       mnc="30" 
-       apn="wap.movistar.ni" 
-       user="movistarni" 
-       password="movistarni"
-       proxy="10.12.23.1" 
-       port="80" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="MOVISTAR MMS" 
-       mcc="710" 
-       mnc="30" 
-       apn="mms.movistar.ni" 
-       user="movistarni" 
-       password="movistarni"
-       mmsc="http://mms.movistar.ni" 
-       mmsproxy="10.12.23.1" 
-       mmsport="80" 
-       type="mms"
-   />
-   
-   <apn carrier="MOVISTAR WAP" 
-       mcc="710" 
-       mnc="300" 
-       apn="wap.movistar.ni" 
-       user="movistarni" 
-       password="movistarni"
-       proxy="10.12.23.1" 
-       port="80" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="MOVISTAR MMS" 
-       mcc="710" 
-       mnc="300" 
-       apn="mms.movistar.ni" 
-       user="movistarni" 
-       password="movistarni"
-       mmsc="http://mms.movistar.ni" 
-       mmsproxy="10.12.23.1" 
-       mmsport="80" 
-       type="mms"
-   />
-   
-   <apn carrier="MOVISTAR WAP" 
-       mcc="714" 
-       mnc="20" 
-       apn="wap.movistar.pa" 
-       user="movistarpawap" 
-       password="movistarpa"
-       proxy="10.12.21.1" 
-       port="80" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="MOVISTAR MMS" 
-       mcc="714" 
-       mnc="20" 
-       apn="mms.movistar.pa" 
-       user="movistarpamms" 
-       password="movistarpa"
-       mmsc="http://mms.movistar.pa" 
-       mmsproxy="10.12.21.1" 
-       mmsport="80" 
-       type="mms"
-   />
-  
-  <apn carrier="MOVISTAR" 
-       mcc="716" 
-       mnc="06" 
-       apn="movistar.pe"
-       type="default,supl,xcap"
-   />
-  
-  <apn carrier="MOVISTAR WAP" 
-       mcc="716" 
-       mnc="06" 
-       apn="wap.movistar.pe" 
-       user="movistar@wap" 
-       password="movistar"
-       proxy="200.4.196.117" 
-       port="8080" 
-       type="default,supl"
-   /> 
-
-  <apn carrier="MOVISTAR MMS" 
-       mcc="716" 
-       mnc="06" 
-       apn="mms.movistar.pe" 
-       user="movistar@mms" 
-       password="movistar" 
-       mmsc="http://mmsc.telefonicamovistar.com.pe:8088/mms/" 
-       mmsproxy="200.4.196.118" 
-       mmsport="8080" 
-       type="mms"
-       authenticationtype="PAP"
-       protocol="IPv4"
-   />
-
-  <apn carrier="MOVISTAR IMS"
-       mcc="716"
-       mnc="06"
-       apn="volte.movistar.pe"
-       type="ims"
-       protocol="IPV4V6"
-       roaming_protocol="IPV4V6"
-       bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-   <apn carrier="Nextel WAP" 
-       mcc="716" 
-       mnc="07" 
-       apn="wap.nextel.com.pe"
-       type="default,supl"
-   />
-
-  <apn carrier="Nextel MMS" 
-       mcc="716" 
-       mnc="07" 
-       apn="mms.nextel.com.pe"
-       mmsc="http://mms.nextel.pe" 
-       mmsproxy="129.192.129.104" 
-       mmsport="8080" 
-       type="mms"
-   />
-
-  <apn carrier="Claro Datos"
-       mcc="716" 
-       mnc="10" 
-       apn="claro.pe"
-       user="claro" 
-       password="claro" 
-       authtype="1"
-       type="default"
-       authenticationtype="None"
-       protocol="IPv4"
-       roaming_protocol="IPv4"
-   />
-
-  <apn carrier="CLARO MMS"
-       mcc="716" 
-       mnc="10" 
-       apn="mms.claro.pe" 
-       user="claro" 
-       password="claro" 
-       mmsc="http://claro/servlets/mms" 
-       mmsproxy="192.168.231.30" 
-       mmsport="80" 
-       type="mms"
-       bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  /> 
-
-  <apn carrier="CLARO IMS"
-       mcc="716"
-       mnc="10"
-       apn="ims"
-       type="ims"
-       protocol="IPV4V6"
-       roaming_protocol="IPV4V6"
-       bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="CLARO XCAP"
-      mcc="716"
-      mnc="10"
-      apn="claro.pe"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Entel PE"
-       mcc="716"
-       mnc="17"
-       apn="entel.pe"
-       type="default,dun"
-       protocol="IPV4"
-       roaming_protocol="IPV4"
-       authenticationtype="None"
-  />
-
-  <apn carrier="NEXTEL" 
-       mcc="716" 
-       mnc="17" 
-       apn="mms.nextel.com.pe" 
-       mmsc="http://mms.nextel.pe" 
-       mmsproxy="129.192.129.104" 
-       mmsport="8080" 
-       type="mms" 
-       bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  /> 
-
-  <apn carrier="IMS"
-       mcc="716"
-       mnc="17"
-       apn="ims"
-       type="ims"
-       protocol="IPV4"
-       roaming_protocol="IPV4"
-       bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="MOVISTAR MMS"
-      mcc="722"
-      mnc="07"
-      apn="mms.gprs.unifon.com.ar"
-      user="mms"
-      password="mms"
-      mmsc="http://mms.movistar.com.ar"
-      mmsproxy="200.68.32.239"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Bitel Internet"
-      mcc="716"
-      mnc="15"
-      apn="bitel"
-      type="default"
-      authenticationtype="None"
-      protocol="IPV4"
-      roaming_protocol="IPV4"
-  />
-
-  <apn carrier="MOVISTAR WAP"
-      mcc="722"
-      mnc="07"
-      apn="wap.gprs.unifon.com.ar"
-      user="wap"
-      password="wap"
-      type="default,supl"
-  />
-
-  <apn carrier="MOVISTAR IMS"
-       mcc="722"
-       mnc="07"
-       apn="ims"
-       type="ims"
-       protocol="IPV4V6"
-       roaming_protocol="IPV4V6"
-       bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="MOVISTAR XCAP"
-       mcc="722"
-       mnc="07"
-       apn="Internet"
-       type="xcap"
-       protocol="IPV4V6"
-       roaming_protocol="IPV4V6"
-       bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Claro AR"
-      mcc="722"
-      mnc="310"
-      apn="igprs.claro.com.ar"
-      mmsc="http://mms.claro.com.ar"
-      type="default,supl,mms"
-  />
-
-  <apn carrier="CLARO IMS"
-       mcc="722"
-       mnc="310"
-       apn="ims"
-       type="ims"
-       protocol="IPV4V6"
-       roaming_protocol="IPV4V6"
-       bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Personal Datos"
-      mcc="722"
-      mnc="34"
-      apn="datos.personal.com"
-      user="datos"
-      password="datos"
-      authtype="1"
-      type="default,supl"
-  />
-
-  <apn carrier="CLARO XCAP"
-       mcc="722"
-       mnc="310"
-       apn="igprs.claro.com.ar"
-       type="xcap"
-       protocol="IPV4V6"
-       roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Personal MMS"
-      mcc="722"
-      mnc="34"
-      apn="mms"
-      user="mms"
-      password="mms"
-      mmsproxy="172.25.7.31"
-      mmsport="8080"
-      mmsc="http://mms.personal.com"
-      authtype="1"
-      type="mms"
-  />
-
-  <apn carrier="Personal IMS"
-       mcc="722"
-       mnc="34"
-       apn="ims"
-       type="ims"
-       protocol="IPV4V6"
-       roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Personal IMS (wifi)"
-       mcc="722"
-       mnc="34"
-       apn="ims"
-       type="ims,mms"
-       protocol="IPV4V6"
-       roaming_protocol="IPV4V6"
-       bearer_bitmask ="18"
-  />
-
-  <apn carrier="Personal XCAP"
-       mcc="722"
-       mnc="34"
-       apn="hos"
-       type="xcap"
-       bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="TIM MMS"
-      mcc="724"
-      mnc="02"
-      apn="timbrasil.br"
-      user="tim"
-      password="tim"
-      mmsc="http://mms.tim.br"
-      mmsproxy="200.179.66.242"
-      mmsport="8080"
-      authenticationtype="PAP"
-      type="default,mms"
-  />
-
-  <apn carrier="TIM WAP FAST"
-      mcc="724"
-      mnc="02"
-      apn="timbrasil.br"
-      user="tim"
-      password="tim"
-      type="default,supl"
-  />
-  
-  <apn carrier="TIM IMS"
-      mcc="724"
-      mnc="02"
-      apn="ims"
-      type="ims,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="TIM MMS"
-      mcc="724"
-      mnc="03"
-      apn="timbrasil.br"
-      user="tim"
-      password="tim"
-      mmsc="http://mms.tim.br"
-      mmsproxy="200.179.66.242"
-      mmsport="8080"
-      authenticationtype="PAP"
-      type="default,mms"
-  />
-
-  <apn carrier="TIM WAP FAST"
-      mcc="724"
-      mnc="03"
-      apn="timbrasil.br"
-      user="tim"
-      password="tim"
-      type="default,supl"
-  />
-  
-  <apn carrier="TIM IMS"
-      mcc="724"
-      mnc="03"
-      apn="ims"
-      type="ims,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="TIM MMS"
-      mcc="724"
-      mnc="04"
-      apn="timbrasil.br"
-      user="tim"
-      password="tim"
-      mmsc="http://mms.tim.br"
-      mmsproxy="200.179.66.242"
-      mmsport="8080"
-      authenticationtype="PAP"
-      type="default,mms"
-  />
-
-  <apn carrier="TIM WAP FAST"
-      mcc="724"
-      mnc="04"
-      apn="timbrasil.br"
-      user="tim"
-      password="tim"
-      type="default,supl"
-  />
-  
-  <apn carrier="TIM IMS"
-      mcc="724"
-      mnc="04"
-      apn="ims"
-      type="ims,xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="Java Session"
-      mcc="724"
-      mnc="05"
-      apn="java.claro.com.br"
-      user="Claro"
-      password="claro"
-      authenticationtype="PAP"
-      authtype="1"
-      type="default,supl"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-  />
-
-  <apn carrier="Claro Dados"
-      mcc="724"
-      mnc="05"
-      apn="claro.com.br"
-      user="Claro"
-      password="claro"
-      type="dun"
-  />
-
-  <apn carrier="Claro Foto"
-      mcc="724"
-      mnc="05"
-      apn="mms.claro.com.br"
-      user="claro"
-      password="claro"
-      mmsc="http://mms.claro.com.br"
-      mmsproxy="200.169.126.10"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="Claro IMS"
-      mcc="724"
-      mnc="05"
-      apn="ims"
-      type="ims"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-  />
-
-  <apn carrier="Claro IMS (wifi)"
-      mcc="724"
-      mnc="05"
-      apn="ims"
-      type="ims,mms"
-      protocol="IPV6"
-      roaming_protocol="IPV6"
-      bearer_bitmask ="18"
-  />
-
-  <apn carrier="VIVO MMS"
-      mcc="724"
-      mnc="06"
-      apn="mms.vivo.com.br"
-      user="vivo"
-      password="vivo"
-      mmsc="http://termnat.vivomms.com.br:8088/mms"
-      mmsproxy="200.142.130.104"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="VIVO ZAP"
-      mcc="724"
-      mnc="06"
-      apn="zap.vivo.com.br"
-      user="vivo"
-      password="vivo"
-      type="default,supl"
-  />
-
-  <apn carrier="VIVO IMS"
-      mcc="724"
-      mnc="06"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="xcap.ims"
-      mcc="724"
-      mnc="06"
-      apn="xcap.ims"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="SCTL MMS"
-      mcc="724"
-      mnc="07"
-      apn="mms.sercomtel.com.br"
-      user="sercomtel"
-      password="sercomtel"
-      mmsc="http://mms.claro.com.br"
-      mmsproxy="200.169.126.10"
-      mmsport="8799"
-      type="mms"
-  />
-
-  <apn carrier="SCTL GPRS"
-      mcc="724"
-      mnc="07"
-      apn="sercomtel.com.br"
-      user="sercomtel"
-      password="sercomtel"
-      type="default,supl"
-  />
-
-  <apn carrier="VIVO MMS"
-      mcc="724"
-      mnc="10"
-      apn="mms.vivo.com.br"
-      user="vivo"
-      password="vivo"
-      mmsc="http://termnat.vivomms.com.br:8088/mms"
-      mmsproxy="200.142.130.104"
-      mmsport="80"
-      authtype="1"
-      type="mms"
-  />
-
-  <apn carrier="VIVO ZAP"
-      mcc="724"
-      mnc="10"
-      apn="zap.vivo.com.br"
-      user="vivo"
-      password="vivo"
-      type="default,supl"
-  />
-
-  <apn carrier="VIVO IMS"
-      mcc="724"
-      mnc="10"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="xcap.ims"
-      mcc="724"
-      mnc="10"
-      apn="xcap.ims"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="VIVO MMS"
-      mcc="724"
-      mnc="11"
-      apn="mms.vivo.com.br"
-      user="vivo"
-      password="vivo"
-      mmsc="http://termnat.vivomms.com.br:8088/mms"
-      mmsproxy="200.142.130.104"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="VIVO ZAP"
-      mcc="724"
-      mnc="11"
-      apn="zap.vivo.com.br"
-      user="vivo"
-      password="vivo"
-      type="default,supl"
-  />
-
-  <apn carrier="VIVO IMS"
-      mcc="724"
-      mnc="11"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="xcap.ims"
-      mcc="724"
-      mnc="11"
-      apn="xcap.ims"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="BrT WAP 1"
-      mcc="724"
-      mnc="16"
-      apn="wap.brt.br"
-      user="brt"
-      password="brt"
-      proxy="200.96.8.30"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="BrT WAP 2"
-      mcc="724"
-      mnc="16"
-      apn="wap.brt.br"
-      user="brt"
-      password="brt"
-      proxy="200.96.8.30"
-      port="9201"
-  />
-
-  <apn carrier="BrT MMS"
-      mcc="724"
-      mnc="16"
-      apn="mms.brt.br"
-      user="brt"
-      password="brt"
-      mmsc="http://mms.brasiltelecom.com.br/"
-      mmsproxy="200.96.8.29"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="TelemigC GPRS"
-      mcc="724"
-      mnc="19"
-      apn="gprs.telemigcelular.com.br"
-      user="celular"
-      password="celular"
-      type="default,supl"
-  />
-
-  <apn carrier="Telemig MMS"
-      mcc="724"
-      mnc="19"
-      apn="mmsgprs.telemigcelular.com.br"
-      user="celular"
-      password="celular"
-      mmsc="http://mms.telemigcelular.com.br"
-      mmsproxy="200.192.230.142"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="VIVO MMS"
-      mcc="724"
-      mnc="23"
-      apn="mms.vivo.com.br"
-      user="vivo"
-      password="vivo"
-      mmsc="http://termnat.vivomms.com.br:8088/mms"
-      mmsproxy="200.142.130.104"
-      mmsport="80"
-      type="mms"
-  />
-
-  <apn carrier="VIVO ZAP"
-      mcc="724"
-      mnc="23"
-      apn="zap.vivo.com.br"
-      user="vivo"
-      password="vivo"
-      type="default,supl"
-  />
-
-  <apn carrier="VIVO IMS"
-      mcc="724"
-      mnc="23"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="xcap.ims"
-      mcc="724"
-      mnc="23"
-      apn="xcap.ims"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Amazonia MMS" 
-      mcc="724" 
-      mnc="24" 
-      apn="mmsgprs.amazoniacelular.com.br" 
-      user="celular" 
-      password="celular" 
-      mmsc="http://mms.amazoniacelular.com.br" 
-      mmsproxy="200.192.230.142" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="Amazonia GPRS" 
-      mcc="724" 
-      mnc="24" 
-      apn="gprs.amazoniacelular.com.br" 
-      user="celular" 
-      password="celular" 
-      type="default,supl" 
-  />
-  
-  <apn carrier="OI MMS"
-      mcc="724" 
-      mnc="31" 
-      apn="mmsgprs.oi.com.br"
-      user="oimms"
-      password="oioioi"
-      mmsc="http://200.222.42.204:8002"
-      mmsproxy="192.168.10.50" 
-      mmsport="3128"
-      authenticationtype="PAP"
-      protocol="IPV4V6"
-      type="mms"
-  />
-
-  <apn carrier="OI GPRS"
-      mcc="724"
-      mnc="31"
-      apn="gprs.oi.com.br" 
-      authenticationtype="PAP"
-      protocol="IPV4V6"
-      type="default,supl"
-  />
-
-  <apn carrier="CTBC MMS" 
-      mcc="724" 
-      mnc="32" 
-      apn="mms.ctbc.br" 
-      user="ctbc" 
-      password="1212" 
-      mmsc="http://mms.ctbccelular.com.br/was" 
-      mmsproxy="172.29.7.70" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="CTBC MMS" 
-      mcc="724" 
-      mnc="33" 
-      apn="mms.ctbc.br" 
-      user="ctbc" 
-      password="1212" 
-      mmsc="http://mms.ctbccelular.com.br/was" 
-      mmsproxy="172.29.7.70" 
-      mmsport="8080" 
-      type="mms" 
-  />
-  
-  <apn carrier="CTBC MMS" 
-      mcc="724" 
-      mnc="34" 
-      apn="mms.ctbc.br" 
-      user="ctbc" 
-      password="1212" 
-      mmsc="http://mms.ctbccelular.com.br/was" 
-      mmsproxy="172.29.7.70" 
-      mmsport="8080" 
-      type="mms" 
-  />
-
-  <apn carrier="Internet Movil"
-      mcc="730"
-      mnc="01"
-      apn="bam.entelpcs.cl"
-      user="entelpcs"
-      password="entelpcs"
-      proxy="10.99.0.10"
-      port="8080"
-      type="default"
-      protocol="IPV4"
-      roaming_protocol="IPV4"
-      authenticationtype="None"
-  />
-
-  <apn carrier="Mensajes Multimedia"
-      mcc="730"
-      mnc="01"
-      apn="mms.entelpcs.cl"
-      user="entelpcs"
-      password="entelpcs"
-      mmsc="http://mmsc.entelpcs.cl"
-      mmsproxy="10.99.0.10"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Movistar"
-      mcc="730"
-      mnc="02"
-      apn="wap.tmovil.cl"
-      proxy="172.17.8.11"
-      port="8080"
-      user="wap"
-      password="wap"
-      type="default,supl,dun"
-  />
-
-  <apn carrier="Movistar MMS"
-      mcc="730"
-      mnc="02"
-      apn="mms.tmovil.cl"
-      user="mms"
-      password="mms"
-      mmsproxy="172.17.8.10"
-      mmsport="8080"
-      mmsc="http://mms.movistar.cl"
-      type="mms"
-  />
-
-  <apn carrier="WEB CLARO"
-      mcc="730"
-      mnc="03"
-      apn="bam.clarochile.cl"
-      user="clarochile"
-      password="clarochile"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS CLARO"
-      mcc="730"
-      mnc="03"
-      apn="mms.clarochile.cl"
-      user="clarochile"
-      password="clarochile"
-      mmsc="http://mms.clarochile.cl"
-      mmsproxy="172.23.200.200"
-      mmsport="8080"
-      type="mms"
-  />
-  <apn carrier="MMS CLARO"
-      mcc="740"
-      mnc="01"
-      apn="mms.claro.com.ec"
-      user="portamms"
-      password="portamms2003"
-      mmsc="http://iesmms.porta.com.ec"
-      mmsproxy="216.250.208.94"
-      mmsport="8799"
-      type="mms"
-      protocol="IPv4/IPv6"
-      authenticationtype="None"
-  />
-   <apn carrier="VIVAMMS"
-      mcc="736"
-      mnc="01"
-      apn="mms.nuevatel.com"
-      mmsc="http://mmsgw.nuevatel.com:1981"
-      mmsproxy="192.168.101.004"
-      mmsport="3128"
-      type="mms"
-      protocol="IPv4"
-      authenticationtype="None"
-  />
-   <apn carrier="MMS Tigo"
-      mcc="736"
-      mnc="03"
-      apn="mms.tigo.bo"
-      mmsc="http://mms"
-      mmsproxy="72.25.100.8"
-      mmsport="8888"
-      type="mms"
-      protocol="IPv4"
-      authenticationtype="None"
-  />
-  
-  
-  
-  <apn carrier="MMS CLARO"
-      mcc="716"
-      mnc="10"
-      apn="mms.claro.pe"
-      user="claro"
-      password="claro"
-      mmsc="http://claro/servlets/mms"
-      mmsproxy="192.168.231.30"
-      mmsport="80"
-      type="mms"
-      authenticationtype="None"
-      protocol="IPv4"      
-  />
-  <apn carrier="Bitel MMS"
-      mcc="716"
-      mnc="15"
-      apn="bitel-mms"
-      mmsc="http://181.176.241.99:8080"
-      mmsproxy="192.168.231.30"
-      mmsport="8000"
-      type="mms"
-      authenticationtype="None"
-      
-  />
-  
-  
-
-  <apn carrier="Internet"
-      mcc="730"
-      mnc="07"
-      apn="imovil.virginmobile.cl"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS"
-      mcc="730"
-      mnc="07"
-      apn="mmsc.virginmobile.cl"
-      mmsc="http://mms.virginmobile.cl:1981/mms"
-      type="mms"
-  />
-
-  <apn carrier="VTR Internet"
-      mcc="730"
-      mnc="08"
-      apn="movil.vtr.com"
-      type="default,supl"
-  />
-
-  <apn carrier="VTR MMS"
-      mcc="730"
-      mnc="08"
-      apn="mms.vtr.com"
-      mmsc="http://192.168.94.162:19090/was"
-      mmsproxy="192.168.94.210"
-      type="mms"
-  />
-  
-  <apn carrier="Nextel"
-      mcc="730"
-      mnc="09"
-      apn="wap.nextelmovil.cl"
-      type="default,supl,wap"
-  />
-
-  <apn carrier="Nextel MMS"
-      mcc="730"
-      mnc="09"
-      apn="mms.nextelmovil.cl"
-      mmsc="http://3gmms.nextelmovil.cl"
-      mmsproxy="129.192.129.104"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Internet Movil"
-      mcc="730"
-      mnc="10"
-      apn="bam.entelpcs.cl"
-      user="entelpcs"
-      password="entelpcs"
-      proxy="10.99.0.10"
-      port="8080"
-      type="default"
-      protocol="IPv4"
-      roaming_protocol="IPv4"
-      authenticationtype="None"
-  />
-
-  <apn carrier="WEB EPCS"
-      mcc="730"
-      mnc="10"
-      apn="imovil.entelpcs.cl"
-      user="entelpcs"
-      password="entelpcs"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS EPCS"
-      mcc="730"
-      mnc="10"
-      apn="mms.entelpcs.cl"
-      user="entelmms"
-      password="entelpcs"
-      mmsc="http://mmsc.entelpcs.cl"
-      mmsproxy="10.99.0.10"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="Claro IMS"
-      mcc="732"
-      mnc="101"
-      apn="ims"
-      type="ims"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="WEB Comcel 3GSM"
-      mcc="732"
-      mnc="101"
-      apn="internet.comcel.com.co"
-      type="xcap"
-      protocol="IPV4V6"
-      roaming_protocol="IPV4V6"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="COMCELWEB"
-      mcc="732"
-      mnc="101"
-      apn="internet.comcel.com.co"
-      user="COMCELWEB"
-      password="COMCELWEB"
-      type="default,supl"
-  />
-
-  <apn carrier="MMS Comcel 3GSM"
-      mcc="732"
-      mnc="101"
-      apn="mms.comcel.com.co"
-      user="COMCELMMS"
-      password="COMCELMMS"
-      mmsc="http://www.comcel.com.co/mms"
-      mmsproxy="198.228.90.225"
-      mmsport="8799"
-      type="mms"
-  />
-  
-  <apn carrier="TIGO WEB"
-      mcc="732"
-      mnc="103"
-      apn="web.colombiamovil.com.co"
-      type="default,supl"
-  />
-
-  <apn carrier="TIGO Multimedia"
-      mcc="732"
-      mnc="103"
-      apn="mms.colombiamovil.com.co"
-      user="mms-cm1900"
-      password="mms-cm1900"
-      mmsc="http://mms.ola.com.co"
-      mmsproxy="190.102.206.48"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="TIGO WEB"
-      mcc="732"
-      mnc="111"
-      apn="web.colombiamovil.com.co"
-      type="default,supl"
-  />
-
-  <apn carrier="TIGO Multimedia"
-      mcc="732"
-      mnc="111"
-      apn="mms.colombiamovil.com.co"
-      user="mms-cm1900"
-      password="mms-cm1900"
-      mmsc="http://mms.ola.com.co"
-      mmsproxy="190.102.206.48"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="MOVISTAR INTERNET"
-      mcc="732"
-      mnc="123"
-      apn="internet.movistar.com.co"
-      user="movistar"
-      password="movistar"
-      authtype="1"
-      type="default,supl"
-  />
-  <apn carrier="MOVISTAR INTERNET"
-      mcc="730"
-      mnc="02"
-      apn="wap.tmovil.cl"
-      user="wap"
-      password="wap"
-      type="default"
-      protocol="IPv4"
-      roaming_protocol="IPv4"
-      authenticationtype="None"
-  />
-  <apn carrier="MOVISTAR INTERNET"
-      mcc="740"
-      mnc="00"
-      apn="internet.movistar.com.ec"
-      user="movistar"
-      password="movistar"
-      type="default"
-      protocol="IPv4"
-      roaming_protocol="IPv4"
-      authenticationtype="None"
-  />
-  <apn carrier="CNT Internet"
-      mcc="740"
-      mnc="02"
-      apn="internet.cnt.net.ec"
-      type="default"
-      protocol="IPv4"
-      roaming_protocol="IPv4"
-      authenticationtype="None"
-  />
-  
-  <apn carrier="MOVISTAR INTERNET"
-      mcc="716"
-      mnc="06"
-      apn="movistar.pe"
-      user="movistar@datos"
-      password="movistar"
-      type="default"
-      protocol="IPv4"
-      roaming_protocol="IPv4"
-      authenticationtype="PAP"
-  />
-  
-
-  <apn carrier="MOVISTAR MMS"
-      mcc="732"
-      mnc="123"
-      apn="mms.movistar.com.co"
-      user="movistar"
-      password="movistar"
-      mmsc="http://mms.movistar.com.co"
-      mmsproxy="192.168.222.7"
-      mmsport="9001"
-      type="mms"
-  />
-
-  <apn carrier="MOVISTAR IMS"
-       mcc="732"
-       mnc="123"
-       apn="ims"
-       type="ims"
-       protocol="IP"
-       roaming_protocol="IP"
-       bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="MOVISTAR XCAP"
-      mcc="732"
-      mnc="123"
-      apn="hos"
-      type="xcap"
-      protocol="IP"
-      roaming_protocol="IP"
-      bearer_bitmask ="1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19"
-  />
-
-  <apn carrier="ETB LTE"
-      mcc="732"
-      mnc="187"
-      apn="internetmovil.etb.net.co"
-      type="default,supl"
-      protocol="IP"
-      roaming_protocol="IP"
-  />
-
-  <apn carrier="Digitel WEB"
-      mcc="734"
-      mnc="02"
-      apn="gprsweb.digitel.ve"
-      type="default,supl"
-  />
-
-  <apn carrier="Digitel MMS"
-      mcc="734"
-      mnc="02"
-      apn="expresate.digitel.ve"
-      mmsc="http://expresate.digitel.com.ve/servlets/mms"
-      mmsproxy="213.26.205.1"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="MOVISTAR Wap"
-      mcc="734"
-      mnc="04"
-      apn="wap.movistar.ve"
-      user="movistar"
-      password="movistar"
-      proxy="200.35.64.73"
-      port="9001"
-      type="default,supl"
-  />
-
-  <apn carrier="MOVISTAR MMS"
-      mcc="734"
-      mnc="04"
-      apn="mms.movistar.ve"
-      mmsc="http://mms.movistar.com.ve:8088/mms"
-      mmsproxy="200.35.64.73"
-      mmsport="9001"
-      type="mms"
-  />
-  
-  <apn carrier="Movilnet WEB"
-      mcc="734"
-      mnc="06"
-      apn="app.movilnet.com.ve"
-	  proxy="192.168.201.170"
-      port="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="Movilnet MMS"
-      mcc="734"
-      mnc="06"
-      apn="mm.movilnet.com.ve"
-      mmsc="http://mms2.movilnet.com.ve/servlets/mms"
-      mmsproxy="192.168.16.12"
-      mmsport="8080"
-      type="mms"
-  />
-  
-  <apn carrier="Tigo WEB"
-      mcc="736"
-      mnc="03"
-      apn="wap.tigo.bo"
-      proxy="172.25.100.8"
-      port="9201"
-      type="default,supl"
-  />
-
-  <apn carrier="Tigo MMS"
-      mcc="736"
-      mnc="03"
-      apn="mms.tigo.bo"
-      mmsc="http://mms"
-      mmsproxy="172.25.100.8"
-      mmsport="8888"
-      type="mms"
-  />
-  
-  <apn carrier="MOVISTAR Wap"
-      mcc="740"
-      mnc="00"
-      apn="wap.movistar.com.ec"
-      user="movistar"
-      password="movistar"
-      proxy="10.3.5.50"
-      port="9001"
-      type="default,supl"
-  />
-
-  <apn carrier="MOVISTAR MMS"
-      mcc="740"
-      mnc="00"
-      apn="mms.movistar.com.ec"
-      user="movistar"
-      password="movistar"
-      mmsc="http://mms.movistar.com.ec:8088/mms"
-      mmsproxy="10.3.5.50"
-      mmsport="9001"
-      type="mms"
-      protocol="IPv4"
-  />
-  
-  <apn carrier="MOVISTAR Wap"
-      mcc="740"
-      mnc="01"
-      apn="wap.movistar.com.ec"
-      user="movistar"
-      password="movistar"
-	  proxy="10.3.5.50"
-      port="9001"
-      type="default,supl"
-  />
-
-  <apn carrier="PORTA MMS"
-      mcc="740"
-      mnc="01"
-      apn="mms.porta.com.ec"
-      user="portamms"
-      password="portamms2003"
-      mmsc="http://iesmms.porta.com.ec"
-      mmsproxy="216.250.208.94"
-      mmsport="8799"
-      type="mms"
-  />
-  
-  <apn carrier="MOVISTAR Wap"
-      mcc="740"
-      mnc="02"
-      apn="wap.movistar.com.ec"
-      user="movistar"
-      password="movistar"
-      proxy="10.3.5.50"
-      port="9001"
-      type="default,supl"
-  />
-
-  <apn carrier="ALEGRO MMS"
-      mcc="740"
-      mnc="02"
-      apn="mms.alegro.net.ec"
-      mmsc="http://mms.alegro.net.ec"
-      mmsproxy="10.4.85.3"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <apn carrier="VOXWAP"
-      mcc="744"
-      mnc="01"
-      apn="vox.wap"
-      user="vox"
-      password="1234"
-      proxy="172.24.97.29"
-      port="8080"
-      type="wap"
-  />
-  <apn carrier="VOXINTERNET"
-      mcc="744"
-      mnc="01"
-      apn="vox.internet"
-      user=""
-      password=""
-      type="default,supl"
-  />
-   <apn carrier="Vox Mms"
-      mcc="744"
-      mnc="01"
-      apn="vox.mms"
-      user=""
-      password=""
-      mmsproxy="172.24.97.29"
-      mmsport="8080"
-      mmsc="http://mms.vox.com.py/mmsc"
-      type="mms"
-  />     
-  <apn carrier="WAP GPRS"
-      mcc="744"
-      mnc="02"
-      apn="wap.ctimovil.com.py"
-      user="ctigprs"
-      password="ctigprs999"
-      proxy="170.51.255.240"
-      port="8080"
-      type="wap"
-  />  
- <apn carrier="Internet Claro"
-      mcc="744"
-      mnc="02"
-      apn="internet.ctimovil.com.py"
-      user=""
-      password=""
-      type="default,supl"
-  />
- <apn carrier="Internet Claro"
-      mcc="730"
-      mnc="03"
-      apn="bam.clarochile.cl"
-      user="clarochile"
-      password="clarochile"
-      type="default"
-      protocol="IPv4"
-      roaming_protocol="IPv4"
-      authenticationtype="None"
-  />
-   <apn carrier="Internet Claro"
-      mcc="740"
-      mnc="01"
-      apn="internet.claro.com.ec"
-      type="default"
-      protocol="IPv4/IPv6"
-      roaming_protocol="IPv4"
-      authenticationtype="None"
-  />
-  <apn carrier="Internet Claro"
-      mcc="736"
-      mnc="01"
-      apn="internet.nuevatel.com"
-      type="default"
-      protocol="IPv4"
-      roaming_protocol="IPv4"
-      authenticationtype="None"
-  />
-  <apn carrier="WEB Tigo"
-      mcc="736"
-      mnc="03"
-      apn="internet.tigo.bo"
-      type="default"
-      protocol="IPv4"
-      roaming_protocol="IPv4"
-      authenticationtype="None"
-  />
-  
-
-  <apn carrier="CLARO MMS PY"
-      mcc="744"
-      mnc="02"
-      apn="mms.ctimovil.com.py"
-      user=""
-      password=""
-      mmsproxy="170.51.255.240"
-      mmsport="8080"
-      mmsc="http://mms.ctimovil.com.py"
-      type="mms"
-  />
-  <apn carrier="WAP Tigo"
-      mcc="744"
-      mnc="04"
-      apn="wap.tigo.py"
-      user=""
-      password=""
-      proxy="10.16.17.12"
-      port="8888"
-      type="wap"
-  />  
-  <apn carrier="Ineternet TIGO"
-      mcc="744"
-      mnc="04"
-      apn="internet.tigo.py"
-      user=""
-      password=""
-      type="default,supl"
-  />
-
-  <apn carrier="MMS Tigo"
-      mcc="744"
-      mnc="04"
-      apn="mms.tigo.py"
-      user=""
-      password=""
-      mmsproxy="10.16.17.12"
-      mmsport="8888"
-      mmsc="http://mms"
-      type="mms"
-  />
-  <apn carrier="Personal WAP"
-      mcc="744"
-      mnc="05"
-      apn="wap.personal.com.py"
-      user="personal"
-      password="personal"
-      proxy="172.16.192.6"
-      port="9201"
-      type="wap"
-  />  
-  <apn carrier="Internet Personal"
-      mcc="744"
-      mnc="05"
-      apn="internet"
-      user=""
-      password=""
-      type="default,supl"
-  />
-
-  <apn carrier="WAP PERSONAL"
-      mcc="744"
-      mnc="05"
-      apn="mms"
-      user=""
-      password=""
-      mmsproxy="172.16.192.7"
-      mmsport="8080"
-      mmsc="http://mms"
-      type="mms"
-  />
-
-  <apn carrier="ANCEL WAP"
-      mcc="748"
-      mnc="01"
-      apn="wap"
-      proxy="200.40.246.2"
-      mmsport="3128"
-      type="default,supl"
-  />
-
-  <apn carrier="ANCEL MMS"
-      mcc="748"
-      mnc="01"
-      apn="mms"
-      mmsc="http://mmsc.mms.ancelutil.com.uy"
-      mmsproxy="200.40.246.2"
-      mmsport="3128"
-      type="mms"
-  />
-  
-  <apn carrier="MOVISTAR WAP"
-      mcc="748"
-      mnc="07"
-      apn="apnwap.movistar.com.uy"
-      user="wapuy"
-      password="wapuy"
-      proxy="200.5.68.10"
-      mmsport="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="MOVISTAR MMS"
-      mcc="748"
-      mnc="07"
-      apn="apnmms.movistar.com.uy"
-      user="mmsuy"
-      password="mmsuy"
-      mmsc="http://mmsc.movistar.com.uy"
-      mmsproxy="10.0.2.29"
-      mmsport="8080"
-      type="mms"
-  /> 
-  
-  <apn carrier="CLARO WAP"
-      mcc="748"
-      mnc="10"
-      apn="wap.ctimovil.com.uy"
-      user="ctigprs"
-      password="ctigprs999"
-      proxy="170.51.255.240"
-      mmsport="8080"
-      type="default,supl"
-  />
-
-  <apn carrier="CLARO MMS"
-      mcc="748"
-      mnc="10"
-      apn="mms.ctimovil.com.uy"
-      user="ctimms"
-      password="ctimms999"
-      mmsc="http://mms.ctimovil.com.uy"
-      mmsproxy="170.51.255.240"
-      mmsport="8080"
-      type="mms"
-  />
-
-  <!-- KDDI -->
-  <apn carrier="KDDI admin"
-        mcc="440"
-        mnc="54"
-        apn="admin.au.net.net.jp"
-        user="au@admin.au.net.net.up"
-        password="au"
-        type="fota"
-        protocol="IPV4V6"
-        authenticationtype="CHAP"
-
-    />
-  
-    <apn carrier="KDDI admin"
-        mcc="440"
-        mnc="51"
-        apn="admin.au.net.net.jp"
-        user="au@admin.au.net.net.up"
-        password="au"
-        type="fota"
-        protocol="IPV4V6"
-        authenticationtype="CHAP"
-
-    />
-</apns>
Index: vendor/branch/5058A_Claro/device/mediatek/common/device.mk
===================================================================
--- vendor/branch/5058A_Claro/device/mediatek/common/device.mk	(revision 3017)
+++ vendor/branch/5058A_Claro/device/mediatek/common/device.mk	(revision 3018)
@@ -1,3232 +0,0 @@
-# this is platform common device config
-# you should migrate turnkey alps/build/target/product/common.mk to this file in correct way
-
-# TARGET_PREBUILT_KERNEL should be assigned by central building system
-#ifeq ($(TARGET_PREBUILT_KERNEL),)
-#LOCAL_KERNEL := device/mediatek/common/kernel
-#else
-#LOCAL_KERNEL := $(TARGET_PREBUILT_KERNEL)
-#endif
-
-#PRODUCT_COPY_FILES += $(LOCAL_KERNEL):kernel
-
-# MediaTek framework base modules
-PRODUCT_PACKAGES += \
-    mediatek-common \
-    mediatek-framework \
-    CustomPropInterface \
-    mediatek-telephony-common
-
-# yv12 implementation of wallpaper
-PRODUCT_PACKAGES += libyv12util
-
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),NONE)
-PRODUCT_PACKAGES += \
-    FwkPlugin
-endif
-
-
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-# Override the PRODUCT_BOOT_JARS to include the MediaTek system base modules for global access
-PRODUCT_BOOT_JARS += \
-    mediatek-common \
-    mediatek-framework \
-
-ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-PRODUCT_BOOT_JARS += \
-    mediatek-telephony-common
-endif
-
-endif
-
-# Telephony
-PRODUCT_COPY_FILES += device/mediatek/common/apns-conf.xml:system/etc/apns-conf.xml:mtk
-PRODUCT_COPY_FILES += device/mediatek/common/spn-conf.xml:system/etc/spn-conf.xml:mtk
-
-# Audio
-ifeq ($(findstring maxim, $(MTK_AUDIO_SPEAKER_PATH)), maxim)
-    PRODUCT_PACKAGES += libdsm
-    PRODUCT_PACKAGES += libdsmconfigparser
-    PRODUCT_PACKAGES += libdsm_interface
-else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),smartpa_nxp_tfa9887)
-    PRODUCT_PACKAGES += libtfa9887_interface
-else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),smartpa_nxp_tfa9890)
-    PRODUCT_PACKAGES += libtfa9890_interface
-else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),smartpa_richtek_rt5509)
-    PRODUCT_PACKAGES += librt_extamp_intf
-
-    ifeq ($(MTK_AUDIO_NUMBER_OF_SPEAKER),)
-        PRODUCT_COPY_FILES += \
-            vendor/mediatek/proprietary/hardware/smartpa/richtek/rt_mono_device.xml:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt_device.xml:mtk
-    else ifeq ($(MTK_AUDIO_NUMBER_OF_SPEAKER),$(filter $(MTK_AUDIO_NUMBER_OF_SPEAKER),1))
-        PRODUCT_COPY_FILES += \
-            vendor/mediatek/proprietary/hardware/smartpa/richtek/rt_mono_device.xml:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt_device.xml:mtk
-    else ifeq ($(MTK_AUDIO_NUMBER_OF_SPEAKER),$(filter $(MTK_AUDIO_NUMBER_OF_SPEAKER),2))
-        PRODUCT_COPY_FILES += \
-            vendor/mediatek/proprietary/hardware/smartpa/richtek/rt_multi_device.xml:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt_device.xml:mtk
-    endif
-    PRODUCT_COPY_FILES += \
-        $(call add-to-product-copy-files-if-exists, $(MTK_TARGET_PROJECT_FOLDER)/rt_device.xml:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt_device.xml:mtk)
-
-    PRODUCT_COPY_FILES += \
-        vendor/mediatek/proprietary/hardware/smartpa/richtek/rt5509_calibration:$(TARGET_COPY_OUT_VENDOR)/bin/rt5509_calibration:mtk
-    PRODUCT_COPY_FILES += \
-        device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/smartpa_param/rt5509_param:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt5509_param:mtk
-    PRODUCT_COPY_FILES += \
-        $(call add-to-product-copy-files-if-exists, $(MTK_TARGET_PROJECT_FOLDER)/rt5509_param:$(TARGET_COPY_OUT_VENDOR)/etc/smartpa_param/rt5509_param:mtk)
-endif
-
-PRODUCT_COPY_FILES += device/mediatek/common/audio_em.xml:$(TARGET_COPY_OUT_VENDOR)/etc/audio_em.xml:mtk
-
-RAT_CONFIG = $(strip $(MTK_PROTOCOL1_RAT_CONFIG))
-ifneq (,$(RAT_CONFIG))
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_protocol1_rat_config=$(RAT_CONFIG)
-  ifneq (,$(findstring C,$(RAT_CONFIG)))
-    # C2K is supported
-    RAT_CONFIG_C2K_SUPPORT=yes
-  endif
-  ifneq (,$(findstring L,$(RAT_CONFIG)))
-    # LTE is supported
-    RAT_CONFIG_LTE_SUPPORT=yes
-  endif
-endif
-
-# For C2K CDMA feature file
-ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-PRODUCT_COPY_FILES += frameworks/native/data/etc/android.hardware.telephony.cdma.xml:system/etc/permissions/android.hardware.telephony.cdma.xml
-endif
-
-ifeq ($(strip $(MTK_TELEPHONY_FEATURE_SWITCH_DYNAMICALLY)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_telephony_switch=1
-endif
-
-ifeq ($(strip $(MTK_MP2_PLAYBACK_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_support_mp2_playback=1
-endif
-
-ifeq ($(strip $(MTK_AUDIO_ALAC_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_alac_support=1
-endif
-
-#MTB
-PRODUCT_PACKAGES += mtk_setprop
-
-#MMS
-ifeq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifndef MTK_TB_WIFI_3G_MODE
-        PRODUCT_PACKAGES += messaging
-    else
-        ifeq ($(strip $(MTK_TB_WIFI_3G_MODE)), 3GDATA_SMS)
-            PRODUCT_PACKAGES += messaging
-        endif
-    endif
-endif
-
-ifeq ($(strip $(MTK_BSP_PACKAGE)), yes)
-    ifndef MTK_TB_WIFI_3G_MODE
-        PRODUCT_PACKAGES += messaging
-    else
-        ifeq ($(strip $(MTK_TB_WIFI_3G_MODE)), 3GDATA_SMS)
-            PRODUCT_PACKAGES += messaging
-        endif
-    endif
-endif
-
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-        ifneq ($(strip $(MTK_A1_FEATURE)), yes)
-            ifndef MTK_TB_WIFI_3G_MODE
-                PRODUCT_PACKAGES += MtkMms
-            else
-                ifeq ($(strip $(MTK_TB_WIFI_3G_MODE)), 3GDATA_SMS)
-                    PRODUCT_PACKAGES += MtkMms
-                endif
-            endif
-        endif
-    endif
-endif
-
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-        PRODUCT_PACKAGES += MtkCalendar
-        PRODUCT_PACKAGES += MtkBrowser
-        PRODUCT_PACKAGES += MtkQuickSearchBox
-        PRODUCT_PACKAGES += MtkWebView
-    endif
-endif
-
-# Telephony begin
-PRODUCT_PACKAGES += muxreport
-PRODUCT_PACKAGES += mtkrild
-PRODUCT_PACKAGES += mtk-ril
-PRODUCT_PACKAGES += libutilrilmtk
-PRODUCT_PACKAGES += gsm0710muxd
-PRODUCT_PACKAGES += mtkrildmd2
-PRODUCT_PACKAGES += mtk-rilmd2
-PRODUCT_PACKAGES += librilmtkmd2
-PRODUCT_PACKAGES += gsm0710muxdmd2
-
-ifeq ($(strip $(MTK_RIL_MODE)), c6m_1rild)
-    PRODUCT_PACKAGES += libmtk-ril
-    PRODUCT_PACKAGES += mtkfusionrild
-    PRODUCT_PACKAGES += librilfusion
-    PRODUCT_PACKAGES += riltest
-    ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-        PRODUCT_PACKAGES += libvia-ril
-    endif
-endif
-
-PRODUCT_PACKAGES += md_minilog_util
-PRODUCT_PACKAGES += SimRecoveryTestTool
-PRODUCT_PACKAGES += ppl_agent
-PRODUCT_PACKAGES += libratconfig
-# External SIM support
-ifeq ($(strip $(MTK_EXTERNAL_SIM_SUPPORT)), yes)
-    PRODUCT_PACKAGES += libvsim-adaptor-client
-endif
-
-# Remote SIM unlock
-ifeq ($(strip $(SIM_ME_LOCK_MODE)), 1)
-    PRODUCT_PACKAGES += libsimmelock
-endif
-
-ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-#For C2K RIL
-PRODUCT_PACKAGES += \
-          viarild \
-          libc2kril \
-          libviatelecom-withuim-ril \
-          viaradiooptions \
-          librpcril \
-          ctclient
-
-#Set CT6M_SUPPORT
-ifeq ($(strip $(CT6M_SUPPORT)), yes)
-PRODUCT_PACKAGES += CdmaSystemInfo
-PRODUCT_PROPERTY_OVERRIDES += ro.ct6m_support=1
-  ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-      PRODUCT_COPY_FILES += vendor/mediatek/proprietary/frameworks/base/telephony/etc/spn-conf-op09.xml:$(TARGET_COPY_OUT_VENDOR)/etc/spn-conf-op09.xml:mtk
-    endif
-  endif
-endif
-
-#For PPPD
-PRODUCT_PACKAGES += \
-          ip-up-cdma \
-          ipv6-up-cdma \
-          link-down-cdma \
-          pppd_via
-
-#For C2K control modules
-PRODUCT_PACKAGES += \
-          libc2kutils \
-          flashlessd \
-          statusd
-endif
-
-ifeq ($(MTK_RIL_MODE), c6m_1rild)
-# IMSM(93)
-PRODUCT_PACKAGES += volte_imsm_93
-else
-# MAL shared library
-PRODUCT_PACKAGES += libmdfx
-PRODUCT_PACKAGES += libmal_mdmngr
-PRODUCT_PACKAGES += libmal_nwmngr
-PRODUCT_PACKAGES += libmal_rilproxy
-PRODUCT_PACKAGES += libmal_simmngr
-PRODUCT_PACKAGES += libmal_datamngr
-PRODUCT_PACKAGES += libmal_rds
-PRODUCT_PACKAGES += libmal_epdga
-PRODUCT_PACKAGES += libmal_imsmngr
-PRODUCT_PACKAGES += libmal
-
-PRODUCT_PACKAGES += volte_imsm
-PRODUCT_PACKAGES += volte_imspa
-
-# MAL-Dongle shared library
-PRODUCT_PACKAGES += libmd_mdmngr
-PRODUCT_PACKAGES += libmd_rilproxy
-PRODUCT_PACKAGES += libmd_simmngr
-PRODUCT_PACKAGES += libmd_datamngr
-PRODUCT_PACKAGES += libmd_nwmngr
-PRODUCT_PACKAGES += libmd
-
-# # Volte IMS shared library
-PRODUCT_PACKAGES += volte_imspa_md
-
-# Add for (VzW) chipset test
-ifneq ($(strip $(MTK_VZW_CHIPTEST_MODE_SUPPORT)), 0)
-PRODUCT_PACKAGES += libatch
-PRODUCT_PACKAGES += libatcputil
-PRODUCT_PACKAGES += atcp
-PRODUCT_PACKAGES += libswext_plugin
-PRODUCT_PACKAGES += libnetmngr_plugin
-
-PRODUCT_PACKAGES += liblannetmngr_core
-PRODUCT_PACKAGES += liblannetmngr_api
-PRODUCT_PACKAGES += lannetmngrd
-PRODUCT_PACKAGES += lannetmngr_test
-endif
-
-endif
-
-# VoLTE Process
-ifeq ($(strip $(MTK_IMS_SUPPORT)),yes)
-PRODUCT_PACKAGES += Gba
-PRODUCT_PACKAGES += libipsec_ims_shr
-
-ifneq ($(MTK_RIL_MODE), c6m_1rild)
-# MAL Process
-PRODUCT_PACKAGES += mtkmal
-
-# # Volte IMS Dongle Process
-PRODUCT_PACKAGES += volte_imsm_md
-endif
-
-
-else
-    ifeq ($(strip $(MTK_EPDG_SUPPORT)),yes) # EPDG without IMS
-
-    ifneq ($(MTK_RIL_MODE), c6m_1rild)
-    # MAL Process
-    PRODUCT_PACKAGES += mtkmal
-
-    # # Volte IMS Dongle Process
-#    PRODUCT_PACKAGES += volte_imsm_md
-    endif
-
-    endif
-endif
-
-# include init.volte.rc
-ifeq ($(MTK_IMS_SUPPORT),yes)
-    ifneq ($(wildcard $(MTK_TARGET_PROJECT_FOLDER)/init.volte.rc),)
-        PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/init.volte.rc:root/init.volte.rc
-    else
-        ifneq ($(wildcard $(MTK_PROJECT_FOLDER)/init.volte.rc),)
-            PRODUCT_COPY_FILES += $(MTK_PROJECT_FOLDER)/init.volte.rc:root/init.volte.rc
-        else
-            PRODUCT_COPY_FILES += device/mediatek/common/init.volte.rc:root/init.volte.rc
-        endif
-    endif
-endif
-
-#include multi_init.rc in meta mode and factory mode.
-PRODUCT_COPY_FILES += device/mediatek/common/multi_init.rc:root/multi_init.rc
-
-PRODUCT_PACKAGES += llibmtk_vt_swip
-PRODUCT_PACKAGES += libmtk_vt_utils
-PRODUCT_PACKAGES += libmtk_vt_wrapper
-PRODUCT_PACKAGES += libmtk_vt_service
-PRODUCT_PACKAGES += vtservice
-
-# WFCA Process
-ifeq ($(strip $(MTK_WFC_SUPPORT)),yes)
-  PRODUCT_PACKAGES += wfca
-endif
-
-
-# Hwui program binary service
-PRODUCT_PACKAGES += program_binary_service
-PRODUCT_PACKAGES += program_binary_builder
-
-ifeq ($(strip $(MTK_RCS_SUPPORT)),yes)
-PRODUCT_PACKAGES += Gba
-endif
-
-ifeq ($(strip $(MTK_PRIVACY_PROTECTION_LOCK)),yes)
-  PRODUCT_PACKAGES += PrivacyProtectionLock
-endif
-
-ifeq ($(strip $(MTK_USB_CBA_SUPPORT)),yes)
-  PRODUCT_PACKAGES += UsbChecker
-endif
-
-ifeq ($(strip $(GOOGLE_RELEASE_RIL)), yes)
-    PRODUCT_PACKAGES += libril
-else
-    PRODUCT_PACKAGES += librilmtk
-endif
-# Telephony end
-
-# For MTK Camera
-PRODUCT_PACKAGES += Camera
-PRODUCT_PACKAGES += Panorama
-PRODUCT_PACKAGES += NativePip
-PRODUCT_PACKAGES += SlowMotion
-PRODUCT_PACKAGES += CameraRoot
-
-PRODUCT_DEFAULT_PROPERTY_OVERRIDES += camera.disable_zsl_mode=1
-
-PRODUCT_PACKAGES += libBnMtkCodec
-PRODUCT_PACKAGES += MtkCodecService
-PRODUCT_PACKAGES += autokd
-RODUCT_PACKAGES += \
-    dhcp6c \
-    dhcp6ctl \
-    dhcp6c.conf \
-    dhcp6cDNS.conf \
-    dhcp6s \
-    dhcp6s.conf \
-    dhcp6c.script \
-    dhcp6cctlkey \
-    libifaddrs
-
-# meta tool
-ifeq ($(MTK_INTERNAL),yes)
-ifneq ($(wildcard vendor/mediatek/proprietary/buildinfo/label.ini),)
-  include vendor/mediatek/proprietary/buildinfo/label.ini
-  ifeq ($(MTK_BUILD_VERNO),ALPS.W10.24.p0)
-    MTK_BUILD_VERNO := $(MTK_INTERNAL_BUILD_VERNO)
-  endif
-  ifeq ($(MTK_WEEK_NO),W10.24)
-    MTK_WEEK_NO := $(MTK_INTERNAL_WEEK_NO)
-  endif
-endif
-endif
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/buildinfo/branch.mk)
-PRODUCT_PROPERTY_OVERRIDES += ro.mediatek.version.release=$(strip $(MTK_BUILD_VERNO))
-PRODUCT_PROPERTY_OVERRIDES += ro.mediatek.version.sdk=4
-
-# To specify customer's releasekey
-ifeq ($(MTK_INTERNAL),yes)
-  PRODUCT_DEFAULT_DEV_CERTIFICATE := device/mediatek/common/security/releasekey
-else
-  ifeq ($(MTK_SIGNATURE_CUSTOMIZATION),yes)
-    ifeq ($(wildcard device/mediatek/common/security/$(strip $(MTK_TARGET_PROJECT))),)
-      $(error Please create device/mediatek/common/security/$(strip $(MTK_TARGET_PROJECT))/ and put your releasekey there!!)
-    else
-      PRODUCT_DEFAULT_DEV_CERTIFICATE := device/mediatek/common/security/$(strip $(MTK_TARGET_PROJECT))/releasekey
-    endif
-  else
-#   Not specify PRODUCT_DEFAULT_DEV_CERTIFICATE and the default testkey will be used.
-  endif
-endif
-
-# Handheld core hardware
-PRODUCT_COPY_FILES += frameworks/native/data/etc/handheld_core_hardware.xml:system/etc/permissions/handheld_core_hardware.xml
-
-# Bluetooth Low Energy Capability
-PRODUCT_COPY_FILES += frameworks/native/data/etc/android.hardware.bluetooth_le.xml:system/etc/permissions/android.hardware.bluetooth_le.xml
-
-# Bluetooth DUN profile
-ifeq ($(MTK_BT_BLUEDROID_DUN_GW_12),yes)
-PRODUCT_PROPERTY_OVERRIDES += bt.profiles.dun.enabled=1
-PRODUCT_PACKAGES += pppd_btdun libpppbtdun.so
-endif
-
-# Bluetooth BIP profile cover art feature
-ifeq ($(MTK_BT_BLUEDROID_AVRCP_TG_16),yes)
-  PRODUCT_PROPERTY_OVERRIDES += bt.profiles.bip.coverart.enable=1
-endif
-
-# Customer configurations
-ifneq ($(wildcard $(MTK_TARGET_PROJECT_FOLDER)/custom.conf),)
-PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/custom.conf:$(TARGET_COPY_OUT_VENDOR)/etc/custom.conf:mtk
-else
-ifdef OPTR_SPEC_SEG_DEF
-    ifneq ($(strip $(OPTR_SPEC_SEG_DEF)),NONE)
-        OPTR := $(word 1,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-        SPEC := $(word 2,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-        SEG  := $(word 3,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-        ifneq ($(wildcard vendor/mediatek/proprietary/operator/$(OPTR)/$(SPEC)/$(SEG)/custom.conf),)
-        PRODUCT_COPY_FILES += vendor/mediatek/proprietary/operator/$(OPTR)/$(SPEC)/$(SEG)/custom.conf:$(TARGET_COPY_OUT_VENDOR)/etc/custom.conf:mtk
-        else
-        PRODUCT_COPY_FILES += device/mediatek/common/custom.conf:$(TARGET_COPY_OUT_VENDOR)/etc/custom.conf:mtk
-        endif
-    else
-        PRODUCT_COPY_FILES += device/mediatek/common/custom.conf:$(TARGET_COPY_OUT_VENDOR)/etc/custom.conf:mtk
-    endif
-else
-    PRODUCT_COPY_FILES += device/mediatek/common/custom.conf:$(TARGET_COPY_OUT_VENDOR)/etc/custom.conf:mtk
-endif
-endif
-
-# Recovery
-PRODUCT_COPY_FILES += $(MTK_PROJECT_FOLDER)/recovery.fstab:$(TARGET_COPY_OUT_VENDOR)/etc/recovery.fstab:mtk
-
-ifndef MTK_PLATFORM_DIR
-  ifneq ($(wildcard device/mediatek/$(MTK_PLATFORM)),)
-    MTK_PLATFORM_DIR = $(MTK_PLATFORM)
-  else
-    MTK_PLATFORM_DIR = $(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')
-  endif
-endif
-
-ifeq ($(wildcard device/mediatek/$(MTK_PLATFORM_DIR)),)
-  $(error the platform dir changed, expected: device/mediatek/$(MTK_PLATFORM_DIR), please check manually)
-endif
-
-# GMS interface
-ifdef BUILD_GMS
-ifeq ($(strip $(BUILD_GMS)), yes)
-$(call inherit-product-if-exists, vendor/google/products/gms.mk)
-
-PRODUCT_PROPERTY_OVERRIDES += \
-      ro.com.google.clientidbase=alps-$(TARGET_PRODUCT)-{country} \
-      ro.com.google.clientidbase.ms=alps-$(TARGET_PRODUCT)-{country} \
-      ro.com.google.clientidbase.yt=alps-$(TARGET_PRODUCT)-{country} \
-      ro.com.google.clientidbase.am=alps-$(TARGET_PRODUCT)-{country} \
-      ro.com.google.clientidbase.gmm=alps-$(TARGET_PRODUCT)-{country}
-endif
-endif
-
-# prebuilt interface
-$(call inherit-product-if-exists, vendor/mediatek/common/device-vendor.mk)
-
-# mtklog config
-ifeq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-ifeq ($(TARGET_BUILD_VARIANT),eng)
-PRODUCT_COPY_FILES += device/mediatek/common/mtklog/mtklog-config-basic-eng.prop:$(TARGET_COPY_OUT_VENDOR)/etc/mtklog-config.prop:mtk
-else
-PRODUCT_COPY_FILES += device/mediatek/common/mtklog/mtklog-config-basic-user.prop:$(TARGET_COPY_OUT_VENDOR)/etc/mtklog-config.prop:mtk
-endif
-else
-ifeq ($(TARGET_BUILD_VARIANT),eng)
-PRODUCT_COPY_FILES += device/mediatek/common/mtklog/mtklog-config-bsp-eng.prop:$(TARGET_COPY_OUT_VENDOR)/etc/mtklog-config.prop:mtk
-else
-PRODUCT_COPY_FILES += device/mediatek/common/mtklog/mtklog-config-bsp-user.prop:$(TARGET_COPY_OUT_VENDOR)/etc/mtklog-config.prop:mtk
-endif
-endif
-
-# ECC List Customization
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/external/EccList/EccList.mk)
-
-#fonts
-$(call inherit-product-if-exists, frameworks/base/data/fonts/fonts.mk)
-$(call inherit-product-if-exists, external/naver-fonts/fonts.mk)
-$(call inherit-product-if-exists, external/noto-fonts/fonts.mk)
-$(call inherit-product-if-exists, external/roboto-fonts/fonts.mk)
-$(call inherit-product-if-exists, frameworks/base/data/fonts/openfont/fonts.mk)
-
-#3Dwidget
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/frameworks/base/3dwidget/appwidget.mk)
-
-# AAPT Config
-$(call inherit-product-if-exists, device/mediatek/common/aapt/aapt_config.mk)
-
-#
-# MediaTek Operator features configuration
-#
-
-ifdef OPTR_SPEC_SEG_DEF
-  ifneq ($(strip $(OPTR_SPEC_SEG_DEF)),NONE)
-    OPTR := $(word 1,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-    SPEC := $(word 2,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-    SEG  := $(word 3,$(subst _,$(space),$(OPTR_SPEC_SEG_DEF)))
-    $(call inherit-product-if-exists, vendor/mediatek/proprietary/operator/$(OPTR)/$(SPEC)/$(SEG)/optr_apk_config.mk)
-
-    PRODUCT_PROPERTY_OVERRIDES += \
-      persist.operator.optr=$(OPTR) \
-      persist.operator.spec=$(SPEC) \
-      persist.operator.seg=$(SEG)
-  endif
-endif
-
-# Here we initializes variable MTK_REGIONAL_OP_PACK based on Carrier express pack
-ifdef MTK_CARRIEREXPRESS_PACK
-  ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),la)
-    MTK_REGIONAL_OP_PACK = OP112_SPEC0200_SEGDEFAULT OP120_SPEC0100_SEGDEFAULT OP15_SPEC0200_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),na)
-    MTK_REGIONAL_OP_PACK = OP07_SPEC0407_SEGDEFAULT OP08_SPEC0200_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),eu)
-    MTK_REGIONAL_OP_PACK = OP03_SPEC0200_SEGDEFAULT OP05_SPEC0200_SEGDEFAULT OP06_SPEC0106_SEGDEFAULT OP11_SPEC0200_SEGDEFAULT OP15_SPEC0200_SEGDEFAULT OP16_SPEC0200_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),ind)
-    MTK_REGIONAL_OP_PACK = OP18_SPEC0100_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),jpn)
-    MTK_REGIONAL_OP_PACK = OP17_SPEC0200_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),mea)
-    MTK_REGIONAL_OP_PACK = OP126_SPEC0100_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),au)
-    MTK_REGIONAL_OP_PACK = OP19_SPEC0200_SEGDEFAULT
-  else ifeq ($(strip $(MTK_CARRIEREXPRESS_PACK)),rus)
-    MTK_REGIONAL_OP_PACK = OP127_SPEC0200_SEGDEFAULT OP113_SPEC0200_SEGDEFAULT
-  else ifneq ($(strip $(MTK_CARRIEREXPRESS_PACK)),no)
-    $(error "MTK_CARRIEREXPRESS_PACK: $(MTK_CARRIEREXPRESS_PACK) not supported")
-  endif
-endif
-
-ifdef MTK_CARRIEREXPRESS_PACK
-  ifneq ($(strip $(MTK_CARRIEREXPRESS_PACK)),no)
-      PRODUCT_PROPERTY_OVERRIDES += ro.mtk_carrierexpress_pack=$(strip $(MTK_CARRIEREXPRESS_PACK))
-      ifeq ($(strip $(MTK_CARRIEREXPRESS_APK_INSTALL_SUPPORT)),yes)
-        PRODUCT_PROPERTY_OVERRIDES += ro.mtk_carrierexpress_inst_sup=1
-      endif
-      ifeq ($(strip $(MTK_CARRIEREXPRESS_SWITCH_MODE)),2)
-        PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cxp_switch_mode=2
-      endif
-      PRODUCT_PACKAGES += usp_service
-      PRODUCT_PACKAGES += libusp_native
-      temp_optr := $(OPTR_SPEC_SEG_DEF)
-      $(foreach OP_SPEC, $(MTK_REGIONAL_OP_PACK), \
-        $(eval OPTR_SPEC_SEG_DEF := $(OP_SPEC)) \
-        $(eval OPTR     := $(word 1, $(subst _,$(space),$(OP_SPEC)))) \
-        $(eval SPEC     := $(word 2, $(subst _,$(space),$(OP_SPEC)))) \
-        $(eval SEG      := $(word 3, $(subst _,$(space),$(OP_SPEC)))) \
-        $(eval include vendor/mediatek/proprietary/operator/$(OPTR)/$(SPEC)/$(SEG)/optr_apk_config.mk))
-      OPTR_SPEC_SEG_DEF := $(temp_optr)
-  endif
-endif
-
-# add for ATCI JAVA layer service
-PRODUCT_PACKAGES += AtciService
-
-PRODUCT_PACKAGES += DataTransfer
-
-# add for OMA DM, common module used by MediatekDM & red bend DM
-PRODUCT_PACKAGES += dm_agent_binder
-
-# red bend DM config files & lib
-ifeq ($(strip $(MTK_DM_APP)),yes)
-    PRODUCT_PACKAGES += reminder.xml
-    PRODUCT_PACKAGES += tree.xml
-    PRODUCT_PACKAGES += DmApnInfo.xml
-    PRODUCT_PACKAGES += vdmconfig.xml
-    PRODUCT_PACKAGES += libvdmengine.so
-    PRODUCT_PACKAGES += libvdmfumo.so
-    PRODUCT_PACKAGES += libvdmlawmo.so
-    PRODUCT_PACKAGES += libvdmscinv.so
-    PRODUCT_PACKAGES += libvdmscomo.so
-    PRODUCT_PACKAGES += dm
-endif
-
-# MediatekDM package & lib
-ifeq ($(strip $(MTK_MDM_APP)),yes)
-    PRODUCT_PACKAGES += MediatekDM
-endif
-
-# CTM
-ifeq ($(strip $(MTK_CTM_SUPPORT)),yes)
-PRODUCT_PACKAGES += ctm
-PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ctm_flag=0
-endif
-# SmsReg package
-ifeq ($(strip $(MTK_SMSREG_APP)),yes)
-    PRODUCT_PACKAGES += SmsReg
-endif
-
-ifeq ($(strip $(MTK_CMCC_FT_PRECHECK_SUPPORT)),yes)
-  PRODUCT_PACKAGES += FTPreCheck
-endif
-
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-    PRODUCT_PACKAGES += ConfigureCheck
-else
-    ifeq ($(strip $(OPTR_SPEC_SEG_DEF)), OP09_SPEC0212_SEGC)
-        PRODUCT_PACKAGES += ConfigureCheck
-    endif
-endif
-
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/frameworks/base/voicecommand/cfg/voicecommand.mk)
-
-ifeq ($(strip $(MTK_VOICE_UNLOCK_SUPPORT)),yes)
-    PRODUCT_PACKAGES += VoiceCommand
-else
-    ifeq ($(strip $(MTK_VOICE_UI_SUPPORT)),yes)
-        PRODUCT_PACKAGES += VoiceCommand
-    else
-            ifeq ($(strip $(MTK_VOW_SUPPORT)),yes)
-                PRODUCT_PACKAGES += VoiceCommand
-            endif
-    endif
-endif
-
-ifeq ($(strip $(MTK_VOICE_UNLOCK_SUPPORT)),yes)
-    PRODUCT_PACKAGES += VoiceUnlock
-else
-    ifeq ($(strip $(MTK_VOW_SUPPORT)),yes)
-        PRODUCT_PACKAGES += VoiceUnlock
-        PRODUCT_PACKAGES += MtkVoiceWakeupInteraction
-    endif
-endif
-
-ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-    PRODUCT_PACKAGES += c2k-ril-prop
-    PRODUCT_PACKAGES += via-plugin
-endif
-
-ifeq ($(strip $(MTK_USB_CBA_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_usb_cba_support=1
-endif
-
-ifeq ($(strip $(MTK_FOTA_SUPPORT)), yes)
-   PRODUCT_PACKAGES += fota1
-endif
-
-ifeq ($(strip $(MTK_NUM_MODEM_PROTOCOL)), 1)
-  PRODUCT_PROPERTY_OVERRIDES += ro.num_md_protocol=1
-endif
-ifeq ($(strip $(MTK_NUM_MODEM_PROTOCOL)), 2)
-  PRODUCT_PROPERTY_OVERRIDES += ro.num_md_protocol=2
-endif
-ifeq ($(strip $(MTK_NUM_MODEM_PROTOCOL)), 3)
-  PRODUCT_PROPERTY_OVERRIDES += ro.num_md_protocol=3
-endif
-ifeq ($(strip $(MTK_NUM_MODEM_PROTOCOL)), 4)
-  PRODUCT_PROPERTY_OVERRIDES += ro.num_md_protocol=4
-endif
-
-ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), ss)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.multisim.config=ss
-endif
-ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsds)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.multisim.config=dsds
-endif
-ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsda)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.multisim.config=dsda
-endif
-ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), tsts)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.multisim.config=tsts
-endif
-ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), qsqs)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.multisim.config=qsqs
-endif
-
-ifeq ($(strip $(MTK_AUDIO_PROFILES)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_profiles=1
-endif
-
-ifeq ($(strip $(MTK_AUDENH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audenh_support=1
-endif
-
-# MTK_LOSSLESS_BT
-ifeq ($(strip $(MTK_LOSSLESS_BT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_lossless_bt_audio=1
-endif
-
-# MTK_LOUNDNESS
-ifeq ($(strip $(MTK_BESLOUDNESS_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_besloudness_support=1
-endif
-
-# MTK_BESSURROUND
-ifeq ($(strip $(MTK_BESSURROUND_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bessurround_support=1
-endif
-
-# MTK_ANC
-ifeq ($(strip $(MTK_HEADSET_ACTIVE_NOISE_CANCELLATION)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_active_noise_cancel=1
-endif
-
-ifeq ($(strip $(MTK_MEMORY_COMPRESSION_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mem_comp_support=1
-endif
-
-ifeq ($(strip $(MTK_WAPI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wapi_support=1
-endif
-
-ifeq ($(strip $(MTK_BT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bt_support=1
-endif
-
-ifeq ($(strip $(MTK_WAPPUSH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wappush_support=1
-endif
-
-ifeq ($(strip $(MTK_AGPS_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_agps_app=1
-endif
-
-ifeq ($(strip $(MTK_FM_TX_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fm_tx_support=1
-endif
-
-ifeq ($(strip $(MTK_VT3G324M_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_vt3g324m_support=1
-endif
-
-ifeq ($(strip $(MTK_VOICE_UI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_voice_ui_support=1
-endif
-
-ifeq ($(strip $(MTK_VOICE_UNLOCK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_voice_unlock_support=1
-endif
-
-
-
-ifneq ($(MTK_AUDIO_TUNING_TOOL_VERSION),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_tuning_tool_ver=$(strip $(MTK_AUDIO_TUNING_TOOL_VERSION))
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_tuning_tool_ver=V1
-endif
-
-ifeq ($(strip $(MTK_DM_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dm_app=1
-endif
-
-ifeq ($(strip $(MTK_MATV_ANALOG_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_matv_analog_support=1
-endif
-
-ifeq ($(strip $(MTK_WLAN_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wlan_support=1
-  PRODUCT_PACKAGES += halutil
-endif
-
-ifeq ($(strip $(MTK_IPO_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ipo_support=1
-endif
-
-ifeq ($(strip $(MTK_GPS_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_gps_support=1
-endif
-
-ifeq ($(strip $(MTK_OMACP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_omacp_support=1
-endif
-
-ifeq ($(strip $(HAVE_MATV_FEATURE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.have_matv_feature=1
-endif
-
-ifeq ($(strip $(MTK_BT_FM_OVER_BT_VIA_CONTROLLER)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bt_fm_over_bt=1
-endif
-
-ifeq ($(strip $(MTK_SEARCH_DB_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_search_db_support=1
-endif
-
-ifeq ($(strip $(MTK_DIALER_SEARCH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dialer_search_support=1
-endif
-
-ifeq ($(strip $(MTK_DHCPV6C_WIFI)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dhcpv6c_wifi=1
-endif
-
-ifeq ($(strip $(MTK_FM_SHORT_ANTENNA_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fm_short_antenna_support=1
-endif
-
-ifeq ($(strip $(HAVE_AACENCODE_FEATURE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.have_aacencode_feature=1
-endif
-
-ifeq ($(strip $(MTK_CTA_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cta_support=1
-endif
-
-ifeq ($(strip $(MTK_CLEARMOTION_SUPPORT)),yes)
-  PRODUCT_PACKAGES += libMJCjni
-  PRODUCT_PROPERTY_OVERRIDES += \
-    persist.sys.display.clearMotion=0
-  PRODUCT_PROPERTY_OVERRIDES += \
-    persist.clearMotion.fblevel.nrm=255
-  PRODUCT_PROPERTY_OVERRIDES += \
-    persist.clearMotion.fblevel.bdr=255
-endif
-
-ifeq ($(strip $(MTK_PHONE_VT_VOICE_ANSWER)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_phone_vt_voice_answer=1
-endif
-
-ifeq ($(strip $(MTK_PHONE_VOICE_RECORDING)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_phone_voice_recording=1
-endif
-
-ifeq ($(strip $(MTK_POWER_SAVING_SWITCH_UI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pwr_save_switch=1
-endif
-
-ifeq ($(strip $(MTK_FD_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fd_support=1
-endif
-
-ifeq ($(strip $(MTK_CC33_SUPPORT)), yes)
-# Only support the format: 0: turn off / 1: turn on
-    PRODUCT_PROPERTY_OVERRIDES += persist.data.cc33.support=1
-endif
-
-#DRM part
-ifeq ($(strip $(MTK_DRM_APP)), yes)
-  #OMA DRM
-  ifeq ($(strip $(MTK_OMADRM_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_oma_drm_support=1
-  endif
-  #CTA DRM
-  ifeq ($(strip $(MTK_CTA_SET)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cta_drm_support=1
-  endif
-endif
-
-#Widevine DRM
-ifeq ($(strip $(MTK_WVDRM_SUPPORT)), yes)
-  #PRODUCT_PROPERTY_OVERRIDES += ro.mtk_widevine_drm_support=1
-  ifeq ($(strip $(MTK_WVDRM_L1_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_widevine_drm_l1_support=1
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_widevine_drm_l3_support=1
-  endif
-endif
-
-#Playready DRM
-ifeq ($(strip $(MTK_PLAYREADY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_playready_drm_support=1
-endif
-
-########
-ifeq ($(strip $(MTK_DISABLE_CAPABILITY_SWITCH)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_disable_cap_switch=1
-endif
-
-ifeq ($(strip $(MTK_EAP_SIM_AKA)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_eap_sim_aka=1
-endif
-
-ifeq ($(strip $(MTK_LOG2SERVER_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log2server_app=1
-endif
-
-ifeq ($(strip $(MTK_FM_RECORDING_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fm_recording_support=1
-endif
-
-ifeq ($(strip $(MTK_AUDIO_APE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_ape_support=1
-endif
-
-ifeq ($(strip $(MTK_FLV_PLAYBACK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_flv_playback_support=1
-endif
-
-ifeq ($(strip $(MTK_FD_FORCE_REL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fd_force_rel_support=1
-endif
-
-ifeq ($(strip $(MTK_BRAZIL_CUSTOMIZATION_CLARO)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.brazil_cust_claro=1
-endif
-
-ifeq ($(strip $(MTK_BRAZIL_CUSTOMIZATION_VIVO)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.brazil_cust_vivo=1
-endif
-
-ifeq ($(strip $(MTK_WMV_PLAYBACK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wmv_playback_support=1
-endif
-
-ifeq ($(strip $(MTK_HDMI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_hdmi_support=1
-endif
-
-ifeq ($(strip $(MTK_FOTA_ENTRY)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fota_entry=1
-endif
-
-ifeq ($(strip $(MTK_SCOMO_ENTRY)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_scomo_entry=1
-endif
-
-ifeq ($(strip $(MTK_MTKPS_PLAYBACK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mtkps_playback_support=1
-endif
-
-ifeq ($(strip $(MTK_SEND_RR_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_send_rr_support=1
-endif
-
-ifeq ($(strip $(MTK_RAT_WCDMA_PREFERRED)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_rat_wcdma_preferred=1
-endif
-
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-  PRODUCT_PACKAGES += DeviceRegister
-  PRODUCT_PACKAGES += SelfRegister
-else
-
-  ifeq ($(strip $(MTK_DEVREG_APP)),yes)
-    PRODUCT_PACKAGES += DeviceRegister
-  endif
-
-  ifeq ($(strip $(MTK_CT4GREG_APP)),yes)
-    PRODUCT_PACKAGES += SelfRegister
-  endif
-endif
-
-ifeq ($(strip $(MTK_ESN_TRACK_APP)),yes)
-  PRODUCT_PACKAGES += EsnTrack
-endif
-
-ifeq ($(strip $(MTK_ESN_TRACK_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.sys.esn_track_switch=0
-endif
-
-ifeq ($(strip $(MTK_SMSREG_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_smsreg_app=1
-endif
-
-ifeq ($(strip $(MTK_DEFAULT_DATA_OFF)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_default_data_off=1
-endif
-
-ifeq ($(strip $(MTK_TB_APP_CALL_FORCE_SPEAKER_ON)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tb_call_speaker_on=1
-endif
-
-ifeq ($(strip $(MTK_EMMC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_emmc_support=1
-endif
-
-ifeq ($(strip $(MTK_UFS_BOOTING)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ufs_booting=1
-endif
-
-ifeq ($(strip $(MTK_FM_50KHZ_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fm_50khz_support=1
-endif
-
-ifeq ($(strip $(MTK_BSP_PACKAGE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bsp_package=1
-endif
-
-ifeq ($(strip $(MTK_TETHERINGIPV6_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tetheringipv6_support=1
-endif
-
-ifeq ($(strip $(MTK_PHONE_NUMBER_GEODESCRIPTION)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_phone_number_geo=1
-endif
-
-ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_c2k_support=1
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.flashless.fsm=0
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.flashless.fsm_cst=0
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.flashless.fsm_rw=0
-
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfu.enable=*72
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfu.disable=*720
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfb.enable=*90
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfb.disable=*900
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfnr.enable=*92
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfnr.disable=*920
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfdf.enable=*68
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfdf.disable=*680
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cfall.disable=*730
-
-  # callWaiting
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cw.enable=*74
-  PRODUCT_PROPERTY_OVERRIDES += ro.cdma.cw.disable=*740
-
-  # network property
-   ifeq ($(strip $(RAT_CONFIG_LTE_SUPPORT)),yes)
-      # NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA (10)
-      PRODUCT_PROPERTY_OVERRIDES += telephony.lteOnCdmaDevice=1
-      PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=10,10
-   else
-      # NETWORK_MODE_GLOBAL(7)
-      PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=7,7
-   endif
-endif
-
-ifneq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-    ifeq ($(strip $(RAT_CONFIG_LTE_SUPPORT)),yes)
-        # NETWORK_MODE_LTE_GSM_WCDMA (9)
-        ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), ss)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsds)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9,9
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsda)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9,9
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), tsts)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9,9,9
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), qsqs)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9,9,9,9
-        else
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=9
-        endif
-    else
-        # NETWORK_MODE_WCDMA_PREF(0)
-        ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), ss)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsds)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0,0
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), dsda)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0,0
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), tsts)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0,0,0
-        else ifeq ($(strip $(MTK_MULTI_SIM_SUPPORT)), qsqs)
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0,0,0,0
-        else
-            PRODUCT_PROPERTY_OVERRIDES += ro.telephony.default_network=0
-        endif
-    endif
-endif
-
-ifeq ($(strip $(EVDO_DT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.evdo_dt_support=1
-endif
-
-ifeq ($(strip $(EVDO_DT_VIA_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.evdo_dt_via_support=1
-endif
-
-PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ril_mode=$(strip $(MTK_RIL_MODE))
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-  ifeq ($(strip $(MTK_RIL_MODE)), c6m_1rild)
-    PRODUCT_COPY_FILES += device/mediatek/common/init.mtkfusionril.rc:root/init.ril.rc
-  else
-    PRODUCT_PACKAGES += rilproxy
-    PRODUCT_PACKAGES += mtk-rilproxy
-    PRODUCT_PACKAGES += lib-rilproxy
-    PRODUCT_COPY_FILES += device/mediatek/common/init.rilproxy.rc:root/init.rilproxy.rc
-  endif
-endif
-
-ifeq ($(strip $(MTK_SHARED_SDCARD)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_shared_sdcard=1
-endif
-
-ifeq ($(strip $(MTK_2SDCARD_SWAP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_2sdcard_swap=1
-endif
-
-ifeq ($(strip $(MTK_RAT_BALANCING)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_rat_balancing=1
-endif
-
-ifeq ($(strip $(WIFI_WEP_KEY_ID_SET)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.wifi_wep_key_id_set=1
-endif
-
-ifeq ($(strip $(OP01_COMPATIBLE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.op01_compatible=1
-endif
-
-ifeq ($(strip $(MTK_ENABLE_MD1)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_enable_md1=1
-endif
-
-ifeq ($(strip $(MTK_ENABLE_MD2)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_enable_md2=1
-endif
-
-ifeq ($(strip $(MTK_ENABLE_MD3)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_enable_md3=1
-endif
-
-ifeq ($(strip $(MTK_ANDROID_FOR_WORK_SUPPORT)), yes)
-    PRODUCT_COPY_FILES += frameworks/native/data/etc/android.software.device_admin.xml:system/etc/permissions/android.software.device_admin.xml
-    PRODUCT_COPY_FILES += frameworks/native/data/etc/android.software.managed_users.xml:system/etc/permissions/android.software.managed_users.xml
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_afw_support=1
-endif
-
-#For SOTER
-ifeq ($(strip $(MTK_SOTER_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_soter_support=1
-endif
-
-ifeq ($(strip $(MTK_NETWORK_TYPE_ALWAYS_ON)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_network_type_always_on=1
-endif
-
-ifeq ($(strip $(MTK_NFC_ADDON_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_nfc_addon_support=1
-endif
-
-ifeq ($(strip $(MTK_BENCHMARK_BOOST_TP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_benchmark_boost_tp=1
-endif
-
-ifeq ($(strip $(MTK_FLIGHT_MODE_POWER_OFF_MD)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_flight_mode_power_off_md=1
-endif
-
-ifeq ($(strip $(MTK_BT_BLE_MANAGER_SUPPORT)), yes)
-  PRODUCT_PACKAGES += BluetoothLe \
-                      BLEManager
-endif
-
-#For GattProfile
-PRODUCT_PACKAGES += GattProfile
-
-#For BtAutoTest
-PRODUCT_PACKAGES += BtAutoTest
-
-ifeq ($(strip $(MTK_AAL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_aal_support=1
-endif
-
-ifeq ($(strip $(MTK_ULTRA_DIMMING_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ultra_dimming_support=1
-endif
-
-ifeq ($(strip $(MTK_DRE30_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dre30_support=1
-endif
-
-ifneq ($(strip $(MTK_PQ_SUPPORT)), no)
-    ifeq ($(strip $(MTK_PQ_SUPPORT)), PQ_HW_VER_2)
-      PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_support=2
-    else
-        ifeq ($(strip $(MTK_PQ_SUPPORT)), PQ_HW_VER_3)
-          PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_support=3
-        endif
-    endif
-endif
-
-# pq color mode, default mode is 1 (DISP)
-ifeq ($(strip $(MTK_PQ_COLOR_MODE)), OFF)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_color_mode=0
-else
-  ifeq ($(strip $(MTK_PQ_COLOR_MODE)), MDP)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_color_mode=2
-  else
-    ifeq ($(strip $(MTK_PQ_COLOR_MODE)), DISP_MDP)
-        PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_color_mode=3
-    else
-        PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pq_color_mode=1
-    endif
-  endif
-endif
-
-ifeq ($(strip $(MTK_MIRAVISION_SETTING_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_miravision_support=1
-endif
-
-ifeq ($(strip $(MTK_MIRAVISION_SETTING_SUPPORT)), yes)
-  PRODUCT_PACKAGES += MiraVision
-endif
-
-ifeq ($(strip $(MTK_MIRAVISION_IMAGE_DC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_miravision_image_dc=1
-endif
-
-ifeq ($(strip $(MTK_BLULIGHT_DEFENDER_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_blulight_def_support=1
-endif
-
-ifeq ($(strip $(MTK_CHAMELEON_DISPLAY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_chameleon_support=1
-endif
-
-ifeq ($(strip $(MTK_TETHERING_EEM_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tethering_eem_support=1
-endif
-
-ifeq ($(strip $(MTK_WFD_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wfd_support=1
-endif
-
-ifeq ($(strip $(MTK_WFD_SINK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wfd_sink_support=1
-endif
-
-ifeq ($(strip $(MTK_WFD_SINK_UIBC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wfd_sink_uibc_support=1
-endif
-
-ifeq ($(strip $(MTK_WIFI_MCC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wifi_mcc_support=1
-endif
-
-ifeq ($(strip $(MTK_CROSSMOUNT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_crossmount_support=1
-endif
-
-ifeq ($(strip $(MTK_MULTIPLE_TDLS_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multiple_tdls_support=1
-endif
-
-ifeq ($(strip $(MTK_MT8193_HDMI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mt8193_hdmi_support=1
-endif
-
-ifeq ($(strip $(MTK_SYSTEM_UPDATE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_system_update_support=1
-endif
-
-ifeq ($(strip $(MTK_SIM_HOT_SWAP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_sim_hot_swap=1
-endif
-
-ifeq ($(strip $(MTK_RADIOOFF_POWER_OFF_MD)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_radiooff_power_off_md=1
-endif
-
-ifeq ($(strip $(MTK_BIP_SCWS)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bip_scws=1
-endif
-
-ifeq (OP09_SPEC0212_SEGDEFAULT,$(OPTR_SPEC_SEG_DEF))
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ctpppoe_support=1
-endif
-
-ifeq ($(strip $(MTK_IPV6_TETHER_PD_MODE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ipv6_tether_pd_mode=1
-endif
-
-ifeq ($(strip $(MTK_CACHE_MERGE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cache_merge_support=1
-endif
-
-ifeq ($(strip $(MTK_FAT_ON_NAND)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fat_on_nand=1
-endif
-
-ifeq ($(strip $(MTK_GMO_RAM_OPTIMIZE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_gmo_ram_optimize=1
-endif
-
-ifeq ($(strip $(MTK_GMO_ROM_OPTIMIZE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_gmo_rom_optimize=1
-endif
-
-ifeq ($(strip $(MTK_CMCC_FT_PRECHECK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cmcc_ft_precheck_support=1
-endif
-
-ifeq ($(strip $(MTK_MDM_APP)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mdm_app=1
-endif
-
-ifeq ($(strip $(MTK_MDM_LAWMO)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mdm_lawmo=1
-endif
-
-ifeq ($(strip $(MTK_MDM_FUMO)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mdm_fumo=1
-endif
-
-ifeq ($(strip $(MTK_MDM_SCOMO)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mdm_scomo=1
-endif
-
-ifeq ($(strip $(MTK_MULTISIM_RINGTONE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multisim_ringtone=1
-endif
-
-ifeq ($(strip $(MTK_MT8193_HDCP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mt8193_hdcp_support=1
-endif
-
-ifeq ($(strip $(PURE_AP_USE_EXTERNAL_MODEM)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.pure_ap_use_external_modem=1
-endif
-
-ifeq ($(strip $(MTK_WFD_HDCP_TX_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wfd_hdcp_tx_support=1
-endif
-
-ifeq ($(strip $(MTK_WFD_HDCP_RX_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wfd_hdcp_rx_support=1
-endif
-
-ifeq ($(strip $(CMCC_LIGHT_CUST_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.cmcc_light_cust_support=1
-endif
-
-ifeq ($(strip $(MTK_WORLD_PHONE_POLICY)), 1)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_world_phone_policy=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_world_phone_policy=0
-endif
-
-ifeq ($(strip $(MTK_ECCCI_C2K)),yes)
-  PRODUCT_PROPERTY_OVERRIDES +=ro.mtk_md_world_mode_support=1
-endif
-
-ifeq ($(strip $(MTK_PERFSERVICE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_perfservice_support=1
-endif
-
-ifeq ($(strip $(MTK_AUDIO_CHANGE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_audio_change_support=1
-endif
-
-ifeq ($(strip $(MTK_HDMI_HDCP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_hdmi_hdcp_support=1
-endif
-
-ifeq ($(strip $(MTK_INTERNAL_HDMI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_internal_hdmi_support=1
-endif
-
-ifeq ($(strip $(MTK_INTERNAL_MHL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_internal_mhl_support=1
-endif
-
-ifeq ($(strip $(MTK_OWNER_SDCARD_ONLY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_owner_sdcard_support=1
-endif
-
-ifeq ($(strip $(MTK_ONLY_OWNER_SIM_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_owner_sim_support=1
-endif
-
-ifeq ($(strip $(MTK_SIM_HOT_SWAP_COMMON_SLOT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_sim_hot_swap_common_slot=1
-endif
-
-ifeq ($(strip $(MTK_CTA_SET)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cta_set=1
-endif
-
-ifeq ($(strip $(MTK_CTSC_MTBF_INTERNAL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ctsc_mtbf_intersup=1
-endif
-
-ifeq ($(strip $(MTK_3GDONGLE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_3gdongle_support=1
-endif
-
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_devreg_app=1
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ct4greg_app=1
-else
-
-  ifeq ($(strip $(MTK_DEVREG_APP)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_devreg_app=1
-  endif
-
-  ifeq ($(strip $(MTK_CT4GREG_APP)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ct4greg_app=1
-  endif
-endif
-
-ifeq ($(strip $(EVDO_IR_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.evdo_ir_support=1
-endif
-
-ifeq ($(strip $(MTK_MULTI_PARTITION_MOUNT_ONLY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multi_patition=1
-endif
-
-ifeq ($(strip $(MTK_WIFI_CALLING_RIL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wifi_calling_ril_support=1
-endif
-
-ifeq ($(strip $(MTK_DRM_KEY_MNG_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_key_manager_support=1
-endif
-
-ifeq ($(strip $(MTK_DOLBY_DAP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dolby_dap_support=1
-endif
-
-ifeq ($(strip $(MTK_MOBILE_MANAGEMENT)), yes)
-  ifdef BUILD_GMS
-    ifeq ($(strip $(BUILD_GMS)), yes)
-      PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mobile_management=0
-    else
-      PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mobile_management=1
-    endif
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mobile_management=1
-  endif
-endif
-
-ifeq ($(strip $(MTK_RUNTIME_PERMISSION_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_runtime_permission=1
-endif
-
-# enable zsd+hdr
-ifeq ($(strip $(MTK_CAM_ZSDHDR_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_zsdhdr_support=1
-endif
-
-# default MFLL support level, [0~4]= off, mfll, ais, both, debug
-ifeq ($(strip $(MTK_CAM_MFB_SUPPORT)), 0)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mfb_support=0
-endif
-ifeq ($(strip $(MTK_CAM_MFB_SUPPORT)), 1)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mfb_support=1
-endif
-ifeq ($(strip $(MTK_CAM_MFB_SUPPORT)), 2)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mfb_support=2
-endif
-ifeq ($(strip $(MTK_CAM_MFB_SUPPORT)), 3)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mfb_support=3
-endif
-ifeq ($(strip $(MTK_CAM_MFB_SUPPORT)), 4)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mfb_support=4
-endif
-
-ifeq ($(strip $(MTK_CAM_DUAL_ZOOM_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_dualzoom_support=1
-endif
-
-ifeq ($(strip $(MTK_CAM_STEREO_DENOISE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_dualdenoise_support=1
-endif
-
-ifeq ($(strip $(MTK_CLEARMOTION_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_clearmotion_support=1
-endif
-
-ifeq ($(strip $(MTK_DISPLAY_120HZ_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_display_120hz_support=1
-endif
-
-ifeq ($(strip $(MTK_SLOW_MOTION_VIDEO_SUPPORT)), yes)
-	PRODUCT_PROPERTY_OVERRIDES += ro.mtk_slow_motion_support=1
-	PRODUCT_PACKAGES += libMtkVideoSpeedEffect
-	PRODUCT_PACKAGES += libjni_slow_motion
-endif
-
-ifeq ($(strip $(MTK_CAM_NATIVE_PIP_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_native_pip_support=1
-endif
-
-ifeq ($(strip $(MTK_CAM_LOMO_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libcam.jni.lomohaljni
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_lomo_support=1
-endif
-
-ifeq ($(strip $(MTK_CAM_IMAGE_REFOCUS_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_img_refocus_support=1
-endif
-
-ifeq ($(strip $(MTK_LTE_DC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_lte_dc_support=1
-endif
-
-ifeq ($(strip $(RAT_CONFIG_LTE_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_lte_support=1
-endif
-
-ifeq ($(strip $(MTK_ENABLE_MD5)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_enable_md5=1
-endif
-
-ifeq ($(strip $(MTK_FEMTO_CELL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_femto_cell_support=1
-endif
-
-ifeq ($(strip $(MTK_SAFEMEDIA_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_safemedia_support=1
-endif
-
-ifeq ($(strip $(MTK_UMTS_TDD128_MODE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_umts_tdd128_mode=1
-endif
-
-ifeq ($(strip $(MTK_SINGLE_IMEI)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_single_imei=1
-endif
-
-ifeq ($(strip $(MTK_SINGLE_3DSHOT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_single_3Dshot_support=1
-endif
-
-ifeq ($(strip $(MTK_CAM_MAV_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_mav_support=1
-endif
-
-ifeq ($(strip $(MTK_CAM_FACEBEAUTY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_cfb=1
-endif
-
-ifeq ($(strip $(MTK_CAM_VIDEO_FACEBEAUTY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_cam_vfb=1
-endif
-
-ifeq ($(strip $(MTK_RILD_READ_IMSI)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_rild_read_imsi=1
-endif
-
-ifeq ($(strip $(SIM_REFRESH_RESET_BY_MODEM)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.sim_refresh_reset_by_modem=1
-endif
-
-ifeq ($(strip $(MTK_EXTERNAL_SIM_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_external_sim_support=1
-endif
-
-ifeq ($(strip $(MTK_DISABLE_PERSIST_VSIM)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_persist_vsim_disabled=1
-endif
-
-ifneq ($(strip $(MTK_EXTERNAL_SIM_ONLY_SLOTS)),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_external_sim_only_slots=$(strip $(MTK_EXTERNAL_SIM_ONLY_SLOTS))
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_external_sim_only_slots=0
-endif
-
-ifeq ($(strip $(MTK_SUBTITLE_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libvobsub_jni
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_subtitle_support=1
-endif
-
-ifeq ($(strip $(MTK_DFO_RESOLUTION_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dfo_resolution_support=1
-endif
-
-ifeq ($(strip $(MTK_SMARTBOOK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_smartbook_support=1
-endif
-
-ifeq ($(strip $(MTK_DX_HDCP_SUPPORT)), yes)
-  PRODUCT_PACKAGES += ffffffff000000000000000000000003.tlbin libDxHdcp DxHDCP.cfg
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dx_hdcp_support=1
-endif
-
-ifeq ($(strip $(MTK_LIVE_PHOTO_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_live_photo_support=1
-endif
-
-ifeq ($(strip $(MTK_MOTION_TRACK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_motion_track_support=1
-endif
-
-ifeq ($(strip $(MTK_HOTKNOT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_hotknot_support=1
-endif
-
-ifeq ($(strip $(MTK_PASSPOINT_R2_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_passpoint_r2_support=1
-endif
-
-ifeq ($(strip $(MTK_PRIVACY_PROTECTION_LOCK)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_privacy_protection_lock=1
-endif
-
-ifeq ($(strip $(MTK_BG_POWER_SAVING_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bg_power_saving_support=1
-endif
-
-ifeq ($(strip $(MTK_BG_POWER_SAVING_UI_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_bg_power_saving_ui=1
-endif
-
-ifeq ($(strip $(MTK_WIFIWPSP2P_NFC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_wifiwpsp2p_nfc_support=1
-endif
-
-ifeq ($(strip $(MTK_TC1_FEATURE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tc1_feature=1
-endif
-
-ifeq ($(strip $(MTK_A1_FEATURE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_a1_feature=1
-endif
-
-ifneq ($(strip $(SIM_ME_LOCK_MODE)),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.sim_me_lock_mode=$(strip $(SIM_ME_LOCK_MODE))
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.sim_me_lock_mode=0
-endif
-
-ifneq ($(strip $(MTK_AP_INFO_COLLECT)),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.ap_info_monitor=$(strip $(MTK_AP_INFO_COLLECT))
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.ap_info_monitor=0
-endif
-
-ifeq ($(strip $(MTK_DUAL_MIC_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dual_mic_support=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dual_mic_support=0
-endif
-
-ifeq ($(strip $(MTK_VOICE_UNLOCK_USE_TAB_LIB)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_is_tablet=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_is_tablet=0
-endif
-
-ifeq ($(strip $(MTK_EXTERNAL_MODEM_SLOT)), 1)
-  PRODUCT_PROPERTY_OVERRIDES += ril.external.md=1
-endif
-ifeq ($(strip $(MTK_EXTERNAL_MODEM_SLOT)), 2)
-  PRODUCT_PROPERTY_OVERRIDES += ril.external.md=2
-endif
-
-ifeq ($(strip $(MTK_POWER_PERFORMANCE_STRATEGY_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_pow_perf_support=1
-endif
-
-# serial port open or not
-ifeq ($(strip $(MTK_SERIAL_PORT_DEFAULT_ON)),yes)
-ADDITIONAL_DEFAULT_PROPERTIES += persist.service.acm.enable=1
-else
-ADDITIONAL_DEFAULT_PROPERTIES += persist.service.acm.enable=0
-endif
-
-# for pppoe
-ifeq (OP09_SPEC0212_SEGDEFAULT,$(OPTR_SPEC_SEG_DEF))
-  PRODUCT_PACKAGES += ip-up \
-                      ip-down \
-                      pppoe \
-                      pppoe-server \
-                      launchpppoe
-  PRODUCT_PROPERTY_OVERRIDES += ro.config.pppoe_enable=1
-endif
-# for 3rd party app
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),NONE)
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_A1_FEATURE)), yes)
-      PRODUCT_PACKAGES += TouchPal
-      PRODUCT_PACKAGES += YahooNewsWidget
-    endif
-  endif
-endif
-
-#For 3rd party NLP provider
-PRODUCT_PACKAGES += Baidu_Location
-PRODUCT_PACKAGES += liblocSDK6c
-PRODUCT_PACKAGES += libnetworklocation
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_nlp_switch_support=1
-  endif
-endif
-
-# open TouchPal in OP02
-ifeq (OP02,$(word 1,$(subst _, ,$(OPTR_SPEC_SEG_DEF))))
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-     PRODUCT_PACKAGES += TouchPal
-  endif
-endif
-# open TouchPal in OP09A
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-     PRODUCT_PACKAGES += TouchPal
-  endif
-endif
-
-# open TouchPal in OP09C
-ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGC)
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-     PRODUCT_PACKAGES += TouchPal
-  endif
-endif
-
-# default IME
-ifeq (OP01,$(word 1,$(subst _, ,$(OPTR_SPEC_SEG_DEF))))
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_default_ime =com.iflytek.inputmethod.FlyIME
-endif
-
-# Data usage overview
-ifeq ($(strip $(MTK_DATAUSAGE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_datausage_support=1
-endif
-
-# wifi offload service common library
-PRODUCT_PACKAGES += wfo-common
-PRODUCT_PACKAGES += WfoService libwfo_jni
-
-#Define MD has the capability to setup IMS PDN
-ifeq ($(strip $(MTK_RIL_MODE)), c6m_1rild)
-  PRODUCT_PROPERTY_OVERRIDES += ro.md_auto_setup_ims=1
-endif
-
-# IMS and VoLTE feature
-ifeq ($(strip $(MTK_IMS_SUPPORT)), yes)
-    ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-        ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-            PRODUCT_PACKAGES += ImsService
-        endif
-    endif
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_ims_support=1
-  ifneq ($(filter $(strip $(MTK_MULTIPLE_IMS_SUPPORT)),2 3 4),)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multiple_ims_support=$(strip $(MTK_MULTIPLE_IMS_SUPPORT))
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multiple_ims_support=1
-  endif
-endif
-
-#WFC feature
-ifeq ($(strip $(MTK_WFC_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_wfc_support=1
-endif
-
-ifeq ($(strip $(MTK_VOLTE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_volte_support=1
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk.volte.enable=1
-endif
-
-ifeq ($(strip $(MTK_VILTE_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_vilte_support=1
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_vilte_support2=1
-  ifeq ($(strip $(MTK_VIWIFI_SUPPORT)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ims_video_call_support=vilte_viwifi
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support=1
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support2=1
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ims_video_call_support=vilte
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support=0
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support2=0
-  endif
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_vilte_ut_support=0
-endif
-
-ifeq ($(strip $(MTK_VILTE_SUPPORT)),no)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_vilte_support=0
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_vilte_support2=0
-  ifeq ($(strip $(MTK_VIWIFI_SUPPORT)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ims_video_call_support=viwifi
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support=1
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support2=1
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_ims_video_call_support=none
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support=0
-    PRODUCT_PROPERTY_OVERRIDES += persist.mtk_viwifi_support2=0
-  endif
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_vilte_ut_support=0
-endif
-
-ifeq ($(strip $(MTK_USSI_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_ussi_support=1
-endif
-
-# DTAG DUAL APN
-ifeq ($(strip $(MTK_DTAG_DUAL_APN_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_dtag_dual_apn_support=1
-endif
-
-# sbc security
-ifeq ($(strip $(MTK_SECURITY_SW_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libsec
-  PRODUCT_PACKAGES += sbchk
-  PRODUCT_PACKAGES += S_ANDRO_SFL.ini
-  PRODUCT_PACKAGES += S_SECRO_SFL.ini
-  PRODUCT_PACKAGES += sec_chk.sh
-  PRODUCT_PACKAGES += AC_REGION
-endif
-
-ifeq ($(strip $(MTK_USER_ROOT_SWITCH)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_user_root_switch=1
-endif
-
-ifeq ($(strip $(MTK_DOLBY_DAP_SUPPORT)), yes)
-PRODUCT_COPY_FILES += frameworks/av/media/libeffects/data/audio_effects_dolby.conf:system/etc/audio_effects.conf
-PRODUCT_COPY_FILES += $(MTK_PROJECT_FOLDER)/dolby/ds1-default.xml:$(TARGET_COPY_OUT_VENDOR)/etc/ds1-default.xml:mtk
-else
-PRODUCT_COPY_FILES += frameworks/av/media/libeffects/data/audio_effects.conf:system/etc/audio_effects.conf
-endif
-ifeq ($(strip $(HAVE_SRSAUDIOEFFECT_FEATURE)),yes)
-  PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/SRS_AudioEffect/srs_processing/license/dts.lic:$(TARGET_COPY_OUT_VENDOR)/data/dts.lic:mtk
-  PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/SRS_AudioEffect/srs_processing/srs_processing.cfg:$(TARGET_COPY_OUT_VENDOR)/data/srs_processing.cfg:mtk
-endif
-
-ifeq ($(strip $(MTK_PERMISSION_CONTROL)), yes)
-  PRODUCT_PACKAGES += PermissionControl
-endif
-
-ifeq ($(strip $(MTK_NFC_SUPPORT)), yes)
-    ifdef MTK_NFC_PACKAGE
-        ifneq ($(wildcard vendor/mediatek/proprietary/hardware/nfc/mtknfc.mk),)
-            $(call inherit-product-if-exists, vendor/mediatek/proprietary/hardware/nfc/mtknfc.mk)
-        else
-            $(call inherit-product-if-exists, vendor/mediatek/proprietary/external/mtknfc/mtknfc.mk)
-        endif
-    else
-        PRODUCT_PACKAGES += nfcstackp
-        PRODUCT_PACKAGES += DeviceTestApp
-        PRODUCT_PACKAGES += libdta_mt6605_jni
-        PRODUCT_PACKAGES += libmtknfc_dynamic_load_jni
-        PRODUCT_PACKAGES += libnfc_mt6605_jni
-        $(call inherit-product-if-exists, vendor/mediatek/proprietary/packages/apps/DeviceTestApp/DeviceTestApp.mk)
-        $(call inherit-product-if-exists, vendor/mediatek/proprietary/external/mtknfc/mtknfc.mk)
-    endif
-endif
-
-ifeq ($(strip $(MTK_NFC_SUPPORT)), yes)
-    ifeq ($(wildcard $(MTK_TARGET_PROJECT_FOLDER)/nfcse.cfg),)
-        ifeq ($(strip $(MTK_BSP_PACKAGE)), yes)
-            PRODUCT_COPY_FILES += packages/apps/Nfc/mtk-nfc/nfcsebsp.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/nfcse.cfg:mtk
-        else
-            PRODUCT_COPY_FILES += packages/apps/Nfc/mtk-nfc/nfcsetk.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/nfcse.cfg:mtk
-        endif
-    else
-        PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/nfcse.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/nfcse.cfg:mtk
-    endif
-endif
-
-ifeq (yes,$(strip $(MTK_NFC_SUPPORT)))
-
-  PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,frameworks/native/data/etc/android.hardware.nfc.xml:system/etc/permissions/android.hardware.nfc.xml)
-
-  ifneq ($(MTK_BSP_PACKAGE), yes)
-    PRODUCT_COPY_FILES +=$(call add-to-product-copy-files-if-exists,frameworks/base/nfc-extras/com.android.nfc_extras.xml:system/etc/permissions/com.android.nfc_extras.xml)
-    PRODUCT_COPY_FILES +=$(call add-to-product-copy-files-if-exists,packages/apps/Nfc/etc/nfcee_access.xml:system/etc/nfcee_access.xml)
-    ifeq ($(MTK_NFC_GSMA_SUPPORT), yes)
-        PRODUCT_PACKAGES += com.mediatek.nfcgsma_extras
-        PRODUCT_PACKAGES += com.gsma.services.nfc
-        PRODUCT_COPY_FILES +=$(call add-to-product-copy-files-if-exists,packages/apps/Nfc/gsma/jar/com.gsma.services.nfc.xml:$(TARGET_COPY_OUT_VENDOR)/etc/permissions/com.gsma.services.nfc.xml:mtk)
-        PRODUCT_COPY_FILES +=$(call add-to-product-copy-files-if-exists,packages/apps/Nfc/gsma/jar/com.gsma.services.nfc.jar:$(TARGET_COPY_OUT_VENDOR)/framework/com.gsma.services.nfc.jar:mtk)
-
-        ifeq ($(wildcard $(MTK_TARGET_PROJECT_FOLDER)/gsma.cfg),)
-            PRODUCT_COPY_FILES += packages/apps/Nfc/gsma/gsma.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/gsma.cfg:mtk
-        endif
-
-        PRODUCT_PROPERTY_OVERRIDES += ro.mtk_nfc_gsma_support=1
-    endif
-  endif
-
-  PRODUCT_PACKAGES += Nfc
-  PRODUCT_PACKAGES += Tag
-  PRODUCT_PACKAGES += nfcc.default
-  PRODUCT_PROPERTY_OVERRIDES +=  ro.nfc.port=I2C
-
-  ifeq (yes,$(strip $(MTK_NFC_HCE_SUPPORT)))
-    PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,frameworks/native/data/etc/android.hardware.nfc.hce.xml:system/etc/permissions/android.hardware.nfc.hce.xml)
-  endif
-
-endif
-
-
-ifeq ($(strip $(MTK_NFC_OMAAC_SUPPORT)),yes)
-  PRODUCT_PACKAGES += SmartcardService
-  PRODUCT_PACKAGES += org.simalliance.openmobileapi.jar
-  PRODUCT_PACKAGES += org.simalliance.openmobileapi.xml
-  ifeq ($(strip $(MTK_NFC_SUPPORT)),yes)
-    PRODUCT_PACKAGES += eSETerminal
-  endif
-  PRODUCT_PACKAGES += Uicc1Terminal
-  PRODUCT_PACKAGES += Uicc2Terminal
-endif
-
-# IR-Learning Core
-ifeq ($(strip $(MTK_IR_LEARNING_SUPPORT)),yes)
-  PRODUCT_PACKAGES += ConsumerIrExtraService
-  PRODUCT_PACKAGES += com.mediatek.consumerir
-  PRODUCT_PACKAGES += com.mediatek.consumerirextra.xml
-  PRODUCT_PACKAGES += libconsumerir
-  PRODUCT_PACKAGES += libconsumerir_vendor
-endif
-
-# IR-Learning Test Package
-ifeq ($(strip $(MTK_IR_LEARNING_SUPPORT)),yes)
-  PRODUCT_PACKAGES += ConsumerIrValidator
-  PRODUCT_PACKAGES += ConsumerIrPermissionValidator
-endif
-
-# IRTX HAL CORE
-ifeq (yes,$(strip $(MTK_IRTX_SUPPORT)))
-    PRODUCT_PACKAGES += libconsumerir_core
-else
-ifeq (yes,$(strip $(MTK_IRTX_PWM_SUPPORT)))
-    PRODUCT_PACKAGES += libconsumerir_core
-endif
-endif
-
-ifeq ($(strip $(MTK_HOTKNOT_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libhotknot_GT1XX
-  PRODUCT_PACKAGES += libhotknot_GT9XX
-  PRODUCT_PROPERTY_OVERRIDES += ro.mediatek.hotknot.module=$(CUSTOM_KERNEL_TOUCHPANEL)
-endif
-ifeq ($(strip $(MTK_HOTKNOT_SUPPORT)), yes)
-  PRODUCT_PACKAGES += HotKnot
-  PRODUCT_PACKAGES += HotKnotBeam
-  PRODUCT_PACKAGES += HotKnotCommonUI
-  PRODUCT_PACKAGES += HotKnotConnectivity
-  PRODUCT_PACKAGES += hotknot_native_service
-  PRODUCT_PACKAGES += libhotknot_dev
-
-    ifeq ($(wildcard $(MTK_TARGET_PROJECT_FOLDER)/hotknot.cfg),)
-        PRODUCT_COPY_FILES += vendor/mediatek/proprietary/packages/apps/HotKnot/hotknot.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/hotknot.cfg:mtk
-    else
-        PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/hotknot.cfg:$(TARGET_COPY_OUT_VENDOR)/etc/hotknot.cfg:mtk
-    endif
-endif
-
-ifeq ($(strip $(MTK_CROSSMOUNT_SUPPORT)),yes)
-  PRODUCT_PACKAGES += com.mediatek.crossmount.discovery
-  PRODUCT_PACKAGES += com.mediatek.crossmount.discovery.xml
-  PRODUCT_PACKAGES += CrossMount
-  PRODUCT_PACKAGES += com.mediatek.crossmount.adapter
-  PRODUCT_PACKAGES += com.mediatek.crossmount.adapter.xml
-  PRODUCT_PACKAGES += CrossMountSettings
-  PRODUCT_PACKAGES += CrossMountSourceCamera
-  PRODUCT_PACKAGES += CrossMountStereoSound
-  PRODUCT_PACKAGES += libcrossmount
-  PRODUCT_PACKAGES += libcrossmount_jni
-  PRODUCT_PACKAGES += sensors.virtual
-  PRODUCT_PACKAGES += SWMountViewer
-endif
-
-$(call inherit-product-if-exists, frameworks/base/data/videos/FrameworkResource.mk)
-ifeq ($(strip $(MTK_LIVE_PHOTO_SUPPORT)), yes)
-  PRODUCT_PACKAGES += com.mediatek.effect
-  PRODUCT_PACKAGES += com.mediatek.effect.xml
-endif
-
-ifeq ($(strip $(MTK_MULTICORE_OBSERVER_APP)), yes)
-  PRODUCT_PACKAGES += MultiCoreObserver
-endif
-
-# for Search, ApplicationsProvider provides apps search
-PRODUCT_PACKAGES += ApplicationsProvider
-
-# Live wallpaper configurations
-# #workaround: disable it directly since device.mk can't get the value of TARGET_BUILD_PDK
-PRODUCT_COPY_FILES += packages/wallpapers/LivePicker/android.software.live_wallpaper.xml:system/etc/permissions/android.software.live_wallpaper.xml
-
-# for JPE
-PRODUCT_PACKAGES += jpe_tool
-
-# for Camera EffectFactory
-PRODUCT_PACKAGES += libfeatureio.featurefactory
-
-ifneq ($(strip $(MTK_PLATFORM)),)
-  PRODUCT_PACKAGES += libnativecheck-jni
-endif
-
-# for mediatek-res
-PRODUCT_PACKAGES += mediatek-res
-
-# for TER service
-PRODUCT_PACKAGES += terservice
-PRODUCT_PACKAGES += tertestclient
-ifeq ($(strip $(MTK_TER_SERVICE)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ter.service.enable=1
-endif
-
-PRODUCT_PROPERTY_OVERRIDES += wfd.dummy.enable=1
-PRODUCT_PROPERTY_OVERRIDES += wfd.iframesize.level=0
-
-ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-   PRODUCT_PACKAGES += Utk
-endif
-
-ifeq ($(strip $(EVDO_IR_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += \
-    ril.evdo.irsupport=1
-endif
-
-ifeq ($(strip $(EVDO_DT_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += \
-    ril.evdo.dtsupport=1
-endif
-
-# for libudf
-ifeq ($(strip $(MTK_USER_SPACE_DEBUG_FW)),yes)
-PRODUCT_PACKAGES += libudf
-endif
-
-PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/ProjectConfig.mk:$(TARGET_COPY_OUT_VENDOR)/data/misc/ProjectConfig.mk:mtk
-
-ifeq ($(strip $(MTK_BICR_SUPPORT)), yes)
-PRODUCT_COPY_FILES += device/mediatek/common/iAmCdRom.iso:$(TARGET_COPY_OUT_VENDOR)/etc/iAmCdRom.iso:mtk
-endif
-
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-  ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-    PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,vendor/mediatek/proprietary/frameworks/base/telephony/etc/virtual-spn-conf-by-efgid1.xml:$(TARGET_COPY_OUT_VENDOR)/etc/virtual-spn-conf-by-efgid1.xml:mtk)
-    PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,vendor/mediatek/proprietary/frameworks/base/telephony/etc/virtual-spn-conf-by-efpnn.xml:$(TARGET_COPY_OUT_VENDOR)/etc/virtual-spn-conf-by-efpnn.xml:mtk)
-    PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,vendor/mediatek/proprietary/frameworks/base/telephony/etc/virtual-spn-conf-by-efspn.xml:$(TARGET_COPY_OUT_VENDOR)/etc/virtual-spn-conf-by-efspn.xml:mtk)
-    PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,vendor/mediatek/proprietary/frameworks/base/telephony/etc/virtual-spn-conf-by-imsi.xml:$(TARGET_COPY_OUT_VENDOR)/etc/virtual-spn-conf-by-imsi.xml:mtk)
-
-    ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-      PRODUCT_COPY_FILES += vendor/mediatek/proprietary/frameworks/base/telephony/etc/spn-conf-op09.xml:$(TARGET_COPY_OUT_VENDOR)/etc/spn-conf-op09.xml:mtk
-    endif
-
-    ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGC)
-      PRODUCT_COPY_FILES += vendor/mediatek/proprietary/frameworks/base/telephony/etc/spn-conf-op09.xml:$(TARGET_COPY_OUT_VENDOR)/etc/spn-conf-op09.xml:mtk
-    endif
-  endif
-endif
-
-ifeq ($(strip $(MTK_AUDIO_ALAC_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libMtkOmxAlacDec
-endif
-
-ifeq ($(strip $(TRUSTONIC_TEE_SUPPORT)), yes)
-  PRODUCT_PACKAGES += RootPA
-  PRODUCT_PACKAGES += libMcClient
-  PRODUCT_PACKAGES += libTeeClient
-  PRODUCT_PACKAGES += libMcRegistry
-  PRODUCT_PACKAGES += mcDriverDaemon
-  PRODUCT_PACKAGES += libMcTeeKeymaster
-  PRODUCT_PACKAGES += libMcGatekeeper
-  PRODUCT_PACKAGES += libsec_mem
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_trustonic_tee_support=1
-  PRODUCT_COPY_FILES += \
-      device/mediatek/common/public.libraries.vendor.txt:$(TARGET_COPY_OUT_VENDOR)/etc/public.libraries.txt:mtk
-  ifeq ($(strip $(MTK_TEE_GP_SUPPORT)),yes)
-    PRODUCT_PACKAGES += libTEECommon
-  endif
-  ifeq ($(strip $(MTK_SEC_VIDEO_PATH_SUPPORT)), yes)
-    PRODUCT_PACKAGES += libMtkH264SecVencTLCLib
-    PRODUCT_PACKAGES += libMtkH264SecVdecTLCLib
-    PRODUCT_PACKAGES += libMtkH265SecVdecTLCLib
-    PRODUCT_PACKAGES += libMtkVP9SecVdecTLCLib
-    PRODUCT_PACKAGES += libtlcWidevineModularDrm
-    PRODUCT_PACKAGES += libtlcWidevineClassicDrm
-    PRODUCT_PACKAGES += libtplay
-    ifeq ($(strip $(MTK_DRM_KEY_MNG_SUPPORT)), yes)
-      PRODUCT_PACKAGES += liburee_meta_drmkeyinstall
-    endif
-  endif
-  ifeq ($(strip $(MTK_TEE_TRUSTED_UI_SUPPORT)), yes)
-    PRODUCT_PACKAGES += libTui
-    PRODUCT_PACKAGES += TuiService
-    PRODUCT_PACKAGES += SamplePinpad
-    PRODUCT_PACKAGES += libTlcPinpad
-  endif
-endif
-
-ifeq ($(strip $(MTK_GOOGLE_TRUSTY_SUPPORT)), yes)
-  PRODUCT_PACKAGES += gatekeeper.trusty
-  PRODUCT_PACKAGES += keystore.trusty
-  PRODUCT_PACKAGES += libtrusty
-endif
-
-ifeq ($(strip $(MICROTRUST_TEE_SUPPORT)), yes)
-  PRODUCT_PACKAGES += teei_daemon
-#  PRODUCT_PACKAGES += init_thh
-#  PRODUCT_PACKAGES += libteei_fp
-#  PRODUCT_PACKAGES += libfingerprint_tac
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_microtrust_tee_support=1
-endif
-
-ifeq ($(strip $(MTK_TEE_GP_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tee_gp_support=1
-endif
-
-ifeq ($(strip $(MTK_SEC_VIDEO_PATH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_sec_video_path_support=1
-  ifeq ($(filter $(MTK_IN_HOUSE_TEE_SUPPORT) $(MTK_GOOGLE_TRUSTY_SUPPORT),yes),yes)
-  PRODUCT_PACKAGES += lib_uree_mtk_video_secure_al
-  endif
-endif
-
-ifeq ($(strip $(MTK_COMBO_SUPPORT)), yes)
-  $(call inherit-product-if-exists, device/mediatek/common/connectivity/product_package/product_package.mk)
-endif
-
-ifneq (yes,$(strip $(SPM_FW_USE_PARTITION)))
-  $(call inherit-product-if-exists,vendor/mediatek/proprietary/hardware/spm/product_package.mk)
-else
-  PRODUCT_PACKAGES += spmfw.bin
-endif
-
-MCUPMFW_ROOT_DIR := vendor/mediatek/proprietary/hardware/mcupmfw
-ifeq (yes,$(strip $(MCUPM_FW_USE_PARTITION)))
-  PRODUCT_PACKAGES += mcupmfw.img
-endif
-
-ifeq ($(strip $(MTK_SENSOR_HUB_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_sensorhub_support=1
-  PRODUCT_PACKAGES += libhwsensorhub \
-                      libsensorhub \
-                      libsensorhub_jni \
-                      sensorhubservice \
-                      libsensorhubservice
-endif
-
-ifeq ($(strip $(MTK_TC7_FEATURE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tc7_feature=1
-endif
-
-PRODUCT_PACKAGES += Launcher3
-
-#Add for CCCI Lib
-PRODUCT_PACKAGES += libccci_util
-
-ifeq ($(strip $(MTK_WMA_PLAYBACK_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libMtkOmxWmaDec
-endif
-
-ifeq ($(strip $(MTK_WMA_PLAYBACK_SUPPORT))_$(strip $(MTK_SWIP_WMAPRO)), yes_yes)
-  PRODUCT_PACKAGES += libMtkOmxWmaProDec
-endif
-
-
-# IKEv2
-ifeq ($(strip $(MTK_EPDG_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_epdg_support=1
-  PRODUCT_PACKAGES += ipsec_mon
-
-  PRODUCT_COPY_FILES += device/mediatek/common/init.epdg.rc:root/init.epdg.rc
-endif
-
-#Set mobiledata to false only in operator package
-#ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-#  ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-#    ifdef OPTR
-#      ifneq ($(strip $(OPTR)), NONE)
-#        ifeq (OP01,$(word 1,$(subst _, ,$(OPTR_SPEC_SEG_DEF))))
-#          PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=false
-#        else ifeq ($(strip $(OPTR_SPEC_SEG_DEF)),OP09_SPEC0212_SEGDEFAULT)
-#          PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=false
-#        else
-#          PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-#        endif
-#      else
-#        PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-#      endif
-#    else
-#      PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-#    endif
-#  else
-#    PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-#  endif
-#else
-#  PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-#endif
-PRODUCT_PROPERTY_OVERRIDES += ro.com.android.mobiledata=true
-
-PRODUCT_PROPERTY_OVERRIDES += persist.radio.mobile.data=0,0
-#for meta mode dump data
-PRODUCT_PROPERTY_OVERRIDES += persist.meta.dumpdata=0
-
-ifneq ($(MTK_AUDIO_TUNING_TOOL_VERSION),)
-  ifneq ($(strip $(MTK_AUDIO_TUNING_TOOL_VERSION)),V1)
-    PRODUCT_PACKAGES += libaudio_param_parser
-    AUDIO_PARAM_OPTIONS_LIST += 5_POLE_HS_SUPPORT=$(MTK_HEADSET_ACTIVE_NOISE_CANCELLATION)
-    MTK_AUDIO_PARAM_DIR_LIST += device/mediatek/common/audio_param
-    #MTK_AUDIO_PARAM_FILE_LIST += SOME_ZIP_FILE
-    ifeq ($(strip $(MTK_USB_PHONECALL)),AP)
-      AUDIO_PARAM_OPTIONS_LIST += MTK_USB_PHONECALL=yes
-    endif
-
-    # speaker path customization for gain table
-    ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),int_spk_amp)
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_INT=yes
-    else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),2_in_1_spk)
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_INT=yes
-    else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),3_in_1_spk)
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_INT=yes
-    else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),int_lo_buf)
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_LO=yes
-    else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),int_hp_buf)
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_HP=yes
-    else
-      AUDIO_PARAM_OPTIONS_LIST += SPK_PATH_NO_ANA=yes
-    endif
-
-    # receiver path customization for gain table
-    ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),2_in_1_spk)
-      AUDIO_PARAM_OPTIONS_LIST += RCV_PATH_2_IN_1_SPK=yes
-    else ifeq ($(strip $(MTK_AUDIO_SPEAKER_PATH)),3_in_1_spk)
-      AUDIO_PARAM_OPTIONS_LIST += RCV_PATH_3_IN_1_SPK=yes
-    else ifeq ($(findstring smartpa,$(MTK_AUDIO_SPEAKER_PATH)),smartpa)
-      ifeq ($(MTK_2IN1_SPK_SUPPORT),yes)
-        AUDIO_PARAM_OPTIONS_LIST += RCV_PATH_NO_ANA=yes
-     else
-        AUDIO_PARAM_OPTIONS_LIST += RCV_PATH_INT=yes
-      endif
-    else
-      AUDIO_PARAM_OPTIONS_LIST += RCV_PATH_INT=yes
-    endif
-
-    # Speech Parameter Tuning
-    # SPH_PARAM_VERSION: 0 support single network(MD ability related)
-    # SPH_PARAM_VERSION: 1.0 support multiple networks(MD ability related)
-    # SPH_PARAM_VERSION: 2.0 support IIR and fix WBFIR(MD ability related)
-    AUDIO_PARAM_OPTIONS_LIST += SPH_PARAM_VERSION=2.0
-    AUDIO_PARAM_OPTIONS_LIST += SPH_PARAM_TTY=yes
-    AUDIO_PARAM_OPTIONS_LIST += FIX_WB_ENH=yes
-    AUDIO_PARAM_OPTIONS_LIST += MTK_IIR_ENH_SUPPORT=yes
-    AUDIO_PARAM_OPTIONS_LIST += MTK_IIR_MIC_SUPPORT=no
-    AUDIO_PARAM_OPTIONS_LIST += MTK_FIR_IIR_ENH_SUPPORT=no
-
-    # Speech Loopback Tunning
-    ifeq ($(MTK_TC1_FEATURE),yes)
-      AUDIO_PARAM_OPTIONS_LIST += MTK_AUDIO_SPH_LPBK_PARAM=yes
-    else ifeq ($(MTK_TC10_FEATURE),yes)
-      AUDIO_PARAM_OPTIONS_LIST += MTK_AUDIO_SPH_LPBK_PARAM=yes
-    else ifeq ($(MTK_AUDIO_SPH_LPBK_PARAM),yes)
-      AUDIO_PARAM_OPTIONS_LIST += MTK_AUDIO_SPH_LPBK_PARAM=yes
-    endif
-    # Super Volume Parameter
-    AUDIO_PARAM_OPTIONS_LIST += SPH_PARAM_SV=no
-
-  endif
-endif
-
-ifeq ($(strip $(MTK_SPEECH_ENCRYPTION_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libaudiocustencrypt
-endif
-
-# aurisys framework
-ifneq ($(MTK_BASIC_PACKAGE), yes)
-  ifeq ($(MTK_AURISYS_FRAMEWORK_SUPPORT),yes)
-    # configurations
-    PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/aurisys/aurisys_config.xml:$(TARGET_COPY_OUT_VENDOR)/etc/aurisys_config.xml:mtk
-
-    # OpenDSP
-    PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/aurisys/libfvaudio/FV-SAM-MTK2.dat:$(TARGET_COPY_OUT_VENDOR)/etc/aurisys_param/FV-SAM-MTK2.dat:mtk
-    PRODUCT_PACKAGES   += libfvaudio
-
-    # mediatek IIR
-    PRODUCT_PACKAGES   += lib_iir
-
-    # mediatek BESSOUND
-    PRODUCT_PACKAGES   += libaudioloudc
-    PRODUCT_PACKAGES   += libaudiocompensationfilterc
-
-    # mediatek record/VoIP
-    PRODUCT_COPY_FILES += device/mediatek/common/audio_param/Speech_AudioParam.xml:$(TARGET_COPY_OUT_VENDOR)/etc/aurisys_param/Speech_AudioParam.xml:mtk
-    PRODUCT_PACKAGES   += lib_speech_enh
-
-    # BliSRC & Bit Converter
-    PRODUCT_PACKAGES += libaudiocomponentenginec
-
-    # tuning tool
-    PRODUCT_PACKAGES += AudioSetParam
-  endif
-endif
-
-# Audio speech enhancement library
-PRODUCT_PACKAGES += libspeech_enh_lib
-
-ifeq ($(findstring smartpa, $(MTK_AUDIO_SPEAKER_PATH)), smartpa)
-    PRODUCT_PACKAGES += libaudio_param_parser
-    MTK_AUDIO_PARAM_DIR_LIST += device/mediatek/common/audio_param_smartpa
-endif
-
-# Audio BTCVSD Lib
-PRODUCT_PACKAGES += libcvsd_mtk
-PRODUCT_PACKAGES += libmsbc_mtk
-
-# Audio Compensation Lib
-PRODUCT_PACKAGES += libaudiocompensationfilter
-
-ifeq ($(strip $(MTK_NTFS_OPENSOURCE_SUPPORT)), yes)
-  PRODUCT_PACKAGES += ntfs-3g
-  PRODUCT_PACKAGES += ntfsfix
-endif
-
-# Add for HetComm feature
-ifeq ($(strip $(MTK_HETCOMM_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_hetcomm_support=1
-  PRODUCT_PACKAGES += HetComm
-endif
-
-ifeq ($(strip $(MTK_DEINTERLACE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_deinterlace_support=1
-endif
-
-ifeq ($(strip $(MTK_DOLBY_DAP_SUPPORT)),yes)
-
-DOLBY_DAX_VERSION            := 1
-DOLBY_DAP                    := true
-DOLBY_DAP2                   := false
-DOLBY_DAP_SW                 := true
-DOLBY_DAP_HW                 := false
-DOLBY_DAP_PREGAIN            := true
-DOLBY_DAP_HW_QDSP_HAL_API    := false
-DOLBY_DAP_MOVE_EFFECT        := true
-DOLBY_DAP_BYPASS_SOUND_TYPES := false
-DOLBY_CONSUMER_APP           := true
-DOLBY_UDC                    := true
-DOLBY_UDC_VIRTUALIZE_AUDIO   := false
-DOLBY_MONO_SPEAKER           := true
-
-include vendor/dolby/ds/dolby-buildspec.mk
-$(call inherit-product, vendor/dolby/ds/dolby-product.mk)
-
-PRODUCT_COPY_FILES := \
-    vendor/dolby/device/mediatek_sw/audio_effects.conf:system/vendor/etc/audio_effects.conf:dolby \
-    vendor/dolby/device/mediatek_sw/ds1-default.xml:system/vendor/etc/dolby/ds1-default.xml:dolby \
-    $(PRODUCT_COPY_FILES)
-
-PRODUCT_RESTRICT_VENDOR_FILES := false
-endif
-
-ifeq ($(strip $(MTK_MD_DIRECT_TETHERING_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_md_direct_tethering=1
-    PRODUCT_PROPERTY_OVERRIDES += ro.tethering.bridge.interface=mdbr0
-    PRODUCT_PROPERTY_OVERRIDES += sys.mtk_md_direct_tether_enable=true
-    PRODUCT_PACKAGES += brctl
-endif
-
-#Fix me: specific enable for build error workaround
-SKIP_BOOT_JARS_CHECK := true
-
-ifeq ($(strip $(MTK_SWITCH_ANTENNA_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_switch_antenna=1
-endif
-
-ifeq ($(strip $(MTK_TDD_DATA_ONLY_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tdd_data_only_support=1
-endif
-
-ifneq ($(strip $(MTK_MD_SBP_CUSTOM_VALUE)),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_md_sbp_custom_value=$(strip $(MTK_MD_SBP_CUSTOM_VALUE))
-endif
-
-# Add for Automatic Setting for heapgrowthlimit & heapsize
-RESOLUTION_HXW=$(shell expr $(LCM_HEIGHT) \* $(LCM_WIDTH))
-
-ifeq ($(shell test $(RESOLUTION_HXW) -ge 0 && test $(RESOLUTION_HXW) -lt 1000000 && echo true), true)
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapgrowthlimit=128m
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapsize=256m
-endif
-
-ifeq ($(shell test $(RESOLUTION_HXW) -ge 1000000 && test $(RESOLUTION_HXW) -lt 3500000 && echo true), true)
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapgrowthlimit=192m
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapsize=384m
-endif
-
-ifeq ($(shell test $(RESOLUTION_HXW) -ge 3500000 && echo true), true)
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapgrowthlimit=384m
-PRODUCT_PROPERTY_OVERRIDES += dalvik.vm.heapsize=768m
-endif
-
-PRODUCT_PACKAGES += CarrierConfig
-
-# Add for SensorHub
-PRODUCT_PACKAGES += SensorHub
-
-# Add for common service initialization
-PRODUCT_COPY_FILES += device/mediatek/common/init.common_svc.rc:root/init.common_svc.rc
-
-# M: GMO Zygote64 on demand @{
-ifeq ($(strip $(MTK_GMO_ZYGOTE_ON_DEMAND)), yes)
-    # 1 = support secondary zygote on demand, 0 = not support
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_gmo_zygote_on_demand=1
-
-    # 1 = full preload, 0 = no preload
-    PRODUCT_PROPERTY_OVERRIDES += persist.sys.mtk_zygote_preload=0
-
-    # the time to stop secondary zygote after the last forked process has been killed, in seconds
-    PRODUCT_PROPERTY_OVERRIDES += persist.sys.mtk_zygote_timeout=60
-
-    # 1 = enable debug, 0 = disable debug
-    PRODUCT_PROPERTY_OVERRIDES += persist.sys.mtk_zygote_debug=0
-
-    # include init.zygote_on_demand.rc
-    PRODUCT_COPY_FILES += device/mediatek/common/init.zygote_on_demand.rc:root/init.zygote_on_demand.rc
-endif
-# M: GMO Zygote64 on demand @}
-
-# Add for (VzW) chipset test
-ifneq ($(MTK_VZW_CHIPTEST_MODE_SUPPORT),)
-  #we dont support yes, only support 0,1,2
-  ifeq (, $(filter 0 no,$(MTK_VZW_CHIPTEST_MODE_SUPPORT)))
-    PRODUCT_COPY_FILES += device/mediatek/common/init.chiptest.rc:root/init.chiptest.rc
-    ifeq ($(strip $(MTK_VZW_CHIPTEST_MODE_SUPPORT)), 1)
-      PRODUCT_PROPERTY_OVERRIDES += persist.chiptest.enable=1
-    endif
-  endif
-endif
-
-# Add for Dynamic-SBP
-ifeq ($(strip $(MTK_DYNAMIC_SBP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.mtk_dsbp_support=1
-endif
-
-# Add for Dynamic IMS switch support
-ifeq ($(strip $(MTK_DYNAMIC_IMS_SWITCH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_dynamic_ims_switch=1
-endif
-
-# Add for MTK_CT_VOLTE_SUPPORT
-ifeq ($(strip $(MTK_CT_VOLTE_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.mtk_ct_volte_support=1
-endif
-
-# Add for BRM superset
-ifeq ($(strip $(RELEASE_BRM)), yes)
-  include device/mediatek/common/releaseBRM.mk
-endif
-
-# Add for Contacts AAS and SNE
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-        PRODUCT_PACKAGES += AasSne
-    endif
-endif
-
-# Add for Contacts SimProcessor
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-        PRODUCT_PACKAGES += SimProcessor
-    endif
-endif
-
-# Add for Modem protocol2 capability setting
-ifneq ($(strip $(MTK_PROTOCOL2_RAT_CONFIG)),)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.mtk_ps2_rat=$(strip $(MTK_PROTOCOL2_RAT_CONFIG))
-endif
-
-# Add for Modem protocol3 capability setting
-ifneq ($(strip $(MTK_PROTOCOL3_RAT_CONFIG)),)
-  PRODUCT_PROPERTY_OVERRIDES += persist.radio.mtk_ps3_rat=$(strip $(MTK_PROTOCOL3_RAT_CONFIG))
-endif
-
-
-ifeq ($(strip $(MTK_VIBSPK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_vibspk_support=1
-endif
-
-# Add for opt_c2k_lte_mode
-ifeq ($(strip $(MTK_C2K_LTE_MODE)), 2)
-  PRODUCT_PROPERTY_OVERRIDES +=ro.boot.opt_c2k_lte_mode=2
-else
-  ifeq ($(strip $(MTK_C2K_LTE_MODE)), 1)
-    PRODUCT_PROPERTY_OVERRIDES +=ro.boot.opt_c2k_lte_mode=1
-  else
-    ifeq ($(strip $(MTK_C2K_LTE_MODE)), 0)
-      PRODUCT_PROPERTY_OVERRIDES +=ro.boot.opt_c2k_lte_mode=0
-    endif
-  endif
-endif
-
-# Add for opt_md1_support
-ifneq ($(strip $(MTK_MD1_SUPPORT)),)
-ifneq ($(strip $(MTK_MD1_SUPPORT)), 0)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_md1_support=$(strip $(MTK_MD1_SUPPORT))
-endif
-endif
-
-# Add for opt_md3_support
-ifneq ($(strip $(MTK_MD3_SUPPORT)),)
-ifneq ($(strip $(MTK_MD3_SUPPORT)), 0)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_md3_support=$(strip $(MTK_MD3_SUPPORT))
-endif
-endif
-
-# Add for opt_lte_support
-ifneq ($(strip $(MTK_PROTOCOL1_RAT_CONFIG)),)
-ifneq ($(findstring L,$(strip $(MTK_PROTOCOL1_RAT_CONFIG))),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_lte_support=1
-endif
-endif
-
-# Add for opt_irat_support
-ifeq ($(strip $(MTK_IRAT_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_irat_support=1
-endif
-
-PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILMUXD=I
-
-# Telephony RIL log configurations
-ifeq ($(strip $(MTK_TELEPHONY_CONN_LOG_CTRL_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.tel_log_ctrl=1
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AT=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILC-MTK=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILC=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxMainThread=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxRoot=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxRilAdapter=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxController=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILC-RP=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxCloneMgr=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxHandlerMgr=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxIdToStr=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxMclMessenger=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RilClient=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxMclStsMgr=I
-endif
-ifneq ($(strip $(TARGET_BUILD_VARIANT)),eng)
-  # user/userdebug load
-  # V/D/(I/W/E)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DCT=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-DATA=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_RIL-DATA=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GsmCdmaPhone=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SSDecisonMaker=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GsmMmiCode=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpSsController=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-SS=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILMD2-SS=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DataSubSelector=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DcFcMgr=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DC-1=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DC-2=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RetryManager=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IccProvider=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IccPhoneBookIM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AdnRecordCache=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AdnRecordLoader=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AdnRecord=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-PHB=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpPhbController=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RmcPhbReq=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RmcPhbUrc=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RtcPhb=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-SMS=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DupSmsFilterExt=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ConSmsFwkExt=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DataOnlySmsFwk=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.VT=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsVTProvider=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IccCardProxy=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IsimFileHandler=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IsimRecords=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SIMRecords=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SpnOverride=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.UiccCard=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.UiccController=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-SIM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.MtkAgpsHelper=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.CountryDetector=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.NetworkStats=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.NetworkPolicy=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DataDispatcher=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsService=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IMS_RILA=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.IMSRILRequest=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsManager=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsApp=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsBaseCommands=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsCall=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsPhone=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsPhoneCall=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsPhoneBase=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsCallSession=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsCallProfile=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsEcbm=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsEcbmProxy=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.OperatorUtils=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.WfoApp=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GbaApp=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GbaBsfProcedure=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GbaBsfResponse=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GbaDebugParam=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GbaService=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SresResponse=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsUtService=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SimservType=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SimservsTest=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ImsUt=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SSDecisonMaker=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SuppSrvConfig=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ECCCallHelper=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GsmConnection=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.TelephonyConf=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.TeleConfCtrler=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.TelephonyConn=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.TeleConnService=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ECCRetryHandler=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ECCNumUtils=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ECCRuleHandler=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SuppMsgMgr=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ECCSwitchPhone=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GsmCdmaConn=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.GsmCdmaPhone=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.Phone=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-CC=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpCallControl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpAudioControl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RadioManager=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL_Mux=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-OEM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL_UIM_SOCKET=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RILD=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-RP=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxMessage=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxDebugInfo=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxTimer=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxObject=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SlotQueueEntry=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxAction=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RFX=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpRadioMessage=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpModemMessage=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.PhoneFactory=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.ProxyController=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SpnOverride=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.SmsPlusCode=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AutoRegSmsFwk=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.AirplaneHandler=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxDefDestUtils=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxSM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxSocketSM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RfxDT=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpCdmaOemCtrl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpRadioCtrl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpMDCtrl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpCdmaRadioCtrl=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RpFOUtils=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_RIL-SIM=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.VDO_LOG=I
-else
-  # eng load
-  # V/(D/I/W/E)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DCT=D
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.RIL-DATA=D
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_RIL-DATA=D
-endif
-# endif for TARGET_BUILD_VARIANT
-else
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.DCT=D
-endif
-# endif for MTK_TELEPHONY_CONN_LOG_CTRL_SUPPORT
-
-# Add for opt_eccci_c2k
-ifeq ($(strip $(MTK_ECCCI_C2K)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_eccci_c2k=1
-endif
-
-# Add for opt_using_default, always set to 1
-PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_using_default=1
-
-# Add for opt_c2k_support
-ifneq ($(strip $(MTK_PROTOCOL1_RAT_CONFIG)),)
-ifneq ($(findstring C,$(strip $(MTK_PROTOCOL1_RAT_CONFIG))),)
-  PRODUCT_PROPERTY_OVERRIDES += ro.boot.opt_c2k_support=1
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_AT=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_RILC=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.C2K_ATConfig=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.LIBC2K_RIL=I
-endif
-endif
-
-# Add for Multi Ps Attach
-ifeq ($(strip $(MTK_MULTI_PS_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_data_config=1
-endif
-
-# Add for multi-window
-ifeq ($(strip $(MTK_MULTI_WINDOW_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_multiwindow=1
-  PRODUCT_COPY_FILES += $(call add-to-product-copy-files-if-exists,frameworks/native/data/etc/android.software.freeform_window_management.xml:system/etc/permissions/android.software.freeform_window_management.xml)
-endif
-
-# Audio policy config
-ifeq ($(strip $(USE_XML_AUDIO_POLICY_CONF)), 1)
-AUDIO_POLICY_PROJECT_CONFIGS := \
-  $(strip \
-    $(notdir $(wildcard $(MTK_TARGET_PROJECT_FOLDER)/audio_policy_config/*.xml)\
-    ) \
-  )
-AUDIO_POLICY_BASE_PROJECT_CONFIGS := \
-  $(strip \
-    $(filter-out $(AUDIO_POLICY_PROJECT_CONFIGS), \
-      $(notdir $(wildcard device/mediatek/$(MTK_BASE_PROJECT)/audio_policy_config/*.xml)) \
-    ) \
-  )
-AUDIO_POLICY_PLATFORM_CONFIGS := \
-  $(strip \
-    $(filter-out $(AUDIO_POLICY_PROJECT_CONFIGS) $(AUDIO_POLICY_BASE_PROJECT_CONFIGS), \
-      $(notdir $(wildcard device/mediatek/$(MTK_PLATFORM_DIR)/audio_policy_config/*.xml)) \
-    ) \
-  )
-AUDIO_POLICY_COMMON_CONFIGS := \
-  $(strip \
-    $(filter-out $(AUDIO_POLICY_PROJECT_CONFIGS) $(AUDIO_POLICY_BASE_PROJECT_CONFIGS) $(AUDIO_POLICY_PLATFORM_CONFIGS), \
-      $(notdir $(wildcard device/mediatek/common/audio_policy_config/*.xml)) \
-    ) \
-  )
-
-$(foreach x,$(AUDIO_POLICY_PROJECT_CONFIGS), \
-  $(eval PRODUCT_COPY_FILES += $(MTK_TARGET_PROJECT_FOLDER)/audio_policy_config/$(x):system/etc/$(x)) \
-)
-
-$(foreach x,$(AUDIO_POLICY_BASE_PROJECT_CONFIGS), \
-  $(eval PRODUCT_COPY_FILES += device/mediatek/$(MTK_BASE_PROJECT)/audio_policy_config/$(x):system/etc/$(x)) \
-)
-
-$(foreach x,$(AUDIO_POLICY_PLATFORM_CONFIGS), \
-  $(eval PRODUCT_COPY_FILES += device/mediatek/$(MTK_PLATFORM_DIR)/audio_policy_config/$(x):system/etc/$(x)) \
-)
-
-$(foreach x,$(AUDIO_POLICY_COMMON_CONFIGS), \
-  $(eval PRODUCT_COPY_FILES += device/mediatek/common/audio_policy_config/$(x):system/etc/$(x)) \
-)
-endif
-
-#Add for video codec customization
-PRODUCT_PROPERTY_OVERRIDES += mtk.vdec.waitkeyframeforplay=1
-
-ifeq ($(strip $(MTK_EMBMS_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_embms_support=1
-    PRODUCT_PACKAGES += \
-        EweMBMSServer \
-        com.verizon.embms.jar \
-        com.verizon.embms.xml
-endif
-
-# Add for sdcardfs
-PRODUCT_PROPERTY_OVERRIDES += ro.sys.sdcardfs=1
-
-# Add for CMCC Light Customization Support
-ifeq ($(strip $(CMCC_LIGHT_CUST_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.cmcc_light_cust_support=1
-endif
-
-# Add for USB MIDI
-PRODUCT_COPY_FILES += \
-frameworks/native/data/etc/android.software.midi.xml:system/etc/permissions/android.software.midi.xml
-
-# workaround for dex_preopt
-$(call add-product-dex-preopt-module-config,Settings,disable)
-$(call add-product-dex-preopt-module-config,DataProtection,disable)
-$(call add-product-dex-preopt-module-config,PermissionControl,disable)
-$(call add-product-dex-preopt-module-config,PrivacyProtectionLock,disable)
-
-ifeq (yes,$(strip $(MTK_BG_POWER_SAVING_SUPPORT)))
-    ifeq (yes,$(strip $(MTK_ALARM_AWARE_UPLINK_SUPPORT)))
-        PRODUCT_PROPERTY_OVERRIDES += persist.mtk.datashaping.support=1
-        PRODUCT_PROPERTY_OVERRIDES += persist.datashaping.alarmgroup=1
-    endif
-endif
-
-# Add for Running Booster Feature
-ifeq (yes,$(strip $(MTK_RUNNING_BOOSTER_SUPPORT)))
-    PRODUCT_PROPERTY_OVERRIDES += persist.duraspeed.support=1
-    PRODUCT_PACKAGES += DuraSpeed
-    ifeq (yes,$(strip $(MTK_RUNNING_BOOSTER_UPGRADE)))
-        PRODUCT_PROPERTY_OVERRIDES += persist.duraspeed.upgrade=1
-    endif
-    ifeq (yes,$(strip $(MTK_RUNNING_BOOSTER_DEFAULT_ON)))
-        PRODUCT_PROPERTY_OVERRIDES += persist.duraspeed.app.on=1
-    endif
-endif
-
-# Add for Resolution Switch feature
-ifeq ($(strip $(MTK_RESOLUTION_SWITCH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_res_switch=1
-endif
-
-# Add for Display HDR feature
-ifeq ($(strip $(MTK_HDR_VIDEO_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_hdr_video_support=1
-endif
-
-# Add for App Working Set feature
-ifeq ($(strip $(MTK_AWS_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_aws_support=1
-endif
-
-ifeq ($(strip $(MTK_MLC_NAND_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_mlc_nand_support=1
-endif
-ifeq ($(strip $(MTK_TLC_NAND_SUPPORT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_tlc_nand_support=1
-endif
-
-# for sensor multi-hal
-ifeq ($(USE_SENSOR_MULTI_HAL), true)
-  PRODUCT_COPY_FILES += $(MTK_PROJECT_FOLDER)/hals.conf:system/etc/sensors/hals.conf:mtk
-  PRODUCT_PROPERTY_OVERRIDES += ro.hardware.sensors=$(MTK_BASE_PROJECT)
-  PRODUCT_PACKAGES += sensors.$(MTK_BASE_PROJECT)
-endif
-
-# for hifi sensors feature
-ifeq ($(strip $(CUSTOM_HIFI_SENSORS)), yes)
-  PRODUCT_COPY_FILES += frameworks/native/data/etc/android.hardware.sensor.hifi_sensors.xml:system/etc/permissions/android.hardware.sensor.hifi_sensors.xml
-endif
-
-# for VR high performane feature
-ifeq ($(MTK_VR_HIGH_PERFORMANCE_SUPPORT),yes)
-  PRODUCT_COPY_FILES += frameworks/native/data/etc/android.hardware.vr.high_performance.xml:system/etc/permissions/android.hardware.vr.high_performance.xml
-  PRODUCT_PACKAGES += vr.$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')
-endif
-
-
-# Add EmergencyInfo apk to TK load
-ifneq ($(strip $(MTK_BASIC_PACKAGE)), yes)
-    ifneq ($(strip $(MTK_BSP_PACKAGE)), yes)
-        PRODUCT_PACKAGES += EmergencyInfo
-    endif
-endif
-
-# Add for SKT customization
-ifeq ($(strip $(MTK_KOR_CUSTOMIZATION_SKT)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_kor_customization_skt=1
-  PRODUCT_PROPERTY_OVERRIDES += persist.ril.sim.regmode=0
-endif
-
-# for KSC5601 decoding to write phonebook
-ifeq ($(strip $(KSC5601_WRITE)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.ksc5601_write=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.ksc5601_write=0
-endif
-
-# for email field ucs2 decoding
-ifeq ($(strip $(EMAIL_SUPPORT_UCS2)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.email_support_ucs2=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.email_support_ucs2=0
-endif
-
-# for decoding USSD of KSC5601 for KOR operator
-ifeq ($(strip $(USSD_KSC5601)),yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.ussd_ksc5601=1
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.ussd_ksc5601=0
-endif
-
-#======================lovelyfonts start ==============================
-ifeq ($(strip $(LOVELYFONTS_SUPPORT)), yes)
-  PRODUCT_PACKAGES += LovelyFonts
-endif
-
-ifeq ($(strip $(MTK_YIQI_FONTS_FRAMEWORK_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.lovelyfonts_support=1
-  PRODUCT_COPY_FILES += frameworks/base/lovelyfontsframework/clib/lib/libFonts.so:system/lib/libFonts.so
-  ifneq ($(strip $(TARGET_CPU_ABI_LIST_64_BIT)),"")
-    PRODUCT_COPY_FILES += frameworks/base/lovelyfontsframework/clib/lib64/libFonts.so:system/lib64/libFonts.so
-  endif
-  PRODUCT_COPY_FILES += frameworks/base/lovelyfontsframework/init.lovelyfonts.rc:root/init.lovelyfonts.rc
-  PRODUCT_PACKAGES += LovelyFontContainerService
-endif
-#======================lovelyfonts end  =======================
-
-# Log control for SMS
-ifneq ($(strip $(TARGET_BUILD_VARIANT)),eng)
-  # user/userdebug load
-  # V/D/(I/W/E)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.CdmaMoSms=I
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.CdmaMtSms=I
-else
-  # eng load
-  # V/(D/I/W/E)
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.CdmaMoSms=D
-  PRODUCT_PROPERTY_OVERRIDES += persist.log.tag.CdmaMtSms=D
-endif
-
-# Add for LWA feature support
-ifeq ($(strip $(MTK_LWA_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_lwa_support=1
-endif
-
-# Add for LWI feature support
-ifeq ($(strip $(MTK_LWI_SUPPORT)), yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_lwi_support=1
-endif
-
-# Add for FTL feature support
-ifeq ($(strip $(MTK_NAND_MTK_FTL_SUPPORT)), yes)
-   PRODUCT_PROPERTY_OVERRIDES += ro.mtk_nand_ftl_support=1
-endif
-
-# Add for MNTL feature support
-ifeq ($(strip $(MNTL_SUPPORT)), yes)
-   PRODUCT_PROPERTY_OVERRIDES += ro.mntl_support=1
-endif
-
-# MTK internal load or customer eng/userdebug load will buildin log daemon.
-# Customer user load default not have MTK log daemon.
-# If customer user load want buildin the log daemon, You need set
-# MTK_LOG_CUSTOMER_SUPPORT_ALL to yes, it will buildin log daemon as internal load.
-# Each log daemon is decided by its feature option.
-# Case: MTK internal load
-ifeq ($(strip $(MTK_INTERNAL)),yes)
-  ifeq ($(strip $(MTK_LOG_SUPPORT_GPS)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=0
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=1
-  endif
-  ifeq ($(strip $(MTK_MTKLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += MTKLogger
-    ifeq ($(strip $(MTK_BTLOGGER_SUPPORT)),yes)
-      PRODUCT_PACKAGES += BtTool
-    endif
-  endif
-  ifeq ($(strip $(MTK_NETWORK_LOG_SUPPORT)),yes)
-    PRODUCT_PACKAGES += netdiag
-  endif
-  PRODUCT_PACKAGES += tcpdump
-  ifeq ($(strip $(MTK_LOG_SUPPORT_MOBILE_LOG)),yes)
-    PRODUCT_PACKAGES += mobile_log_d
-  endif
-# Add for ModemMonitor(MDM) framework
-  ifeq ($(strip $(MTK_MODEM_MONITOR_SUPPORT)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_modem_monitor_support=1
-    PRODUCT_PACKAGES += \
-      md_monitor \
-      md_monitor_ctrl \
-      MDMLSample \
-      MDMConfig
-  endif
-  ifeq ($(strip $(MTK_AEE_SUPPORT)),yes)
-    HAVE_AEE_FEATURE = yes
-  else
-    HAVE_AEE_FEATURE = no
-  endif
-# Case: Customer eng/userdebug load
-else ifneq ($(strip $(TARGET_BUILD_VARIANT)),user)
-  ifeq ($(strip $(MTK_LOG_SUPPORT_GPS)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=0
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=1
-  endif
-  ifeq ($(strip $(MTK_MTKLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += MTKLogger
-    ifeq ($(strip $(MTK_BTLOGGER_SUPPORT)),yes)
-      PRODUCT_PACKAGES += BtTool
-    endif
-  endif
-  ifeq ($(strip $(MTK_NETWORK_LOG_SUPPORT)),yes)
-    PRODUCT_PACKAGES += netdiag
-  endif
-  PRODUCT_PACKAGES += tcpdump
-  ifeq ($(strip $(MTK_LOG_SUPPORT_MOBILE_LOG)),yes)
-    PRODUCT_PACKAGES += mobile_log_d
-  endif
-# Add for ModemMonitor(MDM) framework
-  ifeq ($(strip $(MTK_MODEM_MONITOR_SUPPORT)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_modem_monitor_support=1
-    PRODUCT_PACKAGES += \
-      md_monitor \
-      md_monitor_ctrl \
-      MDMLSample \
-      MDMConfig
-  endif
-  ifeq ($(strip $(MTK_AEE_SUPPORT)),yes)
-    HAVE_AEE_FEATURE = yes
-  else
-    HAVE_AEE_FEATURE = no
-  endif
-# Case: Customer user load and MTK_LOG_CUSTOMER_SUPPORT = yes
-else ifeq ($(strip $(MTK_LOG_CUSTOMER_SUPPORT)),yes)
-  ifeq ($(strip $(MTK_LOG_SUPPORT_GPS)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=0
-  else
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=1
-  endif
-  ifeq ($(strip $(MTK_MTKLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += MTKLogger
-    ifeq ($(strip $(MTK_BTLOGGER_SUPPORT)),yes)
-      PRODUCT_PACKAGES += BtTool
-    endif
-  endif
-  ifeq ($(strip $(MTK_NETWORK_LOG_SUPPORT)),yes)
-    PRODUCT_PACKAGES += netdiag
-    PRODUCT_PACKAGES += tcpdump
-  endif
-  ifeq ($(strip $(MTK_LOG_SUPPORT_MOBILE_LOG)),yes)
-    PRODUCT_PACKAGES += mobile_log_d
-  endif
-# Add for ModemMonitor(MDM) framework
-  ifeq ($(strip $(MTK_MODEM_MONITOR_SUPPORT)),yes)
-    PRODUCT_PROPERTY_OVERRIDES += ro.mtk_modem_monitor_support=1
-    PRODUCT_PACKAGES += \
-      md_monitor \
-      md_monitor_ctrl \
-      MDMLSample \
-      MDMConfig
-  endif
-  ifeq ($(strip $(MTK_AEE_SUPPORT)),yes)
-    HAVE_AEE_FEATURE = yes
-  else
-    HAVE_AEE_FEATURE = no
-  endif
-# Other Case: Customer user load and MTK_LOG_CUSTOMER_SUPPORT = no
-else
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_log_hide_gps=1
-  HAVE_AEE_FEATURE = no
-endif
-
-# AEE Config
-ifeq ($(HAVE_AEE_FEATURE),yes)
-  ifneq ($(MTK_CHIPTEST_INT),yes)
-    ifneq ($(wildcard vendor/mediatek/proprietary/external/aee_config_internal/init.aee.mtk.rc),)
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/external/aee_config_internal/aee.mk)
-    else
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/external/aee/config_external/aee.mk)
-    endif
-  else  # MTK_CHEPTEST_INT
-$(call inherit-product-if-exists, vendor/mediatek/proprietary/external/aee/config_external/aee.mk)
-  endif  # MTK_CHEPTEST_INT
-PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/aee/binary/aee-config:$(TARGET_COPY_OUT_VENDOR)/etc/aee-config:mtk
-
-PRODUCT_PROPERTY_OVERRIDES += ro.have_aee_feature=1
-PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/aee/binary/bin/debuggerd:system/bin/debuggerd:mtk
-  ifeq ($(MTK_K64_SUPPORT), yes)
-    PRODUCT_COPY_FILES += vendor/mediatek/proprietary/external/aee/binary/bin/debuggerd64:system/bin/debuggerd64:mtk
-  endif
-# MRDUMP
-PRODUCT_PACKAGES += \
-    libmrdump \
-    mrdump_tool \
-    ksyms-query
-endif
-
-# Modem log daemon built in according to feature option flow.
-ifeq ($(strip $(MTK_INTERNAL)),yes)
-  ifeq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += \
-      libmdloggerrecycle \
-      libmemoryDumpEncoder \
-      mdlogger
-    ifneq ($(strip $(MTK_MD1_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD1_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger1
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD2_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD2_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger2
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD5_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD5_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger5
-      endif
-    endif
-    #  $(call inherit-product-if-exists, vendor/mediatek/proprietary/protect-app/external/emdlogger/usb_port.mk)
-    ifneq ($(wildcard device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop),)
-      PRODUCT_COPY_FILES += device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop:$(TARGET_COPY_OUT_VENDOR)/etc/emdlogger_usb_config.prop:mtk
-    endif
-  endif
-  ifneq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-      PRODUCT_PACKAGES += libmdloggerrecycle
-    endif
-  endif
-  ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-    PRODUCT_PACKAGES += emdlogger3
-  endif
-else ifneq ($(strip $(TARGET_BUILD_VARIANT)),user)
-  ifeq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += \
-      libmdloggerrecycle \
-      libmemoryDumpEncoder \
-      mdlogger
-    ifneq ($(strip $(MTK_MD1_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD1_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger1
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD2_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD2_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger2
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD5_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD5_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger5
-      endif
-    endif
-    #  $(call inherit-product-if-exists, vendor/mediatek/proprietary/protect-app/external/emdlogger/usb_port.mk)
-    ifneq ($(wildcard device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop),)
-      PRODUCT_COPY_FILES += device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop:$(TARGET_COPY_OUT_VENDOR)/etc/emdlogger_usb_config.prop:mtk
-    endif
-  endif
-  ifneq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-      PRODUCT_PACKAGES += libmdloggerrecycle
-    endif
-  endif
-  ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-    PRODUCT_PACKAGES += emdlogger3
-  endif
-else ifeq ($(strip $(MTK_LOG_CUSTOMER_SUPPORT)),yes)
-  ifeq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    PRODUCT_PACKAGES += \
-      libmdloggerrecycle \
-      libmemoryDumpEncoder \
-      mdlogger
-    ifneq ($(strip $(MTK_MD1_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD1_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger1
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD2_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD2_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger2
-      endif
-    endif
-    ifneq ($(strip $(MTK_MD5_SUPPORT)),)
-      ifneq ($(strip $(MTK_MD5_SUPPORT)),0)
-        PRODUCT_PACKAGES += emdlogger5
-      endif
-    endif
-    #  $(call inherit-product-if-exists, vendor/mediatek/proprietary/protect-app/external/emdlogger/usb_port.mk)
-    ifneq ($(wildcard device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop),)
-      PRODUCT_COPY_FILES += device/mediatek/$(shell echo $(MTK_PLATFORM) | tr '[A-Z]' '[a-z]')/emdlogger_usb_config.prop:$(TARGET_COPY_OUT_VENDOR)/etc/emdlogger_usb_config.prop:mtk
-    endif
-  endif
-  ifneq ($(strip $(MTK_MDLOGGER_SUPPORT)),yes)
-    ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-      PRODUCT_PACKAGES += libmdloggerrecycle
-    endif
-  endif
-  ifeq ($(strip $(RAT_CONFIG_C2K_SUPPORT)),yes)
-    PRODUCT_PACKAGES += emdlogger3
-  endif
-endif
-
-ifeq ($(strip $(NFC_CHIP_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.nfc.vendor=STMicro
-  PRODUCT_PROPERTY_OVERRIDES += ro.nfc.chipset=st21nfc
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_nfc_addon_support=1
-  PRODUCT_BOOT_JARS += com.st.android.nfc_extensions
-  PRODUCT_COPY_FILES += \
-    frameworks/native/data/etc/android.hardware.nfc.xml:system/etc/permissions/android.hardware.nfc.xml \
-    frameworks/native/data/etc/android.hardware.nfc.hce.xml:system/etc/permissions/android.hardware.nfc.hce.xml \
-    frameworks/native/data/etc/android.hardware.nfc.hcef.xml:system/etc/permissions/android.hardware.nfc.hcef.xml \
-    frameworks/native/data/etc/com.android.nfc_extras.xml:system/etc/permissions/com.android.nfc_extras.xml \
-    vendor/mediatek/proprietary/frameworks/opt/ST-Extension/nfc/nfcee_access.xml:system/etc/nfcee_access.xml:mtk \
-    vendor/mediatek/proprietary/frameworks/opt/ST-Extension/frameworks/NfcExtensions/com.st.android.nfc_extensions.xml:$(TARGET_COPY_OUT_VENDOR)/etc/permissions/com.st.android.nfc_extensions.xml:mtk
-
-  ifeq ($(strip $(TARGET_BUILD_VARIANT)),eng)
-    PRODUCT_COPY_FILES += \
-      vendor/mediatek/proprietary/frameworks/opt/ST-Extension/nfc/libnfc-st.conf:system/vendor/etc/libnfc-st.conf
-  else
-    PRODUCT_COPY_FILES += \
-      vendor/mediatek/proprietary/frameworks/opt/ST-Extension/nfc/libnfc-st.conf-user:system/vendor/etc/libnfc-st.conf
-  endif
-
-  ifeq ($(strip $(ST_NFC_FM_SE_CONFIG)), 3)
-    ifneq ($(wildcard $(MTK_PROJECT_FOLDER)/script_DB10mtk_2UICC.txt),)
-      ST_NFC_SCRIPT_PATH = $(MTK_PROJECT_FOLDER)/script_DB10mtk_2UICC.txt
-    else
-      ST_NFC_SCRIPT_PATH = device/mediatek/$(MTK_PLATFORM_DIR)/script_DB10mtk_2UICC.txt
-    endif
-    PRODUCT_COPY_FILES += \
-      $(ST_NFC_SCRIPT_PATH):$(TARGET_COPY_OUT_VENDOR)/etc/script_DB10mtk.txt:mtk
-  endif
-  ifeq ($(strip $(ST_NFC_FM_SE_CONFIG)), 5)
-    ifneq ($(wildcard $(MTK_PROJECT_FOLDER)/script_DB10mtk_UICC_eSE.txt),)
-      ST_NFC_SCRIPT_PATH = $(MTK_PROJECT_FOLDER)/script_DB10mtk_UICC_eSE.txt
-    else
-      ST_NFC_SCRIPT_PATH = device/mediatek/$(MTK_PLATFORM_DIR)/script_DB10mtk_UICC_eSE.txt
-    endif
-    PRODUCT_COPY_FILES += \
-      $(ST_NFC_SCRIPT_PATH):$(TARGET_COPY_OUT_VENDOR)/etc/script_DB10mtk.txt:mtk
-
-    ifeq ($(strip $(MTK_NFC_OMAAC_SUPPORT)), yes)
-      PRODUCT_PACKAGES += eSETerminal_st
-    endif
-  endif
-
-  PRODUCT_PACKAGES += \
-    nfc_nci.st21nfc.default \
-    libstnfc-nci \
-    libnfc_st_jni \
-    Nfc_st \
-    Tag \
-    com.android.nfc_extras \
-    com.st.android.nfc_extensions \
-    STFlashTool \
-    nfcstackp \
-    stDTAservice \
-    libdtaNfaProvider \
-    libstDTA \
-    STNFCDta \
-    ixitdata.xml
-endif
-
-# Add for log much detect
-ifeq ($(strip $(MTK_INTERNAL)), yes)
-   PRODUCT_PROPERTY_OVERRIDES += ro.mtk_internal=1
-endif
-
-# Add WallpaperPicker
-PRODUCT_PACKAGES += WallpaperPicker
-
-ifdef CUSTOM_MODEM
-  ifeq ($(strip $(TARGET_BUILD_VARIANT)),eng)
-    MTK_MODEM_MODULE_MAKEFILES := $(foreach item,$(CUSTOM_MODEM),$(firstword $(wildcard vendor/mediatek/proprietary/modem/$(patsubst %_prod,%,$(item))/Android.mk vendor/mediatek/proprietary/modem/$(item)/Android.mk)))
-  else
-    MTK_MODEM_MODULE_MAKEFILES := $(foreach item,$(CUSTOM_MODEM),$(firstword $(wildcard vendor/mediatek/proprietary/modem/$(patsubst %_prod,%,$(item))_prod/Android.mk vendor/mediatek/proprietary/modem/$(item)/Android.mk)))
-  endif
-$(foreach f,$(wildcard $(patsubst %/Android.mk,%/makefile/product_*.mk,$(MTK_MODEM_MODULE_MAKEFILES))),\
-  $(eval $(call inherit-product-if-exists,$(f)))\
-)
-endif
-
-ifeq ($(strip $(MTK_FULLSCREEN_SWITCH_SUPPORT)), yes)
-  PRODUCT_PROPERTY_OVERRIDES += ro.mtk_fullscreen_switch=1
-  PRODUCT_PACKAGES += FullscreenSwitchService
-  PRODUCT_PACKAGES += FullscreenMode
-  PRODUCT_PACKAGES += FullscreenSwitchProvider
-endif
-
-ifeq ($(strip $(MICROTRUST_IFAA_SUPPORT)), yes)
-  PRODUCT_PACKAGES += libmtee
-  PRODUCT_PACKAGES += libteeclientjni
-  PRODUCT_PACKAGES += libifaa_daemon
-  PRODUCT_PACKAGES += ifaad
-  PRODUCT_PACKAGES += libifaa_jni
-endif
-
Index: vendor/branch/5058A_Claro/device/ausshine/aus6739_66_n1/full_aus6739_66_n1.mk
===================================================================
--- vendor/branch/5058A_Claro/device/ausshine/aus6739_66_n1/full_aus6739_66_n1.mk	(revision 3017)
+++ vendor/branch/5058A_Claro/device/ausshine/aus6739_66_n1/full_aus6739_66_n1.mk	(revision 3018)
@@ -1,53 +0,0 @@
-# Inherit for devices that support 64-bit primary and 32-bit secondary zygote startup script
-$(call inherit-product, $(SRC_TARGET_DIR)/product/core_64_bit.mk)
-
-# Inherit from those products. Most specific first.
-#$(call inherit-product, $(SRC_TARGET_DIR)/product/full_base_telephony.mk)
-# Inherit from those products. Most specific first.
-$(call inherit-product, $(SRC_TARGET_DIR)/product/full_base.mk)
-
-# Set target and base project for flavor build
-MTK_TARGET_PROJECT := $(subst full_,,$(TARGET_PRODUCT))
-MTK_BASE_PROJECT := $(MTK_TARGET_PROJECT)
-MTK_PROJECT_FOLDER := $(shell find device/* -maxdepth 1 -name $(MTK_BASE_PROJECT))
-MTK_TARGET_PROJECT_FOLDER := $(shell find device/* -maxdepth 1 -name $(MTK_TARGET_PROJECT))
-
-# This is where we'd set a backup provider if we had one
-#$(call inherit-product, device/sample/products/backup_overlay.mk)
-# Inherit from maguro device
-$(call inherit-product, device/ausshine/$(MTK_TARGET_PROJECT)/device.mk)
-
-# set locales & aapt config.
-include $(MTK_TARGET_PROJECT_FOLDER)/ProjectConfig.mk
-#ifneq (,$(filter OP01%, $(OPTR_SPEC_SEG_DEF)))
-  #ifeq ($(OP01_COMPATIBLE), yes)
-    #PRODUCT_LOCALES:=zh_CN en_US zh_TW ja_JP en_GB fr_FR
-  #else
-    #PRODUCT_LOCALES:=zh_CN en_US zh_TW
-  #endif
-#else ifneq (,$(filter OP09%, $(OPTR_SPEC_SEG_DEF)))
-  #PRODUCT_LOCALES:=zh_CN zh_HK zh_TW en_US pt_BR pt_PT en_GB fr_FR ja_JP
-#else
-  #PRODUCT_LOCALES := en_US zh_CN zh_TW es_ES pt_BR ru_RU fr_FR de_DE tr_TR vi_VN ms_MY in_ID th_TH it_IT ar_EG hi_IN bn_IN ur_PK fa_IR pt_PT nl_NL el_GR hu_HU tl_PH ro_RO cs_CZ ko_KR km_KH iw_IL my_MM pl_PL es_US bg_BG hr_HR lv_LV lt_LT sk_SK uk_UA de_AT da_DK fi_FI nb_NO sv_SE en_GB hy_AM zh_HK et_EE ja_JP kk_KZ sr_RS sl_SI ca_ES
-#endif
-
-PRODUCT_LOCALES:=es_US en_US pt_BR pt_PT fr_FR
-
-# Set those variables here to overwrite the inherited values.
-PRODUCT_MANUFACTURER := alps
-PRODUCT_NAME := full_aus6739_66_n1
-PRODUCT_DEVICE := aus6739_66_n1
-PRODUCT_MODEL := aus6739_66_n1
-PRODUCT_POLICY := android.policy_phone
-PRODUCT_BRAND := alps
-
-ifeq ($(TARGET_BUILD_VARIANT), eng)
-KERNEL_DEFCONFIG ?= aus6739_66_n1_debug_defconfig
-else
-KERNEL_DEFCONFIG ?= aus6739_66_n1_defconfig
-endif
-PRELOADER_TARGET_PRODUCT ?= aus6739_66_n1
-LK_PROJECT ?= aus6739_66_n1
-TRUSTY_PROJECT ?= aus6739_66_n1
-$(call inherit-product, device/cdfinger/cdfinger_product_64bit.mk)
-$(call inherit-product, device/chipsailing/csfinger_product_64bit.mk)
\ No newline at end of file
Index: vendor/branch/5058A_Claro/device/ausshine/aus6739_66_n1/system.prop
===================================================================
--- vendor/branch/5058A_Claro/device/ausshine/aus6739_66_n1/system.prop	(revision 3017)
+++ vendor/branch/5058A_Claro/device/ausshine/aus6739_66_n1/system.prop	(revision 3018)
@@ -1,98 +0,0 @@
-#
-# system.prop for generic sdk
-#
-
-rild.libpath=mtk-ril.so
-rild.libargs=-d /dev/ttyC0
-
-
-# MTK, Infinity, 20090720 {
-wifi.interface=wlan0
-# MTK, Infinity, 20090720 }
-
-# MTK, mtk03034, 20101210 {
-ro.mediatek.wlan.wsc=1
-# MTK, mtk03034 20101210}
-# MTK, mtk03034, 20110318 {
-ro.mediatek.wlan.p2p=1
-# MTK, mtk03034 20110318}
-
-# MTK, mtk03034, 20101213 {
-mediatek.wlan.ctia=0
-# MTK, mtk03034 20101213}
-
-
-#
-wifi.tethering.interface=ap0
-#
-
-ro.opengles.version=196610
-# ro.kernel.qemu=1
-# ro.kernel.qemu.gles=0
-
-wifi.direct.interface=p2p0
-#dalvik.vm.heapgrowthlimit=256m
-#dalvik.vm.heapsize=512m
-
-# USB MTP WHQL
-ro.sys.usb.mtp.whql.enable=0
-
-# Power off opt in IPO
-sys.ipo.pwrdncap=2
-
-ro.sys.usb.storage.type=mtp
-
-# USB BICR function
-ro.sys.usb.bicr=no
-
-# USB Charge only function
-ro.sys.usb.charging.only=yes
-
-# audio
-ro.camera.sound.forced=0
-ro.audio.silent=0
-
-ro.zygote.preload.enable=0
-
-# temporary enables NAV bar (soft keys)
-qemu.hw.mainkeys=0
-
-ro.kernel.zio=38,108,105,16
-#ro.kernel.qemu=1
-#ro.kernel.qemu.gles=0
-#ro.boot.selinux=disable
-
-# Disable dirty region for Mali
-#debug.hwui.render_dirty_regions=false
-
-ro.sf.lcd_density=320
-
-# performance
-ro.mtk_perf_simple_start_win=1
-ro.mtk_perf_fast_start_win=1
-ro.mtk_perf_response_time=1
-
-# disable ipo for development
-sys.ipo.disable=1
-
-# shutdown audio
-ro.operator.optr=CUST
-# shutdown animation
-persist.operator.optr=CUST
-
-ro.customer.commercial.name=5058A
-ro.product.hardware.id=Proto
-ro.tct.curef.default=5058A-2*TGMX1
-ro.def.software.version=SP_ALCATEL_A3A-PLUS_1.0
-ro.def.svn.version=022 01
-ro.def.hardware.version=PIO
-ro.mtk_default_ime=com.android.inputmethod.latin
-ro.business.name=A3A PLUS
-ro.business.name.email=Alcatel A3A PLUS
-ro.mtk_gemini_support = 0
-
-persist.sys.timezone = America/Santiago
-
-ro.com.google.clientidbase = android-alcatel
-ro.com.google.clientidbase.am = android-alcatel
-ro.com.google.clientidbase.ms = android-alcatel
Index: vendor/branch/5058A_Claro/frameworks/opt/telephone/src/java/android/telephony/SmsMessage.java
===================================================================
--- vendor/branch/5058A_Claro/frameworks/opt/telephone/src/java/android/telephony/SmsMessage.java	(revision 3017)
+++ vendor/branch/5058A_Claro/frameworks/opt/telephone/src/java/android/telephony/SmsMessage.java	(revision 3018)
@@ -1,1385 +0,0 @@
-/*
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package android.telephony;
-
-import android.os.Binder;
-import android.os.Parcel;
-import android.content.res.Resources;
-import android.text.TextUtils;
-
-import com.android.internal.telephony.GsmAlphabet;
-import com.android.internal.telephony.GsmAlphabet.TextEncodingDetails;
-import com.android.internal.telephony.SmsConstants;
-import com.android.internal.telephony.SmsMessageBase;
-import com.android.internal.telephony.SmsMessageBase.SubmitPduBase;
-import com.android.internal.telephony.Sms7BitEncodingTranslator;
-
-import java.lang.Math;
-import java.util.ArrayList;
-import java.util.Arrays;
-
-import static android.telephony.TelephonyManager.PHONE_TYPE_CDMA;
-
-// MTK-START
-import com.android.internal.telephony.SmsHeader;
-// MTK-END
-
-/**
- * A Short Message Service message.
- * @see android.provider.Telephony.Sms.Intents#getMessagesFromIntent
- */
-public class SmsMessage {
-    private static final String LOG_TAG = "SmsMessage";
-
-    /**
-     * SMS Class enumeration.
-     * See TS 23.038.
-     *
-     */
-    public enum MessageClass{
-        UNKNOWN, CLASS_0, CLASS_1, CLASS_2, CLASS_3;
-    }
-
-    /** User data text encoding code unit size */
-    public static final int ENCODING_UNKNOWN = 0;
-    public static final int ENCODING_7BIT = 1;
-    public static final int ENCODING_8BIT = 2;
-    public static final int ENCODING_16BIT = 3;
-    /**
-     * @hide This value is not defined in global standard. Only in Korea, this is used.
-     */
-    public static final int ENCODING_KSC5601 = 4;
-
-    // MTK-START
-    /*
-     * Detail description:
-     * Constants for message waiting indication type
-     */
-    /** Message Waiting Indication
-     *  @hide
-     */
-    public static final int MWI_VOICEMAIL = 0;
-    /** Message Waiting Indication
-     *  @hide
-     */
-    public static final int MWI_FAX = 1;
-    /** Message Waiting Indication
-     *  @hide
-     */
-    public static final int MWI_EMAIL = 2;
-    /** Message Waiting Indication
-     *  @hide
-     */
-    public static final int MWI_OTHER = 3;
-    /** Message Waiting Indication
-     *  @hide
-     */
-    public static final int MWI_VIDEO = 7;
-    // MTK-END
-
-    /** The maximum number of payload bytes per message */
-    public static final int MAX_USER_DATA_BYTES = 140;
-
-    /**
-     * The maximum number of payload bytes per message if a user data header
-     * is present.  This assumes the header only contains the
-     * CONCATENATED_8_BIT_REFERENCE element.
-     */
-    public static final int MAX_USER_DATA_BYTES_WITH_HEADER = 134;
-
-    /** The maximum number of payload septets per message */
-    public static final int MAX_USER_DATA_SEPTETS = 160;
-
-    /**
-     * The maximum number of payload septets per message if a user data header
-     * is present.  This assumes the header only contains the
-     * CONCATENATED_8_BIT_REFERENCE element.
-     */
-    public static final int MAX_USER_DATA_SEPTETS_WITH_HEADER = 153;
-
-    /**
-     * Indicates a 3GPP format SMS message.
-     * @hide pending API council approval
-     */
-    public static final String FORMAT_3GPP = "3gpp";
-
-    /**
-     * Indicates a 3GPP2 format SMS message.
-     * @hide pending API council approval
-     */
-    public static final String FORMAT_3GPP2 = "3gpp2";
-
-    /** Contains actual SmsMessage. Only public for debugging and for framework layer.
-     *
-     * @hide
-     */
-    public SmsMessageBase mWrappedSmsMessage;
-
-    /** Indicates the subId
-     *
-     * @hide
-     */
-    private int mSubId = 0;
-
-    /** set Subscription information
-     *
-     * @hide
-     */
-    public void setSubId(int subId) {
-        mSubId = subId;
-    }
-
-    /** get Subscription information
-     *
-     * @hide
-     */
-    public int getSubId() {
-        return mSubId;
-    }
-
-    public static class SubmitPdu {
-
-        public byte[] encodedScAddress; // Null if not applicable.
-        public byte[] encodedMessage;
-
-        @Override
-        public String toString() {
-            return "SubmitPdu: encodedScAddress = "
-                    + Arrays.toString(encodedScAddress)
-                    + ", encodedMessage = "
-                    + Arrays.toString(encodedMessage);
-        }
-
-        /**
-         * @hide
-         */
-        protected SubmitPdu(SubmitPduBase spb) {
-            this.encodedMessage = spb.encodedMessage;
-            this.encodedScAddress = spb.encodedScAddress;
-        }
-
-    }
-
-    private SmsMessage(SmsMessageBase smb) {
-        mWrappedSmsMessage = smb;
-    }
-
-    /**
-     * Create an SmsMessage from a raw PDU. Guess format based on Voice
-     * technology first, if it fails use other format.
-     * All applications which handle
-     * incoming SMS messages by processing the {@code SMS_RECEIVED_ACTION} broadcast
-     * intent <b>must</b> now pass the new {@code format} String extra from the intent
-     * into the new method {@code createFromPdu(byte[], String)} which takes an
-     * extra format parameter. This is required in order to correctly decode the PDU on
-     * devices that require support for both 3GPP and 3GPP2 formats at the same time,
-     * such as dual-mode GSM/CDMA and CDMA/LTE phones.
-     * @deprecated Use {@link #createFromPdu(byte[], String)} instead.
-     */
-    @Deprecated
-    public static SmsMessage createFromPdu(byte[] pdu) {
-         SmsMessage message = null;
-
-        // cdma(3gpp2) vs gsm(3gpp) format info was not given,
-        // guess from active voice phone type
-        int activePhone = TelephonyManager.getDefault().getCurrentPhoneType();
-        String format = (PHONE_TYPE_CDMA == activePhone) ?
-                SmsConstants.FORMAT_3GPP2 : SmsConstants.FORMAT_3GPP;
-        message = createFromPdu(pdu, format);
-
-        if (null == message || null == message.mWrappedSmsMessage) {
-            // decoding pdu failed based on activePhone type, must be other format
-            format = (PHONE_TYPE_CDMA == activePhone) ?
-                    SmsConstants.FORMAT_3GPP : SmsConstants.FORMAT_3GPP2;
-            message = createFromPdu(pdu, format);
-        }
-        return message;
-    }
-
-    /**
-     * Create an SmsMessage from a raw PDU with the specified message format. The
-     * message format is passed in the
-     * {@link android.provider.Telephony.Sms.Intents#SMS_RECEIVED_ACTION} as the {@code format}
-     * String extra, and will be either "3gpp" for GSM/UMTS/LTE messages in 3GPP format
-     * or "3gpp2" for CDMA/LTE messages in 3GPP2 format.
-     *
-     * @param pdu the message PDU from the
-     * {@link android.provider.Telephony.Sms.Intents#SMS_RECEIVED_ACTION} intent
-     * @param format the format extra from the
-     * {@link android.provider.Telephony.Sms.Intents#SMS_RECEIVED_ACTION} intent
-     */
-    public static SmsMessage createFromPdu(byte[] pdu, String format) {
-        SmsMessageBase wrappedMessage;
-
-        if (SmsConstants.FORMAT_3GPP2.equals(format)) {
-            wrappedMessage = com.android.internal.telephony.cdma.SmsMessage.createFromPdu(pdu);
-        } else if (SmsConstants.FORMAT_3GPP.equals(format)) {
-            wrappedMessage = com.android.internal.telephony.gsm.SmsMessage.createFromPdu(pdu);
-        } else {
-            Rlog.e(LOG_TAG, "createFromPdu(): unsupported message format " + format);
-            return null;
-        }
-
-        if (wrappedMessage != null) {
-            return new SmsMessage(wrappedMessage);
-        } else {
-            Rlog.e(LOG_TAG, "createFromPdu(): wrappedMessage is null");
-            return null;
-        }
-    }
-
-    /**
-     * TS 27.005 3.4.1 lines[0] and lines[1] are the two lines read from the
-     * +CMT unsolicited response (PDU mode, of course)
-     *  +CMT: [&lt;alpha>],<length><CR><LF><pdu>
-     *
-     * Only public for debugging and for RIL
-     *
-     * {@hide}
-     */
-    public static SmsMessage newFromCMT(String[] lines) {
-        // received SMS in 3GPP format
-        SmsMessageBase wrappedMessage =
-                com.android.internal.telephony.gsm.SmsMessage.newFromCMT(lines);
-
-        if (wrappedMessage != null) {
-            return new SmsMessage(wrappedMessage);
-        } else {
-            Rlog.e(LOG_TAG, "newFromCMT(): wrappedMessage is null");
-            return null;
-        }
-    }
-
-    /** @hide */
-    public static SmsMessage newFromParcel(Parcel p) {
-        // received SMS in 3GPP2 format
-        SmsMessageBase wrappedMessage =
-                com.android.internal.telephony.cdma.SmsMessage.newFromParcel(p);
-
-        return new SmsMessage(wrappedMessage);
-    }
-
-    /**
-     * Create an SmsMessage from an SMS EF record.
-     *
-     * @param index Index of SMS record. This should be index in ArrayList
-     *              returned by SmsManager.getAllMessagesFromSim + 1.
-     * @param data Record data.
-     * @return An SmsMessage representing the record.
-     *
-     * @hide
-     */
-    public static SmsMessage createFromEfRecord(int index, byte[] data) {
-        SmsMessageBase wrappedMessage;
-
-        if (isCdmaVoice()) {
-            wrappedMessage = com.android.internal.telephony.cdma.SmsMessage.createFromEfRecord(
-                    index, data);
-        } else {
-            wrappedMessage = com.android.internal.telephony.gsm.SmsMessage.createFromEfRecord(
-                    index, data);
-        }
-
-        if (wrappedMessage != null) {
-            return new SmsMessage(wrappedMessage);
-        } else {
-            Rlog.e(LOG_TAG, "createFromEfRecord(): wrappedMessage is null");
-            return null;
-        }
-    }
-
-    /**
-     * Get the TP-Layer-Length for the given SMS-SUBMIT PDU Basically, the
-     * length in bytes (not hex chars) less the SMSC header
-     *
-     * FIXME: This method is only used by a CTS test case that isn't run on CDMA devices.
-     * We should probably deprecate it and remove the obsolete test case.
-     */
-    public static int getTPLayerLengthForPDU(String pdu) {
-        if (isCdmaVoice()) {
-            return com.android.internal.telephony.cdma.SmsMessage.getTPLayerLengthForPDU(pdu);
-        } else {
-            return com.android.internal.telephony.gsm.SmsMessage.getTPLayerLengthForPDU(pdu);
-        }
-    }
-
-    /*
-     * TODO(cleanup): It would make some sense if the result of
-     * preprocessing a message to determine the proper encoding (i.e.
-     * the resulting data structure from calculateLength) could be
-     * passed as an argument to the actual final encoding function.
-     * This would better ensure that the logic behind size calculation
-     * actually matched the encoding.
-     */
-
-    /**
-     * Calculates the number of SMS's required to encode the message body and
-     * the number of characters remaining until the next message.
-     *
-     * @param msgBody the message to encode
-     * @param use7bitOnly if true, characters that are not part of the
-     *         radio-specific 7-bit encoding are counted as single
-     *         space chars.  If false, and if the messageBody contains
-     *         non-7-bit encodable characters, length is calculated
-     *         using a 16-bit encoding.
-     * @return an int[4] with int[0] being the number of SMS's
-     *         required, int[1] the number of code units used, and
-     *         int[2] is the number of code units remaining until the
-     *         next message. int[3] is an indicator of the encoding
-     *         code unit size (see the ENCODING_* definitions in SmsConstants)
-     */
-    public static int[] calculateLength(CharSequence msgBody, boolean use7bitOnly) {
-        // this function is for MO SMS
-        TextEncodingDetails ted = (useCdmaFormatForMoSms()) ?
-            com.android.internal.telephony.cdma.SmsMessage.calculateLength(msgBody, use7bitOnly,
-                    true) :
-            com.android.internal.telephony.gsm.SmsMessage.calculateLength(msgBody, use7bitOnly);
-        int ret[] = new int[4];
-        ret[0] = ted.msgCount;
-        ret[1] = ted.codeUnitCount;
-        ret[2] = ted.codeUnitsRemaining;
-        ret[3] = ted.codeUnitSize;
-        return ret;
-    }
-
-    /**
-     * Divide a message text into several fragments, none bigger than
-     * the maximum SMS message text size.
-     *
-     * @param text text, must not be null.
-     * @return an <code>ArrayList</code> of strings that, in order,
-     *   comprise the original msg text
-     *
-     * @hide
-     */
-    public static ArrayList<String> fragmentText(String text) {
-        // This function is for MO SMS
-        TextEncodingDetails ted = (useCdmaFormatForMoSms()) ?
-            com.android.internal.telephony.cdma.SmsMessage.calculateLength(text, false, true) :
-            com.android.internal.telephony.gsm.SmsMessage.calculateLength(text, false);
-
-        // TODO(cleanup): The code here could be rolled into the logic
-        // below cleanly if these MAX_* constants were defined more
-        // flexibly...
-
-        int limit;
-        if (ted.codeUnitSize == SmsConstants.ENCODING_7BIT) {
-            int udhLength;
-            if (ted.languageTable != 0 && ted.languageShiftTable != 0) {
-                udhLength = GsmAlphabet.UDH_SEPTET_COST_TWO_SHIFT_TABLES;
-            } else if (ted.languageTable != 0 || ted.languageShiftTable != 0) {
-                udhLength = GsmAlphabet.UDH_SEPTET_COST_ONE_SHIFT_TABLE;
-            } else {
-                udhLength = 0;
-            }
-
-            if (ted.msgCount > 1) {
-                udhLength += GsmAlphabet.UDH_SEPTET_COST_CONCATENATED_MESSAGE;
-            }
-
-            if (udhLength != 0) {
-                udhLength += GsmAlphabet.UDH_SEPTET_COST_LENGTH;
-            }
-
-            limit = SmsConstants.MAX_USER_DATA_SEPTETS - udhLength;
-        } else {
-            if (ted.msgCount > 1) {
-                limit = SmsConstants.MAX_USER_DATA_BYTES_WITH_HEADER;
-                // If EMS is not supported, break down EMS into single segment SMS
-                // and add page info " x/y".
-                // In the case of UCS2 encoding, we need 8 bytes for this,
-                // but we only have 6 bytes from UDH, so truncate the limit for
-                // each segment by 2 bytes (1 char).
-                // Make sure total number of segments is less than 10.
-                if (!hasEmsSupport() && ted.msgCount < 10) {
-                    limit -= 2;
-                }
-            } else {
-                limit = SmsConstants.MAX_USER_DATA_BYTES;
-            }
-        }
-
-        String newMsgBody = null;
-        Resources r = Resources.getSystem();
-        if (r.getBoolean(com.android.internal.R.bool.config_sms_force_7bit_encoding)) {
-            newMsgBody  = Sms7BitEncodingTranslator.translate(text);
-        }
-        if (TextUtils.isEmpty(newMsgBody)) {
-            newMsgBody = text;
-        }
-        int pos = 0;  // Index in code units.
-        int textLen = newMsgBody.length();
-        ArrayList<String> result = new ArrayList<String>(ted.msgCount);
-        while (pos < textLen) {
-            int nextPos = 0;  // Counts code units.
-            if (ted.codeUnitSize == SmsConstants.ENCODING_7BIT) {
-                if (useCdmaFormatForMoSms() && ted.msgCount == 1) {
-                    // For a singleton CDMA message, the encoding must be ASCII...
-                    nextPos = pos + Math.min(limit, textLen - pos);
-                } else {
-                    // For multi-segment messages, CDMA 7bit equals GSM 7bit encoding (EMS mode).
-                    nextPos = GsmAlphabet.findGsmSeptetLimitIndex(newMsgBody, pos, limit,
-                            ted.languageTable, ted.languageShiftTable);
-                }
-            } else {  // Assume unicode.
-                nextPos = SmsMessageBase.findNextUnicodePosition(pos, limit, newMsgBody);
-            }
-            if ((nextPos <= pos) || (nextPos > textLen)) {
-                Rlog.e(LOG_TAG, "fragmentText failed (" + pos + " >= " + nextPos + " or " +
-                          nextPos + " >= " + textLen + ")");
-                break;
-            }
-            result.add(newMsgBody.substring(pos, nextPos));
-            pos = nextPos;
-        }
-        return result;
-    }
-
-    /**
-     * Calculates the number of SMS's required to encode the message body and
-     * the number of characters remaining until the next message, given the
-     * current encoding.
-     *
-     * @param messageBody the message to encode
-     * @param use7bitOnly if true, characters that are not part of the radio
-     *         specific (GSM / CDMA) alphabet encoding are converted to as a
-     *         single space characters. If false, a messageBody containing
-     *         non-GSM or non-CDMA alphabet characters are encoded using
-     *         16-bit encoding.
-     * @return an int[4] with int[0] being the number of SMS's required, int[1]
-     *         the number of code units used, and int[2] is the number of code
-     *         units remaining until the next message. int[3] is the encoding
-     *         type that should be used for the message.
-     */
-    public static int[] calculateLength(String messageBody, boolean use7bitOnly) {
-        return calculateLength((CharSequence)messageBody, use7bitOnly);
-    }
-
-    /*
-     * TODO(cleanup): It looks like there is now no useful reason why
-     * apps should generate pdus themselves using these routines,
-     * instead of handing the raw data to SMSDispatcher (and thereby
-     * have the phone process do the encoding).  Moreover, CDMA now
-     * has shared state (in the form of the msgId system property)
-     * which can only be modified by the phone process, and hence
-     * makes the output of these routines incorrect.  Since they now
-     * serve no purpose, they should probably just return null
-     * directly, and be deprecated.  Going further in that direction,
-     * the above parsers of serialized pdu data should probably also
-     * be gotten rid of, hiding all but the necessarily visible
-     * structured data from client apps.  A possible concern with
-     * doing this is that apps may be using these routines to generate
-     * pdus that are then sent elsewhere, some network server, for
-     * example, and that always returning null would thereby break
-     * otherwise useful apps.
-     */
-
-    /**
-     * Get an SMS-SUBMIT PDU for a destination address and a message.
-     * This method will not attempt to use any GSM national language 7 bit encodings.
-     *
-     * @param scAddress Service Centre address.  Null means use default.
-     * @return a <code>SubmitPdu</code> containing the encoded SC
-     *         address, if applicable, and the encoded message.
-     *         Returns null on encode error.
-     */
-    public static SubmitPdu getSubmitPdu(String scAddress,
-            String destinationAddress, String message, boolean statusReportRequested) {
-        SubmitPduBase spb;
-
-        if (useCdmaFormatForMoSms()) {
-            spb = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu(scAddress,
-                    destinationAddress, message, statusReportRequested, null);
-        } else {
-            spb = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress,
-                    destinationAddress, message, statusReportRequested);
-        }
-
-        return new SubmitPdu(spb);
-    }
-
-    /**
-     * Get an SMS-SUBMIT PDU for a data message to a destination address &amp; port.
-     * This method will not attempt to use any GSM national language 7 bit encodings.
-     *
-     * @param scAddress Service Centre address. null == use default
-     * @param destinationAddress the address of the destination for the message
-     * @param destinationPort the port to deliver the message to at the
-     *        destination
-     * @param data the data for the message
-     * @return a <code>SubmitPdu</code> containing the encoded SC
-     *         address, if applicable, and the encoded message.
-     *         Returns null on encode error.
-     */
-    public static SubmitPdu getSubmitPdu(String scAddress,
-            String destinationAddress, short destinationPort, byte[] data,
-            boolean statusReportRequested) {
-        SubmitPduBase spb;
-
-        if (useCdmaFormatForMoSms()) {
-            spb = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu(scAddress,
-                    destinationAddress, destinationPort, data, statusReportRequested);
-        } else {
-            spb = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress,
-                    destinationAddress, destinationPort, data, statusReportRequested);
-        }
-
-        return new SubmitPdu(spb);
-    }
-
-    /**
-     * Returns the address of the SMS service center that relayed this message
-     * or null if there is none.
-     */
-    public String getServiceCenterAddress() {
-        return mWrappedSmsMessage.getServiceCenterAddress();
-    }
-
-    /**
-     * Returns the originating address (sender) of this SMS message in String
-     * form or null if unavailable
-     */
-    public String getOriginatingAddress() {
-        return mWrappedSmsMessage.getOriginatingAddress();
-    }
-
-    /**
-     * Returns the originating address, or email from address if this message
-     * was from an email gateway. Returns null if originating address
-     * unavailable.
-     */
-    public String getDisplayOriginatingAddress() {
-        return mWrappedSmsMessage.getDisplayOriginatingAddress();
-    }
-
-    /**
-     * Returns the message body as a String, if it exists and is text based.
-     * @return message body is there is one, otherwise null
-     */
-    public String getMessageBody() {
-        return mWrappedSmsMessage.getMessageBody();
-    }
-
-    /**
-     * Returns the class of this message.
-     */
-    public MessageClass getMessageClass() {
-        switch(mWrappedSmsMessage.getMessageClass()) {
-            case CLASS_0: return MessageClass.CLASS_0;
-            case CLASS_1: return MessageClass.CLASS_1;
-            case CLASS_2: return MessageClass.CLASS_2;
-            case CLASS_3: return MessageClass.CLASS_3;
-            default: return MessageClass.UNKNOWN;
-
-        }
-    }
-
-    /**
-     * Returns the message body, or email message body if this message was from
-     * an email gateway. Returns null if message body unavailable.
-     */
-    public String getDisplayMessageBody() {
-        return mWrappedSmsMessage.getDisplayMessageBody();
-    }
-
-    /**
-     * Unofficial convention of a subject line enclosed in parens empty string
-     * if not present
-     */
-    public String getPseudoSubject() {
-        return mWrappedSmsMessage.getPseudoSubject();
-    }
-
-    /**
-     * Returns the service centre timestamp in currentTimeMillis() format
-     */
-    public long getTimestampMillis() {
-        return mWrappedSmsMessage.getTimestampMillis();
-    }
-
-    /**
-     * Returns true if message is an email.
-     *
-     * @return true if this message came through an email gateway and email
-     *         sender / subject / parsed body are available
-     */
-    public boolean isEmail() {
-        return mWrappedSmsMessage.isEmail();
-    }
-
-     /**
-     * @return if isEmail() is true, body of the email sent through the gateway.
-     *         null otherwise
-     */
-    public String getEmailBody() {
-        return mWrappedSmsMessage.getEmailBody();
-    }
-
-    /**
-     * @return if isEmail() is true, email from address of email sent through
-     *         the gateway. null otherwise
-     */
-    public String getEmailFrom() {
-        return mWrappedSmsMessage.getEmailFrom();
-    }
-
-    /**
-     * Get protocol identifier.
-     */
-    public int getProtocolIdentifier() {
-        return mWrappedSmsMessage.getProtocolIdentifier();
-    }
-
-    /**
-     * See TS 23.040 9.2.3.9 returns true if this is a "replace short message"
-     * SMS
-     */
-    public boolean isReplace() {
-        return mWrappedSmsMessage.isReplace();
-    }
-
-    /**
-     * Returns true for CPHS MWI toggle message.
-     *
-     * @return true if this is a CPHS MWI toggle message See CPHS 4.2 section
-     *         B.4.2
-     */
-    public boolean isCphsMwiMessage() {
-        return mWrappedSmsMessage.isCphsMwiMessage();
-    }
-
-    /**
-     * returns true if this message is a CPHS voicemail / message waiting
-     * indicator (MWI) clear message
-     */
-    public boolean isMWIClearMessage() {
-        return mWrappedSmsMessage.isMWIClearMessage();
-    }
-
-    /**
-     * returns true if this message is a CPHS voicemail / message waiting
-     * indicator (MWI) set message
-     */
-    public boolean isMWISetMessage() {
-        return mWrappedSmsMessage.isMWISetMessage();
-    }
-
-    /**
-     * returns true if this message is a "Message Waiting Indication Group:
-     * Discard Message" notification and should not be stored.
-     */
-    public boolean isMwiDontStore() {
-        return mWrappedSmsMessage.isMwiDontStore();
-    }
-
-    /**
-     * returns the user data section minus the user data header if one was
-     * present.
-     */
-    public byte[] getUserData() {
-        return mWrappedSmsMessage.getUserData();
-    }
-
-    /**
-     * Returns the raw PDU for the message.
-     *
-     * @return the raw PDU for the message.
-     */
-    public byte[] getPdu() {
-        return mWrappedSmsMessage.getPdu();
-    }
-
-    /**
-     * Returns the status of the message on the SIM (read, unread, sent, unsent).
-     *
-     * @return the status of the message on the SIM.  These are:
-     *         SmsManager.STATUS_ON_SIM_FREE
-     *         SmsManager.STATUS_ON_SIM_READ
-     *         SmsManager.STATUS_ON_SIM_UNREAD
-     *         SmsManager.STATUS_ON_SIM_SEND
-     *         SmsManager.STATUS_ON_SIM_UNSENT
-     * @deprecated Use getStatusOnIcc instead.
-     */
-    @Deprecated public int getStatusOnSim() {
-        return mWrappedSmsMessage.getStatusOnIcc();
-    }
-
-    /**
-     * Returns the status of the message on the ICC (read, unread, sent, unsent).
-     *
-     * @return the status of the message on the ICC.  These are:
-     *         SmsManager.STATUS_ON_ICC_FREE
-     *         SmsManager.STATUS_ON_ICC_READ
-     *         SmsManager.STATUS_ON_ICC_UNREAD
-     *         SmsManager.STATUS_ON_ICC_SEND
-     *         SmsManager.STATUS_ON_ICC_UNSENT
-     */
-    public int getStatusOnIcc() {
-        return mWrappedSmsMessage.getStatusOnIcc();
-    }
-
-    /**
-     * Returns the record index of the message on the SIM (1-based index).
-     * @return the record index of the message on the SIM, or -1 if this
-     *         SmsMessage was not created from a SIM SMS EF record.
-     * @deprecated Use getIndexOnIcc instead.
-     */
-    @Deprecated public int getIndexOnSim() {
-        return mWrappedSmsMessage.getIndexOnIcc();
-    }
-
-    /**
-     * Returns the record index of the message on the ICC (1-based index).
-     * @return the record index of the message on the ICC, or -1 if this
-     *         SmsMessage was not created from a ICC SMS EF record.
-     */
-    public int getIndexOnIcc() {
-        return mWrappedSmsMessage.getIndexOnIcc();
-    }
-
-    /**
-     * GSM:
-     * For an SMS-STATUS-REPORT message, this returns the status field from
-     * the status report.  This field indicates the status of a previously
-     * submitted SMS, if requested.  See TS 23.040, 9.2.3.15 TP-Status for a
-     * description of values.
-     * CDMA:
-     * For not interfering with status codes from GSM, the value is
-     * shifted to the bits 31-16.
-     * The value is composed of an error class (bits 25-24) and a status code (bits 23-16).
-     * Possible codes are described in C.S0015-B, v2.0, 4.5.21.
-     *
-     * @return 0 indicates the previously sent message was received.
-     *         See TS 23.040, 9.9.2.3.15 and C.S0015-B, v2.0, 4.5.21
-     *         for a description of other possible values.
-     */
-    public int getStatus() {
-        return mWrappedSmsMessage.getStatus();
-    }
-
-    /**
-     * Return true iff the message is a SMS-STATUS-REPORT message.
-     */
-    public boolean isStatusReportMessage() {
-        return mWrappedSmsMessage.isStatusReportMessage();
-    }
-
-    /**
-     * Returns true iff the <code>TP-Reply-Path</code> bit is set in
-     * this message.
-     */
-    public boolean isReplyPathPresent() {
-        return mWrappedSmsMessage.isReplyPathPresent();
-    }
-
-    /**
-     * Determines whether or not to use CDMA format for MO SMS.
-     * If SMS over IMS is supported, then format is based on IMS SMS format,
-     * otherwise format is based on current phone type.
-     *
-     * @return true if Cdma format should be used for MO SMS, false otherwise.
-     */
-    private static boolean useCdmaFormatForMoSms() {
-        if (!SmsManager.getDefault().isImsSmsSupported()) {
-            // use Voice technology to determine SMS format.
-            return isCdmaVoice();
-        }
-        // IMS is registered with SMS support, check the SMS format supported
-        return (SmsConstants.FORMAT_3GPP2.equals(SmsManager.getDefault().getImsSmsFormat()));
-    }
-
-    /**
-     * Determines whether or not to current phone type is cdma.
-     *
-     * @return true if current phone type is cdma, false otherwise.
-     */
-    private static boolean isCdmaVoice() {
-        int activePhone = TelephonyManager.getDefault().getCurrentPhoneType();
-        return (PHONE_TYPE_CDMA == activePhone);
-    }
-
-    /**
-     * Decide if the carrier supports long SMS.
-     * {@hide}
-     */
-    public static boolean hasEmsSupport() {
-        if (!isNoEmsSupportConfigListExisted()) {
-            return true;
-        }
-
-        String simOperator;
-        String gid;
-        final long identity = Binder.clearCallingIdentity();
-        try {
-            simOperator = TelephonyManager.getDefault().getSimOperatorNumeric();
-            gid = TelephonyManager.getDefault().getGroupIdLevel1();
-        } finally {
-            Binder.restoreCallingIdentity(identity);
-        }
-
-        if (!TextUtils.isEmpty(simOperator)) {
-            for (NoEmsSupportConfig currentConfig : mNoEmsSupportConfigList) {
-                if (simOperator.startsWith(currentConfig.mOperatorNumber) &&
-                        (TextUtils.isEmpty(currentConfig.mGid1) ||
-                                (!TextUtils.isEmpty(currentConfig.mGid1) &&
-                                        currentConfig.mGid1.equalsIgnoreCase(gid)))) {
-                    return false;
-                }
-            }
-        }
-        return true;
-    }
-
-    /**
-     * Check where to add " x/y" in each SMS segment, begin or end.
-     * {@hide}
-     */
-    public static boolean shouldAppendPageNumberAsPrefix() {
-        if (!isNoEmsSupportConfigListExisted()) {
-            return false;
-        }
-
-        String simOperator;
-        String gid;
-        final long identity = Binder.clearCallingIdentity();
-        try {
-            simOperator = TelephonyManager.getDefault().getSimOperatorNumeric();
-            gid = TelephonyManager.getDefault().getGroupIdLevel1();
-        } finally {
-            Binder.restoreCallingIdentity(identity);
-        }
-
-        for (NoEmsSupportConfig currentConfig : mNoEmsSupportConfigList) {
-            if (simOperator.startsWith(currentConfig.mOperatorNumber) &&
-                (TextUtils.isEmpty(currentConfig.mGid1) ||
-                (!TextUtils.isEmpty(currentConfig.mGid1)
-                && currentConfig.mGid1.equalsIgnoreCase(gid)))) {
-                return currentConfig.mIsPrefix;
-            }
-        }
-        return false;
-    }
-
-    private static class NoEmsSupportConfig {
-        String mOperatorNumber;
-        String mGid1;
-        boolean mIsPrefix;
-
-        public NoEmsSupportConfig(String[] config) {
-            mOperatorNumber = config[0];
-            mIsPrefix = "prefix".equals(config[1]);
-            mGid1 = config.length > 2 ? config[2] : null;
-        }
-
-        @Override
-        public String toString() {
-            return "NoEmsSupportConfig { mOperatorNumber = " + mOperatorNumber
-                    + ", mIsPrefix = " + mIsPrefix + ", mGid1 = " + mGid1 + " }";
-        }
-    }
-
-    private static NoEmsSupportConfig[] mNoEmsSupportConfigList = null;
-    private static boolean mIsNoEmsSupportConfigListLoaded = false;
-
-    private static boolean isNoEmsSupportConfigListExisted() {
-        if (!mIsNoEmsSupportConfigListLoaded) {
-            Resources r = Resources.getSystem();
-            if (r != null) {
-                String[] listArray = r.getStringArray(
-                        com.android.internal.R.array.no_ems_support_sim_operators);
-                if ((listArray != null) && (listArray.length > 0)) {
-                    mNoEmsSupportConfigList = new NoEmsSupportConfig[listArray.length];
-                    for (int i=0; i<listArray.length; i++) {
-                        mNoEmsSupportConfigList[i] = new NoEmsSupportConfig(listArray[i].split(";"));
-                    }
-                }
-                mIsNoEmsSupportConfigListLoaded = true;
-            }
-        }
-
-        if (mNoEmsSupportConfigList != null && mNoEmsSupportConfigList.length != 0) {
-            return true;
-        }
-
-        return false;
-    }
-
-    // MTK-START
-    /** This method returns the reference to a specific
-     *  SmsMessage object, which is used for accessing its static methods.
-     * @return Specific SmsMessage.
-     *
-     * @hide
-     */
-    private static final SmsMessageBase getSmsFacility() {
-        if (isCdmaVoice()) {
-            return new com.android.internal.telephony.cdma.SmsMessage();
-        } else {
-            return new com.android.internal.telephony.gsm.SmsMessage();
-        }
-    }
-
-    /**
-     * Constructor
-     *
-     * @hide
-     */
-    public SmsMessage() {
-        this(getSmsFacility());
-    }
-
-    /** @hide */
-    public static SmsMessage newFromCDS(String line) {
-        // received SMS delivery report in 3GPP format
-        SmsMessageBase wrappedMessage =
-                com.android.internal.telephony.gsm.SmsMessage.newFromCDS(line);
-
-        return new SmsMessage(wrappedMessage);
-    }
-
-    /**
-     * Get an SMS-SUBMIT PDU for a destination address and a message
-     *
-     * @param scAddress Service Centre address.  Null means use default.
-     * @return a <code>SubmitPdu</code> containing the encoded SC
-     *         address, if applicable, and the encoded message.
-     *         Returns null on encode error.
-     * @hide
-     */
-    public static SubmitPdu getSubmitPdu(String scAddress,
-            String destinationAddress, String message,
-            boolean statusReportRequested, byte[] header) {
-        SubmitPduBase spb;
-        if (useCdmaFormatForMoSms()) {
-            spb = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu(scAddress,
-                    destinationAddress, message, statusReportRequested,
-                    SmsHeader.fromByteArray(header));
-        } else {
-            spb = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress,
-                    destinationAddress, message, statusReportRequested, header);
-        }
-
-        return new SubmitPdu(spb);
-    }
-
-    /**
-     * Get an SMS-SUBMIT PDU for a data message to a destination address with original port
-     *
-     * @param scAddress Service Centre address. null == use default
-     * @param destinationAddress the address of the destination for the message
-     * @param destinationPort the port to deliver the message to at the
-     *        destination
-     * @param originalPort the port to deliver the message from
-     * @param data the data for the message
-     * @return a <code>SubmitPdu</code> containing the encoded SC
-     *         address, if applicable, and the encoded message.
-     *         Returns null on encode error.
-     *
-     * @hide
-     */
-    public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress,
-                short destinationPort, short originalPort, byte[] data,
-                boolean statusReportRequested) {
-        Rlog.d(LOG_TAG, "[xj android.telephony.SmsMessage getSubmitPdu");
-        SubmitPduBase spb;
-        if (useCdmaFormatForMoSms()) {
-            spb = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu(scAddress,
-                    destinationAddress, destinationPort, data, statusReportRequested);
-        } else {
-            spb = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddress,
-                    destinationAddress, destinationPort, originalPort, data, statusReportRequested);
-        }
-
-        if (spb != null) {
-            return new SubmitPdu(spb);
-        }
-        return null;
-    }
-
-    /**
-     * @return the destination address (receiver) of this SMS message in String
-     * form or null if unavailable
-     *
-     * @hide
-     * @internal
-     */
-    public String getDestinationAddress() {
-        return mWrappedSmsMessage.getDestinationAddress();
-    }
-
-    /**
-     * Return the user data header (UDH).
-     *
-     * @hide
-     * @internal
-     */
-    public SmsHeader getUserDataHeader() {
-        return mWrappedSmsMessage.getUserDataHeader();
-    }
-
-    /**
-     * Returns the smsc raw data from the pdu
-     *
-     * @return the raw smsc for the message.
-     *
-     * @hide
-     * @internal
-     */
-    public byte[] getSmsc() {
-        Rlog.d(LOG_TAG, "getSmsc");
-        byte[] pdu = this.getPdu();
-
-        if (isCdma()) {
-            Rlog.d(LOG_TAG, "getSmsc with CDMA and return null");
-            return null;
-        }
-
-        if (pdu == null) {
-            Rlog.d(LOG_TAG, "pdu is null");
-            return null;
-        }
-
-        int smscLen = (pdu[0] & 0xff) + 1;
-        byte[] smsc = new byte[smscLen];
-
-        try {
-            System.arraycopy(pdu, 0, smsc, 0, smsc.length);
-            return smsc;
-        } catch (ArrayIndexOutOfBoundsException e) {
-            Rlog.e(LOG_TAG, "Out of boudns");
-            return null;
-        }
-    }
-
-    /**
-     * Returns the tpdu from the pdu
-     *
-     * @return the tpdu for the message.
-     *
-     * @hide
-     * @internal
-     */
-    public byte[] getTpdu() {
-        Rlog.d(LOG_TAG, "getTpdu");
-        byte[] pdu = this.getPdu();
-
-        if (isCdma()) {
-            Rlog.d(LOG_TAG, "getSmsc with CDMA and return null");
-            return pdu;
-        }
-
-        if (pdu == null) {
-            Rlog.d(LOG_TAG, "pdu is null");
-            return null;
-        }
-
-        int smscLen = (pdu[0] & 0xff) + 1;
-        int tpduLen = pdu.length - smscLen;
-        byte[] tpdu = new byte[tpduLen];
-
-        try {
-            System.arraycopy(pdu, smscLen, tpdu, 0, tpdu.length);
-            return tpdu;
-        } catch (ArrayIndexOutOfBoundsException e) {
-            Rlog.e(LOG_TAG, "Out of boudns");
-            return null;
-        }
-    }
-
-    /**
-     * Calculates the number of SMS's required to encode the message body and
-     * the number of characters remaining until the next message.
-     *
-     * @param msgBody the message to encode
-     * @param use7bitOnly if true, characters that are not part of the
-     *         radio-specific 7-bit encoding are counted as single
-     *         space chars.  If false, and if the messageBody contains
-     *         non-7-bit encodable characters, length is calculated
-     *         using a 16-bit encoding.
-     * @param encodingType text encoding type(7-bit, 16-bit or automatic)
-     * @return an int[4] with int[0] being the number of SMS's
-     *         required, int[1] the number of code units used, and
-     *         int[2] is the number of code units remaining until the
-     *         next message. int[3] is an indicator of the encoding
-     *         code unit size (see the ENCODING_* definitions in this
-     *         class).
-     * @hide
-     * @internal
-     */
-    public static int[] calculateLength(CharSequence msgBody, boolean use7bitOnly,
-            int encodingType) {
-        TextEncodingDetails ted = (useCdmaFormatForMoSms()) ?
-                com.android.internal.telephony.cdma.SmsMessage.calculateLength(
-                msgBody, use7bitOnly, encodingType) :
-                com.android.internal.telephony.gsm.SmsMessage.calculateLength(
-                msgBody, use7bitOnly, encodingType);
-        int ret[] = new int[4];
-        ret[0] = ted.msgCount;
-        ret[1] = ted.codeUnitCount;
-        ret[2] = ted.codeUnitsRemaining;
-        ret[3] = ted.codeUnitSize;
-        return ret;
-    }
-
-    /**
-     * Divide a message text into several fragments, none bigger than
-     * the maximum SMS message text size.
-     *
-     * @param text text, must not be null.
-     * @param encodingType text encoding type(7-bit, 16-bit or automatic)
-     * @return an <code>ArrayList</code> of strings that, in order,
-     *   comprise the original msg text
-     *
-     * @hide
-     */
-    public static ArrayList<String> fragmentText(String text, int encodingType) {    	
-    	if(encodingType== SmsConstants.ENCODING_7BIT){
-            Rlog.e(LOG_TAG, "fragmentText force to use 7bit encoding");
-            text = Sms7BitEncodingTranslator.translate(text);
-    	}
-        int activePhone = TelephonyManager.getDefault().getPhoneType();
-        TextEncodingDetails ted = (useCdmaFormatForMoSms()) ?
-                com.android.internal.telephony.cdma.SmsMessage.calculateLength(
-                text, false, encodingType) :
-                com.android.internal.telephony.gsm.SmsMessage.calculateLength(
-                text, false, encodingType);
-
-        // TODO(cleanup): The code here could be rolled into the logic
-        // below cleanly if these MAX_* constants were defined more
-        // flexibly...
-
-        int limit;
-        if (ted.codeUnitSize == SmsConstants.ENCODING_7BIT) {
-            int udhLength;
-            if (ted.languageTable != 0 && ted.languageShiftTable != 0) {
-                udhLength = GsmAlphabet.UDH_SEPTET_COST_TWO_SHIFT_TABLES;
-            } else if (ted.languageTable != 0 || ted.languageShiftTable != 0) {
-                udhLength = GsmAlphabet.UDH_SEPTET_COST_ONE_SHIFT_TABLE;
-            } else {
-                udhLength = 0;
-            }
-
-            if (ted.msgCount > 1) {
-                udhLength += GsmAlphabet.UDH_SEPTET_COST_CONCATENATED_MESSAGE;
-            }
-
-            if (udhLength != 0) {
-                udhLength += GsmAlphabet.UDH_SEPTET_COST_LENGTH;
-            }
-
-            limit = SmsConstants.MAX_USER_DATA_SEPTETS - udhLength;
-        } else {
-            if (ted.msgCount > 1) {
-                limit = SmsConstants.MAX_USER_DATA_BYTES_WITH_HEADER;
-                // If EMS is not supported, break down EMS into single segment SMS
-                // and add page info " x/y".
-                // In the case of UCS2 encoding, we need 8 bytes for this,
-                // but we only have 6 bytes from UDH, so truncate the limit for
-                // each segment by 2 bytes (1 char).
-                // Make sure total number of segments is less than 10.
-                if (!hasEmsSupport() && ted.msgCount < 10) {
-                    limit -= 2;
-                }
-            } else {
-                limit = SmsConstants.MAX_USER_DATA_BYTES;
-            }
-        }
-
-        String newMsgBody = null;
-        Resources r = Resources.getSystem();
-        if (r.getBoolean(com.android.internal.R.bool.config_sms_force_7bit_encoding)) {
-            newMsgBody  = Sms7BitEncodingTranslator.translate(text);
-        }
-        if (TextUtils.isEmpty(newMsgBody)) {
-            newMsgBody = text;
-        }
-        int pos = 0;  // Index in code units.
-        int textLen = newMsgBody.length();
-        ArrayList<String> result = new ArrayList<String>(ted.msgCount);
-        while (pos < textLen) {
-            int nextPos = 0;  // Counts code units.
-            if (ted.codeUnitSize == SmsConstants.ENCODING_7BIT) {
-                if (useCdmaFormatForMoSms() && ted.msgCount == 1) {
-                    // For a singleton CDMA message, the encoding must be ASCII...
-                    nextPos = pos + Math.min(limit, textLen - pos);
-                } else {
-                    // For multi-segment messages, CDMA 7bit equals GSM 7bit encoding (EMS mode).
-                    nextPos = GsmAlphabet.findGsmSeptetLimitIndex(newMsgBody, pos, limit,
-                            ted.languageTable, ted.languageShiftTable);
-                }
-            } else {  // Assume unicode.
-                nextPos = SmsMessageBase.findNextUnicodePosition(pos, limit, newMsgBody);
-            }
-            if ((nextPos <= pos) || (nextPos > textLen)) {
-                Rlog.e(LOG_TAG, "fragmentText failed (" + pos + " >= " + nextPos + " or " +
-                          nextPos + " >= " + textLen + ")");
-                break;
-            }
-            result.add(newMsgBody.substring(pos, nextPos));
-            pos = nextPos;
-        }
-        return result;
-    }
-
-    /**
-     * Divide a message text into several fragments, none bigger than
-     * the maximum SMS message text size using TextEncodingDetails.
-     *
-     * @param subId subscription identity
-     * @param text text, must not be null.
-     * @param ted text encodingdetails
-     *
-     * @return an <code>ArrayList</code> of strings that, in order,
-     *   comprise the original msg text
-     *
-     * @hide
-     */
-    public ArrayList<String> fragmentTextUsingTed(int subId, String text,
-            TextEncodingDetails ted) {
-        boolean useCdmaFormat = false;
-
-        if (!SmsManager.getSmsManagerForSubscriptionId(subId).isImsSmsSupported()) {
-            // use Voice technology to determine SMS format.
-            useCdmaFormat = (TelephonyManager.getDefault().getCurrentPhoneType()
-                    == TelephonyManager.PHONE_TYPE_CDMA);
-        } else {
-            // IMS is registered with SMS support, check the SMS format supported
-            useCdmaFormat = (SmsConstants.FORMAT_3GPP2.
-                    equals(SmsManager.getSmsManagerForSubscriptionId(subId).getImsSmsFormat()));
-        }
-
-        int limit;
-        if (ted.codeUnitSize == SmsConstants.ENCODING_7BIT) {
-            int udhLength;
-            if (ted.languageTable != 0 && ted.languageShiftTable != 0) {
-                udhLength = GsmAlphabet.UDH_SEPTET_COST_TWO_SHIFT_TABLES;
-            } else if (ted.languageTable != 0 || ted.languageShiftTable != 0) {
-                udhLength = GsmAlphabet.UDH_SEPTET_COST_ONE_SHIFT_TABLE;
-            } else {
-                udhLength = 0;
-            }
-
-            if (ted.msgCount > 1) {
-                udhLength += GsmAlphabet.UDH_SEPTET_COST_CONCATENATED_MESSAGE;
-            }
-
-            if (udhLength != 0) {
-                udhLength += GsmAlphabet.UDH_SEPTET_COST_LENGTH;
-            }
-
-            limit = SmsConstants.MAX_USER_DATA_SEPTETS - udhLength;
-        } else {
-            if (ted.msgCount > 1) {
-                limit = SmsConstants.MAX_USER_DATA_BYTES_WITH_HEADER;
-                // If EMS is not supported, break down EMS into single segment SMS
-                // and add page info " x/y".
-                // In the case of UCS2 encoding, we need 8 bytes for this,
-                // but we only have 6 bytes from UDH, so truncate the limit for
-                // each segment by 2 bytes (1 char).
-                // Make sure total number of segments is less than 10.
-                if (!hasEmsSupport() && ted.msgCount < 10) {
-                    limit -= 2;
-                }
-            } else {
-                limit = SmsConstants.MAX_USER_DATA_BYTES;
-            }
-        }
-
-        String newMsgBody = null;
-        Resources r = Resources.getSystem();
-        if (r.getBoolean(com.android.internal.R.bool.config_sms_force_7bit_encoding)) {
-            newMsgBody  = Sms7BitEncodingTranslator.translate(text);
-        }
-        if (TextUtils.isEmpty(newMsgBody)) {
-            newMsgBody = text;
-        }
-        int pos = 0;  // Index in code units.
-        int textLen = newMsgBody.length();
-        ArrayList<String> result = new ArrayList<String>(ted.msgCount);
-        while (pos < textLen) {
-            int nextPos = 0;  // Counts code units.
-            if (ted.codeUnitSize == SmsConstants.ENCODING_7BIT) {
-                if (useCdmaFormat && ted.msgCount == 1) {
-                    // For a singleton CDMA message, the encoding must be ASCII...
-                    nextPos = pos + Math.min(limit, textLen - pos);
-                } else {
-                    // For multi-segment messages, CDMA 7bit equals GSM 7bit encoding (EMS mode).
-                    nextPos = GsmAlphabet.findGsmSeptetLimitIndex(newMsgBody, pos, limit,
-                            ted.languageTable, ted.languageShiftTable);
-                }
-            } else {  // Assume unicode.
-                nextPos = SmsMessageBase.findNextUnicodePosition(pos, limit, newMsgBody);
-            }
-            if ((nextPos <= pos) || (nextPos > textLen)) {
-                Rlog.e(LOG_TAG, "fragmentText failed (" + pos + " >= " + nextPos + " or " +
-                          nextPos + " >= " + textLen + ")");
-                break;
-            }
-            result.add(newMsgBody.substring(pos, nextPos));
-            pos = nextPos;
-        }
-        return result;
-    }
-
-    /**
-     * create SmsMessage by format
-     * @hide
-     */
-    public static SmsMessage createFromEfRecord(int index, byte[] data, String format) {
-        SmsMessageBase wrappedMessage;
-
-        Rlog.d(LOG_TAG, "createFromEfRecord(): format " + format);
-        if (FORMAT_3GPP2.equals(format)) {
-            wrappedMessage = com.android.internal.telephony.cdma.SmsMessage.createFromEfRecord(
-                    index, data);
-        } else if (FORMAT_3GPP.equals(format)) {
-            wrappedMessage = com.android.internal.telephony.gsm.SmsMessage.createFromEfRecord(
-                    index, data);
-        } else {
-            Rlog.e(LOG_TAG, "createFromEfRecord(): unsupported message format " + format);
-            return null;
-        }
-
-        return wrappedMessage != null ? new SmsMessage(wrappedMessage) : null;
-    }
-
-    /**
-     * Determines whether or not to current phone type is cdma. This function is similar with
-     * isCdmaVoice. Only one difference is this is the non-static function and can use mSubId.
-     *
-     * @return true if current phone type is cdma, false otherwise.
-     */
-    private boolean isCdma() {
-        int activePhone = TelephonyManager.getDefault().getCurrentPhoneType(mSubId);
-        return (PHONE_TYPE_CDMA == activePhone);
-    }
-
-    /**
-     * Get the current encoding type, ex. 7 bit or UCS2.
-     * App can use the encoding type to check if all Google emoticons content. It has bug while
-     * the emoticons codec cross 2 segments, it will have the broken content and shows to end user.
-     * Therefore, app can check if the encoding type is equal to 16bit. If it is equal to 16 bit,
-     * app is able to merge all content and display as correct emoticons.
-     *
-     * @return ENCODING_UNKNOWN, ENCODING_7BIT, ENCODING_8BIT or ENCODING_16BIT
-     * @hide
-     */
-    public int getEncodingType() {
-        return mWrappedSmsMessage.getEncodingType();
-    }
-    // MTK-END
-}
Index: vendor/branch/5058A_Claro/frameworks/base/core/res/res/drawable-nodpi/default_wallpaper.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: vendor/branch/5058A_Claro/frameworks/base/core/res/res/values/locale_config.xml
===================================================================
--- vendor/branch/5058A_Claro/frameworks/base/core/res/res/values/locale_config.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/frameworks/base/core/res/res/values/locale_config.xml	(revision 3018)
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2015 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<resources>
-
-    <string-array translatable="false" name="supported_locales">
-    	<item>en-US</item> <!-- English (United States) -->
-    	<item>es-US</item> <!-- Spanish (Spain) -->
-    	<item>pt-BR</item> <!-- Portuguese (Brazil) -->
-    	<item>pt-PT</item> <!-- Portuguese (Portugal) -->  
-        <item>fr-FR</item>
-    </string-array>
-
-</resources>
Index: vendor/branch/5058A_Claro/frameworks/base/core/res/res/values/config.xml
===================================================================
--- vendor/branch/5058A_Claro/frameworks/base/core/res/res/values/config.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/frameworks/base/core/res/res/values/config.xml	(revision 3018)
@@ -1,2660 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-/*
-** Copyright 2009, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
--->
-
-<!-- These resources are around just to allow their values to be customized
-     for different hardware and product builds.  Do not translate.
-
-     NOTE: The naming convention is "config_camelCaseValue". Some legacy
-     entries do not follow the convention, but all new entries should. -->
-
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <!-- Do not translate. Defines the slots for the right-hand side icons.  That is to say, the
-         icons in the status bar that are not notifications. -->
-    <string-array name="config_statusBarIcons">
-        <item><xliff:g id="id">@string/status_bar_rotate</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_headset</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_data_saver</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_managed_profile</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_ime</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_sync_failing</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_sync_active</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_cast</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_hotspot</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_location</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_bluetooth</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_nfc</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_tty</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_speakerphone</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_zen</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_mute</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_volume</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_wifi</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_cdma_eri</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_data_connection</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_phone_evdo_signal</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_phone_signal</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_battery</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_alarm_clock</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_secure</xliff:g></item>
-        <item><xliff:g id="id">@string/status_bar_clock</xliff:g></item>
-    </string-array>
-
-    <string translatable="false" name="status_bar_rotate">rotate</string>
-    <string translatable="false" name="status_bar_headset">headset</string>
-    <string translatable="false" name="status_bar_data_saver">data_saver</string>
-    <string translatable="false" name="status_bar_managed_profile">managed_profile</string>
-    <string translatable="false" name="status_bar_ime">ime</string>
-    <string translatable="false" name="status_bar_sync_failing">sync_failing</string>
-    <string translatable="false" name="status_bar_sync_active">sync_active</string>
-    <string translatable="false" name="status_bar_cast">cast</string>
-    <string translatable="false" name="status_bar_hotspot">hotspot</string>
-    <string translatable="false" name="status_bar_location">location</string>
-    <string translatable="false" name="status_bar_bluetooth">bluetooth</string>
-    <string translatable="false" name="status_bar_nfc">nfc</string>
-    <string translatable="false" name="status_bar_tty">tty</string>
-    <string translatable="false" name="status_bar_speakerphone">speakerphone</string>
-    <string translatable="false" name="status_bar_zen">zen</string>
-    <string translatable="false" name="status_bar_mute">mute</string>
-    <string translatable="false" name="status_bar_volume">volume</string>
-    <string translatable="false" name="status_bar_wifi">wifi</string>
-    <string translatable="false" name="status_bar_cdma_eri">cdma_eri</string>
-    <string translatable="false" name="status_bar_data_connection">data_connection</string>
-    <string translatable="false" name="status_bar_phone_evdo_signal">phone_evdo_signal</string>
-    <string translatable="false" name="status_bar_phone_signal">phone_signal</string>
-    <string translatable="false" name="status_bar_battery">battery</string>
-    <string translatable="false" name="status_bar_alarm_clock">alarm_clock</string>
-    <string translatable="false" name="status_bar_secure">secure</string>
-    <string translatable="false" name="status_bar_clock">clock</string>
-
-    <!-- Flag indicating whether the surface flinger has limited
-         alpha compositing functionality in hardware.  If set, the window
-         manager will disable alpha trasformation in animations where not
-         strictly needed. -->
-    <bool name="config_sf_limitedAlpha">false</bool>
-
-    <!-- Default value used to block data calls if ims is not
-         connected.  If you use the ims apn DCT will block
-         any other apn from connecting until ims apn is connected-->
-    <bool name="ImsConnectedDefaultValue">false</bool>
-
-    <!-- Flag indicating whether the surface flinger is inefficient
-         at performing a blur.  Used by parts of the UI to turn off
-         the blur effect where it isn't worth the performance hit.
-         As of Honeycomb, blurring is not supported anymore. -->
-    <bool name="config_sf_slowBlur">true</bool>
-
-    <!-- Flag indicating that the media framework should support playing of sounds on volume
-         key usage.  This adds noticeable additional overhead to volume key processing, so
-         is disableable for products for which it is irrelevant. -->
-    <bool name="config_useVolumeKeySounds">true</bool>
-
-    <!-- The attenuation in dB applied to the sound effects played
-         through AudioManager.playSoundEffect() when no volume is specified. -->
-    <integer name="config_soundEffectVolumeDb">-6</integer>
-
-    <!-- The attenuation in dB applied to the lock/unlock sounds. -->
-    <integer name="config_lockSoundVolumeDb">-6</integer>
-
-    <!-- Flag indicating whether the AUDIO_BECOMING_NOISY notification should
-         be sent during a change to the audio output device. -->
-    <bool name="config_sendAudioBecomingNoisy">true</bool>
-
-    <!-- The duration (in milliseconds) of a short animation. -->
-    <integer name="config_shortAnimTime">200</integer>
-
-    <!-- The duration (in milliseconds) of a medium-length animation. -->
-    <integer name="config_mediumAnimTime">400</integer>
-
-    <!-- The duration (in milliseconds) of a long animation. -->
-    <integer name="config_longAnimTime">500</integer>
-
-    <!-- The duration (in milliseconds) of the activity open/close and fragment open/close animations. -->
-    <integer name="config_activityShortDur">150</integer>
-    <integer name="config_activityDefaultDur">220</integer>
-
-    <!-- Duration for the dim animation behind a dialog.  This may be either
-         a percentage, which is relative to the duration of the enter/open
-         animation of the window being shown that is dimming behind, or it may
-         be an integer for a constant duration. -->
-    <fraction name="config_dimBehindFadeDuration">100%</fraction>
-
-    <!-- The maximum width we would prefer dialogs to be.  0 if there is no
-         maximum (let them grow as large as the screen).  Actual values are
-         specified for -large and -xlarge configurations. -->
-    <dimen name="config_prefDialogWidth">320dp</dimen>
-
-    <!-- Enables or disables fading edges when marquee is enabled in TextView.
-         Off by default, since the framebuffer readback used to implement the
-         fading edges is prohibitively expensive on most GPUs. -->
-    <bool name="config_ui_enableFadingMarquee">false</bool>
-
-    <!-- Whether dialogs should close automatically when the user touches outside
-         of them.  This should not normally be modified. -->
-    <bool name="config_closeDialogWhenTouchOutside">true</bool>
-
-    <!-- Device configuration indicating whether we should avoid using accelerated graphics
-         in certain places to reduce RAM footprint.  This is ignored if ro.config.low_ram
-         is true (in that case this is assumed true as well).  It can allow you to tune down
-         your device's memory use without going to the point of causing applications to turn
-         off features. -->
-    <bool name="config_avoidGfxAccel">false</bool>
-
-    <!-- Device configuration setting the minfree tunable in the lowmemorykiller in the kernel.
-         A high value will cause the lowmemorykiller to fire earlier, keeping more memory
-         in the file cache and preventing I/O thrashing, but allowing fewer processes to
-         stay in memory.  A low value will keep more processes in memory but may cause
-         thrashing if set too low.  Overrides the default value chosen by ActivityManager
-         based on screen size and total memory for the largest lowmemorykiller bucket, and
-         scaled proportionally to the smaller buckets.  -1 keeps the default. -->
-    <integer name="config_lowMemoryKillerMinFreeKbytesAbsolute">-1</integer>
-
-    <!-- Device configuration adjusting the minfree tunable in the lowmemorykiller in the
-         kernel.  A high value will cause the lowmemorykiller to fire earlier, keeping more
-         memory in the file cache and preventing I/O thrashing, but allowing fewer processes
-         to stay in memory.  A low value will keep more processes in memory but may cause
-         thrashing if set too low.  Directly added to the default value chosen by
-         ActivityManager based on screen size and total memory for the largest lowmemorykiller
-         bucket, and scaled proportionally to the smaller buckets. 0 keeps the default. -->
-    <integer name="config_lowMemoryKillerMinFreeKbytesAdjust">0</integer>
-
-    <!-- Device configuration setting the /proc/sys/vm/extra_free_kbytes tunable in the kernel
-         (if it exists).  A high value will increase the amount of memory that the kernel
-         tries to keep free, reducing allocation time and causing the lowmemorykiller to kill
-         earlier.  A low value allows more memory to be used by processes but may cause more
-         allocations to block waiting on disk I/O or lowmemorykiller.  Overrides the default
-         value chosen by ActivityManager based on screen size.  0 prevents keeping any extra
-         memory over what the kernel keeps by default.  -1 keeps the default. -->
-    <integer name="config_extraFreeKbytesAbsolute">-1</integer>
-
-    <!-- Device configuration adjusting the /proc/sys/vm/extra_free_kbytes tunable in the kernel
-         (if it exists).  0 uses the default value chosen by ActivityManager.  A positive value
-         will increase the amount of memory that the kernel tries to keep free, reducing
-         allocation time and causing the lowmemorykiller to kill earlier.  A negative value
-         allows more memory to be used by processes but may cause more allocations to block
-         waiting on disk I/O or lowmemorykiller.  Directly added to the default value chosen by
-         ActivityManager based on screen size. -->
-    <integer name="config_extraFreeKbytesAdjust">0</integer>
-
-    <!-- Set this to true to enable the platform's auto-power-save modes like doze and
-         app standby.  These are not enabled by default because they require a standard
-         cloud-to-device messaging service for apps to interact correctly with the modes
-         (such as to be able to deliver an instant message to the device even when it is
-         dozing).  This should be enabled if you have such services and expect apps to
-         correctly use them when installed on your device.  Otherwise, keep this disabled
-         so that applications can still use their own mechanisms. -->
-    <bool name="config_enableAutoPowerModes">false</bool>
-
-    <!-- The threshold angle for any motion detection in auto-power save modes.
-         In hundreths of a degree. -->
-    <integer name="config_autoPowerModeThresholdAngle">200</integer>
-
-    <!-- The sensor id of an "any motion" sensor used in auto-power save modes.
-         0 indicates this sensor is not available. -->
-    <integer name="config_autoPowerModeAnyMotionSensor">0</integer>
-
-    <!-- If an any motion sensor is not available, prefer the wrist tilt detector over the
-         SMD. -->
-    <bool name="config_autoPowerModePreferWristTilt">false</bool>
-
-    <!-- If a location should be pre-fetched when going into device idle. -->
-    <bool name="config_autoPowerModePrefetchLocation">true</bool>
-
-    <!-- The duration (in milliseconds) that the radio will scan for a signal
-         when there's no network connection. If the scan doesn't timeout, use zero -->
-    <integer name="config_radioScanningTimeout">0</integer>
-
-    <!-- XXXXX NOTE THE FOLLOWING RESOURCES USE THE WRONG NAMING CONVENTION.
-         Please don't copy them, copy anything else. -->
-
-    <!-- This string array should be overridden by the device to present a list of network
-         attributes.  This is used by the connectivity manager to decide which networks can coexist
-         based on the hardware -->
-    <!-- An Array of "[Connection name],[ConnectivityManager.TYPE_xxxx],
-         [associated radio-type],[priority],[restoral-timer(ms)],[dependencyMet]  -->
-    <!-- the 5th element "resore-time" indicates the number of milliseconds to delay
-         before automatically restore the default connection.  Set -1 if the connection
-         does not require auto-restore. -->
-    <!-- the 6th element indicates boot-time dependency-met value. -->
-    <string-array translatable="false" name="networkAttributes">
-        <item>"wifi,1,1,2,-1,true"</item>
-        <item>"tedongle,49,49,1,-1,true"</item>
-        <item>"mobile,0,0,0,-1,true"</item>
-        <item>"mobile_mms,2,0,2,300000,true"</item>
-        <item>"mobile_supl,3,0,2,300000,true"</item>
-        <item>"mobile_dun,4,0,3,300000,true"</item>
-        <item>"mobile_hipri,5,0,3,300000,true"</item>
-        <item>"bluetooth,7,7,0,-1,true"</item>
-        <item>"mobile_fota,10,0,2,300000,true"</item>
-        <item>"mobile_ims,11,0,-1,-1,true"</item>
-        <item>"mobile_cbs,12,0,2,300000,true"    </item>
-        <item>"mobile_dm,34,0,3,300000,true"</item>
-        <item>"mobile_wap,35,0,3,300000,true"</item>
-        <item>"mobile_net,36,0,3,300000,true"</item>
-        <item>"mobile_cmmail,37,0,3,300000,true"</item>
-        <item>"mobile_rcse,38,0,3,300000,true"</item>
-        <item>"mobile_ia,14,0,2,-1,true"</item>
-        <item>"mobile_emergency,15,0,2,-1,true"</item>
-        <item>"mobile_xcap,40,0,3,300000,true"</item>
-        <item>"mobile_rcs,41,0,3,300000,true"</item>
-        <item>"mobile_bip,42,0,3,300000,true"</item>
-    </string-array>
-
-    <!-- Array of ConnectivityManager.TYPE_xxxx constants for networks that may only
-         be controlled by systemOrSignature apps.  -->
-    <integer-array translatable="false" name="config_protectedNetworks">
-        <item>10</item>
-        <item>11</item>
-        <item>12</item>
-        <item>14</item>
-        <item>15</item>
-    </integer-array>
-
-    <!-- This string array should be overridden by the device to present a list of radio
-         attributes.  This is used by the connectivity manager to decide which networks can coexist
-         based on the hardware -->
-    <!-- An Array of "[ConnectivityManager connectionType],
-                      [# simultaneous connection types]"  -->
-    <string-array translatable="false" name="radioAttributes">
-        <item>"1,1"</item>
-        <item>"0,1"</item>
-        <item>"7,1"</item>
-        <item>"41,1"</item>
-        <item>"49,1"</item>
-    </string-array>
-
-    <!-- Set of NetworkInfo.getType() that reflect data usage. -->
-    <integer-array translatable="false" name="config_data_usage_network_types">
-        <item>0</item> <!-- TYPE_MOBILE -->
-        <item>2</item> <!-- TYPE_MOBILE_MMS -->
-        <item>3</item> <!-- TYPE_MOBILE_SUPL -->
-        <item>4</item> <!-- TYPE_MOBILE_DUN -->
-        <item>5</item> <!-- TYPE_MOBILE_HIPRI -->
-        <item>10</item> <!-- TYPE_MOBILE_FOTA -->
-        <item>12</item> <!-- TYPE_MOBILE_CBS -->
-        <item>14</item> <!-- TYPE_MOBILE_IA -->
-    </integer-array>
-
-    <!-- The maximum duration (in milliseconds) we expect a network transition to take -->
-    <integer name="config_networkTransitionTimeout">60000</integer>
-
-    <!-- Whether/how to notify the user on network switches. See LingerMonitor.java. -->
-    <integer translatable="false" name="config_networkNotifySwitchType">0</integer>
-
-    <!-- What types of network switches to notify. See LingerMonitor.java. -->
-    <string-array translatable="false" name="config_networkNotifySwitches">
-    </string-array>
-
-    <!-- Whether the device should automatically switch away from Wi-Fi networks that lose
-         Internet access. Actual device behaviour is controlled by
-         Settings.Global.NETWORK_AVOID_BAD_WIFI. This is the default value of that setting. -->
-    <integer translatable="false" name="config_networkAvoidBadWifi">1</integer>
-
-    <!-- List of regexpressions describing the interface (if any) that represent tetherable
-         USB interfaces.  If the device doesn't want to support tethering over USB this should
-         be empty.  An example would be "usb.*" -->
-    <string-array translatable="false" name="config_tether_usb_regexs">
-        <item>"rndis\\d"</item>
-    </string-array>
-
-    <!-- List of regexpressions describing the interface (if any) that represent tetherable
-         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
-         should be empty.  An example would be "softap.*" -->
-    <string-array translatable="false" name="config_tether_wifi_regexs">
-        <item>"ap\\d"</item>
-    </string-array>
-
-    <!-- List of regexpressions describing the interface (if any) that represent tetherable
-         WiMAX interfaces.  If the device doesn't want to support tethering over Wifi this
-         should be empty.  An example would be "softap.*" -->
-    <string-array translatable="false" name="config_tether_wimax_regexs">
-    </string-array>
-
-    <!-- List of regexpressions describing the interface (if any) that represent tetherable
-         bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
-         should be empty. -->
-    <string-array translatable="false" name="config_tether_bluetooth_regexs">
-        <item>"bt-pan"</item>
-        <item>"bt-dun"</item>
-    </string-array>
-
-    <!-- Max number of Bluetooth tethering connections allowed. If this is
-         updated config_tether_dhcp_range has to be updated appropriately. -->
-    <integer translateable="false" name="config_max_pan_devices">5</integer>
-
-    <!-- Dhcp range (min, max) to use for tethering purposes -->
-    <string-array translatable="false" name="config_tether_dhcp_range">
-    </string-array>
-
-    <!-- Regex of wired ethernet ifaces -->
-    <string translatable="false" name="config_ethernet_iface_regex">eth\\d</string>
-
-    <!-- If the mobile hotspot feature requires provisioning, a package name and class name
-        can be provided to launch a supported application that provisions the devices.
-
-        Example Usage:
-
-        String[] appDetails = getStringArray(R.array.config_mobile_hotspot_provision_app);
-        Intent intent = new Intent(Intent.ACTION_MAIN);
-        intent.setClassName(appDetails[0], appDetails[1]);
-        startActivityForResult(intent, 0);
-
-        public void onActivityResult(int requestCode, int resultCode, Intent intent) {
-            super.onActivityResult(requestCode, resultCode, intent);
-            if (requestCode == 0) {
-                if (resultCode == Activity.RESULT_OK) {
-                    //Mobile hotspot provisioning successful
-                } else {
-                    //Mobile hotspot provisioning failed
-                }
-            }
-
-        See src/com/android/settings/TetherSettings.java for more details.
-        For ui-less/periodic recheck support see config_mobile_hotspot_provision_app_no_ui
-        -->
-    <!-- The first element is the package name and the second element is the class name
-         of the provisioning app -->
-    <string-array translatable="false" name="config_mobile_hotspot_provision_app">
-    <!--
-        <item>com.example.provisioning</item>
-        <item>com.example.provisioning.Activity</item>
-    -->
-    </string-array>
-
-    <!-- If the mobile hotspot feature requires provisioning, an action can be provided
-         that will be broadcast in non-ui cases for checking the provisioning status.
-
-         A second broadcast, action defined by config_mobile_hotspot_provision_response,
-         will be sent back to notify if provisioning succeeded or not.  The response will
-         match that of the activity in config_mobile_hotspot_provision_app, but instead
-         contained within the int extra "EntitlementResult".
-
-         Example Usage:
-         String provisionAction = getString(R.string.config_mobile_hotspot_provision_check);
-         sendBroadcast(new Intent(provisionAction));
-
-         public void onReceive(Context context, Intent intent) {
-             String provisionResponse =
-                    getString(R.string.config_mobile_hotspot_provision_response);
-             if (provisionResponse.equals(intent.getAction())
-                    && intent.getIntExtra("EntitlementResult") == Activity.RESULT_OK) {
-                 //Mobile hotspot provisioning successful
-             } else {
-                 //Mobile hotspot provisioning failed
-             }
-         }
-        -->
-    <string translatable="false" name="config_mobile_hotspot_provision_app_no_ui"></string>
-    <!-- Sent in response to a provisioning check. The caller must hold the
-         permission android.permission.CONNECTIVITY_INTERNAL for Settings to
-         receive this response.
-
-         See config_mobile_hotspot_provision_response
-         -->
-    <string translatable="false" name="config_mobile_hotspot_provision_response"></string>
-    <!-- Number of hours between each background provisioning call -->
-    <integer translatable="false" name="config_mobile_hotspot_provision_check_period">24</integer>
-
-    <!-- Activity name to enable wifi tethering after provisioning app succeeds -->
-    <string translatable="false" name="config_wifi_tether_enable">com.android.settings/.TetherService</string>
-
-    <!-- Array of ConnectivityManager.TYPE_xxxx values allowable for tethering -->
-    <!-- Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
-    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH -->
-    <integer-array translatable="false" name="config_tether_upstream_types">
-        <item>0</item>
-        <item>1</item>
-        <item>5</item>
-        <item>7</item>
-        <item>9</item>
-        <item>49</item>
-    </integer-array>
-
-    <!-- If the DUN connection for this CDMA device supports more than just DUN -->
-    <!-- traffic you should list them here. -->
-    <!-- If this device is not CDMA this is ignored.  If this list is empty on -->
-    <!-- a DUN-requiring CDMA device, the DUN APN will just support just DUN. -->
-    <string-array translatable="false" name="config_cdma_dun_supported_types">
-    </string-array>
-
-    <!-- String containing the apn value for tethering.  May be overriden by secure settings
-         TETHER_DUN_APN.  Value is a comma separated series of strings:
-         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type",
-         Or string format of ApnSettingV3.
-         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN"
-         Multiple entries are separated by using string-array:
-         "<item>[ApnSettingV3]Name,apn,,,,,,,,,123,45,,mms|*,IPV6,IP,true,14,,,,,,,spn,testspn</item>
-          <item>[ApnSettingV3]Name1,apn2,,,,,,,,,123,46,,mms|*,IPV6,IP,true,12,,,,,,,,</item>" -->
-    <string-array translatable="false" name="config_tether_apndata">
-    </string-array>
-
-    <!-- Boolean indicating whether the wifi chipset has dual frequency band support -->
-    <bool translatable="false" name="config_wifi_dual_band_support">true</bool>
-
-    <!-- Boolean indicating whether Hotspot 2.0/Passpoint and ANQP queries is enabled -->
-    <bool translatable="false" name="config_wifi_hotspot2_enabled">false</bool>
-
-    <!-- Device type information conforming to Annex B format in WiFi Direct specification.
-         The default represents a dual-mode smartphone -->
-    <string translatable="false" name="config_wifi_p2p_device_type">10-0050F204-5</string>
-
-    <!-- Boolean indicating whether the wifi chipset supports background scanning mechanism.
-         This mechanism allows the host to remain in suspend state and the dongle to actively
-         scan and wake the host when a configured SSID is detected by the dongle. This chipset
-         capability can provide power savings when wifi needs to be always kept on. -->
-    <bool translatable="false" name="config_wifi_background_scan_support">true</bool>
-
-    <!-- Boolean indicating we re-try re-associating once upon disconnection and RSSI is high failure  -->
-    <bool translatable="true" name="config_wifi_enable_disconnection_debounce">true</bool>
-
-    <!-- Boolean indicating whether or not to revert to default country code when cellular
-         radio is unable to find any MCC information to infer wifi country code from -->
-    <bool translatable="false" name="config_wifi_revert_country_code_on_cellular_loss">true</bool>
-
-    <!-- Boolean indicating whether or not wifi firmware debugging is enabled -->
-    <bool translatable="false" name="config_wifi_enable_wifi_firmware_debugging">true</bool>
-
-    <!-- Integer size limit, in KB, for a single WifiLogger ringbuffer, in default logging mode -->
-    <integer translatable="false" name="config_wifi_logger_ring_buffer_default_size_limit_kb">32</integer>
-
-    <!-- Integer size limit, in KB, for a single WifiLogger ringbuffer, in verbose logging mode -->
-    <integer translatable="false" name="config_wifi_logger_ring_buffer_verbose_size_limit_kb">1024</integer>
-
-    <!-- Boolean indicating whether or not wifi should turn off when emergency call is made -->
-    <bool translatable="false" name="config_wifi_turn_off_during_emergency_call">false</bool>
-
-    <!-- Integer specifying the basic autojoin parameters -->
-    <integer translatable="false" name="config_wifi_framework_5GHz_preference_boost_threshold">-65</integer>
-    <integer translatable="false" name="config_wifi_framework_5GHz_preference_boost_factor">40</integer>
-    <integer translatable="false" name="config_wifi_framework_5GHz_preference_penalty_threshold">-75</integer>
-    <integer translatable="false" name="config_wifi_framework_RSSI_SCORE_OFFSET">85</integer>
-    <integer translatable="false" name="config_wifi_framework_RSSI_SCORE_SLOPE">4</integer>
-    <integer translatable="false" name="config_wifi_framework_SAME_BSSID_AWARD">24</integer>
-    <integer translatable="false" name="config_wifi_framework_LAST_SELECTION_AWARD">480</integer>
-    <integer translatable="false" name="config_wifi_framework_PASSPOINT_SECURITY_AWARD">40</integer>
-    <integer translatable="false" name="config_wifi_framework_SECURITY_AWARD">80</integer>
-    <!-- Integer parameters of the wifi to cellular handover feature
-         wifi should not stick to bad networks -->
-    <integer translatable="false" name="config_wifi_framework_wifi_score_bad_rssi_threshold_5GHz">-82</integer>
-    <integer translatable="false" name="config_wifi_framework_wifi_score_low_rssi_threshold_5GHz">-70</integer>
-    <integer translatable="false" name="config_wifi_framework_wifi_score_good_rssi_threshold_5GHz">-57</integer>
-    <integer translatable="false" name="config_wifi_framework_wifi_score_bad_rssi_threshold_24GHz">-85</integer>
-    <integer translatable="false" name="config_wifi_framework_wifi_score_low_rssi_threshold_24GHz">-73</integer>
-    <integer translatable="false" name="config_wifi_framework_wifi_score_good_rssi_threshold_24GHz">-60</integer>
-    <integer translatable="false" name="config_wifi_framework_wifi_score_bad_link_speed_24">6</integer>
-    <integer translatable="false" name="config_wifi_framework_wifi_score_bad_link_speed_5">12</integer>
-    <integer translatable="false" name="config_wifi_framework_wifi_score_good_link_speed_24">24</integer>
-    <integer translatable="false" name="config_wifi_framework_wifi_score_good_link_speed_5">36</integer>
-    <string  translatable="false" name="config_wifi_random_mac_oui">DA-A1-19</string>
-    <string  translatable="false" name="config_wifi_framework_sap_2G_channel_list">1,6,11</string>
-
-    <bool translatable="false" name="config_wifi_framework_cellular_handover_enable_user_triggered_adjustment">true</bool>
-
-    <!-- Integer packet threshold used to allow scan while associated -->
-    <integer translatable="false" name="config_wifi_framework_associated_full_scan_tx_packet_threshold">5</integer>
-    <integer translatable="false" name="config_wifi_framework_associated_full_scan_rx_packet_threshold">10</integer>
-    <integer translatable="false" name="config_wifi_framework_associated_partial_scan_tx_packet_threshold">40</integer>
-    <integer translatable="false" name="config_wifi_framework_associated_partial_scan_rx_packet_threshold">80</integer>
-    <integer translatable="false" name="config_wifi_framework_network_switch_tx_packet_threshold">2</integer>
-    <integer translatable="false" name="config_wifi_framework_network_switch_rx_packet_threshold">20</integer>
-
-    <!-- Integer indicating wpa_supplicant scan interval in milliseconds -->
-    <integer translatable="false" name="config_wifi_supplicant_scan_interval">15000</integer>
-
-    <!-- Integer indicating amount of time failed networks areblacklisted for the purpose
-         of network switching in milliseconds -->
-    <integer translatable="false" name="config_wifi_network_switching_blacklist_time">172800000</integer>
-
-    <!-- Integer indicating wpa_supplicant scan interval when p2p is connected in milliseconds -->
-    <integer translatable="false" name="config_wifi_scan_interval_p2p_connected">60000</integer>
-
-    <!-- Integer indicating the framework scan interval in milliseconds. This is used in the scenario
-         where the chipset does not support background scanning (config_wifi_background_scan_suport
-         is false) to set up a periodic wake up scan so that the device can connect to a new access
-         point on the move. A value of 0 means no periodic scans will be used in the framework. -->
-    <integer translatable="false" name="config_wifi_framework_scan_interval">300000</integer>
-
-    <!-- Integer indicating the framework no networks periodic scan interval in milliseconds. -->
-    <integer translatable="false" name="config_wifi_no_network_periodic_scan_interval">300000</integer>
-
-    <!-- Integer indicating disconnect mode short scan interval in milliseconds -->
-    <integer translatable="false" name="config_wifi_disconnected_short_scan_interval">15000</integer>
-
-    <!-- Integer indicating associated partial scan short interval in milliseconds -->
-    <integer translatable="false" name="config_wifi_associated_short_scan_interval">20000</integer>
-
-    <!-- Integer indicating associated full scan backoff, representing a fraction: xx/8 -->
-    <integer translatable="false" name="config_wifi_framework_associated_full_scan_backoff">12</integer>
-
-    <!-- Integer indicating associated full scan max interval in milliseconds -->
-    <integer translatable="false" name="config_wifi_framework_associated_full_scan_max_interval">300000</integer>
-
-    <!-- Integer indicating associated full scan max total dwell time in milliseconds -->
-    <integer translatable="false" name="config_wifi_framework_associated_full_scan_max_total_dwell_time">500</integer>
-
-    <!-- Integer indicating associated full scan max num active channels -->
-    <integer translatable="false" name="config_wifi_framework_associated_partial_scan_max_num_active_channels">6</integer>
-
-    <!-- Integer indicating RSSI boost given to current network -->
-    <integer translatable="false" name="config_wifi_framework_current_network_boost">16</integer>
-
-    <!-- Integer indicating how to handle beacons with uninitialized RSSI value of 0 -->
-    <integer translatable="false" name="config_wifi_framework_scan_result_rssi_level_patchup_value">-85</integer>
-
-    <!-- Boolean indicating associated network selection is allowed -->
-    <bool translatable="false" name="config_wifi_framework_enable_associated_network_selection">true</bool>
-
-    <!-- Boolean indicating that wifi only link configuratios that have exact same credentials (i.e PSK) -->
-    <bool translatable="false" name="config_wifi_only_link_same_credential_configurations">true</bool>
-
-    <!-- Wifi driver supports batched scan -->
-    <bool translatable="false" name="config_wifi_batched_scan_supported">false</bool>
-
-    <!-- Idle Receive current for wifi radio. 0 by default-->
-    <integer translatable="false" name="config_wifi_idle_receive_cur_ma">0</integer>
-
-    <!-- Rx current for wifi radio. 0 by default-->
-    <integer translatable="false" name="config_wifi_active_rx_cur_ma">0</integer>
-
-    <!-- Tx current for wifi radio. 0 by default-->
-    <integer translatable="false" name="config_wifi_tx_cur_ma">0</integer>
-
-    <!-- Operating volatage for wifi radio. 0 by default-->
-    <integer translatable="false" name="config_wifi_operating_voltage_mv">0</integer>
-
-    <!-- Flag indicating whether the we should enable the automatic brightness in Settings.
-         Software implementation will be used if config_hardware_auto_brightness_available is not set -->
-    <bool name="config_automatic_brightness_available">true</bool>
-
-    <!-- Fast brightness animation ramp rate -->
-    <integer translatable="false" name="config_brightness_ramp_rate_fast">200</integer>
-
-    <!-- Don't name config resources like this.  It should look like config_annoyDianne -->
-    <bool name="config_annoy_dianne">true</bool>
-
-    <!-- XXXXXX END OF RESOURCES USING WRONG NAMING CONVENTION -->
-
-    <!-- If this is true, the screen will come on when you unplug usb/power/whatever. -->
-    <bool name="config_unplugTurnsOnScreen">true</bool>
-
-    <!-- If this is true, the message that USB is only being used for charging will be shown. -->
-    <bool name="config_usbChargingMessage">true</bool>
-
-    <!-- Set this true only if the device has separate attention and notification lights. -->
-    <bool name="config_useAttentionLight">false</bool>
-
-    <!-- If this is true, the screen will fade off. -->
-    <bool name="config_animateScreenLights">false</bool>
-
-    <!-- If this is true, key chords can be used to take a screenshot on the device. -->
-    <bool name="config_enableScreenshotChord">true</bool>
-
-    <!-- If this is true, allow wake from theater mode when plugged in or unplugged. -->
-    <bool name="config_allowTheaterModeWakeFromUnplug">false</bool>
-    <!-- If this is true, allow wake from theater mode from gesture. -->
-    <bool name="config_allowTheaterModeWakeFromGesture">false</bool>
-    <!-- If this is true, allow wake from theater mode from camera lens cover is switched. -->
-    <bool name="config_allowTheaterModeWakeFromCameraLens">false</bool>
-    <!-- If this is true, allow wake from theater mode from power key press. -->
-    <bool name="config_allowTheaterModeWakeFromPowerKey">true</bool>
-    <!-- If this is true, allow wake from theater mode from regular key press. Setting this value to
-         true implies config_allowTheaterModeWakeFromPowerKey is also true-->
-    <bool name="config_allowTheaterModeWakeFromKey">false</bool>
-    <!-- If this is true, allow wake from theater mode from motion. -->
-    <bool name="config_allowTheaterModeWakeFromMotion">false</bool>
-    <!-- If this is true, allow wake from theater mode from motion. -->
-    <bool name="config_allowTheaterModeWakeFromMotionWhenNotDreaming">false</bool>
-    <!-- If this is true, allow wake from theater mode from lid switch. -->
-    <bool name="config_allowTheaterModeWakeFromLidSwitch">false</bool>
-    <!-- If this is true, allow wake from theater mode when docked. -->
-    <bool name="config_allowTheaterModeWakeFromDock">false</bool>
-    <!-- If this is true, allow wake from theater mode from window layout flag. -->
-    <bool name="config_allowTheaterModeWakeFromWindowLayout">false</bool>
-    <!-- If this is true, go to sleep when theater mode is enabled from button press -->
-    <bool name="config_goToSleepOnButtonPressTheaterMode">true</bool>
-    <!-- If this is true, long press on power button will be available from the non-interactive state -->
-    <bool name="config_supportLongPressPowerWhenNonInteractive">false</bool>
-
-    <!-- Auto-rotation behavior -->
-
-    <!-- If true, enables auto-rotation features using the accelerometer.
-         Otherwise, auto-rotation is disabled.  Applications may still request
-         to use specific orientations but the sensor is ignored and sensor-based
-         orientations are not available.  Furthermore, all auto-rotation related
-         settings are omitted from the system UI.  In certain situations we may
-         still use the accelerometer to determine the orientation, such as when
-         docked if the dock is configured to enable the accelerometer. -->
-    <bool name="config_supportAutoRotation">true</bool>
-
-    <!-- If true, the screen can be rotated via the accelerometer in all 4
-         rotations as the default behavior. -->
-    <bool name="config_allowAllRotations">false</bool>
-
-    <!-- If true, the direction rotation is applied to get to an application's requested
-         orientation is reversed.  Normally, the model is that landscape is
-         clockwise from portrait; thus on a portrait device an app requesting
-         landscape will cause a clockwise rotation, and on a landscape device an
-         app requesting portrait will cause a counter-clockwise rotation.  Setting
-         true here reverses that logic. -->
-    <bool name="config_reverseDefaultRotation">false</bool>
-
-    <!-- Sets the minimum and maximum tilt tolerance for each possible rotation.
-         This array consists of 4 pairs of values which specify the minimum and maximum
-         tilt angle at which the device will transition into each rotation.
-
-         The tilt angle represents the direction in which the plane of the screen is facing;
-         it is also known as the angle of elevation.
-
-           -90 degree tilt means that the screen is facing straight down
-                           (the device is being held overhead upside-down)
-             0 degree tilt means that the screen is facing outwards
-                           (the device is being held vertically)
-            90 degree tilt means that the screen is facing straight up
-                           (the device is resting on a flat table)
-
-        The default tolerances are set conservatively such that the device is more
-        likely to remain in its natural orientation than rotate into a counterclockwise,
-        clockwise, or reversed posture (with an especially strong bias against the latter)
-        to prevent accidental rotation while carrying the device in hand.
-
-        These thresholds may need to be tuned when the device is intended to be
-        mounted into a dock with a particularly shallow profile wherein rotation
-        would ordinarily have been suppressed.
-
-        It is helpful to consider the desired behavior both when the device is being
-        held at a positive tilt (typical case) vs. a negative tilt (reading overhead in
-        bed) since they are quite different.  In the overhead case, we typically want
-        the device to more strongly prefer to retain its current configuration (in absence
-        of a clear indication that a rotation is desired) since the user's head and neck may
-        be held at an unusual angle.
-    -->
-    <integer-array name="config_autoRotationTiltTolerance">
-        <!-- rotation:   0 (natural)    --> <item>-25</item> <item>70</item>
-        <!-- rotation:  90 (rotate CCW) --> <item>-25</item> <item>65</item>
-        <!-- rotation: 180 (reverse)    --> <item>-25</item> <item>60</item>
-        <!-- rotation: 270 (rotate CW)  --> <item>-25</item> <item>65</item>
-    </integer-array>
-
-    <!-- Lid switch behavior -->
-
-    <!-- The number of degrees to rotate the display when the keyboard is open.
-         A value of -1 means no change in orientation by default. -->
-    <integer name="config_lidOpenRotation">-1</integer>
-
-    <!-- Indicate whether the lid state impacts the accessibility of
-         the physical keyboard.  0 means it doesn't, 1 means it is accessible
-         when the lid is open, 2 means it is accessible when the lid is
-         closed.  The default is 0. -->
-    <integer name="config_lidKeyboardAccessibility">0</integer>
-
-    <!-- Indicate whether the lid state impacts the accessibility of
-         the navigation buttons.  0 means it doesn't, 1 means it is accessible
-         when the lid is open, 2 means it is accessible when the lid is
-         closed.  The default is 0. -->
-    <integer name="config_lidNavigationAccessibility">0</integer>
-
-    <!-- Indicate whether closing the lid causes the lockscreen to appear.
-         The default is false. -->
-    <bool name="config_lidControlsScreenLock">false</bool>
-
-    <!-- Indicate whether closing the lid causes the device to go to sleep and opening
-         it causes the device to wake up.
-         The default is false. -->
-    <bool name="config_lidControlsSleep">false</bool>
-
-    <!-- Desk dock behavior -->
-
-    <!-- The number of degrees to rotate the display when the device is in a desk dock.
-         A value of -1 means no change in orientation by default. -->
-    <integer name="config_deskDockRotation">-1</integer>
-
-    <!-- Control whether being in the desk dock (and powered) always
-         keeps the screen on.  By default it stays on when plugged in to
-         AC.  0 will not keep it on; or together 1 to stay on when plugged
-         in to AC and 2 to stay on when plugged in to USB.  (So 3 for both.) -->
-    <integer name="config_deskDockKeepsScreenOn">1</integer>
-
-    <!-- Control whether being in the desk dock should enable accelerometer
-         based screen orientation.  This defaults to true because it is
-         common for desk docks to be sold in a variety of form factors
-         with different orientations.  Since we cannot always tell these docks
-         apart and the docks cannot report their true orientation on their own,
-         we rely on gravity to determine the effective orientation. -->
-    <bool name="config_deskDockEnablesAccelerometer">true</bool>
-
-    <!-- Car dock behavior -->
-
-    <!-- The number of degrees to rotate the display when the device is in a car dock.
-         A value of -1 means no change in orientation by default. -->
-    <integer name="config_carDockRotation">-1</integer>
-
-    <!-- Control whether being in the car dock (and powered) always
-         keeps the screen on.  By default it stays on when plugged in to
-         AC.  0 will not keep it on; or together 1 to stay on when plugged
-         in to AC and 2 to stay on when plugged in to USB.  (So 3 for both.) -->
-    <integer name="config_carDockKeepsScreenOn">1</integer>
-
-    <!-- Control whether being in the car dock should enable accelerometer based
-         screen orientation.  This defaults to true because putting a device in
-         a car dock make the accelerometer more a physical input (like a lid). -->
-
-    <bool name="config_carDockEnablesAccelerometer">true</bool>
-
-    <!--  Control whether to launch Car dock home app when user presses home button or when
-          car dock intent is fired.
-          In mobile device, usually separate home app is expected in car mode, and this should be
-          enabled. But in environments like real car, default home app may be enough, and in that
-          case, this can be disabled (set to false). -->
-    <bool name="config_enableCarDockHomeLaunch">true</bool>
-
-    <!-- HDMI behavior -->
-
-    <!-- The number of degrees to rotate the display when the device has HDMI connected
-         but is not in a dock.  A value of -1 means no change in orientation by default.
-         Use -1 except on older devices whose Hardware Composer HAL does not
-         provide full support for multiple displays.  -->
-    <integer name="config_undockedHdmiRotation">-1</integer>
-
-    <!-- Control the default UI mode type to use when there is no other type override
-         happening.  One of the following values (See Configuration.java):
-             1  UI_MODE_TYPE_NORMAL
-             4  UI_MODE_TYPE_TELEVISION
-             5  UI_MODE_TYPE_APPLIANCE
-             6  UI_MODE_TYPE_WATCH
-         Any other values will have surprising consequences. -->
-    <integer name="config_defaultUiModeType">1</integer>
-
-    <!--  Control whether to lock UI mode to what is selected from config_defaultUiModeType.
-          Once UI mode is locked, applications cannot change it anymore. -->
-    <bool name="config_lockUiMode">false</bool>
-
-    <!--  Control whether to lock day/night mode change from normal application. When it is
-          true, day / night mode change is only allowed to apps with MODIFY_DAY_NIGHT_MODE
-          permission. -->
-    <bool name="config_lockDayNightMode">false</bool>
-
-    <!-- Control the default night mode to use when there is no other mode override set.
-         One of the following values (see UiModeManager.java):
-             0 - MODE_NIGHT_AUTO
-             1 - MODE_NIGHT_NO
-             2 - MODE_NIGHT_YES
-    -->
-    <integer name="config_defaultNightMode">1</integer>
-
-    <!-- Control whether Night display is available. This should only be enabled on devices
-         with HWC 2.0 or higher. -->
-    <bool name="config_nightDisplayAvailable">false</bool>
-
-    <!-- Default mode to control how Night display is automatically activated.
-         One of the following values (see NightDisplayController.java):
-             0 - AUTO_MODE_DISABLED
-             1 - AUTO_MODE_CUSTOM
-             2 - AUTO_MODE_TWILIGHT
-    -->
-    <integer name="config_defaultNightDisplayAutoMode">0</integer>
-
-    <!-- Default time when Night display is automatically activated.
-         Represented as milliseconds from midnight (e.g. 79200000 == 10pm). -->
-    <integer name="config_defaultNightDisplayCustomStartTime">79200000</integer>
-
-    <!-- Default time when Night display is automatically deactivated.
-         Represented as milliseconds from midnight (e.g. 21600000 == 6am). -->
-    <integer name="config_defaultNightDisplayCustomEndTime">21600000</integer>
-
-    <!-- Indicate whether to allow the device to suspend when the screen is off
-         due to the proximity sensor.  This resource should only be set to true
-         if the sensor HAL correctly handles the proximity sensor as a wake-up source.
-         Otherwise, the device may fail to wake out of suspend reliably.
-         The default is false. -->
-    <bool name="config_suspendWhenScreenOffDueToProximity">true</bool>
-
-    <!-- Control the behavior when the user long presses the power button.
-            0 - Nothing
-            1 - Global actions menu
-            2 - Power off (with confirmation)
-            3 - Power off (without confirmation)
-    -->
-    <integer name="config_longPressOnPowerBehavior">1</integer>
-
-    <!-- Control the behavior when the user long presses the back button.  Non-zero values are only
-         valid for watches as part of CDD/CTS.
-            0 - Nothing
-            1 - Go to voice assist
-    -->
-    <integer name="config_longPressOnBackBehavior">0</integer>
-
-    <!-- Control the behavior when the user short presses the power button.
-            0 - Nothing
-            1 - Go to sleep (doze)
-            2 - Really go to sleep (don't doze)
-            3 - Really go to sleep and go home (don't doze)
-    -->
-    <integer name="config_shortPressOnPowerBehavior">2</integer>
-
-    <!-- Control the behavior when the user double presses the power button.
-            0 - Nothing
-            1 - Toggle theater mode setting
-            2 - Brightness boost
-    -->
-    <integer name="config_doublePressOnPowerBehavior">0</integer>
-
-    <!-- Control the behavior when the user triple presses the power button.
-            0 - Nothing
-            1 - Toggle theater mode setting
-            2 - Brightness boost
-    -->
-    <integer name="config_triplePressOnPowerBehavior">0</integer>
-
-    <!-- Control the behavior when the user presses the sleep button.
-            0 - Go to sleep (doze)
-            1 - Go to sleep (doze) and go home
-    -->
-    <integer name="config_shortPressOnSleepBehavior">0</integer>
-
-    <!-- Package name for default keyguard appwidget [DO NOT TRANSLATE] -->
-    <string name="widget_default_package_name" translatable="false"></string>
-
-    <!-- Class name for default keyguard appwidget [DO NOT TRANSLATE] -->
-    <string name="widget_default_class_name" translatable="false"></string>
-
-    <!-- Indicate whether the SD card is accessible without removing the battery. -->
-    <bool name="config_batterySdCardAccessibility">false</bool>
-
-    <!-- List of file paths for USB host busses to exclude from USB host support.
-         For example, if the first USB bus on the device is used to communicate
-         with the modem or some other restricted hardware, add "/dev/bus/usb/001/"
-         to this list.  If this is empty, no parts of the host USB bus will be excluded.
-    -->
-    <string-array name="config_usbHostBlacklist" translatable="false">
-    </string-array>
-
-    <!-- List of paths to serial ports that are available to the serial manager.
-         for example, /dev/ttyUSB0
-    -->
-    <string-array translatable="false" name="config_serialPorts">
-    </string-array>
-
-    <!-- Vibrator pattern for feedback about a long screen/key press -->
-    <integer-array name="config_longPressVibePattern">
-        <item>0</item>
-        <item>1</item>
-        <item>20</item>
-        <item>21</item>
-    </integer-array>
-
-    <!-- Vibrator pattern for feedback about touching a virtual key -->
-    <integer-array name="config_virtualKeyVibePattern">
-        <item>0</item>
-        <item>10</item>
-        <item>20</item>
-        <item>30</item>
-    </integer-array>
-
-    <!-- Vibrator pattern for a very short but reliable vibration for soft keyboard tap -->
-    <integer-array name="config_keyboardTapVibePattern">
-        <item>40</item>
-    </integer-array>
-
-    <!-- Vibrator pattern for feedback when selecting an hour/minute tick of a Clock -->
-    <integer-array name="config_clockTickVibePattern">
-        <item>125</item>
-        <item>30</item>
-    </integer-array>
-
-    <!-- Vibrator pattern for feedback when selecting a day/month/year date of a Calendar -->
-    <integer-array name="config_calendarDateVibePattern">
-        <item>125</item>
-        <item>30</item>
-    </integer-array>
-
-    <!-- Vibrator pattern for feedback about booting with safe mode disabled -->
-    <integer-array name="config_safeModeDisabledVibePattern">
-        <item>0</item>
-        <item>1</item>
-        <item>20</item>
-        <item>21</item>
-    </integer-array>
-
-    <!-- Vibrator pattern for feedback about booting with safe mode disabled -->
-    <integer-array name="config_safeModeEnabledVibePattern">
-        <item>0</item>
-        <item>1</item>
-        <item>20</item>
-        <item>21</item>
-        <item>500</item>
-        <item>600</item>
-    </integer-array>
-
-    <!-- Vibrator pattern for feedback about hitting a scroll barrier -->
-    <integer-array name="config_scrollBarrierVibePattern">
-        <item>0</item>
-        <item>15</item>
-        <item>10</item>
-        <item>10</item>
-    </integer-array>
-
-    <!-- Vibrator pattern for feedback about a context click -->
-    <integer-array name="config_contextClickVibePattern">
-        <item>0</item>
-        <item>1</item>
-        <item>20</item>
-        <item>21</item>
-    </integer-array>
-
-    <bool name="config_use_strict_phone_number_comparation">false</bool>
-
-    <!-- Display low battery warning when battery level dips to this value.
-         Also, the battery stats are flushed to disk when we hit this level.  -->
-    <integer name="config_criticalBatteryWarningLevel">5</integer>
-
-    <!-- Shutdown if the battery temperature exceeds (this value * 0.1) Celsius. -->
-    <integer name="config_shutdownBatteryTemperature">680</integer>
-
-    <!-- Display low battery warning when battery level dips to this value -->
-    <integer name="config_lowBatteryWarningLevel">15</integer>
-
-    <!-- Close low battery warning when battery level reaches the lowBatteryWarningLevel
-         plus this -->
-    <integer name="config_lowBatteryCloseWarningBump">5</integer>
-
-    <!-- Default color for notification LED. -->
-    <color name="config_defaultNotificationColor">#ffffffff</color>
-
-    <!-- Default LED on time for notification LED in milliseconds. -->
-    <integer name="config_defaultNotificationLedOn">500</integer>
-
-    <!-- Default LED off time for notification LED in milliseconds. -->
-    <integer name="config_defaultNotificationLedOff">2000</integer>
-
-    <!-- Default value for led color when battery is low on charge -->
-    <integer name="config_notificationsBatteryLowARGB">0xFFFF0000</integer>
-
-    <!-- Default value for led color when battery is medium charged -->
-    <integer name="config_notificationsBatteryMediumARGB">0xFFFFFF00</integer>
-
-    <!-- Default value for led color when battery is fully charged -->
-    <integer name="config_notificationsBatteryFullARGB">0xFF00FF00</integer>
-
-    <!-- Default value for LED on time when the battery is low on charge in miliseconds -->
-    <integer name="config_notificationsBatteryLedOn">125</integer>
-
-    <!-- Is the notification LED intrusive? Used to decide if there should be a disable option -->
-    <bool name="config_intrusiveNotificationLed">false</bool>
-
-    <!-- Default value for LED off time when the battery is low on charge in miliseconds -->
-    <integer name="config_notificationsBatteryLedOff">2875</integer>
-
-    <!-- Number of notifications to keep in the notification service historical archive -->
-    <integer name="config_notificationServiceArchiveSize">100</integer>
-
-    <!-- Allow the menu hard key to be disabled in LockScreen on some devices -->
-    <bool name="config_disableMenuKeyInLockScreen">false</bool>
-
-    <!-- Don't show lock screen before unlock screen (PIN/pattern/password) -->
-    <bool name="config_enableLockBeforeUnlockScreen">false</bool>
-
-    <!-- Disable lockscreen rotation by default -->
-    <bool name="config_enableLockScreenRotation">false</bool>
-
-    <!-- Enable lockscreen translucent decor by default -->
-    <bool name="config_enableLockScreenTranslucentDecor">true</bool>
-
-    <!-- Enable translucent decor by default -->
-    <bool name="config_enableTranslucentDecor">true</bool>
-
-    <!-- Is the device capable of hot swapping an UICC Card -->
-    <bool name="config_hotswapCapable">false</bool>
-
-    <!-- Component name of the ICC hotswap prompt for restart dialog -->
-    <string name="config_iccHotswapPromptForRestartDialogComponent" translateable="false">@null</string>
-
-    <!-- Enable puk unlockscreen by default.
-         If unlock screen is disabled, the puk should be unlocked through Emergency Dialer -->
-    <bool name="config_enable_puk_unlock_screen">true</bool>
-
-    <!-- Enable emergency call when sim is locked or puk locked. Some countries/carriers do not
-         allow emergency calls to be placed without the IMSI, which is locked in the SIM.
-         If so, this should be set to 'false' in an overlay. -->
-    <bool name="config_enable_emergency_call_while_sim_locked">true</bool>
-
-    <!-- Control the behavior when the user long presses the home button.
-            0 - Nothing
-            1 - Recent apps view in SystemUI
-            2 - Launch assist intent
-         This needs to match the constants in
-         policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
-    -->
-    <!-- M: Change default long press on home behavior to Recent apps view -->
-    <integer name="config_longPressOnHomeBehavior">1</integer>
-
-    <!-- Control the behavior when the user double-taps the home button.
-            0 - Nothing
-            1 - Recent apps view in SystemUI
-         This needs to match the constants in
-         policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
-    -->
-    <integer name="config_doubleTapOnHomeBehavior">0</integer>
-
-    <!-- Minimum screen brightness setting allowed by the power manager.
-         The user is forbidden from setting the brightness below this level. -->
-    <integer name="config_screenBrightnessSettingMinimum">10</integer>
-
-    <!-- Maximum screen brightness allowed by the power manager.
-         The user is forbidden from setting the brightness above this level. -->
-    <integer name="config_screenBrightnessSettingMaximum">255</integer>
-
-    <!-- Default screen brightness setting.
-         Must be in the range specified by minimum and maximum. -->
-    <integer name="config_screenBrightnessSettingDefault">102</integer>
-
-    <!-- Screen brightness used to dim the screen while dozing in a very low power state.
-         May be less than the minimum allowed brightness setting
-         that can be set by the user. -->
-    <integer name="config_screenBrightnessDoze">1</integer>
-
-    <!-- Allow automatic adjusting of the screen brightness while dozing in low power state. -->
-    <bool name="config_allowAutoBrightnessWhileDozing">false</bool>
-
-    <!-- Stability requirements in milliseconds for accepting a new brightness level.  This is used
-         for debouncing the light sensor.  Different constants are used to debounce the light sensor
-         when adapting to brighter or darker environments.  This parameter controls how quickly
-         brightness changes occur in response to an observed change in light level that exceeds the
-         hysteresis threshold. -->
-    <integer name="config_autoBrightnessBrighteningLightDebounce">2000</integer>
-    <integer name="config_autoBrightnessDarkeningLightDebounce">2000</integer>
-
-    <!-- Light sensor event rate in milliseconds for automatic brightness control. -->
-    <integer name="config_autoBrightnessLightSensorRate">250</integer>
-
-    <!-- The maximum range of gamma adjustment possible using the screen
-         auto-brightness adjustment setting. -->
-    <fraction name="config_autoBrightnessAdjustmentMaxGamma">300%</fraction>
-
-    <!-- If we allow automatic adjustment of screen brightness while dozing, how many times we want
-         to reduce it to preserve the battery. Value of 100% means no scaling. -->
-    <fraction name="config_screenAutoBrightnessDozeScaleFactor">100%</fraction>
-
-    <!-- When the screen is turned on, the previous estimate of the ambient light level at the time
-         the screen was turned off is restored and is used to determine the initial screen
-         brightness.
-
-         If this flag is true, then the ambient light level estimate will be promptly recomputed
-         after the warm-up interface and the screen brightness will be adjusted immediately.
-
-         If this flag is false, then the ambient light level estimate will be adjusted more
-         gradually in the same manner that normally happens when the screen is on according to the
-         brightening or dimming debounce thresholds.  As a result, it may take somewhat longer to
-         adapt to the environment.  This mode may be better suited for watches. -->
-    <bool name="config_autoBrightnessResetAmbientLuxAfterWarmUp">true</bool>
-
-    <!-- Period of time in which to consider light samples in milliseconds. -->
-    <integer name="config_autoBrightnessAmbientLightHorizon">10000</integer>
-
-    <!-- Screen brightness used to dim the screen when the user activity
-         timeout expires.  May be less than the minimum allowed brightness setting
-         that can be set by the user. -->
-    <integer name="config_screenBrightnessDim">10</integer>
-
-    <!-- Minimum allowable screen brightness to use in a very dark room.
-         This value sets the floor for the darkest possible auto-brightness
-         adjustment.  It is expected to be somewhat less than the first entry in
-         config_autoBrightnessLcdBacklightValues so as to allow the user to have
-         some range of adjustment to dim the screen further than usual in very
-         dark rooms. The contents of the screen must still be clearly visible
-         in darkness (although they may not be visible in a bright room). -->
-    <integer name="config_screenBrightnessDark">1</integer>
-
-    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
-         The N entries of this array define N + 1 control points as follows:
-         (1-based arrays)
-
-         Point 1:            (0, value[1]):             lux <= 0
-         Point 2:     (level[1], value[2]):  0        < lux <= level[1]
-         Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
-         ...
-         Point N+1: (level[N], value[N+1]):  level[N] < lux
-
-         The control points must be strictly increasing.  Each control point
-         corresponds to an entry in the brightness backlight values arrays.
-         For example, if LUX == level[1] (first element of the levels array)
-         then the brightness will be determined by value[2] (second element
-         of the brightness values array).
-
-         Spline interpolation is used to determine the auto-brightness
-         backlight values for LUX levels between these control points.
-
-         Must be overridden in platform specific overlays -->
-    <integer-array name="config_autoBrightnessLevels">
-        <item>128</item>
-        <item>256</item>
-        <item>384</item>
-        <item>512</item>
-        <item>640</item>
-        <item>768</item>
-        <item>896</item>
-        <item>1024</item>
-        <item>2048</item>
-        <item>4096</item>
-        <item>6144</item>
-        <item>8192</item>
-        <item>10240</item>
-        <item>12288</item>
-        <item>14336</item>
-        <item>16384</item>
-        <item>18432</item>
-    </integer-array>
-
-    <!-- Array of output values for LCD backlight corresponding to the LUX values
-         in the config_autoBrightnessLevels array.  This array should have size one greater
-         than the size of the config_autoBrightnessLevels array.
-         The brightness values must be between 0 and 255 and be non-decreasing.
-         This must be overridden in platform specific overlays -->
-    <integer-array name="config_autoBrightnessLcdBacklightValues">
-        <item>8</item>
-        <item>64</item>
-        <item>98</item>
-        <item>104</item>
-        <item>110</item>
-        <item>116</item>
-        <item>122</item>
-        <item>128</item>
-        <item>134</item>
-        <item>182</item>
-        <item>255</item>
-        <item>255</item>
-        <item>255</item>
-        <item>255</item>
-        <item>255</item>
-        <item>255</item>
-        <item>255</item>
-        <item>255</item>
-    </integer-array>
-
-    <!-- Array of output values for button backlight corresponding to the LUX values
-         in the config_autoBrightnessLevels array.  This array should have size one greater
-         than the size of the config_autoBrightnessLevels array.
-         The brightness values must be between 0 and 255 and be non-decreasing.
-         This must be overridden in platform specific overlays -->
-    <integer-array name="config_autoBrightnessButtonBacklightValues">
-    </integer-array>
-
-    <!-- Array of output values for keyboard backlight corresponding to the LUX values
-         in the config_autoBrightnessLevels array.  This array should have size one greater
-         than the size of the config_autoBrightnessLevels array.
-         The brightness values must be between 0 and 255 and be non-decreasing.
-         This must be overridden in platform specific overlays -->
-    <integer-array name="config_autoBrightnessKeyboardBacklightValues">
-    </integer-array>
-
-    <!-- Amount of time it takes for the light sensor to warm up in milliseconds.
-         For this time after the screen turns on, the Power Manager
-         will not debounce light sensor readings -->
-    <integer name="config_lightSensorWarmupTime">0</integer>
-
-    <!-- Enables swipe versus poly-finger touch disambiguation in the KeyboardView -->
-    <bool name="config_swipeDisambiguation">true</bool>
-
-    <!-- Specifies the amount of time to disable virtual keys after the screen is touched
-         in order to filter out accidental virtual key presses due to swiping gestures
-         or taps near the edge of the display.  May be 0 to disable the feature.
-         It is recommended that this value be no more than 250 ms.
-         This feature should be disabled for most devices. -->
-    <integer name="config_virtualKeyQuietTimeMillis">0</integer>
-
-    <!-- A list of potential packages, in priority order, that may contain an
-         ephemeral resolver. Each package will be be queried for a component
-         that has been granted the PACKAGE_EPHEMERAL_AGENT permission.
-         This may be empty if ephemeral apps are not supported. -->
-    <string-array name="config_ephemeralResolverPackage" translatable="false">
-        <!-- Add packages here -->
-    </string-array>
-
-    <!-- Component name of the default wallpaper. This will be ImageWallpaper if not
-         specified -->
-    <string name="default_wallpaper_component" translatable="false">@null</string>
-
-    <!-- By default a product has no distinct default lock wallpaper -->
-    <item name="default_lock_wallpaper" type="drawable">@null</item>
-
-    <!-- Component name of the built in wallpaper used to display bitmap wallpapers. This must not be null. -->
-    <string name="image_wallpaper_component" translatable="false">com.android.systemui/com.android.systemui.ImageWallpaper</string>
-
-    <!-- True if WallpaperService is enabled -->
-    <bool name="config_enableWallpaperService">true</bool>
-
-    <!-- Whether to enable network location overlay which allows network
-         location provider to be replaced by an app at run-time. When disabled,
-         only the config_networkLocationProviderPackageName package will be
-         searched for network location provider, otherwise packages whose
-         signature matches the signatures of config_locationProviderPackageNames
-         will be searched, and the service with the highest version number will
-         be picked. Anyone who wants to disable the overlay mechanism can set it
-         to false.
-         -->
-    <bool name="config_enableNetworkLocationOverlay" translatable="false">true</bool>
-    <!-- Package name providing network location support. Used only when
-         config_enableNetworkLocationOverlay is false. -->
-    <string name="config_networkLocationProviderPackageName" translatable="false">@null</string>
-
-    <!-- Whether to enable fused location provider overlay which allows fused
-         location provider to be replaced by an app at run-time. When disabled,
-         only the config_fusedLocationProviderPackageName package will be
-         searched for fused location provider, otherwise packages whose
-         signature matches the signatures of config_locationProviderPackageNames
-         will be searched, and the service with the highest version number will
-         be picked. Anyone who wants to disable the overlay mechanism can set it
-         to false.
-         -->
-    <bool name="config_enableFusedLocationOverlay" translatable="false">true</bool>
-    <!-- Package name providing fused location support. Used only when
-         config_enableFusedLocationOverlay is false. -->
-    <string name="config_fusedLocationProviderPackageName" translatable="false">com.android.location.fused</string>
-
-    <!-- Whether to enable Hardware FLP overlay which allows Hardware FLP to be
-         replaced by an app at run-time. When disabled, only the
-         config_hardwareFlpPackageName package will be searched for Hardware Flp,
-         otherwise packages whose signature matches the signatures of
-         config_locationProviderPackageNames will be searched, and the service
-         with the highest version number will be picked. Anyone who wants to
-         disable the overlay mechanism can set it to false.
-         -->
-    <bool name="config_enableHardwareFlpOverlay" translatable="false">true</bool>
-    <!-- Package name providing Hardware Flp. Used only when
-         config_enableHardwareFlpOverlay is false. -->
-    <string name="config_hardwareFlpPackageName" translatable="false">com.android.location.fused</string>
-
-    <!-- Whether to enable geocoder overlay which allows geocoder to be replaced
-         by an app at run-time. When disabled, only the
-         config_geocoderProviderPackageName package will be searched for
-         geocoder, otherwise packages whose signature matches the signatures of
-         config_locationProviderPackageNames will be searched, and the service
-         with the highest version number will be picked. Anyone who wants to
-         disable the overlay mechanism can set it to false.
-         -->
-    <bool name="config_enableGeocoderOverlay" translatable="false">true</bool>
-    <!-- Package name providing geocoder API support. Used only when
-         config_enableGeocoderOverlay is false. -->
-    <string name="config_geocoderProviderPackageName" translatable="false">@null</string>
-
-    <!-- Whether to enable geofence overlay which allows geofence to be replaced
-         by an app at run-time. When disabled, only the
-         config_geofenceProviderPackageName package will be searched for
-         geofence implementation, otherwise packages whose signature matches the
-         signatures of config_locationProviderPackageNames will be searched, and
-         the service with the highest version number will be picked. Anyone who
-         wants to disable the overlay mechanism can set it to false.
-         -->
-    <bool name="config_enableGeofenceOverlay" translatable="false">true</bool>
-    <!-- Package name providing geofence API support. Used only when
-         config_enableGeofenceOverlay is false. -->
-    <string name="config_geofenceProviderPackageName" translatable="false">@null</string>
-
-    <!-- Whether to enable Hardware Activity-Recognition overlay which allows Hardware
-         Activity-Recognition to be replaced by an app at run-time. When disabled, only the
-         config_activityRecognitionHardwarePackageName package will be searched for
-         its implementation, otherwise packages whose signature matches the
-         signatures of config_locationProviderPackageNames will be searched, and
-         the service with the highest version number will be picked. Anyone who
-         wants to disable the overlay mechanism can set it to false.
-         -->
-    <bool name="config_enableActivityRecognitionHardwareOverlay" translatable="false">true</bool>
-    <!-- Package name providing Hardware Activity-Recognition API support. Used only when
-         config_enableActivityRecognitionHardwareOverlay is false. -->
-    <string name="config_activityRecognitionHardwarePackageName" translatable="false">@null</string>
-
-    <!-- Package name(s) containing location provider support.
-         These packages can contain services implementing location providers,
-         such as the Geocode Provider, Network Location Provider, and
-         Fused Location Provider. They will each be searched for
-         service components implementing these providers.
-         It is strongly recommended that the packages explicitly named
-         below are on the system image, so that they will not map to
-         a 3rd party application.
-         The location framework also has support for installation
-         of new location providers at run-time. The new package does not
-         have to be explicitly listed here, however it must have a signature
-         that matches the signature of at least one package on this list.
-         -->
-    <string-array name="config_locationProviderPackageNames" translatable="false">
-        <!-- The standard AOSP fused location provider -->
-        <item>com.android.location.fused</item>
-        <!-- MTK add for location providers -->
-        <item>com.google.android.gms</item>
-        <item>com.mediatek.flp.em</item>
-        <item>com.amap.android.ams</item>
-        <item>com.baidu.location.fused</item>
-        <!-- MTK add end -->
-    </string-array>
-
-    <!-- This string array can be overriden to enable test location providers initially. -->
-    <!-- Array of "[locationProviderName],[requiresNetwork],
-         [requiresSatellite],[requiresCell],[hasMonetaryCost],
-         [supportAltitute],[supportsSpeed],[supportsBearing],
-         [powerRequirement],[accuracy]" -->
-    <!-- powerRequirement is defined in android.location.Criteria
-         0 = NO_REQUIREMENT / 1 = POWER_LOW / 2 = POWER_MEDIUM / 3 = POWER_HIGH -->
-    <!-- accuracy is defined in anroid.location.Criteria
-         1 = ACCURACY_FINE / 2 = ACCURACY_COARSE -->
-    <string-array name="config_testLocationProviders" translatable="false">
-        <!-- Example test network location provider
-        <item>network,false,false,false,false,true,true,true,1,2</item>
-        -->
-    </string-array>
-
-    <!-- Boolean indicating if current platform supports bluetooth SCO for off call
-    use cases -->
-    <bool name="config_bluetooth_sco_off_call">true</bool>
-
-    <!-- Boolean indicating if current platform supports bluetooth wide band
-         speech -->
-    <bool name="config_bluetooth_wide_band_speech">true</bool>
-
-    <!-- Boolean indicating if current platform need do one-time bluetooth address
-         re-validation -->
-    <bool name="config_bluetooth_address_validation">false</bool>
-
-    <!-- Boolean indicating if current platform supports BLE peripheral mode -->
-    <bool name="config_bluetooth_le_peripheral_mode_supported">false</bool>
-
-    <!-- Max number of scan filters supported by blutooth controller. 0 if the
-         device does not support hardware scan filters-->
-    <integer translatable="false" name="config_bluetooth_max_scan_filters">0</integer>
-
-    <!-- Max number of advertisers supported by bluetooth controller. 0 if the
-         device does not support multiple advertisement-->
-    <integer translatable="false" name="config_bluetooth_max_advertisers">0</integer>
-
-    <!-- Idle current for bluetooth controller. 0 by default-->
-    <integer translatable="false" name="config_bluetooth_idle_cur_ma">1</integer>
-
-    <!-- Rx current for bluetooth controller. 0 by default-->
-    <integer translatable="false" name="config_bluetooth_rx_cur_ma">2</integer>
-
-    <!-- Tx current for bluetooth controller. 0 by default-->
-    <integer translatable="false" name="config_bluetooth_tx_cur_ma">3</integer>
-
-    <!-- Operating volatage for bluetooth controller. 0 by default-->
-    <integer translatable="false" name="config_bluetooth_operating_voltage_mv">4</integer>
-
-    <!-- Whether supported profiles should be reloaded upon enabling bluetooth -->
-    <bool name="config_bluetooth_reload_supported_profiles_when_enabled">false</bool>
-
-    <!-- The default data-use polling period. -->
-    <integer name="config_datause_polling_period_sec">600</integer>
-
-    <!-- The default data-use threshold in bytes. 0 disables-->
-    <integer name="config_datause_threshold_bytes">0</integer>
-
-    <!-- The default reduced-datarate value in kilobits per sec -->
-    <integer name="config_datause_throttle_kbitsps">300</integer>
-
-    <!-- The default iface on which to monitor data use -->
-    <string name="config_datause_iface" translatable="false">rmnet0</string>
-
-    <!-- The default reduced-datarate notification mask -->
-    <!-- 2 means give warning -->
-    <integer name="config_datause_notification_type">2</integer>
-
-    <!-- If Voice Radio Technology is RIL_RADIO_TECHNOLOGY_LTE:14 or
-         RIL_RADIO_TECHNOLOGY_UNKNOWN:0 this is the value that should be used instead.
-         A configuration value of RIL_RADIO_TECHNOLOGY_UNKNOWN:0 means
-         there is no replacement value and that the default assumption
-         for phone type (GSM) should be used. -->
-    <integer name="config_volte_replacement_rat">0</integer>
-
-    <!-- Flag indicating whether the current device is "voice capable".
-         If true, this means that the device supports circuit-switched
-         (i.e. voice) phone calls over the telephony network, and is
-         allowed to display the in-call UI while a cellular voice call is
-         active.  This can be overridden to false for "data only" devices
-         which can't make voice calls and don't support any in-call UI.
-
-         Note: this flag is subtly different from the
-         PackageManager.FEATURE_TELEPHONY system feature, which is
-         available on *any* device with a telephony radio, even if the
-         device is data-only. -->
-    <bool name="config_voice_capable">true</bool>
-
-    <!-- Flag indicating that an outbound call must have a call capable phone account
-         that has declared it can process the call's handle. -->
-    <bool name="config_requireCallCapableAccountForHandle">false</bool>
-
-    <!-- Flag indicating if the user is notified when the mobile network access is restricted -->
-    <bool name="config_user_notification_of_restrictied_mobile_access">true</bool>
-
-    <!-- Flag indicating whether the current device allows sms service.
-         If true, this means that the device supports both sending and
-         receiving sms via the telephony network.
-         This can be overridden to false for "data only" devices
-         which can't send and receive sms message.
-
-         Note: Disable SMS also disable voicemail waiting sms,
-               cell broadcasting sms, and MMS. -->
-    <bool name="config_sms_capable">true</bool>
-
-    <!-- Default SMS Application. This will be the default SMS application when
-         the phone first boots. The user can then change the default app to one
-         of their choosing.
-         This can be overridden for devices where a different default SMS
-         application is desired.
-
-         If this string is empty or the specified package does not exist, then
-         the platform will search for an SMS app and use that (if there is one)-->
-    <string name="default_sms_application" translatable="false">com.android.mms</string>
-
-    <!-- Default web browser.  This is the package name of the application that will
-         be the default browser when the device first boots.  Afterwards the user
-         can select whatever browser app they wish to use as the default.
-
-         If this string is empty or the specified package does not exist, then
-         the behavior will be as though no app was named as an explicit default. -->
-    <string name="default_browser" translatable="false"></string>
-
-    <!-- Enable/disable default bluetooth profiles:
-        HSP_AG, ObexObjectPush, Audio, NAP -->
-    <bool name="config_bluetooth_default_profiles">true</bool>
-
-    <!-- IP address of the dns server to use if nobody else suggests one -->
-    <string name="config_default_dns_server" translatable="false">8.8.8.8</string>
-
-    <!-- The default mobile provisioning apn. Empty by default, maybe overridden by
-         an mcc/mnc specific config.xml -->
-    <string name="mobile_provisioning_apn" translatable="false"></string>
-
-    <!-- The default mobile provisioning url. Empty by default, maybe overridden by
-         an mcc/mnc specific config.xml -->
-    <string name="mobile_provisioning_url" translatable="false"></string>
-
-    <!-- The default character set for GsmAlphabet -->
-    <!-- Empty string means MBCS is not considered -->
-    <string name="gsm_alphabet_default_charset" translatable="false"></string>
-
-    <!-- Enables SIP on WIFI only -->
-    <bool name="config_sip_wifi_only">false</bool>
-
-    <!-- Enables built-in SIP phone capability -->
-    <bool name="config_built_in_sip_phone">true</bool>
-
-    <!-- Boolean indicating if restoring network selection should be skipped -->
-    <!-- The restoring is handled by modem if it is true-->
-    <bool translatable="false" name="skip_restoring_network_selection">true</bool>
-
-    <!-- Maximum number of database connections opened and managed by framework layer
-         to handle queries on each database when using Write-Ahead Logging. -->
-    <integer name="db_connection_pool_size">4</integer>
-
-    <!-- The default journal mode to use use when Write-Ahead Logging is not active.
-         Choices are: OFF, DELETE, TRUNCATE, PERSIST and MEMORY.
-         PERSIST may improve performance by reducing how often journal blocks are
-         reallocated (compared to truncation) resulting in better data block locality
-         and less churn of the storage media. -->
-    <string name="db_default_journal_mode" translatable="false">PERSIST</string>
-
-    <!-- Maximum size of the persistent journal file in bytes.
-         If the journal file grows to be larger than this amount then SQLite will
-         truncate it after committing the transaction. -->
-    <integer name="db_journal_size_limit">524288</integer>
-
-    <!-- The database synchronization mode when using the default journal mode.
-         FULL is safest and preserves durability at the cost of extra fsyncs.
-         NORMAL also preserves durability in non-WAL modes and uses checksums to ensure
-         integrity although there is a small chance that an error might go unnoticed.
-         Choices are: FULL, NORMAL, OFF. -->
-    <string name="db_default_sync_mode" translatable="false">FULL</string>
-
-    <!-- The database synchronization mode when using Write-Ahead Logging.
-         FULL is safest and preserves durability at the cost of extra fsyncs.
-         NORMAL sacrifices durability in WAL mode because syncs are only performed before
-         and after checkpoint operations.  If checkpoints are infrequent and power loss
-         occurs, then committed transactions could be lost and applications might break.
-         Choices are: FULL, NORMAL, OFF. -->
-    <string name="db_wal_sync_mode" translatable="false">FULL</string>
-
-    <!-- The Write-Ahead Log auto-checkpoint interval in database pages (typically 1 to 4KB).
-         The log is checkpointed automatically whenever it exceeds this many pages.
-         When a database is reopened, its journal mode is set back to the default
-         journal mode, which may cause a checkpoint operation to occur.  Checkpoints
-         can also happen at other times when transactions are committed.
-         The bigger the WAL file, the longer a checkpoint operation takes, so we try
-         to keep the WAL file relatively small to avoid long delays.
-         The size of the WAL file is also constrained by 'db_journal_size_limit'. -->
-    <integer name="db_wal_autocheckpoint">100</integer>
-
-    <!-- Max space (in MB) allocated to DownloadManager to store the downloaded
-         files if they are to be stored in DownloadManager's data dir,
-         which typically is /data/data/com.android.providers.downloads/files -->
-    <integer name="config_downloadDataDirSize">200</integer>
-
-    <!-- Max number of downloads allowed to proceed concurrently -->
-    <integer name="config_MaxConcurrentDownloadsAllowed">5</integer>
-
-    <!-- When the free space available in DownloadManager's data dir falls
-         below the percentage value specified by this param, DownloadManager
-         starts removing files to try to make percentage of available
-         free space above this threshold value. -->
-    <integer name="config_downloadDataDirLowSpaceThreshold">10</integer>
-
-    <!-- The URL that should be sent in an x-wap-profile header with an HTTP request,
-         as defined in the Open Mobile Alliance User Agent Profile specification
-         OMA-TS-UAProf-V2_0-20060206-A Section 8.1.1.1. If the URL contains a '%s'
-         format string then that substring will be replaced with the value of
-         Build.MODEL. The format string shall not be escaped. -->
-    <string name="config_useragentprofile_url" translatable="false"></string>
-
-    <!-- When a database query is executed, the results retuned are paginated
-         in pages of size (in KB) indicated by this value -->
-    <integer name="config_cursorWindowSize">2048</integer>
-
-    <!-- Sets whether menu shortcuts should be displayed on panel menus when
-         a keyboard is present. -->
-    <bool name="config_showMenuShortcutsWhenKeyboardPresent">false</bool>
-
-    <!-- Do not translate. Defines the slots is Two Digit Number for dialing normally not USSD -->
-    <string-array name="config_twoDigitNumberPattern" translatable="false">
-    </string-array>
-
-    <!-- The VoiceMail default value is displayed to my own number if it is true -->
-    <bool name="config_telephony_use_own_number_for_voicemail">false</bool>
-
-    <!-- If this value is true, Sms encoded as octet is decoded by utf8 decoder.
-         If false, decoded by Latin decoder. -->
-    <bool name="config_sms_utf8_support">false</bool>
-
-    <!-- If this value is true, The mms content-disposition field is supported correctly.
-         If false, Content-disposition fragments are ignored -->
-    <bool name="config_mms_content_disposition_support">true</bool>
-
-    <!-- MMS user agent string -->
-    <string name="config_mms_user_agent" translatable="false">5058A-MMS/2.0</string>
-
-    <!-- MMS user agent prolfile url -->
-    <string name="config_mms_user_agent_profile_url" translatable="false">http://www-ccpp.tcl-ta.com/files/5058a.xml</string>
-
-    <!-- National Language Identifier codes for the following two config items.
-         (from 3GPP TS 23.038 V9.1.1 Table 6.2.1.2.4.1):
-          0  - reserved
-          1  - Turkish
-          2  - Spanish (single shift table only)
-          3  - Portuguese
-          4  - Bengali
-          5  - Gujarati
-          6  - Hindi
-          7  - Kannada
-          8  - Malayalam
-          9  - Oriya
-         10  - Punjabi
-         11  - Tamil
-         12  - Telugu
-         13  - Urdu
-         14+ - reserved -->
-
-    <!-- National language single shift tables to enable for SMS encoding.
-         Decoding is always enabled. 3GPP TS 23.038 states that this feature
-         should not be enabled until a formal request is issued by the relevant
-         national regulatory body. Array elements are codes from the table above.
-         Example 1: devices sold in Turkey must include table 1 to conform with
-           By-Law Number 27230. (http://www.btk.gov.tr/eng/pdf/2009/BY-LAW_SMS.pdf)
-         Example 2: devices sold in India should include tables 4 through 13
-           to enable use of the new Release 9 tables for Indic languages. -->
-    <integer-array name="config_sms_enabled_single_shift_tables"></integer-array>
-
-    <!-- National language locking shift tables to enable for SMS encoding.
-         Decoding is always enabled. 3GPP TS 23.038 states that this feature
-         should not be enabled until a formal request is issued by the relevant
-         national regulatory body. Array elements are codes from the table above.
-         Example 1: devices sold in Turkey must include table 1 after the
-           Turkish Telecommunication Authority requires locking shift encoding
-           to be enabled (est. July 2012). (http://www.btk.gov.tr/eng/pdf/2009/BY-LAW_SMS.pdf)
-           See also: http://www.mobitech.com.tr/tr/ersanozturkblog_en/index.php?entry=entry090223-160014
-         Example 2: devices sold in India should include tables 4 through 13
-         to enable use of the new Release 9 tables for Indic languages. -->
-    <integer-array name="config_sms_enabled_locking_shift_tables"></integer-array>
-
-    <!-- Set to true if the RSSI should always display CDMA signal strength even on EVDO -->
-    <bool name="config_alwaysUseCdmaRssi">false</bool>
-
-
-    <!-- If this value is true, duplicate Source/Destination port fields
-         in WDP header of some carriers OMADM wap push are supported.
-         ex: MSGTYPE-TotalSegments-CurrentSegment
-             -SourcePortDestPort-SourcePortDestPort-OMADM PDU
-         If false, not supported. -->
-    <bool name="config_duplicate_port_omadm_wappush">false</bool>
-
-    <!-- Maximum numerical value that will be shown in a status bar
-         notification icon or in the notification itself. Will be replaced
-         with @string/status_bar_notification_info_overflow when shown in the
-         UI. -->
-    <integer name="status_bar_notification_info_maxnum">999</integer>
-
-    <!-- Path to an ISO image to be shared with via USB mass storage.
-         This is intended to allow packaging drivers or tools for installation on a PC. -->
-    <string translatable="false" name="config_isoImagePath"></string>
-
-    <!-- Whether a software navigation bar should be shown. NOTE: in the future this may be
-         autodetected from the Configuration. -->
-    <bool name="config_showNavigationBar">false</bool>
-
-    <!-- Whether action menu items should be displayed in ALLCAPS or not.
-         Defaults to true. If this is not appropriate for specific locales
-         it should be disabled in that locale's resources. -->
-    <bool name="config_actionMenuItemAllCaps">true</bool>
-
-    <!-- Remote server that can provide NTP responses. -->
-    <string translatable="false" name="config_ntpServer">south-america.pool.ntp.org</string>
-    <!-- Normal polling frequency in milliseconds -->
-    <integer name="config_ntpPollingInterval">86400000</integer>
-    <!-- Try-again polling interval in milliseconds, in case the network request failed -->
-    <integer name="config_ntpPollingIntervalShorter">60000</integer>
-    <!-- Number of times to try again with the shorter interval, before backing
-         off until the normal polling interval. A value < 0 indicates infinite. -->
-    <integer name="config_ntpRetry">3</integer>
-    <!-- If the time difference is greater than this threshold in milliseconds,
-         then update the time. -->
-    <integer name="config_ntpThreshold">5000</integer>
-    <!-- Timeout to wait for NTP server response in milliseconds. -->
-    <integer name="config_ntpTimeout">5000</integer>
-
-    <!-- Default network policy warning threshold, in megabytes. -->
-    <integer name="config_networkPolicyDefaultWarning">2048</integer>
-
-    <!-- Set and Unsets WiMAX -->
-    <bool name="config_wimaxEnabled">false</bool>
-    <!-- Location of the wimax framwork jar location -->
-    <string name="config_wimaxServiceJarLocation" translatable="false"></string>
-    <!-- Location of the wimax native library locaiton -->
-    <string name="config_wimaxNativeLibLocation" translatable="false"></string>
-    <!-- Name of the wimax manager class -->
-    <string name="config_wimaxManagerClassname" translatable="false"></string>
-    <!-- Name of the wimax service class -->
-    <string name="config_wimaxServiceClassname" translatable="false"></string>
-    <!-- Name of the wimax state tracker clas -->
-    <string name="config_wimaxStateTrackerClassname" translatable="false"></string>
-
-    <!-- Specifies whether the dreams feature should be supported.
-         When true, the system will allow the user to configure dreams (screensavers)
-         to launch when a user activity timeout occurs or the system is told to nap.
-         When false, the dreams feature will be disabled (this does not affect dozing).
-
-         Consider setting this resource to false or disabling dreams by default when a
-         doze component is specified below since dreaming will supercede dozing and
-         will prevent the system from entering a low power state until the dream ends. -->
-    <bool name="config_dreamsSupported">true</bool>
-
-    <!-- If supported, are dreams enabled? (by default) -->
-    <bool name="config_dreamsEnabledByDefault">true</bool>
-    <!-- If supported and enabled, are dreams activated when docked? (by default) -->
-    <bool name="config_dreamsActivatedOnDockByDefault">true</bool>
-    <!-- If supported and enabled, are dreams activated when asleep and charging? (by default) -->
-    <bool name="config_dreamsActivatedOnSleepByDefault">false</bool>
-    <!-- ComponentName of the default dream (Settings.Secure.DEFAULT_SCREENSAVER_COMPONENT) -->
-
-    <string name="config_dreamsDefaultComponent" translatable="false">com.android.deskclock/com.android.deskclock.Screensaver</string>
-
-    <!-- Are we allowed to dream while not plugged in? -->
-    <bool name="config_dreamsEnabledOnBattery">false</bool>
-    <!-- Minimum battery level to allow dreaming when powered.
-         Use -1 to disable this safety feature. -->
-    <integer name="config_dreamsBatteryLevelMinimumWhenPowered">-1</integer>
-    <!-- Minimum battery level to allow dreaming when not powered.
-         Use -1 to disable this safety feature. -->
-    <integer name="config_dreamsBatteryLevelMinimumWhenNotPowered">15</integer>
-    <!-- If the battery level drops by this percentage and the user activity timeout
-         has expired, then assume the device is receiving insufficient current to charge
-         effectively and terminate the dream.  Use -1 to disable this safety feature.  -->
-    <integer name="config_dreamsBatteryLevelDrainCutoff">5</integer>
-
-    <!-- ComponentName of a dream to show whenever the system would otherwise have
-         gone to sleep.  When the PowerManager is asked to go to sleep, it will instead
-         try to start this dream if possible.  The dream should typically call startDozing()
-         to put the display into a low power state and allow the application processor
-         to be suspended.  When the dream ends, the system will go to sleep as usual.
-         Specify the component name or an empty string if none.
-
-         Note that doze dreams are not subject to the same start conditions as ordinary dreams.
-         Doze dreams will run whenever the power manager is in a dozing state. -->
-    <string name="config_dozeComponent" translatable="false"></string>
-
-    <!-- If true, the doze component is not started until after the screen has been
-         turned off and the screen off animation has been performed. -->
-    <bool name="config_dozeAfterScreenOff">false</bool>
-
-    <!-- Doze: should the TYPE_PICK_UP_GESTURE sensor be used as a pulse signal. -->
-    <bool name="config_dozePulsePickup">false</bool>
-
-    <!-- Type of the double tap sensor. Empty if double tap is not supported. -->
-    <string name="config_dozeDoubleTapSensorType" translatable="false"></string>
-
-    <!-- Power Management: Specifies whether to decouple the auto-suspend state of the
-         device from the display on/off state.
-
-         When false, autosuspend_disable() will be called before the display is turned on
-         and autosuspend_enable() will be called after the display is turned off.
-         This mode provides best compatibility for devices using legacy power management
-         features such as early suspend / late resume.
-
-         When true, autosuspend_display() and autosuspend_enable() will be called
-         independently of whether the display is being turned on or off.  This mode
-         enables the power manager to suspend the application processor while the
-         display is on.
-
-         This resource should be set to "true" when a doze component has been specified
-         to maximize power savings but not all devices support it.
-
-         Refer to autosuspend.h for details.
-    -->
-    <bool name="config_powerDecoupleAutoSuspendModeFromDisplay">true</bool>
-
-    <!-- Power Management: Specifies whether to decouple the interactive state of the
-         device from the display on/off state.
-
-         When false, setInteractive(..., true) will be called before the display is turned on
-         and setInteractive(..., false) will be called after the display is turned off.
-         This mode provides best compatibility for devices that expect the interactive
-         state to be tied to the display state.
-
-         When true, setInteractive(...) will be called independently of whether the display
-         is being turned on or off.  This mode enables the power manager to reduce
-         clocks and disable the touch controller while the display is on.
-
-         This resource should be set to "true" when a doze component has been specified
-         to maximize power savings but not all devices support it.
-
-         Refer to power.h for details.
-    -->
-    <bool name="config_powerDecoupleInteractiveModeFromDisplay">true</bool>
-
-    <!-- User activity timeout: Minimum screen off timeout in milliseconds.
-
-         Sets a lower bound for the {@link Settings.System#SCREEN_OFF_TIMEOUT} setting
-         which determines how soon the device will go to sleep when there is no
-         user activity.
-
-         This value must be greater than zero, otherwise the device will immediately
-         fall asleep again as soon as it is awoken.
-    -->
-    <integer name="config_minimumScreenOffTimeout">10000</integer>
-
-    <!-- User activity timeout: Maximum screen dim duration in milliseconds.
-
-         Sets an upper bound for how long the screen will dim before the device goes
-         to sleep when there is no user activity.  The dim duration is subtracted from
-         the overall screen off timeout to determine the screen dim timeout.
-         When the screen dim timeout expires, the screen will dim, shortly thereafter
-         the device will go to sleep.
-
-         If the screen off timeout is very short, the dim duration may be reduced
-         proportionally.  See config_maximumScreenDimRatio.
-
-         This value may be zero in which case the screen will not dim before the
-         device goes to sleep.
-    -->
-    <integer name="config_maximumScreenDimDuration">7000</integer>
-
-    <!-- User activity timeout: Maximum screen dim duration as a percentage of screen off timeout.
-
-         This resource is similar to config_maximumScreenDimDuration but the maximum
-         screen dim duration is defined as a ratio of the overall screen off timeout
-         instead of as an absolute value in milliseconds.  This is useful for reducing
-         the dim duration when the screen off timeout is very short.
-
-         When computing the screen dim duration, the power manager uses the lesser
-         of the effective durations expressed by config_maximumScreenDimDuration and
-         config_maximumScreenDimRatio.
-
-         This value must be between 0% and 100%.  If the value is zero, the screen will not
-         dim before the device goes to sleep.
-    -->
-    <fraction name="config_maximumScreenDimRatio">20%</fraction>
-
-    <!-- Base "touch slop" value used by ViewConfiguration as a
-         movement threshold where scrolling should begin. -->
-    <dimen name="config_viewConfigurationTouchSlop">8dp</dimen>
-
-    <!-- Minimum velocity to initiate a fling, as measured in dips per second. -->
-    <dimen name="config_viewMinFlingVelocity">50dp</dimen>
-
-    <!-- Maximum velocity to initiate a fling, as measured in dips per second. -->
-    <dimen name="config_viewMaxFlingVelocity">8000dp</dimen>
-
-    <!-- Amount of time in ms the user needs to press the relevant key to bring up the global actions dialog -->
-    <integer name="config_globalActionsKeyTimeout">500</integer>
-
-    <!-- Maximum number of grid columns permitted in the ResolverActivity
-         used for picking activities to handle an intent. -->
-    <integer name="config_maxResolverActivityColumns">3</integer>
-
-    <!-- Array of OEM specific USB mode override config.
-         OEM can override a certain USB mode depending on ro.bootmode.
-         Specify an array of below items to set override rule.
-         [bootmode]:[original USB mode]:[USB mode used]-->
-    <integer-array translatable="false" name="config_oemUsbModeOverride">
-    </integer-array>
-
-    <!-- Set to true to add links to Cell Broadcast app from Settings and MMS app. -->
-    <bool name="config_cellBroadcastAppLinks">false</bool>
-
-    <!-- The default value if the SyncStorageEngine should sync automatically or not -->
-    <bool name="config_syncstorageengine_masterSyncAutomatically">true</bool>
-
-    <!--  Google defalut -->
-    <!--  Maximum number of supported users -->
-    <!-- <integer name="config_multiuserMaximumUsers">1</integer> -->
-
-    <!-- Whether UI for multi user should be shown -->
-    <!-- <bool name="config_enableMultiUserUI">false</bool> -->
-
-    <!--  Enable multiuser for CTS Verifier -->
-    <!--  Maximum number of supported users -->
-    <integer name="config_multiuserMaximumUsers">4</integer>
-
-    <!-- Whether UI for multi user should be shown -->
-    <bool name="config_enableMultiUserUI">true</bool>
-
-    <!-- If true, then we do not ask user for permission for apps to connect to USB devices.
-         Do not set this to true for production devices. Doing so will cause you to fail CTS. -->
-    <bool name="config_disableUsbPermissionDialogs">false</bool>
-
-    <!-- Minimum span needed to begin a touch scaling gesture.
-         If the span is equal to or greater than this size, a scaling gesture
-         will begin, where supported. (See android.view.ScaleGestureDetector)
-
-         This also takes into account the size of any active touch points.
-         Devices with screens that deviate too far from their assigned density
-         bucket should consider tuning this value in a device-specific overlay.
-         For best results, care should be taken such that this value remains
-         larger than the minimum reported touchMajor/touchMinor values
-         reported by the hardware. -->
-    <dimen name="config_minScalingSpan">27mm</dimen>
-
-    <!-- Minimum accepted value for touchMajor while scaling. This may be tuned
-         per-device in overlays. -->
-    <dimen name="config_minScalingTouchMajor">48dp</dimen>
-
-    <!-- Safe headphone volume index. When music stream volume is below this index
-    the SPL on headphone output is compliant to EN 60950 requirements for portable music
-    players. -->
-    <integer name="config_safe_media_volume_index">12</integer>
-
-    <!-- Configure mobile network MTU. The standard default is set here but each carrier
-         may have a specific value set in an overlay config.xml file. -->
-    <integer name="config_mobile_mtu">1500</integer>
-
-    <!-- Configure mobile tcp buffer sizes in the form:
-         rat-name:rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max
-         If no value is found for the rat-name in use, the system default will be applied.
-    -->
-    <string-array name="config_mobile_tcp_buffers">
-    </string-array>
-
-    <!-- Configure ethernet tcp buffersizes in the form:
-         rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max -->
-    <string name="config_ethernet_tcp_buffers" translatable="false">524288,1048576,3145728,524288,1048576,2097152</string>
-
-    <!-- Configure wifi tcp buffersizes in the form:
-         rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max -->
-    <string name="config_wifi_tcp_buffers" translatable="false">524288,1048576,2097152,262144,524288,1048576</string>
-
-    <!-- Whether WiFi display is supported by this device.
-         There are many prerequisites for this feature to work correctly.
-         Here are a few of them:
-         * The WiFi radio must support WiFi P2P.
-         * The WiFi radio must support concurrent connections to the WiFi display and
-           to an access point.
-         * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix"
-           remote submix module.  This module is used to record and stream system
-           audio output to the WiFi display encoder in the media server.
-         * The remote submix module "audio.r_submix.default" must be installed on the device.
-         * The device must be provisioned with HDCP keys (for protected content).
-    -->
-    <bool name="config_enableWifiDisplay">false</bool>
-
-    <!-- When true, local displays that do not contain any of their own content will automatically
-         mirror the content of the default display. -->
-    <bool name="config_localDisplaysMirrorContent">true</bool>
-
-    <!-- When true use the linux /dev/input/event subsystem to detect the switch changes
-         on the headphone/microphone jack. When false use the older uevent framework. -->
-    <bool name="config_useDevInputEventForAudioJack">false</bool>
-
-    <!-- Whether safe headphone volume is enabled or not (country specific). -->
-    <bool name="config_safe_media_volume_enabled">true</bool>
-
-    <!-- Set to true if the wifi display supports compositing content stored
-         in gralloc protected buffers.  For this to be true, there must exist
-         a protected hardware path for surface flinger to composite and send
-         protected buffers to the wifi display video encoder.
-
-         If this flag is false, we advise applications not to use protected
-         buffers (if possible) when presenting content to a wifi display because
-         the content may be blanked.
-
-         This flag controls whether the {@link Display#FLAG_SUPPORTS_PROTECTED_BUFFERS}
-         flag is set for wifi displays.
-    -->
-    <bool name="config_wifiDisplaySupportsProtectedBuffers">false</bool>
-
-    <!-- Whether camera shutter sound is forced or not  (country specific). -->
-    <bool name="config_camera_sound_forced">false</bool>
-
-    <!-- Set to true if we need to not prefer an APN.
-         This is being added to enable a simple scenario of pre-paid
-         provisioning on some carriers, working around a bug (7305641)
-         where if the preferred is used we don't try the others. -->
-    <bool name="config_dontPreferApn">false</bool>
-
-    <!-- The list of ril radio technologies (see ServiceState.java) which only support
-         a single data connection at one time.  This may change by carrier via
-         overlays (some don't support multiple pdp on UMTS).  All unlisted radio
-         tech types support unlimited types (practically only 2-4 used). -->
-    <integer-array name="config_onlySingleDcAllowed">
-        <item>4</item>  <!-- IS95A -->
-        <item>5</item>  <!-- IS95B -->
-        <item>6</item>  <!-- 1xRTT -->
-        <item>7</item>  <!-- EVDO_0 -->
-        <item>8</item>  <!-- EVDO_A -->
-        <item>12</item> <!-- EVDO_B -->
-    </integer-array>
-
-    <!-- Set to true if after a provisioning apn the radio should be restarted -->
-    <bool name="config_restartRadioAfterProvisioning">false</bool>
-
-    <!-- Boolean indicating if RADIO POWER OFF is required on receiving SIM REFRESH with RESET.
-         This will be handled by modem if it is false. -->
-    <bool name="config_requireRadioPowerOffOnSimRefreshReset">false</bool>
-
-    <!-- Vibrator pattern to be used as the default for notifications
-         that specify DEFAULT_VIBRATE.
-     -->
-    <integer-array name="config_defaultNotificationVibePattern">
-        <item>0</item>
-        <item>350</item>
-        <item>250</item>
-        <item>350</item>
-    </integer-array>
-
-    <!-- Vibrator pattern to be used as the default for notifications
-         that do not specify vibration but vibrate anyway because the device
-         is in vibrate mode.
-     -->
-    <integer-array name="config_notificationFallbackVibePattern">
-        <item>0</item>
-        <item>100</item>
-        <item>150</item>
-        <item>100</item>
-    </integer-array>
-
-    <!-- Flag indicating if the speed up audio on mt call code should be executed -->
-    <bool name="config_speed_up_audio_on_mt_calls">false</bool>
-
-    <!-- Class name of the framework account picker activity.
-         Can be customized for other product types -->
-    <string name="config_chooseAccountActivity" translatable="false"
-            >android/android.accounts.ChooseAccountActivity</string>
-    <!-- Class name of the account type and account picker activity.
-         Can be customized for other product types -->
-    <string name="config_chooseTypeAndAccountActivity" translatable="false"
-            >android/android.accounts.ChooseTypeAndAccountActivity</string>
-
-    <!-- Component name of a custom ResolverActivity (Intent resolver) to be used instead of
-         the default framework version. If left empty, then the framework version will be used.
-         Example: com.google.android.myapp/.resolver.MyResolverActivity  -->
-    <string name="config_customResolverActivity" translatable="false"></string>
-
-    <!-- Name of the activity or service that prompts the user to reject, accept, or whitelist
-         an adb host's public key, when an unwhitelisted host connects to the local adbd.
-         Can be customized for other product types -->
-    <string name="config_customAdbPublicKeyConfirmationComponent"
-            >com.android.systemui/com.android.systemui.usb.UsbDebuggingActivity</string>
-
-    <!-- Name of the activity that prompts the secondary user to acknowledge she/he needs to
-         switch to the primary user to enable USB debugging.
-         Can be customized for other product types -->
-    <string name="config_customAdbPublicKeyConfirmationSecondaryUserComponent"
-            >com.android.systemui/com.android.systemui.usb.UsbDebuggingSecondaryUserActivity</string>
-
-    <!-- Name of the CustomDialog that is used for VPN -->
-    <string name="config_customVpnConfirmDialogComponent"
-            >com.android.vpndialogs/com.android.vpndialogs.ConfirmDialog</string>
-
-    <!-- Apps that are authorized to access shared accounts, overridden by product overlays -->
-    <string name="config_appsAuthorizedForSharedAccounts" translatable="false">;com.android.settings;</string>
-
-    <!-- Flag indicating that the media framework should not allow changes or mute on any
-         stream or master volumes. -->
-    <bool name="config_useFixedVolume">false</bool>
-
-    <!-- The list of IMEs which should be disabled until used.
-         This function suppresses update notifications for these pre-installed apps.
-         We need to set this configuration carefully that they should not have functionarities
-         other than "IME" or "Spell Checker". In InputMethodManagerService,
-         the listed IMEs are disabled until used when all of the following conditions are met.
-         1. Not selected as an enabled IME in the Settings
-         2. Not selected as a spell checker in the Settings
-         3. Installed
-         4. A pre-installed IME
-         5. Not enabled
-         And the disabled_until_used state for an IME is released by InputMethodManagerService
-         when the IME is selected as an enabled IME. -->
-    <string-array name="config_disabledUntilUsedPreinstalledImes" translatable="false">
-        <item>com.android.inputmethod.latin</item>
-    </string-array>
-
-    <!-- The list of carrier applications which should be disabled until used.
-         This function suppresses update notifications for these pre-installed apps.
-         In SubscriptionInfoUpdater, the listed applications are disabled until used when all of the
-         following conditions are met.
-         1. Not currently carrier-privileged according to the inserted SIM
-         2. Pre-installed
-         3. In the default state (enabled but not explicitly)
-         And SubscriptionInfoUpdater undoes this and marks the app enabled when a SIM is inserted
-         that marks the app as carrier privileged. It also grants the app default permissions
-         for Phone and Location. As such, apps MUST only ever be added to this list if they
-         obtain user consent to access their location through other means. -->
-    <string-array name="config_disabledUntilUsedPreinstalledCarrierApps" translatable="false" />
-
-    <!-- The list of classes that should be added to the notification ranking pipline.
-     See {@link com.android.server.notification.NotificationSignalExtractor} -->
-    <string-array name="config_notificationSignalExtractors">
-        <item>com.android.server.notification.ValidateNotificationPeople</item>
-        <item>com.android.server.notification.PriorityExtractor</item>
-        <item>com.android.server.notification.ImportanceExtractor</item>
-        <item>com.android.server.notification.NotificationIntrusivenessExtractor</item>
-        <item>com.android.server.notification.VisibilityExtractor</item>
-    </string-array>
-
-    <!-- Flag indicating that this device does not rotate and will always remain in its default
-         orientation. Activities that desire to run in a non-compatible orientation will be run
-         from an emulated display within the physical display. -->
-    <bool name="config_forceDefaultOrientation">false</bool>
-
-    <!-- Default Gravity setting for the system Toast view. Equivalent to: Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM -->
-    <integer name="config_toastDefaultGravity">0x00000051</integer>
-
-    <!-- set to false if we need to show user confirmation
-         when alpha identifier is not provided by the UICC -->
-    <bool name="config_stkNoAlphaUsrCnf">true</bool>
-
-    <!-- Don't use roaming icon for considered operators.
-         A match on config_sameNamedOperatorConsideredRoaming supersedes a match on this.
-         Can use mcc or mcc+mnc as item. For example, 302 or 21407.
-         If operators, 21404 and 21407, make roaming agreements, user of 21404 should not see
-         the roaming icon as using 21407 network.
-         To do this, add 21407 item to values-mcc214-mnc04/config.xml -->
-    <string-array translatable="false" name="config_operatorConsideredNonRoaming">
-    </string-array>
-
-    <!-- Threshold (in ms) under which a screen off / screen on will be considered a reset of the
-         immersive mode confirmation prompt.-->
-    <integer name="config_immersive_mode_confirmation_panic">5000</integer>
-
-    <!-- For some operators, PDU has garbages. To fix it, need to use valid index -->
-    <integer name="config_valid_wappush_index">-1</integer>
-
-    <!-- This is NOT just for same named operators unlike the name suggests (will blacklist regardless of name).
-         A match on this supersedes a match on config_operatorConsideredNonRoaming.
-         Uses "startsWith" so you can use a leading substring like the mcc or
-         use the complete mcc+mnc string.
-         For a given mcc/mcc-mnc, some operators may want to roam (even if
-         config_operatorConsideredNonRoaming has the mcc/mcc-mnc).
-         user of 40485 should see the roaming icon as using 40483 network
-         though same Reliance network.
-         To do this, add 40483 item to values-mcc404-mnc85/config.xml -->
-    <string-array translatable="false" name="config_sameNamedOperatorConsideredRoaming">
-    </string-array>
-    <!-- call barring MMI code from TS 22.030 Annex B -->
-    <string-array translatable="false" name="config_callBarringMMI">
-        <item>33</item>
-        <item>331</item>
-        <item>332</item>
-        <item>35</item>
-        <item>351</item>
-        <item>330</item>
-        <item>333</item>
-        <item>353</item>
-    </string-array>
-
-    <!-- Override the default detection behavior for the framework method
-         android.view.ViewConfiguration#hasPermanentMenuKey().
-         Valid settings are:
-         0 - No change. Use the default autodetection behavior.
-         1 - The device DOES have a permanent menu key; ignore autodetection.
-         2 - The device DOES NOT have a permanent menu key; ignore autodetection. -->
-    <integer name="config_overrideHasPermanentMenuKey">0</integer>
-
-    <!-- Override the DPad detection behavior for configuration purposes -->
-    <bool name="config_hasPermanentDpad">false</bool>
-
-    <!-- default window inset isRound property -->
-    <bool name="config_windowIsRound">false</bool>
-
-    <!-- Override this value if the device has a chin, i.e. area that is not actual part of the
-         screen but you would like to be treated as a real display. The value is the height of the
-         chin. -->
-    <integer name="config_windowOutsetBottom">0</integer>
-
-    <!-- Package name for default network scorer app; overridden by product overlays. -->
-    <string name="config_defaultNetworkScorerPackageName"></string>
-
-    <!-- default device has recents property -->
-    <bool name="config_hasRecents">true</bool>
-
-    <!-- default window ShowCircularMask property -->
-    <bool name="config_windowShowCircularMask">false</bool>
-
-    <!-- default value for whether circular emulators (ro.emulator.circular)
-         should show a display overlay on the screen -->
-    <bool name="config_windowEnableCircularEmulatorDisplayOverlay">false</bool>
-
-    <!-- Defines the default set of global actions. Actions may still be disabled or hidden based
-         on the current state of the device.
-         Each item must be one of the following strings:
-         "power" = Power off
-         "settings" = An action to launch settings
-         "airplane" = Airplane mode toggle
-         "bugreport" = Take bug report, if available
-         "silent" = silent mode
-         "users" = list of users
-         "restart" = restart device
-         -->
-    <string-array translatable="false" name="config_globalActionsList">
-        <item>restart</item>
-        <item>power</item>
-        <item>bugreport</item>
-        <item>users</item>
-        <item>airplane</item>
-    </string-array>
-
-    <!-- Number of milliseconds to hold a wake lock to ensure that drawing is fully
-         flushed to the display while dozing.  This value needs to be large enough
-         to account for processing and rendering time plus a frame or two of latency
-         in the display pipeline plus some slack just to be sure. -->
-    <integer name="config_drawLockTimeoutMillis">120</integer>
-
-    <!-- default telephony hardware configuration for this platform.
-    -->
-    <!-- this string array should be overridden by the device to present a list
-         telephony hardware resource.  this is used by the telephony device controller
-         (TDC) to offer the basic capabilities of the hardware to the telephony
-         framework
-    -->
-    <!-- an array of "[hardware type],[hardware-uuid],[state],[[hardware-type specific]]"
-         with, [[hardware-type specific]] in:
-            - "[[ril-model],[rat],[max-active-voice],[max-active-data],[max-active-standby]]"
-              for 'modem' hardware
-            - "[[associated-modem-uuid]]"
-              for 'sim' hardware.
-         refer to HardwareConfig in com.android.internal.telephony for specific details/values
-         those elements can carry.
-    -->
-    <string-array translatable="false" name="config_telephonyHardware">
-        <!-- modem -->
-        <!-- sim -->
-    </string-array>
-
-    <!-- This string array can be overriden to add an additional DRM support for WebView EME. -->
-    <!-- Array of "[keySystemName],[UuidOfMediaDrm]" @hide @SystemApi -->
-    <string-array name="config_keySystemUuidMapping" translatable="false">
-        <!-- Example:
-        <item>"x-com.microsoft.playready,9A04F079-9840-4286-AB92-E65BE0885F95"</item>
-        -->
-    </string-array>
-
-    <!-- Flag indicating which package name can access the persistent data partition -->
-    <string name="config_persistentDataPackageName" translatable="false">com.google.android.gms</string>
-
-    <!-- Flag indicating apps will skip sending hold request before merge. In this case
-        IMS service implementation will do both.i.e.hold followed by merge. -->
-    <bool name="skipHoldBeforeMerge">true</bool>
-
-    <!-- Flag indicating whether the IMS service can be turned off. If false then
-        the service will not be turned-off completely (the ImsManager.turnOffIms() will
-        be disabled) but individual Features can be disabled using ImsConfig.setFeatureValue() -->
-    <bool name="imsServiceAllowTurnOff">true</bool>
-
-    <!-- Flag specifying whether VoLTE is available on device -->
-    <!-- M: Defalut disable, and enable by mcc-mnc compliance -->
-    <bool name="config_device_volte_available">false</bool>
-
-    <!-- Flag specifying whether VoLTE should be available for carrier: independent of
-         carrier provisioning. If false: hard disabled. If true: then depends on carrier
-         provisioning, availability etc -->
-    <bool name="config_carrier_volte_available">false</bool>
-
-    <!-- Flag specifying whether VoLTE availability is based on provisioning -->
-    <bool name="config_carrier_volte_provisioned">false</bool>
-
-    <!-- Flag specifying whether VoLTE TTY is supported -->
-    <bool name="config_carrier_volte_tty_supported">true</bool>
-
-    <!-- Flag specifying whether VT is available on device -->
-    <!-- M: Defalut disable, and enable by mcc-mnc compliance -->
-    <bool name="config_device_vt_available">false</bool>
-
-    <!-- Flag specifying whether the device will use the "allow_hold_in_ims_call" carrier config
-         option.  When false, the device will support holding of IMS calls, regardless of the
-         carrier config setting. -->
-    <bool name="config_device_respects_hold_carrier_config">true</bool>
-
-    <!-- Flag specifying whether VT should be available for carrier: independent of
-         carrier provisioning. If false: hard disabled. If true: then depends on carrier
-         provisioning, availability etc -->
-    <bool name="config_carrier_vt_available">false</bool>
-
-    <!-- Flag specifying whether WFC over IMS is available on device -->
-    <!-- M: Defalut disable, and enable by mcc-mnc compliance -->
-    <bool name="config_device_wfc_ims_available">false</bool>
-
-    <!-- Flag specifying whether WFC over IMS should be available for carrier: independent of
-         carrier provisioning. If false: hard disabled. If true: then depends on carrier
-         provisioning, availability etc -->
-    <bool name="config_carrier_wfc_ims_available">false</bool>
-
-    <bool name="config_networkSamplingWakesDevice">true</bool>
-
-    <string-array translatable="false" name="config_cdma_home_system" />
-
-    <!--From SmsMessage-->
-    <!--Support decoding the user data payload as pack GSM 8-bit (a GSM alphabet
-        string that's stored in 8-bit unpacked format) characters.-->
-    <bool translatable="false" name="config_sms_decode_gsm_8bit_data">false</bool>
-
-    <!-- If EMS is not supported, framework breaks down EMS into single segment SMS
-         and adds page info " x/y". This config is used to set which carrier doesn't
-         support EMS and whether page info should be added at the beginning or the end.
-         We use tag 'prefix' for position beginning and 'suffix' for position end.
-         And use gid to distinguish different carriers which using same mcc and mnc.
-         Examples: <item>simOperatorNumber;position;gid(optional)</item>>
-    -->
-    <string-array translatable="false" name="no_ems_support_sim_operators">
-        <!-- VZW -->
-        <item>20404;suffix;BAE0000000000000</item>
-    </string-array>
-
-    <bool name="config_auto_attach_data_on_creation">true</bool>
-
-    <!-- Values for GPS configuration -->
-    <string-array translatable="false" name="config_gpsParameters">
-        <item>SUPL_HOST=supl.google.com</item>
-        <item>SUPL_PORT=7275</item>
-        <item>NTP_SERVER=north-america.pool.ntp.org</item>
-        <item>SUPL_VER=0x20000</item>
-        <item>SUPL_MODE=1</item>
-    </string-array>
-
-    <!-- If there is no preload VM number in the sim card, carriers such as
-         Verizon require to load a default vm number from the configurantion.
-         Define config_default_vm_number for this purpose. And there are two
-         optional formats for this configuration as below:
-         (1)<item>voicemail number</item>
-         (2)<item>voicemail number;gid</item>
-         The logic to pick up the correct voicemail number:
-         (1) If the config_default_vm_number array has no gid special item, the last one will be
-         picked
-         (2) If the config_default_vm_number array has gid special item and  it matches the current
-         sim's gid, it will be picked.
-         (3) If the config_default_vm_number array has gid special item but it doesn't match the
-         current sim's gid, the last one without gid will be picked -->
-    <string-array translatable="false" name="config_default_vm_number" />
-
-    <!-- Sprint need a 70 ms delay for 3way call -->
-    <integer name="config_cdma_3waycall_flash_delay">0</integer>
-
-    <!--SIM does not save, but the voice mail number to be changed. -->
-    <bool name="editable_voicemailnumber">false</bool>
-
-    <!-- service number convert map in roaming network. -->
-    <!-- [dialstring],[replacement][,optional gid] -->
-    <string-array translatable="false" name="dial_string_replace">
-    </string-array>
-
-    <!-- Flag indicating whether radio is to be restarted on the error of
-         PDP_FAIL_REGULAR_DEACTIVATION/0x24 -->
-    <bool name="config_restart_radio_on_pdp_fail_regular_deactivation">false</bool>
-
-    <!-- networks that don't want data deactivate when shutdown the phone
-         note this is dependent on the operator of the network we're on,
-         not operator on the SIM -->
-    <string-array translatable="false" name="networks_not_clear_data">
-        <item>71203</item>
-        <item>71606</item>
-        <item>71610</item>
-        <item>732101</item>
-    </string-array>
-
-    <!-- Config determines whether to update phone object when voice registration
-         state changes. Voice radio tech change will always trigger an update of
-         phone object irrespective of this config -->
-    <bool name="config_switch_phone_on_voice_reg_state_change">false</bool>
-
-    <bool name="config_sms_force_7bit_encoding">false</bool>
-
-    <!-- Flag indicating whether strict threshold is used, or lenient threshold is used,
-          when evaluating RSRP for LTE antenna bar display
-           0. Strict threshold
-           1. Lenient threshold
-    -->
-    <integer name="config_LTE_RSRP_threshold_type">1</integer>
-
-    <!-- Enabled built-in zen mode condition providers -->
-    <string-array translatable="false" name="config_system_condition_providers">
-        <item>countdown</item>
-        <item>schedule</item>
-        <item>event</item>
-    </string-array>
-
-    <!-- Priority repeat caller threshold, in minutes -->
-    <integer name="config_zen_repeat_callers_threshold">15</integer>
-
-    <!-- Flags enabling default window features. See Window.java -->
-    <bool name="config_defaultWindowFeatureOptionsPanel">true</bool>
-    <bool name="config_defaultWindowFeatureContextMenu">true</bool>
-
-    <!-- If true, the transition for a RemoteViews is read from a resource instead of using the
-         default scale-up transition. -->
-    <bool name="config_overrideRemoteViewsActivityTransition">false</bool>
-
-    <!-- This config is used to check if the carrier requires converting destination
-         number before sending out a SMS.
-         Formats for this configuration as below:
-         [true or false][;optional gid]
-         The logic to pick up the configuration:
-         (1) If the "config_sms_convert_destination_number_support" array has no gid
-             special item, the last one will be picked
-         (2) If the "config_sms_convert_destination_number_support" array has gid special
-             item and it matches the current sim's gid, it will be picked.
-         (3) If the "config_sms_convert_destination_number_support" array has gid special
-             item but it doesn't match the current sim's gid, the last one without gid
-             will be picked -->
-    <string-array translatable="false" name="config_sms_convert_destination_number_support">
-        <item>false</item>
-    </string-array>
-
-    <!-- The maximum bitmap size that can be written to a MediaMetadata object. This value
-         is the max width/height allowed in dips.-->
-    <dimen name="config_mediaMetadataBitmapMaxSize">320dp</dimen>
-
-    <string translatable="false" name="prohibit_manual_network_selection_in_gobal_mode">false</string>
-
-    <!-- An array of CDMA roaming indicators which means international roaming -->
-    <integer-array translatable="false" name="config_cdma_international_roaming_indicators" />
-
-    <!-- flag to indicate if EF LI/EF PL should be used for system language -->
-    <bool name="config_use_sim_language_file">false</bool>
-
-    <!-- Use ERI text for network name on CDMA LTE -->
-    <bool name="config_LTE_eri_for_network_name">true</bool>
-
-    <!-- Whether to start in touch mode -->
-    <bool name="config_defaultInTouchMode">true</bool>
-
-    <!-- Time adjustment, in milliseconds, applied to the default double tap threshold
-         used for gesture detection by the screen magnifier. -->
-    <integer name="config_screen_magnification_multi_tap_adjustment">-50</integer>
-
-    <!-- Scale factor threshold used by the screen magnifier to determine when to switch from
-         panning to scaling the magnification viewport. -->
-    <item name="config_screen_magnification_scaling_threshold" format="float" type="dimen">0.3</item>
-
-    <!-- If true, the display will be shifted around in ambient mode. -->
-    <bool name="config_enableBurnInProtection">false</bool>
-
-    <!-- Specifies the maximum burn-in offset displacement from the center. If -1, no maximum value
-         will be used. -->
-    <integer name="config_burnInProtectionMaxRadius">-1</integer>
-
-    <!-- Specifies the minimum burn-in offset horizontally. -->
-    <integer name="config_burnInProtectionMinHorizontalOffset">0</integer>
-
-    <!-- Specifies the maximum burn-in offset horizontally. -->
-    <integer name="config_burnInProtectionMaxHorizontalOffset">0</integer>
-
-    <!-- Specifies the minimum burn-in offset vertically. -->
-    <integer name="config_burnInProtectionMinVerticalOffset">0</integer>
-
-    <!-- Specifies the maximum burn-in offset vertically. -->
-    <integer name="config_burnInProtectionMaxVerticalOffset">0</integer>
-
-    <!-- Keyguard component -->
-    <string name="config_keyguardComponent" translatable="false">com.android.systemui/com.android.systemui.keyguard.KeyguardService</string>
-
-    <!-- For performance and storage reasons, limit the number of fingerprints per user -->
-    <integer name="config_fingerprintMaxTemplatesPerUser">5</integer>
-
-    <!-- This config is used to force VoiceInteractionService to start on certain low ram devices.
-         It declares the package name of VoiceInteractionService that should be started. -->
-    <string translatable="false" name="config_forceVoiceInteractionServicePackage"></string>
-
-    <!-- This config is ued to determine whether animations are allowed in low power mode. -->
-    <bool name="config_allowAnimationsInLowPowerMode">false</bool>
-
-    <!-- Whether device supports double tap to wake -->
-    <bool name="config_supportDoubleTapWake">false</bool>
-
-    <!-- The RadioAccessFamilies supported by the device.
-         Empty is viewed as "all".  Only used on devices which
-         don't support RIL_REQUEST_GET_RADIO_CAPABILITY
-         format is UMTS|LTE|... -->
-    <string translatable="false" name="config_radio_access_family"></string>
-
-    <!-- Whether the main built-in display is round. This will affect
-         Configuration.screenLayout's SCREENLAYOUT_ROUND_MASK flags for Configurations on the
-         main built-in display. Change this in device-specific overlays.
-         Defaults to the older, deprecated config_windowIsRound already used in
-         some existing device-specific resource overlays. -->
-    <bool name="config_mainBuiltInDisplayIsRound">@bool/config_windowIsRound</bool>
-
-    <!-- Ultrasound support for Mic/speaker path -->
-    <!-- Whether the default microphone audio source supports near-ultrasound frequencies
-         (range of 18 - 21 kHz). -->
-    <bool name="config_supportMicNearUltrasound">true</bool>
-    <!-- Whether the default speaker audio output path supports near-ultrasound frequencies
-         (range of 18 - 21 kHz). -->
-    <bool name="config_supportSpeakerNearUltrasound">true</bool>
-
-    <!-- Whether the Unprocessed audio source supports the required frequency range and level -->
-    <bool name="config_supportAudioSourceUnprocessed">true</bool>
-
-    <!-- Flag indicating device support for EAP SIM, AKA, AKA' -->
-    <bool name="config_eap_sim_based_auth_supported">true</bool>
-
-    <!-- How long history of previous vibrations should be kept for the dumpsys. -->
-    <integer name="config_previousVibrationsDumpLimit">20</integer>
-
-    <!-- Number of retries Cell Data should attempt for a given error code before
-         restarting the modem.
-         Error codes not listed will not lead to modem restarts.
-         Array of "code#,retry#"  -->
-    <string-array name="config_cell_retries_per_error_code">
-    </string-array>
-
-    <!-- Set initial MaxRetry value for operators -->
-    <integer name="config_mdc_initial_max_retry">1</integer>
-
-    <!-- The OEM specified sensor type for the gesture to launch the camera app. -->
-    <integer name="config_cameraLaunchGestureSensorType">-1</integer>
-    <!-- The OEM specified sensor string type for the gesture to launch camera app, this value
-         must match the value of config_cameraLaunchGestureSensorType in OEM's HAL -->
-    <string translatable="false" name="config_cameraLaunchGestureSensorStringType"></string>
-
-    <!-- Allow the gesture to double tap the power button twice to start the camera while the device
-         is non-interactive. -->
-    <bool name="config_cameraDoubleTapPowerGestureEnabled">true</bool>
-
-    <!-- Name of the component to handle network policy notifications. If present,
-         disables NetworkPolicyManagerService's presentation of data-usage notifications. -->
-    <string translatable="false" name="config_networkPolicyNotificationComponent"></string>
-
-    <!-- The BT name of the keyboard packaged with the device. If this is defined, SystemUI will
-         automatically try to pair with it when the device exits tablet mode. -->
-    <string translatable="false" name="config_packagedKeyboardName"></string>
-
-    <!-- The device supports freeform window management. Windows have title bars and can be moved
-         and resized. If you set this to true, you also need to add
-         PackageManager.FEATURE_FREEFORM_WINDOW_MANAGEMENT feature to your device specification.
-         The duplication is necessary, because this information is used before the features are
-         available to the system.-->
-    <bool name="config_freeformWindowManagement">false</bool>
-
-    <!-- If set, this will force all windows to draw the status bar background, including the apps
-         that have not requested doing so (via the WindowManager.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS
-         flag). -->
-    <bool name="config_forceWindowDrawsStatusBarBackground">true</bool>
-
-    <!-- Controls the opacity of the navigation bar depending on the visibility of the
-         various workspace stacks.
-         0 - Nav bar is always opaque when either the freeform stack or docked stack is visible.
-         1 - Nav bar is always translucent when the freeform stack is visible, otherwise always
-         opaque.
-         -->
-    <integer name="config_navBarOpacityMode">0</integer>
-
-    <!-- Default bounds [left top right bottom] on screen for picture-in-picture windows. -->
-    <string translatable="false" name="config_defaultPictureInPictureBounds">"0 0 100 100"</string>
-
-    <!-- Controls the snap mode for the docked stack divider
-             0 - 3 snap targets: left/top has 16:9 ratio, 1:1, and right/bottom has 16:9 ratio
-             1 - 3 snap targets: fixed ratio, 1:1, (1 - fixed ratio)
-             2 - 1 snap target: 1:1
-    -->
-    <integer name="config_dockedStackDividerSnapMode">0</integer>
-
-    <!-- List of comma separated package names for which we the system will not show crash, ANR,
-         etc. dialogs. -->
-    <string translatable="false" name="config_appsNotReportingCrashes"></string>
-
-    <!-- Inactivity threshold (in milliseconds) used in JobScheduler. JobScheduler will consider
-         the device to be "idle" after being inactive for this long. -->
-    <integer name="config_jobSchedulerInactivityIdleThreshold">4260000</integer>
-    <!-- The alarm window (in milliseconds) that JobScheduler uses to enter the idle state -->
-    <integer name="config_jobSchedulerIdleWindowSlop">300000</integer>
-
-    <!-- If true, all guest users created on the device will be ephemeral. -->
-    <bool name="config_guestUserEphemeral">false</bool>
-
-    <!-- Enforce strong auth on boot. Setting this to false represents a security risk and should
-         not be ordinarily done. The only case in which this might be permissible is in a car head
-         unit where there are hardware mechanisms to protect the device (physical keys) and not
-         much in the way of user data.
-    -->
-    <bool name="config_strongAuthRequiredOnBoot">true</bool>
-
-    <!-- Wallpaper cropper package. Used as the default cropper if the active launcher doesn't
-         handle wallpaper cropping.
-    -->
-    <string name="config_wallpaperCropperPackage" translatable="false">com.android.wallpaperpicker</string>
-
-    <!-- True if the device supports at least one form of multi-window.
-         E.g. freeform, split-screen, picture-in-picture. -->
-    <bool name="config_supportsMultiWindow">true</bool>
-
-    <!-- True if the device requires AppWidgetService even if it does not have
-         the PackageManager.FEATURE_APP_WIDGETS feature -->
-    <bool name="config_enableAppWidgetService">false</bool>
-
-    <!-- True if the device supports Sustained Performance Mode-->
-    <bool name="config_sustainedPerformanceModeSupported">false</bool>
-
-    <!-- File used to enable the double touch gesture.
-         TODO: move to input HAL once ready. -->
-    <string name="config_doubleTouchGestureEnableFile"></string>
-
-    <!-- Controls how we deal with externally connected physical keyboards.
-         0 - When using this device, it is not clear for users to recognize when the physical
-             keyboard is (should be) connected and when it is (should be) disconnected.  Most of
-             phones and tablets with Bluetooth keyboard would fall into this category because the
-             connected Bluetooth keyboard may or may not be nearby the host device.
-         1 - When using this device, it is clear for users to recognize when the physical
-             keyboard is (should be) connected and when it is (should be) disconnected.
-             Devices with wired USB keyboard is one clear example.  Some 2-in-1 convertible
-             tablets with dedicated keyboards may have the same affordance to wired USB keyboard.
-    -->
-    <integer name="config_externalHardKeyboardBehavior">0</integer>
-
-    <!-- Package of the unbundled tv remote service which can connect to tv
-         remote provider -->
-    <string name="config_tvRemoteServicePackage" translatable="false"></string>
-
-    <!-- True if the device supports persisting security logs across reboots.
-         This requires the device's kernel to have pstore and pmsg enabled,
-         and DRAM to be powered and refreshed through all stages of reboot. -->
-    <bool name="config_supportPreRebootSecurityLogs">false</bool>
-
-    <!-- Default files to pin via Pinner Service -->
-    <string-array translatable="false" name="config_defaultPinnerServiceFiles">
-    </string-array>
-
-    <!-- True if camera app should be pinned via Pinner Service -->
-    <bool name="config_pinnerCameraApp">false</bool>
-
-    <!-- Component that is the default launcher when demo mode is enabled. -->
-    <string name="config_demoModeLauncherComponent">com.android.retaildemo/.DemoPlayer</string>
-
-    <!-- Flag indicating whether round icons should be parsed from the application manifest. -->
-    <bool name="config_useRoundIcon">false</bool>
-
-    <!-- Flag indicating whether the assist disclosure can be disabled using
-         ASSIST_DISCLOSURE_ENABLED. -->
-    <bool name="config_allowDisablingAssistDisclosure">false</bool>
-
-    <!-- True if the device supports system navigation keys. -->
-    <bool name="config_supportSystemNavigationKeys">false</bool>
-
-    <!-- emergency call number for the emergency affordance -->
-    <string name="config_emergency_call_number" translatable="false">112</string>
-
-    <!-- Do not translate. Mcc codes whose existence trigger the presence of emergency
-         affordances-->
-    <integer-array name="config_emergency_mcc_codes" translatable="false">
-        <item>404</item>
-        <item>405</item>
-    </integer-array>
-
-    <!-- Package name for the device provisioning package. -->
-    <string name="config_deviceProvisioningPackage"></string>
-
-    <!-- Colon separated list of package names that should be granted DND access -->
-    <string name="config_defaultDndAccessPackages" translatable="false">com.android.camera2</string>
-
-    <!-- User restrictions set when the first user is created.
-         Note: Also update appropriate overlay files. -->
-    <string-array translatable="false" name="config_defaultFirstUserRestrictions">
-    </string-array>
-
-    <!-- A array of regex to treat a SMS as VVM SMS if the message body matches.
-         Each item represents an entry, which consists of two parts:
-         a comma (,) separated list of MCCMNC the regex applies to, followed by a semicolon (;), and
-         then the regex itself. -->
-    <string-array translatable="false" name="config_vvmSmsFilterRegexes">
-        <!-- Verizon requires any SMS that starts with //VZWVVM to be treated as a VVM SMS-->
-        <item>310004,310010,310012,310013,310590,310890,310910,311110,311270,311271,311272,311273,311274,311275,311276,311277,311278,311279,311280,311281,311282,311283,311284,311285,311286,311287,311288,311289,311390,311480,311481,311482,311483,311484,311485,311486,311487,311488,311489;^//VZWVVM.*</item>
-    </string-array>
-    <!-- This config is holding calling number conversion map - expected to convert to emergency
-         number. Formats for this config as below:
-         <item>[dialstring1],[dialstring2],[dialstring3]:[replacement]</item>
-
-         E.g. for Taiwan Type Approval, 110 and 119 should be converted to 112.
-         <item>110,119:112</item>
-    -->
-    <string-array translatable="false" name="config_convert_to_emergency_number_map" />
-
-    <!-- An array of packages for which notifications cannot be blocked. -->
-    <string-array translatable="false" name="config_nonBlockableNotificationPackages" />
-	
-	<bool name="def_cb_channel_50_behaviour_brazil">true</bool>
-</resources>
Index: vendor/branch/5058A_Claro/frameworks/base/packages/Keyguard/src/com/android/keyguard/EmergencyButton.java
===================================================================
--- vendor/branch/5058A_Claro/frameworks/base/packages/Keyguard/src/com/android/keyguard/EmergencyButton.java	(revision 3017)
+++ vendor/branch/5058A_Claro/frameworks/base/packages/Keyguard/src/com/android/keyguard/EmergencyButton.java	(revision 3018)
@@ -1,393 +0,0 @@
-/*
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.keyguard;
-
-import android.app.ActivityManagerNative;
-import android.app.ActivityOptions;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.TypedArray;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.os.PowerManager;
-import android.os.RemoteException;
-import android.os.ServiceManager;
-import android.os.SystemClock;
-import android.os.UserHandle;
-import android.telecom.TelecomManager;
-
-import android.telephony.ServiceState;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.util.Slog;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewConfiguration;
-import android.widget.Button;
-
-import com.android.internal.logging.MetricsLogger;
-import com.android.internal.logging.MetricsProto.MetricsEvent;
-import com.android.internal.telephony.IccCardConstants.State;
-import com.android.internal.widget.LockPatternUtils;
-import com.android.internal.policy.EmergencyAffordanceManager;
-
-import com.mediatek.internal.telephony.ITelephonyEx;
-import com.mediatek.keyguard.AntiTheft.AntiTheftManager;
-import com.mediatek.keyguard.Plugin.KeyguardPluginFactory;
-import com.mediatek.keyguard.ext.IEmergencyButtonExt;
-
-/**
- * This class implements a smart emergency button that updates itself based
- * on telephony state.  When the phone is idle, it is an emergency call button.
- * When there's a call in progress, it presents an appropriate message and
- * allows the user to return to the call.
- */
-public class EmergencyButton extends Button {
-    private static final Intent INTENT_EMERGENCY_DIAL = new Intent()
-            .setAction("com.android.phone.EmergencyDialer.DIAL")
-            .setPackage("com.android.phone")
-            .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
-                    | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS
-                    | Intent.FLAG_ACTIVITY_CLEAR_TOP);
-
-    /// M: add for phoneId in Ecc intent in none security mode
-    private int mEccPhoneIdForNoneSecurityMode = -1;
-
-    ///M : Added for operator feature. This will help to check the position
-    // of current ECC button(i.e. Notification Keyguard or Bouncer)
-    private boolean mLocateAtNonSecureView = false ;
-
-    private static final String LOG_TAG = "EmergencyButton";
-    private final EmergencyAffordanceManager mEmergencyAffordanceManager;
-
-    private int mDownX;
-    private int mDownY;
-    KeyguardUpdateMonitorCallback mInfoCallback = new KeyguardUpdateMonitorCallback() {
-
-        @Override
-        public void onSimStateChanged(int subId, int slotId, State simState) {
-            updateEmergencyCallButton();
-        }
-
-
-        @Override
-        public void onSimStateChangedUsingPhoneId(int phoneId, State simState) {
-            Log.d(LOG_TAG, "onSimStateChangedUsingSubId: " + simState + ", phoneId=" + phoneId);
-            updateEmergencyCallButton();
-        }
-
-        @Override
-        public void onPhoneStateChanged(int phoneState) {
-            updateEmergencyCallButton();
-        }
-
-        /// M: CTA new feature
-        @Override
-        public void onRefreshCarrierInfo() {
-            updateEmergencyCallButton();
-        }
-    };
-    private boolean mLongPressWasDragged;
-
-    public interface EmergencyButtonCallback {
-        public void onEmergencyButtonClickedWhenInCall();
-    }
-
-    private LockPatternUtils mLockPatternUtils;
-    private PowerManager mPowerManager;
-
-    /// M: For the extra info of the intent to start emergency dialer
-    private IEmergencyButtonExt mEmergencyButtonExt;
-
-    private EmergencyButtonCallback mEmergencyButtonCallback;
-
-    private final boolean mIsVoiceCapable;
-    private final boolean mEnableEmergencyCallWhileSimLocked;
-
-    public EmergencyButton(Context context) {
-        this(context, null);
-    }
-
-    public EmergencyButton(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        mIsVoiceCapable = context.getResources().getBoolean(
-                com.android.internal.R.bool.config_voice_capable);
-        mEnableEmergencyCallWhileSimLocked = mContext.getResources().getBoolean(
-                com.android.internal.R.bool.config_enable_emergency_call_while_sim_locked);
-        mEmergencyAffordanceManager = new EmergencyAffordanceManager(context);
-
-        /// M: Init keyguard operator plugin @{
-        try {
-            mEmergencyButtonExt = KeyguardPluginFactory.getEmergencyButtonExt(context);
-        } catch (Exception e) {
-            Log.d(LOG_TAG, "EmergencyButton() - error in calling getEmergencyButtonExt().") ;
-            e.printStackTrace();
-        }
-        /// @}
-
-        TypedArray localAtNonSecureValue =
-                context.obtainStyledAttributes(attrs, R.styleable.ECCButtonAttr);
-        mLocateAtNonSecureView = localAtNonSecureValue.getBoolean(
-                R.styleable.ECCButtonAttr_locateAtNonSecureView, mLocateAtNonSecureView);
-        localAtNonSecureValue = null;
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        KeyguardUpdateMonitor.getInstance(mContext).registerCallback(mInfoCallback);
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        KeyguardUpdateMonitor.getInstance(mContext).removeCallback(mInfoCallback);
-    }
-
-    @Override
-    protected void onFinishInflate() {
-        super.onFinishInflate();
-        mLockPatternUtils = new LockPatternUtils(mContext);
-        mPowerManager = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
-        setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                takeEmergencyCallAction();
-            }
-        });
-
-        /// M: Save secure query result here, when lockscreen is created, secure result should
-        /// stay unchanged @{
-        mIsSecure = mLockPatternUtils.isSecure(KeyguardUpdateMonitor.getCurrentUser());
-        /// @}
-        setOnLongClickListener(new OnLongClickListener() {
-            @Override
-            public boolean onLongClick(View v) {
-                if (!mLongPressWasDragged
-                        && mEmergencyAffordanceManager.needsEmergencyAffordance()) {
-                    mEmergencyAffordanceManager.performEmergencyCall();
-                    return true;
-                }
-                return false;
-            }
-        });
-        updateEmergencyCallButton();
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        final int x = (int) event.getX();
-        final int y = (int) event.getY();
-        if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
-            mDownX = x;
-            mDownY = y;
-            mLongPressWasDragged = false;
-        } else {
-            final int xDiff = Math.abs(x - mDownX);
-            final int yDiff = Math.abs(y - mDownY);
-            int touchSlop = ViewConfiguration.get(mContext).getScaledTouchSlop();
-            if (Math.abs(yDiff) > touchSlop || Math.abs(xDiff) > touchSlop) {
-                mLongPressWasDragged = true;
-            }
-        }
-        return super.onTouchEvent(event);
-    }
-
-    @Override
-    public boolean performLongClick() {
-        return super.performLongClick();
-    }
-
-    @Override
-    protected void onConfigurationChanged(Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        ///M: fix ALPS01969662, force to reload string when config(locale) changed.
-        setText(R.string.kg_emergency_call_label);
-        updateEmergencyCallButton();
-    }
-
-    /**
-     * Shows the emergency dialer or returns the user to the existing call.
-     */
-    public void takeEmergencyCallAction() {
-        MetricsLogger.action(mContext, MetricsEvent.ACTION_EMERGENCY_CALL);
-        // TODO: implement a shorter timeout once new PowerManager API is ready.
-        // should be the equivalent to the old userActivity(EMERGENCY_CALL_TIMEOUT)
-        mPowerManager.userActivity(SystemClock.uptimeMillis(), true);
-        try {
-            ActivityManagerNative.getDefault().stopSystemLockTaskMode();
-        } catch (RemoteException e) {
-            Slog.w(LOG_TAG, "Failed to stop app pinning");
-        }
-        if (isInCall()) {
-            resumeCall();
-            if (mEmergencyButtonCallback != null) {
-                mEmergencyButtonCallback.onEmergencyButtonClickedWhenInCall();
-            }
-        } else {
-            KeyguardUpdateMonitor.getInstance(mContext).reportEmergencyCallAction(
-                    true /* bypassHandler */);
-
-            /// --------------- L PreMigration ------------
-            /// M: Fill the extra info the intent to start emergency dialer.
-            /// M: add for Ecc intent in none security mode
-            int phoneId = getCurPhoneId();
-            if (phoneId == -1) {
-                phoneId = mEccPhoneIdForNoneSecurityMode;
-            }
-            mEmergencyButtonExt.customizeEmergencyIntent(INTENT_EMERGENCY_DIAL, phoneId);
-            /// --------------- L PreMigration ------------
-
-            getContext().startActivityAsUser(INTENT_EMERGENCY_DIAL,
-                    ActivityOptions.makeCustomAnimation(getContext(), 0, 0).toBundle(),
-                    new UserHandle(KeyguardUpdateMonitor.getCurrentUser()));
-        }
-    }
-
-    private void updateEmergencyCallButton() {
-        boolean visible = false;
-        /// M: remove mIsVoiceCapable qualification @{
-        //if (mIsVoiceCapable) {
-            // Emergency calling requires voice capability.
-            if (isInCall()) {
-                visible = true; // always show "return to call" if phone is off-hook
-            } else if (mLockPatternUtils.isEmergencyCallCapable()) {
-                final boolean simLocked = KeyguardUpdateMonitor.getInstance(mContext)
-                        .isSimPinVoiceSecure();
-                if (simLocked) {
-                    // Some countries can't handle emergency calls while SIM is locked.
-                    visible = mEnableEmergencyCallWhileSimLocked;
-                } else {
-                    // Only show if there is a secure screen (pin/pattern/SIM pin/SIM puk);
-                    visible = mLockPatternUtils.isSecure(KeyguardUpdateMonitor.getCurrentUser());
-                }
-            }
-
-            boolean show = false ;
-
-            /// M: If antitheft lock is on, we should also show ECC button @{
-            boolean antiTheftLocked = AntiTheftManager.isAntiTheftLocked();
-            /// M:CTA new feature
-           // boolean eccShouldShow = eccButtonShouldShow();
-           boolean eccShouldShow = true;
-
-            Log.i(LOG_TAG, "mLocateAtNonSecureView = " + mLocateAtNonSecureView) ;
-
-            if (mLocateAtNonSecureView && !mEmergencyButtonExt.showEccInNonSecureUnlock()) {
-                Log.i(LOG_TAG, "ECC Button is located on Notification Keygaurd and OP do not ask"
-                        + " to show. So this is a normal case ,we never show it.") ;
-                show = false ;
-            } else {
-                show = (visible || antiTheftLocked
-                        || mEmergencyButtonExt.showEccInNonSecureUnlock())
-                        && eccShouldShow;
-
-                Log.i(LOG_TAG, "show = " + show + " --> visible= " + visible + ", antiTheftLocked="
-                    + antiTheftLocked + ", mEmergencyButtonExt.showEccInNonSecureUnlock() ="
-                    + mEmergencyButtonExt.showEccInNonSecureUnlock() + ", eccShouldShow="
-                    + eccShouldShow);
-            }
-
-            if (mLocateAtNonSecureView && !show) {
-                Log.i(LOG_TAG, "If the button is on NotificationKeyguard and will not show," +
-                    " we should just set it View.GONE to give more space to IndicationText.") ;
-                this.setVisibility(View.GONE);
-            } else {
-                mLockPatternUtils.updateEmergencyCallButtonState(this, show, false);
-            }
-
-        //}
-        /// @}
-    }
-
-    public void setCallback(EmergencyButtonCallback callback) {
-        mEmergencyButtonCallback = callback;
-    }
-
-    /**
-     * Resumes a call in progress.
-     */
-    private void resumeCall() {
-        getTelecommManager().showInCallScreen(false);
-    }
-
-    /**
-     * @return {@code true} if there is a call currently in progress.
-     */
-    private boolean isInCall() {
-        return getTelecommManager().isInCall();
-    }
-
-    private TelecomManager getTelecommManager() {
-        return (TelecomManager) mContext.getSystemService(Context.TELECOM_SERVICE);
-    }
-
-    /// M: CTA new feature
-    private boolean eccButtonShouldShow() {
-        Bundle bd = null;
-        int phoneCount = KeyguardUtils.getNumOfPhone();
-        boolean[] isServiceSupportEcc = new boolean[phoneCount];
-
-        try {
-            ITelephonyEx phoneEx = ITelephonyEx.Stub.asInterface(
-                    ServiceManager.checkService("phoneEx"));
-
-            if (phoneEx != null) {
-                /// M: add for Ecc intent in none security mode
-                mEccPhoneIdForNoneSecurityMode = -1;
-                for (int i = 0; i < phoneCount; i++) {
-                    int subId = KeyguardUtils.getSubIdUsingPhoneId(i);
-                    bd = phoneEx.getServiceState(subId);
-                    if (bd != null) {
-                        ServiceState ss = ServiceState.newFromBundle(bd);
-                        Log.i(LOG_TAG, "ss.getState()=" + ss.getState() + " ss.isEmergencyOnly()="
-                                + ss.isEmergencyOnly() + " for simId=" + i);
-                        if (ServiceState.STATE_IN_SERVICE == ss.getState()
-                                || ss.isEmergencyOnly()) {  //Full service or Limited service
-                            isServiceSupportEcc[i] = true;
-                            /// M: add for Ecc intent in none security mode
-                            if (mEccPhoneIdForNoneSecurityMode == -1) {
-                                mEccPhoneIdForNoneSecurityMode = i;
-                            }
-                        } else {
-                            isServiceSupportEcc[i] = false;
-                        }
-                    }
-                }
-            }
-        } catch (RemoteException e) {
-            Log.i(LOG_TAG, "getServiceState error e:" + e.getMessage());
-        }
-
-        return mEmergencyButtonExt.showEccByServiceState(isServiceSupportEcc, getCurPhoneId());
-    }
-
-    /// M: Optimization, save lockpatternUtils's isSecure state
-    private boolean mIsSecure;
-
-    /**
-     * M: Add for operator customization.
-     * Get current sim slot id of PIN/PUK lock via security mode.
-     *
-     * @return Current sim phone id,
-     *      return 0-3, current lockscreen is PIN/PUK,
-     *      return -1, current lockscreen is not PIN/PUK.
-     */
-    private int getCurPhoneId() {
-        KeyguardSecurityModel securityModel = new KeyguardSecurityModel(mContext);
-        return securityModel.getPhoneIdUsingSecurityMode(securityModel.getSecurityMode());
-    }
-}
Index: vendor/branch/5058A_Claro/frameworks/base/packages/SettingsProvider/res/values/defaults.xml
===================================================================
--- vendor/branch/5058A_Claro/frameworks/base/packages/SettingsProvider/res/values/defaults.xml	(revision 3017)
+++ vendor/branch/5058A_Claro/frameworks/base/packages/SettingsProvider/res/values/defaults.xml	(revision 3018)
@@ -1,237 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-/**
- * Copyright (c) 2009, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
--->
-<resources>
-    <bool name="def_dim_screen">true</bool>
-    <integer name="def_screen_off_timeout">60000</integer>
-    <integer name="def_sleep_timeout">-1</integer>
-    <!-- add  for battery percentage -->
-    <integer name="battery_power_percentage_enable">1</integer>
-    <bool name="def_airplane_mode_on">false</bool>
-    <bool name="def_theater_mode_on">false</bool>
-    <!-- Comma-separated list of bluetooth, wifi, and cell. -->
-    <string name="def_airplane_mode_radios" translatable="false">cell,bluetooth,wifi,nfc,wimax</string>
-    <string name="airplane_mode_toggleable_radios" translatable="false">bluetooth,wifi,nfc</string>
-    <string name="def_bluetooth_disabled_profiles" translatable="false">0</string>
-    <bool name="def_auto_time">true</bool>
-    <bool name="def_auto_time_zone">true</bool>
-    <bool name="def_accelerometer_rotation">true</bool>
-    <!-- Default screen brightness, from 0 to 255.  102 is 40%. -->
-    <integer name="def_screen_brightness">102</integer>
-    <bool name="def_screen_brightness_automatic_mode">true</bool>
-    <fraction name="def_window_animation_scale">100%</fraction>
-    <fraction name="def_window_transition_scale">100%</fraction>
-    <bool name="def_haptic_feedback">true</bool>
-
-    <bool name="def_bluetooth_on">false</bool>
-    <bool name="def_wifi_display_on">false</bool>
-    <bool name="def_install_non_market_apps">false</bool>
-    <bool name="def_package_verifier_enable">true</bool>
-    <!-- Comma-separated list of location providers.
-         Network location is off by default because it requires
-         user opt-in via Setup Wizard or Settings.
-    -->
-    <string name="def_location_providers_allowed" translatable="false">gps</string>
-    <bool name="assisted_gps_enabled">true</bool>
-    <bool name="def_netstats_enabled">true</bool>
-    <bool name="def_usb_mass_storage_enabled">true</bool>
-    <bool name="def_wifi_on">false</bool>
-    <!-- 0 == never, 1 == only when plugged in, 2 == always -->
-    <integer name="def_wifi_sleep_policy">2</integer>
-    <bool name="def_networks_available_notification_on">true</bool>
-
-    <bool name="def_backup_enabled">false</bool>
-    <string name="def_backup_transport" translatable="false">android/com.android.internal.backup.LocalTransport</string>
-
-    <!-- Default value for whether or not to pulse the notification LED when there is a
-         pending notification -->
-    <bool name="def_notification_pulse">true</bool>
-
-    <bool name="def_mount_play_notification_snd">true</bool>
-    <bool name="def_mount_ums_autostart">false</bool>
-    <bool name="def_mount_ums_prompt">true</bool>
-    <bool name="def_mount_ums_notify_enabled">true</bool>
-
-    <!-- user interface sound effects -->
-    <integer name="def_power_sounds_enabled">1</integer>
-    <string name="def_low_battery_sound" translatable="false">/system/media/audio/ui/LowBattery.ogg</string>
-    <integer name="def_dock_sounds_enabled">0</integer>
-    <string name="def_desk_dock_sound" translatable="false">/system/media/audio/ui/Dock.ogg</string>
-    <string name="def_desk_undock_sound" translatable="false">/system/media/audio/ui/Undock.ogg</string>
-    <string name="def_car_dock_sound" translatable="false">/system/media/audio/ui/Dock.ogg</string>
-    <string name="def_car_undock_sound" translatable="false">/system/media/audio/ui/Undock.ogg</string>
-    <integer name="def_lockscreen_sounds_enabled">1</integer>
-    <string name="def_lock_sound" translatable="false">/system/media/audio/ui/Lock.ogg</string>
-    <string name="def_unlock_sound" translatable="false">/system/media/audio/ui/Unlock.ogg</string>
-    <string name="def_trusted_sound" translatable="false">/system/media/audio/ui/Trusted.ogg</string>
-    <string name="def_wireless_charging_started_sound" translatable="false">/system/media/audio/ui/WirelessChargingStarted.ogg</string>
-
-    <bool name="def_lockscreen_disabled">false</bool>
-    <bool name="def_device_provisioned">false</bool>
-    <integer name="def_dock_audio_media_enabled">1</integer>
-
-    <!-- Notifications use ringer volume -->
-    <bool name="def_notifications_use_ring_volume">true</bool>
-
-    <!-- Default for Settings.System.VIBRATE_IN_SILENT -->
-    <bool name="def_vibrate_in_silent">true</bool>
-
-    <!-- Default for Settings.Secure.ACCESSIBILITY_SCRIPT_INJECTION -->
-    <bool name="def_accessibility_script_injection">false</bool>
-
-    <!-- Default for Settings.Secure.ACCESSIBILITY_SPEAK_PASSWORD -->
-    <bool name="def_accessibility_speak_password">false</bool>
-
-    <!-- Default for Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS -->
-    <string name="def_accessibility_web_content_key_bindings" translatable="false">
-            <!-- DPAD/Trackball UP - traverse previous on current axis and send an event. -->
-            0x13=0x01000100;
-            <!-- DPAD/Trackball DOWN - traverse next on current axis and send an event. -->
-            0x14=0x01010100;
-            <!-- DPAD/Trackball LEFT - traverse previous on the character navigation axis and send event. -->
-            0x15=0x02000001;
-            <!-- DPAD/Trackball RIGHT - traverse next on the character navigation axis end send event. -->
-            0x16=0x02010001;
-            <!-- Alt+DPAD/Trackball UP - go to the top of the document. -->
-            0x200000013=0x02000601;
-            <!-- Alt+DPAD/Trackball DOWN - go to the bottom of the document. -->
-            0x200000014=0x02010601;
-            <!-- Alt+DPAD/Trackball LEFT - transition from an axis to another and sends an event.-->
-            <!-- Axis transitions: 2 -> 1; -->
-            0x200000015=0x03020101;
-            <!-- Alt+DPAD/Trackball RIGHT - transition from an axis to another and sends an event. -->
-            <!-- Axis transitions:  1 -> 2; -->
-            0x200000016=0x03010201;
-            <!-- Alt+g - go to the previous heading and send an event. -->
-            0x200000023=0x02000301;
-            <!-- Alt+h - go to the next heading and send an event. -->
-            0x200000024=0x02010301;
-            <!-- Alt+COMMA - transition to sentence navigation axis and send an event. -->
-            <!-- Axis transitions:  7 -> 2; -->
-            0x200000037=0x03070201;
-            <!-- Alt+PERIOD - transition to default web view behavior axis and send an event. -->
-            <!-- Axis transitions:  0 -> 7; 1 - > 7; 2 -> 7; -->
-            0x200000038=0x03000701:0x03010701:0x03020701;
-    </string>
-
-    <!-- Default for Settings.Secure.ACCESSIBILITY_SCRIPT_INJECTION_URL -->
-    <string name="def_accessibility_screen_reader_url" translatable="false">
-        https://ssl.gstatic.com/accessibility/javascript/android/AndroidVox_v1.js
-    </string>
-
-    <!-- Default for Settings.Secure.TOUCH_EXPLORATION_ENABLED -->
-    <bool name="def_touch_exploration_enabled">false</bool>
-
-    <!-- Default value for Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE -->
-    <fraction name="def_accessibility_display_magnification_scale">200%</fraction>
-
-    <!-- Default value for Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED -->
-    <bool name="def_accessibility_display_magnification_enabled">false</bool>
-
-    <!-- Default value for Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_AUTO_UPDATE -->
-    <bool name="def_accessibility_display_magnification_auto_update">true</bool>
-
-    <!-- Default for Settings.System.USER_ROTATION -->
-    <integer name="def_user_rotation">0</integer>
-
-    <!-- Default for Settings.Secure.DOWNLOAD_MAX_BYTES_OVER_MOBILE. <=0 if no limit -->
-    <integer name="def_download_manager_max_bytes_over_mobile">-1</integer>
-    <!-- Default for Settings.Secure.DOWNLOAD_RECOMMENDED_MAX_BYTES_OVER_MOBILE. <=0 if no limit -->
-    <integer name="def_download_manager_recommended_max_bytes_over_mobile">-1</integer>
-
-    <!-- Default for Settings.Secure.LONG_PRESS_TIMEOUT_MILLIS -->
-    <integer name="def_long_press_timeout_millis">400</integer>
-
-    <!-- Default for Settings.Secure.SHOW_IME_WITH_HARD_KEYBOARD -->
-    <bool name="def_show_ime_with_hard_keyboard">false</bool>
-
-    <!-- Default for Settings.System.POINTER_SPEED -->
-    <integer name="def_pointer_speed">0</integer>
-
-    <!-- Default for DTMF tones enabled -->
-    <bool name="def_dtmf_tones_enabled">true</bool>
-    <!-- Default for UI touch sounds enabled -->
-    <bool name="def_sound_effects_enabled">true</bool>
-
-    <!-- Development settings -->
-    <bool name="def_stay_on_while_plugged_in">false</bool>
-
-    <!-- Number of retries for connecting to DHCP.
-         Value here is the same as WifiStateMachine.DEFAULT_MAX_DHCP_RETRIES -->
-    <integer name="def_max_dhcp_retries">9</integer>
-
-    <!-- Default for Settings.Secure.USER_SETUP_COMPLETE -->
-    <bool name="def_user_setup_complete">false</bool>
-
-    <!-- Default for Settings.Global.LOW_BATTERY_SOUND_TIMEOUT.
-         0 means no timeout; battery sounds will always play
-         >0 is milliseconds of screen-off time after which battery sounds will not play -->
-    <integer name="def_low_battery_sound_timeout">0</integer>
-
-    <!-- Initial value for the Settings.Secure.IMMERSIVE_MODE_CONFIRMATIONS setting,
-         which is a comma separated list of packages that no longer need confirmation
-         for immersive mode.
-         Override to disable immersive mode confirmation for certain packages. -->
-    <string name="def_immersive_mode_confirmations" translatable="false"></string>
-
-    <!-- Default for Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE -->
-    <integer name="def_wifi_scan_always_available">0</integer>
-
-    <!-- Default for Settings.Secure.LOCK_SCREEN_SHOW_NOTIFICATIONS, 1==on -->
-    <integer name="def_lock_screen_show_notifications">1</integer>
-
-    <!-- Default for Settings.Secure.LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS -->
-    <bool name="def_lock_screen_allow_private_notifications">true</bool>
-
-    <!-- Default for Settings.Global.HEADS_UP_NOTIFICATIONS_ENABLED, 1==on -->
-    <integer name="def_heads_up_enabled">1</integer>
-
-    <!-- Default for Settings.Global.DEVICE_NAME $1=MANUFACTURER $2=MODEL-->
-    <string name="def_device_name">%1$s %2$s</string>
-
-    <!-- Default for Settings.Global.DEVICE_NAME $1=MODEL-->
-    <string name="def_device_name_simple">%1$s</string>
-
-    <!-- Default for Settings.Secure.WAKE_GESTURE_ENABLED -->
-    <bool name="def_wake_gesture_enabled">true</bool>
-
-    <!-- Default state of tap to wake -->
-    <bool name="def_double_tap_to_wake">true</bool>
-
-    <!-- Default for Settings.Secure.NFC_PAYMENT_COMPONENT -->
-    <string name="def_nfc_payment_component"></string>
-
-    <!-- Default setting for ability to add users from the lock screen -->
-    <bool name="def_add_users_from_lockscreen">false</bool>
-    
-    <!-- ADD-S By Justin.Shen for Hide/Show navigation-bar -->
-    <integer name="def_navigation_bar_fixed_status">1</integer>
-    <integer name="def_navigation_bar_layout">0</integer>
-    <integer name="def_navigation_bar_background_index">0</integer>
-    <integer name="def_navigation_bar_background_color">0x00000000</integer>
-	
-	<string name="enabled_input_methods" translatable="false">com.google.android.inputmethod.latin/com.android.inputmethod.latin.LatinIME</string>
-	<string name="def_input_method">com.google.android.inputmethod.latin/com.android.inputmethod.latin.LatinIME</string>
-	
-	
-    <!-- ADD-E By Justin.Shen for Hide/Show navigation-bar -->
-	
-	<!-- Add for unlock device by touch fingerprint sensor start -->
-	<integer name="def_fingerprint_unlock_device">1</integer>
-	<!-- Add for unlock device by touch fingerprint sensor end -->
-</resources>
