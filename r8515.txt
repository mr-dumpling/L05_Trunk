Index: vendor/branch/5058A_Telcel/packages/apps/Dialer/InCallUI/src/com/android/incallui/ContactInfoCache.java
===================================================================
--- vendor/branch/5058A_Telcel/packages/apps/Dialer/InCallUI/src/com/android/incallui/ContactInfoCache.java	(revision 0)
+++ vendor/branch/5058A_Telcel/packages/apps/Dialer/InCallUI/src/com/android/incallui/ContactInfoCache.java	(revision 8515)
@@ -0,0 +1,1087 @@
+/*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.incallui;
+
+import com.google.common.base.MoreObjects;
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.location.Address;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Looper;
+import android.provider.ContactsContract;
+import android.provider.ContactsContract.CommonDataKinds.Phone;
+import android.provider.ContactsContract.Contacts;
+import android.provider.ContactsContract.DisplayNameSources;
+import android.telecom.TelecomManager;
+import android.telephony.PhoneNumberUtils;
+import android.text.TextUtils;
+import android.util.Pair;
+
+import com.android.contacts.common.ContactsUtils;
+import com.android.contacts.common.util.PhoneNumberHelper;
+import com.android.dialer.R;
+import com.android.dialer.calllog.ContactInfo;
+import com.android.dialer.service.CachedNumberLookupService;
+import com.android.dialer.service.CachedNumberLookupService.CachedContactInfo;
+import com.android.dialer.util.MoreStrings;
+import com.android.incallui.Call.LogState;
+import com.android.incallui.service.PhoneNumberService;
+import com.android.incalluibind.ObjectFactory;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.Calendar;
+/// M: add for Volte. @{
+import com.mediatek.incallui.CallDetailChangeHandler;
+import com.mediatek.incallui.CallDetailChangeHandler.CallDetailChangeListener;
+import com.mediatek.incallui.volte.InCallUIVolteUtils;
+/// @}
+import android.database.Cursor;
+import android.content.ContentResolver;
+import com.mediatek.incallui.InCallUtils;
+
+/// M: add for Volte.
+import java.util.ArrayList;
+import java.util.HashMap;
+/// M: add for Volte.
+import java.util.List;
+import java.util.Set;
+/// M: add for Volte.
+import java.util.concurrent.CopyOnWriteArraySet;
+
+/**
+ * Class responsible for querying Contact Information for Call objects. Can perform asynchronous
+ * requests to the Contact Provider for information as well as respond synchronously for any data
+ * that it currently has cached from previous queries. This class always gets called from the UI
+ * thread so it does not need thread protection.
+ */
+public class ContactInfoCache implements ContactsAsyncHelper.OnImageLoadCompleteListener {
+
+    private static final String TAG = ContactInfoCache.class.getSimpleName();
+    private static final int TOKEN_UPDATE_PHOTO_FOR_CALL_STATE = 0;
+    /// M: Token update photo for phone number service
+    private static final int TOKEN_UPDATE_PHOTO_FOR_CALL_STATE_WITH_PHONE_NUMBER_SERVICE = 1;
+
+    private final Context mContext;
+    private final PhoneNumberService mPhoneNumberService;
+    private final CachedNumberLookupService mCachedNumberLookupService;
+    private final HashMap<String, ContactCacheEntry> mInfoMap = Maps.newHashMap();
+    private final HashMap<String, Set<ContactInfoCacheCallback>> mCallBacks = Maps.newHashMap();
+
+    private static ContactInfoCache sCache = null;
+
+    private Drawable mDefaultContactPhotoDrawable;
+    private Drawable mConferencePhotoDrawable;
+    private ContactUtils mContactUtils;
+
+    private static final Uri FDN_CONTENT_URI = Uri.parse("content://icc/fdn");
+    private static final String FDN_CONTENT_PATH_WITH_SUB_ID = "content://icc/fdn/subId/";
+
+    public static synchronized ContactInfoCache getInstance(Context mContext) {
+        if (sCache == null) {
+            sCache = new ContactInfoCache(mContext.getApplicationContext());
+        }
+        return sCache;
+    }
+
+    private ContactInfoCache(Context context) {
+        mContext = context;
+        mPhoneNumberService = ObjectFactory.newPhoneNumberService(context);
+        mCachedNumberLookupService =
+                com.android.dialerbind.ObjectFactory.newCachedNumberLookupService();
+        mContactUtils = ObjectFactory.getContactUtilsInstance(context);
+        /// M: For volte @{
+        CallDetailChangeHandler.getInstance()
+                .addCallDetailChangeListener(mCallDetailChangeListener);
+        /// @}
+
+    }
+
+    public ContactCacheEntry getInfo(String callId) {
+        return mInfoMap.get(callId);
+    }
+
+    public static ContactCacheEntry buildCacheEntryFromCall(Context context, Call call,
+            boolean isIncoming) {
+        final ContactCacheEntry entry = new ContactCacheEntry();
+
+        // TODO: get rid of caller info.
+        final CallerInfo info = CallerInfoUtils.buildCallerInfo(context, call);
+        ContactInfoCache.populateCacheEntry(context, info, entry, call.getNumberPresentation(),
+                isIncoming);
+
+        /// M: For VoLTE @{
+        // If the call is VoLTE call with sip-uri number, we do not think it as sip call.
+        // M: fix CR:ALPS02360533,Dereference before null check.
+        if (entry.isSipCall) {
+            entry.isSipCall = !call.isTelephonyCall();
+        }
+        /// @}
+
+        return entry;
+    }
+
+    public void maybeInsertCnapInformationIntoCache(Context context, final Call call,
+            final CallerInfo info) {
+        if (mCachedNumberLookupService == null || TextUtils.isEmpty(info.cnapName)
+                || mInfoMap.get(call.getId()) != null) {
+            return;
+        }
+        final Context applicationContext = context.getApplicationContext();
+        Log.i(TAG, "Found contact with CNAP name - inserting into cache");
+        new AsyncTask<Void, Void, Void>() {
+            @Override
+            protected Void doInBackground(Void... params) {
+                ContactInfo contactInfo = new ContactInfo();
+                CachedContactInfo cacheInfo = mCachedNumberLookupService.buildCachedContactInfo(
+                        contactInfo);
+                cacheInfo.setSource(CachedContactInfo.SOURCE_TYPE_CNAP, "CNAP", 0);
+                contactInfo.name = info.cnapName;
+                contactInfo.number = call.getNumber();
+                contactInfo.type = ContactsContract.CommonDataKinds.Phone.TYPE_MAIN;
+                try {
+                    final JSONObject contactRows = new JSONObject().put(Phone.CONTENT_ITEM_TYPE,
+                            new JSONObject()
+                                    .put(Phone.NUMBER, contactInfo.number)
+                                    .put(Phone.TYPE, Phone.TYPE_MAIN));
+                    final String jsonString = new JSONObject()
+                            .put(Contacts.DISPLAY_NAME, contactInfo.name)
+                            .put(Contacts.DISPLAY_NAME_SOURCE, DisplayNameSources.STRUCTURED_NAME)
+                            .put(Contacts.CONTENT_ITEM_TYPE, contactRows).toString();
+                    cacheInfo.setLookupKey(jsonString);
+                } catch (JSONException e) {
+                    Log.w(TAG, "Creation of lookup key failed when caching CNAP information");
+                }
+                mCachedNumberLookupService.addContact(applicationContext, cacheInfo);
+                return null;
+            }
+        }.execute();
+    }
+
+    private class FindInfoCallback implements CallerInfoAsyncQuery.OnQueryCompleteListener {
+        private final boolean mIsIncoming;
+
+        public FindInfoCallback(boolean isIncoming) {
+            mIsIncoming = isIncoming;
+        }
+
+        @Override
+        public void onQueryComplete(int token, Object cookie, CallerInfo callerInfo) {
+            /// M: ALPS01771032. If first query is cancelled, it should not call function. @{
+            // M: fix CR:ALPS02360493,dereference after null check.
+            if (cookie != null && cookie instanceof Call) {
+                String callId = ((Call) cookie).getId();
+                findInfoQueryComplete((Call) cookie, callerInfo, mIsIncoming, true);
+            }
+            /// @}
+        }
+    }
+
+    /**
+     * Requests contact data for the Call object passed in.
+     * Returns the data through callback.  If callback is null, no response is made, however the
+     * query is still performed and cached.
+     *
+     * @param callback The function to call back when the call is found. Can be null.
+     */
+    public void findInfo(final Call call, final boolean isIncoming,
+            ContactInfoCacheCallback callback) {
+        Preconditions.checkState(Looper.getMainLooper().getThread() == Thread.currentThread());
+        Preconditions.checkNotNull(callback);
+
+        final String callId = call.getId();
+        final ContactCacheEntry cacheEntry = mInfoMap.get(callId);
+        Set<ContactInfoCacheCallback> callBacks = mCallBacks.get(callId);
+
+        // If we have a previously obtained intermediate result return that now
+        if (cacheEntry != null) {
+            Log.d(TAG, "Contact lookup. In memory cache hit; lookup "
+                    + (callBacks == null ? "complete" : "still running"));
+            callback.onContactInfoComplete(callId, cacheEntry);
+            // If no other callbacks are in flight, we're done.
+            if (callBacks == null) {
+                return;
+            }
+        }
+
+        // If the entry already exists, add callback
+        if (callBacks != null) {
+            callBacks.add(callback);
+            return;
+        }
+        Log.d(TAG, "Contact lookup. In memory cache miss; searching provider.");
+        // New lookup
+        /// M: for ALPS01769758 @{
+        // Multi-Thread may cause ConcurrentModificationException for HashSet.
+        // Original Code:
+        // callBacks = Sets.newHashSet();
+        callBacks = new CopyOnWriteArraySet<ContactInfoCacheCallback>();
+        /// @}
+        callBacks.add(callback);
+        mCallBacks.put(callId, callBacks);
+        /**
+         * Performs a query for caller information.
+         * Save any immediate data we get from the query. An asynchronous query may also be made
+         * for any data that we do not already have. Some queries, such as those for voicemail and
+         * emergency call information, will not perform an additional asynchronous query.
+         */
+        final CallerInfo callerInfo = CallerInfoUtils.getCallerInfoForCall(
+                mContext, call, new FindInfoCallback(isIncoming));
+
+        findInfoQueryComplete(call, callerInfo, isIncoming, false);
+    }
+
+    public String  fetchMinNumber(String str){
+        Log.d(TAG, "fetchMinNumber ");
+        String num,num2,num3,num4;
+        num = str.replace(" ", "");
+        num2 = num.replace("-", "");
+        num3 = num2.replace("+", "");
+        num4 = PhoneNumberUtils.toCallerIDMinMatch(num3);
+        return num4;
+    }
+
+    private void findInfoQueryComplete(Call call, CallerInfo callerInfo, boolean isIncoming,
+            boolean didLocalLookup) {
+        final String callId = call.getId();
+        int presentationMode = call.getNumberPresentation();
+        if (callerInfo.contactExists || callerInfo.isEmergencyNumber() ||
+                callerInfo.isVoiceMailNumber()) {
+            presentationMode = TelecomManager.PRESENTATION_ALLOWED;
+        }
+
+        ContactCacheEntry cacheEntry = mInfoMap.get(callId);
+        // Ensure we always have a cacheEntry. Replace the existing entry if
+        // it has no name or if we found a local contact.
+
+        /// M: For VoLTE & SS @{
+        // when phone number changed, we should force rebuild the ContactCacheEntry.
+        // Original Code:
+        /*if (cacheEntry == null || TextUtils.isEmpty(cacheEntry.namePrimary) ||
+                callerInfo.contactExists) {
+        */
+        if (cacheEntry == null || TextUtils.isEmpty(cacheEntry.namePrimary) ||
+                callerInfo.contactExists || isDifferentQueryResult(cacheEntry, callerInfo)) {
+         /// @}
+            cacheEntry = buildEntry(mContext, callId, callerInfo, presentationMode, isIncoming);
+            mInfoMap.put(callId, cacheEntry);
+        }
+        
+         int mSubId = InCallUtils.getSubId(call);
+        Uri mFdnUri = (mSubId != -1) ? Uri.parse(FDN_CONTENT_PATH_WITH_SUB_ID + mSubId): FDN_CONTENT_URI;
+
+        if (didLocalLookup) {
+           String name = null;
+           Cursor locFdnContact;
+           ContentResolver cr = mContext.getContentResolver();    
+           locFdnContact = cr.query(mFdnUri,
+             new String[] {"name","number","emails"},null,null, null);
+
+           if(locFdnContact != null && cacheEntry.number!=null && cacheEntry.number.length() > 0){
+              try {
+                  if(locFdnContact.moveToFirst()) {
+                     do {
+                            int numColumnIndex = locFdnContact.getColumnIndex("number");
+                            String tempNum = locFdnContact.getString(numColumnIndex);
+                            Log.d(TAG, "cacheEntry.number: "+ cacheEntry.number+"; tempNum:"+tempNum);
+                            
+                            String mintempNum = fetchMinNumber(tempNum);
+                            String minNum = fetchMinNumber(cacheEntry.number);
+                            Log.d(TAG, "minNum: "+ minNum+"; mintempNum:"+mintempNum);
+                            if(TextUtils.equals(minNum, mintempNum)){
+                               name = locFdnContact.getString(locFdnContact.getColumnIndex("name"));
+                               Log.d(TAG, "name: "+ name);
+                               cacheEntry.namePrimary = name;
+                            }
+
+                        } while(locFdnContact.moveToNext());
+                    }
+                } catch (Exception e) {
+                    Log.w(TAG, "locFdnContact error:" + e.getMessage());
+                } finally {
+                    locFdnContact.close();
+                }
+            }
+            Log.d(TAG, "cacheEntry.namePrimary: "+ cacheEntry.namePrimary);
+        }
+
+        sendInfoNotifications(callId, cacheEntry);
+
+        if (didLocalLookup) {
+            // Before issuing a request for more data from other services, we only check that the
+            // contact wasn't found in the local DB.  We don't check the if the cache entry already
+            // has a name because we allow overriding cnap data with data from other services.
+            if (!callerInfo.contactExists && mPhoneNumberService != null) {
+                Log.d(TAG, "Contact lookup. Local contacts miss, checking remote");
+                final PhoneNumberServiceListener listener = new PhoneNumberServiceListener(callId);
+                mPhoneNumberService.getPhoneNumberInfo(cacheEntry.number, listener, listener,
+                        isIncoming);
+            } else if (cacheEntry.displayPhotoUri != null) {
+                Log.d(TAG, "Contact lookup. Local contact found, starting image load");
+                // Load the image with a callback to update the image state.
+                // When the load is finished, onImageLoadComplete() will be called.
+                cacheEntry.isLoadingPhoto = true;
+                ContactsAsyncHelper.startObtainPhotoAsync(TOKEN_UPDATE_PHOTO_FOR_CALL_STATE,
+                        mContext, cacheEntry.displayPhotoUri, ContactInfoCache.this,
+                        new ContactPhotoQueryCookie(callId,
+                                cacheEntry.displayPhotoUri.buildUpon().build()));
+            } else {
+                if (callerInfo.contactExists) {
+                    Log.d(TAG, "Contact lookup done. Local contact found, no image.");
+                } else {
+                    Log.d(TAG, "Contact lookup done. Local contact not found and"
+                            + " no remote lookup service available.");
+                }
+                /// M: Don't clear callbacks when phone number has changed @{
+                String callNo = PhoneNumberUtils.normalizeNumber(InCallUIVolteUtils.getPhoneNumber(
+                        call.getTelecomCall().getDetails()));
+                String infoNo = PhoneNumberUtils.normalizeNumber(callerInfo.phoneNumber);
+                if (TextUtils.equals(callNo, infoNo)) {
+                    clearCallbacks(callId);
+                } else {
+                    Log.d(TAG, "Don't clear callbacks cause phone numbe don't match! callNo: "
+                            + callNo + " VS infoNo: " + infoNo);
+                }
+                /// @}
+            }
+        }
+    }
+
+    class PhoneNumberServiceListener implements PhoneNumberService.NumberLookupListener,
+                                     PhoneNumberService.ImageLookupListener, ContactUtils.Listener {
+        private final String mCallId;
+
+        PhoneNumberServiceListener(String callId) {
+            mCallId = callId;
+        }
+
+        @Override
+        public void onPhoneNumberInfoComplete(
+                final PhoneNumberService.PhoneNumberInfo info) {
+            // If we got a miss, this is the end of the lookup pipeline,
+            // so clear the callbacks and return.
+            if (info == null) {
+                Log.d(TAG, "Contact lookup done. Remote contact not found.");
+                clearCallbacks(mCallId);
+                return;
+            }
+
+            ContactCacheEntry entry = new ContactCacheEntry();
+            entry.namePrimary = info.getDisplayName();
+            entry.number = info.getNumber();
+            entry.contactLookupResult = info.getLookupSource();
+            final int type = info.getPhoneType();
+            final String label = info.getPhoneLabel();
+            if (type == Phone.TYPE_CUSTOM) {
+                entry.label = label;
+            } else {
+                final CharSequence typeStr = Phone.getTypeLabel(
+                        mContext.getResources(), type, label);
+                entry.label = typeStr == null ? null : typeStr.toString();
+            }
+            final ContactCacheEntry oldEntry = mInfoMap.get(mCallId);
+            if (oldEntry != null) {
+                // Location is only obtained from local lookup so persist
+                // the value for remote lookups. Once we have a name this
+                // field is no longer used; it is persisted here in case
+                // the UI is ever changed to use it.
+                entry.location = oldEntry.location;
+                // Contact specific ringtone is obtained from local lookup.
+                entry.contactRingtoneUri = oldEntry.contactRingtoneUri;
+            }
+
+            // If no image and it's a business, switch to using the default business avatar.
+            if (info.getImageUrl() == null && info.isBusiness()) {
+                Log.d(TAG, "Business has no image. Using default.");
+                entry.photo = mContext.getResources().getDrawable(R.drawable.img_business);
+            }
+
+            mInfoMap.put(mCallId, entry);
+            sendInfoNotifications(mCallId, entry);
+
+            if (mContactUtils != null) {
+                // This method will callback "onContactInteractionsFound".
+                entry.isLoadingContactInteractions =
+                        mContactUtils.retrieveContactInteractionsFromLookupKey(
+                                info.getLookupKey(), this);
+            }
+
+            entry.isLoadingPhoto = info.getImageUrl() != null;
+
+            // If there is no image or contact interactions then we should not expect another
+            // callback.
+            if (!entry.isLoadingPhoto && !entry.isLoadingContactInteractions) {
+                // We're done, so clear callbacks
+                clearCallbacks(mCallId);
+            }
+        }
+
+        @Override
+        public void onImageFetchComplete(Bitmap bitmap) {
+            onImageLoadComplete(TOKEN_UPDATE_PHOTO_FOR_CALL_STATE_WITH_PHONE_NUMBER_SERVICE, null,
+                    bitmap, mCallId);
+        }
+
+        @Override
+        public void onContactInteractionsFound(Address address,
+                List<Pair<Calendar, Calendar>> openingHours) {
+            final ContactCacheEntry entry = mInfoMap.get(mCallId);
+            if (entry == null) {
+                Log.e(this, "Contact context received for empty search entry.");
+                clearCallbacks(mCallId);
+                return;
+            }
+
+            entry.isLoadingContactInteractions = false;
+
+            Log.v(ContactInfoCache.this, "Setting contact interactions for entry: ", entry);
+
+            entry.locationAddress = address;
+            entry.openingHours = openingHours;
+            sendContactInteractionsNotifications(mCallId, entry);
+
+            if (!entry.isLoadingPhoto) {
+                clearCallbacks(mCallId);
+            }
+        }
+    }
+
+    /**
+     * M: Use a more flexible cookie object class, to avoid unexpected photo setting
+     * and callback clearing.
+     * Implemented for ContactsAsyncHelper.OnImageLoadCompleteListener interface.
+     * make sure that the call state is reflected after the image is loaded.
+     */
+    @Override
+    public void onImageLoadComplete(int token, Drawable photo, Bitmap photoIcon, Object cookie) {
+        Log.d(this, "Image load complete with context: ", mContext);
+        // TODO: may be nice to update the image view again once the newer one
+        // is available on contacts database.
+
+        String callId = "";
+        Uri displayUri = Uri.EMPTY;
+        if (TOKEN_UPDATE_PHOTO_FOR_CALL_STATE_WITH_PHONE_NUMBER_SERVICE == token) {
+            callId = (String) cookie;
+        } else if (TOKEN_UPDATE_PHOTO_FOR_CALL_STATE == token) {
+            final ContactPhotoQueryCookie queryCookie = (ContactPhotoQueryCookie) cookie;
+            callId = queryCookie.callId;
+            displayUri = queryCookie.displayUri;
+        }
+        final ContactCacheEntry entry = mInfoMap.get(callId);
+
+        if (entry == null) {
+            Log.e(this, "Image Load received for empty search entry.");
+            clearCallbacks(callId);
+            return;
+        }
+
+        entry.isLoadingPhoto = false;
+
+        Log.d(this, "setting photo for entry: ", entry);
+
+        /// M: Only set photo, notify and clear for same display uri when return from async query
+        if (TOKEN_UPDATE_PHOTO_FOR_CALL_STATE_WITH_PHONE_NUMBER_SERVICE == token
+                || displayUri.equals(entry.displayPhotoUri)) {
+            // Conference call icons are being handled in CallCardPresenter.
+            if (photo != null) {
+                Log.v(this, "direct drawable: ", photo);
+                entry.photo = photo;
+            } else if (photoIcon != null) {
+                Log.v(this, "photo icon: ", photoIcon);
+                entry.photo = new BitmapDrawable(mContext.getResources(), photoIcon);
+            } else {
+                Log.v(this, "unknown photo");
+                entry.photo = null;
+            }
+
+            sendImageNotifications(callId, entry);
+
+            if (!entry.isLoadingContactInteractions) {
+                clearCallbacks(callId);
+            }
+        }
+    }
+
+    /**
+     * Blows away the stored cache values.
+     */
+    public void clearCache() {
+        mInfoMap.clear();
+        mCallBacks.clear();
+    }
+
+    private ContactCacheEntry buildEntry(Context context, String callId,
+            CallerInfo info, int presentation, boolean isIncoming) {
+        // The actual strings we're going to display onscreen:
+        Drawable photo = null;
+
+        final ContactCacheEntry cce = new ContactCacheEntry();
+        populateCacheEntry(context, info, cce, presentation, isIncoming);
+
+        /// M: For VoLTE @{
+        // If the call is VoLTE call with sip-uri number, we do not think it as sip call.
+        // we can also do the judge in populateCacheEntry(),
+        // but then we must scan the whole callList to get the call.
+        // TODO: re-write populateCacheEntry(), and add an extra parameter (callId).
+        if (cce.isSipCall) {
+            Call call = CallList.getInstance().getCallById(callId);
+            if (call != null) {
+                cce.isSipCall = !call.isTelephonyCall();
+            }
+        }
+        /// @}
+
+        // This will only be true for emergency numbers
+        if (info.photoResource != 0) {
+            photo = context.getResources().getDrawable(info.photoResource);
+        } else if (info.isCachedPhotoCurrent) {
+            if (info.cachedPhoto != null) {
+                photo = info.cachedPhoto;
+            } else {
+                photo = getDefaultContactPhotoDrawable();
+            }
+        } else if (info.contactDisplayPhotoUri == null) {
+            photo = getDefaultContactPhotoDrawable();
+        } else {
+            cce.displayPhotoUri = info.contactDisplayPhotoUri;
+        }
+
+        // Support any contact id in N because QuickContacts in N starts supporting enterprise
+        // contact id
+        if (info.lookupKeyOrNull != null
+                && (ContactsUtils.FLAG_N_FEATURE || info.contactIdOrZero != 0)) {
+            cce.lookupUri = Contacts.getLookupUri(info.contactIdOrZero, info.lookupKeyOrNull);
+        } else {
+            Log.v(TAG, "lookup key is null or contact ID is 0 on M. Don't create a lookup uri.");
+            cce.lookupUri = null;
+        }
+
+        cce.photo = photo;
+        cce.lookupKey = info.lookupKeyOrNull;
+        cce.contactRingtoneUri = info.contactRingtoneUri;
+        if (cce.contactRingtoneUri == null || cce.contactRingtoneUri == Uri.EMPTY) {
+            cce.contactRingtoneUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE);
+        }
+
+        return cce;
+    }
+
+    /**
+     * Populate a cache entry from a call (which got converted into a caller info).
+     */
+    public static void populateCacheEntry(Context context, CallerInfo info, ContactCacheEntry cce,
+            int presentation, boolean isIncoming) {
+        Preconditions.checkNotNull(info);
+        String displayName = null;
+        String displayNumber = null;
+        String displayLocation = null;
+        String label = null;
+        boolean isSipCall = false;
+
+            // It appears that there is a small change in behaviour with the
+            // PhoneUtils' startGetCallerInfo whereby if we query with an
+            // empty number, we will get a valid CallerInfo object, but with
+            // fields that are all null, and the isTemporary boolean input
+            // parameter as true.
+
+            // In the past, we would see a NULL callerinfo object, but this
+            // ends up causing null pointer exceptions elsewhere down the
+            // line in other cases, so we need to make this fix instead. It
+            // appears that this was the ONLY call to PhoneUtils
+            // .getCallerInfo() that relied on a NULL CallerInfo to indicate
+            // an unknown contact.
+
+            // Currently, infi.phoneNumber may actually be a SIP address, and
+            // if so, it might sometimes include the "sip:" prefix. That
+            // prefix isn't really useful to the user, though, so strip it off
+            // if present. (For any other URI scheme, though, leave the
+            // prefix alone.)
+            // TODO: It would be cleaner for CallerInfo to explicitly support
+            // SIP addresses instead of overloading the "phoneNumber" field.
+            // Then we could remove this hack, and instead ask the CallerInfo
+            // for a "user visible" form of the SIP address.
+            String number = info.phoneNumber;
+
+            if (!TextUtils.isEmpty(number)) {
+                isSipCall = PhoneNumberHelper.isUriNumber(number);
+                if (number.startsWith("sip:")) {
+                    number = number.substring(4);
+                }
+            }
+
+            if (TextUtils.isEmpty(info.name)) {
+                // No valid "name" in the CallerInfo, so fall back to
+                // something else.
+                // (Typically, we promote the phone number up to the "name" slot
+                // onscreen, and possibly display a descriptive string in the
+                // "number" slot.)
+                if (TextUtils.isEmpty(number)) {
+                    // No name *or* number! Display a generic "unknown" string
+                    // (or potentially some other default based on the presentation.)
+                    displayName = getPresentationString(context, presentation, info.callSubject);
+                    Log.d(TAG, "  ==> no name *or* number! displayName = " + displayName);
+                } else if (presentation != TelecomManager.PRESENTATION_ALLOWED) {
+                    // This case should never happen since the network should never send a phone #
+                    // AND a restricted presentation. However we leave it here in case of weird
+                    // network behavior
+                    displayName = getPresentationString(context, presentation, info.callSubject);
+                    Log.d(TAG, "  ==> presentation not allowed! displayName = " + displayName);
+                } else if (!TextUtils.isEmpty(info.cnapName)) {
+                    // No name, but we do have a valid CNAP name, so use that.
+                    displayName = info.cnapName;
+                    info.name = info.cnapName;
+                    displayNumber = number;
+                    Log.d(TAG, "  ==> cnapName available: displayName '" + displayName +
+                            "', displayNumber '" + displayNumber + "'");
+                } else {
+                    // No name; all we have is a number. This is the typical
+                    // case when an incoming call doesn't match any contact,
+                    // or if you manually dial an outgoing number using the
+                    // dialpad.
+                    displayNumber = number;
+
+                    /// M: for ALPS01953843 @{
+                    // For the number not stored in contact, we should still show
+                    // the geo info even when make outgoing call.
+                    // Original Code:
+                    // Display a geographical description string if available
+                    // (but only for incoming calls.)
+                    // if (isIncoming) {
+                    if (!TextUtils.isEmpty(info.geoDescription)) {
+                        // TODO (CallerInfoAsyncQuery cleanup): Fix the CallerInfo
+                        // query to only do the geoDescription lookup in the first
+                        // place for incoming calls.
+                        displayLocation = info.geoDescription; // may be null
+                        Log.d(TAG, "Geodescrption: " + info.geoDescription);
+                    }
+                    /// @}
+
+                    Log.d(TAG, "  ==>  no name; falling back to number:"
+                            + " displayNumber '" + displayNumber
+                            + "', displayLocation '" + displayLocation + "'");
+                }
+            } else {
+                // We do have a valid "name" in the CallerInfo. Display that
+                // in the "name" slot, and the phone number in the "number" slot.
+                if (presentation != TelecomManager.PRESENTATION_ALLOWED) {
+                    // This case should never happen since the network should never send a name
+                    // AND a restricted presentation. However we leave it here in case of weird
+                    // network behavior
+                    displayName = getPresentationString(context, presentation, info.callSubject);
+                    Log.d(TAG, "  ==> valid name, but presentation not allowed!" +
+                            " displayName = " + displayName);
+                } else {
+                    // Causes cce.namePrimary to be set as info.name below. CallCardPresenter will
+                    // later determine whether to use the name or nameAlternative when presenting
+                    displayName = info.name;
+                    cce.nameAlternative = info.nameAlternative;
+                    displayNumber = number;
+                    label = info.phoneLabel;
+                    Log.d(TAG, "  ==>  name is present in CallerInfo: displayName '" + displayName
+                            + "', displayNumber '" + displayNumber + "'");
+                }
+            }
+
+        cce.namePrimary = displayName;
+        cce.number = displayNumber;
+        cce.location = displayLocation;
+        cce.label = label;
+        cce.isSipCall = isSipCall;
+        cce.userType = info.userType;
+
+        if (info.contactExists) {
+            cce.contactLookupResult = LogState.LOOKUP_LOCAL_CONTACT;
+        }
+    }
+
+    /**
+     * Sends the updated information to call the callbacks for the entry.
+     */
+    private void sendInfoNotifications(String callId, ContactCacheEntry entry) {
+        final Set<ContactInfoCacheCallback> callBacks = mCallBacks.get(callId);
+        if (callBacks != null) {
+            for (ContactInfoCacheCallback callBack : callBacks) {
+                callBack.onContactInfoComplete(callId, entry);
+            }
+        }
+    }
+
+    private void sendImageNotifications(String callId, ContactCacheEntry entry) {
+        final Set<ContactInfoCacheCallback> callBacks = mCallBacks.get(callId);
+        if (callBacks != null && entry.photo != null) {
+            for (ContactInfoCacheCallback callBack : callBacks) {
+                callBack.onImageLoadComplete(callId, entry);
+            }
+        }
+    }
+
+    private void sendContactInteractionsNotifications(String callId, ContactCacheEntry entry) {
+        final Set<ContactInfoCacheCallback> callBacks = mCallBacks.get(callId);
+        if (callBacks != null) {
+            for (ContactInfoCacheCallback callBack : callBacks) {
+                callBack.onContactInteractionsInfoComplete(callId, entry);
+            }
+        }
+    }
+
+    private void clearCallbacks(String callId) {
+        mCallBacks.remove(callId);
+    }
+
+    /**
+     * Gets name strings based on some special presentation modes and the associated custom label.
+     */
+    private static String getPresentationString(Context context, int presentation,
+             String customLabel) {
+        String name = context.getString(R.string.unknown);
+        if (!TextUtils.isEmpty(customLabel) &&
+                ((presentation == TelecomManager.PRESENTATION_UNKNOWN) ||
+                 (presentation == TelecomManager.PRESENTATION_RESTRICTED))) {
+            name = customLabel;
+            return name;
+        } else {
+            if (presentation == TelecomManager.PRESENTATION_RESTRICTED) {
+                name = context.getString(R.string.private_num);
+            } else if (presentation == TelecomManager.PRESENTATION_PAYPHONE) {
+                name = context.getString(R.string.payphone);
+            }
+        }
+        return name;
+    }
+
+    public Drawable getDefaultContactPhotoDrawable() {
+        if (mDefaultContactPhotoDrawable == null) {
+            mDefaultContactPhotoDrawable =
+                    mContext.getResources().getDrawable(R.drawable.img_no_image_automirrored);
+        }
+        return mDefaultContactPhotoDrawable;
+    }
+
+    public Drawable getConferenceDrawable() {
+        if (mConferencePhotoDrawable == null) {
+            mConferencePhotoDrawable =
+                    mContext.getResources().getDrawable(R.drawable.img_conference_automirrored);
+        }
+        return mConferencePhotoDrawable;
+    }
+
+    /**
+     * Callback interface for the contact query.
+     */
+    public interface ContactInfoCacheCallback {
+        public void onContactInfoComplete(String callId, ContactCacheEntry entry);
+        public void onImageLoadComplete(String callId, ContactCacheEntry entry);
+        public void onContactInteractionsInfoComplete(String callId, ContactCacheEntry entry);
+    }
+
+    public static class ContactCacheEntry {
+        public String namePrimary;
+        public String nameAlternative;
+        public String number;
+        public String location;
+        public String label;
+        public Drawable photo;
+        public boolean isSipCall;
+        // Note in cache entry whether this is a pending async loading action to know whether to
+        // wait for its callback or not.
+        public boolean isLoadingPhoto;
+        public boolean isLoadingContactInteractions;
+        /** This will be used for the "view" notification. */
+        public Uri contactUri;
+        /** Either a display photo or a thumbnail URI. */
+        public Uri displayPhotoUri;
+        public Uri lookupUri; // Sent to NotificationMananger
+        public String lookupKey;
+        public Address locationAddress;
+        public List<Pair<Calendar, Calendar>> openingHours;
+        public int contactLookupResult = LogState.LOOKUP_NOT_FOUND;
+        public long userType = ContactsUtils.USER_TYPE_CURRENT;
+        public Uri contactRingtoneUri;
+
+        @Override
+        public String toString() {
+            return MoreObjects.toStringHelper(this)
+                    .add("name", MoreStrings.toSafeString(namePrimary))
+                    .add("nameAlternative", MoreStrings.toSafeString(nameAlternative))
+                    .add("number", MoreStrings.toSafeString(number))
+                    .add("location", MoreStrings.toSafeString(location))
+                    .add("label", label)
+                    .add("photo", photo)
+                    .add("isSipCall", isSipCall)
+                    .add("contactUri", contactUri)
+                    .add("displayPhotoUri", displayPhotoUri)
+                    .add("locationAddress", locationAddress)
+                    .add("openingHours", openingHours)
+                    .add("contactLookupResult", contactLookupResult)
+                    .add("userType", userType)
+                    .add("contactRingtoneUri", contactRingtoneUri)
+                    .toString();
+        }
+    }
+
+    /// -----------------------------------Mediatek------------------------------------
+    /// M: For volte @{
+    /**
+     * M: listener, which will get notified onContactInfoUpdated() when re-query of certain
+     *  call complete.
+     */
+    public static abstract class ContactInfoUpdatedListener {
+        public void onContactInfoUpdated(String callId) {}
+    }
+
+    /**
+     * M: restore all ContactInfoUpdatedListener, who will get notified later.
+     */
+    private final List<ContactInfoUpdatedListener> mContactInfoUpdatedListener
+            = new ArrayList<ContactInfoUpdatedListener>();
+
+    /**
+     * M: add ContactInfoUpdatedListener.
+     * @param listener
+     */
+    public void addContactInfoUpdatedListener(ContactInfoUpdatedListener listener) {
+        if (!mContactInfoUpdatedListener.contains(listener)) {
+            mContactInfoUpdatedListener.add(listener);
+        }
+    }
+
+    /**
+     * M: remove ContactInfoUpdatedListener.
+     * @param listener
+     */
+    public void removeContactInfoUpdatedListener(ContactInfoUpdatedListener listener) {
+        if (mContactInfoUpdatedListener.contains(listener)) {
+            mContactInfoUpdatedListener.remove(listener);
+        }
+    }
+
+    /**
+     * M: listen onVolteMarkedEccChanged() and onPhoneNumberChanged() from CallDetailsChangeHandler.
+     */
+    private final CallDetailChangeListener mCallDetailChangeListener
+            = new CallDetailChangeListener() {
+
+        public void onVolteMarkedEccChanged(Call call) {
+            handleIsEmergencyChanged(call);
+        }
+
+        public void onPhoneNumberChanged(Call call) {
+            handlePhoneNumberChanged(call);
+        }
+    };
+
+    /**
+     * M: When certain call is marked as Ecc by NW, notify listners.
+     * @param call
+     */
+    private void handleIsEmergencyChanged(Call call) {
+        Log.d(TAG, "handleIsEmergencyChanged()... call = " + call);
+        // check whether it is a ecc call again
+        if (call != null && call.isVolteMarkedEcc()) {
+            final String callId = call.getId();
+            final ContactCacheEntry cacheEntry = mInfoMap.get(callId);
+            Set<ContactInfoCacheCallback> callBacks = mCallBacks.get(callId);
+
+            if (cacheEntry != null && callBacks != null) {
+                // query is still running, remove callbacks
+                clearCallbacks(callId);
+            }
+            CallerInfo callerInfo = new CallerInfo().markAsEmergency(mContext, (call != null) ? call.getNumber() : "");
+            findInfoQueryComplete(call, callerInfo, call.getState() == Call.State.INCOMING, false);
+            // make EntryCache complete into mInCfoMap, notify CallCardPresenter to get it again.
+            for (ContactInfoUpdatedListener listener : mContactInfoUpdatedListener) {
+                listener.onContactInfoUpdated(callId);
+            }
+        }
+    }
+
+    /**
+     * M: when number of certain call changed, re-query for it.
+     * when re-query complete, will notify all listeners to trigger them to get new ContactInfo
+     * from here.
+     * @param call
+     */
+    private void handlePhoneNumberChanged(Call call) {
+        Log.d(TAG, "handlePhoneNumberChanged()... call = " + call);
+        if (call != null && !call.isVolteMarkedEcc()) {
+            // if is ecc, will show ecc info, so no need re-query.(consider network mark it as
+            // ecc while pau changed).
+            updateInfo(call, call.getState() == Call.State.INCOMING
+                    , new ContactInfoCacheCallback() {
+                @Override
+                public void onContactInfoComplete(String callId, ContactCacheEntry entry) {
+                    // re-query complete, notify users to re-get new ContactCacheEntry.
+                    for (ContactInfoUpdatedListener listener : mContactInfoUpdatedListener) {
+                        listener.onContactInfoUpdated(callId);
+                    }
+                }
+                @Override
+                public void onImageLoadComplete(String callId, ContactCacheEntry entry) {
+                     // re-query complete, notify users to re-get new ContactCacheEntry.
+                    for (ContactInfoUpdatedListener listener : mContactInfoUpdatedListener) {
+                        listener.onContactInfoUpdated(callId);
+                    }
+                }
+
+                @Override
+                public void onContactInteractionsInfoComplete(String callId, ContactCacheEntry
+                        entry) {
+                    // re-query complete, notify users to re-get new ContactCacheEntry.
+                    for (ContactInfoUpdatedListener listener : mContactInfoUpdatedListener) {
+                        listener.onContactInfoUpdated(callId);
+                    }
+                }
+            });
+        }
+    }
+
+    /**
+     * M: This function trigger re-query. If satisfied, will always force re-query,
+     * even if there has a running query. So need avoiding call this function continue.
+     * @param call
+     * @param isIncoming
+     * @param callback
+     */
+    private void updateInfo(final Call call, final boolean isIncoming,
+            ContactInfoCacheCallback callback) {
+        Preconditions.checkState(Looper.getMainLooper().getThread() == Thread.currentThread());
+        Preconditions.checkNotNull(callback);
+
+        final String callId = call.getId();
+        final ContactCacheEntry cacheEntry = mInfoMap.get(callId);
+        Set<ContactInfoCacheCallback> callBacks = mCallBacks.get(callId);
+
+        if (cacheEntry != null) {
+            // the query has done or still running.
+            if (callBacks != null) {
+                // still running, clear callbacks
+                clearCallbacks(callId);
+            }
+            // force re-query
+            callBacks = new CopyOnWriteArraySet<ContactInfoCache.ContactInfoCacheCallback>();
+            callBacks.add(callback);
+            mCallBacks.put(callId, callBacks);
+            final CallerInfo callerInfo = CallerInfoUtils.getCallerInfoForCall(
+                    mContext, call, new FindInfoCallback(isIncoming));
+        }
+    }
+
+    /**
+     * M: The main logic is same as findInfo().
+     * You maybe consider that there may exist conflict like ALPS01771032.
+     * because findInfo() equals to findInfoEx(). so may exist below conflicts:
+     * 1/ findInfo() + updateInfo()     => resolved by ALPS01771032.
+     * 2/ updateInfo() + findInfo()     => updateInfo() will skip this query request.
+     * 3/ findInfo() + findInfo()       => findInfo() will handle this case.
+     * @param call
+     * @param isIncoming
+     * @param callback
+     * @param returnTempleResult
+     */
+    public void findInfoEx(final Call call, final boolean isIncoming,
+            ContactInfoCacheCallback callback, boolean returnTempleResult) {
+        Log.d(TAG, "findInfoEx()...");
+        Preconditions.checkState(Looper.getMainLooper().getThread() == Thread.currentThread());
+        Preconditions.checkNotNull(callback);
+
+        final String callId = call.getId();
+        final ContactCacheEntry cacheEntry = mInfoMap.get(callId);
+        Set<ContactInfoCacheCallback> callBacks = mCallBacks.get(callId);
+
+        // If we have a previously obtained intermediate result return that now
+        if (cacheEntry != null) {
+            Log.d(TAG, "findInfoEx()... Contact lookup. In memory cache hit; lookup "
+                    + (callBacks == null ? "complete" : "still running"));
+            callback.onContactInfoComplete(callId, cacheEntry);
+            // If no other callbacks are in flight, we're done.
+            if (callBacks == null) {
+                return;
+            }
+        }
+
+        // If the entry already exists, add callback
+        if (callBacks != null) {
+            callBacks.add(callback);
+            return;
+        }
+        Log.d(TAG, "findInfoEx()... Contact lookup. In memory cache miss; searching provider.");
+        // New lookup
+        callBacks = new CopyOnWriteArraySet<ContactInfoCache.ContactInfoCacheCallback>();
+        callBacks.add(callback);
+        mCallBacks.put(callId, callBacks);
+
+        /**
+         * Performs a query for caller information.
+         * Save any immediate data we get from the query. An asynchronous query may also be made
+         * for any data that we do not already have. Some queries, such as those for voicemail and
+         * emergency call information, will not perform an additional asynchronous query.
+         */
+        final CallerInfo callerInfo = CallerInfoUtils.getCallerInfoForCall(
+                mContext, call, new FindInfoCallback(isIncoming));
+
+        if (returnTempleResult) {
+            findInfoQueryComplete(call, callerInfo, isIncoming, false);
+        }
+    }
+
+    /**
+     * M: Judge whether the phoneNumber is updated, if so, we should force update
+     * ContactCacheEntry.
+     * That means phoneNumber is different in ContactCacheEntry and CallerInfo
+     * @param entry
+     * @param callerInfo
+     * @return
+     */
+    private boolean isDifferentQueryResult(ContactCacheEntry entry, CallerInfo callerInfo) {
+        boolean isDifferent = false;
+        if (entry != null && callerInfo != null) {
+            String numberInEntry = entry.number;
+            String numberInCallerInfo = callerInfo.phoneNumber;
+            if (!TextUtils.equals(numberInEntry, numberInCallerInfo)) {
+                isDifferent = true;
+            }
+        }
+        return isDifferent;
+    }
+    /// @}
+
+    /// M: Cookie object class for contact photo query @{
+    private class ContactPhotoQueryCookie {
+        public String callId;
+        public Uri displayUri;
+
+        public ContactPhotoQueryCookie(String id, Uri uri) {
+            callId = id;
+            displayUri = uri;
+        }
+    }
+    /// @}
+}
Index: vendor/branch/5058A_Telcel/packages/services/Telephony/src/com/android/phone/settings/fdn/FdnSetting.java
===================================================================
--- vendor/branch/5058A_Telcel/packages/services/Telephony/src/com/android/phone/settings/fdn/FdnSetting.java	(revision 0)
+++ vendor/branch/5058A_Telcel/packages/services/Telephony/src/com/android/phone/settings/fdn/FdnSetting.java	(revision 8515)
@@ -0,0 +1,786 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.phone.settings.fdn;
+
+import android.app.ActionBar;
+import android.app.AlertDialog;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.AsyncResult;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.preference.Preference;
+import android.util.Log;
+import android.preference.PreferenceActivity;
+import android.preference.PreferenceScreen;
+import android.view.MenuItem;
+import android.view.WindowManager;
+import android.widget.Toast;
+
+import com.android.internal.telephony.CommandException;
+import com.android.internal.telephony.IccCard;
+import com.android.internal.telephony.Phone;
+import com.android.internal.telephony.TelephonyIntents;
+import com.android.phone.CallFeaturesSetting;
+import com.android.phone.PhoneGlobals;
+import com.android.phone.PhoneUtils;
+import com.android.phone.R;
+import com.android.phone.SubscriptionInfoHelper;
+
+import com.mediatek.settings.TelephonyUtils;
+
+/**
+ * FDN settings UI for the Phone app.
+ * Rewritten to look and behave closer to the other preferences.
+ */
+public class FdnSetting extends PreferenceActivity implements
+        EditPinPreference.OnPinEnteredListener, DialogInterface.OnCancelListener,
+        PhoneGlobals.SubInfoUpdateListener, Preference.OnPreferenceClickListener {
+
+    private static final String LOG_TAG = PhoneGlobals.LOG_TAG;
+    private static final boolean DBG = true;
+
+    private SubscriptionInfoHelper mSubscriptionInfoHelper;
+    private Phone mPhone;
+
+    /**
+     * Events we handle.
+     * The first is used for toggling FDN enable, the second for the PIN change.
+     */
+    private static final int EVENT_PIN2_ENTRY_COMPLETE = 100;
+    private static final int EVENT_PIN2_CHANGE_COMPLETE = 200;
+
+    // String keys for preference lookup
+    private static final String BUTTON_FDN_ENABLE_KEY = "button_fdn_enable_key";
+    private static final String BUTTON_CHANGE_PIN2_KEY = "button_change_pin2_key";
+    private static final String FDN_LIST_PREF_SCREEN_KEY = "fdn_list_pref_screen_key";
+
+    private EditPinPreference mButtonEnableFDN;
+    private EditPinPreference mButtonChangePin2;
+
+    // State variables
+    private String mOldPin;
+    private String mNewPin;
+    private String mPuk2;
+    private static final int PIN_CHANGE_OLD = 0;
+    private static final int PIN_CHANGE_NEW = 1;
+    private static final int PIN_CHANGE_REENTER = 2;
+    private static final int PIN_CHANGE_PUK = 3;
+    private static final int PIN_CHANGE_NEW_PIN_FOR_PUK = 4;
+    private static final int PIN_CHANGE_REENTER_PIN_FOR_PUK = 5;
+    private int mPinChangeState;
+    private boolean mIsPuk2Locked;    // Indicates we know that we are PUK2 blocked.
+
+    private static final String SKIP_OLD_PIN_KEY = "skip_old_pin_key";
+    private static final String PIN_CHANGE_STATE_KEY = "pin_change_state_key";
+    private static final String OLD_PIN_KEY = "old_pin_key";
+    private static final String NEW_PIN_KEY = "new_pin_key";
+    private static final String DIALOG_MESSAGE_KEY = "dialog_message_key";
+    private static final String DIALOG_PIN_ENTRY_KEY = "dialog_pin_entry_key";
+
+    // size limits for the pin.
+    private static final int MIN_PIN_LENGTH = 4;
+    private static final int MAX_PIN_LENGTH = 8;
+
+    /**
+     * Delegate to the respective handlers.
+     */
+    @Override
+    public void onPinEntered(EditPinPreference preference, boolean positiveResult) {
+        if (preference == mButtonEnableFDN) {
+            toggleFDNEnable(positiveResult);
+        } else if (preference == mButtonChangePin2){
+            updatePINChangeState(positiveResult);
+        }
+    }
+
+    /**
+     * Attempt to toggle FDN activation.
+     */
+    private void toggleFDNEnable(boolean positiveResult) {
+        /// M: [MTK_FDN] Add retry number tips
+        log("[toggleFDNEnable] positiveResult: " + positiveResult);
+        updateEnableFDNDialog();
+        /// @}
+        if (!positiveResult) {
+            return;
+        }
+
+        // validate the pin first, before submitting it to the RIL for FDN enable.
+        String password = mButtonEnableFDN.getText();
+        if (validatePin (password, false)) {
+            // get the relevant data for the icc call
+            boolean isEnabled = mPhone.getIccCard().getIccFdnEnabled();
+            Message onComplete = mFDNHandler.obtainMessage(EVENT_PIN2_ENTRY_COMPLETE);
+
+            // make fdn request
+            mPhone.getIccCard().setIccFdnEnabled(!isEnabled, password, onComplete);
+        } else {
+            // throw up error if the pin is invalid.
+            displayMessage(R.string.invalidPin2);
+        }
+
+        mButtonEnableFDN.setText("");
+    }
+
+    /**
+     * Attempt to change the pin.
+     */
+    private void updatePINChangeState(boolean positiveResult) {
+        if (DBG) log("updatePINChangeState positive=" + positiveResult
+                + " mPinChangeState=" + mPinChangeState
+                + " mSkipOldPin=" + mIsPuk2Locked);
+
+        if (!positiveResult) {
+            // reset the state on cancel, either to expect PUK2 or PIN2
+            if (!mIsPuk2Locked) {
+                resetPinChangeState(mSubId);
+            } else {
+                resetPinChangeStateForPUK2(mSubId);
+            }
+            return;
+        }
+
+        // Progress through the dialog states, generally in this order:
+        //   1. Enter old pin
+        //   2. Enter new pin
+        //   3. Re-Enter new pin
+        // While handling any error conditions that may show up in between.
+        // Also handle the PUK2 entry, if it is requested.
+        //
+        // In general, if any invalid entries are made, the dialog re-
+        // appears with text to indicate what the issue is.
+        switch (mPinChangeState) {
+            case PIN_CHANGE_OLD:
+                mOldPin = mButtonChangePin2.getText();
+                mButtonChangePin2.setText("");
+                // if the pin is not valid, display a message and reset the state.
+                if (validatePin (mOldPin, false)) {
+                    mPinChangeState = PIN_CHANGE_NEW;
+                    displayPinChangeDialog();
+                } else {
+                    displayPinChangeDialog(R.string.invalidPin2, true);
+                }
+                break;
+            case PIN_CHANGE_NEW:
+                mNewPin = mButtonChangePin2.getText();
+                mButtonChangePin2.setText("");
+                // if the new pin is not valid, display a message and reset the state.
+                if (validatePin (mNewPin, false)) {
+                    mPinChangeState = PIN_CHANGE_REENTER;
+                    displayPinChangeDialog();
+                } else {
+                    displayPinChangeDialog(R.string.invalidPin2, true);
+                }
+                break;
+            case PIN_CHANGE_REENTER:
+                // if the re-entered pin is not valid, display a message and reset the state.
+                if (!mNewPin.equals(mButtonChangePin2.getText())) {
+                    mPinChangeState = PIN_CHANGE_NEW;
+                    mButtonChangePin2.setText("");
+                    displayPinChangeDialog(R.string.mismatchPin2, true);
+                } else {
+                    // If the PIN is valid, then we submit the change PIN request.
+                    mButtonChangePin2.setText("");
+                    Message onComplete = mFDNHandler.obtainMessage(
+                            EVENT_PIN2_CHANGE_COMPLETE);
+                    mPhone.getIccCard().changeIccFdnPassword(
+                            mOldPin, mNewPin, onComplete);
+                }
+                break;
+            case PIN_CHANGE_PUK: {
+                    // Doh! too many incorrect requests, PUK requested.
+                    mPuk2 = mButtonChangePin2.getText();
+                    mButtonChangePin2.setText("");
+                    // if the puk is not valid, display
+                    // a message and reset the state.
+                    if (validatePin (mPuk2, true)) {
+                        mPinChangeState = PIN_CHANGE_NEW_PIN_FOR_PUK;
+                        displayPinChangeDialog();
+                    } else {
+                        displayPinChangeDialog(R.string.invalidPuk2, true);
+                    }
+                }
+                break;
+            case PIN_CHANGE_NEW_PIN_FOR_PUK:
+                mNewPin = mButtonChangePin2.getText();
+                mButtonChangePin2.setText("");
+                // if the new pin is not valid, display
+                // a message and reset the state.
+                if (validatePin (mNewPin, false)) {
+                    mPinChangeState = PIN_CHANGE_REENTER_PIN_FOR_PUK;
+                    displayPinChangeDialog();
+                } else {
+                    displayPinChangeDialog(R.string.invalidPin2, true);
+                }
+                break;
+            case PIN_CHANGE_REENTER_PIN_FOR_PUK:
+                // if the re-entered pin is not valid, display
+                // a message and reset the state.
+                if (!mNewPin.equals(mButtonChangePin2.getText())) {
+                    mPinChangeState = PIN_CHANGE_NEW_PIN_FOR_PUK;
+                    mButtonChangePin2.setText("");
+                    displayPinChangeDialog(R.string.mismatchPin2, true);
+                } else {
+                    // Both puk2 and new pin2 are ready to submit
+                    mButtonChangePin2.setText("");
+                    Message onComplete = mFDNHandler.obtainMessage(
+                            EVENT_PIN2_CHANGE_COMPLETE);
+                    mPhone.getIccCard().supplyPuk2(mPuk2, mNewPin, onComplete);
+                }
+                break;
+        }
+    }
+
+    /**
+     * Handler for asynchronous replies from the sim.
+     */
+    private final Handler mFDNHandler = new Handler() {
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+
+                // when we are enabling FDN, either we are unsuccessful and display
+                // a toast, or just update the UI.
+                case EVENT_PIN2_ENTRY_COMPLETE: {
+                        AsyncResult ar = (AsyncResult) msg.obj;
+                        if (ar.exception != null) {
+                            if (ar.exception instanceof CommandException) {
+                                int attemptsRemaining = msg.arg1;
+                                // see if PUK2 is requested and alert the user accordingly.
+                                CommandException.Error e =
+                                        ((CommandException) ar.exception).getCommandError();
+                                switch (e) {
+                                    case SIM_PUK2:
+                                        // make sure we set the PUK2 state so that we can skip
+                                        // some redundant behaviour.
+                                        displayMessage(R.string.fdn_enable_puk2_requested,
+                                                attemptsRemaining);
+                                        resetPinChangeStateForPUK2();
+                                        break;
+                                    case PASSWORD_INCORRECT:
+                                        displayMessage(R.string.pin2_invalid, attemptsRemaining);
+                                        break;
+                                    default:
+                                        displayMessage(R.string.fdn_failed, attemptsRemaining);
+                                        break;
+                                }
+                            } else {
+                                displayMessage(R.string.pin2_error_exception);
+                            }
+                        }
+                        /// [MTK_FDN] Change to update whole screen.
+                        updateWholeScreen(mSubId);
+                    }
+                    break;
+
+                // when changing the pin we need to pay attention to whether or not
+                // the error requests a PUK (usually after too many incorrect tries)
+                // Set the state accordingly.
+                case EVENT_PIN2_CHANGE_COMPLETE: {
+                        if (DBG)
+                            log("Handle EVENT_PIN2_CHANGE_COMPLETE");
+                        AsyncResult ar = (AsyncResult) msg.obj;
+                        if (ar.exception != null) {
+                            if (ar.exception instanceof CommandException) {
+                                int attemptsRemaining = msg.arg1;
+                                log("Handle EVENT_PIN2_CHANGE_COMPLETE attemptsRemaining="
+                                        + attemptsRemaining);
+                                CommandException ce = (CommandException) ar.exception;
+                                /// [MTK_FDN] Handle error special @{
+                            if (handleChangePIN2ErrorForMTK(ce)) {
+                                log("Handle handleChangePIN2ErrorForMTK Enter~");
+                                /// @}
+                            } else if (ce.getCommandError() == CommandException.Error.SIM_PUK2) {
+                                    // throw an alert dialog on the screen, displaying the
+                                    // request for a PUK2.  set the cancel listener to
+                                    // FdnSetting.onCancel().
+                                    AlertDialog a = new AlertDialog.Builder(FdnSetting.this)
+                                        .setMessage(R.string.puk2_requested)
+                                        .setCancelable(true)
+                                        .setOnCancelListener(FdnSetting.this)
+                                        .setNeutralButton(android.R.string.ok,
+                                                new DialogInterface.OnClickListener() {
+                                                    @Override
+                                                    public void onClick(DialogInterface dialog,
+                                                            int which) {
+                                                        resetPinChangeStateForPUK2();
+                                                        displayPinChangeDialog(0,true);
+                                                    }
+                                                })
+                                        .create();
+                                    a.getWindow().addFlags(
+                                            WindowManager.LayoutParams.FLAG_DIM_BEHIND);
+                                    a.show();
+                                } else {
+                                    // set the correct error message depending upon the state.
+                                    // Reset the state depending upon or knowledge of the PUK state.
+                                    if (!mIsPuk2Locked) {
+                                        displayMessage(R.string.badPin2, attemptsRemaining);
+                                        resetPinChangeState();
+                                    } else {
+                                        displayMessage(R.string.badPuk2, attemptsRemaining);
+                                        resetPinChangeStateForPUK2();
+                                    }
+                                }
+                            } else {
+                                displayMessage(R.string.pin2_error_exception);
+                            }
+                        } else {
+                            if (mPinChangeState == PIN_CHANGE_PUK) {
+                                displayMessage(R.string.pin2_unblocked);
+                            } else {
+                                displayMessage(R.string.pin2_changed);
+                            }
+
+                            // reset to normal behaviour on successful change.
+                            resetPinChangeState(mSubId);
+                        }
+                        /// [MTK_FDN] Change to update whole screen.
+                        updateWholeScreen(mSubId);
+                    }
+                    break;
+            }
+        }
+    };
+
+    /**
+     * Cancel listener for the PUK2 request alert dialog.
+     */
+    @Override
+    public void onCancel(DialogInterface dialog) {
+        // set the state of the preference and then display the dialog.
+        resetPinChangeStateForPUK2(mSubId);
+        displayPinChangeDialog(0, true);
+        /// [MTK_FDN] Update the Enable fdn dialog's infomation @{
+        updateEnableFDNDialog();
+        /// @}
+    }
+
+    /**
+     * Display a toast for message, like the rest of the settings.
+     */
+    private final void displayMessage(int strId, int attemptsRemaining) {
+        String s = getString(strId);
+        if ((strId == R.string.badPin2) || (strId == R.string.badPuk2) ||
+                (strId == R.string.pin2_invalid)) {
+            if (attemptsRemaining >= 0) {
+                s = getString(strId) + getString(R.string.pin2_attempts, attemptsRemaining);
+            } else {
+                s = getString(strId);
+            }
+        }
+        log("displayMessage: attemptsRemaining=" + attemptsRemaining + " s=" + s);
+        Toast.makeText(this, s, Toast.LENGTH_SHORT).show();
+    }
+
+    private final void displayMessage(int strId) {
+        displayMessage(strId, -1);
+    }
+
+    /**
+     * The next two functions are for updating the message field on the dialog.
+     */
+    private final void displayPinChangeDialog() {
+        displayPinChangeDialog(0, true);
+    }
+
+    private final void displayPinChangeDialog(int strId, boolean shouldDisplay) {
+        int msgId;
+
+        /// [MTK_FDN] Add left rertry number~ @{
+        log("[displayPinChangeDialog] mPinChangeState : " + mPinChangeState);
+        String leftPinPukTipsString = "";
+        switch (mPinChangeState) {
+            case PIN_CHANGE_OLD:
+                msgId = R.string.oldPin2Label;
+                leftPinPukTipsString =
+                    "\n" + TelephonyUtils.getPinPuk2RetryLeftNumTips(this, mSubId, true);
+                break;
+            case PIN_CHANGE_NEW:
+            case PIN_CHANGE_NEW_PIN_FOR_PUK:
+                msgId = R.string.newPin2Label;
+                break;
+            case PIN_CHANGE_REENTER:
+            case PIN_CHANGE_REENTER_PIN_FOR_PUK:
+                msgId = R.string.confirmPin2Label;
+                break;
+            case PIN_CHANGE_PUK:
+            default:
+                msgId = R.string.label_puk2_code;
+                leftPinPukTipsString =
+                    "\n" + TelephonyUtils.getPinPuk2RetryLeftNumTips(this, mSubId, false);
+                break;
+        }
+
+        // append the note / additional message, if needed.
+        if (strId != 0) {
+            mButtonChangePin2.setDialogMessage(getText(msgId) + leftPinPukTipsString
+                    + "\n" + getText(strId));
+        } else {
+            mButtonChangePin2.setDialogMessage(getText(msgId) + leftPinPukTipsString);
+        }
+        /// @}
+
+        // only display if requested.
+        if (shouldDisplay) {
+            mButtonChangePin2.showPinDialog();
+        }
+    }
+
+    /**
+     * Reset the state of the pin change dialog.
+     */
+    private final void resetPinChangeState() {
+        if (DBG) log("resetPinChangeState");
+        mPinChangeState = PIN_CHANGE_OLD;
+        displayPinChangeDialog(0, false);
+        mOldPin = mNewPin = "";
+        mIsPuk2Locked = false;
+    }
+
+    /**
+     * Reset the state of the pin change dialog solely for PUK2 use.
+     */
+    private final void resetPinChangeStateForPUK2() {
+        if (DBG) log("resetPinChangeStateForPUK2");
+        mPinChangeState = PIN_CHANGE_PUK;
+        displayPinChangeDialog(0, false);
+        mOldPin = mNewPin = mPuk2 = "";
+        mIsPuk2Locked = true;
+    }
+
+    /**
+     * Validate the pin entry.
+     *
+     * @param pin This is the pin to validate
+     * @param isPuk Boolean indicating whether we are to treat
+     * the pin input as a puk.
+     */
+    private boolean validatePin(String pin, boolean isPuk) {
+
+        // for pin, we have 4-8 numbers, or puk, we use only 8.
+        int pinMinimum = isPuk ? MAX_PIN_LENGTH : MIN_PIN_LENGTH;
+
+        // check validity
+        if (pin == null || pin.length() < pinMinimum || pin.length() > MAX_PIN_LENGTH) {
+            return false;
+        } else {
+            return true;
+        }
+    }
+
+    /**
+     * Reflect the updated FDN state in the UI.
+     */
+    private void updateEnableFDN() {
+        if (mPhone.getIccCard().getIccFdnEnabled()) {
+            mButtonEnableFDN.setTitle(R.string.enable_fdn_ok);
+            mButtonEnableFDN.setSummary(R.string.fdn_enabled);
+            mButtonEnableFDN.setDialogTitle(R.string.disable_fdn);
+        } else {
+            mButtonEnableFDN.setTitle(R.string.disable_fdn_ok);
+            mButtonEnableFDN.setSummary(R.string.fdn_disabled);
+            mButtonEnableFDN.setDialogTitle(R.string.enable_fdn);
+        }
+    }
+
+    /**
+    * Reflect the updated change PIN2 state in the UI.
+    */
+    private void updateChangePIN2() {
+        if (mPhone.getIccCard().getIccPin2Blocked()) {
+            // If the pin2 is blocked, the state of the change pin2 dialog
+            // should be set for puk2 use (that is, the user should be prompted
+            // to enter puk2 code instead of old pin2).
+            resetPinChangeStateForPUK2();
+        } else {
+            resetPinChangeState();
+        }
+    }
+
+    @Override
+    protected void onCreate(Bundle icicle) {
+        super.onCreate(icicle);
+
+        mSubscriptionInfoHelper = new SubscriptionInfoHelper(this, getIntent());
+        mPhone = mSubscriptionInfoHelper.getPhone();
+        /// M: add for qiuckly hot swap when tap this preference
+        if (mPhone == null) {
+            log("onCreate: mPhone is null, finish!!!");
+            finish();
+            return;
+        }
+
+        addPreferencesFromResource(R.xml.fdn_setting);
+
+        //get UI object references
+        PreferenceScreen prefSet = getPreferenceScreen();
+        mButtonEnableFDN = (EditPinPreference) prefSet.findPreference(BUTTON_FDN_ENABLE_KEY);
+        mButtonChangePin2 = (EditPinPreference) prefSet.findPreference(BUTTON_CHANGE_PIN2_KEY);
+
+        //assign click listener and update state
+        mButtonEnableFDN.setOnPinEnteredListener(this);
+        updateEnableFDN();
+
+        mButtonChangePin2.setOnPinEnteredListener(this);
+
+        PreferenceScreen fdnListPref =
+                (PreferenceScreen) prefSet.findPreference(FDN_LIST_PREF_SCREEN_KEY);
+        fdnListPref.setIntent(mSubscriptionInfoHelper.getIntent(FdnList.class));
+
+        // Only reset the pin change dialog if we're not in the middle of changing it.
+        if (icicle == null) {
+            resetPinChangeState();
+        } else {
+            mIsPuk2Locked = icicle.getBoolean(SKIP_OLD_PIN_KEY);
+            mPinChangeState = icicle.getInt(PIN_CHANGE_STATE_KEY);
+            mOldPin = icicle.getString(OLD_PIN_KEY);
+            mNewPin = icicle.getString(NEW_PIN_KEY);
+            mButtonChangePin2.setDialogMessage(icicle.getString(DIALOG_MESSAGE_KEY));
+            mButtonChangePin2.setText(icicle.getString(DIALOG_PIN_ENTRY_KEY));
+        }
+
+        ActionBar actionBar = getActionBar();
+        if (actionBar != null) {
+            // android.R.id.home will be triggered in onOptionsItemSelected()
+            actionBar.setDisplayHomeAsUpEnabled(true);
+            mSubscriptionInfoHelper.setActionBarTitle(
+                    actionBar, getResources(), R.string.fdn_with_label);
+        }
+
+        /// M: Add subId
+        mSubId = mPhone.getSubId();
+
+        /// [MTK_FDN]
+        onCreateMTK(prefSet);
+
+        /// M: listen to SIM and PHB state change to update screen
+        final IntentFilter ifilter = new IntentFilter();
+        ifilter.addAction(TelephonyIntents.ACTION_PHB_STATE_CHANGED);
+        ifilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
+        ifilter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
+        registerReceiver(mReceiver, ifilter);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        /** M: [MTK_FDN] move update functions to updateWholeScreen @{
+        mPhone = mSubscriptionInfoHelper.getPhone();
+        updateEnableFDN();
+        updateChangePIN2();
+        @} */
+        updateWholeScreen(mSubId);
+    }
+
+    /**
+     * Save the state of the pin change.
+     */
+    @Override
+    protected void onSaveInstanceState(Bundle out) {
+        super.onSaveInstanceState(out);
+        out.putBoolean(SKIP_OLD_PIN_KEY, mIsPuk2Locked);
+        out.putInt(PIN_CHANGE_STATE_KEY, mPinChangeState);
+        out.putString(OLD_PIN_KEY, mOldPin);
+        out.putString(NEW_PIN_KEY, mNewPin);
+        out.putString(DIALOG_MESSAGE_KEY, mButtonChangePin2.getDialogMessage().toString());
+        out.putString(DIALOG_PIN_ENTRY_KEY, mButtonChangePin2.getText());
+        /// [MTK_FDN] Save the subId.
+        out.putInt(SubscriptionInfoHelper.SUB_ID_EXTRA, mSubId);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        final int itemId = item.getItemId();
+        if (itemId == android.R.id.home) {  // See ActionBar#setDisplayHomeAsUpEnabled()
+            CallFeaturesSetting.goUpToTopLevelSetting(this, mSubscriptionInfoHelper);
+            return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    private void log(String msg) {
+        Log.d(LOG_TAG, "FdnSetting: " + msg);
+    }
+
+    //----------------------- MTK -------------------------
+    // [MTK_FDN] Add retry left time behind the title
+    private int mSubId = SubscriptionInfoHelper.NO_SUB_ID;
+    private Preference mButtonFDNList;
+
+    private void onCreateMTK(PreferenceScreen prefSet) {
+        mButtonFDNList = (PreferenceScreen) prefSet.findPreference(FDN_LIST_PREF_SCREEN_KEY);
+        if (null != mButtonFDNList) {
+            mButtonFDNList.setOnPreferenceClickListener(this);
+        }
+        if (null != mButtonEnableFDN) {
+            mButtonEnableFDN.setOnPreferenceClickListener(this);
+        }
+
+        PhoneGlobals.getInstance().addSubInfoUpdateListener(this);
+
+        if (!PhoneUtils.isValidSubId(mSubId)) {
+            finish();
+            log("onCreate, finish for invalid sub = " + mSubId);
+        }
+    }
+
+    @Override
+    public boolean onPreferenceClick(Preference preference) {
+        log("[onPreferenceClick]");
+        if (preference == mButtonEnableFDN) {
+            if (TelephonyUtils.getPin2RetryNumber(mSubId) == 0) {
+                log("[onPreferenceClick] retry number is 0, tips...");
+                ///For we should not show the Enable dialog, when the PIN2 is locked.
+                if (mButtonEnableFDN.getDialog() != null) {
+                    mButtonEnableFDN.getDialog().dismiss();
+                }
+                displayMessage(R.string.fdn_puk_need_tips);
+                return true;
+            }
+        } else if (preference == mButtonFDNList) {
+            if (TelephonyUtils.isPhoneBookReady(this, mSubId)) {
+                startActivity(preference.getIntent().putExtra(
+                        SubscriptionInfoHelper.SUB_ID_EXTRA, mSubId));
+            }
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Customer the Enable FDN dialog tip messages
+     *
+     * @param resId String's resource id
+     */
+    private void updateEnableFDNDialog() {
+        log("[updateEnableFDNDialog]");
+
+        mButtonEnableFDN.setDialogMessage(getString(R.string.enter_pin2_text) + "\n"
+                 + TelephonyUtils.getPinPuk2RetryLeftNumTips(this, mSubId, true));
+    }
+
+    /**
+     * Reset the state of the pin change dialog.
+     * MTK add subId & modify PUK2 flow.
+     * @param subId the subId of the user selected.
+     */
+    private final void resetPinChangeState(int subId) {
+        if (DBG) log("resetPinChangeState...");
+        if (TelephonyUtils.getPin2RetryNumber(subId) == 0) {
+            resetPinChangeStateForPUK2(mSubId);
+            return;
+        }
+        resetPinChangeState();
+        // Also update Enabel FDN dialog
+        updateEnableFDNDialog();
+    }
+
+    /**
+     * Reset the state of the pin change dialog solely for PUK2 use.
+     */
+    private final void resetPinChangeStateForPUK2(int subId) {
+        if (DBG) log("resetPinChangeStateForPUK2...");
+        if (TelephonyUtils.getPuk2RetryNumber(subId) == 0) {
+            log("[resetPinChangeStateForPUK2] PUK Retry number is 0, PUK2 Locked!!");
+            displayMessage(R.string.puk2_blocked);
+            return;
+        }
+        resetPinChangeStateForPUK2();
+        // Also update Enabel FDN dialog
+        updateEnableFDNDialog();
+    }
+
+    @Override
+    public void onDestroy() {
+        PhoneGlobals.getInstance().removeSubInfoUpdateListener(this);
+        unregisterReceiver(mReceiver);
+        super.onDestroy();
+    }
+
+    @Override
+    public void handleSubInfoUpdate() {
+        finish();
+    }
+
+    /**
+     * This function contains all refresh flow.
+     * 1. Enable FDN item
+     * 2. Change PIN2 item
+     * 3. FDN list item
+     * Rule is simple: if the FDN is don't supported, disable 1 & 3 items.
+     * @param subId
+     */
+    private void updateWholeScreen(int subId) {
+        // Enter this function, should make sure the mPhone & mSubId is avaliable.
+        ///M: Bug fix ALPS03531648 @{
+        if (TelephonyUtils.isAirplaneModeOn(this)) {
+           log("[updateWholeScreen] AirplaneMode ON, so finish FdnSettings");
+           finish();
+        }
+        /// @}
+
+        IccCard iccCard = mPhone.getIccCard();
+        if (iccCard != null) {
+            boolean fdnAvailable = iccCard.getIccFdnAvailable();
+            log("[updateWholeScreen] FDN available = " + fdnAvailable);
+            mButtonEnableFDN.setEnabled(fdnAvailable);
+            mButtonFDNList.setEnabled(fdnAvailable);
+
+            updateEnableFDN();
+            updateChangePIN2();
+            resetPinChangeState(subId);
+            updateEnableFDNDialog();
+        }
+    }
+
+    /**
+     * Handle messages MTK special
+     * @param ce
+     * @return
+     */
+    private boolean handleChangePIN2ErrorForMTK(CommandException ce) {
+        log("Handle EVENT_PIN2_CHANGE_COMPLETE Error Code ="
+                + ce.getCommandError().toString());
+        if (CommandException.Error.RADIO_NOT_AVAILABLE == ce.getCommandError()) {
+            displayMessage(R.string.fdn_errorcode_unknown_info);
+            return true;
+        }
+        return false;
+    }
+
+    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if(TelephonyIntents.ACTION_PHB_STATE_CHANGED.equals(intent.getAction())) {
+                log("PHB_STATE_CHANGED, update screen");
+                updateWholeScreen(mSubId);
+            } else if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(intent.getAction())) {
+                log("SIM_STATE_CHANGED, update screen");
+                updateWholeScreen(mSubId);
+            } else if (Intent.ACTION_AIRPLANE_MODE_CHANGED.equals(intent.getAction())) {
+                log("AIRPLANE_MODE_CHANGED, so finish FDN Settings");
+                finish();
+            }
+        }
+    };
+}
