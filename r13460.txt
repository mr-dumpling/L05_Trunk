Index: vendor/branch/5058Y_ALGB/packages/apps/Settings/src/com/mediatek/settings/TetherSettingsExt.java
===================================================================
--- vendor/branch/5058Y_ALGB/packages/apps/Settings/src/com/mediatek/settings/TetherSettingsExt.java	(revision 0)
+++ vendor/branch/5058Y_ALGB/packages/apps/Settings/src/com/mediatek/settings/TetherSettingsExt.java	(revision 13460)
@@ -0,0 +1,257 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein
+ * is confidential and proprietary to MediaTek Inc. and/or its licensors.
+ * Without the prior written permission of MediaTek inc. and/or its licensors,
+ * any reproduction, modification, use or disclosure of MediaTek Software,
+ * and information contained herein, in whole or in part, shall be strictly prohibited.
+ *
+ * MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
+ * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
+ * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
+ * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
+ * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
+ * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
+ * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
+ * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
+ * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
+ * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
+ * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
+ * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
+ * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ */
+
+package com.mediatek.settings;
+
+import android.app.Activity;
+import android.bluetooth.BluetoothDun;
+import android.bluetooth.BluetoothPan;
+import android.content.ActivityNotFoundException;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.res.Resources;
+import android.net.ConnectivityManager;
+import android.net.wifi.WifiManager;
+import android.os.IBinder;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.storage.IMountService;
+import android.provider.Settings.System;
+import android.support.v14.preference.PreferenceFragment;
+import android.support.v14.preference.SwitchPreference;
+import android.support.v7.preference.CheckBoxPreference;
+import android.support.v7.preference.ListPreference;
+import android.support.v7.preference.Preference.OnPreferenceChangeListener;
+import android.support.v7.preference.Preference.OnPreferenceClickListener;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceCategory;
+import android.support.v7.preference.PreferenceScreen;
+import android.support.v7.preference.PreferenceGroup;
+import android.util.Log;
+import android.widget.Toast;
+
+import com.android.settings.R;
+import com.android.settings.Utils;
+import com.mediatek.settings.ext.IApnSettingsExt;
+
+import java.util.concurrent.atomic.AtomicReference;
+
+public class TetherSettingsExt implements OnPreferenceClickListener,
+        OnPreferenceChangeListener {
+    private static final String TAG = "TetherSettingsExt";
+
+    private static final String KEY_WIFI_TETHER = "wifi_tether_settings";
+    private static final String USB_DATA_STATE = "mediatek.intent.action.USB_DATA_STATE";
+    private static final String ACTION_WIFI_HOTSPOT = "mediatek.intent.action.WIFI_TETHER";
+
+    private IMountService mMountService = null;
+    private ConnectivityManager mConnectService;
+    private Context mContext;
+    private Resources mResources;
+    private PreferenceScreen mPrfscreen;
+    public Preference mWifiTether;
+
+    private String[] mBluetoothRegexs;
+
+    IApnSettingsExt mExt;
+
+    private BluetoothDun mBluetoothDunProxy;
+    private AtomicReference<BluetoothDun> mBluetoothDun = new AtomicReference<BluetoothDun>();
+
+    public TetherSettingsExt(Context context) {
+        Log.d(TAG, "TetherSettingsExt");
+        mContext = context;
+        initServices();
+    }
+
+    public void onCreate(PreferenceScreen screen) {
+        Log.d(TAG, "onCreate");
+        mPrfscreen = screen;
+        initPreference(screen);
+        /// get plugin
+        mExt = UtilsExt.getApnSettingsPlugin(mContext);
+        /// add tether apn settings
+        mExt.customizeTetherApnSettings(screen);
+
+        mBluetoothDunProxy = new BluetoothDun(mContext, mDunServiceListener);
+    }
+
+    public void onStart(Activity activity, BroadcastReceiver receiver) {
+        // add the receiver intent filter
+        IntentFilter filter = getIntentFilter();
+        activity.registerReceiver(receiver, filter);
+    }
+
+    public void onDestroy() {
+        BluetoothDun dun = mBluetoothDun.get();
+        if (dun != null) {
+            dun.close();
+            mBluetoothDun.set(null);
+            dun = null;
+        }
+
+        if (mBluetoothDunProxy != null) {
+            mBluetoothDunProxy.close();
+            mBluetoothDunProxy = null;
+        }
+    }
+
+    public boolean onPreferenceChange(Preference preference, Object value) {
+        String key = preference.getKey();
+        Log.d(TAG, "onPreferenceChange key=" + key);
+        return true;
+    }
+
+    public void updateWifiTether(Preference enableWifiAp,
+            Preference wifiApSettings, boolean wifiAvailable) {
+        mPrfscreen.removePreference(enableWifiAp);
+        mPrfscreen.removePreference(wifiApSettings);
+        if (!wifiAvailable || Utils.isMonkeyRunning() || Utils.isWifiOnly(mContext)) {
+            mPrfscreen.removePreference(mWifiTether);
+        }
+    }
+    private void initPreference(PreferenceScreen screen) {
+        mWifiTether = new Preference(mContext);
+        mWifiTether.setKey(KEY_WIFI_TETHER);
+        mWifiTether.setTitle( R.string.wifi_tethering_title);
+        screen.addPreference(mWifiTether);
+        mWifiTether.setOnPreferenceClickListener(this);
+    }
+    public IntentFilter getIntentFilter() {
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(USB_DATA_STATE);
+        filter.addAction(BluetoothPan.ACTION_CONNECTION_STATE_CHANGED);
+        filter.addAction(BluetoothDun.STATE_CHANGED_ACTION);
+        filter.addAction(WifiManager.WIFI_AP_STATE_CHANGED_ACTION);
+        return filter;
+    }
+    @Override
+    public boolean onPreferenceClick(Preference preference) {
+        if (preference == mWifiTether) {
+            try {
+                Intent intent = new Intent(ACTION_WIFI_HOTSPOT);
+                mContext.startActivity(intent);
+            } catch (ActivityNotFoundException e) {
+                Toast.makeText(mContext, R.string.launch_error,
+                        Toast.LENGTH_SHORT).show();
+            }
+        }
+        return true;
+    }
+
+    private synchronized void initServices() {
+        // get mount service
+        if (mMountService == null) {
+            IBinder service = ServiceManager.getService("mount");
+            if (service != null) {
+                mMountService = IMountService.Stub.asInterface(service);
+            } else {
+                Log.e(TAG, "Can't get mount service");
+            }
+        }
+        // get connectivity service
+        mConnectService = (ConnectivityManager) mContext
+                .getSystemService(Context.CONNECTIVITY_SERVICE);
+        // get Resource
+        mResources = mContext.getResources();
+        mBluetoothRegexs = mConnectService.getTetherableBluetoothRegexs();
+    }
+
+    public boolean isUMSEnabled() {
+        if (mMountService == null) {
+            Log.d(TAG, " mMountService is null, return");
+            return false;
+        }
+        try {
+            return mMountService.isUsbMassStorageEnabled();
+        } catch (RemoteException e) {
+            Log.e(TAG, "Util:RemoteException when isUsbMassStorageEnabled: " + e);
+            return false;
+        } catch (UnsupportedOperationException ex) {
+            Log.e(TAG, "this device doesn't support UMS");
+            return false;
+        }
+    }
+
+    public void updateBTPrfSummary(Preference pref, String originSummary) {
+        pref.setSummary(originSummary);
+    }
+
+    public void updateBtTetherState(SwitchPreference btPrf) {
+        BluetoothDun dun = BluetoothDunGetProxy();
+        if (dun != null && dun.isTetheringOn() && btPrf != null) {
+            btPrf.setChecked(true);
+        } else {
+            btPrf.setChecked(false);
+        }
+    }
+
+    public void updateBtDunTether(boolean state) {
+        BluetoothDun bluetoothDun = BluetoothDunGetProxy();
+        if (bluetoothDun != null) {
+            bluetoothDun.setBluetoothTethering(state);
+        }
+    }
+
+    private BluetoothDun.ServiceListener mDunServiceListener = new BluetoothDun.ServiceListener() {
+        public void onServiceConnected(BluetoothDun proxy) {
+            Log.d(TAG, "BluetoothDun service connected");
+            mBluetoothDun.set((BluetoothDun) proxy);
+        }
+
+        public void onServiceDisconnected() {
+            Log.d(TAG, "BluetoothDun service disconnected");
+            BluetoothDun dun = mBluetoothDun.get();
+            if (dun != null) {
+                dun.close();
+                dun = null;
+            }
+            mBluetoothDun.set(null);
+            mBluetoothDunProxy = null;
+        }
+    };
+
+    public BluetoothDun BluetoothDunGetProxy() {
+        BluetoothDun Dun = mBluetoothDun.get();
+        if (Dun == null) {
+            if (mBluetoothDunProxy != null) {
+                mBluetoothDun.set(mBluetoothDunProxy);
+            } else {
+                mBluetoothDunProxy = new BluetoothDun(mContext, mDunServiceListener);
+            }
+            return mBluetoothDunProxy;
+        } else {
+            return Dun;
+        }
+    }
+}
Index: vendor/branch/5058Y_ALGB/packages/apps/Settings/res/xml/tether_prefs.xml
===================================================================
--- vendor/branch/5058Y_ALGB/packages/apps/Settings/res/xml/tether_prefs.xml	(revision 0)
+++ vendor/branch/5058Y_ALGB/packages/apps/Settings/res/xml/tether_prefs.xml	(revision 13460)
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2008 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:settings="http://schemas.android.com/apk/res-auto">
+
+    <SwitchPreference
+        android:key="usb_tether_settings"
+        android:title="@string/usb_tethering_button_text" />
+
+    <SwitchPreference
+        android:key="enable_wifi_ap"
+        android:title="@string/wifi_tether_checkbox_text" />
+
+    <Preference
+        android:key="wifi_ap_ssid_and_security"
+        android:title="@string/wifi_tether_configure_ap_text"
+        android:persistent="false" />
+
+    <SwitchPreference
+        android:key="enable_bluetooth_tethering"
+        android:title="@string/bluetooth_tether_checkbox_text" />
+
+    <com.android.settings.DividerPreference
+            android:key="disabled_on_data_saver"
+            android:summary="@string/tether_settings_disabled_on_data_saver"
+            android:selectable="false"
+            settings:allowDividerAbove="true" />
+</PreferenceScreen>
