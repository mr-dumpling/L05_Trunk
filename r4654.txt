Index: vendor/branch/5058A_Telefonica/frameworks/base/packages/Keyguard/src/com/android/keyguard/EmergencyButton.java
===================================================================
--- vendor/branch/5058A_Telefonica/frameworks/base/packages/Keyguard/src/com/android/keyguard/EmergencyButton.java	(revision 0)
+++ vendor/branch/5058A_Telefonica/frameworks/base/packages/Keyguard/src/com/android/keyguard/EmergencyButton.java	(revision 4654)
@@ -0,0 +1,393 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.keyguard;
+
+import android.app.ActivityManagerNative;
+import android.app.ActivityOptions;
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.TypedArray;
+import android.content.res.Configuration;
+import android.os.Bundle;
+import android.os.PowerManager;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.SystemClock;
+import android.os.UserHandle;
+import android.telecom.TelecomManager;
+
+import android.telephony.ServiceState;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.util.Slog;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewConfiguration;
+import android.widget.Button;
+
+import com.android.internal.logging.MetricsLogger;
+import com.android.internal.logging.MetricsProto.MetricsEvent;
+import com.android.internal.telephony.IccCardConstants.State;
+import com.android.internal.widget.LockPatternUtils;
+import com.android.internal.policy.EmergencyAffordanceManager;
+
+import com.mediatek.internal.telephony.ITelephonyEx;
+import com.mediatek.keyguard.AntiTheft.AntiTheftManager;
+import com.mediatek.keyguard.Plugin.KeyguardPluginFactory;
+import com.mediatek.keyguard.ext.IEmergencyButtonExt;
+
+/**
+ * This class implements a smart emergency button that updates itself based
+ * on telephony state.  When the phone is idle, it is an emergency call button.
+ * When there's a call in progress, it presents an appropriate message and
+ * allows the user to return to the call.
+ */
+public class EmergencyButton extends Button {
+    private static final Intent INTENT_EMERGENCY_DIAL = new Intent()
+            .setAction("com.android.phone.EmergencyDialer.DIAL")
+            .setPackage("com.android.phone")
+            .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
+                    | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS
+                    | Intent.FLAG_ACTIVITY_CLEAR_TOP);
+
+    /// M: add for phoneId in Ecc intent in none security mode
+    private int mEccPhoneIdForNoneSecurityMode = -1;
+
+    ///M : Added for operator feature. This will help to check the position
+    // of current ECC button(i.e. Notification Keyguard or Bouncer)
+    private boolean mLocateAtNonSecureView = false ;
+
+    private static final String LOG_TAG = "EmergencyButton";
+    private final EmergencyAffordanceManager mEmergencyAffordanceManager;
+
+    private int mDownX;
+    private int mDownY;
+    KeyguardUpdateMonitorCallback mInfoCallback = new KeyguardUpdateMonitorCallback() {
+
+        @Override
+        public void onSimStateChanged(int subId, int slotId, State simState) {
+            updateEmergencyCallButton();
+        }
+
+
+        @Override
+        public void onSimStateChangedUsingPhoneId(int phoneId, State simState) {
+            Log.d(LOG_TAG, "onSimStateChangedUsingSubId: " + simState + ", phoneId=" + phoneId);
+            updateEmergencyCallButton();
+        }
+
+        @Override
+        public void onPhoneStateChanged(int phoneState) {
+            updateEmergencyCallButton();
+        }
+
+        /// M: CTA new feature
+        @Override
+        public void onRefreshCarrierInfo() {
+            updateEmergencyCallButton();
+        }
+    };
+    private boolean mLongPressWasDragged;
+
+    public interface EmergencyButtonCallback {
+        public void onEmergencyButtonClickedWhenInCall();
+    }
+
+    private LockPatternUtils mLockPatternUtils;
+    private PowerManager mPowerManager;
+
+    /// M: For the extra info of the intent to start emergency dialer
+    private IEmergencyButtonExt mEmergencyButtonExt;
+
+    private EmergencyButtonCallback mEmergencyButtonCallback;
+
+    private final boolean mIsVoiceCapable;
+    private final boolean mEnableEmergencyCallWhileSimLocked;
+
+    public EmergencyButton(Context context) {
+        this(context, null);
+    }
+
+    public EmergencyButton(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        mIsVoiceCapable = context.getResources().getBoolean(
+                com.android.internal.R.bool.config_voice_capable);
+        mEnableEmergencyCallWhileSimLocked = mContext.getResources().getBoolean(
+                com.android.internal.R.bool.config_enable_emergency_call_while_sim_locked);
+        mEmergencyAffordanceManager = new EmergencyAffordanceManager(context);
+
+        /// M: Init keyguard operator plugin @{
+        try {
+            mEmergencyButtonExt = KeyguardPluginFactory.getEmergencyButtonExt(context);
+        } catch (Exception e) {
+            Log.d(LOG_TAG, "EmergencyButton() - error in calling getEmergencyButtonExt().") ;
+            e.printStackTrace();
+        }
+        /// @}
+
+        TypedArray localAtNonSecureValue =
+                context.obtainStyledAttributes(attrs, R.styleable.ECCButtonAttr);
+        mLocateAtNonSecureView = localAtNonSecureValue.getBoolean(
+                R.styleable.ECCButtonAttr_locateAtNonSecureView, mLocateAtNonSecureView);
+        localAtNonSecureValue = null;
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        KeyguardUpdateMonitor.getInstance(mContext).registerCallback(mInfoCallback);
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        KeyguardUpdateMonitor.getInstance(mContext).removeCallback(mInfoCallback);
+    }
+
+    @Override
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+        mLockPatternUtils = new LockPatternUtils(mContext);
+        mPowerManager = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
+        setOnClickListener(new OnClickListener() {
+            public void onClick(View v) {
+                takeEmergencyCallAction();
+            }
+        });
+
+        /// M: Save secure query result here, when lockscreen is created, secure result should
+        /// stay unchanged @{
+        mIsSecure = mLockPatternUtils.isSecure(KeyguardUpdateMonitor.getCurrentUser());
+        /// @}
+        setOnLongClickListener(new OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View v) {
+                if (!mLongPressWasDragged
+                        && mEmergencyAffordanceManager.needsEmergencyAffordance()) {
+                    mEmergencyAffordanceManager.performEmergencyCall();
+                    return true;
+                }
+                return false;
+            }
+        });
+        updateEmergencyCallButton();
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        final int x = (int) event.getX();
+        final int y = (int) event.getY();
+        if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
+            mDownX = x;
+            mDownY = y;
+            mLongPressWasDragged = false;
+        } else {
+            final int xDiff = Math.abs(x - mDownX);
+            final int yDiff = Math.abs(y - mDownY);
+            int touchSlop = ViewConfiguration.get(mContext).getScaledTouchSlop();
+            if (Math.abs(yDiff) > touchSlop || Math.abs(xDiff) > touchSlop) {
+                mLongPressWasDragged = true;
+            }
+        }
+        return super.onTouchEvent(event);
+    }
+
+    @Override
+    public boolean performLongClick() {
+        return super.performLongClick();
+    }
+
+    @Override
+    protected void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        ///M: fix ALPS01969662, force to reload string when config(locale) changed.
+        setText(R.string.kg_emergency_call_label);
+        updateEmergencyCallButton();
+    }
+
+    /**
+     * Shows the emergency dialer or returns the user to the existing call.
+     */
+    public void takeEmergencyCallAction() {
+        MetricsLogger.action(mContext, MetricsEvent.ACTION_EMERGENCY_CALL);
+        // TODO: implement a shorter timeout once new PowerManager API is ready.
+        // should be the equivalent to the old userActivity(EMERGENCY_CALL_TIMEOUT)
+        mPowerManager.userActivity(SystemClock.uptimeMillis(), true);
+        try {
+            ActivityManagerNative.getDefault().stopSystemLockTaskMode();
+        } catch (RemoteException e) {
+            Slog.w(LOG_TAG, "Failed to stop app pinning");
+        }
+        if (isInCall()) {
+            resumeCall();
+            if (mEmergencyButtonCallback != null) {
+                mEmergencyButtonCallback.onEmergencyButtonClickedWhenInCall();
+            }
+        } else {
+            KeyguardUpdateMonitor.getInstance(mContext).reportEmergencyCallAction(
+                    true /* bypassHandler */);
+
+            /// --------------- L PreMigration ------------
+            /// M: Fill the extra info the intent to start emergency dialer.
+            /// M: add for Ecc intent in none security mode
+            int phoneId = getCurPhoneId();
+            if (phoneId == -1) {
+                phoneId = mEccPhoneIdForNoneSecurityMode;
+            }
+            mEmergencyButtonExt.customizeEmergencyIntent(INTENT_EMERGENCY_DIAL, phoneId);
+            /// --------------- L PreMigration ------------
+
+            getContext().startActivityAsUser(INTENT_EMERGENCY_DIAL,
+                    ActivityOptions.makeCustomAnimation(getContext(), 0, 0).toBundle(),
+                    new UserHandle(KeyguardUpdateMonitor.getCurrentUser()));
+        }
+    }
+
+    private void updateEmergencyCallButton() {
+        boolean visible = false;
+        /// M: remove mIsVoiceCapable qualification @{
+        //if (mIsVoiceCapable) {
+            // Emergency calling requires voice capability.
+            if (isInCall()) {
+                visible = true; // always show "return to call" if phone is off-hook
+            } else if (mLockPatternUtils.isEmergencyCallCapable()) {
+                final boolean simLocked = KeyguardUpdateMonitor.getInstance(mContext)
+                        .isSimPinVoiceSecure();
+                if (simLocked) {
+                    // Some countries can't handle emergency calls while SIM is locked.
+                    visible = mEnableEmergencyCallWhileSimLocked;
+                } else {
+                    // Only show if there is a secure screen (pin/pattern/SIM pin/SIM puk);
+                    visible = mLockPatternUtils.isSecure(KeyguardUpdateMonitor.getCurrentUser());
+                }
+            }
+
+            boolean show = false ;
+
+            /// M: If antitheft lock is on, we should also show ECC button @{
+            boolean antiTheftLocked = AntiTheftManager.isAntiTheftLocked();
+            /// M:CTA new feature
+           // boolean eccShouldShow = eccButtonShouldShow();
+           boolean eccShouldShow = true;
+
+            Log.i(LOG_TAG, "mLocateAtNonSecureView = " + mLocateAtNonSecureView) ;
+
+            if (mLocateAtNonSecureView && !mEmergencyButtonExt.showEccInNonSecureUnlock()) {
+                Log.i(LOG_TAG, "ECC Button is located on Notification Keygaurd and OP do not ask"
+                        + " to show. So this is a normal case ,we never show it.") ;
+                show = false ;
+            } else {
+                show = (visible || antiTheftLocked
+                        || mEmergencyButtonExt.showEccInNonSecureUnlock())
+                        && eccShouldShow;
+
+                Log.i(LOG_TAG, "show = " + show + " --> visible= " + visible + ", antiTheftLocked="
+                    + antiTheftLocked + ", mEmergencyButtonExt.showEccInNonSecureUnlock() ="
+                    + mEmergencyButtonExt.showEccInNonSecureUnlock() + ", eccShouldShow="
+                    + eccShouldShow);
+            }
+
+            if (mLocateAtNonSecureView && !show) {
+                Log.i(LOG_TAG, "If the button is on NotificationKeyguard and will not show," +
+                    " we should just set it View.GONE to give more space to IndicationText.") ;
+                this.setVisibility(View.GONE);
+            } else {
+                mLockPatternUtils.updateEmergencyCallButtonState(this, show, false);
+            }
+
+        //}
+        /// @}
+    }
+
+    public void setCallback(EmergencyButtonCallback callback) {
+        mEmergencyButtonCallback = callback;
+    }
+
+    /**
+     * Resumes a call in progress.
+     */
+    private void resumeCall() {
+        getTelecommManager().showInCallScreen(false);
+    }
+
+    /**
+     * @return {@code true} if there is a call currently in progress.
+     */
+    private boolean isInCall() {
+        return getTelecommManager().isInCall();
+    }
+
+    private TelecomManager getTelecommManager() {
+        return (TelecomManager) mContext.getSystemService(Context.TELECOM_SERVICE);
+    }
+
+    /// M: CTA new feature
+    private boolean eccButtonShouldShow() {
+        Bundle bd = null;
+        int phoneCount = KeyguardUtils.getNumOfPhone();
+        boolean[] isServiceSupportEcc = new boolean[phoneCount];
+
+        try {
+            ITelephonyEx phoneEx = ITelephonyEx.Stub.asInterface(
+                    ServiceManager.checkService("phoneEx"));
+
+            if (phoneEx != null) {
+                /// M: add for Ecc intent in none security mode
+                mEccPhoneIdForNoneSecurityMode = -1;
+                for (int i = 0; i < phoneCount; i++) {
+                    int subId = KeyguardUtils.getSubIdUsingPhoneId(i);
+                    bd = phoneEx.getServiceState(subId);
+                    if (bd != null) {
+                        ServiceState ss = ServiceState.newFromBundle(bd);
+                        Log.i(LOG_TAG, "ss.getState()=" + ss.getState() + " ss.isEmergencyOnly()="
+                                + ss.isEmergencyOnly() + " for simId=" + i);
+                        if (ServiceState.STATE_IN_SERVICE == ss.getState()
+                                || ss.isEmergencyOnly()) {  //Full service or Limited service
+                            isServiceSupportEcc[i] = true;
+                            /// M: add for Ecc intent in none security mode
+                            if (mEccPhoneIdForNoneSecurityMode == -1) {
+                                mEccPhoneIdForNoneSecurityMode = i;
+                            }
+                        } else {
+                            isServiceSupportEcc[i] = false;
+                        }
+                    }
+                }
+            }
+        } catch (RemoteException e) {
+            Log.i(LOG_TAG, "getServiceState error e:" + e.getMessage());
+        }
+
+        return mEmergencyButtonExt.showEccByServiceState(isServiceSupportEcc, getCurPhoneId());
+    }
+
+    /// M: Optimization, save lockpatternUtils's isSecure state
+    private boolean mIsSecure;
+
+    /**
+     * M: Add for operator customization.
+     * Get current sim slot id of PIN/PUK lock via security mode.
+     *
+     * @return Current sim phone id,
+     *      return 0-3, current lockscreen is PIN/PUK,
+     *      return -1, current lockscreen is not PIN/PUK.
+     */
+    private int getCurPhoneId() {
+        KeyguardSecurityModel securityModel = new KeyguardSecurityModel(mContext);
+        return securityModel.getPhoneIdUsingSecurityMode(securityModel.getSecurityMode());
+    }
+}
Index: vendor/branch/5058A_Telefonica/frameworks/base/packages/SettingsProvider/res/values/defaults.xml
===================================================================
--- vendor/branch/5058A_Telefonica/frameworks/base/packages/SettingsProvider/res/values/defaults.xml	(revision 0)
+++ vendor/branch/5058A_Telefonica/frameworks/base/packages/SettingsProvider/res/values/defaults.xml	(revision 4654)
@@ -0,0 +1,240 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/**
+ * Copyright (c) 2009, The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<resources>
+    <bool name="def_dim_screen">true</bool>
+    <integer name="def_screen_off_timeout">60000</integer>
+    <integer name="def_sleep_timeout">-1</integer>
+    <!-- add  for battery percentage -->
+    <integer name="battery_power_percentage_enable">1</integer>
+    <bool name="def_airplane_mode_on">false</bool>
+    <bool name="def_theater_mode_on">false</bool>
+    <!-- Comma-separated list of bluetooth, wifi, and cell. -->
+    <string name="def_airplane_mode_radios" translatable="false">cell,bluetooth,wifi,nfc,wimax</string>
+    <string name="airplane_mode_toggleable_radios" translatable="false">bluetooth,wifi,nfc</string>
+    <string name="def_bluetooth_disabled_profiles" translatable="false">0</string>
+    <bool name="def_auto_time">true</bool>
+    <bool name="def_auto_time_zone">true</bool>
+    <bool name="def_accelerometer_rotation">true</bool>
+    <!-- Default screen brightness, from 0 to 255.  102 is 40%. -->
+    <integer name="def_screen_brightness">102</integer>
+    <bool name="def_screen_brightness_automatic_mode">true</bool>
+    <fraction name="def_window_animation_scale">100%</fraction>
+    <fraction name="def_window_transition_scale">100%</fraction>
+    <bool name="def_haptic_feedback">true</bool>
+
+    <bool name="def_bluetooth_on">false</bool>
+    <bool name="def_wifi_display_on">false</bool>
+    <bool name="def_install_non_market_apps">false</bool>
+    <bool name="def_package_verifier_enable">true</bool>
+    <!-- Comma-separated list of location providers.
+         Network location is off by default because it requires
+         user opt-in via Setup Wizard or Settings.
+    -->
+    <string name="def_location_providers_allowed" translatable="false">network</string>
+    <bool name="assisted_gps_enabled">true</bool>
+    <bool name="def_netstats_enabled">true</bool>
+    <bool name="def_usb_mass_storage_enabled">true</bool>
+    <bool name="def_wifi_on">false</bool>
+    <!-- 0 == never, 1 == only when plugged in, 2 == always -->
+    <integer name="def_wifi_sleep_policy">2</integer>
+    <bool name="def_networks_available_notification_on">true</bool>
+
+    <bool name="def_backup_enabled">false</bool>
+    <string name="def_backup_transport" translatable="false">android/com.android.internal.backup.LocalTransport</string>
+
+    <!-- Default value for whether or not to pulse the notification LED when there is a
+         pending notification -->
+    <bool name="def_notification_pulse">true</bool>
+
+    <bool name="def_mount_play_notification_snd">true</bool>
+    <bool name="def_mount_ums_autostart">false</bool>
+    <bool name="def_mount_ums_prompt">true</bool>
+    <bool name="def_mount_ums_notify_enabled">true</bool>
+
+    <!-- user interface sound effects -->
+    <integer name="def_power_sounds_enabled">1</integer>
+    <string name="def_low_battery_sound" translatable="false">/system/media/audio/ui/LowBattery.ogg</string>
+    <integer name="def_dock_sounds_enabled">0</integer>
+    <string name="def_desk_dock_sound" translatable="false">/system/media/audio/ui/Dock.ogg</string>
+    <string name="def_desk_undock_sound" translatable="false">/system/media/audio/ui/Undock.ogg</string>
+    <string name="def_car_dock_sound" translatable="false">/system/media/audio/ui/Dock.ogg</string>
+    <string name="def_car_undock_sound" translatable="false">/system/media/audio/ui/Undock.ogg</string>
+    <integer name="def_lockscreen_sounds_enabled">1</integer>
+    <string name="def_lock_sound" translatable="false">/system/media/audio/ui/Lock.ogg</string>
+    <string name="def_unlock_sound" translatable="false">/system/media/audio/ui/Unlock.ogg</string>
+    <string name="def_trusted_sound" translatable="false">/system/media/audio/ui/Trusted.ogg</string>
+    <string name="def_wireless_charging_started_sound" translatable="false">/system/media/audio/ui/WirelessChargingStarted.ogg</string>
+
+    <bool name="def_lockscreen_disabled">false</bool>
+    <bool name="def_device_provisioned">false</bool>
+    <integer name="def_dock_audio_media_enabled">1</integer>
+
+    <!-- Notifications use ringer volume -->
+    <bool name="def_notifications_use_ring_volume">true</bool>
+
+    <!-- Default for Settings.System.VIBRATE_IN_SILENT -->
+    <bool name="def_vibrate_in_silent">true</bool>
+
+    <!-- Default for Settings.Secure.ACCESSIBILITY_SCRIPT_INJECTION -->
+    <bool name="def_accessibility_script_injection">false</bool>
+
+    <!-- Default for Settings.Secure.ACCESSIBILITY_SPEAK_PASSWORD -->
+    <bool name="def_accessibility_speak_password">false</bool>
+
+    <!-- Default for Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS -->
+    <string name="def_accessibility_web_content_key_bindings" translatable="false">
+            <!-- DPAD/Trackball UP - traverse previous on current axis and send an event. -->
+            0x13=0x01000100;
+            <!-- DPAD/Trackball DOWN - traverse next on current axis and send an event. -->
+            0x14=0x01010100;
+            <!-- DPAD/Trackball LEFT - traverse previous on the character navigation axis and send event. -->
+            0x15=0x02000001;
+            <!-- DPAD/Trackball RIGHT - traverse next on the character navigation axis end send event. -->
+            0x16=0x02010001;
+            <!-- Alt+DPAD/Trackball UP - go to the top of the document. -->
+            0x200000013=0x02000601;
+            <!-- Alt+DPAD/Trackball DOWN - go to the bottom of the document. -->
+            0x200000014=0x02010601;
+            <!-- Alt+DPAD/Trackball LEFT - transition from an axis to another and sends an event.-->
+            <!-- Axis transitions: 2 -> 1; -->
+            0x200000015=0x03020101;
+            <!-- Alt+DPAD/Trackball RIGHT - transition from an axis to another and sends an event. -->
+            <!-- Axis transitions:  1 -> 2; -->
+            0x200000016=0x03010201;
+            <!-- Alt+g - go to the previous heading and send an event. -->
+            0x200000023=0x02000301;
+            <!-- Alt+h - go to the next heading and send an event. -->
+            0x200000024=0x02010301;
+            <!-- Alt+COMMA - transition to sentence navigation axis and send an event. -->
+            <!-- Axis transitions:  7 -> 2; -->
+            0x200000037=0x03070201;
+            <!-- Alt+PERIOD - transition to default web view behavior axis and send an event. -->
+            <!-- Axis transitions:  0 -> 7; 1 - > 7; 2 -> 7; -->
+            0x200000038=0x03000701:0x03010701:0x03020701;
+    </string>
+
+    <!-- Default for Settings.Secure.ACCESSIBILITY_SCRIPT_INJECTION_URL -->
+    <string name="def_accessibility_screen_reader_url" translatable="false">
+        https://ssl.gstatic.com/accessibility/javascript/android/AndroidVox_v1.js
+    </string>
+
+    <!-- Default for Settings.Secure.TOUCH_EXPLORATION_ENABLED -->
+    <bool name="def_touch_exploration_enabled">false</bool>
+
+    <!-- Default value for Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE -->
+    <fraction name="def_accessibility_display_magnification_scale">200%</fraction>
+
+    <!-- Default value for Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED -->
+    <bool name="def_accessibility_display_magnification_enabled">false</bool>
+
+    <!-- Default value for Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_AUTO_UPDATE -->
+    <bool name="def_accessibility_display_magnification_auto_update">true</bool>
+
+    <!-- Default for Settings.System.USER_ROTATION -->
+    <integer name="def_user_rotation">0</integer>
+
+    <!-- Default for Settings.Secure.DOWNLOAD_MAX_BYTES_OVER_MOBILE. <=0 if no limit -->
+    <integer name="def_download_manager_max_bytes_over_mobile">-1</integer>
+    <!-- Default for Settings.Secure.DOWNLOAD_RECOMMENDED_MAX_BYTES_OVER_MOBILE. <=0 if no limit -->
+    <integer name="def_download_manager_recommended_max_bytes_over_mobile">-1</integer>
+
+    <!-- Default for Settings.Secure.LONG_PRESS_TIMEOUT_MILLIS -->
+    <integer name="def_long_press_timeout_millis">400</integer>
+
+    <!-- Default for Settings.Secure.SHOW_IME_WITH_HARD_KEYBOARD -->
+    <bool name="def_show_ime_with_hard_keyboard">false</bool>
+
+    <!-- Default for Settings.System.POINTER_SPEED -->
+    <integer name="def_pointer_speed">0</integer>
+
+    <!-- Default for DTMF tones enabled -->
+    <bool name="def_dtmf_tones_enabled">true</bool>
+    <!-- Default for UI touch sounds enabled -->
+    <bool name="def_sound_effects_enabled">true</bool>
+
+    <!-- Development settings -->
+    <bool name="def_stay_on_while_plugged_in">false</bool>
+
+    <!-- Number of retries for connecting to DHCP.
+         Value here is the same as WifiStateMachine.DEFAULT_MAX_DHCP_RETRIES -->
+    <integer name="def_max_dhcp_retries">9</integer>
+
+    <!-- Default for Settings.Secure.USER_SETUP_COMPLETE -->
+    <bool name="def_user_setup_complete">false</bool>
+
+    <!-- Default for Settings.Global.LOW_BATTERY_SOUND_TIMEOUT.
+         0 means no timeout; battery sounds will always play
+         >0 is milliseconds of screen-off time after which battery sounds will not play -->
+    <integer name="def_low_battery_sound_timeout">0</integer>
+
+    <!-- Initial value for the Settings.Secure.IMMERSIVE_MODE_CONFIRMATIONS setting,
+         which is a comma separated list of packages that no longer need confirmation
+         for immersive mode.
+         Override to disable immersive mode confirmation for certain packages. -->
+    <string name="def_immersive_mode_confirmations" translatable="false"></string>
+
+    <!-- Default for Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE -->
+    <integer name="def_wifi_scan_always_available">0</integer>
+
+    <!-- Default for Settings.Secure.LOCK_SCREEN_SHOW_NOTIFICATIONS, 1==on -->
+    <integer name="def_lock_screen_show_notifications">1</integer>
+
+    <!-- Default for Settings.Secure.LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS -->
+    <bool name="def_lock_screen_allow_private_notifications">true</bool>
+
+    <!-- Default for Settings.Global.HEADS_UP_NOTIFICATIONS_ENABLED, 1==on -->
+    <integer name="def_heads_up_enabled">1</integer>
+
+    <!-- Default for Settings.Global.DEVICE_NAME $1=MANUFACTURER $2=MODEL-->
+    <string name="def_device_name">%1$s %2$s</string>
+
+    <!-- Default for Settings.Global.DEVICE_NAME $1=MODEL-->
+    <string name="def_device_name_simple">%1$s</string>
+
+    <!-- Default for Settings.Secure.WAKE_GESTURE_ENABLED -->
+    <bool name="def_wake_gesture_enabled">true</bool>
+
+    <!-- Default state of tap to wake -->
+    <bool name="def_double_tap_to_wake">true</bool>
+
+    <!-- Default for Settings.Secure.NFC_PAYMENT_COMPONENT -->
+    <string name="def_nfc_payment_component"></string>
+
+    <!-- Default setting for ability to add users from the lock screen -->
+    <bool name="def_add_users_from_lockscreen">false</bool>
+    
+    <!-- ADD-S By Justin.Shen for Hide/Show navigation-bar -->
+    <integer name="def_navigation_bar_fixed_status">1</integer>
+    <integer name="def_navigation_bar_layout">0</integer>
+    <integer name="def_navigation_bar_background_index">0</integer>
+    <integer name="def_navigation_bar_background_color">0x00000000</integer>
+	
+	<string name="enabled_input_methods" translatable="false">com.google.android.inputmethod.latin/com.android.inputmethod.latin.LatinIME</string>
+	<string name="def_input_method">com.google.android.inputmethod.latin/com.android.inputmethod.latin.LatinIME</string>
+	
+	
+    <!-- ADD-E By Justin.Shen for Hide/Show navigation-bar -->
+	
+	<!-- Add for unlock device by touch fingerprint sensor start -->
+	<integer name="def_fingerprint_unlock_device">1</integer>
+	<!-- Add for unlock device by touch fingerprint sensor end -->
+	<!-- Add for take photo/video by touch fingerprint sensor start -->
+	<integer name="def_fingerprin_take_photo_video">1</integer>
+	<!-- Add for take photo/video by touch fingerprint sensor end -->
+</resources>
