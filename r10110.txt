Index: vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/android/settings/WakeService.java
===================================================================
--- vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/android/settings/WakeService.java	(revision 0)
+++ vendor/branch/5058I_ALRU/packages/apps/Settings/src/com/android/settings/WakeService.java	(revision 10110)
@@ -0,0 +1,178 @@
+package com.android.settings;
+
+import android.app.Service;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.os.PowerManager;
+import android.os.PowerManager.WakeLock;
+import android.os.SystemClock;
+import android.util.Log;
+
+/**
+ * Created by Administrator on 2017/11/25.
+ */
+public class WakeService extends Service implements SensorEventListener {
+    float x1, y1, z1;
+    float x2, y2, z2,z3;
+    private SensorManager mSensorManager;
+    private WakeLock mWakeLock;
+    private PowerManager manager;
+    boolean isScreenOff = false;
+    private String TAG = "whj1";
+    Context myapp = this;
+    public BroadcastReceiver mReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+
+            if (!intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) {
+                return;
+            } else if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) {
+                isScreenOff = true;
+                Log.d(TAG, "onReceive: ");
+            }
+            if (mSensorManager != null) {// 取消监听后重写监听，以保持后台运行
+                mSensorManager.unregisterListener(WakeService.this);
+                mSensorManager
+                        .registerListener(
+                                WakeService.this,
+                                mSensorManager
+                                        .getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
+                                SensorManager.SENSOR_DELAY_NORMAL);
+            }
+        }
+    };
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        Log.d(TAG, "onCreate: ");
+        mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
+        manager = (PowerManager) getSystemService(Context.POWER_SERVICE);
+        mWakeLock = manager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
+                "AccleratePersist");// CPU保存运行
+        IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_ON);// 屏幕熄掉后依然运行
+        filter.addAction(Intent.ACTION_SCREEN_OFF);
+        mSensorManager.registerListener(this,
+                mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
+                SensorManager.SENSOR_DELAY_NORMAL);
+        registerReceiver(mReceiver, filter);
+    }
+
+    @Override
+    public void onAccuracyChanged(Sensor arg0, int arg1) {
+        // TODO Auto-generated method stub
+    }
+
+    @Override
+    public void onSensorChanged(SensorEvent arg0) {
+        // TODO Auto-generated method stub
+        boolean x, y, z;
+//        Log.d("whj1", "onSensorChanged: ");
+        if (arg0.values[2] > 10000) {
+            Log.d(TAG, "sensor skip");
+            return;
+        }
+        x = arg0.values[0] < 3 && arg0.values[0] > -3;
+        y = arg0.values[1] > 6.5 && arg0.values[1] < 10;
+        z = arg0.values[2] < 7;
+        if (arg0.values[0] > 0) {
+            if (x1 > arg0.values[0]) {
+                x2 = x1 - arg0.values[0];
+                x1 = arg0.values[0];
+            } else {
+                x2 = arg0.values[0] - x1;
+            }
+        } else {
+            if (x1 > arg0.values[0]) {
+                x2 = x1 - arg0.values[0];
+                x1=arg0.values[0];
+            } else {
+                x2 = arg0.values[0] - x1;
+            }
+        }
+        if (arg0.values[1] > 0) {
+            if (y1 > arg0.values[1]) {
+                y2 = y1 - arg0.values[1];
+            } else {
+                y2 = arg0.values[1] - y1;
+                y1 = arg0.values[1];
+            }
+        }
+        if (arg0.values[2] > 0) {
+            if (z1 > arg0.values[2]) {
+                z2 = z1 - arg0.values[2];
+            } else {
+                z2 = arg0.values[2] - z1;
+                z1 = arg0.values[2];
+            }
+            z3= z3 + z2;
+        } else {
+            if (z1>arg0.values[2]){
+                z3=z1-arg0.values[2];
+                z1=arg0.values[2];
+            }else {
+                z3=arg0.values[2]-z1;
+            }
+        }
+        if (isScreenOff) {
+            if (x && y && z && 10 > y2 && y2 > 7 && z2 < 8 && z2 > 4) {
+                x1 = 0;
+                y1 = 0;
+                z1 = 0;
+                y2 = 0;
+                z2 = 0;
+                z3=0;x2=0;
+                mWakeLock = manager.newWakeLock(
+                        PowerManager.FULL_WAKE_LOCK
+                                | PowerManager.ACQUIRE_CAUSES_WAKEUP
+                                | PowerManager.ON_AFTER_RELEASE,
+                        "SimpleTimer");
+                mWakeLock.acquire(6000);
+                isScreenOff = false;
+            } else if (z3 > 12 && x2 > 8) {
+                z3=0;x2=0; x1 = 0;
+                y1 = 0;
+                z1 = 0;
+                y2 = 0;
+                z2 = 0;
+                mWakeLock = manager.newWakeLock(
+                        PowerManager.FULL_WAKE_LOCK
+                                | PowerManager.ACQUIRE_CAUSES_WAKEUP
+                                | PowerManager.ON_AFTER_RELEASE,
+                        "SimpleTimer");
+                mWakeLock.acquire(6000);
+                isScreenOff = false;
+            }
+        }else if (!isScreenOff&&arg0.values[2]<-9){
+            x1 = 0;
+            y1 = 0;
+            z1 = 0;
+            y2 = 0;
+            z2 = 0;
+            z3=0;x2=0;
+            manager.goToSleep(SystemClock.uptimeMillis());
+        }
+    }
+
+    @Override
+    public IBinder onBind(Intent arg0) {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        Log.d(TAG, "onDestroy: ");
+        mSensorManager.unregisterListener(WakeService.this);
+        unregisterReceiver(mReceiver);
+    }
+}
